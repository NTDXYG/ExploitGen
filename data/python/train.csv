raw_nl,temp_nl,raw_code,temp_code
"get the value under the 'CONTENT_TYPE' key of environ dictionary, if the key doesnt exist get the empty string,","get value under var0 key of environ dict, if key doesnt exist get empty string,","_ , content_params = cgi . parse_header ( environ . get ( 'CONTENT_TYPE' , '' ) )","_ , content_params = cgi . parse_header ( environ . get ( var0 , '' ) )"
"call the method os.path.splitext with an argument self.file, assign the result to _ and file_ext.",call method os.path.splitext with argument var0 assign result to _ and var1 ,"_ , file_ext = os . path . splitext ( self . file )","_ , var1 = os . path . splitext ( var0 )"
"call the method cgi.parse_header with an argument content_disposition, assign the result to _ and params, respectively.",call method cgi var1 with argument var2 assign result to _ and var4 respectively.,"_ , params = cgi . parse_header ( content_disposition )","_ , var4 = cgi . var1 ( var2 )"
"split into two parts token.contents by None, substitute the parts for _ and rest, respectively.","split into two parts var0 by var1 substitute parts for var2 and rest, respectively.","_ , rest = token . contents . split ( None , 1 )","var2 , rest = var0 . split ( var1 , 1 )"
"call the function os.path.basename with an argument fixture_file, use the result as an argument for the call to the method,","call function os.path.basename with argument var0 use result as argument for call to method,","_ , ser_fmt , cmp_fmt = self . parse_name ( os . path . basename ( fixture_file ) )","_ , ser_fmt , cmp_fmt = self . parse_name ( os . path . basename ( var0 ) )"
substitute v for value under the k-th element of m key of _ dictionary.,substitute v for value under k-th element of m key of var0 dict.,_ [ m [ k ] ] = v,var0 [ m [ k ] ] = v
_ is an empty dictionary.,var0 is empty dict.,_ = { },var0 = { }
"__all__ a tuple containing strings: 'Field', 'CharField', 'IntegerField', 'DateField', 'TimeField', 'DateTimeField', 'RegexField',","var0 tuple containing strings: var1, var2, var5, var8, var11, var14, var17,","__all__ = ( 'Field' , 'CharField' , 'IntegerField' , 'DateField' , 'TimeField' , 'DateTimeField' , 'RegexField' , 'EmailField' , 'FileField' , 'ImageField' , 'URLField' , 'BooleanField' , 'NullBooleanField' , 'ChoiceField' , 'MultipleChoiceField' , 'ComboField' , 'MultiValueField' , 'FloatField' , 'DecimalField' , 'SplitDateTimeField' , 'IPAddressField' , 'GenericIPAddressField' , 'FilePathField' , 'SlugField' , 'TypedChoiceField' , 'TypedMultipleChoiceField' )","var0 = ( var1 , 'CharField' , 'IntegerField' , 'DateField' , 'TimeField' , 'DateTimeField' , 'RegexField' , 'EmailField' , 'FileField' , 'ImageField' , 'URLField' , 'BooleanField' , 'NullBooleanField' , 'ChoiceField' , 'MultipleChoiceField' , 'ComboField' , 'MultiValueField' , 'FloatField' , 'DecimalField' , 'SplitDateTimeField' , 'IPAddressField' , 'GenericIPAddressField' , 'FilePathField' , 'SlugField' , 'TypedChoiceField' , 'TypedMultipleChoiceField' )"
"__all__ is a tuple of strings: 'Media', 'MediaDefiningClass', 'Widget', 'TextInput', 'EmailInput', 'URLInput', 'NumberInput',","var0 is tuple of strings: var1, var2, var5, var7, var10, var13, var16,","__all__ = ( 'Media' , 'MediaDefiningClass' , 'Widget' , 'TextInput' , 'EmailInput' , 'URLInput' , 'NumberInput' , 'PasswordInput' , 'HiddenInput' , 'MultipleHiddenInput' , 'ClearableFileInput' , 'FileInput' , 'DateInput' , 'DateTimeInput' , 'TimeInput' , 'Textarea' , 'CheckboxInput' , 'Select' , 'NullBooleanSelect' , 'SelectMultiple' , 'RadioSelect' , 'CheckboxSelectMultiple' , 'MultiWidget' , 'SplitDateTimeWidget' , 'SplitHiddenDateTimeWidget' , )","var0 = ( var1 , 'MediaDefiningClass' , 'Widget' , 'TextInput' , 'EmailInput' , 'URLInput' , 'NumberInput' , 'PasswordInput' , 'HiddenInput' , 'MultipleHiddenInput' , 'ClearableFileInput' , 'FileInput' , 'DateInput' , 'DateTimeInput' , 'TimeInput' , 'Textarea' , 'CheckboxInput' , 'Select' , 'NullBooleanSelect' , 'SelectMultiple' , 'RadioSelect' , 'CheckboxSelectMultiple' , 'MultiWidget' , 'SplitDateTimeWidget' , 'SplitHiddenDateTimeWidget' )"
"__all__ is a tuple containing strings: 'ModelForm', 'BaseModelForm', 'model_to_dict', 'fields_for_model', 'save_instance',","var0 is tuple containing strings: var1, var2, var5, var8, var11,","__all__ = ( 'ModelForm' , 'BaseModelForm' , 'model_to_dict' , 'fields_for_model' , 'save_instance' , 'ModelChoiceField' , 'ModelMultipleChoiceField' , 'ALL_FIELDS' , 'BaseModelFormSet' , 'modelformset_factory' , 'BaseInlineFormSet' , 'inlineformset_factory' , )","var0 = ( var1 , 'BaseModelForm' , 'model_to_dict' , 'fields_for_model' , 'save_instance' , 'ModelChoiceField' , 'ModelMultipleChoiceField' , 'ALL_FIELDS' , 'BaseModelFormSet' , 'modelformset_factory' , 'BaseInlineFormSet' , 'inlineformset_factory' )"
__all__is an tuple with 2 elements: strings 'BaseForm' and 'Form'.,var0 tuple with 2 elements: strings var1 and var2.,"__all__ = ( 'BaseForm' , 'Form' )","__all__ = var1 , 'Form'"
"__all__ is a tuple containing strings 'BaseFormSet', 'formset_factory' and 'all_valid'.","var0 is tuple containing strings var1, var2 and var5.","__all__ = ( 'BaseFormSet' , 'formset_factory' , 'all_valid' )","var0 = var1 , 'formset_factory' , 'all_valid'"
"__all__ is a tuple containing strings: 'LOCK_EX', 'LOCK_SH', 'LOCK_NB', 'lock' and 'unlock'.","var0 is tuple containing strings: var1, var2, var5, var8 and var9.","__all__ = ( 'LOCK_EX' , 'LOCK_SH' , 'LOCK_NB' , 'lock' , 'unlock' )","var0 = var1 , 'LOCK_SH' , 'LOCK_NB' , 'lock' , 'unlock'"
"__all__ is an tuple with 3 elements: strings 'MultiPartParser', 'MultiPartParserError' and 'InputStreamExhausted'.","var0 is tuple with 3 elements: strings var1, var2 and var5.","__all__ = ( 'MultiPartParser' , 'MultiPartParserError' , 'InputStreamExhausted' )","var0 = var1 , 'MultiPartParserError' , 'InputStreamExhausted'"
"__all__ is a tuple, containing strings 'NamedTemporaryFile' and 'gettempdir'.","var0 is tuple, containing strings var1 and var2.","__all__ = ( 'NamedTemporaryFile' , 'gettempdir' , )","var0 = var1 , 'gettempdir'"
__all__ is an tuple containing string 'SelectDateWidget'.,var0 is tuple containing string var1.,"__all__ = ( 'SelectDateWidget' , )","var0 = var1 ,"
"__all__ is a tuple containing strings: 'Storage', 'FileSystemStorage', 'DefaultStorage' and 'default_storage'.","var0 is tuple containing strings: var1, var2, var5 and var8.","__all__ = ( 'Storage' , 'FileSystemStorage' , 'DefaultStorage' , 'default_storage' )","var0 = var1 , 'FileSystemStorage' , 'DefaultStorage' , 'default_storage'"
"import_library and libraries.   __all__  is a tuple containing 4 strings: 'Template', 'Context', 'RequestContext' and 'compile_string'.","var0 and libraries var2 __all__ is tuple containing 4 strings: var3, var4, var6 and var9.","__all__ = ( 'Template' , 'Context' , 'RequestContext' , 'compile_string' )","__all__ =(var3,var1'Context',var1'RequestContext',var1'compile_string')"
"__all__ is a tuple containing strings: 'UploadedFile', 'TemporaryUploadedFile', 'InMemoryUploadedFile' and 'SimpleUploadedFile'.","var0 is tuple containing strings: var1, var2, var5 and var8.","__all__ = ( 'UploadedFile' , 'TemporaryUploadedFile' , 'InMemoryUploadedFile' , 'SimpleUploadedFile' )","var0 = ( var1 , 'TemporaryUploadedFile' , 'InMemoryUploadedFile' , 'SimpleUploadedFile' )"
__all__ is a tuple containing 2 initial elements: strigs 'WSGIServer' and 'WSGIRequestHandler'.,var0 is tuple containing 2 initial elements: var1 var2 and var3.,"__all__ = ( 'WSGIServer' , 'WSGIRequestHandler' )","var0 = var2 , 'WSGIRequestHandler'"
"__all__ is an list containing strings: 'activate', 'deactivate', 'override', 'deactivate_all', 'get_language',","var0 is list containing strings: var1, var2, var3, var4, var7,","__all__ = [ 'activate' , 'deactivate' , 'override' , 'deactivate_all' , 'get_language' , 'get_language_from_request' , 'get_language_info' , 'get_language_bidi' , 'check_for_language' , 'to_locale' , 'templatize' , 'string_concat' , 'gettext' , 'gettext_lazy' , 'gettext_noop' , 'ugettext' , 'ugettext_lazy' , 'ugettext_noop' , 'ngettext' , 'ngettext_lazy' , 'ungettext' , 'ungettext_lazy' , 'pgettext' , 'pgettext_lazy' , 'npgettext' , 'npgettext_lazy' , 'LANGUAGE_SESSION_KEY' , ]","var0 = [ var1 , 'deactivate' , 'override' , 'deactivate_all' , 'get_language' , 'get_language_from_request' , 'get_language_info' , 'get_language_bidi' , 'check_for_language' , 'to_locale' , 'templatize' , 'string_concat' , 'gettext' , 'gettext_lazy' , 'gettext_noop' , 'ugettext' , 'ugettext_lazy' , 'ugettext_noop' , 'ngettext' , 'ngettext_lazy' , 'ungettext' , 'ungettext_lazy' , 'pgettext' , 'pgettext_lazy' , 'npgettext' , 'npgettext_lazy' , 'LANGUAGE_SESSION_KEY' ]"
"DEFAULT_ATTACHMENT_MIME_TYPE, make_msgid, BadHeaderError and forbid_multi_line_headers into default name space.   __all__ is a list of strings, 'CachedDnsName', 'DNS_NAME', 'EmailMessage', 'EmailMultiAlternatives', 'SafeMIMEText',","var0 var1 var3 and var5 into default name space var7 var8 is list of strings, var9, var10, var13, var16, var19,","__all__ = [ 'CachedDnsName' , 'DNS_NAME' , 'EmailMessage' , 'EmailMultiAlternatives' , 'SafeMIMEText' , 'SafeMIMEMultipart' , 'DEFAULT_ATTACHMENT_MIME_TYPE' , 'make_msgid' , 'BadHeaderError' , 'forbid_multi_line_headers' , 'get_connection' , 'send_mail' , 'send_mass_mail' , 'mail_admins' , 'mail_managers' , ]","var8 = [ var9 , 'DNS_NAME' , 'EmailMessage' , 'EmailMultiAlternatives' , 'SafeMIMEText' , 'SafeMIMEMultipart' , 'var0' , 'var1' , 'var3' , 'var5' , 'get_connection' , 'send_mail' , 'send_mass_mail' , 'mail_admins' , 'mail_managers' ]"
"__all__ is a list containing next strings, 'CheckMessage', 'Debug', 'Info', 'Warning', 'Error', 'Critical',","var0 is list containing next strings, var1, var2, var4, var6, var8, var10,","__all__ = [ 'CheckMessage' , 'Debug' , 'Info' , 'Warning' , 'Error' , 'Critical' , 'DEBUG' , 'INFO' , 'WARNING' , 'ERROR' , 'CRITICAL' , 'register' , 'run_checks' , 'tag_exists' , 'Tags' , ]","var0 = [ var1 , 'Debug' , 'Info' , 'Warning' , 'Error' , 'Critical' , 'DEBUG' , 'INFO' , 'WARNING' , 'ERROR' , 'CRITICAL' , 'register' , 'run_checks' , 'tag_exists' , 'Tags' ]"
"__all__ is an list containing 6 elements: 'get_cache', 'cache', 'DEFAULT_CACHE_ALIAS', 'InvalidCacheBackendError',","var0 is list containing 6 elements: var1, var2, var3, var6,","__all__ = [ 'get_cache' , 'cache' , 'DEFAULT_CACHE_ALIAS' , 'InvalidCacheBackendError' , 'CacheKeyWarning' , 'BaseCache' , ]","var0 = [ var1 , 'cache' , 'DEFAULT_CACHE_ALIAS' , 'InvalidCacheBackendError' , 'CacheKeyWarning' , 'BaseCache' ]"
"__all__ is a list of strings, 'SimpleCookie', 'parse_cookie', 'HttpRequest', 'QueryDict', 'RawPostDataException',","var0 is list of strings, var1, var2, var5, var8, var11,","__all__ = [ 'SimpleCookie' , 'parse_cookie' , 'HttpRequest' , 'QueryDict' , 'RawPostDataException' , 'UnreadablePostError' , 'build_request_repr' , 'HttpResponse' , 'StreamingHttpResponse' , 'HttpResponseRedirect' , 'HttpResponsePermanentRedirect' , 'HttpResponseNotModified' , 'HttpResponseBadRequest' , 'HttpResponseForbidden' , 'HttpResponseNotFound' , 'HttpResponseNotAllowed' , 'HttpResponseGone' , 'HttpResponseServerError' , 'Http404' , 'BadHeaderError' , 'fix_location_header' , 'JsonResponse' , 'conditional_content_removal' , ]","var0 = [ var1 , 'parse_cookie' , 'HttpRequest' , 'QueryDict' , 'RawPostDataException' , 'UnreadablePostError' , 'build_request_repr' , 'HttpResponse' , 'StreamingHttpResponse' , 'HttpResponseRedirect' , 'HttpResponsePermanentRedirect' , 'HttpResponseNotModified' , 'HttpResponseBadRequest' , 'HttpResponseForbidden' , 'HttpResponseNotFound' , 'HttpResponseNotAllowed' , 'HttpResponseGone' , 'HttpResponseServerError' , 'Http404' , 'BadHeaderError' , 'fix_location_header' , 'JsonResponse' , 'conditional_content_removal' ]"
"__all__ is a string containing strings: 'UploadFileException', 'StopUpload', 'SkipFile', 'FileUploadHandler',","var0 is string containing strings: var1, var2, var5, var8,","__all__ = [ 'UploadFileException' , 'StopUpload' , 'SkipFile' , 'FileUploadHandler' , 'TemporaryFileUploadHandler' , 'MemoryFileUploadHandler' , 'load_handler' , 'StopFutureHandlers' ]","var0 = [ var1 , 'StopUpload' , 'SkipFile' , 'FileUploadHandler' , 'TemporaryFileUploadHandler' , 'MemoryFileUploadHandler' , 'load_handler' , 'StopFutureHandlers' ]"
"__all__ is a list with 15 elements: strings 'utc', 'get_fixed_timezone', 'get_default_timezone', 'get_default_timezone_name',","var0 is list with 15 elements: strings var1, var2, var5, var8,","__all__ = [ 'utc' , 'get_fixed_timezone' , 'get_default_timezone' , 'get_default_timezone_name' , 'get_current_timezone' , 'get_current_timezone_name' , 'activate' , 'deactivate' , 'override' , 'localtime' , 'now' , 'is_aware' , 'is_naive' , 'make_aware' , 'make_naive' , ]","var0 = [ var1 , 'get_fixed_timezone' , 'get_default_timezone' , 'get_default_timezone_name' , 'get_current_timezone' , 'get_current_timezone_name' , 'activate' , 'deactivate' , 'override' , 'localtime' , 'now' , 'is_aware' , 'is_naive' , 'make_aware' , 'make_naive' ]"
__all__ is a list containing a string 'file_move_safe'.,var0 is list containing string var1.,__all__ = [ 'file_move_safe' ],var0 = [ var1 ]
__all__ is an list containing a string 'File'.,var0 is list containing string var1.,__all__ = [ 'File' ],var0 = [ var1 ]
__all__ is an list with an element 'luhn'.,var0 is list with element var1.,__all__ = [ 'luhn' ],var0 = [ var1 ]
__all__ is an list containing string 'SelectDateWidget'.,var0 is list containing string var1.,__all__ = [ 'SelectDateWidget' ],var0 = [ var1 ]
"__all__ is a list containing a string ""runfastcgi"".",var0 is list containing string var1.,__all__ = [ 'runfastcgi' ],var0 = [ 'runfastcgi' ]
"__author__ is a string ""Benjamin Peterson <benjamin@python.org>"".",var0 is string var1.,__author__ = 'Benjamin Peterson <benjamin@python.org>',var0 = 'Benjamin Peterson <benjamin@python.org>'
"call the function new_method_proxy with an argument bool, substitute the result for __bool__.",call function var0 with argument var1 substitute result for var2 ,__bool__ = new_method_proxy ( bool ),var2 = var0 ( var1 )
"call the function new_method_proxy with an argument bytes, substitute the result for __bytes__.","call function var0 with argument bytes, substitute result for var1 ",__bytes__ = new_method_proxy ( bytes ),var1 = var0 ( bytes )
substitute serialize for __bytes__.,substitute serialize for var0 ,__bytes__ = serialize,var0 = serialize
substitute serialize_headers for __bytes__.,substitute var0 for var1 ,__bytes__ = serialize_headers,var1 = var0
substitute type.__call__ for __call__.,substitute var0 for var1 ,__call__ = type . __call__,var1 = var0
"cal the method operator.attrgetter with an argument string ""__class__"", use the result as an argument for the call to the function,","var0 method var1 with argument string var2, use result as argument for call to function,",__class__ = property ( new_method_proxy ( operator . attrgetter ( '__class__' ) ) ),__class__ = property ( new_method_proxy ( operator . attrgetter ( '__class__' ) ) )
substitute has_header for __contains__.,substitute var0 for var1 ,__contains__ = has_header,var1 = var0
substitute has_key for __contains__.,substitute var0 for var1 ,__contains__ = has_key,var1 = var0
"call the function new_method_proxy with an argument operator.contains, substitute the result for __contains__.",call function var0 with argument var1 substitute result for var2 ,__contains__ = new_method_proxy ( operator . contains ),var2 = var0 ( var1 )
__D is a raw string '(?P<day>\d{2})'.,__D is raw string var0.,__D = r'(?P<day>\d{2})',__D = '(?P<day>\\d{2})'
__D2 is a raw string '(?P<day>[ \d]\d)'.,__D2 is a raw string '(?P<day>[ \d]\d)'.,__D2 = r'(?P<day>[ \d]\d)',__D2 = r'(?P<day>[ \d]\d)'
substitute complain for __delitem__.,substitute complain for var0 ,__delitem__ = complain,var0 = complain
"call the function new_method_proxy with an argument operator.delitem, substitute the result for __delitem__.",call function var0 with argument var1 substitute result for var2 ,__delitem__ = new_method_proxy ( operator . delitem ),var2 = var0 ( var1 )
substitute complain for __delslice__.,substitute complain for var0 ,__delslice__ = complain,var0 = complain
"call the function new_method_proxy with an argument dir, substitute the result for __dir__.",call function var0 with argument var1 substitute result for __dir__.,__dir__ = new_method_proxy ( dir ),__dir__ = var0 ( var1 )
__dispatch is None.,var0 is var1 ,__dispatch = None,var0 = var1
"new_method_proxy, __class__ is an property object created with previous result as an argument.   call the function new_method_proxy with an argument operator.eq, substitute the result for __eq__.","var0 var1 is property object created with previous result as argument var2 call function var0 with argument operator.eq, substitute result for var3 ",__eq__ = new_method_proxy ( operator . eq ),var3 = var0 ( operator . eq )
"call the function new_method_proxy with an argument getattr, substitute the result for __getattr__.",call function var0 with argument var1 substitute result for var2 ,__getattr__ = new_method_proxy ( getattr ),var2 = var0 ( var1 )
"call the function new_method_proxy with an argument operator.getitem, substitute the result for __getitem__.",call function var0 with argument var1 substitute result for var2 ,__getitem__ = new_method_proxy ( operator . getitem ),var2 = var0 ( var1 )
"call the function new_method_proxy with an argument hash, substitute the result for __hash__.","call function var0 with argument hash, substitute result for var1 ",__hash__ = new_method_proxy ( hash ),var1 = var0 ( hash )
substitute complain for __iadd__.,substitute complain for var0 ,__iadd__ = complain,var0 = complain
substitute the result for name.   call the function __import__ with an argument name.,substitute result for name var0 call function var1 with argument name.,__import__ ( name ),var1 ( name )
call the function __import__ with an argument name.,call function var0 with argument name.,__import__ ( name ),var0 ( name )
substitute complain for __imul__.,substitute complain for var0 ,__imul__ = complain,var0 = complain
substitute type.__init__ for __init__.,substitute var0 for var1 ,__init__ = type . __init__,var1 = var0
substitute _iterkeys for __iter__.,substitute var0 for var1 ,__iter__ = _iterkeys,var1 = var0
substitute xreadlines for __iter__.,substitute var0 for var1 ,__iter__ = xreadlines,var1 = var0
"call the function new_method_proxy with an argument len, substitute the result for __len__.",call function var0 with argument var1 substitute result for var2 ,__len__ = new_method_proxy ( len ),var2 = var0 ( var1 )
__M is a raw string '(?P<mon>\w{3})'.,__M is raw string var0.,__M = r'(?P<mon>\w{3})',__M = '(?P<mon>\\w{3})'
"call the function new_method_proxy with an argument operator.ne, substitute the result for __ne__.",call function var0 with argument var1 substitute result for var2 ,__ne__ = new_method_proxy ( operator . ne ),var2 = var0 ( var1 )
"call the function new_method_proxy with an argument bool, substitute the result for __nonzero__.",call function var0 with argument var1 substitute result for var2 ,__nonzero__ = new_method_proxy ( bool ),var2 = var0 ( var1 )
substitute complain for __setitem__.,substitute complain for var0 ,__setitem__ = complain,var0 = complain
"call the function new_method_proxy with an argument operator.setitem, substitute the result for __setitem__.",call function var0 with argument var1 substitute result for var2 ,__setitem__ = new_method_proxy ( operator . setitem ),var2 = var0 ( var1 )
substitute complain for __setslice__.,substitute complain for var0 ,__setslice__ = complain,var0 = complain
__slots__ is a string 'hashvalue'.,var0 is string var1.,__slots__ = 'hashvalue',var0 = var1
"call the function new_method_proxy with an argument str, substitute the result for __str__.",call function var0 with argument var1 substitute result for var2 ,__str__ = new_method_proxy ( str ),var2 = var0 ( var1 )
substitute serialize for __str__.,substitute serialize for var0 ,__str__ = serialize,var0 = serialize
substitute serialize_headers for __str__.,substitute var0 for var1 ,__str__ = serialize_headers,var1 = var0
__T is a raw string '(?P<hour>\d{2}):(?P<min>\d{2}):(?P<sec>\d{2})'.,var0 is raw string var1.,__T = r'(?P<hour>\d{2}):(?P<min>\d{2}):(?P<sec>\d{2})',var0 = '(?P<hour>\\d{2}):(?P<min>\\d{2}):(?P<sec>\\d{2})'
"call the function new_method_proxy with an argument unicode, substitute the result for __unicode__.",call function var0 with argument var1 substitute result for __unicode__.,__unicode__ = new_method_proxy ( unicode ),__unicode__ = var0 ( var1 )
"__version__ is a string ""0.1"".",var0 is string var1.,__version__ = '0.1',var0 = '0.1'
"__version__ is a string ""1.6.1"".",var0 is string var1.,__version__ = '1.6.1',var0 = '1.6.1'
__Y is a raw string '(?P<year>\d{4})'.,__Y is raw string var0.,__Y = r'(?P<year>\d{4})',__Y = '(?P<year>\\d{4})'
__Y2 is a raw string '(?P<year>\d{2})'.,__Y2 is raw string var0.,__Y2 = r'(?P<year>\d{2})',__Y2 = '(?P<year>\\d{2})'
"call the method gettext_module.NullTranslations, substitute the result for _active.value.",call method var0 var2 substitute result for var3 ,_active . value = gettext_module . NullTranslations ( ),var3 = var0 . var2 ( )
"call the method pytz.timezone with an argument timezone, substitute the result for _active.value.",call method var0 with argument var1 substitute result for var2 ,_active . value = pytz . timezone ( timezone ),var2 = var0 ( var1 )
substitute self.old_timezone for _active.value.,substitute self var1 for var2 ,_active . value = self . old_timezone,var2 = self . var1
substitute timezone for _active.value.,substitute var0 for var1 ,_active . value = timezone,var1 = var0
"of the _DJANGO_DEPRECATED_LOCALES dictionary, RemovedInDjango19Warning and stacklevel set to integer 2.   call the function translation with an argument language, substitute the result for _active.value.","of var0 dict var1 and var2 set to integer 2 var3 call function translation with argument language, substitute result for var4 ",_active . value = translation ( language ),var4 = translation ( language )
"call the method local, substitute the result for _active.","call method local, substitute result for var0 ",_active = local ( ),var0 = local ( )
"call the function local, substitute the result for _active.","call function local, substitute result for var0 ",_active = local ( ),var0 = local ( )
"call the function _add_doc with 2 arguments: b and string """"""Byte literal"""""".","call function _add_doc with 2 arguments: b and string var0""Byte literalvar0"".","_add_doc ( b , '''Byte literal''' )","_add_doc ( b , 'var3 literal' )"
"call the function _add_doc with 2 arguments: get_unbound_function and string """"""Get the function out of a possibly unbound function"""""".","call function _add_doc with 2 arguments: var0 and string var2""Get function out of possibly unbound functionvar2"".","_add_doc ( get_unbound_function , '''Get the function out of a possibly unbound function''' )","_add_doc ( var0 , 'var5 the function out of a possibly unbound function' )"
"call the function _add_doc with 2 arguments: reraise and string """"""Reraise an exception."""""".","call function _add_doc with 2 arguments: var0 and string var1""Reraise exception.var1"".","_add_doc ( reraise , '''Reraise an exception.''' )","_add_doc ( var0 , 'var4 an exception.' )"
"call the function _add_doc with 2 arguments: u and string """"""Text literal"""""".","call function _add_doc with 2 arguments: u and string var0""Text literalvar0"".","_add_doc ( u , '''Text literal''' )","_add_doc ( u , 'var3 literal' )"
_anonymous_ is a list containing one string: '_offset_union'.,var0 is list containing one string: var1.,_anonymous_ = [ '_offset_union' ],var0 = [ var1 ]
_anonymous_ is a list containing one string: '_offset'.,var0 is list containing one string: var1.,_anonymous_ = [ '_offset' ],var0 = [ var1 ]
"_assertCountEqual is a strnig ""assertCountEqual"".",_assertCountEqual is var0 var1.,_assertCountEqual = 'assertCountEqual',_assertCountEqual = 'assertCountEqual'
"_assertCountEqual is a strnig ""assertItemsEqual"".",_assertCountEqual is var0 var1.,_assertCountEqual = 'assertItemsEqual',_assertCountEqual = 'assertItemsEqual'
"_assertRaisesRegex is a strnig ""assertRaisesRegex"".",var0 is var1 var2.,_assertRaisesRegex = 'assertRaisesRegex',var0 = 'assertRaisesRegex'
"_assertRaisesRegex is a strnig ""assertRaisesRegexp"".",var0 is var1 var2.,_assertRaisesRegex = 'assertRaisesRegexp',var0 = 'assertRaisesRegexp'
"_assertRegex is a strnig ""assertRegex"".",var0 is var1 var2.,_assertRegex = 'assertRegex',var0 = 'assertRegex'
"_assertRegex is a strnig ""assertRegexpMatches"".",var0 is var1 var2.,_assertRegex = 'assertRegexpMatches',var0 = 'assertRegexpMatches'
"if six.PY2 is true, _BASE64_DECODE_ERROR is TypeError, if not, _BASE64_DECODE_ERROR is binascii.Error.",if six var0 is true var1 is var3 if not var1 is var6 var5 ,_BASE64_DECODE_ERROR = TypeError if six . PY2 else binascii . Error,var1 = var3 if six . var0 else var6 . var5
_BROWSERS_DEPRECATED_LOCALES is an dictionary with 2 initial entries: 'zh-hans' for 'zh-cn' and 'zh-hant' for 'zh-tw'.,var0 is dict with 2 initial entries: var1 for var2 and var4 for var6.,"_BROWSERS_DEPRECATED_LOCALES = { 'zh-cn' : 'zh-hans' , 'zh-tw' : 'zh-hant' , }","var0 = { 'zh-cn' : var1 , 'zh-tw' : 'zh-hant' }"
_builtin_context_processors is a tuple containing a string 'django.core.context_processors.csrf'.,var0 is tuple containing string var1.,"_builtin_context_processors = ( 'django.core.context_processors.csrf' , )","var0 = var1 ,"
append new_filenames to _cached_filenames.,append var0 to _cached_filenames.,_cached_filenames += new_filenames,_cached_filenames += var0
_cached_filenames is an empty list.,_cached_filenames is empty list.,_cached_filenames = [ ],_cached_filenames = [ ]
add elements from new_modules set to _cached_modules set.,add elements from var0 set to _cached_modules set.,_cached_modules = _cached_modules . union ( new_modules ),_cached_modules = _cached_modules . union ( var0 )
_cached_modules is an empty set.,_cached_modules is empty set.,_cached_modules = set ( ),_cached_modules = set ( )
"_CacheInfo is an instance of namedtuple class created with 2 arguments: string ""CacheInfo"" and a list with 4 elements: string 'hits',","_CacheInfo is instance of var0 class created with 2 arguments: string var1 and list with 4 elements: string var2,","_CacheInfo = namedtuple ( 'CacheInfo' , [ 'hits' , 'misses' , 'maxsize' , 'currsize' ] )","_CacheInfo = var0 ( 'CacheInfo' , [ var2 , 'misses' , 'maxsize' , 'currsize' ] )"
__caches is an empty dictionary.,var0 is empty dict.,_caches = { },_caches = { }
_called_from_command_line is boolean False.,_called_from_command_line is boolean var0 ,_called_from_command_line = False,_called_from_command_line = var0
_cookie_allows_colon_in_names is boolean False.,var0 is boolean var1 ,_cookie_allows_colon_in_names = False,var0 = var1
_cookie_allows_colon_in_names is a boolean True.,var0 is boolean var1 ,_cookie_allows_colon_in_names = True,var0 = var1
"call the function http_cookies.SimpleCookie, on the return value call the value_encode method, with the argument character ';',","call function var0 var2 on return value call var4 method, with argument character var6,","_cookie_encodes_correctly = http_cookies . SimpleCookie ( ) . value_encode ( ';' ) == ( ';' , ''\\073'' )","_cookie_encodes_correctly = var0.var2().var4(var6) ==(var6, ''\\073'')"
_dec.__name__ is a string 'method_decorator(%s)' formated with decorator.__class__.__name__.,var0 is string var1 formated with var2 ,_dec . __name__ = 'method_decorator(%s)' % decorator . __class__ . __name__,var0 = var1 % var2
_dec.__name__ is a string 'method_decorator(%s)' formated with decorator.__name__.,var0 is string var1 formated with var2 ,_dec . __name__ = 'method_decorator(%s)' % decorator . __name__,var0 = var1 % var2
"get '_decorated_function' attribute from the func object, substitute it for _dec._decorated_function, if it doesnt exist,","get var0 attribute from func object, substitute it for _dec._decorated_function, if it doesnt exist,","_dec . _decorated_function = getattr ( func , '_decorated_function' , func )","_dec . _decorated_function = getattr ( func , var0 , func )"
_default is None.,var0 is var1 ,_default = None,var0 = var1
"call the function translation with an argument settings.LANGUAGE_CODE, substitute the result for _default.",call function translation with argument settings var0 substitute result for var1 ,_default = translation ( settings . LANGUAGE_CODE ),var1 = translation ( settings . var0 )
"call the function func with 2 arguments: unpacked list resolved_args and unpacked dictionary resolved_kwargs, substitute the result for _dict.",call function var0 with 2 arguments: unpacked list var1 and unpacked dict var2 substitute result for var4 ,"_dict = func ( * resolved_args , ** resolved_kwargs )","var4 = var0 ( * var1 , ** var2 )"
substitute _BROWSERS_DEPRECATED_LOCALES for _DJANGO_DEPRECATED_LOCALES.,substitute var0 for var1 ,_DJANGO_DEPRECATED_LOCALES = _BROWSERS_DEPRECATED_LOCALES,var1 = var0
"call the function re.compile with 2 arguments: string '^([a-z]):' and re.I, substitute the result for _drive_re.","call function var0 with 2 arguments: string '^( [var2]):' and re.I, substitute result for var3 ","_drive_re = re . compile ( '^([a-z]):' , re . I )","var3 = var0 ( '^([var2]):' , re . I )"
_empty_value is an empty string.,var0 is empty string.,_empty_value = '',var0 = ''
_empty_value is an empty list.,var0 is empty list.,_empty_value = [ ],var0 = [ ]
_empty_value is None.,var0 is var1 ,_empty_value = None,var0 = var1
_encoding is None.,var0 is var1 ,_encoding = None,var0 = var1
"call the method re.compile with an argument raw string ""&(#?[xX]?(?:[0-9a-fA-F]+|\w{1,8}));"", substitute the result for _entity_re.","call method var0 with argument raw string var1, substitute result for var4 ","_entity_re = re . compile ( r'&(#?[xX]?(?:[0-9a-fA-F]+|\w{1,8}));' )","var4 = var0 ( '&(#?[var2]?(?:[var3]+|\\w{1,8}));' )"
append filename to _error_files.,append filename to var0 ,_error_files . append ( filename ),var0 . append ( filename )
_error_files is an empty list.,var0 is empty list.,_error_files = [ ],var0 = [ ]
"call the method _ExpatParser.__init__ with arguments self, unpacked list args and unpacked dictionary kwargs.","call method _ExpatParser.__init__ with arguments self, unpacked list var0 and unpacked dict var1 ","_ExpatParser . __init__ ( self , * args , ** kwargs )","_ExpatParser . __init__ ( self , * var0 , ** var1 )"
call the method _ExpatParser.reset with an argumen sefl.,call method var0 with var1 var2 ,_ExpatParser . reset ( self ),var0 ( self )
__expire_info is an empty dictionary.,__expire_info is empty dict.,_expire_info = { },_expire_info = { }
"_fields_ is a list containing 2 tuples: first tuple contains: string '_offset' and _OFFSET, second contains: string 'Pointer' and PVOID.",var0 is list containing 2 tuples: first tuple contains: string var2 and var3 second contains: string var4 and var6 ,"_fields_ = [ ( '_offset' , _OFFSET ) , ( 'Pointer' , PVOID ) ]","var0 = [ ( var2 , var3 ) , ( 'Pointer' , var6 ) ]"
"_fields_ is a list containing 4 tuples: first tuple contains: string 'Internal' and ULONG_PTR,",var0 is list containing 4 tuples: first tuple contains: string var2 and var3 ,"_fields_ = [ ( 'Internal' , ULONG_PTR ) , ( 'InternalHigh' , ULONG_PTR ) , ( '_offset_union' , _OFFSET_UNION ) , ( 'hEvent' , HANDLE ) ]","var0 = [ ( var2 , var3 ) , ( 'InternalHigh' , var3 ) , ( '_offset_union' , _OFFSET_UNION ) , ( 'hEvent' , HANDLE ) ]"
"_fields_ is a list containing 2 tuples: first tuple contains: string 'Offset' and DWORD, second contains: string 'OffsetHigh' and DWORD.",var0 is list containing 2 tuples: first tuple contains: string var2 and var3 second contains: string var7 and var3 ,"_fields_ = [ ( 'Offset' , DWORD ) , ( 'OffsetHigh' , DWORD ) ]","var0 = [ ( var2 , var3 ) , ( 'OffsetHigh' , var3 ) ]"
close the _file file.,close var0 file.,_file . close ( ),var0 . close ( )
write the chunk to the file _file.,write chunk to file var0 ,_file . write ( chunk ),var0 . write ( chunk )
_file is None.,var0 is var1 ,_file = None,var0 = var1
"call the function os.fdopen with arguments fd and mode, substitute it for _file.","call function os.fdopen with arguments var0 and mode, substitute it for var1 ","_file = os . fdopen ( fd , mode )","var1 = os . var0open ( var0 , mode )"
value under the cache_key key of the _format_cache dictionary is None.,value under var0 key of _format_cache dict is var1 ,_format_cache [ cache_key ] = None,_format_cache [ var0 ] = var1
substitute val for the value under the cache_key key of the _format_cache dictionary.,substitute var0 for value under var1 key of _format_cache dict.,_format_cache [ cache_key ] = val,_format_cache [ var1 ] = var0
_format_cache is an empty dictionary.,var0 is empty dict.,_format_cache = { },var0 = { }
_format_modules_cache is an empty dictionary.,var0 is empty dict.,_format_modules_cache = { },var0 = { }
"_func_closure is a string ""__closure__"".",_func_closure is string var0.,_func_closure = '__closure__',_func_closure = '__closure__'
"_func_closure is a string ""func_closure"".",_func_closure is string var0.,_func_closure = 'func_closure',_func_closure = 'func_closure'
"_func_code is a string ""__code__"".",var0 is string var1.,_func_code = '__code__',var0 = '__code__'
"_func_code is a string ""func_code"".",var0 is string var1.,_func_code = 'func_code',var0 = 'func_code'
"_func_defaults is a string ""__defaults__"".",_func_defaults is string var0.,_func_defaults = '__defaults__',_func_defaults = '__defaults__'
"_func_defaults is a string ""func_defaults"".",_func_defaults is string var0.,_func_defaults = 'func_defaults',_func_defaults = 'func_defaults'
"_func_globals is a string ""__globals__"".",var0 is string var1.,_func_globals = '__globals__',var0 = '__globals__'
"_func_globals is a string ""func_globals"".",var0 is string var1.,_func_globals = 'func_globals',var0 = 'func_globals'
"call the function lazy with arguments _get_val and six.text_type, substitute the result for _get_val.",call function lazy with arguments var0 and six var2 substitute result for var0 ,"_get_val = lazy ( _get_val , six . text_type )","var0 = lazy ( var0 , six . var2 )"
substitute frame.f_globals for _globs_.,substitute frame var1 for var2 ,_globs_ = frame . f_globals,var2 = frame . var1
"and dictionary of arbitrary length **kwargs as arguments.   call the initialization method for the base class, _html_parser.HTMLParser.__init__ with self,","and dict of arbitrary length var0 as arguments var1 call initialization method for base class var2 var3 __init__ with self,","_html_parser . HTMLParser . __init__ ( self , convert_charrefs = convert_charrefs , ** kwargs )","var2 . var3 . __init__ ( self , convert_charrefs = convert_charrefs , ** var0 )"
call the initialization method _html_parser.HTMLParser.__init__(self) for the base class.,call initialization method var0 var1 __init__(self) for base class.,_html_parser . HTMLParser . __init__ ( self ),var0 . var1 . __init__ ( self )
"compile the regex from the raw string ""((^|[^%])(%%)*%[sy])"", substitute the result for _illegal_formatting.","compile var0 from raw string ""((^|[^%])(%%)*% [var3])"", substitute result for var4 ",_illegal_formatting = re . compile ( r'((^|[^%])(%%)*%[sy])' ),var4 = re . compile ( '((^|[^%])(%%)*%[var3])' )
"_iteritems is a string ""items"".",var0 is string var1.,_iteritems = 'items',var0 = 'items'
"_iteritems is a string ""iteritems"".",var0 is string var1.,_iteritems = 'iteritems',var0 = 'iteritems'
"_iterkeys is a string ""iterkeys"".",var0 is string var1.,_iterkeys = 'iterkeys',var0 = 'iterkeys'
"_iterkeys is a string ""keys"".",var0 is string var1.,_iterkeys = 'keys',var0 = 'keys'
"_iterlists is a string ""iterlists"".",var0 is string var1.,_iterlists = 'iterlists',var0 = 'iterlists'
"_iterlists is a string ""lists"".",var0 is string var1.,_iterlists = 'lists',var0 = 'lists'
"_iterkeys is a string ""iterkeys"".",var0 is string var1.,_itervalues = 'itervalues',_itervalues = 'itervalues'
"_itervalues is a string ""values"".",var0 is string var1.,_itervalues = 'values',var0 = 'values'
"\\u0027' for integer representation of string '\', '\\u0022' for integer representation of string '""',   '\\u003E' for integer representation of string '>', '\\u003C' for integer representation of string '<',   '\\u0026' for integer representation of string '%', '\\u003D' for integer representation of string '=',   '\\u002D' for integer representation of string '-', '\\u003B' for integer representation of string ';',   '\\u2028' for integer representation of string '\u2028' and '\\u2029' for integer representation of string '\u2029'.   for eery z in range of integers from 0 to 31, update _js_escapes dictionary with '\\u%04X' formated with z,","\\u0027' for integer representation of string '\', '\\u0022' for integer representation of string '""',   '\\u003E' for integer representation of string '>', '\\u003C' for integer representation of string '<',   '\\u0026' for integer representation of string '%', '\\u003D' for integer representation of string '=',   '\\u002D' for integer representation of string '-', '\\u003B' for integer representation of string ';',   '\\u2028' for integer representation of string '\u2028' and '\\u2029' for integer representation of string '\u2029'.   for eery z in range of integers from 0 to 31, update _js_escapes dictionary with '\\u%04X' formated with z,","_js_escapes . update ( ( ord ( '%c' % z ) , '\\u%04X' % z ) for z in range ( 32 ) )","_js_escapes . update ( ( ord ( '%c' % z ) , '\\u%04X' % z ) for z in range ( 32 ) )"
"_js_escapes is a dictionary with 11 initial entries: '\\u005C' for integer representation of string '\\',","var0 is dict with 11 initial entries: var1 for integer representation of string var2,","_js_escapes = {  ord ( '\\' ) : '\\u005C' ,  ord ( '\'' ) : '\\u0027' ,  ord ( ''' ) : '\\u0022' ,  ord ( '>' ) : '\\u003E' ,  ord ( '<' ) : '\\u003C' ,  ord ( '&' ) : '\\u0026' ,  ord ( '=' ) : '\\u003D' ,  ord ( '-' ) : '\\u002D' ,  ord ( ';' ) : '\\u003B' ,  ord ( '\u2028' ) : '\\u2028' ,  ord ( '\u2029' ) : '\\u2029'  }","var0 = {  ord('\\'): '\\u005C',  ord('\''): '\\u0027',  ord('''): '\\u0022',  ord('>'): '\\u003E',  ord('<'): '\\u003C',  ord('&'): '\\u0026',  ord('='): '\\u003D',  ord('-'): '\\u002D',  ord(';'): '\\u003B',  ord('\u2028'): '\\u2028',  ord('\u2029'): '\\u2029'  }"
substitute len for _len.,substitute var0 for var1 ,_len = len,_var0 = var0
call the function _load_serializers.,call function var0 ,_load_serializers ( ),var0 ( )
_localtime is an instance of LocalTimezone class.,var0 is instance of var1 class.,_localtime = LocalTimezone ( ),var0 = var1 ( )
_localtime is None.,var0 is var1 ,_localtime = None,var0 = var1
"call the method pytz.timezone with an argument settings.TIME_ZONE, substitute the result for _localtime.",call method var0 with argument settings var1 substitute result for var2 ,_localtime = pytz . timezone ( settings . TIME_ZONE ),var2 = var0 ( settings . var1 )
__locks is an empty dictionary.,var0 is empty dict.,_locks = { },_locks = { }
substitute _globs_ with an argument _locs_.,substitute _globs_ with argument var0 ,_locs_ = _globs_,var0 = _globs_
substitute if _locs_ is None for _locs_.,substitute if var0 is var2 for var0 ,_locs_ = frame . f_locals,var0 = frame . f_locals
_meta is class Options class instance initialized with table argument.,var0 is class var1 class instance initialized with table argument.,_meta = Options ( table ),var0 = var1 ( table )
"_meth_func is a string ""__func__"".",var0 is string var1.,_meth_func = '__func__',var0 = '__func__'
"_meth_func is a string ""im_func"".",var0 is string var1.,_meth_func = 'im_func',var0 = 'im_func'
"_meth_self is a string ""__self__"".",var0 is string var1.,_meth_self = '__self__',var0 = '__self__'
"_meth_self is a string ""im_self"".",var0 is string var1.,_meth_self = 'im_self',var0 = 'im_self'
"call the method self._resolve, substitute the result for _module.",call method var0 substitute result for var1 ,_module = self . _resolve ( ),var1 = var0 ( )
"_moved_attributes is a list with 55 initial elements, 13 of them are the results of the call to the function MovedAttribute,","_moved_attributes is list with 55 initial elements, 13 of var0 are results of call to function var1 ","_moved_attributes = [ MovedAttribute ( 'cStringIO' , 'cStringIO' , 'io' , 'StringIO' ) , MovedAttribute ( 'filter' , 'itertools' , 'builtins' , 'ifilter' , 'filter' ) , MovedAttribute ( 'filterfalse' , 'itertools' , 'itertools' , 'ifilterfalse' , 'filterfalse' ) , MovedAttribute ( 'input' , '__builtin__' , 'builtins' , 'raw_input' , 'input' ) , MovedAttribute ( 'map' , 'itertools' , 'builtins' , 'imap' , 'map' ) , MovedAttribute ( 'range' , '__builtin__' , 'builtins' , 'xrange' , 'range' ) , MovedAttribute ( 'reload_module' , '__builtin__' , 'imp' , 'reload' ) , MovedAttribute ( 'reduce' , '__builtin__' , 'functools' ) , MovedAttribute ( 'StringIO' , 'StringIO' , 'io' ) , MovedAttribute ( 'UserString' , 'UserString' , 'collections' ) , MovedAttribute ( 'xrange' , '__builtin__' , 'builtins' , 'xrange' , 'range' ) , MovedAttribute ( 'zip' , 'itertools' , 'builtins' , 'izip' , 'zip' ) , MovedAttribute ( 'zip_longest' , 'itertools' , 'itertools' , 'izip_longest' , 'zip_longest' ) , MovedModule ( 'builtins' , '__builtin__' ) , MovedModule ( 'configparser' , 'ConfigParser' ) , MovedModule ( 'copyreg' , 'copy_reg' ) , MovedModule ( 'dbm_gnu' , 'gdbm' , 'dbm.gnu' ) , MovedModule ( 'http_cookiejar' , 'cookielib' , 'http.cookiejar' ) , MovedModule ( 'http_cookies' , 'Cookie' , 'http.cookies' ) , MovedModule ( 'html_entities' , 'htmlentitydefs' , 'html.entities' ) , MovedModule ( 'html_parser' , 'HTMLParser' , 'html.parser' ) , MovedModule ( 'http_client' , 'httplib' , 'http.client' ) , MovedModule ( 'email_mime_multipart' , 'email.MIMEMultipart' , 'email.mime.multipart' ) , MovedModule ( 'email_mime_text' , 'email.MIMEText' , 'email.mime.text' ) , MovedModule ( 'email_mime_base' , 'email.MIMEBase' , 'email.mime.base' ) , MovedModule ( 'BaseHTTPServer' , 'BaseHTTPServer' , 'http.server' ) , MovedModule ( 'CGIHTTPServer' , 'CGIHTTPServer' , 'http.server' ) , MovedModule ( 'SimpleHTTPServer' , 'SimpleHTTPServer' , 'http.server' ) , MovedModule ( 'cPickle' , 'cPickle' , 'pickle' ) , MovedModule ( 'queue' , 'Queue' ) , MovedModule ( 'reprlib' , 'repr' ) , MovedModule ( 'socketserver' , 'SocketServer' ) , MovedModule ( '_thread' , 'thread' , '_thread' ) , MovedModule ( 'tkinter' , 'Tkinter' ) , MovedModule ( 'tkinter_dialog' , 'Dialog' , 'tkinter.dialog' ) , MovedModule ( 'tkinter_filedialog' , 'FileDialog' , 'tkinter.filedialog' ) , MovedModule ( 'tkinter_scrolledtext' , 'ScrolledText' , 'tkinter.scrolledtext' ) , MovedModule ( 'tkinter_simpledialog' , 'SimpleDialog' , 'tkinter.simpledialog' ) , MovedModule ( 'tkinter_tix' , 'Tix' , 'tkinter.tix' ) , MovedModule ( 'tkinter_ttk' , 'ttk' , 'tkinter.ttk' ) , MovedModule ( 'tkinter_constants' , 'Tkconstants' , 'tkinter.constants' ) , MovedModule ( 'tkinter_dnd' , 'Tkdnd' , 'tkinter.dnd' ) , MovedModule ( 'tkinter_colorchooser' , 'tkColorChooser' , 'tkinter.colorchooser' ) , MovedModule ( 'tkinter_commondialog' , 'tkCommonDialog' , 'tkinter.commondialog' ) , MovedModule ( 'tkinter_tkfiledialog' , 'tkFileDialog' , 'tkinter.filedialog' ) , MovedModule ( 'tkinter_font' , 'tkFont' , 'tkinter.font' ) , MovedModule ( 'tkinter_messagebox' , 'tkMessageBox' , 'tkinter.messagebox' ) , MovedModule ( 'tkinter_tksimpledialog' , 'tkSimpleDialog' , 'tkinter.simpledialog' ) , MovedModule ( 'urllib_parse' , __name__ + '.moves.urllib_parse' , 'urllib.parse' ) , MovedModule ( 'urllib_error' , __name__ + '.moves.urllib_error' , 'urllib.error' ) , MovedModule ( 'urllib' , __name__ + '.moves.urllib' , __name__ + '.moves.urllib' ) , MovedModule ( 'urllib_robotparser' , 'robotparser' , 'urllib.robotparser' ) , MovedModule ( 'xmlrpc_client' , 'xmlrpclib' , 'xmlrpc.client' ) , MovedModule ( 'xmlrpc_server' , 'xmlrpclib' , 'xmlrpc.server' ) , MovedModule ( 'winreg' , '_winreg' ) , ]","_moved_attributes = [ var1 ( 'cStringIO' , 'cStringIO' , 'io' , 'StringIO' ) , var1 ( 'filter' , 'itertools' , 'builtins' , 'ifilter' , 'filter' ) , var1 ( 'filterfalse' , 'itertools' , 'itertools' , 'ifilterfalse' , 'filterfalse' ) , var1 ( 'input' , '__builtin__' , 'builtins' , 'raw_input' , 'input' ) , var1 ( 'map' , 'itertools' , 'builtins' , 'imap' , 'map' ) , var1 ( 'range' , '__builtin__' , 'builtins' , 'xrange' , 'range' ) , var1 ( 'reload_module' , '__builtin__' , 'imp' , 'reload' ) , var1 ( 'reduce' , '__builtin__' , 'functools' ) , var1 ( 'StringIO' , 'StringIO' , 'io' ) , var1 ( 'UserString' , 'UserString' , 'collections' ) , var1 ( 'xrange' , '__builtin__' , 'builtins' , 'xrange' , 'range' ) , var1 ( 'zip' , 'itertools' , 'builtins' , 'izip' , 'zip' ) , var1 ( 'zip_longest' , 'itertools' , 'itertools' , 'izip_longest' , 'zip_longest' ) , MovedModule ( 'builtins' , '__builtin__' ) , MovedModule ( 'configparser' , 'ConfigParser' ) , MovedModule ( 'copyreg' , 'copy_reg' ) , MovedModule ( 'dbm_gnu' , 'gdbm' , 'dbm.gnu' ) , MovedModule ( 'http_cookiejar' , 'cookielib' , 'http.cookiejar' ) , MovedModule ( 'http_cookies' , 'Cookie' , 'http.cookies' ) , MovedModule ( 'html_entities' , 'htmlentitydefs' , 'html.entities' ) , MovedModule ( 'html_parser' , 'HTMLParser' , 'html.parser' ) , MovedModule ( 'http_client' , 'httplib' , 'http.client' ) , MovedModule ( 'email_mime_multipart' , 'email.MIMEMultipart' , 'email.mime.multipart' ) , MovedModule ( 'email_mime_text' , 'email.MIMEText' , 'email.mime.text' ) , MovedModule ( 'email_mime_base' , 'email.MIMEBase' , 'email.mime.base' ) , MovedModule ( 'BaseHTTPServer' , 'BaseHTTPServer' , 'http.server' ) , MovedModule ( 'CGIHTTPServer' , 'CGIHTTPServer' , 'http.server' ) , MovedModule ( 'SimpleHTTPServer' , 'SimpleHTTPServer' , 'http.server' ) , MovedModule ( 'cPickle' , 'cPickle' , 'pickle' ) , MovedModule ( 'queue' , 'Queue' ) , MovedModule ( 'reprlib' , 'repr' ) , MovedModule ( 'socketserver' , 'SocketServer' ) , MovedModule ( '_thread' , 'thread' , '_thread' ) , MovedModule ( 'tkinter' , 'Tkinter' ) , MovedModule ( 'tkinter_dialog' , 'Dialog' , 'tkinter.dialog' ) , MovedModule ( 'tkinter_filedialog' , 'FileDialog' , 'tkinter.filedialog' ) , MovedModule ( 'tkinter_scrolledtext' , 'ScrolledText' , 'tkinter.scrolledtext' ) , MovedModule ( 'tkinter_simpledialog' , 'SimpleDialog' , 'tkinter.simpledialog' ) , MovedModule ( 'tkinter_tix' , 'Tix' , 'tkinter.tix' ) , MovedModule ( 'tkinter_ttk' , 'ttk' , 'tkinter.ttk' ) , MovedModule ( 'tkinter_constants' , 'Tkconstants' , 'tkinter.constants' ) , MovedModule ( 'tkinter_dnd' , 'Tkdnd' , 'tkinter.dnd' ) , MovedModule ( 'tkinter_colorchooser' , 'tkColorChooser' , 'tkinter.colorchooser' ) , MovedModule ( 'tkinter_commondialog' , 'tkCommonDialog' , 'tkinter.commondialog' ) , MovedModule ( 'tkinter_tkfiledialog' , 'tkFileDialog' , 'tkinter.filedialog' ) , MovedModule ( 'tkinter_font' , 'tkFont' , 'tkinter.font' ) , MovedModule ( 'tkinter_messagebox' , 'tkMessageBox' , 'tkinter.messagebox' ) , MovedModule ( 'tkinter_tksimpledialog' , 'tkSimpleDialog' , 'tkinter.simpledialog' ) , MovedModule ( 'urllib_parse' , __name__ + '.moves.urllib_parse' , 'urllib.parse' ) , MovedModule ( 'urllib_error' , __name__ + '.moves.urllib_error' , 'urllib.error' ) , MovedModule ( 'urllib' , __name__ + '.moves.urllib' , __name__ + '.moves.urllib' ) , MovedModule ( 'urllib_robotparser' , 'robotparser' , 'urllib.robotparser' ) , MovedModule ( 'xmlrpc_client' , 'xmlrpclib' , 'xmlrpc.client' ) , MovedModule ( 'xmlrpc_server' , 'xmlrpclib' , 'xmlrpc.server' ) , MovedModule ( 'winreg' , '_winreg' ) ]"
_moved_attributes is an empty list.,var0 is empty list.,_moved_attributes = [ ],var0 = [ ]
substitute _moved_attributes for _MovedItems._moved_attributes.,substitute var0 for _MovedItems var0 ,_MovedItems . _moved_attributes = _moved_attributes,_MovedItems . var0 = var0
substitute mtime for the value under the filename key of _mtimes dictionary.,substitute var0 for value under filename key of var1 dict.,_mtimes [ filename ] = mtime,var1 [ filename ] = var0
_mtimes is an empty dictionary.,var0 is empty dict.,_mtimes = { },var0 = { }
_mutable is boolean True.,var0 is boolean var1 ,_mutable = True,var0 = var1
substitute prefix for _prefixes.values.,substitute prefix for var0 ,_prefixes . value = prefix,_prefixes . value = prefix
"call the function local, substitute the result for _prefixes.","call function local, substitute result for var0 ",_prefixes = local ( ),var0 = local ( )
"_PROTECTED_TYPES is a tuple containing next elements, six.integer_types, type of None, type of float, Decimal, detetime.datetime,","var0 is tuple containing next elements, six var2 type of var3 type of float var4 var5 ","_PROTECTED_TYPES = six . integer_types + ( type ( None ) , float , Decimal , datetime . datetime , datetime . date , datetime . time )","var0 = six . var2 + ( type ( var3 ) , float , var4 , datetime . datetime , datetime . date , datetime . time )"
substitute module for the value under the format key of the _serializers dictionary.,substitute module for value under format key of var0 dict.,_serializers [ format ] = module,var0 [ format ] = module
"django.core.serializers.python for ""python"", ""django.core.serializers.json"" for ""json"",   and ""django.core.serializers.pyyaml"" for ""yaml"".   _serializers is an empty dictionary.","var0 for var1, var2 for var5 var6 and var8 for var11 var6 var12 is empty dict.",_serializers = { },var12 = { }
substitute serializers for _serializers.,substitute var0 for var1 ,_serializers = serializers,_var0 = var0
_standard_context_processors is None.,var0 is var1 ,_standard_context_processors = None,var0 = var1
"convert processors elements into a tuple, substitute it for _standard_context_processors.","convert processors elements into tuple, substitute it for var0 ",_standard_context_processors = tuple ( processors ),var0 = tuple ( processors )
"call the function _super with 2 arguments: class SimpleLazyObject and self, call the method __init__ on the result.","call function var0 with 2 arguments: class var1 and self, call method var2 on result.","_super ( SimpleLazyObject , self ) . __init__ ( )","var0 ( var1 , self ) . var2 ( )"
substitute super for _super.,substitute super for var0 ,_super = super,var0 = super
_supported is None.,var0 is var1 ,_supported = None,var0 = var1
"_supported is an instance of OrderedDict class, created with an argument settings.LANGUAGES.","var0 is instance of var1 class, created with argument settings var2 ",_supported = OrderedDict ( settings . LANGUAGES ),var0 = var1 ( settings . var2 )
call the _tc.load method with the 'foo:bar=1' converted to string as an argument.,call _tc.load method with var0 converted to string as argument.,_tc . load ( str ( 'foo:bar=1' ) ),_tc . load ( str ( var0 ) )
"if the tuple result equals to tuple containing character ';' and string '""\\073""', respectively,   assign _cookie_encodes_correctly the boolean True value, otherwise assign it False.   assign return value of the call to the http_cookies.SimpleCookie function to _tc.","if the tuple result equals to tuple containing character ';' and string '""\\073""', respectively,   assign _cookie_encodes_correctly the boolean True value, otherwise assign it False.   assign return value of the call to the http_cookies.SimpleCookie function to _tc.",_tc = http_cookies . SimpleCookie ( ),_tc = http_cookies . SimpleCookie ( )
append templatetag_module to _templatetags_modules.,append var0 to var1 ,_templatetags_modules . append ( templatetag_module ),var1 . append ( var0 )
_templatetags_modules is an empty list.,_templatetags_modules is empty list.,_templatetags_modules = [ ],_templatetags_modules = [ ]
_trans is an instance of Trans class.,var0 is instance of var1 class.,_trans = Trans ( ),var0 = var1 ( )
"_translations dictionary value, under the language key is an instance of DjangoTranslation class, created with an argument language.","var0 dict value, under language key is instance of var1 class, created with argument language.",_translations [ language ] = DjangoTranslation ( language ),var0 [ language ] = var1 ( language )
_translations is an empty dictionary.,var0 is empty dict.,_translations = { },var0 = { }
_upload_handlers is an empty list.,var0 is empty list.,_upload_handlers = [ ],var0 = [ ]
"call the function re.compile with 2 arguments: string '^([a-z])[:|]' and re.I, substitute the result for _url_drive_re.","call function var0 with 2 arguments: string '^( [var2 [var3]) [var3]| [var3]' and re.I, substitute result for var4 ","_url_drive_re = re . compile ( '^([a-z])[:|]' , re . I )","_url_drive_revar3 =var3 revar3.compile(var3'^([var2var3]var3)[var3var3]var3'var3,var3 revar3.Ivar3)"
substitute urlconf_name for _urlconfs.value.,substitute var0 for var1 ,_urlconfs . value = urlconf_name,var1 = var0
"call the function local, substitute the result _urlconf.","call function local, substitute result var0 ",_urlconfs = local ( ),_urlconfs = local ( )
_urllib_error_moved_attributes is a list with 3 elements: result of the call to the function MovedAttribute with 3 arguments:,_urllib_error_moved_attributes is list with 3 elements: result of call to function var0 with 3 arguments:,"_urllib_error_moved_attributes = [ MovedAttribute ( 'URLError' , 'urllib2' , 'urllib.error' ) , MovedAttribute ( 'HTTPError' , 'urllib2' , 'urllib.error' ) , MovedAttribute ( 'ContentTooShortError' , 'urllib' , 'urllib.error' ) , ]","_urllib_error_moved_attributes = [ var0 ( 'URLError' , 'urllib2' , 'urllib.error' ) , var0 ( 'HTTPError' , 'urllib2' , 'urllib.error' ) , var0 ( 'ContentTooShortError' , 'urllib' , 'urllib.error' ) ]"
"_urllib_parse_moved_attributes is a list with 16 elemetns, all of them are the results of the call to the function MovedAttribute with different 3 string arguments.",_urllib_parse_moved_attributes is list with 16 var0 all of var1 are results of call to function var2 with different 3 string arguments.,"_urllib_parse_moved_attributes = [ MovedAttribute ( 'ParseResult' , 'urlparse' , 'urllib.parse' ) , MovedAttribute ( 'SplitResult' , 'urlparse' , 'urllib.parse' ) , MovedAttribute ( 'parse_qs' , 'urlparse' , 'urllib.parse' ) , MovedAttribute ( 'parse_qsl' , 'urlparse' , 'urllib.parse' ) , MovedAttribute ( 'urldefrag' , 'urlparse' , 'urllib.parse' ) , MovedAttribute ( 'urljoin' , 'urlparse' , 'urllib.parse' ) , MovedAttribute ( 'urlparse' , 'urlparse' , 'urllib.parse' ) , MovedAttribute ( 'urlsplit' , 'urlparse' , 'urllib.parse' ) , MovedAttribute ( 'urlunparse' , 'urlparse' , 'urllib.parse' ) , MovedAttribute ( 'urlunsplit' , 'urlparse' , 'urllib.parse' ) , MovedAttribute ( 'quote' , 'urllib' , 'urllib.parse' ) , MovedAttribute ( 'quote_plus' , 'urllib' , 'urllib.parse' ) , MovedAttribute ( 'unquote' , 'urllib' , 'urllib.parse' ) , MovedAttribute ( 'unquote_plus' , 'urllib' , 'urllib.parse' ) , MovedAttribute ( 'urlencode' , 'urllib' , 'urllib.parse' ) , MovedAttribute ( 'splitquery' , 'urllib' , 'urllib.parse' ) , ]","_urllib_parse_moved_attributes = [ var2 ( 'ParseResult' , 'urlparse' , 'urllib.parse' ) , var2 ( 'SplitResult' , 'urlparse' , 'urllib.parse' ) , var2 ( 'parse_qs' , 'urlparse' , 'urllib.parse' ) , var2 ( 'parse_qsl' , 'urlparse' , 'urllib.parse' ) , var2 ( 'urldefrag' , 'urlparse' , 'urllib.parse' ) , var2 ( 'urljoin' , 'urlparse' , 'urllib.parse' ) , var2 ( 'urlparse' , 'urlparse' , 'urllib.parse' ) , var2 ( 'urlsplit' , 'urlparse' , 'urllib.parse' ) , var2 ( 'urlunparse' , 'urlparse' , 'urllib.parse' ) , var2 ( 'urlunsplit' , 'urlparse' , 'urllib.parse' ) , var2 ( 'quote' , 'urllib' , 'urllib.parse' ) , var2 ( 'quote_plus' , 'urllib' , 'urllib.parse' ) , var2 ( 'unquote' , 'urllib' , 'urllib.parse' ) , var2 ( 'unquote_plus' , 'urllib' , 'urllib.parse' ) , var2 ( 'urlencode' , 'urllib' , 'urllib.parse' ) , var2 ( 'splitquery' , 'urllib' , 'urllib.parse' ) ]"
"_urllib_request_moved_attributes is an list with 33 elements, all of them are the results of the call to the function MovedAttribute with 3 different string arguments.","var0 is list with 33 elements, all of var1 are results of call to function var2 with 3 different string arguments.","_urllib_request_moved_attributes = [ MovedAttribute ( 'urlopen' , 'urllib2' , 'urllib.request' ) , MovedAttribute ( 'install_opener' , 'urllib2' , 'urllib.request' ) , MovedAttribute ( 'build_opener' , 'urllib2' , 'urllib.request' ) , MovedAttribute ( 'pathname2url' , 'urllib' , 'urllib.request' ) , MovedAttribute ( 'url2pathname' , 'urllib' , 'urllib.request' ) , MovedAttribute ( 'getproxies' , 'urllib' , 'urllib.request' ) , MovedAttribute ( 'Request' , 'urllib2' , 'urllib.request' ) , MovedAttribute ( 'OpenerDirector' , 'urllib2' , 'urllib.request' ) , MovedAttribute ( 'HTTPDefaultErrorHandler' , 'urllib2' , 'urllib.request' ) , MovedAttribute ( 'HTTPRedirectHandler' , 'urllib2' , 'urllib.request' ) , MovedAttribute ( 'HTTPCookieProcessor' , 'urllib2' , 'urllib.request' ) , MovedAttribute ( 'ProxyHandler' , 'urllib2' , 'urllib.request' ) , MovedAttribute ( 'BaseHandler' , 'urllib2' , 'urllib.request' ) , MovedAttribute ( 'HTTPPasswordMgr' , 'urllib2' , 'urllib.request' ) , MovedAttribute ( 'HTTPPasswordMgrWithDefaultRealm' , 'urllib2' , 'urllib.request' ) , MovedAttribute ( 'AbstractBasicAuthHandler' , 'urllib2' , 'urllib.request' ) , MovedAttribute ( 'HTTPBasicAuthHandler' , 'urllib2' , 'urllib.request' ) , MovedAttribute ( 'ProxyBasicAuthHandler' , 'urllib2' , 'urllib.request' ) , MovedAttribute ( 'AbstractDigestAuthHandler' , 'urllib2' , 'urllib.request' ) , MovedAttribute ( 'HTTPDigestAuthHandler' , 'urllib2' , 'urllib.request' ) , MovedAttribute ( 'ProxyDigestAuthHandler' , 'urllib2' , 'urllib.request' ) , MovedAttribute ( 'HTTPHandler' , 'urllib2' , 'urllib.request' ) , MovedAttribute ( 'HTTPSHandler' , 'urllib2' , 'urllib.request' ) , MovedAttribute ( 'FileHandler' , 'urllib2' , 'urllib.request' ) , MovedAttribute ( 'FTPHandler' , 'urllib2' , 'urllib.request' ) , MovedAttribute ( 'CacheFTPHandler' , 'urllib2' , 'urllib.request' ) , MovedAttribute ( 'UnknownHandler' , 'urllib2' , 'urllib.request' ) , MovedAttribute ( 'HTTPErrorProcessor' , 'urllib2' , 'urllib.request' ) , MovedAttribute ( 'urlretrieve' , 'urllib' , 'urllib.request' ) , MovedAttribute ( 'urlcleanup' , 'urllib' , 'urllib.request' ) , MovedAttribute ( 'URLopener' , 'urllib' , 'urllib.request' ) , MovedAttribute ( 'FancyURLopener' , 'urllib' , 'urllib.request' ) , MovedAttribute ( 'proxy_bypass' , 'urllib' , 'urllib.request' ) , ]","var0 = [ var2 ( 'urlopen' , 'urllib2' , 'urllib.request' ) , var2 ( 'install_opener' , 'urllib2' , 'urllib.request' ) , var2 ( 'build_opener' , 'urllib2' , 'urllib.request' ) , var2 ( 'pathname2url' , 'urllib' , 'urllib.request' ) , var2 ( 'url2pathname' , 'urllib' , 'urllib.request' ) , var2 ( 'getproxies' , 'urllib' , 'urllib.request' ) , var2 ( 'Request' , 'urllib2' , 'urllib.request' ) , var2 ( 'OpenerDirector' , 'urllib2' , 'urllib.request' ) , var2 ( 'HTTPDefaultErrorHandler' , 'urllib2' , 'urllib.request' ) , var2 ( 'HTTPRedirectHandler' , 'urllib2' , 'urllib.request' ) , var2 ( 'HTTPCookieProcessor' , 'urllib2' , 'urllib.request' ) , var2 ( 'ProxyHandler' , 'urllib2' , 'urllib.request' ) , var2 ( 'BaseHandler' , 'urllib2' , 'urllib.request' ) , var2 ( 'HTTPPasswordMgr' , 'urllib2' , 'urllib.request' ) , var2 ( 'HTTPPasswordMgrWithDefaultRealm' , 'urllib2' , 'urllib.request' ) , var2 ( 'AbstractBasicAuthHandler' , 'urllib2' , 'urllib.request' ) , var2 ( 'HTTPBasicAuthHandler' , 'urllib2' , 'urllib.request' ) , var2 ( 'ProxyBasicAuthHandler' , 'urllib2' , 'urllib.request' ) , var2 ( 'AbstractDigestAuthHandler' , 'urllib2' , 'urllib.request' ) , var2 ( 'HTTPDigestAuthHandler' , 'urllib2' , 'urllib.request' ) , var2 ( 'ProxyDigestAuthHandler' , 'urllib2' , 'urllib.request' ) , var2 ( 'HTTPHandler' , 'urllib2' , 'urllib.request' ) , var2 ( 'HTTPSHandler' , 'urllib2' , 'urllib.request' ) , var2 ( 'FileHandler' , 'urllib2' , 'urllib.request' ) , var2 ( 'FTPHandler' , 'urllib2' , 'urllib.request' ) , var2 ( 'CacheFTPHandler' , 'urllib2' , 'urllib.request' ) , var2 ( 'UnknownHandler' , 'urllib2' , 'urllib.request' ) , var2 ( 'HTTPErrorProcessor' , 'urllib2' , 'urllib.request' ) , var2 ( 'urlretrieve' , 'urllib' , 'urllib.request' ) , var2 ( 'urlcleanup' , 'urllib' , 'urllib.request' ) , var2 ( 'URLopener' , 'urllib' , 'urllib.request' ) , var2 ( 'FancyURLopener' , 'urllib' , 'urllib.request' ) , var2 ( 'proxy_bypass' , 'urllib' , 'urllib.request' ) ]"
"_urllib_response_moved_attributes is a list with 4 elements: result of the function MovedAttribute, called with 3 arguments:",_urllib_response_moved_attributes is list with 4 elements: result of function var0 called with 3 arguments:,"_urllib_response_moved_attributes = [ MovedAttribute ( 'addbase' , 'urllib' , 'urllib.response' ) , MovedAttribute ( 'addclosehook' , 'urllib' , 'urllib.response' ) , MovedAttribute ( 'addinfo' , 'urllib' , 'urllib.response' ) , MovedAttribute ( 'addinfourl' , 'urllib' , 'urllib.response' ) , ]","_urllib_response_moved_attributes = [ var0 ( 'addbase' , 'urllib' , 'urllib.response' ) , var0 ( 'addclosehook' , 'urllib' , 'urllib.response' ) , var0 ( 'addinfo' , 'urllib' , 'urllib.response' ) , var0 ( 'addinfourl' , 'urllib' , 'urllib.response' ) ]"
"_urllib_robotparser_moved_attributes is a list containing an instance of MovedAttribute class, created with 3 argument: strings,","var0 is list containing instance of var1 class, created with 3 argument: strings,","_urllib_robotparser_moved_attributes = [ MovedAttribute ( 'RobotFileParser' , 'robotparser' , 'urllib.robotparser' ) , ]","var0 = [ var1 ( 'RobotFileParser' , 'robotparser' , 'urllib.robotparser' ) ]"
"_version is a string ""0.91"".",var0 is string var1.,_version = '0.91',var0 = '0.91'
"_version is a string ""2.0"".",var0 is string var1.,_version = '2.0',var0 = '2.0'
"_win is a tuple containing 1 initial boolean: True is sys.platform equals to string ""win32"", False otherwise.",var0 is tuple containing 1 initial boolean: var1 is var2 equals to string var3 var4 otherwise.,_win = ( sys . platform == 'win32' ),var0 = var2 == 'win32'
_wrapped is None.,var0 is var1 ,_wrapped = None,var0 = var1
docsring,var0,"'         Set a value in the cache if the key does not already exist. If         timeout is given, that timeout will be used for the key; otherwise         the default cache timeout will be used.         Returns True if the value was stored, False otherwise.         '","'''         Set a value in the cache if the key does not already exist.If         timeout is given, that timeout will be used for the key; otherwise         the default cache timeout will be used.        Returns True if the value was stored, False otherwise.        '''"
doctring,var0,'     Adds (or updates) the Vary' header in the given HttpResponse object.     newheaders is a list of header names that should be in 'Vary'. Existing     headers in 'Vary' aren't removed.     ''','     Adds(or updates) the Vary' header in the given HttpResponse object.    newheaders is a list of header names that should be in 'Vary'.Existing     headers in 'Vary' aren't removed.    '''
docstirng,var0,'Close the cache connection','''Close the cache connection'''
"library set to pylibmc and value_not_found_exception set to pylibmc.NotFound.   decorator cached_property,",library set to var0 and var2 set to var0 var4 decorator var6 ,@ cached_property,@ var6
decorator cached_property.,decorator var0 ,@ cached_property,@ var0
"decorator cached_property,",decorator var0 ,@ cached_property,@ var0
"cached_property decorator,","var0 decorator,",@ cached_property,@ var0
"content_type, length of content, None and None.   decorator classmethod.","var0, length of content var1 and var1 decorator var4 ",@ classmethod,@ var4
"classmethod decorator,","var0 decorator,",@ classmethod,@ var0
"decorator classmethod,",decorator var0 ,@ classmethod,@ var0
"class method decorator,","class method decorator,",@ classmethod,@ classmethod
"content.setter decorator,","var0 decorator,",@ content . setter,@ var0
"contextlib.contextmanager decorator,","var0 decorator,",@ contextlib . contextmanager,@ var0
"decorator deconstructible,",decorator var0 ,@ deconstructible,@ var0
"and code set to string 'invalid'.   decorator deconstructible,",and code set to string var0 var1 decorator var2 ,@ deconstructible,@ var2
"return value of the call to the function _ with an argument string 'Enter only digits separated by commas.' and string 'invalid'.   decorator deconstructible,",return value of call to function var0 with argument string var1 and string var2 var3 decorator var4 ,@ deconstructible,@ var4
"and self.code equals to other.code, return boolean True, otherwise return boolean False.   decorator deconstructible,",and var0 equals to var1 return boolean var2 otherwise return boolean var3 decorator var5 ,@ deconstructible,@ var5
decorator decorator.,decorator decorator.,@ decorator,@ decorator
"encoding.setter decorator,","var0 decorator,",@ encoding . setter,@ var0
"HttpResponse.content.setter property,","var0 property,",@ HttpResponse . content . setter,@ var0
decorator function lru_cache.lru_cache with an argument maxsize set to integer 1000.,decorator function var0 lru_cache with argument var3 set to integer 1000.,@ lru_cache . lru_cache ( maxsize = 1000 ),@ var0.var0(var3 = 1000)
decorator lru_cache.lru_cache with an argument maxsize set to None.,decorator var0 lru_cache with argument var3 set to var4 ,@ lru_cache . lru_cache ( maxsize = None ),@ var0.var0(var3 = var4)
"where '%s' is replaced with fixture_name, and RuntimeWarning.   decorator method lru_cache.lru_cache with an argument maxsize set to None.",var0 var1 is replaced with var2 and var4 decorator method var7 lru_cache with argument var10 set to var11 ,@ lru_cache . lru_cache ( maxsize = None ),@ var7.var7(var10 = var11)
"method lru_cache.lru_cache with an argument maxsize set to None, as a decorator,","method var0 lru_cache with argument var3 set to var4 as decorator,",@ lru_cache . lru_cache ( maxsize = None ),@ var0.var0(var3 = var4)
"property decorator,","property decorator,",@ property,@ property
"library set to memcache and value_not_found_exception set to ValueError.   property decorator,","library set to var0 and var1 set to var3 property decorator,",@ property,@ property
"property getter decorator,","property var0 decorator,",@ property,@ property
"property decorator, to be called by property built-in function.","property decorator, to be called by property built-in function.",@ property,@ property
"or if it is false, but has_old_option is true use self.requires_model_validation, if they are both false use boolean True as an argument.   property decorator,","or if it is false, but var0 is true use self var3 if var4 are both false use boolean var5 as argument var6 property decorator,",@ property,@ property
property decorator.,property decorator.,@ property,@ property
"and unpacked dictionary kwargs, return the result.   property decorator,","and unpacked dict var0 return result var1 property decorator,",@ property,@ property
"called with an argument final_attrs, return the result.   property decorator,","called with argument var0 return result var1 property decorator,",@ property,@ property
"return boolean True, otherwise return boolean False.   property decorator.",return boolean var0 otherwise return boolean var1 property decorator.,@ property,@ property
"add to a list result of the method uploadhandler.load_handler called with arguments handler and self,   substitute resulting list for self._upload_handlers.   property decorator,","add to list result of method uploadhandler var1 called with arguments handler and self var2 substitute resulting list for var4 var2 property decorator,",@ property,@ property
"where '%s' is replaced with self.__class__.__name__.   property decorator,","var0 var1 is replaced with var2 property decorator,",@ property,@ property
decorator python_2_unicode_compatible.,decorator var0 ,@ python_2_unicode_compatible,@ var0
"decorator python_2_unicode_compatible,",decorator var0 ,@ python_2_unicode_compatible,@ var0
"python_2_unicode_compatible decorator,","var0 decorator,",@ python_2_unicode_compatible,@ var0
"and unpacked dictionary kwargs.   python_2_unicode_compatible decorator,","and unpacked dict var0 var2 decorator,",@ python_2_unicode_compatible,@ var2
"and sorted return value of the items of the attrs dictionary, and second time with 3 arguments: an empty string, string ' {0}',   and sorted list of boolean_attrs elements, concatenate the results and return the resulting list.   python_2_unicode_compatible decorator,","and sorted return value of items of var0 dict, and second time with 3 arguments: empty string, string ' {0}' var2 and sorted list of var4 elements, concatenate results and return resulting list var6 decorator,",@ python_2_unicode_compatible,@ var6
python_2_unicode_compatible decorator,var0 decorator,@ python_2_unicode_compatible,@ var0
"decorator function receiver with an argument setting_changed,",decorator function receiver with argument var0 ,@ receiver ( setting_changed ),@ receiver(var0)
decorator register.filter.,decorator var0 ,@ register . filter,@ var0
"decorator function register.filter with 2 arguments string ""escape"" and is_safe set to boolean True.",decorator function var0 with 2 arguments string var1 and var2 set to boolean var4 ,"@ register . filter ( 'escape' , is_safe = True )","@ var0('escape', var2 = var4)"
"decorator function register.filter with an argument string ""escapejs"".",decorator function var0 with argument string var1.,@ register . filter ( 'escapejs' ),@ var0('escapejs')
"decorator function register.filter with 3 arguments string ""slice"", is_safe set to boolean True and needs_autoescape set to True.",decorator function var0 with 3 arguments string var1 var2 set to boolean var4 and var6 set to var4 ,"@ register . filter ( 'linebreaks' , is_safe = True , needs_autoescape = True )","@ var0('linebreaks', var2 = var4, var6 = var4)"
"decorator function register.filter with 2 arguments string ""phone2numeric"" and is_safe set to boolean True.",decorator function var0 with 2 arguments string var1 and var2 set to boolean var4 ,"@ register . filter ( 'phone2numeric' , is_safe = True )","@ var0('phone2numeric', var2 = var4)"
"decorator function register.filter with 2 arguments string ""slice"" and is_safe set to boolean True.",decorator function var0 with 2 arguments string var1 and var2 set to boolean var4 ,"@ register . filter ( 'slice' , is_safe = True )","@ var0('slice', var2 = var4)"
"decorator function register.filter with 2 arguments string ""timesince"" and is_safe set to boolean False.",decorator function var0 with 2 arguments string var1 and var2 set to boolean var4 ,"@ register . filter ( 'timesince' , is_safe = False )","@ var0('timesince', var2 = var4)"
"decorator function register.filter with 2 arguments string ""timeuntil"" and is_safe set to boolean False.",decorator function var0 with 2 arguments string var1 and var2 set to boolean var4 ,"@ register . filter ( 'timeuntil' , is_safe = False )","@ var0('timeuntil', var2 = var4)"
decorator function register.filter with 2 arguments expects_localtime set to boolean True and is_safe set to boolean False.,decorator function var0 with 2 arguments var1 set to boolean var3 and var4 set to boolean var6 ,"@ register . filter ( expects_localtime = True , is_safe = False )","@ var0(var1 = var3, var4 = var6)"
decorator function register.filter with an argument is_safe set to boolean False.,decorator function var0 with argument var1 set to boolean var3 ,@ register . filter ( is_safe = False ),@ var0(var1 = var3)
"html set to boolean True and truncate set to string ' ...', return the result.   decorator function register.filter with an argument is_safe set to boolean False.","html set to boolean var0 and truncate set to string var1, return result var2 decorator function var3 with argument var4 set to boolean var6 ",@ register . filter ( is_safe = False ),@ var3(var4 = var6)
"and autoescape as autoescape, use the result as an argument for the call to the function mark_safe, return the result.   decorator function register.filter with an argument is_safe set to boolean False.",and var0 as var0 use result as argument for call to function var2 return result var4 decorator function var5 with argument var6 set to boolean var8 ,@ register . filter ( is_safe = False ),@ var5(var6 = var8)
return the result.   decorator function register.filter with 2 arguments is_safe set to boolean True and needs_autoescape set to boolean True.,return result var0 decorator function var1 with 2 arguments var2 set to boolean var4 and var6 set to boolean var4 ,"@ register . filter ( is_safe = True , needs_autoescape = True )","@ var1(var2 = var4, var6 = var4)"
decorator function register.filter with 2 arguments is_safe set to boolean True and needs_autoescape set to boolean True.,decorator function var0 with 2 arguments var1 set to boolean var3 and var5 set to boolean var3 ,"@ register . filter ( is_safe = True , needs_autoescape = True )","@ var0(var1 = var3, var5 = var3)"
"use the result as an argument for the call to the function mark_safe, return the result.   decorator function register.filter with 2 arguments is_safe set to boolean True and needs_autoescape set to boolean True.",use result as argument for call to function var0 return result var2 decorator function var3 with 2 arguments var4 set to boolean var6 and var8 set to boolean var6 ,"@ register . filter ( is_safe = True , needs_autoescape = True )","@ var3(var4 = var6, var8 = var6)"
decorator function register.filter with an argument is_safe set to boolean True.,decorator function var0 with argument var1 set to boolean var3 ,@ register . filter ( is_safe = True ),@ var0(var1 = var3)
"replace all occurrences of ""'"" with ""\\'"" in the previous result, return the result.   decorator function register.filter with an argument is_safe set to boolean True.","replace all occurrences of ""'"" with ""\\'"" in the previous result, return the result.   decorator function register.filter with an argument is_safe set to boolean True.",@ register . filter ( is_safe = True ),@ register . filter ( is_safe = True )
"result of the m.group method called with an argument integer 0 converted into lowercase and t, return the result.   decorator function register.filter with an argument is_safe set to boolean True.","result of var0 method called with argument integer 0 converted into lowercase and t, return result var1 decorator function var2 with argument var3 set to boolean var5 ",@ register . filter ( is_safe = True ),@ var2(var3 = var5)
"and html set to boolean True, return the result.   decorator function register.filter with an argument is_safe set to boolean True.",and html set to boolean var0 return result var2 decorator function var3 with argument var4 set to boolean var0 ,@ register . filter ( is_safe = True ),@ var3(var4 = var0)
"and truncate set to string ' ...', return the result.   decorator function register.filter with an argument is_safe set to boolean True.","and truncate set to string var0, return result var1 decorator function var2 with argument var3 set to boolean var5 ",@ register . filter ( is_safe = True ),@ var2(var3 = var5)
return the result.   decorator function register.filter with an argument is_safe set to boolean True.,return result var0 decorator function var1 with argument var2 set to boolean var4 ,@ register . filter ( is_safe = True ),@ var1(var2 = var4)
return all the results in a list.   decorator function register.filter with an argument is_safe set to boolean True.,return all results in list var0 decorator function var1 with argument var2 set to boolean var4 ,@ register . filter ( is_safe = True ),@ var1(var2 = var4)
"register.tag decorator,","register.tag decorator,",@ register . tag,@ register.tag
"an instance of VerbatimNode class, return it.   register.tag decorator,","an instance of var0 class, return it var1 register.tag decorator,",@ register . tag,@ register.tag
"decorator method register.tag with an argument 'block',","decorator method var0 with argument var1,",@ register . tag ( 'block' ),@ var0(var1)
"decorator method register.tag with an argument 'extends',","decorator method var0 with argument var1,",@ register . tag ( 'extends' ),@ var0(var1)
"register.tag decorator function with an argument 'filter',","register.tag decorator function with argument var0,",@ register . tag ( 'filter' ),@ register.tag(var0)
"for every bit in bits.   register.tag decorator function with an argument 'for',","for every bit in bits var0 register.tag decorator function with argument var1,",@ register . tag ( 'for' ),@ register.tag(var1)
"called with an argument value and value.   register.tag decorator function with an argument 'if',","called with argument value and value var0 register.tag decorator function with argument var1,",@ register . tag ( 'if' ),@ register.tag(var1)
"decorator method register.tag with an argument 'include',","decorator method var0 with argument var1,",@ register . tag ( 'include' ),@ var0(var1)
"called with an argument this_value_expr, result of the method parser.compile_filter called with an argument max_value_expr,   return value of the method parser.compile_filter called with an argument max_width and asvar as asvar.   register.tag decorator function with an argument 'with',","called with argument var0 result of method parser var4 called with argument var6 return value of method parser var4 called with argument var10 and var12 as var12 var8 register.tag decorator function with argument var14,",@ register . tag ( 'with' ),@ register.tag(var14)
decorator register with argument Tags.compatibility.,decorator register with argument var0 compatibility.,@ register ( Tags . compatibility ),@ register(var0.compatibility)
decorator register with Tags.models and Tags.signals as arguments.,decorator register with var0 models and var0 signals as arguments.,"@ register ( Tags . models , Tags . signals )","@ register(var0.models, var0.signals)"
decorator register with Tags.models as an argument.,decorator register with var0 models as argument.,@ register ( Tags . models ),@ register(var0.models)
"class static method,","class static method,",@ staticmethod,@ staticmethod
"static method,","static method,",@ staticmethod,@ staticmethod
"streaming_content.setter decorator,","streaming_content.setter decorator,",@ streaming_content . setter,@ streaming_content.setter
"decorator stringfilter,",decorator var0 ,@ stringfilter,@ var0
"total_ordering decorator,","var0 decorator,",@ total_ordering,@ var0
"decorator total_ordering,",decorator var0 ,@ total_ordering,@ var0
upload_handlers.setter decorator.,upload_handlers.setter decorator.,@ upload_handlers . setter,@ upload_handlers.setter
decorator function wraps with an argument fdel.,decorator function wraps with argument var0 ,@ wraps ( fdel ),@ wraps(var0)
decorator function wraps with an argument fget.,decorator function wraps with argument var0 ,@ wraps ( fget ),@ wraps(var0)
decorator function wraps with an argument fset.,decorator function wraps with argument var0 ,@ wraps ( fset ),@ wraps(var0)
"string ""memoize wrapper is deprecated and will be removed in Django 1.9. Use django.utils.lru_cache instead."",   RemovedInDjango19Warning and stacklevel set to integer 2.   decorator function wraps with an argument func.",string var0 var3 and var5 set to integer 2 var1 decorator function wraps with argument var6 ,@ wraps ( func ),@ wraps(var6)
decorator function wraps with an argument func.,decorator function wraps with argument var0 ,@ wraps ( func ),@ wraps(var0)
"decorator function wraps with 2 arguments: view_func and assigned set to result of the function available_attrs,",decorator function wraps with 2 arguments: var0 and assigned set to result of function var1 ,"@ wraps ( view_func , assigned = available_attrs ( view_func ) )","@ wraps(var0, assigned = var1(var0))"
convert to hexadecimal a random integer between 1 and 100 and add it to the string a,convert to hexadecimal random integer between 1 and 100 and add it to string a,"a += '\\x%02x' % random . randint ( 1 , 100 )","a += '\\x%02x' % random . randint ( 1 , 100 )"
append to the string s a random integer between 1 and 100 converted to hexadecimal,append to string s random integer between 1 and 100 converted to hexadecimal,"a += '\\x%02x' % random . randint ( 1 , 100 )","a += '\\x%02x' % random . randint ( 1 , 100 )"
add to the string s a random integer between 1 and 100 converted to hexadecimal,add to string s random integer between 1 and 100 converted to hexadecimal,"a += '\\x%02x' % random . randint ( 1 , 100 )","a += '\\x%02x' % random . randint ( 1 , 100 )"
"Convert the variable b to a hexadecimal and add it to the variable a followed by ','",Convert variable b to hexadecimal and add it to variable followed by var0,"a += '%02x, ' % b","a += '%02x, ' % b"
"Convert the variable b to a hexadecimal and append it to the variable a followed by ','",Convert variable b to hexadecimal and append it to variable followed by var0,"a += '%02x, ' % b","a += '%02x, ' % b"
Convert the variable b to a hexadecimal and store it in the variable a,Convert variable b to hexadecimal and store it in variable a,a += '%02x' % b,a += '%02x' % b
a is b converted to hexadecimal,a is b converted to hexadecimal,a += '%02x' % b,a += '%02x' % b
slice the variable b at index 2 and add the value to the variable a,slice variable b at index 2 and add value to variable a,a += b [ 2 : ],a += b [ 2 : ]
"append encoded_instruction_in_hex and string "","" to the variable a",append var0 and string var2 to variable a,"a += encoded_instruction_in_hex + ', '","a += var0 + ', '"
"Convert the value of b to hexadecimal, then slice it at the index of 2 and add its value to the variable a","Convert value of b to hexadecimal, then slice it at index of 2 and add its value to variable a",a += hex ( b ) [ 2 : ],a += hex ( b ) [ 2 : ]
initialize the variable a to an empty string,initialize variable to empty string,a = '',a = ''
assign the first two elements of b to a,assign first two elements of b to a,a = b [ 0 : 2 ],a = b [ 0 : 2 ]
"compile the regex ""^https?://"" with an argument re.I, substitute it for absolute_http_url_re.","compile var0 ""^https?://"" with argument re.I, substitute it for var2 ","absolute_http_url_re = re . compile ( r'^https?://' , re . I )","var2 = re . compile ( '^https?://' , re . I )"
"sum max_num and DEFAULT_MAX_NUM, substitute the result for absolute_max.",sum var0 and var2 substitute result for var3 ,absolute_max = max_num + DEFAULT_MAX_NUM,var3 = var0 + var2
"get the absolute file path of the expanded_template, substitute it for absolute_path.",get absolute file path of var0 substitute it for var1 ,absolute_path = path . abspath ( expanded_template ),var1 = path . abspath ( var0 )
"call the method self.download with an argument template, substitute the result for absolute_path.","call method var0 with argument template, substitute result for var1 ",absolute_path = self . download ( template ),var1 = var0 ( template )
substitute abspath for abspathu.,substitute var0 for var1 ,abspathu = abspath,var1 = var0
"get the value under the 'HTTP_ACCEPT_LANGUAGE' key of the request.META dictionary, if it exists substitute it for accept,","get value under var0 key of request var1 dict, if it exists substitute it for accept,","accept = request . META . get ( 'HTTP_ACCEPT_LANGUAGE' , '' )","accept = request . var1 . get ( var0 , '' )"
"call the function re.compile with 2 arguments: raw string ""([A-Za-z]{1,8}(?:-[A-Za-z0-9]{1,8})*|\*)(?:\s*;\s*q=(0(?:\.\d{,3})?|1(?:.0{,3})?))?(?:\s*,\s*|$)"",","call function var0 with 2 arguments: raw string var1,","accept_language_re = re . compile ( r'''         ([A-Za-z]{1,8}(?:-[A-Za-z0-9]{1,8})*|\*)      # 'en', 'en-au', 'x-y-z', 'es-419', '*'         (?:\s*;\s*q=(0(?:\.\d{,3})?|1(?:.0{,3})?))?   # Optional 'q=1.00', 'q=0.8'         (?:\s*,\s*|$)                                 # Multiple accepts per header.         ''' , re . VERBOSE )","accept_language_re = var0(    '        ([var2]{1,8}(?:-[var3]{1,8})*|\\*)      # 'en', 'en-au', 'x-y-z', 'es-419', '*'        (?:\\s*;\\s*q=(0(?:\\.\\d{,3})?|1(?:.0{,3})?))?   # Optional 'q=1.00', 'q=0.8'        (?:\\s*,\\s*|$)                                 # Multiple accepts per header.        '    , re.VERBOSE)"
"acceptable_endblocks is a tuple with 2 elements: string 'endblock' and 'endblock %s', where '%s' replaced with block_name.",var0 is tuple with 2 elements: string var1 and var2 var5 var6 replaced with var7 ,"acceptable_endblocks = ( 'endblock' , 'endblock %s' % block_name )","var0 = var1 , 'endblock %s' % var7"
call the function activate with an argument self.language.,call function activate with argument var0 ,activate ( self . language ),activate ( var0 )
call the method activate with an argument self.old_language.,call method activate with argument self var1 ,activate ( self . old_language ),activate ( self . var1 )
call the method activate with an argument self.timezone.,call method activate with argument var0 ,activate ( self . timezone ),activate ( var0 )
activate is a lambda function which returns None for any argument x.,activate is lambda function var0 returns var1 for any argument var2,activate = lambda x : None,activate = lambda x : var1
"and unpacked dictionary kwargs, return the result.   call the function MovedModule with 2 arguments: strings ""_dummy_thread"" and ""dummy_thread"",","and unpacked dict var0 return result var1 call function var2 with 2 arguments: strings var4 and var5,","add_move ( MovedModule ( '_dummy_thread' , 'dummy_thread' ) )","add_move ( var2 ( '_dummy_thread' , 'dummy_thread' ) )"
"use the result as an argument for the call to the add_move function.   call the function MovedModule with 2 arguments: strings ""_thread"" and ""thread"",","use result as argument for call to var0 function var2 call function var3 with 2 arguments: strings var5 and var6,","add_move ( MovedModule ( '_thread' , 'thread' ) )","var0 ( var3 ( '_thread' , 'thread' ) )"
call the function add_to_builtins with an argument string 'django.template.defaultfilters'.,call function var0 with argument string var2.,add_to_builtins ( 'django.template.defaultfilters' ),var0 ( var2 )
call the function add_to_builtins with an argument string 'django.template.defaulttags'.,call function var0 with argument string var2.,add_to_builtins ( 'django.template.defaulttags' ),var0 ( var2 )
call the function add_to_builtins with an argument string 'django.template.loader_tags'.,call function var0 with argument string var2.,add_to_builtins ( 'django.template.loader_tags' ),var0 ( var2 )
"put every header in newheaders in a list, only if newheader converted to lowercase does not exist in existing_headers,","put every header in var0 in list, only if var1 converted to lowercase does not exist in var2 ",additional_headers = [ newheader for newheader in newheaders if newheader . lower ( ) not in existing_headers ],additional_headers = [ var1 for var1 in var0 if var1 . lower ( ) not in var2 ]
call the addr.encode method with string 'ascii' as an argument.,call var0 method with string var1 as argument.,addr . encode ( 'ascii' ),var0 ( var1 )
"join localpart and domain in a string separated by '@' character, substitute it for addr.","join var0 and domain in string separated by var1 character, substitute it for var2 ","addr = '@' . join ( [ localpart , domain ] )","var2 = var1 . join ( [ var0 , domain ] )"
"call the encode function on the Header class instance, created with arguments addr and encoding, substitute the result for addr.","call encode function on var0 class instance, created with arguments var1 and encoding, substitute result for var1 ","addr = Header ( addr , encoding ) . encode ( )","var1 = var0 ( var1 , encoding ) . encode ( )"
"call the parseaddr function with return value of the force_text with argument addr, as argument, substitute the result for addr.","call var0 function with return value of var3 with argument var1 as argument, substitute result for var1 ",addr = parseaddr ( force_text ( addr ) ),var1 = var0 ( var3 ( var1 ) )
"ADDRESS_HEADERS is a set containing strings: 'from', 'sender', 'reply-to', 'to', 'cc', 'bcc', 'resent-from', 'resent-sender',","var0 is set containing strings: var1, var2, var3, var4, var5, var6, var8, var9,","ADDRESS_HEADERS = set ( [ 'from' , 'sender' , 'reply-to' , 'to' , 'cc' , 'bcc' , 'resent-from' , 'resent-sender' , 'resent-to' , 'resent-cc' , 'resent-bcc' , ] )","var0 = set ( [ var1 , 'sender' , 'reply-to' , 'to' , 'cc' , 'bcc' , 'resent-from' , 'resent-sender' , 'resent-to' , 'resent-cc' , 'resent-bcc' ] )"
admin is a string 'admin',admin is string var0,admin = 'admin',admin = var0
substitute next for advance_iterator.,substitute next for var0 ,advance_iterator = next,var0 = next
"subtract timestamp from the return value of the function time.time, substitute the result for age.",subtract var0 from return value of function var1 substitute result for age.,age = time . time ( ) - timestamp,age = var1 ( ) - var0
"calculate the length of args, substitute it for alen.",calculate length of var0 substitute it for var1 ,alen = len ( args ),var1 = len ( var0 )
all_date_checks is union of all_date_checks set and date_checks set.,var0 is union of var0 set and var1 set.,all_date_checks = all_date_checks . union ( set ( date_checks ) ),var0 = var0 . union ( set ( var1 ) )
all_date_checks is an empty set.,var0 is empty set.,all_date_checks = set ( ),var0 = set ( )
"ModelChoiceField', 'ModelMultipleChoiceField', 'ALL_FIELDS', 'BaseModelFormSet', 'modelformset_factory', 'BaseInlineFormSet',   and 'inlineformset_factory'.   ALL_FIELDS is a string '__all__'.",ModelChoiceFieldvar1ModelMultipleChoiceFieldvar1ALL_FIELDSvar1BaseModelFormSetvar1modelformset_factoryvar1BaseInlineFormSetvar18inlineformset_factoryvar23__all__'.,ALL_FIELDS = '__all__',var8 = 'var24'
"where '%s' is replaced with file_path.   create an object TranslatableFile with arguments: dirpath, filename and locale_dir, append it to all_files.",var0 var1 is replaced with var2 create object var5 with arguments: var7 filename and var8 append it to var10 ,"all_files . append ( TranslatableFile ( dirpath , filename , locale_dir ) )","var10 . append ( var5 ( var7 , filename , var8 ) )"
"to the negative length of the dir_suffix as the end index and append it to a list,   if p doesnt end with dir_suffix, append p to a list, substitute resulting list for norm_patterns.   all_files is an empty list.","to negative length of var0 as end index and append it to list var2 if p doesnt end with var0 append p to list, substitute resulting list for var4 var6 is empty list.",all_files = [ ],var6 = [ ]
"call the method checks.run_checks with 2 arguments: app_configs set to app_configs, tags set t tags, substitute the result for all_issues.","call method checks var1 with 2 arguments: var2 set to var2 tags set t tags, substitute result for var6 ","all_issues = checks . run_checks ( app_configs = app_configs , tags = tags )","var6 = checks . var1 ( var2 = var2 , tags = tags )"
extend all_locales list with the elements of locale_dirs list on which os.path.basename function was applied.,extend var0 list with elements of var1 list on var3 var4 function was applied.,"all_locales . extend ( map ( os . path . basename , locale_dirs ) )","var0 . extend ( map ( var4 , var1 ) )"
all_locales is an empty string.,var0 is empty string.,all_locales = [ ],var0 = [ ]
"filter out the results for which function os.path.isdir returns false, substitute the result for locale_dirs.   map the locale_dirs elements with mapping function os.path.basename, substitute the result for all_locales.","filter out results for var0 function os.path.isdir returns false, substitute result for var1 map var1 elements with mapping function os.path.basename, substitute result for var4 ","all_locales = map ( os . path . basename , locale_dirs )","var4 = map ( os . path . basename , var1 )"
"call the method router.get_migratable_models with arguments app_config, database and include_auto_created set to boolean True,",call method router var1 with arguments var2 database and var4 set to boolean var6 ,"all_models . extend ( router . get_migratable_models ( app_config , database , include_auto_created = True ) )","all_models . extend ( router . var1 ( var2 , database , var4 = var6 ) )"
"for every app_config in return value of the method apps.get_app_configs if app_config.models_module is not None,",for every var0 in return value of method apps var4 if var0 var6 is not var7 ,"all_models = [ ( app_config . label , router . get_migratable_models ( app_config , connection . alias , include_auto_created = True ) ) for app_config in apps . get_app_configs ( ) if app_config . models_module is not None and app_config . label in app_labels ]","all_models = [ ( var0 . label , router . get_migratable_models ( var0 , connection . alias , include_auto_created = True ) ) for var0 in apps . var4 ( ) if var0 . var6 is not var7 and var0 . label in app_labels ]"
all_models is an empty list.,var0 is empty list.,all_models = [ ],var0 = [ ]
all_unique_checks is union of all_unique_checks set and unique_checks set.,var0 is union of var0 set and var1 set.,all_unique_checks = all_unique_checks . union ( set ( unique_checks ) ),var0 = var0 . union ( set ( var1 ) )
all_unique_checks is an empty set.,var0 is empty set.,all_unique_checks = set ( ),var0 = set ( )
"get the value 'allow_cascade' key of the options dictionary, if it exists substitute it for allow_cascade, otherwise allow_cascade is boolean False.","get value var0 key of options dict, if it exists substitute it for allow_cascade, otherwise allow_cascade is boolean var1 ","allow_cascade = options . get ( 'allow_cascade' , False )","allow_cascade = options . get ( var0 , var1 )"
allow_multiple_selected is boolean False.,var0 is boolean var1 ,allow_multiple_selected = False,var0 = var1
allow_multiple_selected is boolean True.,var0 is boolean var1 ,allow_multiple_selected = True,var0 = var1
"allowed_schemes is an list containing 3 elements: strings 'http', 'https' and 'ftp'.","var0 is list containing 3 elements: strings var1, var2 and var3.","allowed_schemes = [ 'http' , 'https' , 'ftp' ]","var0 = [ var1 , 'https' , 'ftp' ]"
ALLOWED_VARIABLE_CHARS is a string 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_.'.,var0 is string var1.,ALLOWED_VARIABLE_CHARS = ( 'abcdefghijklmnopqrstuvwxyz' 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_.' ),var0 = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_.'
"for every sql in return value of the function connection.creation.sql_for_pending_references called with arguments: model, style,","for every sql in return value of function connection.creation var1 called with arguments: model, style,","alter_sql . extend ( [ '-- ' + sql for sql in connection . creation . sql_for_pending_references ( model , style , pending_references ) ] )","alter_sql . extend ( [ ( '-- ' + sql ) for sql in connection . creation . var1 ( model , style , pending_references ) ] )"
alter_sql is an empty list.,alter_sql is empty list.,alter_sql = [ ],alter_sql = [ ]
alternative_subtype is a string 'alternative'.,var0 is string var1.,alternative_subtype = 'alternative',var0 = var1
substitute 'n' for answer.,substitute var0 for answer.,answer = 'n',answer = var0
convert first element of answer to lowercase and substitute it for answer.,convert first element of answer to lowercase and substitute it for answer.,answer = answer [ 0 ] . lower ( ),answer = answer [ 0 ] . lower ( )
answer is None.,answer is var0 ,answer = None,answer = var0
"call the method six.moves.input with an argument string ""Do you wish to proceed? [yN] "", substitute the result for answer.","call method var0 with argument string ""Do you wish to proceed? [var2] "", substitute result for answer.",answer = six . moves . input ( 'Do you wish to proceed? [yN] ' ),answer = var0 ( 'Do you wish to proceed? [var2] ' )
call the method app.initialize with an argument argv as an empty list.,call method var0 with argument var1 as empty list.,app . initialize ( argv = [ ] ),var0 ( var1 = [ ] )
call the method app.start.,call method var0 ,app . start ( ),var0 ( )
app is a string 'django',var0 is string var1,app = 'django',var0 = var1
"call the method app.rpartition with an argument '.', substitute last element of the result for app.","call method var0 with argument var2, substitute last element of result for var1 ",app = app . rpartition ( '.' ) [ - 1 ],var1 = var0 ( var2 ) [ - 1 ]
substitute model._meta.app_label for app.,substitute model._meta var1 for app.,app = model . _meta . app_label,app = model . _meta . var1
"call the method instance of TerminalIPythonApp class, substitute the result for app.","call method instance of var0 class, substitute result for var1 ",app = TerminalIPythonApp . instance ( ),var1 = var0 . instance ( )
"call the method apps.get_app_config with an argument app_label, substitute the result for app_config.",call method apps var1 with argument var3 substitute result for var2 ,app_config = apps . get_app_config ( app_label ),var2 = apps . var1 ( var3 )
"call the method apps.get_app_config with an argument exclude, substitute the result for app_config.","call method apps var1 with argument exclude, substitute result for var2 ",app_config = apps . get_app_config ( exclude ),var2 = apps . var1 ( exclude )
app_configs is a list containing app_config.,var1 is list containing var0.,app_configs = [ app_config ],var1 = [ var0 ]
"call the method apps.get_app_config with an argument app_lable, for every app_label in app_labels, append the results to app_configs list.",call method apps var1 with argument var2 for every var4 in var6 append results to var8 list.,app_configs = [ apps . get_app_config ( app_label ) for app_label in app_labels ],var8 = [ apps . var1 ( var4 ) for var4 in var4s ]
"call the method apps.get_app_config with an argument app_label, for every app_label in app_labels, append the results to a list,","call method apps var1 with argument var2 for every var2 in var6 append results to list,",app_configs = [ apps . get_app_config ( app_label ) for app_label in app_labels ],app_configs = [ apps . var1 ( var2 ) for var2 in var2s ]
"call the method apps.get_app_configs, substitute the result for app_configs.",call method apps var1 substitute result for var2 ,app_configs = apps . get_app_configs ( ),var2 = apps . var1 ( )
app_configs is not None.,var0 is not var1 ,app_configs = None,var0 = var1
app_configs is None.,var0 is var1 ,app_configs = None,var0 = var1
"call the method apps.get_app_configs, convert the result in a list, reverse the order of elements, substitute the result for app_configs.","call method apps var1 convert result in list, reverse order of elements, substitute result for var2 ",app_configs = reversed ( list ( apps . get_app_configs ( ) ) ),var2 = reversed ( list ( apps . var1 ( ) ) )
"call the method apps.get_app_config with an argument model._met.app_label, substitute path field of the result for app_dir.",call method apps var1 with argument model._met var3 substitute path field of result for var4 ,app_dir = apps . get_app_config ( model . _meta . app_label ) . path,var4 = apps . var1 ( model . _meta . var3 ) . path
"join app_config.path and string 'fixtures' into a valid file path, substitute it for app_dir.","join var0 path and string var2 into valid file path, substitute it for var3 ","app_dir = os . path . join ( app_config . path , 'fixtures' )","var3 = os . path . join ( var0 . path , var2 )"
append old_app_dir to app_dirs.,append var0 to var1 ,app_dirs . append ( old_app_dir ),var1 . append ( var0 )
"join app_dir and string 'sql' into a file path, use the result as an argument for the call to the function os.path.normpath,","join var0 and string var2 into file path, use result as argument for call to function var3 ","app_dirs . append ( os . path . normpath ( os . path . join ( app_dir , 'sql' ) ) )","app_dirs . append ( os . path . normpath ( os . path . join ( var0 , var2 ) ) )"
app_dirs is an empty list.,var0 is empty list.,app_dirs = [ ],var0 = [ ]
"assign values under the 'app_label' and 'migration_name' keys of the options dictionary to the app_label and migration_name, respectively.","assign values under var0 and var1 keys of options dict to app_label and migration_name, respectively.","app_label , migration_name = options [ 'app_label' ] , options [ 'migration_name' ]","app_label , migration_name = options [ var0 ] , options [ 'migration_name' ]"
"get the values under the keys 'app_label' and 'migration_name' of the options dictionary, substitute the results for app_label and migration_name, respectively.","get values under keys var0 and var1 of options dict, substitute results for app_label and migration_name, respectively.","app_label , migration_name = options [ 'app_label' ] , options [ 'migration_name' ]","app_label , migration_name = options [ var0 ] , options [ 'migration_name' ]"
"get the values under the 'app_label' and 'migration_name' keys of the options dictionary,","get values under var0 and var1 keys of options dict,","app_label , migration_name = options [ 'app_label' ] , options [ 'migration_name' ]","app_label , migration_name = options [ var0 ] , options [ 'migration_name' ]"
"split label by '.', assign the result to app_label and model_label, respectively.","split label by var0, assign result to var1 and var3 respectively.","app_label , model_label = label . split ( '.' )","var1 , var3 = label . split ( var0 )"
substitute label for app_label.,substitute label for var0 ,app_label = label,var0 = label
substitute the value under the 'app_label' key of options dictionary for app_label.,substitute value under var0 key of options dict for app_label.,app_label = options [ 'app_label' ],app_label = options [ var0 ]
"if not, self.empty is boolean False.   crate a set containing of app_labels elements, substitute it for app_labels.","if not var0 is boolean var1 crate set containing of var3 elements, substitute it for var3 ",app_labels = set ( app_labels ),var3 = set ( var3 )
value under the app_config key of the app_list is None.,value under var0 key of var2 is var4 ,app_list [ app_config ] = None,var2 [ var0 ] = var4
"app_list is an instance of OrderedDict class, created with an argument a tuple containing elements: app_config and None,","var0 is instance of var1 class, created with argument tuple containing elements: var2 and var4 ","app_list = OrderedDict ( ( app_config , None ) for app_config in apps . get_app_configs ( ) if app_config . models_module is not None and app_config not in excluded_apps )","var0 = var1 ( ( var2 , var4 ) for var2 in apps . get_app_configs ( ) if var2 . models_module is not var4 and var2 not in excluded_apps )"
app_list is an instance of a class OrderedDict.,var0 is instance of class var1 ,app_list = OrderedDict ( ),var0 = var1 ( )
"get the value under the ns key of the resolver.app_dict dictionary, substitute it for app_list.","get value under ns key of resolver var1 dict, substitute it for var2 ",app_list = resolver . app_dict [ ns ],var2 = resolver . var1 [ ns ]
append model to app_list_value.,append model to var0 ,app_list_value . append ( model ),var0 . append ( model )
"call the method app_list.setdefault with 2 arguments app_config and an empty list, substitute the result for app_list_value.","call method var0 setdefault with 2 arguments var2 and empty list, substitute result for var4 ","app_list_value = app_list . setdefault ( app_config , [ ] )","var4 = var0 . setdefault ( var2 , [ ] )"
"because you haven't properly specified the ENGINE setting for the database.\n see: https://docs.djangoproject.com/en/dev/ref/settings/#databases.   call the method app_config.get_models with an argument include_auto_created set to boolean True, substitute it for app_models.","because you haven't properly specified the ENGINE setting for the database.\n see: https://docs.djangoproject.com/en/dev/ref/settings/#databases.   call the method app_config.get_models with an argument include_auto_created set to boolean True, substitute it for app_models.",app_models = app_config . get_models ( include_auto_created = True ),app_models = app_config . get_models ( include_auto_created = True )
"call the method router.get_migratable_models with argument: app_config, connection.alias and include_auto_created set to True, substitute the result for app_models.",call method router var1 with argument: var2 var4 and var5 set to var7 substitute result for var8 ,"app_models = router . get_migratable_models ( app_config , connection . alias , include_auto_created = True )","var8 = router . var1 ( var2 , var4 , var5 = var7 )"
call the method router.get_migratable_models with arguments app_config and connection.alias.,call method router var1 with arguments var2 and var3 ,"app_models = router . get_migratable_models ( app_config , connection . alias )","app_models = router . var1 ( var2 , var3 )"
"remove values under the keys 'name' and 'directory' of the options dictionary and substitute it for app_name and target, respectively.","remove values under keys var0 and var1 of options dict and substitute it for var2 and target, respectively.","app_name , target = options . pop ( 'name' ) , options . pop ( 'directory' )","var2 , target = options . pop ( var0 ) , options . pop ( 'directory' )"
substitute value under the subcommand key of the commands dictionary for app_name.,substitute value under var0 key of commands dict for var1 ,app_name = commands [ subcommand ],var1 = commands [ var0 ]
"call the function get_commands, substitute the value under the name key of the return value, for app_name.","call function var0 substitute value under name key of return value, for var1 ",app_name = get_commands ( ) [ name ],var1 = var0 ( ) [ name ]
"sort loader.migrated_apps, substitute it for app_names.",sort loader var1 substitute it for var2 ,app_names = sorted ( loader . migrated_apps ),var2 = sorted ( loader . var1 )
"call the self.handle_app_config method with app_config and options as arguments, substitute the result for app_output.","call self var1 method with var2 and options as arguments, substitute result for var3 ","app_output = self . handle_app_config ( app_config , ** options )","var3 = self . var1 ( var2 , ** options )"
"get 'WSGI_APPLICATION' attribute from the settings, substitute it for app_path.","get var0 attribute from settings, substitute it for var1 ","app_path = getattr ( settings , 'WSGI_APPLICATION' )","var1 = getattr ( settings , var0 )"
append template_dir to app_template_dirs.,append var0 to var1 ,app_template_dirs . append ( template_dir ),var1 . append ( var0 )
"if not, call the function sys.getdefaultencoding and substitute the result for fs_encoding.   app_template_dirs is an empty list.","if not, call function var0 and substitute result for var1 var3 is empty list.",app_template_dirs = [ ],var3 = [ ]
"call the function calculate_app_template_dirs, substitute the result for app_template_dirs.",call function var0 substitute result for var1 ,app_template_dirs = calculate_app_template_dirs ( ),var1 = var0 ( )
substitute complain for append.,substitute complain for append.,append = complain,append = complain
call the method apps.get_app_config with an argument app_label.,call method apps var1 with argument var2 ,apps . get_app_config ( app_label ),apps . var1 ( var2 )
call the method apps.get_model with 2 arguments: string 'auth' and string 'Permission'.,call method apps var1 with 2 arguments: string var2 and string var3.,"apps . get_model ( 'auth' , 'Permission' )","apps . var1 ( var2 , 'Permission' )"
"call the method apps.setdefault with 2 arguments: app_name and an empty list, extend the resulting list with namespaces_list.","call method var0 with 2 arguments: var1 and empty list, extend resulting list with var2 ","apps . setdefault ( app_name , [ ] ) . extend ( namespace_list )","var0 ( var1 , [ ] ) . extend ( namespace_list )"
"call the method apps.setdefault with 2 arguments: pattern and an empty list, append to the resulting object pattern.namespace.","call method var0 with 2 arguments: pattern and empty list, append to resulting object var1 ","apps . setdefault ( pattern . app_name , [ ] ) . append ( pattern . namespace )","var0 ( pattern . app_name , [ ] ) . append ( var1 )"
apps is an empty dictionary.,var0 is empty dict.,apps = { },var0 = { }
call the method archive.extract with arguments: filename and tempdir.,call method var0 with arguments: filename and var1 ,"archive . extract ( filename , tempdir )","var0 ( filename , var1 )"
call the method archive.extract with an argument to_path.,call method var0 with argument var1 ,archive . extract ( to_path ),var0 ( var1 )
"append arg to ',', substitute the result for arg.","append var0 to var2, substitute result for var0 ","arg = ', ' + arg","var0 = ', ' + var0"
substitute first element of args for arg.,substitute first element of var0 for var1 ,arg = args [ 1 ],var1 = var0 [ 1 ]
convert arg to an integer.,convert var0 to integer.,arg = int ( arg ),var0 = int ( var0 )
substitute settings.DATE_FORMAT for arg.,substitute settings var0 for var1 ,arg = settings . DATE_FORMAT,var1 = settings . var0
substitute settings.TIME_FORMAT for arg.,substitute settings var0 for var1 ,arg = settings . TIME_FORMAT,var1 = settings . var0
"call the function ugettext with string 'yes,no,maybe' as an argument, substitute the result for arg.","call function var0 with string var1 as argument, substitute result for var2 ","arg = ugettext ( 'yes,no,maybe' )",var2 = var0 ( var1 )
"call the method arg.resolve with an argument context, append the result to arg_vals.","call method var0 with argument context, append result to var1 ",arg_vals . append ( arg . resolve ( context ) ),var1 . append ( arg . resolve ( context ) )
"call the function mark_safe with an argument arg, append it to arg_vals.",call function var0 with argument var1 append it to var2 ,arg_vals . append ( mark_safe ( arg ) ),var2 . append ( var0 ( var1 ) )
"arg_vals is an empty list,","var0 is empty list,",arg_vals = [ ],var0 = [ ]
"call the function parse_bits with 8 arguments: parser, bits, params, varargs, varkw, defaults, takes_context and function_name,","call function var0 with 8 arguments: parser, bits var1 var2 var3 defaults var4 and var6 ","args , kwargs = parse_bits ( parser , bits , params , varargs , varkw , defaults , takes_context , function_name )","args , kwargs = var0 ( parser , bits , var1 , var2 , var3 , defaults , var4 , var6 )"
"call the method parse_bits with 8 arguments: parser, bits, params, varargs, varkw, defaults, takes_context and name,","call method var0 with 8 arguments: parser, bits var1 var2 var3 defaults var4 and name,","args , kwargs = parse_bits ( parser , bits , params , varargs , varkw , defaults , takes_context , name )","args , kwargs = var0 ( parser , bits , var1 , var2 , var3 , defaults , var4 , name )"
"call the function getargspec with an argument func, substitute the result for args, varargs, varkw and defaults, respectively.","call function var1 with argument var0 substitute result for var2 var3 var4 and defaults, respectively.","args , varargs , varkw , defaults = getargspec ( func )","var2 , var3 , var4 , defaults = var1 ( var0 )"
"take a tuple with 2 elements: boolean False and method resolve called with an empty dictionary on the instance of Variable class,","take tuple with 2 elements: boolean var0 and method resolve called with empty dict on instance of var1 class,","args . append ( ( False , Variable ( constant_arg ) . resolve ( { } ) ) )","args . append ( ( var0 , var1 ( constant_arg ) . resolve ( { } ) ) )"
"take a tuple with 2 elements: boolean False and instance of Variable class, created with an argument constant_arg, append it to args.","take tuple with 2 elements: boolean var0 and instance of var1 class, created with argument var2 append it to var4 ","args . append ( ( True , Variable ( var_arg ) ) )","var4 . append ( ( True , var1 ( var_arg ) ) )"
"call the method parser.compile_filter with an argument bit, append the result to args.","call method parser var1 with argument bit, append result to var2 ",args . append ( parser . compile_filter ( bit ) ),var2 . append ( parser . var1 ( bit ) )
"call the method parser.compile_filter with an argument value, append the result to args.","call method parser var1 with argument value, append result to var2 ",args . append ( parser . compile_filter ( value ) ),var2 . append ( parser . var1 ( value ) )
append self.choices to args.,append var0 to var1 ,args . append ( self . choices ),var1 . append ( var0 )
"string '--keyword=gettext_noop', string '--keyword=gettext_lazy', string '--keyword=ngettext_lazy:1,2',   string '--keyword=pgettext:1c,2', string '--keyword=npgettext:1c,2,3' and string '--output=-', substitute it for args.   append work_file to args.","string var0, string var1, string var4 var7 string var9, string var11 and string var13, substitute it for var15 var7 append var17 to var15 ",args . append ( work_file ),var15 . append ( var17 )
"string '--keyword=gettext_noop', string '--keyword=gettext_lazy', string '--keyword=ngettext_lazy:1,2',   string '--keyword=ugettext_noop', string '--keyword=ugettext_lazy', string '--keyword=ungettext_lazy:1,2',   string '--keyword=pgettext:1c,2', string '--keyword=npgettext:1c,2,3', string '--keyword=pgettext_lazy:1c,2',   string '--keyword=npgettext_lazy:1c,2,3' and string '--output=-', substitute the result for args.   append work_file to args.","string var0, string var1, string var4 var7 string var11, string var14, string var17 var7 string var20, string var22, string var24 var7 string var27 and string var30, substitute result for var32 var7 append var34 to var32 ",args . append ( work_file ),var32 . append ( var34 )
"call the function force_text with an argument first element of args, substitute the result for first element of args.",call function var0 with argument first element of var1 substitute result for first element of var1 ,args [ 0 ] = force_text ( args [ 0 ] ),var1 [ 0 ] = var0 ( var1 [ 0 ] )
"split first element of args by ',', convert separated elements to strings, substitute the first 2 elements of the result,","split first element of var0 by var1, convert separated elements to strings, substitute first 2 elements of result,","args [ 1 : 2 ] = [ ''%s'' % arg for arg in args [ 1 ] . split ( ', ' ) ]","var0 [1: 2] = [''%s'' % arg for arg in var0 [1].split(', ')]"
args is an empty string.,var0 is empty string.,args = '',var0 = ''
args is a string '[fixture ...]'.,var0 is string var1.,args = '[fixture ...]',var0 = '[fixture...]'
args is an empty tuple.,var0 is empty tuple.,args = ( ),var0 = ( )
args is a empty tuple.,var0 is empty tuple.,args = ( ),var0 = ( )
"append command.xgettext_options to the list containing 10 elements: string 'xgettext', string '-d', domain, string '--language=C',","append command var1 to list containing 10 elements: string var2, string var3, domain, string var4,","args = [ 'xgettext' , '-d' , domain , '--language=C' , '--keyword=gettext_noop' , '--keyword=gettext_lazy' , '--keyword=ngettext_lazy:1,2' , '--keyword=pgettext:1c,2' , '--keyword=npgettext:1c,2,3' , '--output=-' ] + command . xgettext_options","args var6 [var2, '-d', domain, '--language=C', '--keyword=gettext_noop', '--keyword=gettext_lazy', '--keyword=ngettext_lazy:1,2', '--keyword=pgettext:1c,2', '--keyword=npgettext:1c,2,3', '--output=-'] + command.var1"
"append command.xgettext_options to list containing 15 elements: string 'xgettext', string '-d', domain, string '--language=Python',","append command var1 to list containing 15 elements: string var2, string var3, domain, string var4,","args = [ 'xgettext' , '-d' , domain , '--language=Python' , '--keyword=gettext_noop' , '--keyword=gettext_lazy' , '--keyword=ngettext_lazy:1,2' , '--keyword=ugettext_noop' , '--keyword=ugettext_lazy' , '--keyword=ungettext_lazy:1,2' , '--keyword=pgettext:1c,2' , '--keyword=npgettext:1c,2,3' , '--keyword=pgettext_lazy:1c,2' , '--keyword=npgettext_lazy:1c,2,3' , '--output=-' ] + command . xgettext_options","args = [ var2 , '-d' , domain , '--language=Python' , '--keyword=gettext_noop' , '--keyword=gettext_lazy' , '--keyword=ngettext_lazy:1,2' , '--keyword=ugettext_noop' , '--keyword=ugettext_lazy' , '--keyword=ungettext_lazy:1,2' , '--keyword=pgettext:1c,2' , '--keyword=npgettext:1c,2,3' , '--keyword=pgettext_lazy:1c,2' , '--keyword=npgettext_lazy:1c,2,3' , '--output=-' ] + command . var1"
args is a list containing arg surrounded by double quotes for every arg in args.,var0 is list containing var1 surrounded by double quotes for every var1 in var0 ,args = [ ''%s'' % arg for arg in args ],var0 = [''%s'' % var1 for var1 in var0]
"append self.msgattrib_options to a list containing string 'msgattrib', append to it a list containing string '-o', pofile and pofile,","append self var1 to list containing string var2, append to it list containing string var3 var5 and var5 ","args = [ 'msgattrib' ] + self . msgattrib_options + [ '-o' , pofile , pofile ]","args = [ var2 ] + self . var1 + [ '-o' , var5 , var5 ]"
"append self.msgmerge_options to a list containing string 'msgmerge', append to it a list containing pofile and potfile, substitute the result for args.","append self var1 to list containing string var2, append to it list containing var3 and var4 substitute result for var5 ","args = [ 'msgmerge' ] + self . msgmerge_options + [ pofile , potfile ]","var5 = [ var2 ] + self . var1 + [ var3 , var4 ]"
"append self.msguniq_options to a list containing a string 'msguniq', append list containing potfile to the result, substitute it for args.","append self var1 to list containing string var2, append list containing var3 to result, substitute it for var4 ",args = [ 'msguniq' ] + self . msguniq_options + [ potfile ],var4 = [ var2 ] + self . var1 + [ var3 ]
args is an empty list.,var0 is empty list.,args = [ ],var0 = [ ]
where '%s' is replaced with name.   args is an empty list.,var0 var1 is replaced with name var2 var3 is empty list.,args = [ ],var3 = [ ]
"for every arg in self.args call the method arg.resolve with an argument context, substitute the results in a list for args.","for every var0 in var1 call method var0 resolve with argument context, substitute results in list for var2 ",args = [ arg . resolve ( context ) for arg in self . args ],var2 = [ var0 . resolve ( context ) for var0 in self . var0s ]
"args is an list with 3 initial elements self.name, self.value and self.attrs.",var0 is list with 3 initial elements var1 var2 and var3 ,"args = [ self . name , self . value , self . attrs ]","var0 = [ var1 , var2 , var3 ]"
"extend self.program list with self.program_options, string '-o',","extend var0 list with self var2 string var3,","args = [ self . program ] + self . program_options + [ '-o' , npath ( base_path + '.mo' ) , npath ( base_path + '.po' ) ]","args = [ var0 ] + self . var2 + [ var3 , npath ( base_path + '.mo' ) , npath ( base_path + '.po' ) ]"
"in string '-W%s' replace '%s' with o for every o in sys.warnoptions, put the result into a list, append the list to a list containing sys.executable, append sys.argv to the end of the resulting list, substitute the result for args.","in string var0 replace var1 with o for every o in var2 put result into list, append list to list containing var3 append var4 to end of resulting list, substitute result for var5 ",args = [ sys . executable ] + [ '-W%s' % o for o in sys . warnoptions ] + sys . argv,var5 = [ var3 ] + [ ( var0 % o ) for o in var2 ] + var4
"substitute args, without the last element for args.",substitute var0 var2 last element for var0 ,args = args [ : - 1 ],var0 = var0 [ : - 1 ]
"if args in None of boolean False, substitute it for an empty list.",if var0 in var1 of boolean var2 substitute it for empty list.,args = args or [ ],var0 = var0 or [ ]
call the hashlib.md5 fuction with force_bytes(key) as argument.,call the hashlib.md5 fuction with force_bytes(key) as argument.,args = hashlib . md5 ( force_bytes ( key ) ),args = hashlib . md5 ( force_bytes ( key ) )
"convert args into a list, substitute it for args.","convert var0 into list, substitute it for var0 ",args = list ( args ),var0 = list ( var0 )
"call the method match.groups, substitute the result for args.",call method var0 substitute result for var1 ,args = match . groups ( ),var1 = var0 ( )
substitute options.args for args.,substitute var0 for var1 ,args = options . args,var1 = var0
"call the method token.contents.split, substitute the result for args.",call method var0 substitute result for var1 ,args = token . contents . split ( ),var1 = var0 ( )
"call the method token.split_contents, substitute the result for args.",call method token var1 substitute result for var2 ,args = token . split_contents ( ),var2 = token . var1 ( )
args_check is a static method.,var0 is static method.,args_check = staticmethod ( args_check ),var0 = staticmethod ( var0 )
"map elements from args through the function conditional_escape, substitute the result for args_safe.",map elements from var0 through function var1 substitute result for var2 ,"args_safe = map ( conditional_escape , args )","var2 = map ( var1 , var0 )"
substitute as_string for as_bytes.,substitute var0 for var1 ,as_bytes = as_string,var1 = var0
as_form is boolean False.,var0 is boolean var1 ,as_form = False,var0 = var1
where '%s' is replaced with last element of args.   as_form is boolean True,var0 var1 is replaced with last element of var2 var4 is boolean var6,as_form = True,var4 = var6
as_form is boolean True.,var0 is boolean var1 ,as_form = True,var0 = var1
"substitute the result for RFC850_DATE.   call the function re.compile with an argument raw string '^\w{3} %s %s %s %s$' formated with __M, __D2, __T and __Y,","substitute result for var0 call function var3 with argument raw string var4 formated with __M var5 var6 and __Y,","ASCTIME_DATE = re . compile ( r'^\w{3} %s %s %s %s$' % ( __M , __D2 , __T , __Y ) )","ASCTIME_DATE = var3 ( rvar4 % ( __M , var5 , var6 , __Y ) )"
if content is not None raise an error.,if content is not var0 raise error.,assert content is None,assert content is var0
if content is not None raise an error.,if content is not var0 raise error.,assert content is not None,assert content is not var0
"if content is None, raise an error.",if content is var0 raise error.,assert content is not None,assert content is not var0
"if new_errors is not an iterable object raise an error with error message ""The function %r did not return a list. All functions registered with the checks registry must return a list."", with '%s' replaced by value of check.","if var0 is not var2 object raise error with error message var3, with var4 replaced by value of check.","assert is_iterable ( new_errors ) , ( 'The function %r did not return a list. All functions registered ' 'with the checks registry must return a list.' % check )","assert is_iterable ( var0 ) , 'The function %r did not return a list.All functions registered with the checks registry must return a list.' % check"
"if level is not an integer raise an error with message string ""The first argument should be level."".",if level is not integer raise error with message string var0.,"assert isinstance ( level , int ) , 'The first argument should be level.'","assert isinstance ( level , int ) , 'The first argument should be level.'"
"if iterations is lesser than integer 0, raise an error.","if iterations is lesser var0 integer 0, raise error.",assert iterations > 0,assert iterations > 0
"if length of version does not equals to integer 5, raise an exception.","if length of version does not equals to integer 5, raise exception.",assert len ( version ) == 5,assert len ( version ) == 5
if match evaluates to False throw an exception with the string message 'unexpected call to parse_starttag()'.,if match evaluates to var0 throw exception with string message var1.,"assert match , 'unexpected call to parse_starttag()'","assert match , var1"
if mimetype is not None raise an error.,if var0 is not var1 raise error.,assert mimetype is None,assert var0 is var1
"if mimetype is None, raise an error.",if var0 is var1 raise error.,assert mimetype is not None,assert var0 is not var1
"if name is boolean False raise an assert error with message string ""The name argument is not allowed to be empty."".",if name is boolean var0 raise assert error with message string var1.,"assert name , 'The name argument is not allowed to be empty.'","assert name , 'The name argument is not allowed to be empty.'"
"if cls._delegate_bytes and cls._delegate_text are both false, raise an error, with an argument string ""Cannot call lazy() with both bytes and text return types."".","if var0 and var1 are both false, raise error, with argument string var2.","assert not ( cls . _delegate_bytes and cls . _delegate_text ) , 'Cannot call lazy() with both bytes and text return types.'","assert not ( var0 and var1 ) , 'Cannot call lazy() with both bytes and text return types.'"
"if bcc is not an six.string_types instance raise an error with message string '""bcc"" argument must be a list or tuple'.",if bcc is not six var1 instance raise error with message string var2.,"assert not isinstance ( bcc , six . string_types ) , ''bcc' argument must be a list or tuple'","assert not isinstance(bcc, six.var1), ''bcc' argument must be a list or tuple'"
"if cc is not an six.string_types instance raise an error with message string '""cc"" argument must be a list or tuple'.",if cc is not six var1 instance raise error with message string var2.,"assert not isinstance ( cc , six . string_types ) , ''cc' argument must be a list or tuple'","assert not isinstance(cc, six.var1), ''cc' argument must be a list or tuple'"
"if to is not an six.string_types instance raise an error with message string '""to"" argument must be a list or tuple'.",if to is not six var1 instance raise error with message string var2.,"assert not isinstance ( to , six . string_types ) , ''to' argument must be a list or tuple'","assert not isinstance(to, six.var1), ''to' argument must be a list or tuple'"
"take two characters from the i-th element of rawdata, if they are not equal to the string '</',","take two characters from i-th element of var0 if var1 are not equal to string var2,","assert rawdata [ i : i + 2 ] == '</' , 'unexpected call to parse_endtag'","assert var0 [ i : i + 2 ] == var2 , 'unexpected call to parse_endtag'"
"if remaining is not greater than 0, assert an error with the message string 'remaining bytes to read should never go negative'.","if remaining is not greater var0 0, assert error with message string var1.","assert remaining > 0 , 'remaining bytes to read should never go negative'","assert remaining > 0 , var1"
"if token.contents doesn not equals a string 'endif', raise an AssertionError exception,","if var0 var1 not equals string var2, raise var3 exception,",assert token . contents == 'endif',assert var0 == var2
"if fourth element of version does not equals to string 'alpha' or 'beta' or 'rc' or 'final', raise an exception.","if fourth element of version does not equals to string var0 or var1 or var2 or var4, raise exception.","assert version [ 3 ] in ( 'alpha' , 'beta' , 'rc' , 'final' )","assert version [ 3 ] in ( var0 , 'beta' , 'rc' , 'final' )"
substitute last element of bits for asvar.,substitute last element of bits for var0 ,asvar = bits [ - 1 ],var0 = bits [ - 1 ]
asvar is None.,var0 is var1 ,asvar = None,var0 = var1
"call the method self.normalize_col_name with 3 arguments column_name, used_column_names, is_relation, assign the result to att_name,  params and notes, respectively.","call method self var2 with 3 arguments var3 var5 var7 assign result to var9 var11 and notes, respectively.","att_name , params , notes = self . normalize_col_name ( column_name , used_column_names , is_relation )","var9 , var0params , var0notes = self . var2 ( var3 , var0var5 , var0var7 )"
"call the method attachment.add_header with 3 arguments: string 'Content-Disposition', string 'attachment' and filename set to filename.","call method attachment var1 with 3 arguments: string var2, string var3 and filename set to filename.","attachment . add_header ( 'Content-Disposition' , 'attachment' , filename = filename )","attachment . var1 ( var2 , 'attachment' , filename = filename )"
call the method attachment.set_payload with an argument content.,call method attachment var1 with argument content.,attachment . set_payload ( content ),attachment . var1 ( content )
"attachment is an instance of a class MIMEBase, created with the arguments basetype and subtype.",attachment is instance of class var0 created with arguments var1 and var2 ,"attachment = MIMEBase ( basetype , subtype )","attachment = var0 ( var1 , var2 )"
"attachment is an instance of a class SafeMIMEMessage, created with the arguments content and subtype.",attachment is instance of class var0 created with arguments content and var1 ,"attachment = SafeMIMEMessage ( content , subtype )","attachment = var0 ( content , var1 )"
"attachment is an instance of a class SafeMIMEText, created with arguments: content, subtype and encoding.",attachment is instance of class var0 created with arguments: content var1 and encoding.,"attachment = SafeMIMEText ( content , subtype , encoding )","attachment = var0 ( content , var1 , encoding )"
"call the method self._create_mime_attachment with the arguments content and mimetype, substitute the result for attachment.",call method var0 with arguments content and var1 substitute result for attachment.,"attachment = self . _create_mime_attachment ( content , mimetype )","attachment = var0 ( content , var1 )"
"call the function import_string with an argument dotted_path, substitute the result for attr.",call function var0 with argument var1 substitute result for var3 ,attr = import_string ( dotted_path ),var3 = var0 ( var1 )
"perform binary or for operands: fourth element of_attr_list and termios.ECHO, store the result in fourth element of attr_list.",perform binary or for operands: fourth element var0 and var4 var5 store result in fourth element of var2 ,attr_list [ 3 ] |= termios . ECHO,var2 [ 3 ] |= var4 . var5
"call the method termios.tcgetattr with argument fd, substitute the result for attr_list.",call method var0 with argument var1 substitute result for var2 ,attr_list = termios . tcgetattr ( fd ),var2 = var0 ( var1 )
"find the first, second and third subgroup of the m regular expression match, assign the result to the attrname, rest and attrvalue, respectively.","find first, second and third subgroup of m regular expression match, assign result to var0 rest and var1 respectively.","attrname , rest , attrvalue = m . group ( 1 , 2 , 3 )","var0 , rest , var1 = m . group ( 1 , 2 , 3 )"
"form the tuple from the attrname converted to lowercase and attrvalue, append it to the end of attrs.",form tuple from var0 converted to lowercase and var1 append it to end of var2 ,"attrs . append ( ( attrname . lower ( ) , attrvalue ) )","var2 . append ( ( var0 . lower ( ) , var1 ) )"
remove entry at the key key of the attrs dictionary.,remove entry at key key of var0 dict.,attrs . pop ( key ),var0 . pop ( key )
"if 'step' attribute of attrs dictionary does not exists, set it to to string 'any'.","if var0 attribute of var1 dict does not exists, set it to to string var2.","attrs . setdefault ( 'step' , 'any' )","var1 . setdefault ( var0 , 'any' )"
if 'step' key of the attrs dictionary doesnt exists assign it step as an value.,if var0 key of var1 dict doesnt exists assign it step as value.,"attrs . setdefault ( 'step' , step )","var1 . setdefault ( var0 , step )"
update attrs dictionary with entry: self.max_length converted into a string for 'maxlength'.,update var0 dict with entry: self var2 converted into string for var3.,attrs . update ( { 'maxlength' : str ( self . max_length ) } ),var0 . update ( { var3 : str ( self . var2 ) } )
update attrs dictionary with extra_attrs entry.,update attrs dict with var0 entry.,attrs . update ( extra_attrs ),attrs . update ( var0 )
"append self.form.required_css_class to a whitespace character, append it to the value under the 'class' key of the attrs dictionary.","append self.form var1 to var2 character, append it to value under var3 key of var4 dict.",attrs [ 'class' ] += ' ' + self . form . required_css_class,var4 [ var3 ] += ' ' + self . form . var1
substitute self.form.required_css_class for the value under the 'class' key of the attrs dictionary.,substitute self.form var1 for value under var2 key of var3 dict.,attrs [ 'class' ] = self . form . required_css_class,var3 [ var2 ] = self . form . var1
"value under the 'declared_fields' key of the attrs dictionary is an instance of OrderedDict class, created with an argument current_fields.","value under var0 key of var1 dict is instance of var2 class, created with argument var4 ",attrs [ 'declared_fields' ] = OrderedDict ( current_fields ),var1 [ var0 ] = var2 ( var4 )
substitute error_messages for value under the 'error_messages' key of attrs dictionary.,substitute error_messages for value under var0 key of var1 dict.,attrs [ 'error_messages' ] = error_messages,var1 [ var0 ] = error_messages
substitute exclude for value under the 'exclude' key of attrs dictionary.,substitute exclude for value under var0 key of var1 dict.,attrs [ 'exclude' ] = exclude,var1 [ var0 ] = exclude
substitute fields for value under the 'fields' key of attrs dictionary.,substitute fields for value under var0 key of var1 dict.,attrs [ 'fields' ] = fields,var1 [ var0 ] = fields
substitute help_texts for value under the 'help_texts' key of attrs dictionary.,substitute help_texts for value under var0 key of var1 dict.,attrs [ 'help_texts' ] = help_texts,var1 [ var0 ] = help_texts
substitute auto_id for value under the 'id' key of the attrs dictionary.,substitute var0 for value under var2 key of var3 dict.,attrs [ 'id' ] = auto_id,var3 [ var2 ] = var0
substitute self.html_initial_id for value under the 'id' key of the attrs dictionary.,substitute self var1 for value under var2 key of var3 dict.,attrs [ 'id' ] = self . html_initial_id,var3 [ var2 ] = self . var1
substitute labels for value under the 'labels' key of attrs dictionary.,substitute labels for value under var0 key of var1 dict.,attrs [ 'labels' ] = labels,var1 [ var0 ] = labels
substitute localized_fields for value under the 'localized_fields' key of attrs dictionary.,substitute localized_fields for value under var0 key of var1 dict.,attrs [ 'localized_fields' ] = localized_fields,var1 [ var0 ] = localized_fields
substitute self.max_value for the value under the 'max' key of the attrs dictionary.,substitute self var1 for value under var2 key of var3 dict.,attrs [ 'max' ] = self . max_value,var3 [ var2 ] = self . var1
substitute self.min_value for the value under the 'min' key of the attrs dictionary.,substitute self var1 for value under var2 key of var3 dict.,attrs [ 'min' ] = self . min_value,var3 [ var2 ] = self . var1
substitute the return value of the smart_text function with an argument obj_pk for the value under the 'pk' key of the attrs dictionary.,substitute return value of var0 function with argument var2 for value under var3 key of var4 dict.,attrs [ 'pk' ] = smart_text ( obj_pk ),var4 [ var3 ] = var0 ( var2 )
substitute widgets for value under the 'widgets' key of attrs dictionary.,substitute widgets for value under var0 key of var1 dict.,attrs [ 'widgets' ] = widgets,var1 [ var0 ] = widgets
append attr.name to attrs for every attr in self._moved_attributes.,append var0 to var2 for every var1 in var3 ,attrs += [ attr . name for attr in self . _moved_attributes ],var2 += [ var0 for var1 in var3 ]
"attrs is a list with 2 elements: strings ""__doc__"" and ""__name__"".",var0 is list with 2 elements: strings var1 and var2.,"attrs = [ '__doc__' , '__name__' ]","var0 = [ '__doc__' , '__name__' ]"
attrs is a empty list.,var0 is empty list.,attrs = [ ],var0 = [ ]
"attrs is an dictionary with 9 initial entries: form for 'form', extra for 'extra', can_order for 'can_order',","var0 is dict with 9 initial entries: form for var1, extra for var2, _order for var7,","attrs = { 'form' : form , 'extra' : extra , 'can_order' : can_order , 'can_delete' : can_delete , 'min_num' : min_num , 'max_num' : max_num , 'absolute_max' : absolute_max , 'validate_min' : validate_min , 'validate_max' : validate_max }","var0 = { var1 : form , 'extra' : extra , 'can_order' : can_order , 'can_delete' : can_delete , 'min_num' : min_num , 'max_num' : max_num , 'absolute_max' : absolute_max , 'validate_min' : validate_min , 'validate_max' : validate_max }"
"if not, substitute self.auto_id for id_.   if if_is true attrs is an dictionary with initial entry: id_ for 'id', if not, attrs is an empty dictionary.","if not, substitute self var1 for var2 if var5 true var7 is dict with initial entry: var2 for var9, if not var7 is empty dict.",attrs = { 'id' : id_ } if id_ else { },var7 = { var9 : var2 } if var2 else { }
attrs is a dictionary with model for 'model'.,var0 is dict with model for var1.,attrs = { 'model' : model },var0 = { var1 : model }
attrs is a dictionary containing 1 entry: return value of the smart_text function with argument obj._meta for 'model'.,var0 is dict containing 1 entry: return value of var1 function with argument obj._meta for var3.,attrs = { 'model' : smart_text ( obj . _meta ) },var0 = { var3 : var1 ( obj . _meta ) }
attrs is an empty dictionary.,var0 is empty dict.,attrs = { },var0 = { }
"if attrs is false, make it an empty dictionary.","if var0 is false, make it empty dict.",attrs = attrs or { },var0 = var0 or { }
"if attrs is false, make attrs an empty dictionary.","if var0 is false, make var0 empty dict.",attrs = attrs or { },var0 = var0 or { }
"unpack a dictionary with an entry id_for_label for 'for', map it through attrs mapping if attrs is true,","unpack dict with entry var0 for var2, map it through var3 mapping if var3 is true,","attrs = dict ( attrs or { } , ** { 'for' : id_for_label } )","var3 = dict ( var3 or { } , ** { var2 : var0 } )"
"unpack dictionary kwargs, map it through self.attrs and convert to dictionary, substitute the result for attrs.","unpack dict var0 map it through var1 and convert to dict, substitute result for var2 ","attrs = dict ( self . attrs , ** kwargs )","var2 = dict ( var1 , ** var0 )"
"if attrs is true, call the function flatatt with an argument attrs, substitute the result for attrs, if not attrs is an empty string.","if var0 is true, call function var4 with argument var0 substitute result for var0 if not var0 is empty string.",attrs = flatatt ( attrs ) if attrs else '',var0 = var4 ( var0 ) if var0 else ''
"call the method widget_attrs from the base class of the class CharField, with an argument widget, substitute the result for attrs.","call method var0 from base class of class var3 with argument widget, substitute result for var2 ","attrs = super ( CharField , self ) . widget_attrs ( widget )","var2 = super ( var3 , self ) . var0 ( widget )"
"call the method widget_attrs with an argument widget, from the base class of the DecimalField class, substitute the result for attrs.","call method var0 with argument widget, from base class of var3 class, substitute result for var2 ","attrs = super ( DecimalField , self ) . widget_attrs ( widget )","var2 = super ( var3 , self ) . var0 ( widget )"
"call the method widget_attrs with an argument widget, from the base class of the FloatField class, substitute the result for attrs.","call method var0 with argument widget, from base class of var3 class, substitute result for var2 ","attrs = super ( FloatField , self ) . widget_attrs ( widget )","var2 = super ( var3 , self ) . var0 ( widget )"
"call the method widget_attrs with an argument widget, from the base class of the class IntegerField, substitute it for attrs.","call method var0 with argument widget, from base class of class var3 substitute it for var2 ","attrs = super ( IntegerField , self ) . widget_attrs ( widget )","var2 = super ( var3 , self ) . var0 ( widget )"
"prepend string '_' to i converted to an string, append the result to the value under the 'id' key of the attrs_plus.","var0 string var1 to i converted to string, append result to value under var2 key of var3 ",attrs_plus [ 'id' ] += '_{0}' . format ( i ),var3 [ var2 ] += '_{0}' . format ( i )
"call the method self.attrs.copy, substitute the result for attrs_plus.",call method var0 substitute result for var1 ,attrs_plus = self . attrs . copy ( ),var1 = var0 ( )
"remove first and last character from the attrvalue, substitute it for attrvalue.",remove first and last character from var0 substitute it for var0 ,attrvalue = attrvalue [ 1 : - 1 ],var0 = var0 [ 1 : - 1 ]
set attrvalue to None.,set var0 to var1 ,attrvalue = None,var0 = var1
"call the method unescape with attrvalue as the argument on the self class instance, substitute the result for attrvalue.","call method var0 with var1 as argument on self class instance, substitute result for var1 ",attrvalue = self . unescape ( attrvalue ),var1 = self . var0 ( var1 )
substitute self.auto_id for auto_id.,substitute self var1 for var1 ,auto_id = self . auto_id,var1 = self . var1
substitute self.form.auto_id for auto_id.,substitute self.form var1 for var1 ,auto_id = self . form . auto_id,var1 = self . form . var1
"call the MigrationAutodetector function with arguments, return value of the call to the method executor.loader.project_state,","call var0 function with arguments, return value of call to method executor.loader var2 ","autodetector = MigrationAutodetector ( executor . loader . project_state ( ) , ProjectState . from_apps ( apps ) , )","autodetector = var0 ( executor . loader . var2 ( ) , ProjectState . from_apps ( apps ) )"
"autodetector is an instance of the MigrationAutodetector class, created with 3 arguments: result of the method loader.project_state,","var0 is instance of var1 class, created with 3 arguments: result of method loader var3 ","autodetector = MigrationAutodetector ( loader . project_state ( ) , ProjectState . from_apps ( apps ) , InteractiveMigrationQuestioner ( specified_apps = app_labels , dry_run = self . dry_run ) , )","var0 = var1 ( loader . var3 ( ) , ProjectState . from_apps ( apps ) , InteractiveMigrationQuestioner ( specified_apps = app_labels , dry_run = self . dry_run ) )"
"if autoescape is true and value is not an instance of SafeData, autoescape is boolean True, otherwise it is boolean False.",if var0 is true and value is not instance of var2 var0 is boolean var3 otherwise it is boolean var4 ,"autoescape = autoescape and not isinstance ( value , SafeData )","var0 = var0 and not isinstance ( value , var2 )"
"call the method autoreload.main with 3 arguments: self.inner_run, None and options.",call method var0 with 3 arguments: self var2 var3 and options.,"autoreload . main ( self . inner_run , None , options )","var0 ( self . var2 , var3 , options )"
"if shell is true substitute list with element shell for available_shells, if not substitute self.shells for available_shells.",if shell is true substitute list with element shell for var0 if not substitute var2 for var0 ,available_shells = [ shell ] if shell else self . shells,var0 = [ shell ] if shell else var2
append string '0x' to variable b,append string var0 to variable b,b += '0x',b += var0
cast b to int16,cast b to var0,"b = int ( hopcode , 16 )","b = int ( hopcode , 16 )"
"call the method b64encoded.decode with string 'latin1' as argument, substitute the result for b64encoded.","call method var0 with string var2 as argument, substitute result for var1 ",b64encoded = b64encoded . decode ( 'latin1' ),var1 = var0 ( var2 )
"call the method base64.b64encode with argument pickled, substitute the result for b64encoded.","call method var0 with argument pickled, substitute result for var1 ",b64encoded = base64 . b64encode ( pickled ),var1 = var0 ( pickled )
"ba1 is a bytearrary of the byte string ""\x68\x2f\x62\x69\x6e\x87\xe3\xb0\x0b\xcd\x80""",var0 is var1 of byte string var2,ba1 = bytearray ( b'\x68\x2f\x62\x69\x6e\x87\xe3\xb0\x0b\xcd\x80' ),var0 = bytearray ( b'\x68\x2f\x62\x69\x6e\x87\xe3\xb0\x0b\xcd\x80' )
"ba2 is an array of bytes of the byte string ""\x68\x2f\x62\x69\x6e\x87\xe3\xb0\x0b\xcd\x80""",var0 is array of bytes of byte string var1,ba2 = bytearray ( b'\x68\x2f\x62\x69\x6e\x87\xe3\xb0\x0b\xcd\x80' ),var0 = bytearray ( b'\x68\x2f\x62\x69\x6e\x87\xe3\xb0\x0b\xcd\x80' )
convert ba2 to an array of bytes,convert var0 to array of bytes,ba2 = bytearray ( ba2 ),var0 = bytearray ( var0 )
"convert the byte string ""\xe3\xb0\x0b\xcd\x80"" to the array of bytes ba3",convert byte string var0 to array of bytes var1,ba3 = bytearray ( b'\xe3\xb0\x0b\xcd\x80' ),var1 = bytearray ( b'\xe3\xb0\x0b\xcd\x80' )
convert ba3 to an array of bytes,convert var0 to array of bytes,ba3 = bytearray ( ba3 ),var0 = bytearray ( var0 )
"ba4 is the array of bytes of the byte string ""\xe3\xb0\x0b\xcd\x80""",var0 is array of bytes of byte string var1,ba4 = bytearray ( b'\xe3\xb0\x0b\xcd\x80' ),var0 = bytearray ( b'\xe3\xb0\x0b\xcd\x80' )
remove 'BACKEND' key from params dictionary and put it into backend.,remove var0 key from var1 dict and put it into var2 ,backend = params . pop ( 'BACKEND' ),var2 = var1 . pop ( var0 )
"once split at the '.' value under the 'ENGINE' key of the connection.settings_dict dictionary, substitute last element of the result for backend_name.","once split at var0 value under var1 key of connection var4 dict, substitute last element of result for var5 ",backend_name = connection . settings_dict [ 'ENGINE' ] . split ( '.' ) [ - 1 ],var5 = connection . var4 [ 'ENGINE' ] . split ( var0 ) [ - 1 ]
"for every x in sequence of integers from 0 to 7.   background is a dictionary created with elements: x appended to a string '4' for value under the key x of color_names dictionary,","for every x in sequence of integers from 0 to 7 var0 background is dict created with elements: x appended to string var1 for value under key x of var2 dict,","background = dict ( ( color_names [ x ] , '4%s' % x ) for x in range ( 8 ) )","background = dict ( ( var2 [ x ] , '4%s' % x ) for x in range ( 8 ) )"
"call the method bad_app_labels with an argument app_label,",call method var0 with argument var1 ,bad_app_labels . add ( app_label ),var0 . add ( var1 )
"split bad chars by the character  ','",split bad chars by character var1,"bad_chars = bad_chars . split ( ', ' )","bad_chars = bad_chars . split ( ',var0' )"
cast to string the second argument and save it in bad_chars,cast to string second argument and save it in var0,bad_chars = str ( sys . argv [ 2 ] ),var0 = str ( sys . argv [ 2 ] )
"ba_serializer is a instance of BadSerializer class, created with an argument exc.","var0 is instance of var1 class, created with argument var2 ",bad_serializer = BadSerializer ( exc ),bad_serializer = var1 ( var2 )
"call the method os.path.splitext with an argument base, substitute the result for base and ext, respectively.","call method os.path.splitext with argument base, substitute result for base and var0 respectively.","base , ext = os . path . splitext ( base )","base , var0 = os . path . splitext ( base )"
call the method posixpath.splitext with an argument the_path.,call method var0 with argument var1 ,"base , ext = posixpath . splitext ( the_path )","base , ext = var0 ( var1 )"
"convert filename to lowercase, use the result as an argument for the call to the function os.path.splitext,","convert filename to lowercase, use result as argument for call to function var0 ","base , tail_ext = os . path . splitext ( filename . lower ( ) )","base , tail_ext = var0 ( filename . lower ( ) )"
substitute last four elements of base for base.,substitute last four elements of base for base.,base = base [ : - 4 ],base = base [ : - 4 ]
"call the function force_text with an argument base, substitute the result for base.","call function var0 with argument base, substitute result for base.",base = force_text ( base ),base = var0 ( base )
base is an instance of Media class.,base is instance of var0 class.,base = Media ( ),base = var0 ( )
substitute sup_cls.media for base.,substitute var0 media for base.,base = sup_cls . media,base = var0 . media
"append string '_directory' to app_or_project, substitute it for base_directory.",append string var0 to var1 substitute it for var3 ,base_directory = '%s_directory' % app_or_project,var3 = '%s_directory' % var1
"call the function get_language, split the result by '-', substitute the first element of the result for base_lang.","call function var0 split result by var2, substitute first element of result for var3 ",base_lang = get_language ( ) . split ( '-' ) [ 0 ],var3 = var0 ( ) . split ( var2 ) [ 0 ]
"where '%s' is replaced with app_or_project and extra_files joined into a string, separated by a string ', '.   append string '_name' to app_or_project, substitute it for base_name.","var0 var1 is replaced with var2 and var6 joined into string, separated by string var8 var9 append string var10 to var2 substitute it for var12 ",base_name = '%s_name' % app_or_project,var12 = '%s_name' % var2
"get the unicode representation of the absolute path of base, substitute it for base_path.","get var0 representation of absolute path of base, substitute it for var1 ",base_path = abspathu ( base ),var1 = abspathu ( base )
"call os.path.splitext function with po_path as argument, substitute the first element of the result for base_path.","call var0 function with var1 as argument, substitute first element of result for var2 ",base_path = os . path . splitext ( po_path ) [ 0 ],var2 = var0 ( var1 ) [ 0 ]
"append string '_template' to app_or_project, substitute it for base_subdir.",append string var0 to var1 substitute it for var3 ,base_subdir = '%s_template' % app_or_project,var3 = '%s_template' % var1
append character '/' to the base_url.,append character var0 to var1 ,base_url += '/',var1 += var0
substitute settings.MEDIA_URL for base_url.,substitute settings var0 for var1 ,base_url = settings . MEDIA_URL,var1 = settings . var0
"call the BaseConverter function with BASE16_ALPHABET as argument, store the result in base16.","call var0 function with var1 as argument, store result in var3 ",base16 = BaseConverter ( BASE16_ALPHABET ),var3 = var0 ( var1 )
BASE16_ALPHABET is a string '0123456789ABCDEF'.,var0 is string var1.,BASE16_ALPHABET = '0123456789ABCDEF',var0 = var1
"call the BaseConverter function with BASE2_ALPHABET as argument, store the result in base2.","call var0 function with var1 as argument, store result in var3 ",base2 = BaseConverter ( BASE2_ALPHABET ),var3 = var0 ( var1 )
BASE2_ALPHABET is a string '01'.,var0 is string var1.,BASE2_ALPHABET = '01',var0 = var1
"floor the division of i by j, use it an an index to get the element of the digits list, append the result for base36.","floor division of i by j, use it an index to get element of digits list, append result for var0 ",base36 . append ( digits [ i // j ] ),var0 . append ( digits [ i // j ] )
base36 is an empty list.,var0 is empty list.,base36 = [ ],var0 = [ ]
"call the BaseConverter function with BASE36_ALPHABET as argument, store the result in base36.","call var0 function with var1 as argument, store result in var3 ",base36 = BaseConverter ( BASE36_ALPHABET ),var3 = var0 ( var1 )
BASE36_ALPHABET is a string '0123456789abcdefghijklmnopqrstuvwxyz'.,var0 is string var1.,BASE36_ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz',var0 = var1
"call the BaseConverter function with BASE56_ALPHABET as argument, store the result in base56.","call var0 function with var1 as argument, store result in var3 ",base56 = BaseConverter ( BASE56_ALPHABET ),var3 = var0 ( var1 )
BASE56_ALPHABET is a string '23456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnpqrstuvwxyz'.,var0 is string var1.,BASE56_ALPHABET = '23456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnpqrstuvwxyz',var0 = var1
"call the BaseConverter function with BASE62_ALPHABET as argument, store the result in base62.","call var0 function with var1 as argument, store result in var3 ",base62 = BaseConverter ( BASE62_ALPHABET ),var3 = var0 ( var1 )
BASE62_ALPHABET is string '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.,var0 is string var1.,BASE62_ALPHABET = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz',var0 = var1
"call the BaseConverter function with BASE64_ALPHABET and sign set to '$' as arguments, store the result in base64.","call var0 function with var2 and sign set to var4 as arguments, store result in var5 ","base64 = BaseConverter ( BASE64_ALPHABET , sign = '$' )","var5 = var0 ( var2 , sign = var4 )"
"append string '-_' to the BASE62_ALPHABET, substitute it for BASE64_ALPHABET.",append string var0 to var1 substitute it for var3 ,BASE64_ALPHABET = BASE62_ALPHABET + '-_',var3 = var1 + var0
prefix the base64d with a '.' character.,prefix var0 with var1 character.,base64d = b'.' + base64d,var0 = bvar1 + var0
"call the b64_encode function with an argument data, substitute the result for base64d.","call var0 function with argument data, substitute result for var1 ",base64d = b64_encode ( data ),var1 = var0 ( data )
substitute first element of base64d for base64d.,substitute first element of var0 for var0 ,base64d = base64d [ 1 : ],var0 = var0 [ 1 : ]
"instantiate TimestampSigner object with arguments key and salt set to salt, call its method unsign with arguments:","instantiate var0 object with arguments key and salt set to salt, call its method var1 with arguments:","base64d = force_bytes ( TimestampSigner ( key , salt = salt ) . unsign ( s , max_age = max_age ) )","base64d = force_bytes ( var0 ( key , salt = salt ) . var1 ( s , max_age = max_age ) )"
"call the BaseCache initialization method __init__ with 3 arguments self, list of arguments args and dictionary of arguments kwargs.","call var0 initialization method var1 with 3 arguments self, list of arguments var2 and dict of arguments var3 ","BaseCache . __init__ ( self , * args , ** kwargs )","var0 . var1 ( self , * var2 , ** var3 )"
call the BaseCache.__init__ method with self class instance and params as the arguments.,call var0 __init__ method with self class instance and var2 as arguments.,"BaseCache . __init__ ( self , params )","var0 . __init__ ( self , var2 )"
call the __init__ method with self and params arguments from the base class BaseCache.,call var0 method with self and var1 arguments from base class var2 ,"BaseCache . __init__ ( self , params )","var2 . var0 ( self , var1 )"
"call the method os.path.dirname with an argument potfile, join the result, locale and string 'LC_MESSAGES' into a file path,","call method os.path.dirname with argument var0 join result, locale and string var1 into file path,","basedir = os . path . join ( os . path . dirname ( potfile ) , locale , 'LC_MESSAGES' )","basedir = os . path . join ( os . path . dirname ( var0 ) , locale , var1 )"
"join app_config.path and 'locale' into a valid directory path, separated by '/', append it to basedirs.","join var0 path and var2 into valid directory path, separated by var3, append it to var4 ","basedirs . append ( os . path . join ( app_config . path , 'locale' ) )","var4 . append ( os . path . join ( var0 . path , var2 ) )"
"call function update with path as the argument, for every path in settings.LOCALE_PATHS, extend basedirs list with previous items.","call function update with path as argument, for every path in settings var0 extend var1 list with previous items.",basedirs . extend ( [ upath ( path ) for path in settings . LOCALE_PATHS ] ),var1 . extend ( [ upath ( path ) for path in settings . var0 ] )
extend basedirs list with settings.LOCALE_PATHS.,extend var0 list with settings var1 ,basedirs . extend ( settings . LOCALE_PATHS ),var0 . extend ( settings . var1 )
"replace all the elements of the basedir list by its corresponding absolute directory path, only is that directory exists.","replace all elements of var0 list by its corresponding absolute directory path, only is var1 directory exists.",basedirs = [ os . path . abspath ( basedir ) for basedir in basedirs if os . path . isdir ( basedir ) ],basedirs = [ os . path . abspath ( var0 ) for var0 in var0s if os . path . isdir ( var0 ) ]
"basedirs is a list containing tuple with strings, 'conf/locale' and 'locale'.","var0 is list containing tuple with strings, var1 and var2.","basedirs = [ os . path . join ( 'conf' , 'locale' ) , 'locale' ]","var0 = [ os . path . join ( 'conf' , var2 ) , var2 ]"
"return the directory name two directories up from the __file__ path, join it with 'conf' and 'locale' into valid path, separated by '/', basedirs is a list containing 2 elements: previous result and string 'locale'.","return directory name two directories up from var0 path, join it with var1 and var2 into valid path, separated by var4 var5 is list containing 2 elements: previous result and string var2.","basedirs = [ os . path . join ( os . path . dirname ( os . path . dirname ( __file__ ) ) , 'conf' , 'locale' ) , 'locale' ]","var5 = [ os . path . join ( os . path . dirname ( os . path . dirname ( var0 ) ) , var1 , 'locale' ) , 'locale' ]"
"create a list out of basedir elements for which function os.path.isdir returns true, apply the os.path.abspath function on every element, and put the results in a list, basedir is set of previous list elements.","create list out of var0 elements for var2 function os.path.isdir returns true, apply var3 function on every element, and put results in list var0 is set of previous list elements.","basedirs = set ( map ( os . path . abspath , filter ( os . path . isdir , basedirs ) ) )","basedirs = set ( map ( var3 , filter ( os . path . isdir , var0s ) ) )"
write it to self.stdout.   substitute Command for BaseRunserverCommand.,write it to var0 substitute var2 for var3 ,BaseRunserverCommand = Command,BaseRunservervar2 = var2
"call the method mimetype.split with arguments: character '/' and integer 1, substitute the result for basetype and subtype, respectively.","call method var0 with arguments: character var1 and integer 1, substitute result for var2 and var3 respectively.","basetype , subtype = mimetype . split ( '/' , 1 )","var2 , var3 = var0 ( var1 , 1 )"
"call the function become_daemon with 2 arguments: our_home_dir set to the value under the 'workdir' key of options dictionary and,","call function var0 with 2 arguments: var2 set to value under var4 key of options dict and,","become_daemon ( our_home_dir = options [ 'workdir' ] , ** daemon_kwargs )","var0 ( var2 = options [ var4 ] , ** daemon_kwargs )"
"call the method copy.copy with an argument register_to._registry, substitute the result for before_import_registry.","call method var0 with argument var1 _registry, substitute result for var3 ",before_import_registry = copy . copy ( register_to . _registry ),var3 = var0 ( var1 . _registry )
"sum best_doublecolon_start and best_doublecolon_len, substitute the result for best_doublecolon_end,",sum var0 and var1 substitute result for var3 ,best_doublecolon_end = ( best_doublecolon_start + best_doublecolon_len ),var3 = var0 + var1
best_doublecolon_len is an integer 0.,var0 is integer 0.,best_doublecolon_len = 0,var0 = 0
substitute doublecolon_len for best_doublecolon_len.,substitute var0 for var1 ,best_doublecolon_len = doublecolon_len,best_var0 = var0
best_doublecolon_start is an integer -1.,var0 is integer var1 ,best_doublecolon_start = - 1,var0 = - 1
substitute doublecolon_start for best_doublecolon_start.,substitute var0 for var1 ,best_doublecolon_start = doublecolon_start,best_var0 = var0
substitute value under the name key for bf.,substitute value under name key for var0 ,bf = self [ name ],var0 = self [ name ]
"call the method self.error_class with an argument list containing results of the function conditional_escape,",call method self var1 with argument list containing results of function var2 ,bf_errors = self . error_class ( [ conditional_escape ( error ) for error in bf . errors ] ),bf_errors = self . var1 ( [ var2 ( error ) for error in bf . errors ] )
biggest_number is integer 1.,var0 is integer 1.,biggest_number = 1,var0 = 1
biggest_number is maximum numbers element.,var0 is maximum numbers element.,biggest_number = max ( [ x for x in numbers if x is not None ] ),var0 = max ( [ x for x in numbers if x is not None ] )
substitute bytes for binary_type.,substitute bytes for var0 ,binary_type = bytes,var0 = bytes
substitute str for binary_type.,substitute var0 for var1 ,binary_type = str,var1 = var0
"join trans_bit into a string separated with whitespaces, substitute the result for bit.",join var0 into string separated with var1 substitute result for bit.,bit = ' ' . join ( trans_bit ),bit = ' ' . join ( var0 )
"call the method next with an argument bits, substitute the result for bit.","call method next with argument bits, substitute result for bit.",bit = next ( bits ),bit = next ( bits )
substitute node for bit.,substitute node for bit.,bit = node,bit = node
"call the method self.render_node with 2 arguments: node and context, substitute the result for bit.","call method self var1 with 2 arguments: node and context, substitute result for bit.","bit = self . render_node ( node , context )","bit = self . var1 ( node , context )"
"call the function force_text with an argument bit, append the result to bits.","call function var0 with argument bit, append result to bits.",bits . append ( force_text ( bit ) ),bits . append ( var0 ( bit ) )
append x converted to an integer to bits.,append x converted to integer to bits.,bits . append ( int ( x ) ),bits . append ( int ( x ) )
append None to bits.,append var0 to bits.,bits . append ( None ),bits . append ( var0 )
bits is an empty list.,bits is empty list.,bits = [ ],bits = [ ]
"split arg by ',', substitute the result for bits.","split var0 by var1, substitute result for bits.","bits = arg . split ( ', ' )","bits = var0 . split ( ', ' )"
"split arg by ',', substitute the result for bits.s","split var0 by var1, substitute result for var2","bits = arg . split ( ', ' )","bits = var0 . split ( ', ' )"
substitute bits without last two elements for bits.,substitute bits var0 last two elements for bits.,bits = bits [ : - 2 ],bits = bits [ : - 2 ]
remove last 2 elements from bits.,remove last 2 elements from bits.,bits = bits [ : - 2 ],bits = bits [ : - 2 ]
remove first two elements from bits.,remove first two elements from bits.,bits = bits [ 2 : ],bits = bits [ 2 : ]
"split host from the right side into 2 parts at the ':', substitute the result for bits.","split host from right side into 2 parts at var0, substitute result for bits.","bits = host . rsplit ( ':' , 1 )","bits = host . rsplit ( var0 , 1 )"
"call the function smart_split with an argument self.contents, substitute the result converted to an iterable for bits.",call function var0 with argument var1 substitute result converted to var2 for bits.,bits = iter ( smart_split ( self . contents ) ),bits = iter ( var0 ( var1 ) )
"call the method token.split_contents, convert the result into a list and substitute it for bits.",call method token var1 convert result into list and substitute it for bits.,bits = list ( token . split_contents ( ) ),bits = list ( token . var1 ( ) )
"call the function normalize with an argument p_pattern, substitute the result for bits.",call function normalize with argument var0 substitute result for bits.,bits = normalize ( p_pattern ),bits = normalize ( var0 )
"call the method token.split_contents, substitute the result for bits.",call method token var1 substitute result for bits.,bits = token . contents . split ( ),bits = token . contents . split ( )
"call the method token.contents.split, substitute the result for bits.",call method var0 substitute result for bits.,bits = token . contents . split ( ),bits = var0 ( )
"call the method token.split_contents, substitute the result.",call method token var1 substitute result.,bits = token . split_contents ( ),bits = token . var1 ( )
"call the method token.split_contents, substitute the result for bits.",call method token var1 substitute result for bits.,bits = token . split_contents ( ),bits = token . var1 ( )
"call the function token.split_contents, substitute the result without the first element for bits.",call function token var1 substitute result var2 first element for bits.,bits = token . split_contents ( ) [ 1 : ],bits = token . var1 ( ) [ 1 : ]
"call the method token.split_contents, substitute the result without the first element for bits.",call method token var1 substitute result var2 first element for bits.,bits = token . split_contents ( ) [ 1 : ],bits = token . var1 ( ) [ 1 : ]
"call the method token.split_contents, substitute results without the first element for bits.",call method token var1 substitute results var2 first element for bits.,bits = token . split_contents ( ) [ 1 : ],bits = token . var1 ( ) [ 1 : ]
"call the method urlparse with an argument url, substitute the result for bits.","call method var0 with argument url, substitute result for bits.",bits = urlparse ( url ),bits = var0 ( url )
"call the function urlsplit with an argument location, substitute the result for bits.","call function var0 with argument location, substitute result for bits.",bits = urlsplit ( location ),bits = var0 ( location )
substitute context for block.context.,substitute context for var0 ,block . context = context,var0 = context
substitute self for block.,substitute self for block.,block = self,block = self
"convert self to a tuple, call the result with 2 arguments: block.name and block.nodelist, substitute the result for block.","convert self to tuple, call result with 2 arguments: block.name and var0 substitute result for block.","block = type ( self ) ( block . name , block . nodelist )","block = type ( self ) ( block . name , var0 )"
"take elements of token_string from second to second last element and strip the whitespaces surrounding the result,","take elements of var0 from second to second last element and strip var1 surrounding result,",block_content = token_string [ 2 : - 2 ] . strip ( ),block_content = var0 [ 2 : - 2 ] . strip ( )
"compiled_parent.nodelist.get_nodes_by_type, called with an argument BlockNode.   call the method block_context.add_blocks with an argument blocks.",compiled_parent.nodelist var1 called with argument var2 call method var4 var6 with argument blocks.,block_context . add_blocks ( blocks ),var4 . var6 ( blocks )
call the method block_context.add_blocks with an argument self.block.,call method var0 var2 with argument var3 ,block_context . add_blocks ( self . blocks ),var0 . var2 ( self . blocks )
call the method block_context.push with 2 arguments: self.name and push.,call method var0 push with 2 arguments: var1 and push.,"block_context . push ( self . name , push )","var0 . push ( var1 , push )"
"get value under the BLOCK_CONTEXT_KEY key of context.render_context dictionary, substitute it for block_context.","get value under var0 key of context var2 dict, substitute it for var3 ",block_context = context . render_context . get ( BLOCK_CONTEXT_KEY ),var3 = context . var2 . get ( var0 )
"get the value under the BLOCK_CONTEXT_KEY key of the context.render_context dictionary, substitute it for block_context.","get value under var0 key of context var2 dict, substitute it for var3 ",block_context = context . render_context [ BLOCK_CONTEXT_KEY ],var3 = context . var2 [ var0 ]
BLOCK_CONTEXT_KEY is a strign 'block_context'.,var0 is var1 var2.,BLOCK_CONTEXT_KEY = 'block_context',var0 = var2
where '%s' is replaced with first element of bits.   substitute second element for bits for block_name.,var0 var1 is replaced with first element of bits var2 substitute second element for bits for var3 ,block_name = bits [ 1 ],var3 = bits [ 1 ]
"call the function re.compile with an argument raw string ""^\s*blocktrans(\s+.*context\s+((?:""[^""]*?"")|(?:'[^']*?')))?(?:\s+|$)"",","call the function re.compile with an argument raw string ""^\s*blocktrans(\s+.*context\s+((?:""[^""]*?"")|(?:'[^']*?')))?(?:\s+|$)"",",block_re = re . compile ( r'''^\s*blocktrans(\s+.*context\s+((?:'[^']*?')|(?:'[^']*?')))?(?:\s+|$)''' ),block_re = re . compile ( r'''^\s*blocktrans(\s+.*context\s+((?:'[^']*?')|(?:'[^']*?')))?(?:\s+|$)''' )
BLOCK_TAG_END is a string '%}'.,var0 is string var1.,BLOCK_TAG_END = '%}',var0 = var1
BLOCK_TAG_START is a string '{%'.,var0 is string var1.,BLOCK_TAG_START = '{%',var0 = var1
"blocks is a dictionary with elements: n for n.name, for every n in return value of the method,","blocks is dict with elements: n for var0 for every n in return value of method,","blocks = dict ( ( n . name , n ) for n in compiled_parent . nodelist . get_nodes_by_type ( BlockNode ) )","blocks = dict ( ( var0 , n ) for n in compiled_parent . nodelist . get_nodes_by_type ( BlockNode ) )"
BM_compatible is boolean True.,var0 is boolean var1 ,BM_compatible = True,var0 = var1
"call the function block_re.match with an argument t.contents, substitute the result for bmatch.",call function var0 match with argument var2 substitute result for var3 ,bmatch = block_re . match ( t . contents ),var3 = var0 . match ( var2 )
substitute msg for body_msg.,substitute msg for var0 ,body_msg = msg,var0 = msg
append tuple containing element attr to boolean_attrs.,append tuple containing element attr to var0 ,"boolean_attrs . append ( ( attr , ) )","var0 . append ( ( attr , ) )"
boolean_attrs is an empty list.,var0 is empty list.,boolean_attrs = [ ],var0 = [ ]
"both_after is an list with an element instance of Tok class, created with 2 arguments: string 'other' and raw string '.'.","var0 is list with element instance of var1 class, created with 2 arguments: string var3 and raw string var4.","both_after = [ Tok ( 'other' , r'.' ) , ]","var0 = [ var1 ( var3 , '.' ) ]"
"both_before is a list containing 14 elements, all of them are instances of Tok class, created with 2 arguments, a string and a raw string.","var0 is list containing 14 elements, all of var1 are instances of var2 class, created with 2 arguments, string and raw string.","both_before = [  Tok ( 'comment' , r'/\*(.|\n)*?\*/' ) ,  Tok ( 'linecomment' , r'//.*?$' ) ,  Tok ( 'ws' , r'\s+' ) ,  Tok ( 'keyword' , literals ( '''                            break case catch class const continue debugger                            default delete do else enum export extends                            finally for function if import in instanceof                            new return super switch this throw try typeof                            var void while with                            ''' , suffix = r'\b' ) , next = 'reg' ) ,  Tok ( 'reserved' , literals ( 'null true false' , suffix = r'\b' ) , next = 'div' ) ,  Tok ( 'id' , r'''                   ([a-zA-Z_$   ]|\\u[0-9a-fA-Z]{4})   # first char                   ([a-zA-Z_$0-9]|\\u[0-9a-fA-F]{4})*  # rest chars                   ''' , next = 'div' ) ,  Tok ( 'hnum' , r'0[xX][0-9a-fA-F]+' , next = 'div' ) ,  Tok ( 'onum' , r'0[0-7]+' ) ,  Tok ( 'dnum' , r'''                     (   (0|[1-9][0-9]*)     # DecimalIntegerLiteral                         \.                  # dot                         [0-9]*              # DecimalDigits-opt                         ([eE][-+]?[0-9]+)?  # ExponentPart-opt                     |                         \.                  # dot                         [0-9]+              # DecimalDigits                         ([eE][-+]?[0-9]+)?  # ExponentPart-opt                     |                         (0|[1-9][0-9]*)     # DecimalIntegerLiteral                         ([eE][-+]?[0-9]+)?  # ExponentPart-opt                     )                     ''' , next = 'div' ) ,  Tok ( 'punct' , literals ( '''                          >>>= === !== >>> <<= >>= <= >= == != << >> &&                          || += -= *= %= &= |= ^=                          ''' ) , next = 'reg' ) ,  Tok ( 'punct' , literals ( '++ -- ) ]' ) , next = 'div' ) ,  Tok ( 'punct' , literals ( '{ } ( [ . ; , < > + - * % & | ^ ! ~ ? : =' ) , next = 'reg' ) ,  Tok ( 'string' , r''([^'\\]|(\\(.|\n)))*?'' , next = 'div' ) ,  Tok ( 'string' , r''([^'\\]|(\\(.|\n)))*?'' , next = 'div' ) ,  ]","var0 = [ var2('comment', r'/\*(.|\n)*?\*/'),  var2('linecomment', r'//.*?$'),  var2('ws', r'\s+'),  var2('keyword', literals('''                            break case catch class const continue debugger                            default delete do else enum export extends                            finally for function if import in instanceof                            new return super switch this throw try typeof                            var void while with                            ''', suffix = r'\b'), next = 'reg'),  var2('reserved', literals('null true false', suffix = r'\b'), next = 'div'),  var2('id', r'''                  ([a-zA-Z_$  ]|\\u[0-9a-fA-Z]{4})   # first char                  ([a-zA-Z_$0-9]|\\u[0-9a-fA-F]{4})*  # rest chars                   ''', next = 'div'),  var2('hnum', r'0[xX][0-9a-fA-F]+', next = 'div'),  var2('onum', r'0[0-7]+'),  var2('dnum', r'''                    ( (0|[1-9][0-9]*)     # DecimalIntegerLiteral                         \.                 # dot                         [0-9]*              # DecimalDigits-opt                        ([eE][-+]?[0-9]+)?  # ExponentPart-opt                     |                         \.                 # dot                         [0-9]+              # DecimalDigits                        ([eE][-+]?[0-9]+)?  # ExponentPart-opt                     |                        (0|[1-9][0-9]*)     # DecimalIntegerLiteral                        ([eE][-+]?[0-9]+)?  # ExponentPart-opt                    )                     ''', next = 'div'),  var2('punct', literals('''                          >>>= ===!== >>> <<= >>= <= >= ==!= << >> &&                          || += -= *= %= &= |= ^=                          '''), next = 'reg'),  var2('punct', literals('++ --)]'), next = 'div'),  var2('punct', literals('{ }([.;, < > + - * % & | ^! ~?: ='), next = 'reg'),  var2('string', r''([^'\\]|(\\(.|\n)))*?'', next = 'div'),  var2('string', r''([^'\\]|(\\(.|\n)))*?'', next = 'div'), ]"
"decrement number by one, multiply it with self.per_page, substitute the result for bottom.","decrement number by one, multiply it with self var1 substitute result for bottom.",bottom = ( number - 1 ) * self . per_page,bottom = ( number - 1 ) * self . var1
"call the method boundary.encode with an argument string 'ascii', substitute the result for boundary.","call method var0 with argument string var1, substitute result for boundary.",boundary = boundary . encode ( 'ascii' ),boundary = var0 ( var1 )
"assign the result to ctypes and opts.   get the value under the 'boundary' key of the opts dictionary, substitute it for boundary.","assign result to var0 and opts var1 get value under var2 key of opts dict, substitute it for boundary.",boundary = opts . get ( 'boundary' ),boundary = opts . get ( var2 )
"call the method self._find_boundary with 2 arguments: chunk and boolean if length of chunks is lesser than self._rollback,",call method var0 with 2 arguments: chunk and boolean if length of chunks is lesser var1 var2 ,"boundary = self . _find_boundary ( chunk , len ( chunk ) < self . _rollback )","boundary = var0 ( chunk , len ( chunk ) < var2 )"
"boundarystream is an instance of InterBoundaryIter class, created with self._stream and self._separator as arguments.","var0 is instance of var1 class, created with var2 and var3 as arguments.","boundarystream = InterBoundaryIter ( self . _stream , self . _separator )","var0 = var1 ( var2 , var3 )"
call the method bpython.embed.,call method var0 ,bpython . embed ( ),var0 ( )
break from the smallest enclosing loop.,break from smallest enclosing loop.,break,break
break from the endless loop.,break from endless loop.,break,break
breaks from the smallest enclosing loop execution.,breaks from smallest enclosing loop execution.,break,break
break from the smallest enclosing loop execution.,break from smallest enclosing loop execution.,break,break
break the execution of the smallest enclosing loop.,break execution of smallest enclosing loop.,break,break
break the loop execution.,break loop execution.,break,break
"break the loop execution,","break loop execution,",break,break
"break from the loop execution,","break from loop execution,",break,break
and database set to value under the 'database' key of the options dictionary.   break the loop execution.,and database set to value under var0 key of options dict var1 break loop execution.,break,break
break from this loop execution.,break from var0 loop execution.,break,break
use the result and file_obj as arguments for the call to the method self._files.appendlist.   break the loop execution.,use result and var0 as arguments for call to method var1 break loop execution.,break,break
buffer_ is None.,var0 is var1 ,buffer_ = None,var0 = var1
buffer_types is a tuple with 2 elements bytearray and memoryview.,var0 is tuple with 2 elements var1 and var2 ,"buffer_types = ( bytearray , memoryview )","var0 = var1 , var2"
"buffer_types is a tuple with 3 elements: bytes, bytearray and memoryview.",var0 is tuple with 3 elements: bytes var1 and var2 ,"buffer_types = ( bytes , bytearray , memoryview )","var0 = bytes , var1 , var2"
"convert six.PY3 to an integer, substitute it for buffering.","convert six var0 to integer, substitute it for buffering.",buffering = int ( six . PY3 ),buffering = int ( six . var0 )
"BUILTIN_SERIALIZERS is a dictionary containing 4 inital entries: ""django.core.serializers.xml_serializer"" for ""xml"",","BUILTIN_SERIALIZERS is dict containing 4 var0 entries: var1 for var2,","BUILTIN_SERIALIZERS = { 'xml' : 'django.core.serializers.xml_serializer' , 'python' : 'django.core.serializers.python' , 'json' : 'django.core.serializers.json' , 'yaml' : 'django.core.serializers.pyyaml' , }","BUILTIN_SERIALIZERS = { 'xml' : 'django.core.serializers.xml_serializer' , 'python' : 'django.core.serializers.python' , 'json' : 'django.core.serializers.json' , 'yaml' : 'django.core.serializers.pyyaml' }"
"call the function import_library with an argument module, append the result to builtins.","call function var0 with argument module, append result to var1 ",builtins . append ( import_library ( module ) ),var1 . append ( var0 ( module ) )
builtins is an empty list.,var0 is empty list.,builtins = [ ],var0 = [ ]
byte_array is a bytearray of byte_array,var0 is var1 of byte_array,byte_array = bytearray ( byte_array ),var0 = var1 ( var0 )
convert byte_array to an array of bytes,convert var0 to array of bytes,byte_array = bytearray ( byte_array ),var0 = bytearray ( var0 )
print the array of bytes of the string shellcode,print array of bytes of string var0,bytearray ( shellcode ),bytearray ( var0 )
increment bytes_read by length of bytes.,increment var0 by length of bytes.,bytes_read += len ( bytes ),var0 += len ( bytes )
bytes_read is integer 0.,var0 is integer 0.,bytes_read = 0,var0 = 0
substitute io.BytesIO for BytesIO.,substitute io var0 for var0 ,BytesIO = io . BytesIO,var0 = io . var0
append tok to c.,append var0 to var1,c . append ( tok ),var1append ( var0 )
"call the load method on the c class instance, with the cookie argument.","call load method on c class instance, with cookie argument.",c . load ( cookie ),c . load ( cookie )
initialize c to an empty string,initialize c to empty string,c = '',c = ''
c is an empty list.,c is empty list.,c = [ ],c = [ ]
"perform bitwise xor between a and b, then store the result in c","perform var0 xor between and b, then store result in c",c = a ^ b,c = a ^ b
c is the xor between a and b,c is xor between and b,c = a ^ b,c = a ^ b
c is the bitwise xor between a and b,c is var0 xor between and b,c = a ^ b,c = a ^ b
"remove config dictionary element under '()' key, substitute it for c.","remove var0 dict element under var1 key, substitute it for var2",c = config . pop ( '()' ),c = var0 . pop ( var1 )
substitute cookie for c.,substitute cookie for var0,c = cookie,c = cookie
set c to the reversed hexadecimal value of temp,set c to reversed hexadecimal value of temp,c = hex ( temp ) [ : : - 1 ],c = hex ( temp ) [ : : - 1 ]
"convert text to an integer, substitute it for c.","convert text to integer, substitute it for var0",c = int ( text ),c = int ( text )
"convert text without first element to hexadecimal integer, substitute it for c.","convert text var0 first element to hexadecimal integer, substitute it for var1","c = int ( text [ 1 : ] , 16 )","c = int ( text [ 1 : ] , 16 )"
"call the method self.resolve with an argument c, substitute the result for c.",call method var0 with argument var1 substitute result for var1,c = self . resolve ( c ),c = var0 ( c )
c is an instance of the class SimpleCookie.,c is instance of class var0 ,c = SimpleCookie ( ),c = var0 ( )
substitute i-th element of subject for c.,substitute i-th element of subject for var0,c = subject [ i ],c = subject [ i ]
store in c the reverse of the variable temp,store in c reverse of variable temp,c = temp [ : : - 1 ],c = temp [ : : - 1 ]
c is the result of the or operation between val1 and val2,c is result of or operation between var0 and var1,c = val1 | val2,c = var0 | var1
call the method cache.clear.,call method var0 ,cache . clear ( ),var0 ( )
call the function cache.close.,call function var0 ,cache . close ( ),var0 ( )
"call the method cache.set with cache_key, an empty list and cache_timeout as arguments.",call method var0 with var1 empty list and var2 as arguments.,"cache . set ( cache_key , [ ] , cache_timeout )","var0 ( var1 , [ ] , var2 )"
"call the method cache.set, with cache_key, headerlist, cache_timeout as arguments.",call method var0 with var1 var2 var3 as arguments.,"cache . set ( cache_key , headerlist , cache_timeout )","var0 ( var1 , var2 , var3 )"
substitute oldroot for value under the key key of the cache dictionary.,substitute var0 for value under key key of cache dict.,cache [ key ] = oldroot,cache [ key ] = var0
substitute result for cache dictionary value under the key key.,substitute result for cache dict value under key key.,cache [ key ] = result,cache [ key ] = result
substitute result for value under the mem_args key of the cache dictionary.,substitute result for value under var0 key of cache dict.,cache [ mem_args ] = result,cache [ var0 ] = result
call the function _create_cache with argument alias.,call function var0 with argument alias.,cache = _create_cache ( alias ),cache = var0 ( alias )
"and stacklevel set to 2 as arguments.   call the _create_cache with backend and dictionary kwargs as arguments, substitute the result for cache.","and var0 set to 2 as arguments var1 call var2 with var3 and dict var4 as arguments, substitute result for cache.","cache = _create_cache ( backend , ** kwargs )","cache = var2 ( var3 , ** var4 )"
"cache is an instance of BaseDatabaseCache class, created with arguments: tablename and an empty dictionary.","cache is instance of var0 class, created with arguments: var1 and empty dict.","cache = BaseDatabaseCache ( tablename , { } )","cache = var0 ( var1 , { } )"
substitute value under the cache_alias key of the caches dictionary for cache.,substitute value under var0 key of caches dict for cache.,cache = caches [ cache_alias ],cache = caches [ var0 ]
set cache to the value of the dictionary caches under the key settings.CACHE_MIDDLEWARE_ALIAS.,set cache to value of dict caches under key settings var0 ,cache = caches [ settings . CACHE_MIDDLEWARE_ALIAS ],cache = caches [ settings . var0 ]
"get value under the key settings.CACHE_MIDDLEWARE_ALIAS of caches dictionary, substitute with it the cache.","get value under key settings var0 of caches dict, substitute with it cache.",cache = caches [ settings . CACHE_MIDDLEWARE_ALIAS ],cache = caches [ settings . var0 ]
"call the DefaultCacheProxy function, substitute it for cache.","call var0 function, substitute it for cache.",cache = DefaultCacheProxy ( ),cache = var0 ( )
cache is an empty dictionary.,cache is empty dict.,cache = dict ( ),cache = dict ( )
substitute boolean False for cache_choices.,substitute boolean var0 for var1 ,cache_choices = False,var1 = var0
substitute cache.get for cache_get.,substitute var0 for var1 ,cache_get = cache . get,var1 = var0
"call the function getattr with request, string 'LANGUAGE_CODE' and function get_language as arguments,","call function var0 with request, string var1 and function var2 as arguments,","cache_key += '.%s' % getattr ( request , 'LANGUAGE_CODE' , get_language ( ) )","cache_key += '.%s' % var0 ( request , var1 , var2 ( ) )"
"replace the result for tz_name.   call the method tz_name.encode with the arguments 'ascii' and 'ignore', call the method decode on the result with 'ascii' as argument,","replace result for var0 call method var0 encode with arguments var5 and var7, call method decode on result with var5 as argument,","cache_key += '.%s' % tz_name . encode ( 'ascii' , 'ignore' ) . decode ( 'ascii' ) . replace ( ' ' , '_' )","cache_key += '.%s' % var0 . encode ( var5 , 'ignore' ) . decode ( var5 ) . replace ( ' ' , '_' )"
"call the function _generate_cache_header_key with key_prefix and request as arguments, substitute the result for cache_key.","call function _generate_cache_header_key with var0 and request as arguments, substitute result for var1 ","cache_key = _generate_cache_header_key ( key_prefix , request )","var1 = _generate_cache_header_key ( var0 , request )"
"call function _generate_cache_header_key with arguments key_prefix and request, substitute the result for cache_key.","call function _generate_cache_header_key with arguments var0 and request, substitute result for var1 ","cache_key = _generate_cache_header_key ( key_prefix , request )","var1 = _generate_cache_header_key ( var0 , request )"
"use the result as an argument for function call of force_bytes, use the result as an argument for calling the method hashlib.md5,   put the result in url.   substitute the '%s' in string 'views.decorators.cache.cache_header.%s.%s' with key_prefix and result of the function call,","use result as argument for function call of var0 use result as argument for calling method var2 put result in url var3 substitute var5 in string var6 with var9 and result of function call,","cache_key = 'views.decorators.cache.cache_header.%s.%s' % ( key_prefix , url . hexdigest ( ) )","cache_key = var6 % ( var9 , url . hexdigest ( ) )"
"force_bytes function, use the result as the argument for the call to the hashlib.mdb function, store the result in url.   substitute the '%s' in string 'views.decorators.cache.cache_page.%s.%s.%s.%s' with key_prefix, method,","var0 function, use result as argument for call to var1 function, store result in url var2 substitute var3 in string var4 with var7 method,","cache_key = 'views.decorators.cache.cache_page.%s.%s.%s.%s' % ( key_prefix , method , url . hexdigest ( ) , ctx . hexdigest ( ) )","cache_key = var4 % ( var7 , method , url . hexdigest ( ) , ctx . hexdigest ( ) )"
cache_key is a tuple with 2 argumetns: format_type and lang.,var0 is tuple with 2 argumetns: var2 and var3 ,"cache_key = ( format_type , lang )","var0 = var2 , var3"
cache_suffix is a string '.djcache'.,var0 is string var1.,cache_suffix = '.djcache',var0 = var1
substitute integer 0 for cache_timeout.,substitute integer 0 for var0 ,cache_timeout = 0,var0 = 0
substitute settings.CACHE_MIDDLEWARE_SECONDS for cache_timeout.,substitute settings var0 for var1 ,cache_timeout = settings . CACHE_MIDDLEWARE_SECONDS,var1 = settings . var0
substitute value under the cache_key key of the _format_cache dictionary for cached.,substitute value under var0 key of _format_cache dict for cached.,cached = _format_cache [ cache_key ],cached = _format_cache [ var0 ]
"call the function find_template_loader with an argument loader, append the result to cached_loaders.","call function var0 with argument loader, append result to var1 ",cached_loaders . append ( find_template_loader ( loader ) ),var1 . append ( var0 ( loader ) )
cached_loaders is an empty list.,var0 is empty list.,cached_loaders = [ ],var0 = [ ]
"call the CacheHandler function, substitute the result for caches.","call var0 function, substitute result for caches.",caches = CacheHandler ( ),caches = var0 ( )
"call the function call_command with string 'flush', verbosity set to greater element, self.verbosity decremented by 1 or integer 0,","call function var0 with string var2, verbosity set to greater element var3 var4 by 1 or integer 0,","call_command ( 'flush' , verbosity = max ( self . verbosity - 1 , 0 ) , interactive = False , database = db , reset_sequences = False , inhibit_post_migrate = True , )","var0 ( var2 , verbosity = max ( var3 - 1 , 0 ) , interactive = False , database = db , reset_sequences = False , inhibit_post_migrate = True )"
"call the function call_command with 6 arguments, string 'runserver', addrport as the value under the 'addrport' key of options dictionary,","call function var0 with 6 arguments, string var2, addrport as value under var5 key of options dict,","call_command ( 'runserver' , addrport = options [ 'addrport' ] , shutdown_message = shutdown_message , use_reloader = False , use_ipv6 = options [ 'use_ipv6' ] , use_threading = use_threading )","var0 ( var2 , addrport = options [ 'addrport' ] , shutdown_message = shutdown_message , use_reloader = False , use_ipv6 = options [ 'use_ipv6' ] , use_threading = use_threading )"
"call the function call_command with 3 arguments: string 'loaddata', string 'initial_data' and unpacked dictionary options.","call function var0 with 3 arguments: string var2, string var3 and unpacked dict options.","call_command ( 'loaddata' , 'initial_data' , ** options )","var0 ( var2 , 'initial_data' , ** options )"
"call the method call_command with string 'loaddata', string 'initial_data', verbosity set to self.verbosity,","call method var0 with string var2, string var3, verbosity set to var6 ","call_command ( 'loaddata' , 'initial_data' , verbosity = self . verbosity , database = connection . alias , skip_validation = True , app_label = app_label , hide_empty = True )","var0 ( var2 , 'initial_data' , verbosity = var6 , database = connection . alias , skip_validation = True , app_label = app_label , hide_empty = True )"
"serialize set to boolean False, substitute the return value for db_name.   call the method call_command with 3 arguments, string 'loaddata', unpacked list fixture_labels and unpacked dictionary containing 1 element: verbosity for 'verbosity'.","serialize set to boolean var0 substitute return value for var1 call method var4 with 3 arguments, string var6, unpacked list var7 and unpacked dict containing 1 element: verbosity for var9.","call_command ( 'loaddata' , * fixture_labels , ** { 'verbosity' : verbosity } )","var4 ( var6 , * var7 , ** { 'verbosity' : verbosity } )"
"call the function call_command with 3 arguments: string ""createsuperuser"", interactive is boolean True,","call function var0 with 3 arguments: string var2, interactive is boolean var3 ","call_command ( 'createsuperuser' , interactive = True , database = options [ 'database' ] )","var0 ( 'createsuperuser' , interactive = var3 , database = options [ 'database' ] )"
call the function call_command with 2 arguments: string migrate and unpacked dictionary options.,call function var0 with 2 arguments: string migrate and unpacked dict options.,"call_command ( 'migrate' , ** options )","var0 ( 'migrate' , ** options )"
substitute callable for callable.,substitute callable for callable.,callable = callable,callable = callable
"assign the values to the callback, callback_args, callback_kwargs, respectively, from the resolver_match tuple.","assign values to callback var0 var1 respectively, from var3 tuple.","callback , callback_args , callback_kwargs = resolver_match","callback , var0 , var1 = var3"
"call the resolver.resolve_error_handler with integer 500 as the argument, assign the resulting tuple elements to the callback,","call resolver var1 with integer 500 as argument, assign resulting tuple elements to callback,","callback , param_dict = resolver . resolve_error_handler ( 500 )","callback , param_dict = resolver . var1 ( 500 )"
"call the function resolver.resolve_error_handler with status_code as an argument, assign the result to the callback and param_dict, respectively.","call function resolver var1 with var2 as argument, assign result to callback and var4 respectively.","callback , param_dict = resolver . resolve_error_handler ( status_code )","callback , var4 = resolver . var1 ( var2 )"
call the functoin callback with an argument self.,call var0 callback with argument self.,callback ( self ),callback ( self )
substitute callback.func for callback.,substitute var0 for callback.,callback = callback . func,callback = var0
"replace '%s' in the string 'handler%s' with view_type, use it as an name of the attribute to get from the self.urlconf_module,",replace var0 in string var1 with var3 use it as name of attribute to get from self var6 ,"callback = getattr ( self . urlconf_module , 'handler%s' % view_type , None )","callback = getattr ( self . var6 , var1 % var3 , None )"
"replace '%s' in the string 'handler%s' with view_type, use it as an name of the attribute to get from the urls, substitute it for callback.","replace var0 in string var1 with var3 use it as name of attribute to get from urls, substitute it for callback.","callback = getattr ( urls , 'handler%s' % view_type )","callback = getattr ( urls , var1 % var3 )"
"callback is an lambda function with an argument response and with return value result of the method middleware.process_response,",callback is lambda function with argument response and with return value result of method middleware var1 ,"callback = lambda response : middleware . process_response ( request , response )","callback = lambda response : middleware . var1 ( request , response )"
substitute pattern._callback for callback.,substitute var0 for callback.,callback = pattern . _callback,callback = var0
can_import_settings is boolean False.,var0 is boolean var1 ,can_import_settings = False,var0 = var1
can_import_settings is boolean True.,var0 is boolean var1 ,can_import_settings = True,var0 = var1
convert candidate to a string.,convert didate to string.,candidate = str ( candidate ),candidate = str ( candidate )
"replace all the occurrences of the '%' string for '%%', append result to the previous result, substitute it for candidate_pat.","replace all occurrences of var0 string for var1, append result to previous result, substitute it for var3 ","candidate_pat = prefix_norm . replace ( '%' , '%%' ) + result","var3 = prefix_norm . replace ( var0 , '%%' ) + result"
"candidate_pat formated with candidate_subs and re.UNICODE.   candidate_subs is dictionary created from elements in return value of the function urlquote called with argument v,",var0 formated with var1 and re var6 var1 is dict created from elements in return value of function var8 called with argument var5 ,"candidate_subs = dict ( ( k , urlquote ( v ) ) for ( k , v ) in candidate_subs . items ( ) )","var1 var5 dict((var5,var5urlquote(var5)) for(var5,var5var5) in var1.var5tems(var5)"
"create a list of tuples out of 2 lists: appended params list to prefix_args and text_args, covert the result into a dictionary,","create list of var0 out of 2 lists: appended var1 list to var2 and var3 covert result into dict,","candidate_subs = dict ( zip ( prefix_args + params , text_args ) )","candidate_subs = dict ( zip ( var2 + var1 , var3 ) )"
substitute text_kwargs for candidate_subs.,substitute var0 for var1 ,candidate_subs = text_kwargs,var1 = var0
"convert the first element of the result to uppercase, append to it the rest of the result, substitute it for capfirst.   call the function allow_lazy with 3 arguments: capfirst and six.text_type.","convert first element of result to uppercase, append to it rest of result, substitute it for var0 call function var3 with 3 arguments: var0 and six var5 ","capfirst = allow_lazy ( capfirst , six . text_type )","var0 = var3 ( var0 , six . var5 )"
"if identity lambda function returns false, substitute the x for capfirst, if not call the function force_text with an argument x,","if identity lambda function returns false, substitute x for var0 if not call function var1 with argument x,",capfirst = lambda x : x and force_text ( x ) [ 0 ] . upper ( ) + force_text ( x ) [ 1 : ],var0 = lambda x : x and var1 ( x ) [ 0 ] . upper ( ) + var1 ( x ) [ 1 : ]
"categories is a list containing the results of the function to_unicode, called with an argument c, for every c in categories.","categories is list containing results of function var0 called with argument c, for every c in categories.",categories = [ ( c ) for c in categories ],categories = [ c for c in categories ]
"categories is a list containing the results of the function force_text, called with an argument c, for every c in categories.","categories is list containing results of function var0 called with argument c, for every c in categories.",categories = [ force_text ( c ) for c in categories ],categories = [ var0 ( c ) for c in categories ]
"replace all occurrences of symbol '_' in string k with symbol '-', use new string as key to find a value in dictionary cc,","replace all occurrences of symbol var0 in string k with symbol var1, use new string as key to find value in dict cc,","cc [ k . replace ( '_' , '-' ) ] = v","cc [ k . replace ( var0 , '-' ) ] = v"
"replace this value with v.   call the function dictvalue with el as argument for every el in values of dictionary cc,","replace var0 value with var1 call function var3 with el as argument for every el in values of dict cc,","cc = ', ' . join ( dictvalue ( el ) for el in cc . items ( ) )","cc = ', ' . join ( var3 ( el ) for el in cc . items ( ) )"
cc is an empty dictionary.,cc is empty dict.,cc = { },cc = { }
"find the value of response under the key 'Cache-Control', use it as a delimiter to split string ss_delim_re,","find value of response under key var0, use it as var1 to split string var2 ",cc = cc_delim_re . split ( response [ 'Cache-Control' ] ),cc = cc_delim_re . split ( response [ var0 ] )
"cc is a dictionary populated with items by calling function _to_tuple with el as an argument,","cc is dict populated with items by calling function _to_tuple with el as argument,",cc = dict ( _to_tuple ( el ) for el in cc_delim_re . split ( response [ 'Cache-Control' ] ) ),cc = dict ( _to_tuple ( el ) for el in cc_delim_re . split ( response [ 'Cache-Control' ] ) )
"assign the result to cc.   cc is a dictionary populated with items by calling function dictitem with el as argument, for every el in cc.","assign result to cc var0 cc is var0 dict populated with items by calling function var2 with el as argument, for every el in ccvar0",cc = dict ( dictitem ( el ) for el in cc ),cc = dict ( var2 ( el ) for el in cc )
"compile regular expression based on the string '\s*,\s*' and assign the result to cc_delim_re.",compile regular expression based on string var0 and assign result to var1 ,"cc_delim_re = re . compile ( r'\s*,\s*' )","var1 = re . compile ( '\\s*,\\s*' )"
"get the next element of the iterable pattern_iter, assign the result for ch and escaped, respectively.","get next element of var0 var1 assign result for var2 and escaped, respectively.","ch , escaped = next ( input_iter )","var2 , escaped = next ( input_iter )"
"get the next element of the iterable pattern_iter, assign the result for ch and escaped, respectively.","get next element of var0 var1 assign result for var2 and escaped, respectively.","ch , escaped = next ( pattern_iter )","var2 , escaped = next ( var1 )"
ch is a string '%02x' modulo o,var0 is string var1 var2 o,ch = '%02x' % o,var0 = var1 % o
"get the next element of the iterable pattern_iter, assign the result for ch.",get next element of var0 var1 assign result for var2 ,ch = next ( input_iter ),var2 = next ( input_iter )
ch is None.,var0 is var1 ,ch = None,var0 = var1
"get the next element of the iterable pattern_iter, assign the result for ch2 and escaped, respectively.","get next element of var0 var1 assign result for var2 and escaped, respectively.","ch2 , escaped = next ( input_iter )","var2 , escaped = next ( input_iter )"
ch2 is None.,var0 is var1 ,ch2 = None,var0 = var1
assign the return value of the function fn to change.,assign return value of function var0 to change.,change = fn ( ),change = var0 ( )
changed is boolean False.,changed is boolean var0 ,changed = False,changed = var0
changed is boolean True.,changed is boolean var0 ,changed = True,changed = var0
"for every app in app_labels.   call the method autodetector.arrange_for_graph with 2 arguments: changes, loader.graph, substitute the result for changes.",for every app in var0 call method autodetector var3 with 2 arguments: changes var4 substitute result for changes.,"changes = autodetector . arrange_for_graph ( changes , loader . graph )","changes = autodetector . var3 ( changes , var4 )"
"call the method autodetector.changes with 3 arguments: graph set to loader.graph, trim_to_apps set to app_labels,",call method var0 with 3 arguments: graph set to var1 var2 set to var3 ,"changes = autodetector . changes ( graph = loader . graph , trim_to_apps = app_labels or None , convert_apps = app_labels or None , )","changes = var0 ( graph = var1 , var2 = var3 or None , convert_apps = var3 or None )"
"and return value of the call to the method ProjectState.from_apps with apps as an argument, assign it to the autodetector.   call the method autodetector.changes with the graph set to executor.loader.graph as an argument, substitute it for the changes.","and return value of call to method var0 var2 with var3 as argument, assign it to var4 call method var4 changes with graph set to var7 as argument, substitute it for changes.",changes = autodetector . changes ( graph = executor . loader . graph ),changes = var4 . changes ( graph = var7 )
"crate a dictionary with app mapping and from the class Migration, created with arguments: string 'custom' and app,",crate dict with var0 mapping and from class var2 created with arguments: string var3 and var0 ,"changes = dict ( ( app , [ Migration ( 'custom' , app ) ] ) for app in app_labels )","changes = dict ( ( var0 , [ var2 ( var3 , var0 ) ] ) for var0 in var0_labels )"
changeset is None.,var0 is var1 ,changeset = None,var0 = var1
"call the timestamp.strftime with string '%Y%m%d%H%M%S' as an argument, substitute the result for changeset.","call var0 with string var1 as argument, substitute result for var2 ",changeset = timestamp . strftime ( '%Y%m%d%H%M%S' ),var2 = var0 ( var1 )
"char2number is an dictionary, with 26 elements: 2 for 'a', 2 for 'b', 2 for 'c', 3 for 'd', 3 for 'e', 3 for 'f', 4 for 'g',","var0 is dict, with 26 elements: 2 for var1, 2 for var2, 2 for var3, 3 for var4, 3 for var6, 3 for var7, 4 for var8,","char2number = { 'a' : '2' , 'b' : '2' , 'c' : '2' , 'd' : '3' , 'e' : '3' , 'f' : '3' , 'g' : '4' , 'h' : '4' , 'i' : '4' , 'j' : '5' , 'k' : '5' , 'l' : '5' , 'm' : '6' , 'n' : '6' , 'o' : '6' , 'p' : '7' , 'q' : '7' , 'r' : '7' , 's' : '7' , 't' : '8' , 'u' : '8' , 'v' : '8' , 'w' : '9' , 'x' : '9' , 'y' : '9' , 'z' : '9' }","var0 = { var1 : '2' , 'b' : '2' , 'c' : '2' , 'd' : '3' , 'e' : '3' , 'f' : '3' , 'g' : '4' , 'h' : '4' , 'i' : '4' , 'j' : '5' , 'k' : '5' , 'l' : '5' , 'm' : '6' , 'n' : '6' , 'o' : '6' , 'p' : '7' , 'q' : '7' , 'r' : '7' , 's' : '7' , 't' : '8' , 'u' : '8' , 'v' : '8' , 'w' : '9' , 'x' : '9' , 'y' : '9' , 'z' : '9' }"
chars is a string 'abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*(-_=+)'.,chars is string 'abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*(-_=+)'.,chars = 'abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*(-_=+)',chars = 'abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*(-_=+)'
chars is an empty list,chars is empty list,chars = [ ],chars = [ ]
"call the function allow_lazy with an argument chars, substitute the result for chars.","call function var0 with argument chars, substitute result for chars.",chars = allow_lazy ( chars ),chars = var0 ( chars )
append ch to chars,append var0 to chars,chars . append ( ch ),chars . append ( var0 )
"get the value under the 'charset' key of the content_type_extra dictionary, substitute it for charset.","get value under var0 key of var1 dict, substitute it for charset.",charset = content_type_extra . get ( 'charset' ),charset = var1 . get ( var0 )
"if method msg.get_charset evaluates to true, call the get_output_charset method on the return value of the msg.get_charset method, substitute the result for charset, otherwise if it is false, substitute the string 'utf-8' for charset.","if method msg var2 evaluates to true, call var6 method on return value of msg var2 method, substitute result for var4 otherwise if it is false, substitute string var8 for var4 ",charset = msg . get_charset ( ) . get_output_charset ( ) if msg . get_charset ( ) else 'utf-8',var4 = msg . var2 ( ) . var6 ( ) if msg . var2 ( ) else var8
replace tags for check.tags.,replace tags for var0 ,check . tags = tags,var0 = tags
call the method check_for_language.cache_clear.,call method var0 var2 ,check_for_language . cache_clear ( ),var0 . var2 ( )
check_for_language is lambda function that returns boolean True for every argument x.,var0 is lambda function var1 returns boolean var2 for every argument var3,check_for_language = lambda x : True,var0 = lambda x : var2
"use the result as a key to get the value from the connections dictionary, substitute the result for connection.   call the function check_for_migrations with 2 arguments: app_config and connection.","use result as key to get value from connections dict, substitute result for connection var0 call function var1 with 2 arguments: var2 and connection.","check_for_migrations ( app_config , connection )","var1 ( var2 , connection )"
"call the function check_for_migrations with an arguments app_config, connection.",call function var0 with arguments var1 connection.,"check_for_migrations ( app_config , connection )","var0 ( var1 , connection )"
call the function check_for_migrations with arguments app_config and connection.,call function var0 with arguments var1 and connection.,"check_for_migrations ( app_config , connection )","var0 ( var1 , connection )"
call the method check_for_migrations with arguments: app_config and connection.,call method var0 with arguments: var1 and connection.,"check_for_migrations ( app_config , connection )","var0 ( var1 , connection )"
call the function check_for_migrations with an arguments app_config and connection.,call function var0 with arguments var1 and connection.,"check_for_migrations ( app_config , connection )","var0 ( var1 , connection )"
"call the function check_programs with 3 arguments: strings 'msguniq', 'msgmerge' and 'msgattrib'.","call function var0 with 3 arguments: strings var2, var3 and var5.","check_programs ( 'msguniq' , 'msgmerge' , 'msgattrib' )","var0 ( var2 , 'msgmerge' , 'msgattrib' )"
call the function check_programs with an argument string 'xgettext'.,call function var0 with argument string var2.,check_programs ( 'xgettext' ),var0 ( var2 )
"call the method self.clear_checkbox_id with an argument checkbox_name, substitute the result for checkbox_id.",call method self var1 with argument var3 substitute result for var2 ,checkbox_id = self . clear_checkbox_id ( checkbox_name ),var2 = self . var1 ( var3 )
"call the method self.clear_checkbox_name with an argument name, substitute the result for checkbox_name.","call method self var1 with argument name, substitute result for var2 ",checkbox_name = self . clear_checkbox_name ( name ),var2 = self . var1 ( name )
"append check to checks list, for every check in self.register_checks, if check has an attribute 'tags' and check.tags and tags set intersection is a non empty set.","append check to checks list, for every check in self var1 if check has attribute var2 and var3 and tags set intersection is non empty set.","checks = [ check for check in self . registered_checks if hasattr ( check , 'tags' ) and set ( check . tags ) & set ( tags ) ]","checks = [ check for check in self . registered_checks if hasattr ( check , var2 ) and set ( var3 ) & set ( tags ) ]"
substitute self.registered_checks for checks.,substitute self var1 for checks.,checks = self . registered_checks,checks = self . var1
append i-th element of existing to child_loggers.,append i-th element of existing to var0 ,child_loggers . append ( existing [ i ] ),var0 . append ( existing [ i ] )
child_loggers is an empty list.,var0 is empty list.,child_loggers = [ ],var0 = [ ]
child_nodelists is an tuple with 2 elements: strings 'nodelist_loop' and 'nodelist_empty'.,var0 is tuple with 2 elements: strings var1 and var2.,"child_nodelists = ( 'nodelist_loop' , 'nodelist_empty' )","var0 = var1 , 'nodelist_empty'"
child_nodelists is a tuple with 2 initial elements: strings 'nodelist_true' and 'nodelist_false'.,var0 is tuple with 2 initial elements: strings var1 and var2.,"child_nodelists = ( 'nodelist_true' , 'nodelist_false' )","var0 = var1 , 'nodelist_false'"
child_nodelists is a tuple with 2 elements strings 'nodelist_true' and 'nodelist_false'.,var0 is tuple with 2 elements strings var1 and var2.,"child_nodelists = ( 'nodelist_true' , 'nodelist_false' )","var0 = var1 , 'nodelist_false'"
child_nodelists is an tuple with an element 'nodelist'.,var0 is tuple with element var1.,"child_nodelists = ( 'nodelist' , )","var0 = var1 ,"
substitute idx-th element of self.choices for choice.,substitute idx-th element of var1 for choice.,choice = self . choices [ idx ],choice = var1 [ var0 ]
substitute CheckboxChoiceInput for choice_input_class.,substitute var0 for var1 ,choice_input_class = CheckboxChoiceInput,var1 = var0
choice_input_class is None.,var0 is var1 ,choice_input_class = None,var0 = var1
substitute RadioChoiceInput for choice_input_class.,substitute var0 for var1 ,choice_input_class = RadioChoiceInput,var1 = var0
"substitute choice for choice_value and choice_label, respectively.",substitute choice for var0 and var1 respectively.,"choice_value , choice_label = choice","var0 , var1 = choice"
insert none_value at the beginning of the choices list.,insert var0 at beginning of choices list.,"choices . insert ( 0 , none_value )","choices . insert ( 0 , var0 )"
"choices is a tuple with 3 elements: tuple with 2 elements: string '1' and return value of the function ugettext_lazy,",choices is tuple with 3 elements: tuple with 2 elements: string var0 and return value of function var1 ,"choices = ( ( '1' , ugettext_lazy ( 'Unknown' ) ) , ( '2' , ugettext_lazy ( 'Yes' ) ) , ( '3' , ugettext_lazy ( 'No' ) ) )","choices = ( var0 , var1 ( 'Unknown' ) ) , ( '2' , var1 ( 'Yes' ) ) , ( '3' , var1 ( 'No' ) )"
"substitute the result for the value under the 'month' key of the html dictionary.   for every i in successive list of integers from 1 to 30, append tuple containing i and i elements into a list,","substitute result for value under var0 key of html dict var1 for every i in successive list of integers from 1 to 30, append tuple containing i and i elements into list,","choices = [ ( i , i ) for i in range ( 1 , 32 ) ]","choices = [ ( i , i ) for i in range ( 1 , 32 ) ]"
"for every i in self.years append tuple containing i and i elements into a list, substitute the resulting string for choices.","for every i in var0 append tuple containing i and i elements into list, substitute resulting string for choices.","choices = [ ( i , i ) for i in self . years ]","choices = [ ( i , i ) for i in var0 ]"
"call the function chain with 2 arguments: self.choices and choices, convert the result into a list and substitute it for choices.","call function chain with 2 arguments: var0 and choices, convert result into list and substitute it for choices.","choices = list ( chain ( self . choices , choices ) )","choices = list ( chain ( var0 , choices ) )"
"substitute the result for the value under the 'year' key of the html dictionary.   call the function six.iteritems with an argument self.months, convert the result to a list and substitute it for choices.",substitute result for value under var0 key of html dict var1 call function var2 with argument var3 convert result to list and substitute it for choices.,choices = list ( six . iteritems ( self . months ) ),choices = list ( six . iteritems ( var3 ) )
choices is an property object of this class where _get_choices is a getter and _set_choices is a setter function.,choices is property object of var0 class var1 var2 is var3 and var4 is setter function.,"choices = property ( _get_choices , _set_choices )","choices = property ( var2 , var4 )"
"choices is an property property object of this class, with _get_choices getter and ChoiceField._set_choices setter functions.","choices is property property object of var0 class, with var1 var2 and var3 _set_choices setter functions.","choices = property ( _get_choices , ChoiceField . _set_choices )","choices = property ( var1 , var3 . _set_choices )"
increment chunk by over_chunk.,increment chunk by var0 ,chunk += over_chunk,chunk += var0
"join chunks into bytes string, substitute it for chunk.","join chunks into bytes string, substitute it for chunk.",chunk = b'' . join ( chunks ),chunk = b'' . join ( chunks )
"call the method base64.b64decode with an argument chunk, substitute the result for chunk.","call method var0 with argument chunk, substitute result for chunk.",chunk = base64 . b64decode ( chunk ),chunk = var0 ( chunk )
"call the method handler.receive_data_chunk with 2 arguments: chunk and i-th element of counters, substitute the result for chunk.","call method handler var1 with 2 arguments: chunk and i-th element of counters, substitute result for chunk.","chunk = handler . receive_data_chunk ( chunk , counters [ i ] )","chunk = handler . var1 ( chunk , counters [ i ] )"
"get the next element of iterable self, substitute it for chunk.","get next element of var0 self, substitute it for chunk.",chunk = next ( self ),chunk = next ( self )
"call the method self._read_limited, store the return value into chunk.",call method var0 store return value into chunk.,chunk = self . _read_limited ( ),chunk = var0 ( )
"evaluate the function BytesIO with argument chunk, substitute it for chunk_buffer.","evaluate function var0 with argument chunk, substitute it for var1 ",chunk_buffer = BytesIO ( chunk ),var1 = var0 ( chunk )
chunk_size is an integer 1024.,var0 is integer 1024.,chunk_size = 1024,var0 = 1024
"bring integer 2 to the power of 10, multiply it by integer 64, substitute the result for chunk_size.","bring integer 2 to power of 10, multiply it by integer 64, substitute result for var0 ",chunk_size = 64 * 2 ** 10,var0 = 64 * 2 ** 10
substitute the self.DEFAULT_CHUNK_SIZE for chunk_size.,substitute self var0 for var1 ,chunk_size = self . DEFAULT_CHUNK_SIZE,var1 = self . var0
substitute self.DEFAULT_CHUNK_SIZE for chunk_size.,substitute self var0 for var1 ,chunk_size = self . DEFAULT_CHUNK_SIZE,var1 = self . var0
append bytes to chunks.,append bytes to chunks.,chunks . append ( bytes ),chunks . append ( bytes )
chunks is a tuple containing 6 initial tuples:,chunks is tuple containing 6 initial tuples:,"chunks = ( ( 60 * 60 * 24 * 365 , ungettext_lazy ( '%d year' , '%d years' ) ) , ( 60 * 60 * 24 * 30 , ungettext_lazy ( '%d month' , '%d months' ) ) , ( 60 * 60 * 24 * 7 , ungettext_lazy ( '%d week' , '%d weeks' ) ) , ( 60 * 60 * 24 , ungettext_lazy ( '%d day' , '%d days' ) ) , ( 60 * 60 , ungettext_lazy ( '%d hour' , '%d hours' ) ) , ( 60 , ungettext_lazy ( '%d minute' , '%d minutes' ) ) )","chunks = ( 60 * 60 * 24 * 365 , ungettext_lazy ( '%d year' , '%d years' ) ) , ( 60 * 60 * 24 * 30 , ungettext_lazy ( '%d month' , '%d months' ) ) , ( 60 * 60 * 24 * 7 , ungettext_lazy ( '%d week' , '%d weeks' ) ) , ( 60 * 60 * 24 , ungettext_lazy ( '%d day' , '%d days' ) ) , ( 60 * 60 , ungettext_lazy ( '%d hour' , '%d hours' ) ) , ( 60 , ungettext_lazy ( '%d minute' , '%d minutes' ) )"
chunks is an empty list.,chunks is empty list.,chunks = [ ],chunks = [ ]
derive the class __proxy__ from the Promise base class.,derive class var0 from var1 base class.,class __proxy__ ( Promise ) : ,class var0 ( var1 ) : 
"misses, ""maxsize"" and ""currsize"".   derive class _HashedSeq from list base class.","misses, var0 and var1 var3 derive class _HashedSeq from list base class.",class _HashedSeq ( list ) : ,class _HashedSeq ( list ) : 
derive class _LazyDescr from the object base class.,derive class var0 from object base class.,class _LazyDescr ( object ) : ,class var0 ( object ) : 
derive class _LazyModule from the types.ModuleType base class.,derive class var0 from types var1 base class.,class _LazyModule ( types . ModuleType ) : ,class var0 ( types . var1 ) : 
derive class _MovedItems from the _LazyModule base class.,derive class var0 from _LazyModule base class.,class _MovedItems ( _LazyModule ) : ,class var0 ( _LazyModule ) : 
derive the class _OFFSET from the Structure base class.,derive class var0 from var1 base class.,class _OFFSET ( Structure ) : ,class var0 ( var1 ) : 
derive the class _OFFSET_UNION from the Union base class.,derive class var0 from var1 base class.,class _OFFSET_UNION ( Union ) : ,class var0 ( var1 ) : 
derive the class AdminEmailHandler from logging.Handler base class.,derive class var0 from logging var1 base class.,class AdminEmailHandler ( logging . Handler ) : ,class var0 ( logging . var1 ) : 
derive the AppCommand class from the BaseCommand base class.,derive var0 class from var1 base class.,class AppCommand ( BaseCommand ) : ,class var0 ( var1 ) : 
derive the class AppRegistryNotReady from the Exception base class.,derive class var0 from var1 base class.,class AppRegistryNotReady ( Exception ) : ,class var0 ( var1 ) : 
derive the class Archive from the object base class.,derive class var0 from object base class.,class Archive ( object ) : ,class var0 ( object ) : 
derive the class ArchiveException from the Exception base class.,derive class var0 from var1 base class.,class ArchiveException ( Exception ) : ,class var0 ( var1 ) : 
derive the class AssignmentNode form the base class TagHelperNode.,derive class var0 form base class var1 ,class AssignmentNode ( TagHelperNode ) : ,class var0 ( var1 ) : 
derive the class Atom1Feed from the SyndicationFeed base class.,derive class var0 from var1 base class.,class Atom1Feed ( SyndicationFeed ) : ,class var0 ( var1 ) : 
derive the class AutoEscapeControlNode from Node base class.,derive class var0 from var1 base class.,class AutoEscapeControlNode ( Node ) : ,class var0 ( var1 ) : 
derive the class BadHeaderError from the ValueError base class.,derive class var0 from var1 base class.,class BadHeaderError ( ValueError ) : ,class var0 ( var1 ) : 
"PROCESSING' for 102, 'OK' for 200, 'CREATED' for 201, 'ACCEPTED' for 202, 'NON-AUTHORITATIVE INFORMATION' for 203,   'NO CONTENT' for 204, 'RESET CONTENT' for 205, 'PARTIAL CONTENT' for 206, 'MULTI-STATUS' for 207, 'ALREADY REPORTED' for 208,   'IM USED' for 226, 'MULTIPLE CHOICES' for 300, 'MOVED PERMANENTLY' for 301, 'FOUND' for 302, 'SEE OTHER' for 303,   'NOT MODIFIED' for 304, 'USE PROXY' for 305, 'RESERVED' for 306, 'TEMPORARY REDIRECT' for 307, 'PERMANENT REDIRECT' for 308,   'BAD REQUEST' for 400, 'UNAUTHORIZED' for 401, 'PAYMENT REQUIRED' for 402, 'FORBIDDEN' for 403, 'NOT FOUND' for 404,   'METHOD NOT ALLOWED' for 405, 'NOT ACCEPTABLE' for 406, 'PROXY AUTHENTICATION REQUIRED' for 407, 'REQUEST TIMEOUT' for 408,   'CONFLICT' for 409, 'GONE' for 410, 'LENGTH REQUIRED' for 411, 'PRECONDITION FAILED' for 412, 'REQUEST ENTITY TOO LARGE' for 413,   'REQUEST-URI TOO LONG' for 414, 'UNSUPPORTED MEDIA TYPE' for 415, 'REQUESTED RANGE NOT SATISFIABLE' for 416,   'EXPECTATION FAILED' for 417, 'I'M A TEAPOT' for 418, 'UNPROCESSABLE ENTITY' for 422, 'LOCKED' for 423, 'FAILED DEPENDENCY' for 424,   'UPGRADE REQUIRED' for 426, 'PRECONDITION REQUIRED' for 428, 'TOO MANY REQUESTS' for 429, 'REQUEST HEADER FIELDS TOO LARGE' for 431,   'INTERNAL SERVER ERROR' for 500, 'NOT IMPLEMENTED' for 501, 'BAD GATEWAY' for 502, 'SERVICE UNAVAILABLE' for 503,   'GATEWAY TIMEOUT' for 504, 'HTTP VERSION NOT SUPPORTED' for 505, 'VARIANT ALSO NEGOTIATES' for 506, 'INSUFFICIENT STORAGE' for 507,   'LOOP DETECTED' for 508, 'NOT EXTENDED' for 510 and 'NETWORK AUTHENTICATION REQUIRED' for 511.   derive the class BadHeaderError from the ValueError base class.","PROCESSINGvar0OKvar2CREATEDvar4ACCEPTEDvar6NON-AUTHORITATIVE INFORMATIONvar13NO CONTENTvar30RESET CONTENTvar32PARTIAL CONTENTvar34MULTI-STATUSvar38ALREADY REPORTEDvar41IM USEDvar46MULTIPLE CHOICESvar49MOVED PERMANENTLYvar53FOUNDvar56SEE OTHERvar59NOT MODIFIEDvar69USE PROXYvar72RESERVEDvar74TEMPORARY REDIRECTvar78PERMANENT REDIRECTvar79BAD REQUESTvar87UNAUTHORIZEDvar89PAYMENT REQUIREDvar97FORBIDDENvar99NOT FOUNDvar100METHOD var60 ALLOWEDvar103NOT ACCEPTABLEvar105PROXY var106 REQUIREDvar108REQUEST TIMEOUTvar113CONFLICTvar115GONEvar117LENGTH REQUIREDvar119PRECONDITION FAILEDvar125REQUEST var126 var128 LARGEvar134REQUEST-URI var128 LONGvar138UNSUPPORTED var141 TYPEvar143REQUESTED var145 var60 SATISFIABLEvar147EXPECTATION FAILEDvar149Ivar151 for 418, var153 for 422, var156 for 423, var158 for 424 var14 var160 for 426, var162 for 428, var163 for 429, var166 for 431 var14 var169 for 500, var173 for 501, var175 for 502, var178 for 503 var14 var181 for 504, var182 for 505, var185 for 506, var189 for 507 var14 var192 for 508, var195 for 510 and var197 for 511 var14 derive class var199 from var201 base class.",class BadHeaderError ( ValueError ) : ,class var199 ( var201 ) : 
derive the class BadSerializer from the object base class.,derive class var0 from object base class.,class BadSerializer ( object ) : ,class var0 ( object ) : 
derive the class BadSignature from the Exception base class.,derive class var0 from var1 base class.,class BadSignature ( Exception ) : ,class var0 ( var1 ) : 
derive the class BaseArchive from the object base class.,derive class var0 from object base class.,class BaseArchive ( object ) : ,class var0 ( object ) : 
derive the class BaseCache from the object base class.,derive class var0 from object base class.,class BaseCache ( object ) : ,class var0 ( object ) : 
use the result as an argument for the call to the function self._out.write.   derive the BaseCommand class from the object base class.,use result as argument for call to function var0 derive var2 class from object base class.,class BaseCommand ( object ) : ,class var2 ( object ) : 
derive the class BaseConfigurator from object base class.,derive class var0 from object base class.,class BaseConfigurator ( object ) : ,class var0 ( object ) : 
derive the class BaseContext from the object base class.,derive class var0 from object base class.,class BaseContext ( object ) : ,class var0 ( object ) : 
derive class BaseCOnverter from object base class.,derive class var0 from object base class.,class BaseConverter ( object ) : ,class BaseConverter ( object ) : 
derive class BaseDatabaseCache from BaseCache base class.,derive class var0 from var1 base class.,class BaseDatabaseCache ( BaseCache ) : ,class var0 ( var1 ) : 
derive the class BaseEmailBackend from the object base class.,derive class var0 from object base class.,class BaseEmailBackend ( object ) : ,class var0 ( object ) : 
derive the class BaseForm from the base class object.,derive class var0 from base class object.,class BaseForm ( object ) : ,class var0 ( object ) : 
derive the class BaseFormSet from the object base class.,derive class var0 from object base class.,class BaseFormSet ( object ) : ,class var0 ( object ) : 
"derive class BaseHandler, derive from the base class object, making this a new style class.","derive class var0 derive from base class object, making var1 new style class.",class BaseHandler ( object ) : ,class var0 ( object ) : 
derive the class BaseInlineFormSet from the BaseModelFormSet base class.,derive class var0 from var1 base class.,class BaseInlineFormSet ( BaseModelFormSet ) : ,class var0 ( var1 ) : 
derive the class BaseLoader from the object base class.,derive class var0 from object base class.,class BaseLoader ( object ) : ,class var0 ( object ) : 
derive the class BaseMemcachedCache from base class BaseMemcachedCacheMethods and BaseCache.,derive class var0 from base class var1 and var3 ,"class BaseMemcachedCache ( six . with_metaclass ( BaseMemcachedCacheMethods , BaseCache ) ) : ","class var0 ( six . with_metaclass ( var1 , var3 ) ) : "
derive the class BaseMemcachedCacheMethods from RenameMethodsBase the base class.,derive class var0 from var1 base class.,class BaseMemcachedCacheMethods ( RenameMethodsBase ) : ,class var0 ( var1 ) : 
derive the class BaseModelForm from the BaseForm base class.,derive class var0 from var1 base class.,class BaseModelForm ( BaseForm ) : ,class var0 ( var1 ) : 
and form_class_attrs.   derive the class BaseModelFormSet from the BaseFormSet base class.,and var0 derive class var2 from var3 base class.,class BaseModelFormSet ( BaseFormSet ) : ,class var2 ( var3 ) : 
derive the class BaseTemporalField from the base class Field class.,derive class var0 from base class var1 class.,class BaseTemporalField ( Field ) : ,class var0 ( var1 ) : 
derive the class BaseValidator form the object base class.,derive class var0 form object base class.,class BaseValidator ( object ) : ,class var0 ( object ) : 
derive the class BlockContext from the Exception base class.,derive class var0 from var1 base class.,class BlockContext ( object ) : ,class var0 ( object ) : 
derive the class BlockNode from the Node base class.,derive class var0 from var1 base class.,class BlockNode ( Node ) : ,class var0 ( var1 ) : 
derive the class BooleanField from the base class Field class.,derive class var0 from base class var1 class.,class BooleanField ( Field ) : ,class var0 ( var1 ) : 
derive the class BoundaryIter from the six.Iterator base class.,derive class var0 from six var1 base class.,class BoundaryIter ( six . Iterator ) : ,class var0 ( six . var1 ) : 
derive the class BoundField from the base class object.,derive class var0 from base class object.,class BoundField ( object ) : ,class var0 ( object ) : 
derive the class CacheClass from the DatabaseCache base class.,derive class var0 from var1 base class.,class CacheClass ( DatabaseCache ) : ,class var0 ( var1 ) : 
derive the class CacheClass from the DummyCache base class.,derive class var0 from var1 base class.,class CacheClass ( DummyCache ) : ,class var0 ( var1 ) : 
derive the class CacheClass from the base class FileBasedCache.,derive class var0 from base class var1 ,class CacheClass ( FileBasedCache ) : ,class var0 ( var1 ) : 
derive the class CacheClass from the base class LocMemCache.,derive class var0 from base class var1 ,class CacheClass ( LocMemCache ) : ,class var0 ( var1 ) : 
derive the class cached_property from the object base class.,derive class var0 from object base class.,class cached_property ( object ) : ,class var0 ( object ) : 
derive class CachedDnsName from the object base class.,derive class var0 from object base class.,class CachedDnsName ( object ) : ,class var0 ( object ) : 
derive CacheEntry class from the object base class.,derive var0 class from object base class.,class CacheEntry ( object ) : ,class var0 ( object ) : 
derive the class CacheHandler from the object base class.,derive class var0 from object base class.,class CacheHandler ( object ) : ,class var0 ( object ) : 
derive class CacheKeyWarning from the DjangoRuntimeWarning base class.,derive class var0 from var1 base class.,class CacheKeyWarning ( DjangoRuntimeWarning ) : ,class var0 ( var1 ) : 
derive the class CallbackFilter from logging.Filter base class.,derive class var0 from logging var1 base class.,class CallbackFilter ( logging . Filter ) : ,class var0 ( logging . var1 ) : 
derive the class CharField from the base class Field class.,derive class var0 from base class var1 class.,class CharField ( Field ) : ,class var0 ( var1 ) : 
derive the class CheckboxChoiceInput from the ChoiceInput base class.,derive class var0 from var1 base class.,class CheckboxChoiceInput ( ChoiceInput ) : ,class var0 ( var1 ) : 
derive the class CheckboxFieldRenderer from the ChoiceFieldRenderer base class.,derive class var0 from var1 base class.,class CheckboxFieldRenderer ( ChoiceFieldRenderer ) : ,class var0 ( var1 ) : 
derive the class CheckboxInput from the Widget base class.,derive class var0 from var1 base class.,class CheckboxInput ( Widget ) : ,class var0 ( var1 ) : 
derive the class CheckboxSelectMultiple from the RendererMixin and SelectMultiple base classes.,derive class var0 from var2 and var1 base classes.,"class CheckboxSelectMultiple ( RendererMixin , SelectMultiple ) : ","class var0 ( var2 , var1 ) : "
derive class CheckMessage from object base class.,derive class var0 from object base class.,class CheckMessage ( object ) : ,class var0 ( object ) : 
derive the class CheckRegistry with object as base class.,derive class var0 with object as base class.,class CheckRegistry ( object ) : ,class var0 ( object ) : 
"' for 's', 'x' for 'S', 'x' for 'W', '!' for 'W' and None for 'Z'.   derive the class Choice from list base class.",var0svar5xvar0Svar5xvar0Wvar5!var0Wvar9Z' var11 derive class var12 from list base class.,class Choice ( list ) : ,class var12 ( list ) : 
derive the class ChoiceField from the base class Field class.,derive class var0 from base class var1 class.,class ChoiceField ( Field ) : ,class var0 ( var1 ) : 
derive the class ChoiceFieldRenderer from the object base class.,derive class var0 from object base class.,class ChoiceFieldRenderer ( object ) : ,class var0 ( object ) : 
derive the class ChoiceInput from the SubWidget base class.,derive class var0 from var1 base class.,class ChoiceInput ( SubWidget ) : ,class var0 ( var1 ) : 
"normal uploaded files. Check for malicious upload activity; if there is none, report this to the Django developers..   derive the class ChunkIter from the six.Iterator base class.","normal uploaded files var0 for malicious upload activity; if there is none, report var1 to var2 developers var4 derive class var5 from six var7 base class.",class ChunkIter ( six . Iterator ) : ,class var5 ( six . var7 ) : 
derive the class classonlymethod from the classmethod base class.,derive class var0 from var1 base class.,class classonlymethod ( classmethod ) : ,class var0 ( var1 ) : 
derive the class ClearableFileInput from the FileInput base class.,derive class var0 from var1 base class.,class ClearableFileInput ( FileInput ) : ,class var0 ( var1 ) : 
derive the class ComboField from the base class Field class.,derive class var0 from base class var1 class.,class ComboField ( Field ) : ,class var0 ( var1 ) : 
derive the class Command from the AppCommand base class.,derive class var0 from var1 base class.,class Command ( AppCommand ) : ,class var0 ( var1 ) : 
derive class Command from the base class AppCommand.,derive class var0 from base class var1 ,class Command ( AppCommand ) : ,class var0 ( var1 ) : 
derive the class Command from the base class AppCommand.,derive class var0 from base class var1 ,class Command ( AppCommand ) : ,class var0 ( var1 ) : 
derive the class Command from the BaseCommand base class.,derive class var0 from var1 base class.,class Command ( BaseCommand ) : ,class var0 ( var1 ) : 
derive class Command from base class BaseCommand.,derive class var0 from base class var1 ,class Command ( BaseCommand ) : ,class var0 ( var1 ) : 
"for every k and v in return value of the method module.__dict__.items, only if result of the method omittable called with an argument k is false.   derive the class Command from the BaseCommand base class.",for every k and v in return value of method var0 only if result of method var1 called with argument k is false var2 derive class var3 from var4 base class.,class Command ( BaseCommand ) : ,class var3 ( var4 ) : 
derive the class Command from the BaseCommands base class.,derive class var0 from var1 base class.,class Command ( BaseCommand ) : ,class var0 ( BaseCommand ) : 
derive the class Command from the BaseCommand class.,derive class var0 from var1 class.,class Command ( BaseCommand ) : ,class var0 ( var1 ) : 
derive the class Command from the base class BaseCommand.,derive class var0 from base class var1 ,class Command ( BaseCommand ) : ,class var0 ( var1 ) : 
derive class Command from the base class BaseCommand.,derive class var0 from base class var1 ,class Command ( BaseCommand ) : ,class var0 ( var1 ) : 
derive class Command from the BaseCommand base class.,derive class var0 from var1 base class.,class Command ( BaseCommand ) : ,class var0 ( var1 ) : 
derive class Command from CheckCommand base class.,derive class var0 from var1 base class.,class Command ( CheckCommand ) : ,class var0 ( var1 ) : 
derive the class Command from the TemplateCommand base class.,derive class var0 from var1 base class.,class Command ( TemplateCommand ) : ,class var0 ( var1 ) : 
derive class Command from the TemplateCommand base class.,derive class var0 from var1 base class.,class Command ( TemplateCommand ) : ,class var0 ( var1 ) : 
derive the class CommandError from the base class Exception.,derive class var0 from base class var1 ,class CommandError ( Exception ) : ,class var0 ( var1 ) : 
derive the CommandParser class from the ArgumentParser base class.,derive var0 class from var1 base class.,class CommandParser ( ArgumentParser ) : ,class var0 ( var1 ) : 
derive the class CommentNode from Node base class.,derive class var0 from var1 base class.,class CommentNode ( Node ) : ,class var0 ( var1 ) : 
derive the class ContentFile from File base class.,derive class var0 from var1 base class.,class ContentFile ( File ) : ,class var0 ( var1 ) : 
derive the class ContentNotRenderedError from the Exception base class.,derive class var0 from var1 base class.,class ContentNotRenderedError ( Exception ) : ,class var0 ( var1 ) : 
derive the class Context from the BaseContext base class.,derive class var0 from var1 base class.,class Context ( BaseContext ) : ,class var0 ( var1 ) : 
derive the class ContextDict from the dict base class.,derive class var0 from var1 base class.,class ContextDict ( dict ) : ,class var0 ( var1 ) : 
derive the class ContextPopException from the Exception base class.,derive class var0 from var1 base class.,class ContextPopException ( Exception ) : ,class var0 ( var1 ) : 
derive the class ConvertingDict from dict base class.,derive class var0 from var1 base class.,class ConvertingDict ( dict ) : ,class var0 ( var1 ) : 
derive the class ConvertingList from list base class.,derive class var0 from list base class.,class ConvertingList ( list ) : ,class var0 ( list ) : 
derive the class ConvertingTuple from tuple base class.,derive class var0 from tuple base class.,class ConvertingTuple ( tuple ) : ,class var0 ( tuple ) : 
derive the class Critical from base class CheckMessage.,derive class var0 from base class var1 ,class Critical ( CheckMessage ) : ,class var0 ( var1 ) : 
derive the class CsrfTokenNode from Node base class.,derive class var0 from var1 base class.,class CsrfTokenNode ( Node ) : ,class var0 ( var1 ) : 
derive the class CycleNode from Node base class.,derive class var0 from var1 base class.,class CycleNode ( Node ) : ,class var0 ( var1 ) : 
derive DatabaseCache from the BaseDatabaseCache base class.,derive var0 from var1 base class.,class DatabaseCache ( BaseDatabaseCache ) : ,class var0 ( var1 ) : 
derive the class date from the real_date base class.,derive class date from var0 base class.,class date ( real_date ) : ,class date ( var0 ) : 
derive the class DateField from the base class BaseTemporalField class.,derive class var0 from base class var1 class.,class DateField ( BaseTemporalField ) : ,class var0 ( var1 ) : 
derive the class DateFormat from the base class TimeFormat.,derive class var0 from base class var1 ,class DateFormat ( TimeFormat ) : ,class var0 ( var1 ) : 
"then the first element of the result of the function formats.get_format called with an argument self.format_key, return the result.   derive the class DateInput from the DateTimeBaseInput base class.",then first element of result of function formats var1 called with argument self var3 return result var4 derive class var5 from var6 base class.,class DateInput ( DateTimeBaseInput ) : ,class var5 ( var6 ) : 
derive the class datetime from the real_datetime base class.,derive class datetime from var0 base class.,class datetime ( real_datetime ) : ,class datetime ( var0 ) : 
"called with an argument final_attrs and return value of the function force_text called with an argument value, return the result.   derive the class DateTimeBaseInput from the TextInput base class.","called with argument var0 and return value of function var2 called with argument value, return result var4 derive class var5 from var6 base class.",class DateTimeBaseInput ( TextInput ) : ,class var5 ( var6 ) : 
"and format, call the method time on the result, return the result.   derive the class DateTimeField from the base class BaseTemporalField class.","and format, call method time on result, return result var0 derive class var1 from base class var2 class.",class DateTimeField ( BaseTemporalField ) : ,class var1 ( var2 ) : 
derive the class DateTimeInput from the DateTimeBaseInput base class.,derive class var0 from var1 base class.,class DateTimeInput ( DateTimeBaseInput ) : ,class var0 ( var1 ) : 
derive the class Debug from base class CheckMessage.,derive class var0 from base class var1 ,class Debug ( CheckMessage ) : ,class var0 ( var1 ) : 
derive the class DebugLexer from the Lexer base class.,derive class var0 from var1 base class.,class DebugLexer ( Lexer ) : ,class var0 ( var1 ) : 
derive the class DebugNode from Node base class.,derive class var0 from var1 base class.,class DebugNode ( Node ) : ,class var0 ( var1 ) : 
derive the class DebugNodeList from the NodeList base class.,derive class var0 from var1 base class.,class DebugNodeList ( NodeList ) : ,class var0 ( var1 ) : 
derive the class DebugParser from the Parser base class.,derive class var0 from var1 base class.,class DebugParser ( Parser ) : ,class var0 ( var1 ) : 
derive the class DebugVariableNode from the VariableNode base class.,derive class var0 from var1 base class.,class DebugVariableNode ( VariableNode ) : ,class var0 ( var1 ) : 
derive the class DecimalField from the base class IntegerField class.,derive class var0 from base class var1 class.,class DecimalField ( IntegerField ) : ,class var0 ( var1 ) : 
derive the class DeclarativeFieldsMetaclass from the base class MediaDefiningClass.,derive class var0 from base class var1 ,class DeclarativeFieldsMetaclass ( MediaDefiningClass ) : ,class var0 ( var1 ) : 
derive the class DefaultCacheProxy from the base class object.,derive class var0 from base class object.,class DefaultCacheProxy ( object ) : ,class var0 ( object ) : 
derive the class DefaultStorage from the LazyObject base class.,derive class var0 from var1 base class.,class DefaultStorage ( LazyObject ) : ,class var0 ( var1 ) : 
derive the class DefusedExpatParser from the _ExpatParser base class.,derive class var0 from _ExpatParser base class.,class DefusedExpatParser ( _ExpatParser ) : ,class var0 ( _ExpatParser ) : 
derive the class DefusedXmlException from the ValueError base class.,derive class var0 from var1 base class.,class DefusedXmlException ( ValueError ) : ,class var0 ( var1 ) : 
derive the class DeserializationError from the Exception base class.,derive class var0 from var1 base class.,class DeserializationError ( Exception ) : ,class var0 ( var1 ) : 
derive the class DeserializedObject from the object base class.,derive class var0 from object base class.,class DeserializedObject ( object ) : ,class var0 ( object ) : 
field.rel.__class__.__name__ for 'rel' and return value of the function smart_text with an argument field.rel.to._meta for 'to'.   derive the class Deserializer from the base.Deserializer base class.,var0 for var1 and return value of function var2 with argument var4 for var5 var6 derive class var7 from base var7 base class.,class Deserializer ( base . Deserializer ) : ,class var7 ( base . var7 ) : 
derive the class Deserializer from the six.Iterator base class.,derive class var0 from six var1 base class.,class Deserializer ( six . Iterator ) : ,class var0 ( six . var1 ) : 
derive the class DictConfigurator from the BaseConfigurator base class.,derive class var0 from var1 base class.,class DictConfigurator ( BaseConfigurator ) : ,class var0 ( var1 ) : 
derive the class DictWrapper from the dict base class.,derive class var0 from var1 base class.,class DictWrapper ( dict ) : ,class var0 ( var1 ) : 
derive the class DisallowedHost from the SuspiciousOperation base class.,derive class var0 from var1 base class.,class DisallowedHost ( SuspiciousOperation ) : ,class var0 ( var1 ) : 
derive the class DisallowedRedirect from the SuspiciousOperation base class.,derive class var0 from var1 base class.,class DisallowedRedirect ( SuspiciousOperation ) : ,class var0 ( var1 ) : 
third element of the return value of the function sys.exc_info.   define the class DjangoJSONEncoder from the json.JSONEncoder base class.,third element of return value of function sys var1 define class var3 from var5 var4 base class.,class DjangoJSONEncoder ( json . JSONEncoder ) : ,class var3 ( var5 . var4 ) : 
derive the class DjangoRuntimeWarning from the RuntimeWarning base class.,derive class var0 from var1 base class.,class DjangoRuntimeWarning ( RuntimeWarning ) : ,class var0 ( var1 ) : 
derive the class DjangoSafeDumper from the SafeDumper base class.,derive class var0 from var1 base class.,class DjangoSafeDumper ( SafeDumper ) : ,class var0 ( var1 ) : 
derive the class DjangoTranslation from gettext_module.GNUTranslations base class.,derive class var0 from var1 var3 base class.,class DjangoTranslation ( gettext_module . GNUTranslations ) : ,class var0 ( var1 . var3 ) : 
derive the class DjangoUnicodeDecodeError from the base class UnicodeDecodeError.,derive class var0 from base class var1 ,class DjangoUnicodeDecodeError ( UnicodeDecodeError ) : ,class var0 ( var1 ) : 
derive the class DTDForbidden from the DefusedXmlException base class.,derive class var0 from var1 base class.,class DTDForbidden ( DefusedXmlException ) : ,class var0 ( var1 ) : 
define class dummy.,define class dummy.,class dummy : ,class dummy : 
derive the class DummyCache from the base class BaseCache.,derive class var0 from base class var1 ,class DummyCache ( BaseCache ) : ,class var0 ( var1 ) : 
derive the class EmailBackend from the BaseEmailBackend base class.,derive class var0 from var1 base class.,class EmailBackend ( BaseEmailBackend ) : ,class var0 ( var1 ) : 
derive the class EmailBackend from the ConsoleEmailBackend base class.,derive class var0 from var1 base class.,class EmailBackend ( ConsoleEmailBackend ) : ,class var0 ( var1 ) : 
derive the class EmailField from the base class CharField class.,derive class var0 from base class var1 class.,class EmailField ( CharField ) : ,class var0 ( var1 ) : 
derive the class EmailInput from the TextInput base class.,derive class var0 from var1 base class.,class EmailInput ( TextInput ) : ,class var0 ( var1 ) : 
derive the class EmailMessage from the object base class.,derive class var0 from object base class.,class EmailMessage ( object ) : ,class var0 ( object ) : 
derive the class EmailMultiAlternatives from the EmailMessage base class.,derive class var0 from var1 base class.,class EmailMultiAlternatives ( EmailMessage ) : ,class var0 ( var1 ) : 
derive the class EmailValidator form the object base class.,derive class var0 form object base class.,class EmailValidator ( object ) : ,class var0 ( object ) : 
derive the class EmptyPage from the InvalidPage base class.,derive class var0 from var1 base class.,class EmptyPage ( InvalidPage ) : ,class var0 ( var1 ) : 
derive the class Enclosure from the object base class.,derive class var0 from object base class.,class Enclosure ( object ) : ,class var0 ( object ) : 
derive the class EndToken from the TokenBase base class.,derive class var0 from var1 base class.,class EndToken ( TokenBase ) : ,class var0 ( var1 ) : 
derive the class EntitiesForbidden from the DefusedXmlException base class.,derive class var0 from var1 base class.,class EntitiesForbidden ( DefusedXmlException ) : ,class var0 ( var1 ) : 
derive the class Error from base class CheckMessage.,derive class var0 from base class var1 ,class Error ( CheckMessage ) : ,class var0 ( var1 ) : 
derive the class ErrorDict from the dict base class.,derive class var0 from var1 base class.,class ErrorDict ( dict ) : ,class var0 ( var1 ) : 
derive the class ErrorList from the UserList and list base classes.,derive class var0 from var1 and list base classes.,"class ErrorList ( UserList , list ) : ","class var0 ( var1 , list ) : "
derive the class EscapeBytes from bytes and EscapeData base classes.,derive class var0 from bytes and var1 base classes.,"class EscapeBytes ( bytes , EscapeData ) : ","class var0 ( bytes , var1 ) : "
derive the class EscapeData from object base class.,derive class var0 from object base class.,class EscapeData ( object ) : ,class var0 ( object ) : 
derive the class EscapeText from six.text_type and EscapeData base classes.,derive class var0 from six var1 and var2 base classes.,"class EscapeText ( six . text_type , EscapeData ) : ","class var0 ( six . var1 , var2 ) : "
derive the EventHandler class from the base class pyinotify.ProcessEvent.,derive var0 class from base class var1 var2 ,class EventHandler ( pyinotify . ProcessEvent ) : ,class var0 ( var1 . var2 ) : 
derive the class ExtendsError from the Exception base class.,derive class var0 from var1 base class.,class ExtendsError ( Exception ) : ,class var0 ( var1 ) : 
derive the class ExtendsNode from the Node base class.,derive class var0 from var1 base class.,class ExtendsNode ( Node ) : ,class var0 ( var1 ) : 
derive the class ExternalReferenceForbidden from the DefusedXmlException base class.,derive class var0 from var1 base class.,class ExternalReferenceForbidden ( DefusedXmlException ) : ,class var0 ( var1 ) : 
"EmailField', 'FileField', 'ImageField', 'URLField', 'BooleanField', 'NullBooleanField', 'ChoiceField', 'MultipleChoiceField',   'ComboField', 'MultiValueField', 'FloatField', 'DecimalField', 'SplitDateTimeField', 'IPAddressField', 'GenericIPAddressField',   'FilePathField', 'SlugField', 'TypedChoiceField', 'TypedMultipleChoiceField'.   derive the class Field from the base class object.",EmailFieldvar2FileFieldvar2ImageFieldvar2URLFieldvar2BooleanFieldvar2NullBooleanFieldvar2ChoiceFieldvar2MultipleChoiceFieldvar32ComboFieldvar2MultiValueFieldvar2FloatFieldvar2DecimalFieldvar2SplitDateTimeFieldvar2IPAddressFieldvar2GenericIPAddressFieldvar32FilePathFieldvar2SlugFieldvar2TypedChoiceFieldvar2TypedMultipleChoiceField' var34 derive class var1 from base class object.,class Field ( object ) : ,class var1 ( object ) : 
derive the class FieldError from the Exception base class.,derive class var0 from var1 base class.,class FieldError ( Exception ) : ,class var0 ( var1 ) : 
derive the class File from the FileProxyMixin base class.,derive class var0 from var1 base class.,class File ( FileProxyMixin ) : ,class var0 ( var1 ) : 
derive the class FileBasedCache from BaseCache base class.,derive class var0 from var1 base class.,class FileBasedCache ( BaseCache ) : ,class var0 ( var1 ) : 
derive the class FileField from the base class Field class.,derive class var0 from base class var1 class.,class FileField ( Field ) : ,class var0 ( var1 ) : 
derive the class FileInput from the Input base class.,derive class var0 from var1 base class.,class FileInput ( Input ) : ,class var0 ( var1 ) : 
derive the class FilePathField from the base class ChoiceField class.,derive class var0 from base class var1 class.,class FilePathField ( ChoiceField ) : ,class var0 ( var1 ) : 
"derive class FileProxyMixin from the base class object, making it a new-style class.","derive class var0 from base class object, making it new-style class.",class FileProxyMixin ( object ) : ,class var0 ( object ) : 
derive the class FileSystemStorage from the Storage base class.,derive class var0 from var1 base class.,class FileSystemStorage ( Storage ) : ,class var0 ( var1 ) : 
derive the class FileUploadHandler from the object base class.,derive class var0 from object base class.,class FileUploadHandler ( object ) : ,class var0 ( object ) : 
substitute the result for filter_re.   derive the class FilterExpression form the base class object.,substitute result for var0 derive class var3 form base class object.,class FilterExpression ( object ) : ,class var3 ( object ) : 
derive the class FilterNode from Node base class.,derive class var0 from var1 base class.,class FilterNode ( Node ) : ,class var0 ( var1 ) : 
derive the class FirstOfNode from Node base class.,derive class var0 from var1 base class.,class FirstOfNode ( Node ) : ,class var0 ( var1 ) : 
derive the class FixedOffset from the tzinfo base class.,derive class var0 from var1 base class.,class FixedOffset ( tzinfo ) : ,class var0 ( var1 ) : 
"Use django.utils.timezone instead., RemovedInDjango19Warning and stacklevel set to 2.   derive the class FixedOffset from the tzinfo base class.",Use var0 instead var1 and var2 set to 2 var3 derive class var4 from var6 base class.,class FixedOffset ( tzinfo ) : ,class var4 ( var6 ) : 
derive the class FixUnicode from the base class fixer_base.BaseFix.,derive class var0 from base class var1 var3 ,class FixUnicode ( fixer_base . BaseFix ) : ,class var0 ( var1 . var3 ) : 
derive the class FloatField from the base class IntegerField class.,derive class var0 from base class var1 class.,class FloatField ( IntegerField ) : ,class var0 ( var1 ) : 
derive the class Form from the base classes DeclarativeFieldsMetaclass and BaseForm.,derive class var0 from base classes var1 and var3 ,"class Form ( six . with_metaclass ( DeclarativeFieldsMetaclass , BaseForm ) ) : ","class var0 ( six . with_metaclass ( var1 , var3 ) ) : "
derive the class Formatter from object base class.,derive class var0 from object base class.,class Formatter ( object ) : ,class var0 ( object ) : 
derive the class ForNode from Node base class.,derive class var0 from var1 base class.,class ForNode ( Node ) : ,class var0 ( var1 ) : 
derive the class GenericIPAddressField from the base class CharField class.,derive class var0 from base class var1 class.,class GenericIPAddressField ( CharField ) : ,class var0 ( var1 ) : 
derive the class Group from list base class.,derive class var0 from list base class.,class Group ( list ) : ,class var0 ( list ) : 
return the result.   derive the class HiddenInput from the Input base class.,return result var0 derive class var1 from var2 base class.,class HiddenInput ( Input ) : ,class var1 ( var2 ) : 
derive the class HTMLParser from the base class HTMLParser located in the module _html_parser.,derive class var0 from base class var0 located in module var2 ,class HTMLParser ( _html_parser . HTMLParser ) : ,class var0 ( var2 . var0 ) : 
derive the class Http404 from the Exception base class.,derive class var0 from var1 base class.,class Http404 ( Exception ) : ,class var0 ( var1 ) : 
derive the class HttpRequest from the object base class.,derive class var0 from object base class.,class HttpRequest ( object ) : ,class var0 ( object ) : 
where '%s' is replaced with self.__class__.__name__.   derive the class HttpResponse from the HttpResponseBase base class.,var0 var1 is replaced with var2 derive class var4 from var6 base class.,class HttpResponse ( HttpResponseBase ) : ,class var4 ( var6 ) : 
derive the class HttpResponseBadRequest from the HttpResponse base class.,derive class var0 from var1 base class.,class HttpResponseBadRequest ( HttpResponse ) : ,class var0 ( var1 ) : 
derive the class HttpResponseBase from the six.Iterator base class.,derive class var0 from six var1 base class.,class HttpResponseBase ( six . Iterator ) : ,class var0 ( six . var1 ) : 
derive the class HttpResponseForbidden from the HttpResponse base class.,derive class var0 from var1 base class.,class HttpResponseForbidden ( HttpResponse ) : ,class var0 ( var1 ) : 
derive the class HttpResponseGone from the HttpResponse base class.,derive class var0 from var1 base class.,class HttpResponseGone ( HttpResponse ) : ,class var0 ( var1 ) : 
derive the class HttpResponseNotAllowed from the HttpResponse base class.,derive class var0 from var1 base class.,class HttpResponseNotAllowed ( HttpResponse ) : ,class var0 ( var1 ) : 
derive the class HttpResponseNotFound from the HttpResponse base class.,derive class var0 from var1 base class.,class HttpResponseNotFound ( HttpResponse ) : ,class var0 ( var1 ) : 
derive the class HttpResponseNotModified from the HttpResponse base class.,derive class var0 from var1 base class.,class HttpResponseNotModified ( HttpResponse ) : ,class var0 ( var1 ) : 
derive the class HttpResponsePermanentRedirect from the HttpResponseRedirectBase base class.,derive class var0 from var1 base class.,class HttpResponsePermanentRedirect ( HttpResponseRedirectBase ) : ,class var0 ( var1 ) : 
derive the class HttpResponseRedirect from the HttpResponseRedirectBase base class.,derive class var0 from var1 base class.,class HttpResponseRedirect ( HttpResponseRedirectBase ) : ,class var0 ( var1 ) : 
derive the class HttpResponseRedirectBase from the HttpResponse base class.,derive class var0 from var1 base class.,class HttpResponseRedirectBase ( HttpResponse ) : ,class var0 ( var1 ) : 
derive the class HttpResponseServerError from the HttpResponse base class.,derive class var0 from var1 base class.,class HttpResponseServerError ( HttpResponse ) : ,class var0 ( var1 ) : 
derive the class IfChangedNode from Node base class.,derive class var0 from var1 base class.,class IfChangedNode ( Node ) : ,class var0 ( var1 ) : 
derive the class IfEqualNode from Node base class.,derive class var0 from var1 base class.,class IfEqualNode ( Node ) : ,class var0 ( var1 ) : 
derive the class IfNode from Node base class.,derive class var0 from var1 base class.,class IfNode ( Node ) : ,class var0 ( var1 ) : 
derive the class IfParser from the object base class.,derive class var0 from object base class.,class IfParser ( object ) : ,class var0 ( object ) : 
derive the class ImageField from the base class FileField class.,derive class var0 from base class var1 class.,class ImageField ( FileField ) : ,class var0 ( var1 ) : 
derive class ImageFile from the base class File.,derive class var0 from base class var1 ,class ImageFile ( File ) : ,class var0 ( var1 ) : 
derive the class ImmutableList from the tuple base class.,derive class var0 from tuple base class.,class ImmutableList ( tuple ) : ,class var0 ( tuple ) : 
derive the class ImproperlyConfigured from the Exception base class.,derive class var0 from var1 base class.,class ImproperlyConfigured ( Exception ) : ,class var0 ( var1 ) : 
derive the class IncludeNode from the Node base class.,derive class var0 from var1 base class.,class IncludeNode ( Node ) : ,class var0 ( var1 ) : 
derive the class InclusionNode form the base class TagHelperNode.,derive class var0 form base class var1 ,class InclusionNode ( TagHelperNode ) : ,class var0 ( var1 ) : 
derive the class Info from base class CheckMessage.,derive class var0 from base class var1 ,class Info ( CheckMessage ) : ,class var0 ( var1 ) : 
derive the class InlineForeignKeyField from the Field base class.,derive class var0 from var1 base class.,class InlineForeignKeyField ( Field ) : ,class var0 ( var1 ) : 
derive the InMemoryUploadedFile class from the UploadedFile base class.,derive var0 class from var1 base class.,class InMemoryUploadedFile ( UploadedFile ) : ,class var0 ( var1 ) : 
derive the class Input from the Widget base class.,derive class var0 from var1 base class.,class Input ( Widget ) : ,class var0 ( var1 ) : 
derive the class InputStreamExhausted from the Exception base class.,derive class var0 from var1 base class.,class InputStreamExhausted ( Exception ) : ,class var0 ( var1 ) : 
derive the class IntegerField from the base class Field class.,derive class var0 from base class var1 class.,class IntegerField ( Field ) : ,class var0 ( var1 ) : 
derive the class InterBoundaryIter from the six.Iterator base class.,derive class var0 from six var1 base class.,class InterBoundaryIter ( six . Iterator ) : ,class var0 ( six . var1 ) : 
derive class InvalidCacheBackendError from the ImproperlyConfigured base class.,derive class var0 from var1 base class.,class InvalidCacheBackendError ( ImproperlyConfigured ) : ,class var0 ( var1 ) : 
derive the class InvalidPage from the Exception base class.,derive class var0 from var1 base class.,class InvalidPage ( Exception ) : ,class var0 ( var1 ) : 
"p and errors set to string 'replace', for p in self.params.   derive the class InvalidTemplateLibrary form the base class Exception.","p and errors set to string var0, for p in var1 derive class var3 form base class var5 ",class InvalidTemplateLibrary ( Exception ) : ,class var3 ( var5 ) : 
derive the class IPAddressField from the base class CharField class.,derive class var0 from base class var1 class.,class IPAddressField ( CharField ) : ,class var0 ( var1 ) : 
derive the class Iterator from the base class object.,derive class var0 from base class object.,class Iterator ( object ) : ,class var0 ( object ) : 
derive the class JsLexer from the Lexer base class.,derive class var0 from var1 base class.,class JsLexer ( Lexer ) : ,class var0 ( var1 ) : 
derive the class JsonResponse from the HttpResponse base class.,derive class var0 from var1 base class.,class JsonResponse ( HttpResponse ) : ,class var0 ( var1 ) : 
derive the class JSONSerializer from the object base class.,derive class var0 from object base class.,class JSONSerializer ( object ) : ,class var0 ( object ) : 
derive the LabelCommand class from the BaseCommand base class.,derive var0 class from var1 base class.,class LabelCommand ( BaseCommand ) : ,class var0 ( var1 ) : 
derive the class lazy_property from the property base class.,derive class var0 from property base class.,class lazy_property ( property ) : ,class var0 ( property ) : 
derive the class LazyObject from the object base class.,derive class var0 from object base class.,class LazyObject ( object ) : ,class var0 ( object ) : 
derive the class LazyStream from the six.Iterator base class.,derive class var0 from six var1 base class.,class LazyStream ( six . Iterator ) : ,class var0 ( six . var1 ) : 
derive the class Lexer form the base class object.,derive class var0 form base class object.,class Lexer ( object ) : ,class var0 ( object ) : 
"and join the results into a string, separated with '|' character, return the result.   derive the class Lexer from the object base class.","and join results into string, separated with var0 character, return result var1 derive class var2 from object base class.",class Lexer ( object ) : ,class var2 ( object ) : 
derive the class Library form the base class object.,derive class var0 form base class object.,class Library ( object ) : ,class var0 ( object ) : 
"derive class LimitedStream from the object base class, making it a new-style class.","derive class var0 from object base class, making it new-style class.",class LimitedStream ( object ) : ,class var0 ( object ) : 
derive the class Literal from the TokenBase base class.,derive class var0 from var1 base class.,class Literal ( TokenBase ) : ,class var0 ( var1 ) : 
derive the class Loader from the BaseLoader base class.,derive class var0 from var1 base class.,class Loader ( BaseLoader ) : ,class var0 ( var1 ) : 
derive the class LoaderOrigin from the Origin base class.,derive class var0 from var1 base class.,class LoaderOrigin ( Origin ) : ,class var0 ( var1 ) : 
derive the class LoadNode from Node base class.,derive class var0 from var1 base class.,class LoadNode ( Node ) : ,class var0 ( var1 ) : 
derive the class LocaleRegexProvider with object as base class.,derive class var0 with object as base class.,class LocaleRegexProvider ( object ) : ,class var0 ( object ) : 
"arguments '%s' not found. %d pattern(s) tried: %s, replace '%s' with lookup_view_s, args, kwargs, length of patterns, patterns,  and respectively.   derive the class LocaleRegexURLResolver with RegexURLResolver as base class.","arguments var1 not found var3 pattern(s) tried: %s, replace var1 with var5 var7 var8 length of patterns, patterns var0 and respectively var0 derive class var10 with var12 as base class.",class LocaleRegexURLResolver ( RegexURLResolver ) : ,class var10 ( var12 ) : 
derive the class LocalTimezone from the ReferenceLocalTimezone base class.,derive class var0 from var1 base class.,class LocalTimezone ( ReferenceLocalTimezone ) : ,class var0 ( var1 ) : 
derive the class LocalTimezone from the tzinfo base class.,derive class var0 from var1 base class.,class LocalTimezone ( tzinfo ) : ,class var0 ( var1 ) : 
derive the class LocMemCache from the base class BaseCache.,derive class var0 from base class var1 ,class LocMemCache ( BaseCache ) : ,class var0 ( var1 ) : 
derive the class ManagementForm from the Form base class.,derive class var0 from var1 base class.,class ManagementForm ( Form ) : ,class var0 ( var1 ) : 
derive the class ManagementUtility from object base class.,derive class var0 from object base class.,class ManagementUtility ( object ) : ,class var0 ( object ) : 
derive the class MaxLengthValidator form the BaseValidator base class.,derive class var0 form var1 base class.,class MaxLengthValidator ( BaseValidator ) : ,class var0 ( var1 ) : 
derive the class MaxValueValidator form the BaseValidator base class.,derive class var0 form var1 base class.,class MaxValueValidator ( BaseValidator ) : ,class var0 ( var1 ) : 
derive the class Media from the object base class.,derive class var0 from object base class.,class Media ( object ) : ,class var0 ( object ) : 
derive the class MediaDefiningClass from the type base class.,derive class var0 from type base class.,class MediaDefiningClass ( type ) : ,class var0 ( type ) : 
derive the class MemcachedCache from the BaseMemcachedCache base class.,derive class var0 from var1 base class.,class MemcachedCache ( BaseMemcachedCache ) : ,class var0 ( var1 ) : 
derive the class MemoryFileUploadHandler from the FileUploadHandler base class.,derive class var0 from var1 base class.,class MemoryFileUploadHandler ( FileUploadHandler ) : ,class var0 ( var1 ) : 
derive the class MergeDict from the object base class.,derive class var0 from object base class.,class MergeDict ( object ) : ,class var0 ( object ) : 
derive the class metaclass form the meta base class.,derive class var0 form var1 base class.,class metaclass ( meta ) : ,class var0 ( var1 ) : 
derive the class MiddlewareNotUsed from the Exception base class.,derive class var0 from var1 base class.,class MiddlewareNotUsed ( Exception ) : ,class var0 ( var1 ) : 
derive the class MIMEMixin.,derive class var0 ,class MIMEMixin ( ) : ,class var0 ( ) : 
derive the class MinLengthValidator form the BaseValidator base class.,derive class var0 form var1 base class.,class MinLengthValidator ( BaseValidator ) : ,class var0 ( var1 ) : 
derive the class MinValueValidator form the BaseValidator base class.,derive class var0 form var1 base class.,class MinValueValidator ( BaseValidator ) : ,class var0 ( var1 ) : 
derive the class MLStripper from the HTMLParser base class.,derive class var0 from var1 base class.,class MLStripper ( HTMLParser ) : ,class var0 ( var1 ) : 
"and result of the method self.field.label_from_instance, called with an argument obj.   derive the class ModelChoiceField from the ChoiceField base class.",and result of method self.field var1 called with argument var2 derive class var4 from var5 base class.,class ModelChoiceField ( ChoiceField ) : ,class var4 ( var5 ) : 
derive the class ModelChoiceIterator from object base class.,derive class var0 from object base class.,class ModelChoiceIterator ( object ) : ,class var0 ( object ) : 
"derive the class ModelForm from the base class in the return value of the method six.with_metaclass, called with 2 arguments:",derive class var0 from base class in return value of method six var2 called with 2 arguments:,"class ModelForm ( six . with_metaclass ( ModelFormMetaclass , BaseModelForm ) ) : ","class var0 ( six . var2 ( ModelFormMetaclass , BaseModelForm ) ) : "
if not self.error_messages is None.   derive the class ModelFormMetaclass from the DeclarativeFieldsMetaclass base class.,if not self var1 is var2 derive class var4 from var6 base class.,class ModelFormMetaclass ( DeclarativeFieldsMetaclass ) : ,class var4 ( var6 ) : 
derive the class ModelFormOptions from object base class.,derive class var0 from object base class.,class ModelFormOptions ( object ) : ,class var0 ( object ) : 
"if the result is equal to the result of the call to the function force_text with data_value as an argument, return boolean True,   otherwise return boolean False.   derive the class ModelMultipleChoiceField from the ModelChoiceField base class.","if result is equal to result of call to function var0 with var2 as argument, return boolean var4 otherwise return boolean var7 derive class var8 from var10 base class.",class ModelMultipleChoiceField ( ModelChoiceField ) : ,class var8 ( var10 ) : 
"assign it to value under the string "".moves.urllib_robotparser"" appended to __name__ key of the sys.modules dictionary,   and to value under the string "".moves.urllib.robotparser"" appended to __name__ key of the sys.modules dictionary.   derive class Module_six_moves_urllib from the types.ModuleType base class.",assign it to value under string var0 appended to var1 key of var3 dict var5 and to value under string var7 appended to var1 key of var3 dict var5 derive class var9 from types var11 base class.,class Module_six_moves_urllib ( types . ModuleType ) : ,class var9 ( types . var11 ) : 
"assign the result to the value under the string "".moves.urllib_parse"" appended to __name__ key of the sys.modules dictionary,   and to the value under the string "".moves.urllib.parse"" appended to __name__ key of the sys.modules dictionary.   derive class Module_six_moves_urllib_error from the _LazyModule base class.",assign result to value under string var0 appended to var1 key of var3 dict var5 and to value under string var7 appended to var1 key of var3 dict var5 derive class var8 from _LazyModule base class.,class Module_six_moves_urllib_error ( _LazyModule ) : ,class var8 ( _LazyModule ) : 
and to value under the '.moves' appended to __name__ key of the sys.modules dictionary.   derive class Module_six_moves_urllib_parse from the _LazyModule base class.,and to value under var0 appended to var1 key of var2 dict var3 derive class var4 from _LazyModule base class.,class Module_six_moves_urllib_parse ( _LazyModule ) : ,class var4 ( _LazyModule ) : 
"assign the result to the value under the string "".moves.urllib_error"" appended to __name__ key of the sys.modules dictionary,   and to the value under the string "".moves.urllib.error"" appended to __name__ key of the sys.modules dictionary.   derive class Module_six_moves_urllib_request from the _LazyModule base class.",assign result to value under string var0 appended to var1 key of var3 dict var5 and to value under string var7 appended to var1 key of var3 dict var5 derive class var8 from _LazyModule base class.,class Module_six_moves_urllib_request ( _LazyModule ) : ,class var8 ( _LazyModule ) : 
"assign the result to the value under the string "".moves.urllib_request"" appended to __name__ key of the sys.modules dictionary,   and to the value under the string "".moves.urllib.request"" appended to __name__ key of the sys.modules dictionary.   derive class Module_six_moves_urllib_response from the _LazyModule base class.",assign result to value under string var0 appended to var1 key of var3 dict var5 and to value under string var7 appended to var1 key of var3 dict var5 derive class var8 from _LazyModule base class.,class Module_six_moves_urllib_response ( _LazyModule ) : ,class var8 ( _LazyModule ) : 
"assign it to value under the string "".moves.urllib_response"" appended to __name__ key of the sys.modules dictionary,   and to value under the string "".moves.urllib.response"" appended to __name__ key of the sys.modules dictionary.   derive class Module_six_moves_urllib_robotparser from the _LazyModule base class.",assign it to value under string var0 appended to var1 key of var3 dict var5 and to value under string var7 appended to var1 key of var3 dict var5 derive class var9 from _LazyModule base class.,class Module_six_moves_urllib_robotparser ( _LazyModule ) : ,class var9 ( _LazyModule ) : 
derive class MovedAttribute from the _LazyDescr base class.,derive class var0 from var1 base class.,class MovedAttribute ( _LazyDescr ) : ,class var0 ( var1 ) : 
derive class MovedModule from the _LazyDescr base class.,derive class var0 from var1 base class.,class MovedModule ( _LazyDescr ) : ,class var0 ( var1 ) : 
derive the class MultiPartParser from the object base class.,derive class var0 from object base class.,class MultiPartParser ( object ) : ,class var0 ( object ) : 
derive the class MultiPartParserError from the Exception base class.,derive class var0 from var1 base class.,class MultiPartParserError ( Exception ) : ,class var0 ( var1 ) : 
derive the class MultipleChoiceField from the base class ChoiceField class.,derive class var0 from base class var1 class.,class MultipleChoiceField ( ChoiceField ) : ,class var0 ( var1 ) : 
derive the class MultipleHiddenInput from the HiddenInput base class.,derive class var0 from var1 base class.,class MultipleHiddenInput ( HiddenInput ) : ,class var0 ( var1 ) : 
derive the class MultipleObjectsReturned from the Exception base class.,derive class var0 from var1 base class.,class MultipleObjectsReturned ( Exception ) : ,class var0 ( var1 ) : 
derive the class MultiValueDict from the dict base class.,derive class var0 from var1 base class.,class MultiValueDict ( dict ) : ,class var0 ( var1 ) : 
derive the class MultiValueDictKeyError from the KeyError base class.,derive class var0 from var1 base class.,class MultiValueDictKeyError ( KeyError ) : ,class var0 ( var1 ) : 
derive the class MultiValueField from the base class Field class.,derive class var0 from base class var1 class.,class MultiValueField ( Field ) : ,class var0 ( var1 ) : 
derive the class MultiWidget from the Widget base class.,derive class var0 from var1 base class.,class MultiWidget ( Widget ) : ,class var0 ( var1 ) : 
derive the NoArgsCommand class from the BaseCommand base class.,derive var0 class from var1 base class.,class NoArgsCommand ( BaseCommand ) : ,class var0 ( var1 ) : 
derive the class Node form the base class object.,derive class var0 form base class object.,class Node ( object ) : ,class var0 ( object ) : 
derive the class Node from object base class.,derive class var0 from object base class.,class Node ( object ) : ,class var0 ( object ) : 
derive the class NodeList form the base class list.,derive class var0 form base class list.,class NodeList ( list ) : ,class var0 ( list ) : 
derive the class NonCapture from list base class.,derive class var0 from list base class.,class NonCapture ( list ) : ,class var0 ( list ) : 
derive the class NoReverseMatch with Exception as base class.,derive class var0 with var1 as base class.,class NoReverseMatch ( Exception ) : ,class var0 ( var1 ) : 
derive the class NowNode from Node base class.,derive class var0 from var1 base class.,class NowNode ( Node ) : ,class var0 ( var1 ) : 
derive the class NullBooleanField from the base class BooleanField class.,derive class var0 from base class var1 class.,class NullBooleanField ( BooleanField ) : ,class var0 ( var1 ) : 
derive the class NullBooleanSelect from the Select base class.,derive class var0 from var1 base class.,class NullBooleanSelect ( Select ) : ,class var0 ( var1 ) : 
derive the class NullDevice.,derive class var0 ,class NullDevice : ,class var0 : 
derive the class NumberAwareString from the resultclass base class.,derive class var0 from var1 base class.,class NumberAwareString ( resultclass ) : ,class var0 ( var1 ) : 
derive the class NumberInput from the TextInput base class.,derive class var0 from var1 base class.,class NumberInput ( TextInput ) : ,class var0 ( var1 ) : 
derive the class ObjectDoesNotExist from the Exception base class.,derive class var0 from var1 base class.,class ObjectDoesNotExist ( Exception ) : ,class var0 ( var1 ) : 
derive the class Operator from the base class TokenBase.,derive class var0 from base class var1 ,class Operator ( TokenBase ) : ,class var0 ( var1 ) : 
derive class Options from the base class object.,derive class var0 from base class object.,class Options ( object ) : ,class var0 ( object ) : 
derive the class OrderedSet from the object base class.,derive class var0 from object base class.,class OrderedSet ( object ) : ,class var0 ( object ) : 
derive the class Origin form the base class object.,derive class var0 form base class object.,class Origin ( object ) : ,class var0 ( object ) : 
derive the OutputWrapper class from the object base class.,derive var0 class from object base class.,class OutputWrapper ( object ) : ,class var0 ( object ) : 
derive the class OVERLAPPED from the Structure base class.,derive class var0 from var1 base class.,class OVERLAPPED ( Structure ) : ,class var0 ( var1 ) : 
derive the class override from the object base class.,derive class override from object base class.,class override ( object ) : ,class override ( object ) : 
derive the class Page from the collections.Sequence base class.,derive class var0 from collections var1 base class.,class Page ( collections . Sequence ) : ,class var0 ( collections . var1 ) : 
derive the class PageNotAnInteger from the InvalidPage base class.,derive class var0 from var1 base class.,class PageNotAnInteger ( InvalidPage ) : ,class var0 ( var1 ) : 
derive the class Paginator from the object base class.,derive class var0 from object base class.,class Paginator ( object ) : ,class var0 ( object ) : 
derive the class Parser from the base class object.,derive class var0 from base class object.,class Parser ( object ) : ,class var0 ( object ) : 
derive the class Parser form the base class object.,derive class var0 form base class object.,class Parser ( object ) : ,class var0 ( object ) : 
derive the class PasswordInput from the TextInput base class.,derive class var0 from var1 base class.,class PasswordInput ( TextInput ) : ,class var0 ( var1 ) : 
derive the class PermissionDenied from the Exception base class.,derive class var0 from var1 base class.,class PermissionDenied ( Exception ) : ,class var0 ( var1 ) : 
derive the class Promise from the object base class.,derive class var0 from object base class.,class Promise ( object ) : ,class var0 ( object ) : 
derive the class PyLibMCCache from BaseMemcachedCache base class.,derive class var0 from var1 base class.,class PyLibMCCache ( BaseMemcachedCache ) : ,class var0 ( var1 ) : 
derive the class QueryDict from the base class MultiValueDict.,derive class var0 from base class var1 ,class QueryDict ( MultiValueDict ) : ,class var0 ( var1 ) : 
derive the class RadioChoiceInput from the ChoiceInput base class.,derive class var0 from var1 base class.,class RadioChoiceInput ( ChoiceInput ) : ,class var0 ( var1 ) : 
"if id_ is true id_attr set to return value of the function format_html, if not id_attr set to an empty string,   content set to result of the function mark_safe with an argument: string created by joining elements of outputs, with '\n' separator,   return the result.   derive the class RadioFieldRenderer from the ChoiceFieldRenderer base class.","if var0 is true var1 set to return value of function var5 if not var1 set to empty string var7 content set to result of function var10 with argument: string created by joining elements of outputs, with var12 separator var7 return result var7 derive class var13 from var15 base class.",class RadioFieldRenderer ( ChoiceFieldRenderer ) : ,class var13 ( var15 ) : 
derive the class RadioSelect from the RendererMixin and Select base classes.,derive class var0 from var2 and var1 base classes.,"class RadioSelect ( RendererMixin , Select ) : ","class var0 ( var2 , var1 ) : "
derive the class RawPostDataException from the base class Exception.,derive class var0 from base class var1 ,class RawPostDataException ( Exception ) : ,class var0 ( var1 ) : 
derive the class ReferenceLocalTimezone from the tzinfo base class.,derive class var0 from var1 base class.,class ReferenceLocalTimezone ( tzinfo ) : ,class var0 ( var1 ) : 
"and format, return the result.   derive the class RegexField from the base class CharField class.","and format, return result var0 derive class var1 from base class var2 class.",class RegexField ( CharField ) : ,class var1 ( var2 ) : 
derive the class RegexURLPattern with LocaleRegexProvider as base class.,derive class var0 with var1 as base class.,class RegexURLPattern ( LocaleRegexProvider ) : ,class var0 ( var1 ) : 
derive the class RegexURLResolver with LocaleRegexProvider as base class.,derive class var0 with var1 as base class.,class RegexURLResolver ( LocaleRegexProvider ) : ,class var0 ( var1 ) : 
derive the class RegexValidator form the object base class.,derive class var0 form object base class.,class RegexValidator ( object ) : ,class var0 ( object ) : 
derive the class RegroupNode from Node base class.,derive class var0 from var1 base class.,class RegroupNode ( Node ) : ,class var0 ( var1 ) : 
derive the class RemovedInDjango19Warning from DeprecationWarning base class.,derive class var0 from var1 base class.,class RemovedInDjango19Warning ( DeprecationWarning ) : ,class var0 ( var1 ) : 
derive the class RemovedInDjango20Warning from PendingDeprecationWarning base class.,derive class var0 from var1 base class.,class RemovedInDjango20Warning ( PendingDeprecationWarning ) : ,class var0 ( var1 ) : 
derive the class RenameMethodsBase from type base class.,derive class var0 from type base class.,class RenameMethodsBase ( type ) : ,class var0 ( type ) : 
derive the class RenderContext from the BaseContext base class.,derive class var0 from var1 base class.,class RenderContext ( BaseContext ) : ,class var0 ( var1 ) : 
derive the class RendererMixin from the object base class.,derive class var0 from object base class.,class RendererMixin ( object ) : ,class var0 ( object ) : 
derive the class RequestContext from the Context base class.,derive class var0 from var1 base class.,class RequestContext ( Context ) : ,class var0 ( var1 ) : 
derive the class RequireDebugFalse from logging.Filter base class.,derive class var0 from logging var1 base class.,class RequireDebugFalse ( logging . Filter ) : ,class var0 ( logging . var1 ) : 
derive the class RequireDebugTrue from logging.Filter base class.,derive class var0 from logging var1 base class.,class RequireDebugTrue ( logging . Filter ) : ,class var0 ( logging . var1 ) : 
"string '%s' with self._func_path, self.args, self.kwargs, self.url_name, self.app_name and self.namespaces, respectively.   derive the class Resolver404 with Http404 as base class.",string var0 with var1 var2 var3 self var5 self var6 and var7 respectively var8 derive class var9 with var10 as base class.,class Resolver404 ( Http404 ) : ,class var9 ( var10 ) : 
derive the class ResolverMatch with object as base class.,derive class var0 with object as base class.,class ResolverMatch ( object ) : ,class var0 ( object ) : 
derive the class Rss201rev2Feed from the RssFeed base class.,derive class var0 from var1 base class.,class Rss201rev2Feed ( RssFeed ) : ,class var0 ( var1 ) : 
derive the class RssFeed from the SyndicationFeed base class.,derive class var0 from var1 base class.,class RssFeed ( SyndicationFeed ) : ,class var0 ( var1 ) : 
derive the class RssUserland091Feed from the RssFeed base class.,derive class var0 from var1 base class.,class RssUserland091Feed ( RssFeed ) : ,class var0 ( var1 ) : 
derive the class RWLock from the object base class.,derive class var0 from object base class.,class RWLock ( object ) : ,class var0 ( object ) : 
derive the class SafeBytes from bytes and SafeData base classes.,derive class var0 from bytes and var1 base classes.,"class SafeBytes ( bytes , SafeData ) : ","class var0 ( bytes , var1 ) : "
derive the class SafeData from object base class.,derive class var0 from object base class.,class SafeData ( object ) : ,class var0 ( object ) : 
derive the class SafeMIMEMessage from the MIMEMixin and MIMEMessage base class.,derive class var0 from var2 and var1 base class.,"class SafeMIMEMessage ( MIMEMixin , MIMEMessage ) : ","class var0 ( var2 , var1 ) : "
derive the class SafeMIMEMultipart from the MIMEMixin and MIMEMultipart base class.,derive class var0 from var2 and var1 base class.,"class SafeMIMEMultipart ( MIMEMixin , MIMEMultipart ) : ","class var0 ( var2 , var1 ) : "
derive the class SafeMIMEText from the MIMEMixin and MIMEText base class.,derive class var0 from var2 and var1 base class.,"class SafeMIMEText ( MIMEMixin , MIMEText ) : ","class var0 ( var2 , var1 ) : "
derive the class SafeText from six.text_type and SafeData base classes.,derive class var0 from six var1 and var2 base classes.,"class SafeText ( six . text_type , SafeData ) : ","class var0 ( six . var1 , var2 ) : "
derive the class Select from the Widget base class.,derive class var0 from var1 base class.,class Select ( Widget ) : ,class var0 ( var1 ) : 
derive the class SelectDateWidget for the Widget base class.,derive class var0 for var1 base class.,class SelectDateWidget ( Widget ) : ,class var0 ( var1 ) : 
"boolean True for 'True', boolean False for '3', boolean False for 'False' and boolean False for boolean False,   return it if the key exists, if not return None.   derive the class SelectMultiple from the Select base class.","boolean True for var0, boolean False for var6, boolean False for var7 and boolean False for boolean False var8 return it if key exists, if not return var10 derive class var11 from var12 base class.",class SelectMultiple ( Select ) : ,class var11 ( var12 ) : 
derive the class SerializationError from the Exception base class.,derive class var0 from var1 base class.,class SerializationError ( Exception ) : ,class var0 ( var1 ) : 
derive Serializer from the base.Serializer base class.,derive var0 from base var0 base class.,class Serializer ( base . Serializer ) : ,class var0 ( base . var0 ) : 
derive the class Serializer from the base.Serializer base class.,derive class var0 from base var0 base class.,class Serializer ( base . Serializer ) : ,class var0 ( base . var0 ) : 
derive the class Serializer from the object base class.,derive class var0 from object base class.,class Serializer ( object ) : ,class var0 ( object ) : 
define the class Serializer from the PythonSerializer base class.,define class var0 from var1 base class.,class Serializer ( PythonSerializer ) : ,class var0 ( var1 ) : 
derive the class Serializer from the PythonSerializer base class.,derive class var0 from var1 base class.,class Serializer ( PythonSerializer ) : ,class var0 ( var1 ) : 
derive the class SerializerDoesNotExist from the KeyError base class.,derive class var0 from var1 base class.,class SerializerDoesNotExist ( KeyError ) : ,class var0 ( var1 ) : 
derive the class SignatureExpired from the BadSignature base class.,derive class var0 from var1 base class.,class SignatureExpired ( BadSignature ) : ,class var0 ( var1 ) : 
derive the class Signer from the object base class.,derive class var0 from object base class.,class Signer ( object ) : ,class var0 ( object ) : 
derive class SimpleCookie from the base class http_cookies.SimpleCookie.,derive class var0 from base class var2 var0 ,class SimpleCookie ( http_cookies . SimpleCookie ) : ,class var0 ( var2 . var0 ) : 
derive the class SimpleLazyObject from the LazyObject base class.,derive class var0 from var1 base class.,class SimpleLazyObject ( LazyObject ) : ,class var0 ( var1 ) : 
derive the class SimpleNode form the base class TagHelperNode.,derive class var0 form base class var1 ,class SimpleNode ( TagHelperNode ) : ,class var0 ( var1 ) : 
derive the class SimplerXMLGenerator form the XMLGenerator base class.,derive class var0 form var1 base class.,class SimplerXMLGenerator ( XMLGenerator ) : ,class var0 ( var1 ) : 
derive the class SimpleTemplateResponse from the HttpResponse base class.,derive class var0 from var1 base class.,class SimpleTemplateResponse ( HttpResponse ) : ,class var0 ( var1 ) : 
derive the SimpleUploadedFile class from the InMemoryUploadedFile base class.,derive var0 class from var1 base class.,class SimpleUploadedFile ( InMemoryUploadedFile ) : ,class var0 ( var1 ) : 
derive class SingleZipReader for zipfile.ZipFile base class.,derive class var0 for var1 var2 base class.,class SingleZipReader ( zipfile . ZipFile ) : ,class var0 ( var1 . var2 ) : 
derive the class SkipFile from the UploadFileException base class.,derive class var0 from var1 base class.,class SkipFile ( UploadFileException ) : ,class var0 ( var1 ) : 
derive the class SlugField from the base class CharField class.,derive class var0 from base class var1 class.,class SlugField ( CharField ) : ,class var0 ( var1 ) : 
derive the class SortedDict from the dict base class.,derive class var0 from var1 base class.,class SortedDict ( dict ) : ,class var0 ( var1 ) : 
"and self.format_string, return the result.   derive the class SpacelessNode from Node base class.",and self var1 return result var2 derive class var3 from var4 base class.,class SpacelessNode ( Node ) : ,class var3 ( var4 ) : 
derive the class SplitDateTimeField from the base class MultiValueField class.,derive class var0 from base class var1 class.,class SplitDateTimeField ( MultiValueField ) : ,class var0 ( var1 ) : 
derive the class SplitDateTimeWidget from the MultiWidget base class.,derive class var0 from var1 base class.,class SplitDateTimeWidget ( MultiWidget ) : ,class var0 ( var1 ) : 
derive the class SplitHiddenDateTimeWidget from the SplitDateTimeWidget base class.,derive class var0 from var1 base class.,class SplitHiddenDateTimeWidget ( SplitDateTimeWidget ) : ,class var0 ( var1 ) : 
derive the class SsiNode from Node base class.,derive class var0 from var1 base class.,class SsiNode ( Node ) : ,class var0 ( var1 ) : 
derive the class StopFutureHandlers from the UploadFileException base class.,derive class var0 from var1 base class.,class StopFutureHandlers ( UploadFileException ) : ,class var0 ( var1 ) : 
derive the class StopUpload from the UploadFileException base class.,derive class var0 from var1 base class.,class StopUpload ( UploadFileException ) : ,class var0 ( var1 ) : 
derive the class Storage from the object base class.,derive class var0 from object base class.,class Storage ( object ) : ,class var0 ( object ) : 
derive the class StreamingBuffer from the object base class.,derive class var0 from object base class.,class StreamingBuffer ( object ) : ,class var0 ( object ) : 
derive the class StreamingHttpResponse from the HttpResponseBase base class.,derive class var0 from var1 base class.,class StreamingHttpResponse ( HttpResponseBase ) : ,class var0 ( var1 ) : 
derive the class StringOrigin form the base class Origin.,derive class var0 form base class var1 ,class StringOrigin ( Origin ) : ,class var0 ( var1 ) : 
derive the class SubWidget from the object base class.,derive class var0 from object base class.,class SubWidget ( object ) : ,class var0 ( object ) : 
derive the class SuspiciousFileOperation from the SuspiciousOperation base class.,derive class var0 from var1 base class.,class SuspiciousFileOperation ( SuspiciousOperation ) : ,class var0 ( var1 ) : 
derive the class SuspiciousMultipartForm from the SuspiciousOperation base class.,derive class var0 from var1 base class.,class SuspiciousMultipartForm ( SuspiciousOperation ) : ,class var0 ( var1 ) : 
derive the class SuspiciousOperation from the Exception base class.,derive class var0 from var1 base class.,class SuspiciousOperation ( Exception ) : ,class var0 ( var1 ) : 
derive the class SyndicationFeed from the object base class.,derive class var0 from object base class.,class SyndicationFeed ( object ) : ,class var0 ( object ) : 
derive the class TagHelperNode form the base class Node.,derive class var0 form base class var1 ,class TagHelperNode ( Node ) : ,class var0 ( var1 ) : 
derive the class Tags with base class object.,derive class var0 with base class object.,class Tags ( object ) : ,class var0 ( object ) : 
derive the class TarArchive from the BaseArchive base class.,derive class var0 from var1 base class.,class TarArchive ( BaseArchive ) : ,class var0 ( var1 ) : 
derive the class Template form the base class object.,derive class var0 form base class object.,class Template ( object ) : ,class var0 ( object ) : 
derive the class TemplateCommand from the BaseCommand base class.,derive class var0 from var1 base class.,class TemplateCommand ( BaseCommand ) : ,class var0 ( var1 ) : 
derive the class TemplateDoesNotExist form the base class Exception.,derive class var0 form base class var1 ,class TemplateDoesNotExist ( Exception ) : ,class var0 ( var1 ) : 
derive the class TemplateEncodingError form the base class Exception.,derive class var0 form base class var1 ,class TemplateEncodingError ( Exception ) : ,class var0 ( var1 ) : 
derive the class TemplateIfParser from IfParser base class.,derive class var0 from var1 base class.,class TemplateIfParser ( IfParser ) : ,class var0 ( var1 ) : 
derive the class TemplateLiteral from Literal base class.,derive class var0 from var1 base class.,class TemplateLiteral ( Literal ) : ,class var0 ( var1 ) : 
derive the class TemplateResponse from the SimpleTemplateResponse base class.,derive class var0 from var1 base class.,class TemplateResponse ( SimpleTemplateResponse ) : ,class var0 ( var1 ) : 
derive the class TemplateSyntaxError form the base class Exception.,derive class var0 form base class var1 ,class TemplateSyntaxError ( Exception ) : ,class var0 ( var1 ) : 
"use the result as an argument for the call to the function strip_spaces_between_tags, return the result.   derive the class TemplateTagNode from Node base class.",use result as argument for call to function var0 return result var2 derive class var3 from var4 base class.,class TemplateTagNode ( Node ) : ,class var3 ( var4 ) : 
derive class TemporaryFile from the base class FileProxyMixin.,derive class var0 from base class var1 ,class TemporaryFile ( FileProxyMixin ) : ,class var0 ( var1 ) : 
derive the class TemporaryFileUploadHandler from the FileUploadHandler base class.,derive class var0 from var1 base class.,class TemporaryFileUploadHandler ( FileUploadHandler ) : ,class var0 ( var1 ) : 
derive the TemporaryUploadedFile class from the UploadedFile base class.,derive var0 class from var1 base class.,class TemporaryUploadedFile ( UploadedFile ) : ,class var0 ( var1 ) : 
derive the class Textarea from the Widget base class.,derive class var0 from var1 base class.,class Textarea ( Widget ) : ,class var0 ( var1 ) : 
"result of the function flatatt called with an argument final_attrs, return the result.   derive the class TextInput from the Input base class.",result of function var0 called with argument var1 return result var3 derive class var4 from var5 base class.,class TextInput ( Input ) : ,class var4 ( var5 ) : 
derive the class TextNode form the base class Node.,derive class var0 form base class var1 ,class TextNode ( Node ) : ,class var0 ( var1 ) : 
"and format, call the method date on the result, return the result.   derive the class TimeField from the base class BaseTemporalField class.","and format, call method date on result, return result var0 derive class var1 from base class var2 class.",class TimeField ( BaseTemporalField ) : ,class var1 ( var2 ) : 
derive the class TimeFormat from the base class Formatter.,derive class var0 from base class var1 ,class TimeFormat ( Formatter ) : ,class var0 ( var1 ) : 
derive the class TimeInput from the DateTimeBaseInput base class.,derive class var0 from var1 base class.,class TimeInput ( DateTimeBaseInput ) : ,class var0 ( var1 ) : 
derive the class TimestampSigner from the Signer base class.,derive class var0 from var1 base class.,class TimestampSigner ( Signer ) : ,class var0 ( var1 ) : 
derive the class Tok from the object base class.,derive class var0 from object base class.,class Tok ( object ) : ,class var0 ( object ) : 
derive the class Token form the base class object.,derive class var0 form base class object.,class Token ( object ) : ,class var0 ( object ) : 
derive the class TokenBase from the object base class.,derive class var0 from object base class.,class TokenBase ( object ) : ,class var0 ( object ) : 
derive the class TokenParser form the base class object.,derive class var0 form base class object.,class TokenParser ( object ) : ,class var0 ( object ) : 
derive the class Trans from the object base class.,derive class var0 from object base class.,class Trans ( object ) : ,class var0 ( object ) : 
derive the class TranslatableFile from the object class.,derive class var0 from object class.,class TranslatableFile ( object ) : ,class var0 ( object ) : 
derive the class TranslatorCommentWarning from the SyntaxWarning base class.,derive class var0 from var1 base class.,class TranslatorCommentWarning ( SyntaxWarning ) : ,class var0 ( var1 ) : 
derive the class Truncator form the SimpleLazyObject class.,derive class var0 form var1 class.,class Truncator ( SimpleLazyObject ) : ,class var0 ( var1 ) : 
derive the class TypedChoiceField from the base class ChoiceField class.,derive class var0 from base class var1 class.,class TypedChoiceField ( ChoiceField ) : ,class var0 ( var1 ) : 
derive the class TypedMultipleChoiceField from the base class MultipleChoiceField class.,derive class var0 from base class var1 class.,class TypedMultipleChoiceField ( MultipleChoiceField ) : ,class var0 ( var1 ) : 
derive the class UnreadablePostError from the base class IOError.,derive class var0 from base class var1 ,class UnreadablePostError ( IOError ) : ,class var0 ( var1 ) : 
derive the class UnrecognizedArchiveFormat from the ArchiveException base class.,derive class var0 from var1 base class.,class UnrecognizedArchiveFormat ( ArchiveException ) : ,class var0 ( var1 ) : 
derive the UploadedFile class from the File base class.,derive var0 class from var1 base class.,class UploadedFile ( File ) : ,class var0 ( var1 ) : 
"TemporaryFileUploadHandler', 'MemoryFileUploadHandler', 'load_handler' and 'StopFutureHandlers'.   derive the class UploadFileException from the Exception base class.",TemporaryFileUploadHandlervar0MemoryFileUploadHandlervar0load_handlervar6StopFutureHandlers' var9 derive class var10 from var12 base class.,class UploadFileException ( Exception ) : ,class var10 ( var12 ) : 
derive the class URLField from the base class CharField class.,derive class var0 from base class var1 class.,class URLField ( CharField ) : ,class var0 ( var1 ) : 
derive the class URLInput from the TextInput base class.,derive class var0 from var1 base class.,class URLInput ( TextInput ) : ,class var0 ( var1 ) : 
derive the class URLNode from Node base class.,derive class var0 from var1 base class.,class URLNode ( Node ) : ,class var0 ( var1 ) : 
derive the class URLValidator form the RegexValidator base class.,derive class var0 form var1 base class.,class URLValidator ( RegexValidator ) : ,class var0 ( var1 ) : 
derive the class UTC from the tzinfo base class.,derive class var0 from var1 base class.,class UTC ( tzinfo ) : ,class var0 ( var1 ) : 
derive the class ValidationError from the Exception base class.,derive class var0 from var1 base class.,class ValidationError ( Exception ) : ,class var0 ( var1 ) : 
derive the class Variable form the base class object.,derive class var0 form base class object.,class Variable ( object ) : ,class var0 ( object ) : 
derive the class VariableDoesNotExist form the base class Exception.,derive class var0 form base class var1 ,class VariableDoesNotExist ( Exception ) : ,class var0 ( var1 ) : 
derive the class VariableNode form the base class Node.,derive class var0 form base class var1 ,class VariableNode ( Node ) : ,class var0 ( var1 ) : 
derive the class VerbatimNode from Node base class.,derive class var0 from var1 base class.,class VerbatimNode ( Node ) : ,class var0 ( var1 ) : 
derive the class ViewDoesNotExist from the Exception base class.,derive class var0 from var1 base class.,class ViewDoesNotExist ( Exception ) : ,class var0 ( var1 ) : 
derive the class warn_about_renamed_method from object base class.,derive class var0 from object base class.,class warn_about_renamed_method ( object ) : ,class var0 ( object ) : 
derive the class Warning from base class CheckMessage.,derive class var0 from base class var1 ,class Warning ( CheckMessage ) : ,class var0 ( var1 ) : 
derive the class Widget from the base class in the return value of the six.with_metaclass called with an argument MediaDefiningClass.,derive class var0 from base class in return value of six var2 called with argument var3 ,class Widget ( six . with_metaclass ( MediaDefiningClass ) ) : ,class var0 ( six . var2 ( var3 ) ) : 
derive the class WidthRatioNode from Node base class.,derive class var0 from var1 base class.,class WidthRatioNode ( Node ) : ,class var0 ( var1 ) : 
derive class WindowsError from Exception base class.,derive class var0 from var1 base class.,class WindowsError ( Exception ) : ,class var0 ( var1 ) : 
derive the class WithNode from Node base class.,derive class var0 from var1 base class.,class WithNode ( Node ) : ,class var0 ( var1 ) : 
derive the WSGIHandler class from the base class base.BaseHandler.,derive var0 class from base class base var1 ,class WSGIHandler ( base . BaseHandler ) : ,class var0 ( base . var1 ) : 
derive the class WSGIRequest from base class http.HttpRequest.,derive class var0 from base class http var1 ,class WSGIRequest ( http . HttpRequest ) : ,class var0 ( http . var1 ) : 
derive the class WSGIRequestHandler from simple_server.WSGIRequestHandler and object base classes.,derive class var0 from var2 var0 and object base classes.,"class WSGIRequestHandler ( simple_server . WSGIRequestHandler , object ) : ","class var0 ( var2 . var0 , object ) : "
derive the class WSGIServer from simple_server.WSGIServer and object base classes.,derive class var0 from var2 var0 and object base classes.,"class WSGIServer ( simple_server . WSGIServer , object ) : ","class var0 ( var2 . var0 , object ) : "
derive class X from the object base class.,derive class X from object base class.,class X ( object ) : ,class X ( object ) : 
derive the class ZipArchive from the BaseArchive base class.,derive class var0 from var1 base class.,class ZipArchive ( BaseArchive ) : ,class var0 ( var1 ) : 
substitute base.__name__ for class_name.,substitute var0 for var1 ,class_name = base . __name__,var1 = var0
"append string 'Form' to model.__name__, substitute the result for class_name.",append string var0 to var1 substitute result for var2 ,class_name = model . __name__ + str ( 'Form' ),var2 = var1 + str ( var0 )
class_types is a tuple with 2 elements: type and types.ClassType.,var0 is tuple with 2 elements: type and types var1 ,"class_types = ( type , types . ClassType )","var0 = type , types . var1"
substitute type for class_types.,substitute type for var0 ,"class_types = type ,","var0 = type ,"
"clean is a lambda function with self and x as arguments, return value is length of x.","clean is lambda function with self and x as arguments, return value is length of var0","clean = lambda self , x : len ( x )","clean = lambda self , x : len ( x )"
"clean is a lambda function with arguments self and x, return value is x.",clean is lambda function with arguments self and var0 return value is var0,"clean = lambda self , x : x","clean = lambda self , x : x"
"call the method field.clean with an argument field_value, append the result to clean_data.",call method var0 with argument var1 append result to var2 ,clean_data . append ( field . clean ( field_value ) ),var2 . append ( field . clean ( var1 ) )
clean_data is an empty list.,var0 is empty list.,clean_data = [ ],var0 = [ ]
"call the method self.clean with value as argument, substitute the result for cleaned.","call method var0 with value as argument, substitute result for cleaned.",cleaned = self . clean ( value ),cleaned = var0 ( value )
substitute form.cleaned_data for cleaned_data.,substitute form var1 for var1 ,cleaned_data = form . cleaned_data,var1 = form . var1
"call the method self.clean, substitute the result for cleaned_data.",call method var0 substitute result for var1 ,cleaned_data = self . clean ( ),var1 = var0 ( )
"call the method comment_re.sub with an arguments: raw string '\1' and line, strip the whitespaces surrounding the result, return it.","call the method comment_re.sub with an arguments: raw string '\1' and line, strip the whitespaces surrounding the result, return it.","cleaned_line = comment_re . sub ( r'\1' , line ) . strip ( )","cleaned_line = comment_re . sub ( r'\1' , line ) . strip ( )"
"call the function ugettext_lazy with an argument string 'Clear', substitute the result for clear_checkbox_label.","call function var0 with argument string var2, substitute result for var3 ",clear_checkbox_label = ugettext_lazy ( 'Clear' ),var3 = var0 ( var2 )
substitute self._options for client.behaviors.,substitute var0 for var1 ,client . behaviors = self . _options,var1 = var0
call the method self._lib.Client with argument self._servers.,call method var0 var1 with argument var2 ,client = self . _lib . Client ( self . _servers ),client = var0 . var1 ( var2 )
call the method closable.close.,call method var0 ,closable . close ( ),var0 ( )
substitute self.closed for close.,substitute var0 for close.,close = self . closed,close = var0
close is boolean True.,close is boolean var0 ,close = True,close = var0
closed is a property object with _get_closed as a getter method.,closed is property object with _get_closed as var0 method.,closed = property ( _get_closed ),closed = property ( _get_closed )
"call the method tag.groups, substitute the result for closing_tag, tagname and self_closing, respectively.",call method var0 substitute result for var1 var2 and var3 respectively.,"closing_tag , tagname , self_closing = tag . groups ( )","var1 , var2 , var3 = var0 ( )"
substitute cls.__bytes_cast for cls.__bytes__.,substitute var0 for var1 ,cls . __bytes__ = cls . __bytes_cast,var1 = var0
substitute method for value under the funcname key of the dictionary under the klass key of the cls.__dispatch dictionary.,substitute method for value under var0 key of dict under var1 key of var2 dict.,cls . __dispatch [ klass ] [ funcname ] = method,var2 [ var1 ] [ var0 ] = method
value under the klass key of the cls.__dispatch dictionary is an empty dictionary.,value under var0 key of var1 dict is empty dict.,cls . __dispatch [ klass ] = { },var1 [ var0 ] = { }
value under the resultclass key of the cls.__dispatch dictionary is an empty dictionary.,value under var0 key of var1 dict is empty dict.,cls . __dispatch [ resultclass ] = { },var1 [ var0 ] = { }
cls.__dispatch is an empty dictionary.,var0 is empty dict.,cls . __dispatch = { },var0 = { }
substitute cls.__bytes_cast for cls.__str__.,substitute var0 for var1 ,cls . __str__ = cls . __bytes_cast,var1 = var0
substitute cls.__text_cast for cls.__str__.,substitute var0 for var1 ,cls . __str__ = cls . __text_cast,var1 = var0
substitute cls.__text_cast for cls.__text_cast.,substitute var0 for var0 ,cls . __unicode__ = cls . __text_cast,cls . __unicode__ = var0
"if bytes is contained in resultclasses, cls._delegate_bytes is boolean True, otherwise it is boolean False.",if bytes is contained in var0 var1 is boolean var2 otherwise it is boolean var3 ,cls . _delegate_bytes = bytes in resultclasses,var1 = bytes in var0
"if six.text_type is contained in resultclasses, cls._delegate_text is boolean True, otherwise it is boolean False.",if six var1 is contained in var2 var3 is boolean var4 otherwise it is boolean var5 ,cls . _delegate_text = six . text_type in resultclasses,var3 = six . var1 in var2
"get the value under the ext key of the extension_map dictionary, substitute it for cls.","get value under ext key of var0 dict, substitute it for cls.",cls = extension_map . get ( ext ),cls = var0 . get ( ext )
"substitute the result for base and tail_ext.   get the value under the tail_ext key of the extension_map dictionary, substitute it for cls.","substitute result for base and var0 get value under var0 key of var3 dict, substitute it for cls.",cls = extension_map . get ( tail_ext ),cls = var3 . get ( var0 )
cls is None.,cls is var0 ,cls = None,cls = var0
"call the method constant_re.match with first element of parts as an argument, substitute the result for cmatch.","call method var0 match with first element of parts as argument, substitute result for var2 ",cmatch = constant_re . match ( parts [ 0 ] ),var2 = var0 . match ( parts [ 0 ] )
"call the function constant_re.findall with an argument t.contents, substitute the result for cmatches.",call function var0 findall with argument var2 substitute result for var3 ,cmatches = constant_re . findall ( t . contents ),var3 = var0 . findall ( var2 )
"call the function vars with an argument options, substitute the result for cmd_options.","call function vars with argument options, substitute result for var0 ",cmd_options = vars ( options ),var0 = vars ( options )
cmp_fmt is None.,var0 is var1 ,cmp_fmt = None,var0 = var1
substitute the last element of parts for cmp_fmt.,substitute last element of parts for var0 ,cmp_fmt = parts [ - 1 ],var0 = parts [ - 1 ]
"call the method self.compression_formats.keys, convert it to list, substitute it for cmp_fmts if cmp_fmt is None,","call method self var1 keys, convert it to list, substitute it for var2 if var3 is var6 ",cmp_fmts = list ( self . compression_formats . keys ( ) ) if cmp_fmt is None else [ cmp_fmt ],var2 = list ( self . var1 . keys ( ) ) if var3 is var6 else [ var3 ]
call the method code.interact with an argument local set to imported_objects.,call method var0 with argument local set to var1 ,code . interact ( local = imported_objects ),var0 ( local = var1 )
code is a string 'invalid',code is string var0,code = 'invalid',code = var0
code is a string 'invalid'.,code is string var0.,code = 'invalid',code = var0
code is a string 'limit_value',code is string var0,code = 'limit_value',code = var0
"string 'Ensure this value has at most %(limit_value)d characters (it has %(show_value)d).' and string 'limit_value', substitute the result for message.   code is a string 'max_length'","string var0 and string var1, substitute result for message var2 code is string var3",code = 'max_length',code = var3
code is a string 'max_value',code is string var0,code = 'max_value',code = var0
"string 'Ensure this value has at least %(limit_value)d characters (it has %(show_value)d).' and string 'limit_value', substitute the result for message.   code is a string 'min_length'","string var0 and string var1, substitute result for message var2 code is string var3",code = 'min_length',code = var3
code is a string 'min_value',code is string var0,code = 'min_value',code = var0
append value under the key v of background dictionary to code_list.,append value under key v of background dict to var0 ,code_list . append ( background [ v ] ),var0 . append ( background [ v ] )
append value under the key v of foreground dictionary to code_list.,append value under key v of foreground dict to var0 ,code_list . append ( foreground [ v ] ),var0 . append ( foreground [ v ] )
append value under the 0 key of the opt_dict dictionary to code_list.,append value under 0 key of var0 dict to var1 ,code_list . append ( opt_dict [ o ] ),var1 . append ( var0 [ o ] )
code_list is an empty list.,var0 is empty list.,code_list = [ ],var0 = [ ]
"get the value under the 'charset' key of content_params dictionary, use it to call the codec.lookup method.","get value under var0 key of var1 dict, use it to call var3 method.",codecs . lookup ( content_params [ 'charset' ] ),codecs . lookup ( var1 [ var0 ] )
otherwise assign string 'ascii' to encoding.   call the method lookup with the encoding as the argument.,otherwise assign string var0 to encoding var1 call method lookup with encoding as argument.,codecs . lookup ( encoding ),codecs . lookup ( encoding )
extend collect list with _builtin_context_processors.,extend collect list with var0 ,collect . extend ( _builtin_context_processors ),collect . extend ( var0 )
extend collect list with settings.TEMPLATE_CONTEXT_PROCESSORS.,extend collect list with settings var0 ,collect . extend ( settings . TEMPLATE_CONTEXT_PROCESSORS ),collect . extend ( settings . var0 )
collect is an empty list.,collect is empty list.,collect = [ ],collect = [ ]
"color_names is a tuple with 8 elements: strings 'black', 'red', 'green', 'yellow', 'blue', 'magenta', 'cyan' and 'white'.","var0 is tuple with 8 elements: strings var1, var2, var3, var4, var5, var6, var7 and var8.","color_names = ( 'black' , 'red' , 'green' , 'yellow' , 'blue' , 'magenta' , 'cyan' , 'white' )","var0 = var1 , 'red' , 'green' , 'yellow' , 'blue' , 'magenta' , 'cyan' , 'white'"
"call the function termcolors.parse_color_setting with DJANGO_COLORS as an argument, assign the result to color_settings.","call function termcolors var1 with var2 as argument, assign result to var3 ",color_settings = termcolors . parse_color_setting ( DJANGO_COLORS ),var3 = termcolors . var1 ( var2 )
"reverse the order of colors elements,","reverse order of colors elements,",colors . reverse ( ),colors . reverse ( )
"remove first element from styles, split it by the '/' character, substitute the result for colors.","remove first element from styles, split it by var0 character, substitute result for colors.",colors = styles . pop ( ) . split ( '/' ),colors = styles . pop ( ) . split ( var0 )
substitute first element of row for column_name.,substitute first element of row for var0 ,column_name = row [ 0 ],var0 = row [ 0 ]
combined is an instance of Media class.,combined is instance of var0 class.,combined = Media ( ),combined = var0 ( )
"and ip_address_validator_map converted to a list, respectively.   call the re.compile function with an argument raw string '^[\d,]+$', substitute the result for comma_separated_int_list_re.","and ip_address_validator_map converted to a list, respectively.   call the re.compile function with an argument raw string '^[\d,]+$', substitute the result for comma_separated_int_list_re.","comma_separated_int_list_re = re . compile ( '^[\d,]+$' )","comma_separated_int_list_re = re . compile ( '^[\d,]+$' )"
"remove the first element from self.command_stack, assign the result to command and source, respectively.","remove first element from self var1 assign result to command and source, respectively.","command , source = self . command_stack . pop ( )","command , source = self . var1 . pop ( )"
"substitute '%s' is string 'processing file %s in %s\n' with self.file and self.dirpath, write it to command.stdout.","substitute '%s' is string 'processing file %s in %s\n' with self.file and self.dirpath, write it to command.stdout.","command . stdout . write ( 'processing file %s in %s\n' % ( self . file , self . dirpath ) )","command . stdout . write ( 'processing file %s in %s\n' % ( self . file , self . dirpath ) )"
call the method command.stdout.write with an argument errors.,call method var0 with argument errors.,command . stdout . write ( errors ),var0 ( errors )
substitute app_namefor command.,substitute var0 command.,command = app_name,command = app_name
"call the function load_command_class with arguments: app_name and name, substitute the result for command.","call function var0 with arguments: var1 and name, substitute result for command.","command = load_command_class ( app_name , name )","command = var0 ( var1 , name )"
"split token.contents into separate words, substitute the first element of the result for command.","split var0 into separate words, substitute first element of result for command.",command = token . contents . split ( ) [ 0 ],command = var0 . split ( ) [ 0 ]
"join management_dir and string 'commands' into a file path name, substitute it for command_dir.","join var0 and string var2 into file path name, substitute it for var3 ","command_dir = os . path . join ( management_dir , 'commands' )","var3 = os . path . join ( var0 , var2 )"
"call the method commands.update, with an argument dictionary containing entries: app_config_name for name, for every name in return value of the function find_commands, called with an argument path.","call method var0 with argument dict containing entries: var1 for name, for every name in return value of function var2 called with argument path.",commands . update ( { name : app_config . name for name in find_commands ( path ) } ),var0 ( { name : app_config . name for name in var2 ( path ) } )
"commands is an dictionary containing elements: string 'django.core' for every name in the function find_commands return value, called with first element of __path__ as an argument.","commands is dict containing elements: string var0 for every name in function var1 return value, called with first element of var3 as argument.",commands = { name : 'django.core' for name in find_commands ( __path__ [ 0 ] ) },commands = { name : var0 for name in var1 ( var3 [ 0 ] ) }
"call the function get_commands, substitute it for commands.",call function var0 substitute it for commands.,commands = get_commands ( ),commands = var0 ( )
append name to the value of under the app key of the commands_dict.,append name to value of under var0 key of var1 ,commands_dict [ app ] . append ( name ),var1 [ var0 ] . var0end ( name )
"where '%s' is replaced with self.prog_name, an empty string and string ""Available subcommands:"".   call the method collections.defaultdict with a argument: lambda function without arguments that returns an empty list,","var0 var1 is replaced with self var3 empty string and string var4 var7 call method var8 with argument: lambda function var9 arguments var10 returns empty list,",commands_dict = collections . defaultdict ( lambda : [ ] ),commands_dict = var8 ( lambda : [ ] )
append t.contents to comment.,append var0 to comment.,comment . append ( t . contents ),comment . append ( var0 )
comment is an empty list.,comment is empty list.,comment = [ ],comment = [ ]
comment_lineno_cache is None.,var0 is var1 ,comment_lineno_cache = None,var0 = var1
"format with it a string '# %s', write it to out.   comment_lineno_cache is None,","format with it string var0, write it to out var2 is var4 ",comment_lineno_cache = None,var2 = var4
substitute t.lineno for comment_lineno_cache.,substitute var0 for var1 ,comment_lineno_cache = t . lineno,var1 = var0
append string 'AutoField?' to comment_notes.,append string 'AutoField?' to var1 ,comment_notes . append ( 'AutoField?' ),var1 . append ( 'AutoField?' )
extend comment_notes list with field_notes.,extend var0 list with var1 ,comment_notes . extend ( field_notes ),var0 . extend ( var1 )
extend comment_notes list with notes.,extend var0 list with notes.,comment_notes . extend ( notes ),var0 . extend ( notes )
comment_notes is an empty list.,var0 is empty list.,comment_notes = [ ],var0 = [ ]
"call the function re.compile with an argument raw string ""^((?:'[^']*'|[^'])*?)--.*$"", substitute the result for comment_re.","call function var0 with argument raw string ""^((?:'[^']*'|[^'])*?)--.*$"", substitute result for var4 ",comment_re = re . compile ( r'^((?:'[^']*'|[^'])*?)--.*$' ),var4 = var0(r'^((?:'[^']*'|[^'])*?)--.*$')
COMMENT_TAG_END is a string '#}'.,var0 is string var1.,COMMENT_TAG_END = '#}',var0 = var1
COMMENT_TAG_START is a string '{#'.,var0 is string var1.,COMMENT_TAG_START = '{#',var0 = var1
substitute first element of level for common_ancestor.,substitute first element of level for var0 ,common_ancestor = level [ 0 ],var0 = level [ 0 ]
common_ancestor is None.,var0 is var1 ,common_ancestor = None,var0 = var1
common_prefix is None.,var0 is var1 ,common_prefix = None,var0 = var1
substitute prefix for common_prefix.,substitute prefix for var0 ,common_prefix = prefix,var0 = prefix
"compare is a lambda function with arguments self, a and b, return value is boolean true if a is lesser than b, otherwise is false.","compare is lambda function with arguments self, and b, return value is boolean true if is lesser var0 b, otherwise is false.","compare = lambda self , a , b : a < b","compare = lambda self , a , b : a < b"
"compare is a lambda function with arguments self, a and b, return value is boolean true if a is greater than b, otherwise is false.","compare is lambda function with arguments self, and b, return value is boolean true if is greater var0 b, otherwise is false.","compare = lambda self , a , b : a > b","compare = lambda self , a , b : a > b"
"compare is a lambda function with arguments self, a and b, return value is boolean True if a is not b, otherwise it is False.","compare is lambda function with arguments self, and b, return value is boolean var0 if is not b, otherwise it is var1 ","compare = lambda self , a , b : a is not b","compare = lambda self , a , b : a is not b"
"compare_to is an list with elements generated by calling the var.resolve method with 2 arguments: context and boolean True,",var0 is list with elements generated by calling var1 method with 2 arguments: context and boolean var2 ,"compare_to = [ var . resolve ( context , True ) for var in self . _varlist ]","var0 = [ var . resolve ( context , var2 ) for var in self . _varlist ]"
"call the method self.nodelist_true.render with an argument context, assign the result to compare_to and nodelist_true_output.","call method self var1 render with argument context, assign result to var2 and var4 ",compare_to = nodelist_true_output = self . nodelist_true . render ( context ),var2 = var1_output = self . var1 . render ( context )
compare_to is None.,var0 is var1 ,compare_to = None,var0 = var1
compatibility is a string 'compatibility'.,compatibility is string var0.,compatibility = 'compatibility',compatibility = var0
"name set to function_name, and takes_context set to takes_context and node_class set to SimpleNode.   substitute func.__doc__ for compile_func.__doc__.",name set to var0 and var2 set to var2 and var6 set to var8 substitute var10 for var11 __doc__.,compile_func . __doc__ = func . __doc__,var11 . __doc__ = var10
substitute func.__doc__ for compile_func.__doc__.,substitute var0 for var1 __doc__.,compile_func . __doc__ = func . __doc__,var1 . __doc__ = var0
"defaults set to defaults, name set to function_name, takes_context set to takes_context and node_class set to InclusionNode,   substitute the result for compile_func.   substitute func.__doc__ for compile_func.__doc__.","defaults set to defaults, name set to var0 var2 set to var2 and var6 set to var8 substitute result for var11 substitute var14 for var11 __doc__.",compile_func . __doc__ = func . __doc__,var11 . __doc__ = var14
"substitute __name__ field of the result for function_name, in not, substitute func.__name__ for function_name.   call the function partial with 8 arguments: generic_tag_compiler, params set to params, varargs set to varargs, varkw set to varkw,","substitute __name__ field of result for var0 in not, substitute var2 for var0 call function partial with 8 arguments: var4 var6 set to var6 var8 set to var8 var10 set to var10 ","compile_func = partial ( generic_tag_compiler , params = params , varargs = varargs , varkw = varkw , defaults = defaults , name = function_name , takes_context = takes_context , node_class = InclusionNode )","compile_func = partial ( var4 , var6 = var6 , var8 = var8 , var10 = var10 , defaults = defaults , name = var0 , takes_context = takes_context , node_class = InclusionNode )"
"substitute its __name__ field for function name, if it doesnt exists substitute func.__name__ for function_name.   call the function generic_tag_compiler, params set to params, varargs set to varargs, varkw set to varkw, defaults set to defaults,","substitute its var0 field for function name, if it doesnt exists substitute func var0 for var2 call function var4 var6 set to var6 var8 set to var8 var10 set to var10 defaults set to defaults,","compile_func = partial ( generic_tag_compiler , params = params , varargs = varargs , varkw = varkw , defaults = defaults , name = function_name , takes_context = takes_context , node_class = SimpleNode )","compile_func = partial ( var4 , var6 = var6 , var8 = var8 , var10 = var10 , defaults = defaults , name = var2 , takes_context = takes_context , node_class = SimpleNode )"
substitute the value under the command key of self.tags dictionary for compile_func.,substitute value under command key of var0 dict for var1 ,compile_func = self . tags [ command ],var1 = var0 [ command ]
"call the method self.get_parent with an argument context, substitute the result for compiled_parent.","call method self var1 with argument context, substitute result for var2 ",compiled_parent = self . get_parent ( context ),var2 = self . var1 ( context )
"call the function re.compile with arguments regex and re.UNICODE, substitute the result for compiled_regex.",call function var0 with arguments var2 and re var3 substitute result for var4 ,"compiled_regex = re . compile ( regex , re . UNICODE )","var4 var1 var0(var2,var1re.var1ar3)"
"call the method compile_func with 2 arguments self and token, substitute the result for compiled_result.","call method var0 with 2 arguments self and token, substitute result for var1 ","compiled_result = compile_func ( self , token )","var1 = var0 ( self , token )"
"call the function zlib.compress with an argument data, substitute the result for compressed.","call function var0 with argument data, substitute result for compressed.",compressed = zlib . compress ( data ),compressed = var0 ( data )
substitute obj._meta.concrete_model for concrete_model.,substitute obj._meta var1 for var1 ,concrete_model = obj . _meta . concrete_model,var1 = obj . _meta . var1
"call the method parse from the instance of TemplateIfParser class, created with 2 arguments parser and bits, substitute the result for condition.","call method parse from instance of var0 class, created with 2 arguments parser and bits, substitute result for condition.","condition = TemplateIfParser ( parser , bits ) . parse ( )","condition = var0 ( parser , bits ) . parse ( )"
append a tuple with 2 elements: condition and nodelist to conditions_nodelists.,append tuple with 2 elements: condition and nodelist to var0 ,"conditions_nodelists . append ( ( condition , nodelist ) )","var0 . append ( ( condition , nodelist ) )"
append a tuple with 2 elements: None and nodelist to conditions_nodelists.,append tuple with 2 elements: var0 and var1 to var2 ,"conditions_nodelists . append ( ( None , nodelist ) )","var2 . append ( ( var0 , var1 ) )"
conditions_nodelists is a list containing tuple with 2 elements condition and nodelist.,var0 is list containing tuple with 2 elements condition and var1 ,"conditions_nodelists = [ ( condition , nodelist ) ]","var0 = [ ( condition , var1 ) ]"
substitute value under the backend key of settings.CACHES dictionary for conf.,substitute value under var0 key of settings var1 dict for var2 ,conf = settings . CACHES [ backend ],var2 = settings . var1 [ var0 ]
substitute factory for value under '()' key of config dictionary.,substitute factory for value under var0 key of var1 dict.,config [ '()' ] = factory,var1 [ var0 ] = factory
"call the method self.as_tuple with an argument value under 'address' key of config dictionary,","call method self var1 with argument value under var2 key of var3 dict,",config [ 'address' ] = self . as_tuple ( config [ 'address' ] ),var3 [ var2 ] = self . var1 ( var3 [ var2 ] )
"remove config dictionary entry under 'format' key, substitute it for value under 'fmt' key of config dictionary.","remove var0 dict entry under var2 key, substitute it for value under var3 key of var0 dict.",config [ 'fmt' ] = config . pop ( 'format' ),var0 [ 'fmt' ] = var0 . pop ( var2 )
"call the method self.as_tuple with an argument value under 'mailhost' key of config dictionary,","call method self var1 with argument value under var2 key of var3 dict,",config [ 'mailhost' ] = self . as_tuple ( config [ 'mailhost' ] ),var3 [ var2 ] = self . var1 ( var3 [ var2 ] )
"get value under 'target' key of config dictionary, use it as a key to get the value from the dictionary,","get value under var0 key of var1 dict, use it as key to get value from dict,",config [ 'target' ] = self . config [ 'handlers' ] [ config [ 'target' ] ],var1 [ var0 ] = self . var1 [ 'handlers' ] [ var1 [ var0 ] ]
substitute self.config for config.,substitute var0 for var1 ,config = self . config,var1 = var0
confirm is a string 'yes'.,confirm is string var0.,confirm = 'yes',confirm = var0
"query a string 'Please enter either ""yes"" or ""no"": ' and store the result in confirm.",query string var0 and store result in confirm.,confirm = input ( 'Please enter either 'yes' or 'no': ' ),confirm = input('Please enter either 'yes' or 'no': ')
"request user input from the standard input, assign it o confirm, with the query string: ""You have requested a flush of the database.""","request user input from standard input, assign it o confirm, with query string: var0","confirm = input ( '''You have requested a flush of the database. This will IRREVERSIBLY DESTROY all data currently in the %r database, and return each table to an empty state. Are you sure you want to do this?     Type 'yes' to continue, or 'no' to cancel: ''' % connection . settings_dict [ 'NAME' ] )","confirm = input(    'You have requested a flush of the database.This will IRREVERSIBLY DESTROY all data currently in the %r database, and return each table to an empty state.Are you sure you want to do this?     Type 'yes' to continue, or 'no' to cancel: '     % connection.settings_dict['NAME'])"
call the method input with an argument msg and store the result in confirm.,call method input with argument msg and store result in confirm.,confirm = input ( msg ),confirm = input ( msg )
"call the executor.loader.detect_conflicts, substitute the result fr conflicts.",call executor.loader var1 substitute result fr conflicts.,conflicts = executor . loader . detect_conflicts ( ),conflicts = executor . loader . var1 ( )
"call the method loader.detect_conflicts, substitute the result for conflicts.",call method loader var1 substitute result for conflicts.,conflicts = loader . detect_conflicts ( ),conflicts = loader . var1 ( )
call the method connection.check_constraints with an arguments table_names set to table_names.,call method connection var1 with arguments var2 set to var2 ,connection . check_constraints ( table_names = table_names ),connection . var1 ( var2 = var2 )
call the method connection.client.runshell.,call method var0 ,connection . client . runshell ( ),var0 ( )
"call the method connection.close,",call method var0 ,connection . close ( ),var0 ( )
"if connection exists dont modify it, if not call get_connection function with username set to auth_user, password set to auth_password, fail_silently set to fail_silently as arguments, assign it to connection.","if connection exists dont modify it, if not call var0 function with var1 set to var2 password set to var4 var6 set to var6 as arguments, assign it to connection.","connection = connection or get_connection ( username = auth_user , password = auth_password , fail_silently = fail_silently )","connection = connection or var0 ( var1 = var2 , password = var4 , var6 = var6 )"
"if connection exists dont change it, if not call the get_connection function with username set to auth_user,","if connection exists dont change it, if not call var0 function with var1 set to var2 ","connection = connection or get_connection ( username = auth_user , password = auth_password , fail_silently = fail_silently )","connection = connection or var0 ( var1 = var2 , password = auth_password , fail_silently = fail_silently )"
substitute value under the database key of the connections dictionary for connection.,substitute value under database key of connections dict for connection.,connection = connections [ database ],connection = connections [ database ]
substitute connections element at the index of the value db for connections.,substitute connections element at index of value db for connections.,connection = connections [ db ],connection = connections [ db ]
"get the value under the 'database' key of the options dictionary, if it doesnt exists use the DEFAULT_DB_ALIAS to address an element","get value under var0 key of options dict, if it doesnt exists use var1 to address element","connection = connections [ options . get ( 'database' , DEFAULT_DB_ALIAS ) ]","connection = connections [ options . get ( var0 , var1 ) ]"
"get the value under the 'database' key of the options dictionary, use it as a key to access the element under the connections dictionary, substitute it for connection.","get value under var0 key of options dict, use it as key to access element under connections dict, substitute it for connection.",connection = connections [ options . get ( 'database' ) ],connection = connections [ options . get ( var0 ) ]
"get the value under the 'database' key of the options dictionary,","get value under var0 key of options dict,",connection = connections [ options . get ( 'database' ) ],connection = connections [ options . get ( var0 ) ]
"get value under the 'database' key of the options dictionary, use it as a key to get the value from the connections dictionary,","get value under var0 key of options dict, use it as key to get value from connections dict,",connection = connections [ options [ 'database' ] ],connection = connections [ options [ var0 ] ]
"get the value under the 'database' key of the options dictionary, use it as the key to get the value from the connections dictionary, substitute the result for connection.","get value under var0 key of options dict, use it as key to get value from connections dict, substitute result for connection.",connection = connections [ options [ 'database' ] ],connection = connections [ options [ var0 ] ]
"extract the value under the key 'database' from the options dictionary, use the value for indexing connections list, substitute the result for connection.","extract value under key var0 from options dict, use value for indexing connections list, substitute result for connection.",connection = connections [ options [ 'database' ] ],connection = connections [ options [ var0 ] ]
"get the value under the 'database' key of options dictionary, use it as a index to get connections list element, store it in connection.","get value under var0 key of options dict, use it as index to get connections list element, store it in connection.",connection = connections [ options [ 'database' ] ],connection = connections [ options [ var0 ] ]
"get the value under the key 'database' of the options dictionary, use it as a index to get an element from connections, substitute it for connection.","get value under key var0 of options dict, use it as index to get element from connections, substitute it for connection.",connection = connections [ options [ 'database' ] ],connection = connections [ options [ var0 ] ]
"get the value under the self.using key of the connections dictionary, substitute it for connection.","get value under var0 key of connections dict, substitute it for connection.",connection = connections [ self . using ],connection = connections [ var0 ]
"substitute smtplib.SMTP_SSL for connection_class if self.use_ssl is true, if not substitute smtplib.SMTP for connection_class.","substitute var0 var2 for var4 if self var9 is true, if not substitute var0 var3 for var4 ",connection_class = smtplib . SMTP_SSL if self . use_ssl else smtplib . SMTP,var4 = var0 . var2 if self . var9 else var0 . var3
set value under the 'timeout' key of the connection_params to self.timeout.,set value under var0 key of var1 to var3 ,connection_params [ 'timeout' ] = self . timeout,var1 [ var0 ] = var3
connection_params is a dictionary with 1 initial entry: return value of the function DNS_NAME.get_fqdn for 'local_hostname'.,var0 is dict with 1 initial entry: return value of function var1 var3 for var4.,connection_params = { 'local_hostname' : DNS_NAME . get_fqdn ( ) },var0 = { var4 : var1 . var3 ( ) }
"get the value under the self.using key of the connections dictionary, call the method close on it.","get value under var0 key of connections dict, call method close on it.",connections [ self . using ] . close ( ),connections [ var0 ] . close ( )
"call the method match.group with 2 arguments: strings ""constant_arg"" and ""var_arg"", substitute the result for constant_arg,","call method var0 with 2 arguments: strings var1 and var2, substitute result for constant_arg,","constant_arg , var_arg = match . group ( 'constant_arg' , 'var_arg' )","constant_arg , var_arg = var0 ( 'constant_arg' , 'var_arg' )"
"call the function re.compile with an argument raw string ""_\(((?:"".*?"")|(?:'.*?'))\)"", substitute the result for constant_re.","call the function re.compile with an argument raw string ""_\(((?:"".*?"")|(?:'.*?'))\)"", substitute the result for constant_re.",constant_re = re . compile ( r'''_\(((?:'.*?')|(?:'.*?'))\)''' ),constant_re = re . compile ( r'''_\(((?:'.*?')|(?:'.*?'))\)''' )
"where 'strdq' is replaced with '""[^""\\]*(?:\\.[^""\\]*)*""', 'strsq' is replaced with ""'[^'\\]*(?:\\.[^'\\]*)*'"",   'i18n_open' is replaced with return value of function re.escape called with an argument string '_(',   'i18n_close' is replaced with return value of function re.escape called with an argument string ')'.   remove all occurrences of newline character from constant_string.","where 'strdq' is replaced with '""[^""\\]*(?:\\.[^""\\]*)*""', 'strsq' is replaced with ""'[^'\\]*(?:\\.[^'\\]*)*'"",   'i18n_open' is replaced with return value of function re.escape called with an argument string '_(',   'i18n_close' is replaced with return value of function re.escape called with an argument string ')'.   remove all occurrences of newline character from constant_string.","constant_string = constant_string . replace ( '\n' , '' )","constant_string = constant_string . replace ( '\n' , '' )"
"constant_string is a raw string ""(?:%(i18n_open)s%(strdq)s%(i18n_close)s|%(i18n_open)s%(strsq)s%(i18n_close)s|%(strdq)s|%(strsq)s)"",","var0 is raw string ""(?:%(i18n_open)s%(strdq)s%(i18n_close)s|%(i18n_open)s%(strsq)s%(i18n_close)s|%(strdq)s|%(strsq)s)"",","constant_string = r''' (?:%(i18n_open)s%(strdq)s%(i18n_close)s| %(i18n_open)s%(strsq)s%(i18n_close)s| %(strdq)s| %(strsq)s) ''' % {  'strdq' : r''[^'\\]*(?:\\.[^'\\]*)*'' ,  'strsq' : r''[^'\\]*(?:\\.[^'\\]*)*'' ,  'i18n_open' : re . escape ( '_(' ) ,  'i18n_close' : re . escape ( ')' ) ,  }","var0 = r'''(?:%(i18n_open)s%(strdq)s%(i18n_close)s| %(i18n_open)s%(strsq)s%(i18n_close)s| %(strdq)s| %(strsq)s) ''' % {  'strdq': r''[^'\\]*(?:\\.[^'\\]*)*'',  'strsq': r''[^'\\]*(?:\\.[^'\\]*)*'',  'i18n_open': re.escape('_('),  'i18n_close': re.escape(')'),  }"
"and field _state.adding of value under the name key of self.cleaned_data dictionary is true,   append name to construct_instance_exclude list.",and field var0 of value under name key of self var2 dict is true var3 append name to var4 list.,construct_instance_exclude . append ( name ),var4 . append ( name )
"convert exclude elements to list, substitute it for construct_instance_exclude.","convert exclude elements to list, substitute it for var0 ",construct_instance_exclude = list ( exclude ),var0 = list ( exclude )
consume_next is boolean False.,var0 is boolean var1 ,consume_next = False,var0 = var1
consume_next is boolean True.,var0 is boolean var1 ,consume_next = True,var0 = var1
contains_nontext is boolean False.,var0 is boolean var1 ,contains_nontext = False,var0 = var1
content is an empty string.,content is empty string.,content = '',content = ''
"join comment elements into a string, substitute it for content.","join comment elements into string, substitute it for content.",content = '' . join ( comment ),content = '' . join ( comment )
"call the method content.decode with an argument string 'utf-8', substitute it for content.","call method var0 with argument string var1, substitute it for content.",content = content . decode ( 'utf-8' ),content = var0 ( var1 )
"call the method content.encode with an argument string 'utf-8', substitute it for content.","call method var0 with argument string var1, substitute it for content.",content = content . encode ( 'utf-8' ),content = var0 ( var1 )
"call the method content.message, substitute the result for content.",call method var0 substitute result for content.,content = content . message ( ),content = var0 ( )
"if content is empty, substitute it for an empty string.","if content is empty, substitute it for empty string.",content = content or b'',content = content or b''
"read the whole file f, substitute the result for content.","read whole file f, substitute result for content.",content = f . read ( ),content = f . read ( )
content is a File object instance created with content argument.,content is var0 object instance created with content argument.,content = File ( content ),content = var0 ( content )
"call the function force_bytes with argument content, substitute it for content.","call function var0 with argument content, substitute it for content.",content = force_bytes ( content ),content = var0 ( content )
"call the message_from_string function with an argument content, substitute the result for content.","call var0 function with argument content, substitute result for content.",content = message_from_string ( content ),content = var0 ( content )
"call the method template.render with an argument context, substitute it for content.","call method var0 with argument context, substitute it for content.",content = template . render ( context ),content = var0 ( context )
"call the method template.render with an argument context, substitute the result for content.","call method var0 with argument context, substitute result for content.",content = template . render ( context ),content = var0 ( context )
"call the method template_file.read, substitute it for content.","call method var0 read, substitute it for content.",content = template_file . read ( ),content = var0 . read ( )
"call the function templatize with 2 arguments: src_data and sliced orig_file, without first 2 elements, substitute the result for content.","call function var0 with 2 arguments: var1 and sliced var2 var4 first 2 elements, substitute result for content.","content = templatize ( src_data , orig_file [ 2 : ] )","content = var0 ( var1 , var2 [ 2 : ] )"
"take elements of token_string from second to second last element and strip the whitespaces surrounding the result,","take elements of var0 from second to second last element and strip var1 surrounding result,",content = token_string [ 2 : - 2 ] . strip ( ),content = var0 [ 2 : - 2 ] . strip ( )
"get the value under the 'content-disposition' key of the info dictionary, substitute it for content_disposition.","get value under var0 key of info dict, substitute it for var1 ",content_disposition = info . get ( 'content-disposition' ),var1 = info . get ( var0 )
content_length is integer 0.,var0 is integer 0.,content_length = 0,var0 = 0
"convert value under the 'CONTENT_LENGTH' key of the environ dictionary to an integer, substitute it for content_length.","convert value under var0 key of environ dict to integer, substitute it for var1 ",content_length = int ( environ . get ( 'CONTENT_LENGTH' ) ),var1 = int ( environ . get ( var0 ) )
"convert value under the 'HTTP_CONTENT_LENGTH' key of the META dictionary to an integer of base of value under the 'CONTENT_LENGTH' key of META dictionary, if the key doesnt exists use 0 as the base, substitute the result for content_length.","convert value under var0 key of var1 dict to integer of base of value under var5 key of var1 dict, if key doesnt exists use 0 as base, substitute result for var6 ","content_length = int ( META . get ( 'HTTP_CONTENT_LENGTH' , META . get ( 'CONTENT_LENGTH' , 0 ) ) )","var6 = int ( var1 . get ( var0 , var1 . get ( 'CONTENT_LENGTH' , 0 ) ) )"
"convert to an integer first element of the value under the 'content-length' key of the meta_data dictionary, substitute it for content_length.","convert to integer first element of value under var0 key of var1 dict, substitute it for var3 ",content_length = int ( meta_data . get ( 'content-length' ) [ 0 ] ),var3 = int ( var1 . get ( var0 ) [ 0 ] )
content_length is None.,var0 is var1 ,content_length = None,var0 = var1
content_subtype is a string 'plain'.,var0 is string var1.,content_subtype = 'plain',var0 = var1
"method, substitute the result for file_name.   get the value under the 'content-type' of the meta_data dictionary, if it exists assign it to content_type, content_type_extra,","method, substitute result for var0 get value under var2 of var3 dict, if it exists assign it to var5 var7 ","content_type , content_type_extra = meta_data . get ( 'content-type' , ( '' , { } ) )","var5 , var5_extra = var3 . get ( var2 , ( '' , { } ) )"
"replace '%s' in string ""%s; charset=%s"" with settings.DEFAULT_CONTENT_TYPE and self._charset, substitute it for content_type.",replace var0 in string var1 with settings var3 and var5 substitute it for var6 ,"content_type = '%s; charset=%s' % ( settings . DEFAULT_CONTENT_TYPE , self . _charset )","var6 = '%s; var2' % ( settings . var3 , var5 )"
"if not, content_type is an empty string and content_type_extra is an empty dictionary.   strip the content_type of the whitespaces, substitute it for content_type.",if not var0 is empty string and var3 is empty dict var5 strip var0 of var6 substitute it for var0 ,content_type = content_type . strip ( ),var0 = var0 . strip ( )
"get the value under the 'content-type' key of the info dictionary, substitute it for content_type.","get value under var0 key of info dict, substitute it for var1 ",content_type = info . get ( 'content-type' ),var1 = info . get ( var0 )
"get the value from META dictionary, under the 'HTTP_CONTENT_TYPE' key, if the key doesnt exist,","get value from var0 dict, under var2 key, if key doesnt exist,","content_type = META . get ( 'HTTP_CONTENT_TYPE' , META . get ( 'CONTENT_TYPE' , '' ) )","content_type = var0 . get ( var2 , var0 . get ( 'CONTENT_TYPE' , '' ) )"
"call the function conditional_escape with an argument contents, substitute the result for contents.","call function var0 with argument contents, substitute result for contents.",contents = conditional_escape ( contents ),contents = var0 ( contents )
"if contents is false, substitute self.label for contents.","if contents is false, substitute var0 for contents.",contents = contents or self . label,contents = contents or var0
"called with an argument string ':?.!'.   call the method format_html with 3 arguments: string '{0}{1}', contents and label_suffix, substitute the result for contents.","called with an argument string ':?.!'.   call the method format_html with 3 arguments: string '{0}{1}', contents and label_suffix, substitute the result for contents.","contents = format_html ( '{0}{1}' , contents , label_suffix )","contents = format_html ( '{0}{1}' , contents , label_suffix )"
"call the function format_html with 3 arguments string '<label{0}>{1}</label>', attrs and contents, substitute the result for contents.","call function var0 with 3 arguments string '<label{0}>{1}</label>' var3 and contents, substitute result for contents.","contents = format_html ( '<label{0}>{1}</label>' , attrs , contents )","contents = var0 ( '<label{0}>{1}</label>' , var3 , contents )"
"call the method one_percent_re.sub with 2 arguments: string '%%' and t.contents, substitute the result for contents.",call method var0 sub with 2 arguments: string var2 and var3 substitute result for contents.,"contents = one_percent_re . sub ( '%%' , t . contents )","contents = var0 . sub ( var2 , var3 )"
"use_l10n set to None and use_tz set to None.   call the method Context.__init__ with 5 arguments: self, dict_, current_app as current_app, use_l10n as use_l10n, use_tz as use_tz.",var0 set to var5 and var7 set to var5 call method var14 __init__ with 5 arguments: self var16 var17 as var17 var0 as var0 var7 as var7 ,"Context . __init__ ( self , dict_ , current_app = current_app , use_l10n = use_l10n , use_tz = use_tz )","var14 . __init__ ( self , var16 , var17 = var17 , var0 = var0 , var7 = var7 )"
substitute old_setting for context.autoescape.,substitute var0 for var1 ,context . autoescape = old_setting,var1 = var0
substitute self.setting for context.autoescape.,substitute var0 for var1 ,context . autoescape = self . setting,var1 = var0
append self to context.dicts.,append self to var0 ,context . dicts . append ( self ),var0 . append ( self )
remove the first element of context.,remove first element of context.,context . pop ( ),context . pop ( )
remove the first element from context.render_context.,remove first element from context var1 ,context . render_context . pop ( ),context . var1 . pop ( )
call the method context.render_context.push.,call method context var1 push.,context . render_context . push ( ),context . var1 . push ( )
value under the BLOCK_CONTEXT_KEY key of context.render_context dictionary is BlockContext class instance.,value under var0 key of context var2 dict is var3 class instance.,context . render_context [ BLOCK_CONTEXT_KEY ] = BlockContext ( ),context . var2 [ var0 ] = var3 ( )
"call the function itertools_cycle with an argument self.cyclevars, substitute the result for value under the self dictionary context.render_context.",call function var0 with argument var1 substitute result for value under self dict context var3 ,context . render_context [ self ] = itertools_cycle ( self . cyclevars ),context . var3 [ self ] = var0 ( var1 )
call the method context.update with an argument unpacked_vars.,call method var0 with argument var1 ,context . update ( unpacked_vars ),var0 ( var1 )
substitute block for value under the 'block' key of context dictionary.,substitute block for value under var0 key of context dict.,context [ 'block' ] = block,context [ var0 ] = block
substitute self for value under the 'block' key of context dictionary.,substitute self for value under var0 key of context dict.,context [ 'block' ] = self,context [ var0 ] = self
substitute result for value under the self.asvar key of context dictionary.,substitute result for value under var0 key of context dict.,context [ self . asvar ] = result,context [ var0 ] = result
substitute url for value under the self.asvar key of context dictionary.,substitute url for value under var0 key of context dict.,context [ self . asvar ] = url,context [ var0 ] = url
substitute item for value under the first element of self.loopvars key of the context dictionary.,substitute item for value under first element of var0 key of context dict.,context [ self . loopvars [ 0 ] ] = item,context [ var0 [ 0 ] ] = item
"call the function func with 2 arguments: unpacked list resolved_args and unpacked dictionary resolved_kwargs,",call function var0 with 2 arguments: unpacked list var1 and unpacked dict var2 ,"context [ self . target_var ] = func ( * resolved_args , ** resolved_kwargs )","context [ self . target_var ] = var0 ( * var1 , ** var2 )"
value under the self.var_name key of the context dictionary is an list with dictionary elements with 2 entries:,value under self var1 key of context dict is list with dict elements with 2 entries:,"context [ self . var_name ] = [ { 'grouper' : key , 'list' : list ( val ) } for key , val in groupby ( obj_list , lambda obj : self . resolve_expression ( obj , context ) ) ]","context [ self . var1 ] = [ { 'grouper' : key , 'list' : list ( val ) } for key , val in groupby ( obj_list , lambda obj : self . resolve_expression ( obj , context ) ) ]"
value under the self.var_name key of the context dictionary is an empty list.,value under self var1 key of context dict is empty list.,context [ self . var_name ] = [ ],context [ self . var1 ] = [ ]
substitute obj for value under the self.var_name key of the context dictionary.,substitute var0 for value under self var2 key of context dict.,context [ self . var_name ] = obj,context [ self . var2 ] = var0
substitute value for value under the self.variable_name key of the context dictionary.,substitute value for value under self var1 key of context dict.,context [ self . variable_name ] = value,context [ self . var1 ] = value
"context is an instance of a class Context, created with 2 arguments: dictionary created by apllying options to unpacked dictionary containing 3 entries:",context is instance of class var0 created with 2 arguments: dict created by var1 options to unpacked dict containing 3 entries:,"context = Context ( dict ( options , ** { base_name : name , base_directory : top_dir , 'docs_version' : docs_version , } ) , autoescape = False )","context = var0 ( dict ( options , ** { base_name : name , base_directory : top_dir , 'docs_version' : docs_version } ) , autoescape = False )"
"call the method self.resolve_context with an argument self.context_data, substitute the result for context.",call method self var1 with argument self var3 substitute result for context.,context = self . resolve_context ( self . context_data ),context = self . var1 ( self . var3 )
value under the 'debug' key of the context_extras dictionary is boolean True.,value under var0 key of var1 dict is boolean var3 ,context_extras [ 'debug' ] = True,var1 [ var0 ] = var3
"call the translation.get_language_bidi function, substitute the result for the value under the 'LANGUAGE_BIDI' key of the context_extras dictionary.","call translation var1 function, substitute result for value under var2 key of var3 dict.",context_extras [ 'LANGUAGE_BIDI' ] = translation . get_language_bidi ( ),var3 [ var2 ] = translation . var1 ( )
"call the translation.get_language function, substitute the result for the value under the 'LANGUAGE_CODE' key of the context_extras dictionary.","call translation var1 function, substitute result for value under var2 key of var3 dict.",context_extras [ 'LANGUAGE_CODE' ] = translation . get_language ( ),var3 [ var2 ] = translation . var1 ( )
substitute settings.LANGUAGES for the value under the 'LANGUAGES' key of the context_extras dictionary.,substitute settings.LANGUAGES for value under var0 key of var1 dict.,context_extras [ 'LANGUAGES' ] = settings . LANGUAGES,var1 [ var0 ] = settings . LANGUAGES
substitute connection.queries for value under the 'debug' key of the context_extras dictionary.,substitute var0 for value under var1 key of var2 dict.,context_extras [ 'sql_queries' ] = connection . queries,var2 [ 'sql_queries' ] = var0
context_extras is an empty dictionary.,var0 is empty dict.,context_extras = { },var0 = { }
"call the method bmatch.group with an argument integer 1, use the result as an argument for the call to the function context_re.match,","call method var0 with argument integer 1, use result as argument for call to function var1 match,",context_match = context_re . match ( bmatch . group ( 1 ) ),context_match = var1 . match ( bmatch . group ( 1 ) )
"call the method imatch.group with an argument integer 2, use the result as an argument for the call to the method context_re.match,","call method var0 with argument integer 2, use result as argument for call to method var1 match,",context_match = context_re . match ( imatch . group ( 2 ) ),context_match = var1 . match ( imatch . group ( 2 ) )
"call the function re.compile with an argument raw string ""^\s+.*context\s+((?:""[^""]*?"")|(?:'[^']*?'))\s*"", substitute the result for context_re.","call the function re.compile with an argument raw string ""^\s+.*context\s+((?:""[^""]*?"")|(?:'[^']*?'))\s*"", substitute the result for context_re.",context_re = re . compile ( r'''^\s+.*context\s+((?:'[^']*?')|(?:'[^']*?'))\s*''' ),context_re = re . compile ( r'''^\s+.*context\s+((?:'[^']*?')|(?:'[^']*?'))\s*''' )
"CONTEXT_SEPARATOR is a string ""\x04"".",CONTEXT_SEPARATOR is string var0.,CONTEXT_SEPARATOR = '\x04',CONTEXT_SEPARATOR = '\x04'
skip this iteration of he smallest enclosing loop.,skip var0 iteration of he smallest enclosing loop.,continue,continue
"skip this loop execution,","skip var0 loop execution,",continue,continue
skip this loop iteration.,skip var0 loop iteration.,continue,continue
"skip this loop iteration,","skip var0 loop iteration,",continue,continue
"dictionary keys converted into sets,   skip this loop iteration,","dict keys converted into sets var0 skip var1 loop iteration,",continue,continue
skip this loop execution.,skip var0 loop execution.,continue,continue
"and call to the method form.has_changed evaluates to false,   skip this loop iteration,","and call to method form var1 evaluates to false var2 skip var3 loop iteration,",continue,continue
continue with the next iteration of the for loop.,continue with next iteration of for loop.,continue,continue
"skip this loop iteration,s","skip var0 loop iteration,s",continue,continue
"convert is a dictionary with 4 initial entries: list with 3 tuples: tuple with 2 elements: string '__gt__',","convert is dict with 4 initial entries: list with 3 tuples: tuple with 2 elements: string var1,","convert = { '__lt__' : [ ( '__gt__' , lambda self , other : not ( self < other or self == other ) ) , ( '__le__' , lambda self , other : self < other or self == other ) , ( '__ge__' , lambda self , other : not self < other ) ] , '__le__' : [ ( '__ge__' , lambda self , other : not self <= other or self == other ) , ( '__lt__' , lambda self , other : self <= other and not self == other ) , ( '__gt__' , lambda self , other : not self <= other ) ] , '__gt__' : [ ( '__lt__' , lambda self , other : not ( self > other or self == other ) ) , ( '__ge__' , lambda self , other : self > other or self == other ) , ( '__le__' , lambda self , other : not self > other ) ] , '__ge__' : [ ( '__le__' , lambda self , other : ( not self >= other ) or self == other ) , ( '__gt__' , lambda self , other : self >= other and not self == other ) , ( '__lt__' , lambda self , other : not self >= other ) ] }","convert = { '__lt__' : [ ( var1 , lambda self , other : not ( self < other or self == other ) ) , ( '__le__' , lambda self , other : self < other or self == other ) , ( '__ge__' , lambda self , other : not self < other ) ] , '__le__' : [ ( '__ge__' , lambda self , other : not self <= other or self == other ) , ( '__lt__' , lambda self , other : self <= other and not self == other ) , ( var1 , lambda self , other : not self <= other ) ] , var1 : [ ( '__lt__' , lambda self , other : not ( self > other or self == other ) ) , ( '__ge__' , lambda self , other : self > other or self == other ) , ( '__le__' , lambda self , other : not self > other ) ] , '__ge__' : [ ( '__le__' , lambda self , other : not self >= other or self == other ) , ( var1 , lambda self , other : self >= other and not self == other ) , ( '__lt__' , lambda self , other : not self >= other ) ] }"
"compile a regex from raw string '^(?P<prefix>[a-z]+)://(?P<suffix>.*)$', substitute it for CONVERT_PATTERN.","compile var0 from raw string '^(?P<prefix> [var2]+)://(?P<suffix>.*)$', substitute it for var3 ",CONVERT_PATTERN = re . compile ( r'^(?P<prefix>[a-z]+)://(?P<suffix>.*)$' ),var3 = re . compile ( '^(?P<prefix>[var2]+)://(?P<suffix>.*)$' )
substitute connection.introspection.table_name_converter for converter.,substitute connection.introspection var1 for converter.,converter = connection . introspection . table_name_converter,converter = connection . introspection . var1
"get converter attribute from self object, substitute it for converter.","get converter attribute from self object, substitute it for converter.","converter = getattr ( self , converter )","converter = getattr ( self , converter )"
"remove self.value_converters dictionary element under prefix key, if it exists substitute it for converter, if not, converter is None.","remove self var1 dict element under prefix key, if it exists substitute it for converter, if not, converter is var2 ","converter = self . value_converters . get ( prefix , None )","converter = self . var1 . get ( prefix , var2 )"
"substitute value under the key key of the self.COOKIES dictionary, substitute it for cookie_value.","substitute value under key key of self var0 dict, substitute it for var1 ",cookie_value = self . COOKIES [ key ],var1 = self . var0 [ key ]
"get the value filed from the return value of the call to the c.key with the argument key, add the value to the cookiedict under the key key.","get value filed from return value of call to var0 with argument key, add value to var1 under key key.",cookiedict [ key ] = c . get ( key ) . value,var1 [ key ] = c . get ( key ) . value
cookiedict is an empty dictionary.,var0 is empty dict.,cookiedict = { },var0 = { }
cookies is a string '<could not parse>'.,cookies is string var0.,cookies = '<could not parse>',cookies = var0
"get is a tuple containing elements generated by the call to the function pformat with an argument COOKIES_override,",get is tuple containing elements generated by call to function var0 with argument var1 ,cookies = ( pformat ( COOKIES_override ) if COOKIES_override is not None else pformat ( request . COOKIES ) ),cookies = var0 ( var1 ) if var1 is not None else var0 ( request . COOKIES )
call the function copystat with old_file_name and new_file_name as arguments.,call function var0 with var1 and var2 as arguments.,"copystat ( old_file_name , new_file_name )","var0 ( var1 , var2 )"
count is a property object with _get_count as a getter method.,count is property object with var0 as var1 method.,count = property ( _get_count ),count = property ( var0 )
"divide since by seconds, store the floored result in count.","divide var0 by seconds, store floored result in count.",count = since // seconds,count = var0 // seconds
increment i-th element of counters by chunk_length.,increment i-th element of counters by var0 ,counters [ i ] += chunk_length,counters [ i ] += var0
counters is a list containing length of handlers number of zeros.,counters is list containing length of handlers number of zeros.,counters = [ 0 ] * len ( handlers ),counters = [ 0 ] * len ( handlers )
substitute Iterator for create_bound_method.,substitute var0 for var1 ,create_bound_method = types . MethodType,var1 = types . MethodType
"unpack the manifest.values function return value and feed it to the itertools.chain function, create_models is a set containing chanied list.",unpack var0 function return value and feed it to var1 function var2 is set containing var3 list.,create_models = set ( itertools . chain ( * manifest . values ( ) ) ),var2 = set ( itertools . chain ( * var0 ( ) ) )
add model to created_models set.,add model to var0 set.,created_models . add ( model ),var0 . add ( model )
create_models is an empty list.,var0 is empty list.,created_models = [ ],created_models = [ ]
"use the result as an argument for the call to the self.stdout.write.   call the self.sync_apps method with connection and executor.loader.unmigrated_apps as arguments, substitute it for created_models.","use result as argument for call to var0 call self var3 method with connection and executor.loader var5 as arguments, substitute it for var6 ","created_models = self . sync_apps ( connection , executor . loader . unmigrated_apps )","var6 = self . var3 ( connection , executor . loader . var5 )"
created_models is a set.,var0 is set.,created_models = set ( ),var0 = set ( )
creation_counter is an integer 0.,var0 is integer 0.,creation_counter = 0,var0 = 0
CRITICAL is integer 50.,CRITICAL is integer 50.,CRITICAL = 50,CRITICAL = 50
"and e.level is lesser than checks.CRITICAL.   append e to criticals list for every e in all_issues, if checks.CRITICAL is lesser than or equal to e.level.",and var0 is lesser var2 checks var4 append e to var7 list for every e in var8 if checks var4 is lesser var2 or equal to var0 ,criticals = [ e for e in all_issues if checks . CRITICAL <= e . level ],var7 = [ e for e in var8 if checks . var4 <= var0 ]
"context.autoescape for 'autoescape', context.autoescape for 'current_app', context.use_l10n for 'use_l10n',   and context.use_tz for 'use_tz', substitute the result for new_context.   call the function context.get with 2 argument 'csrf_token' and None, substitute the result for csrf_token.","var0 for var2 var0 for var3 var6 for var10 var11 and var13 for var17, substitute result for var18 call function var20 with 2 argument var21 and var26 substitute result for csrf_token.","csrf_token = context . get ( 'csrf_token' , None )","csrf_token = var20 ( var21 , var26 )"
"get the value under the 'csrf_token' key of the context dictionary, if it exists substitute the result for csrf_token,","get value under var0 key of context dict, if it exists substitute result for csrf_token,","csrf_token = context . get ( 'csrf_token' , None )","csrf_token = context . get ( var0 , None )"
"call the method bf.css_classes, substitute the result for css_classes.",call method bf var1 substitute result for var1 ,css_classes = bf . css_classes ( ),var1 = bf . var1 ( )
"call function force_bytes with value as argument, use the result to as the result for the call to the methgod ctx.update.","call function var0 with value as argument, use result to as result for call to var1 var2 ",ctx . update ( force_bytes ( value ) ),var2 ( var0 ( value ) )
"ctx is an hashlib object, for calculating hash function with md5 algorithm.","var0 is var1 object, for calculating hash function with var2 algorithm.",ctx = hashlib . md5 ( ),var0 = var1 . var2 ( )
"call the method boundary with an argument string 'ascii', use the result to call to the parse_header function,","call method boundary with argument string var0, use result to call to var1 function,","ctypes , opts = parse_header ( content_type . encode ( 'ascii' ) )","ctypes , opts = var1 ( content_type . encode ( var0 ) )"
"call the options.get method with string 'CULL_FREQUENCY' and integer 3 as arguments, use the string 'cull_frequency' and previous result as the arguments for the call to the params.get method, substitute the result for cull_frequency.","call var0 method with string var1 and integer 3 as arguments, use string var2 and previous result as arguments for call to params.get method, substitute result for cull_frequency.","cull_frequency = params . get ( 'cull_frequency' , options . get ( 'CULL_FREQUENCY' , 3 ) )","cull_frequency = params . get ( 'cull_frequency' , var0 ( var1 , 3 ) )"
"divide num by self._cull_frequency, floor the result and substitute it for cull_num.",divide num by var0 floor result and substitute it for var1 ,cull_num = num // self . _cull_frequency,var1 = num // var0
"count occurrences of '\n' in t.contents, add the result to t.lineno, substitute the result for cur_lineno.",count occurrences of var0 in var1 add result to var2 substitute result for var3 ,cur_lineno = t . lineno + t . contents . count ( '\n' ),var3 = var2 + var1 . count ( '\n' )
curr is an empty string.,var0 is empty string.,curr = '',var0 = ''
substitute cwords element at the cword decremented by 1 index for curr.,substitute var0 element at var1 var2 by 1 index for var3 ,curr = cwords [ cword - 1 ],var3 = var0 [ var1 - 1 ]
substitute context for current.,substitute context for current.,current = context,current = context
"call the function current, substitute the result for current.","call function current, substitute result for current.",current = current ( ),current = current ( )
substitute element at the bit index of current for current.,substitute element at bit index of current for current.,current = current [ bit ],current = current [ bit ]
"convert bit to an integer and use it as index to obtain an element for list current, substitute it for current.","convert bit to integer and use it as index to obtain element for list current, substitute it for current.",current = current [ int ( bit ) ],current = current [ int ( bit ) ]
"get the bit attribute of current object, substitute it for current.","get bit attribute of current object, substitute it for current.","current = getattr ( current , bit )","current = getattr ( current , bit )"
substitute settings.TEMPLATE_STRING_IF_INVALID for current.,substitute settings var0 for current.,current = settings . TEMPLATE_STRING_IF_INVALID,current = settings . var0
"substitute settings.TEMPLATE_STRING_IF_INVALID for current,","substitute settings var0 for current,",current = settings . TEMPLATE_STRING_IF_INVALID,current = settings . var0
current_chunk is None.,var0 is var1 ,current_chunk = None,var0 = var1
"read chunk_size bytes from the old_file file, substitute the result for current_chunk.","read var0 bytes from var1 file, substitute result for var3 ",current_chunk = old_file . read ( chunk_size ),var3 = var1 . read ( var0 )
substitute the second element of result for current_expires.,substitute second element of result for var0 ,current_expires = result [ 1 ],var0 = result [ 1 ]
"convert current_expires to a string, use it as the argument for the call to the function typecast_timestamp, substitute the result for current_expires.","convert var0 to string, use it as argument for call to function var2 substitute result for var0 ",current_expires = typecast_timestamp ( str ( current_expires ) ),var0 = var2 ( str ( var0 ) )
append a tuple with elements key and value to current_fields.,append tuple with elements key and value to var0 ,"current_fields . append ( ( key , value ) )","var0 . append ( ( key , value ) )"
sort current_fields elements with key being a lambda function with argument x and return value creation_counter filed of first element of x.,sort var0 elements with key being lambda function with argument x and return value var1 filed of first element of var3,current_fields . sort ( key = lambda x : x [ 1 ] . creation_counter ),var0 . sort ( key = lambda x : x [ 1 ] . var1 )
current_fields is an empty list.,var0 is empty list.,current_fields = [ ],var0 = [ ]
"increment current_len by integer 1,","increment var0 by integer 1,",current_len += 1,var0 += 1
current_len is equal to integer 0.,var0 is equal to integer 0.,current_len = 0,var0 = 0
"call the method timezone.get_current_timezone, substitute the result for current_timezone.",call method timezone var1 substitute result for var2 ,current_timezone = timezone . get_current_timezone ( ),var2 = timezone . var1 ( )
"call the function timezone.get_current_timezone, substitute the result for current_timezone.",call function timezone var1 substitute result for var2 ,current_timezone = timezone . get_current_timezone ( ),var2 = timezone . var1 ( )
"format the string '{scheme}://{host}{path}' by replacing scheme with self.scheme, host with return value of the self.get_host method,","format the string '{scheme}://{host}{path}' by replacing scheme with self.scheme, host with return value of the self.get_host method,","current_uri = '{scheme}://{host}{path}' . format ( scheme = self . scheme , host = self . get_host ( ) , path = self . path )","current_uri = '{scheme}://{host}{path}' . format ( scheme = self . scheme , host = self . get_host ( ) , path = self . path )"
substitute version_info from module sys for surrent_version.,substitute var0 from module var1 for var2 ,current_version = sys . version_info,current_version = var1 . var0
"join full_statement into a string, separated by newlines, use it as an argument for the call to the method curs.execute.","join var0 into string, separated by var1 use it as argument for call to method var2 ",curs . execute ( '\n' . join ( full_statement ) ),var2 ( '\n' . join ( var0 ) )
execute statement on the database that curs points to.,execute statement on database var0 curs points to.,curs . execute ( statement ),curs . execute ( statement )
call the cursor.close method.,call var0 method.,cursor . close ( ),var0 ( )
"call the method cursor.close,",call method var0 ,cursor . close ( ),var0 ( )
"evaluate the method connections[db].ops.cache_key_culling_sql, evaluate the result by table modulus, call the method cursor.execute,","evaluate method connections [var1].ops var2 evaluate result by table modulus, call method var3 ","cursor . execute ( connections [ db ] . ops . cache_key_culling_sql ( ) % table , [ cull_num ] )","var3 ( connections [ var1 ] . ops . var2 ( ) % table , [ cull_num ] )"
"call the method cursor.execute with string ""DELETE FROM %s"" as argument, substitute the '%s' with table.","call method var0 with string var1 as argument, substitute var2 with table.",cursor . execute ( 'DELETE FROM %s' % table ),var0 ( 'DELETE FROM %s' % table )
"with previous result and list containing cull_num, respectively as arguments.   call the method cursor.execute with string ""DELETE FROM %s WHERE cache_key < %%s"" as argument,","with previous result and list containing var0 respectively as arguments var2 call method var3 with string var4 as argument,","cursor . execute ( 'DELETE FROM %s ' 'WHERE cache_key < %%s' % table , [ cursor . fetchone ( ) [ 0 ] ] )","var3 ( 'DELETE FROM %s WHERE cache_key < %%s' % table , [ cursor . fetchone ( ) [ 0 ] ] )"
"call the method cursor.execute with string ""DELETE FROM %s WHERE cache_key = %%s"" as argument,","call method var0 with string var1 as argument,","cursor . execute ( 'DELETE FROM %s ' 'WHERE cache_key = %%s' % table , [ key ] )","var0 ( 'DELETE FROM %s WHERE cache_key = %%s' % table , [ key ] )"
"call the method cursor.execute with string ""DELETE FROM %s WHERE cache_key = %%s"" as argument,","call method var0 with string var1 as argument,","cursor . execute ( 'DELETE FROM %s WHERE cache_key = %%s' % table , [ key ] )","var0 ( 'DELETE FROM %s WHERE cache_key = %%s' % table , [ key ] )"
"call the method cursor.execute with string ""DELETE FROM %s WHERE expires < %%s"" as argument,","call method var0 with string var1 as argument,","cursor . execute ( 'DELETE FROM %s WHERE expires < %%s' % table , [ connections [ db ] . ops . value_to_db_datetime ( now ) ] )","var0 ( 'DELETE FROM %s WHERE expires < %%s' % table , [ connections [ db ] . ops . value_to_db_datetime ( now ) ] )"
"call the method cursor.execute with string ""INSERT INTO %s (cache_key, value, expires) VALUES (%%s, %%s, %%s)"",","call method var0 with string var1,","cursor . execute ( 'INSERT INTO %s (cache_key, value, expires) ' 'VALUES (%%s, %%s, %%s)' % table , [ key , b64encoded , exp ] )","var0 ( 'INSERT INTO %s(cache_key, value, expires) VALUES(%%s, %%s, %%s)' % table , [ key , b64encoded , exp ] )"
"call the method cursor.execute with string ""SELECT cache_key FROM %s WHERE cache_key = %%s and expires > %%s"" as argument,","call method var0 with string var1 as argument,","cursor . execute ( 'SELECT cache_key FROM %s ' 'WHERE cache_key = %%s and expires > %%s' % table , [ key , connections [ db ] . ops . value_to_db_datetime ( now ) ] )","var0 ( 'SELECT cache_key FROM %s WHERE cache_key = %%s and expires > %%s' % table , [ key , connections [ db ] . ops . value_to_db_datetime ( now ) ] )"
"call the method cursor.execute with string ""SELECT cache_key, expires FROM %s WHERE cache_key = %%s"" as argument,","call method var0 with string var1 as argument,","cursor . execute ( 'SELECT cache_key, expires FROM %s ' 'WHERE cache_key = %%s' % table , [ key ] )","var0 ( 'SELECT cache_key, expires FROM %s WHERE cache_key = %%s' % table , [ key ] )"
"call the method cursor.execute with string ""SELECT cache_key, value, expires FROM %s WHERE cache_key = %%s"" as argument,","call method var0 with string var1 as argument,","cursor . execute ( 'SELECT cache_key, value, expires FROM %s ' 'WHERE cache_key = %%s' % table , [ key ] )","var0 ( 'SELECT cache_key, value, expires FROM %s WHERE cache_key = %%s' % table , [ key ] )"
"call the method cursor.execute with string ""SELECT COUNT(*) FROM %s"" as argument, substitute the '%s' with table.","call method var0 with string var1 as argument, substitute var2 with table.",cursor . execute ( 'SELECT COUNT(*) FROM %s' % table ),var0 ( 'SELECT COUNT(*) FROM %s' % table )
"substitute the '%s' with table and list containing return value of the method call ops.value_to_db_datetime with argument now on the object under the db key of connections dictionary, respectively.   call the method cursor.execute with string ""SELECT COUNT(*) FROM %s"" as argument, substitute the '%s' with table.","substitute var0 with table and list containing return value of method call ops var3 with argument now on object under db key of connections dict, respectively var4 call method var5 with string var6 as argument, substitute var0 with table.",cursor . execute ( 'SELECT COUNT(*) FROM %s' % table ),var5 ( 'var7 var8(*) var9 %s' % table )
"call the method cursor.execute with string ""UPDATE %s SET value = %%s, expires = %%s WHERE cache_key = %%s"" as argument,","call method var0 with string var1 as argument,","cursor . execute ( 'UPDATE %s SET value = %%s, expires = %%s ' 'WHERE cache_key = %%s' % table , [ b64encoded , exp , key ] )","var0 ( 'UPDATE %s SET value = %%s, expires = %%s WHERE cache_key = %%s' % table , [ b64encoded , exp , key ] )"
call the method cursor.execute with an argument line.,call method var0 with argument line.,cursor . execute ( line ),var0 ( line )
call the method cursor.execute with an argument sql.,call method var0 with argument var1 ,cursor . execute ( sql ),var0 ( var1 )
call the cursor.execute method with sql as argument.,call var0 method with var1 as argument.,cursor . execute ( sql ),var0 ( var1 )
call the method cursor.execute with sql as argument.,call method var0 with var1 as argument.,cursor . execute ( sql ),var0 ( var1 )
call the cursor.execute method with statement as argument.,call var0 method with statement as argument.,cursor . execute ( statement ),var0 ( statement )
"call the connection.cursor method, substitute the result for cursor.","call var0 method, substitute result for cursor.",cursor = connection . cursor ( ),cursor = var0 ( )
"call the connection.cursor method, substitute it for cursor.","call var0 method, substitute it for cursor.",cursor = connection . cursor ( ),cursor = var0 ( )
"call the method connection.cursor, substitute the result for cursor.",call method var0 substitute result for cursor.,cursor = connection . cursor ( ),cursor = var0 ( )
cursor is None.,cursor is var0 ,cursor = None,cursor = var0
"call the method custom_sql_for_model with model, no_style() and connection as arguments, substitute the result for custom_sql.","call method var0 with model, no_style() and connection as arguments, substitute result for var1 ","custom_sql = custom_sql_for_model ( model , no_style ( ) , connection )","var1 = var0 ( model , var2 ( ) , connection )"
"convert to an integer value under the 'COMP_CWORD' key of the os.environ dictionary, substitute it for cword.","convert to integer value under var0 key of var1 dict, substitute it for var2 ",cword = int ( os . environ [ 'COMP_CWORD' ] ),var2 = int ( var1 [ var0 ] )
"slit by whitespace the value under the 'COMP_WORDS' key of the os.environ dictionary, substitute the result without the first element for cwords.","slit by var0 value under var1 key of var2 dict, substitute result var3 first element for var4 ",cwords = os . environ [ 'COMP_WORDS' ] . split ( ) [ 1 : ],var4 = var2 [ var1 ] . split ( ) [ 1 : ]
"get the value under the self key of the context.render_context dictionary, substitute it for cycle_iter.","get value under self key of context var1 dict, substitute it for var2 ",cycle_iter = context . render_context [ self ],var2 = context . var1 [ self ]
substitute val for value under the k key of dictionary d.,substitute var0 for value under k key of dict var1,d [ k ] = val,d [ k ] = var0
add the string '0x' to the variable d,add string var0 to variable d,d += '0x',d += var0
"call the function datetime_safe.new_datetime with an argument date, on the result call the method strftime with an argument,","call function var0 var2 with argument date, on result call method var3 with argument,","d = ',%s' % datetime_safe . new_datetime ( date ) . strftime ( '%Y-%m-%d' )","d = ',%s' % var0 . var2 ( date ) . var3 ( '%Y-%m-%d' )"
d is an empty string.,d is empty string.,d = '',d = ''
d is an empty dictionary.,d is empty dict.,d = { },d = { }
substitute value under idx key of dictionary d for d.,substitute value under var0 key of dict d for var1,d = d [ idx ],d = d [ var0 ]
"call the method m.groups, use the first element of the result as key for obtaining value from d dictionary,","call method var0 use first element of result as key for obtaining value from d dict,",d = d [ m . groups ( ) [ 0 ] ],d = d [ m . groups ( ) [ 0 ] ]
substitute value under n key of dictionary d for d.,substitute value under n key of dict d for var0,d = d [ n ],d = d [ n ]
"format self.day_field string with name, use it as the key for the data dictionary, substitute the result for d.","format self var1 string with name, use it as key for data dict, substitute result for var2",d = data . get ( self . day_field % name ),d = data . get ( self . var1 % name )
"call the function datetime.datetime with 3 arguments, d.year, d.month and d.day, substitute the result for d.","call function var0 with 3 arguments var1 var3 and d.day, substitute result for var2","d = datetime . datetime ( d . year , d . month , d . day )","d = var0 ( var1 , var3 , var2day )"
"d is an instance of class Decimal, created with result of the function force_text,",d is instance of class var0 created with result of function var1 ,d = Decimal ( force_text ( float ( text ) ) ),d = var0 ( var1 ( float ( text ) ) )
d is an instance of Decimal class created with an argument input_val.,d is instance of var0 class created with argument var1 ,d = Decimal ( input_val ),d = var0 ( var1 )
"call the get_deserializer function with an argument format, substitute the result for d.","call var0 function with argument format, substitute result for var1",d = get_deserializer ( format ),d = var0 ( format )
"call the method m.groupdict, substitute the result for d.",call method var0 substitute result for var1,d = m . groupdict ( ),d = var0 ( )
"call the method m.groups, use the first element of the result as key for obtaining value from self.config dictionary,","call method var0 use first element of result as key for obtaining value from var1 dict,",d = self . config [ m . groups ( ) [ 0 ] ],d = var1 [ m . groups ( ) [ 0 ] ]
substitute the value under the 'errlog' key of options dictionary for value under the 'err_log' key of daemon_kwargs dictionary.,substitute value under var0 key of options dict for value under var1 key of var4 dict.,daemon_kwargs [ 'err_log' ] = options [ 'errlog' ],var4 [ 'err_log' ] = options [ var0 ]
substitute the value under the 'outlog' key of options dictionary for value under the 'out_log' key of daemon_kwargs dictionary.,substitute value under var0 key of options dict for value under var1 key of var4 dict.,daemon_kwargs [ 'out_log' ] = options [ 'outlog' ],var4 [ 'out_log' ] = options [ var0 ]
"convert the value under the 'umask' key of options dictionary into an integer of base 8, substitute it for value under the 'umask' key of daemon_kwargs dictionary.","convert value under var0 key of options dict into integer of base 8, substitute it for value under var0 key of var2 dict.","daemon_kwargs [ 'umask' ] = int ( options [ 'umask' ] , 8 )","var2 [ var0 ] = int ( options [ var0 ] , 8 )"
daemon_kwargs is an empty dictionary.,var0 is empty dict.,daemon_kwargs = { },var0 = { }
"if the value under the 'bindAddress' key of the wsgi_opts dictionary is not None, set daemonize to boolean True, if not, set it to boolean False.","if value under var0 key of var1 dict is not var3 set var4 to boolean var5 if not, set it to boolean var6 ",daemonize = ( wsgi_opts [ 'bindAddress' ] is not None ),var4 = var1 [ var0 ] is not var3
daemonize is boolean False.,var0 is boolean var1 ,daemonize = False,var0 = var1
daemonize is boolean True.,var0 is boolean var1 ,daemonize = True,var0 = var1
DARK_PALETTE is a string 'dark'.,DARK_PALETTE is string var0.,DARK_PALETTE = 'dark',DARK_PALETTE = var0
"call the smart_text function with 2 arguments: return value of the obj._get_pk_val function and string_only set to boolean True,",call var0 function with 2 arguments: return value of var2 function and var3 set to boolean var5 ,"data [ 'pk' ] = smart_text ( obj . _get_pk_val ( ) , strings_only = True )","data [ 'pk' ] = var0 ( obj . _get_pk_val ( ) , strings_only = var5 )"
value under f.name key of the dta dictionary is an empty list.,value under var0 key of var1 dict is empty list.,data [ f . name ] = [ ],data [ var0 ] = [ ]
"for every item in qu append item.pk to a list, substitute resulting list for value under f.name key of the data dictionary.","for every item in var0 append var1 to list, substitute resulting list for value under var2 key of data dict.",data [ f . name ] = [ item . pk for item in qs ],data [ var2 ] = [ var1 for item in qs ]
"call the method f.value_from_object with an argument instance, substitute the result for value under the f.name key of the data dictionary.","call method f var1 with argument instance, substitute result for value under var2 key of data dict.",data [ f . name ] = f . value_from_object ( instance ),data [ var2 ] = f . var1 ( instance )
"call the method qs.values_list with 2 arguments: string 'pk' and flat set to boolean True, put the results in a list,","call method qs var1 with 2 arguments: string var2 and flat set to boolean var3 put results in list,","data [ f . name ] = list ( qs . values_list ( 'pk' , flat = True ) )","data [ f . name ] = list ( qs . var1 ( var2 , flat = var3 ) )"
"all the method field.rel.to._meta.get_field with field.rel.field_name as argument, call the to_python method on the result with,","all method field.rel.to._meta var1 with field.rel var3 as argument, call var4 method on result with,",data [ field . attname ] = field . rel . to . _meta . get_field ( field . rel . field_name ) . to_python ( field_value ),data [ field . attname ] = field . rel . to . _meta . var1 ( field . rel . var3 ) . var4 ( field_value )
value under the field.attname key of the data dictionary is None.,value under field.attname key of data dict is var0 ,data [ field . attname ] = None,data [ field . attname ] = var0
"call the method self._handle_fk_field_node with field_node and field as arguments, substitute the result for the value under the","call method var0 with var1 and field as arguments, substitute result for value under the","data [ field . attname ] = self . _handle_fk_field_node ( field_node , field )","data [ field . attname ] = var0 ( var1 , field )"
"unpacked list field_value as an argument, substitute the result for value.   substitute value for value under the field.attname key of the data dictionary.","unpacked list var0 as argument, substitute result for value var1 substitute value for value under field.attname key of data dict.",data [ field . attname ] = value,data [ field . attname ] = value
"call the field.to_python method with field_value, substitute the result for field.name key of the data dictionary.",call field var1 method with var2 substitute result for var4 key of data dict.,data [ field . name ] = field . to_python ( field_value ),data [ var4 ] = field . var1 ( var2 )
"call to the field.to_python method, substitute the result for value.   substitute value for value under the field.name key of the data dictionary.","call to field var1 method, substitute result for value var2 substitute value for value under var3 key of data dict.",data [ field . name ] = value,data [ var3 ] = value
"call the method node.getAttribute with an argument string 'pk', use the result as the argument for the call to the method,  Model._meta.pk.to_python with, substitute the result for value under the Model._meta.pk.attname key of the data dictionary.","call method node var2 with argument string var3, use result as argument for call to method var4 _meta.pk var7 with, substitute result for value under var4 _meta.pk.attname key of data dict.",data [ Model . _meta . pk . attname ] = Model . _meta . pk . to_python ( node . getAttribute ( 'pk' ) ),data [ var4 . _meta . pk . attname ] = var4 . _meta . pk . var7 ( node . var2 ( var3 ) )
"call the method Model._meta.pk.to_python with one argument: value under the 'pk' key of dictionary d, or None if previous doesnt exists,","call method var0 _meta.pk var2 with one argument: value under var3 key of dict d, or var4 if previous doesnt exists,","data [ Model . _meta . pk . attname ] = Model . _meta . pk . to_python ( d . get ( 'pk' , None ) )","data [ var0 . _meta . pk . attname ] = var0 . _meta . pk . var2 ( d . get ( var3 , var4 ) )"
"create a tuple out of elements under the key field of the form.cleaned_data dictionary, add elements of date_data to it,","create tuple out of elements under key field of form var1 dict, add elements of var2 to it,","data = ( form . cleaned_data [ field ] , ) + date_data","data = ( form . var1 [ field ] , ) + var2"
data is an empty list.,data is empty list.,data = [ ],data = [ ]
"data is an dictionary with 2 initial entries: return value of the smart_text function with the argument obj._meta for 'model',","data is dict with 2 initial entries: return value of var0 function with argument obj._meta for var2,","data = { 'model' : smart_text ( obj . _meta ) , 'fields' : self . _current , }","data = { var2 : var0 ( obj . _meta ) , 'fields' : self . _current }"
"data is an empty dictionary,","data is empty dict,",data = { },data = { }
data is an empty dictionary.,data is empty dict.,data = { },data = { }
"call the method b64_decode with an argument base64, substitute the result for data.",call method var0 with argument var1 substitute result for data.,data = b64_decode ( base64d ),data = var0 ( base64d )
"call the function base64.b64decode with an argument raw_data, substitute the result for data.",call function var0 with argument var1 substitute result for data.,data = base64 . b64decode ( raw_data ),data = var0 ( var1 )
convert data into boolean and substitute it for data.,convert data into boolean and substitute it for data.,data = bool ( data ),data = bool ( data )
"data is an instance of BytesIO class, created with an argument: self._body.","data is instance of var0 class, created with argument: var1 ",data = BytesIO ( self . _body ),data = var0 ( var1 )
substitute compressed for data.,substitute compressed for data.,data = compressed,data = compressed
"call the function conditional_escape with an argument arg, call the method join on the result with an argument value,","call function var0 with argument var1 call method join on result with argument value,",data = conditional_escape ( arg ) . join ( value ),data = var0 ( var1 ) . join ( value )
"call the method data.encode with 2 arguments: fp.encoding and errors, substitute the result for data.","call method var0 with 2 arguments: var1 and errors, substitute result for data.","data = data . encode ( fp . encoding , errors )","data = var0 ( var1 , errors )"
"call the method data.replace with an argument microsecond set to integer 0, substitute the result for data.","call method var0 with argument microsecond set to integer 0, substitute result for data.",data = data . replace ( microsecond = 0 ),data = var0 ( microsecond = 0 )
"call the method data, substitute the result for data.","call method data, substitute result for data.",data = data ( ),data = data ( )
"if data is true, substitute it for data, otherwise data is an empty list.","if data is true, substitute it for data, otherwise data is empty list.",data = data or [ ],data = data or [ ]
"call the method field_stream.read, substitute the result for data.","call method var0 read, substitute result for data.",data = field_stream . read ( ),data = var0 . read ( )
read chunk_size bytes from file and store it in data.,read var0 bytes from file and store it in data.,data = file . read ( chunk_size ),data = file . read ( var0 )
"serialize data to JSON format with cls set to encoder, substitute it for data.",serialize data to var0 format with cls set to var1 substitute it for data.,"data = json . dumps ( data , cls = encoder )","data = json . dumps ( data , cls = var1 )"
"call the function method with 3 arguments: self, unpacked list args and unpacked dictionary kwargs, substitute the result for data.","call function method with 3 arguments: self, unpacked list var0 and unpacked dict var1 substitute result for data.","data = method ( self , * args , ** kwargs )","data = method ( self , * var0 , ** var1 )"
data is None.,data is var0 ,data = None,data = var0
"remove element under '_data' key of obj_dict dictionary, if it exists substitute it for data, if not data is an empty list.","remove element under var0 key of var1 dict, if it exists substitute it for data, if not data is empty list.","data = obj_dict . pop ( '_data' , { } )","data = var1 . pop ( var0 , { } )"
substitute raw_data for data.,substitute var0 for data.,data = raw_data,data = var0
substitute self for data.,substitute self for data.,data = self,data = self
"call the method self._archive.read with an argument name, substitute the result for data.","call method var0 with argument name, substitute result for data.",data = self . _archive . read ( name ),data = var0 ( name )
"call the method self._coerce with an argument data, substitute the result for data.","call method var0 with argument data, substitute result for data.",data = self . _coerce ( data ),data = var0 ( data )
"call the method self._prepare_data with an argument data, substitute the result for data.","call method var0 with argument data, substitute result for data.",data = self . _prepare_data ( data ),data = var0 ( data )
"call the method self.field.bound_data with 2 arguments: self.data and value under the self.name key of the dictionary,","call method self.field var1 with 2 arguments: var2 and value under var3 key of dict,","data = self . field . bound_data ( self . data , self . form . initial . get ( self . name , self . field . initial ) )","data = self . field . var1 ( var2 , self . form . initial . get ( var3 , self . field . initial ) )"
"call the method self.flo.read with an argument self.chunk_size, substitute the result for data.",call method var0 with argument self var2 substitute result for data.,data = self . flo . read ( self . chunk_size ),data = var0 ( self . var2 )
"get the value under the self.name key of the self.form.initial dictionary, if it exists, substitute it for data,","get value under var0 key of var1 dict, if it exists, substitute it for data,","data = self . form . initial . get ( self . name , self . field . initial )","data = var1 . get ( var0 , self . field . initial )"
"call the self.read method with argument chunk_size, substitute the result for data.",call var0 method with argument var1 substitute result for data.,data = self . read ( chunk_size ),data = var0 ( var1 )
"call the function self.to_python with an argument data, substitute the result for data.","call function self var1 with argument data, substitute result for data.",data = self . to_python ( data ),data = self . var1 ( data )
"call the serializer function, call the dumps method on the result with an argument obj, substitute result for data.","call var0 function, call dumps method on result with argument var1 substitute result for data.",data = serializer ( ) . dumps ( obj ),data = var0 ( ) . dumps ( var1 )
"convert data to string, substitute it for data.","convert data to string, substitute it for data.",data = str ( data ),data = str ( data )
"call the function zlib.decompress with an argument data, substitute the result for data.","call function var0 with argument data, substitute result for data.",data = zlib . decompress ( data ),data = var0 ( data )
"for every value in data call the function force_text with an argument value, add the results into a set, substitute the resulting set for data_set.","for every value in data call function var0 with argument value, add results into set, substitute resulting set for var1 ",data_set = set ( force_text ( value ) for value in data ),var1 = set ( var0 ( value ) for value in data )
"for every value in result of the method self.prepare_value called with an argument initial.   data_set is set created out of return values of the function force_text called with an argument value,","for every value in result of method self var1 called with argument initial var3 is set created out of return values of function var5 called with argument value,",data_set = set ( force_text ( value ) for value in data ),var3 = set ( var5 ( value ) for value in data )
"substitute data for data_value if data is not None, otherwise data_value is an empty list.",substitute data for var0 if data is not var4 otherwise var0 is empty list.,data_value = data if data is not None else '',var0 = data if data is not var4 else ''
"if data is not None, substitute data for initial_value, otherwise data_value is an empty string.",if data is not var0 substitute data for var1 otherwise var3 is empty string.,data_value = data if data is not None else '',var3 = data if data is not var0 else ''
"call the method field.widget.value_from_datadict with 3 arguments: self.data, self.files, prefixed_name, substitute the result for data_value.",call method field.widget var1 with 3 arguments: var2 var3 var4 substitute result for var6 ,"data_value = field . widget . value_from_datadict ( self . data , self . files , prefixed_name )","var6 = field . widget . var1 ( var2 , var3 , var4 )"
substitute value under the 'database' key of the options dictionary for database.,substitute value under var0 key of options dict for database.,database = options . get ( 'database' ),database = options . get ( var0 )
databases is a list containing 2 elements: self.using and None.,databases is list containing 2 elements: var0 and var1 ,"databases = [ self . using , None ]","databases = [ var0 , var1 ]"
"call the method datetime_safe.new_datetime with an argument date, substitute the result for date.","call method var0 var2 with argument date, substitute result for date.",date = datetime_safe . new_datetime ( date ),date = var0 . var2 ( date )
"call the function datetime_safe.new_datetime with an argument date, substitute the result for date.","call function var0 var2 with argument date, substitute result for date.",date = datetime_safe . new_datetime ( date ),date = var0 . var2 ( date )
substitute value under the unique_for key of form.cleaned_data dictionary for date.,substitute value under var0 key of form var2 dict for date.,date = form . cleaned_data [ unique_for ],date = form . var2 [ var0 ]
"date_data is a tuple with 3 elements: date.year, date.month and date.day.",var0 is tuple with 3 elements: var1 var2 and var3 ,"date_data = ( date . year , date . month , date . day )","var0 = var1 , var2 , var3"
date_data is a tuple with an entry: attribute lookup from the value under the unique_for key of the form.cleaned_data dictionary.,var0 is tuple with entry: attribute lookup from value under var1 key of form var3 dict.,"date_data = ( getattr ( form . cleaned_data [ unique_for ] , lookup ) , )","var0 = getattr ( form . var3 [ var1 ] , lookup ) ,"
date_keys is a tuple with 2 arguments: strings 'updateddate' and 'pubdate'.,var0 is tuple with 2 arguments: strings var1 and var2.,"date_keys = ( 'updateddate' , 'pubdate' )","var0 = var1 , 'pubdate'"
"compile regex from raw string '(?P<year>\d{4})-(?P<month>\d{1,2})-(?P<day>\d{1,2})$', substitute it for date_re.","compile var0 from raw string var1, substitute it for var2 ","date_re = re . compile ( r'(?P<year>\d{4})-(?P<month>\d{1,2})-(?P<day>\d{1,2})$' )","var2 = re . compile ( '(?P<year>\\d{4})-(?P<month>\\d{1,2})-(?P<day>\\d{1,2})$' )"
"call the function datetime.date with 3 arguments: y, m and d all converted into a integers, substitute the result for date_value.","call function var0 with 3 arguments: y, m and d all converted into integers, substitute result for var1 ","date_value = datetime . date ( int ( y ) , int ( m ) , int ( d ) )","var1 = var0 ( int ( y ) , int ( m ) , int ( d ) )"
"call the method datetime_safe.new_date with an argument date_value, substitute the result for date_value.",call method var0 var2 with argument var3 substitute result for var3 ,date_value = datetime_safe . new_date ( date_value ),var3 = var0 . var2 ( var3 )
"substitute it for time_re.   compile regex from raw string '(?P<year>\d{4})-(?P<month>\d{1,2})-(?P<day>\d{1,2})[T ](?P<hour>\d{1,2}):(?P<minute>\d{1,2})'",substitute it for var0 compile var3 from raw string var4,"datetime_re = re . compile ( r'(?P<year>\d{4})-(?P<month>\d{1,2})-(?P<day>\d{1,2})' r'[T ](?P<hour>\d{1,2}):(?P<minute>\d{1,2})' r'(?::(?P<second>\d{1,2})(?:\.(?P<microsecond>\d{1,6})\d{0,6})?)?' r'(?P<tzinfo>Z|[+-]\d{2}(?::?\d{2})?)?$' )","datevar0 = re . compile ( '(?P<year>\\d{4})-(?P<month>\\d{1,2})-(?P<day>\\d{1,2})[T](?P<hour>\\d{1,2}):(?P<minute>\\d{1,2})(?::(?P<second>\\d{1,2})(?:\\.(?P<microsecond>\\d{1,6})\\d{0,6})?)?(?P<tzinfo>Z|[+-]\\d{2}(?::?\\d{2})?)?$' )"
substitute DjangoJSONEncoder for DateTimeAwareJSONEncoder.,substitute var0 for var1 ,DateTimeAwareJSONEncoder = DjangoJSONEncoder,var1 = var0
"method MONTHS.index, increment the result by integer 1, substitute it for month.   call the method m.group with an argument string 'fay', convert the result into a string, substitute it for day.","method var0 index, increment result by integer 1, substitute it for month var2 call method var3 with argument string var4, convert result into string, substitute it for day.",day = int ( m . group ( 'day' ) ),day = int ( m . group ( 'day' ) )
day_field is a string '%s_day'.,var0 is string var1.,day_field = '%s_day',var0 = var1
"call the method self.z, substitute the result for day_of_year.",call method var0 substitute result for var1 ,day_of_year = self . z ( ),var1 = var0 ( )
"days is a tuple with 7 elements: strings 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat' and 'Sun'.","days is tuple with 7 elements: strings var0, var1, var4, var7, var10, var12 and var14.","days = ( 'Mon' , 'Tue' , 'Wed' , 'Thu' , 'Fri' , 'Sat' , 'Sun' )","days = var0 , 'Tue' , 'Wed' , 'Thu' , 'Fri' , 'Sat' , 'Sun'"
"get value under the 'database' key of the options dictionary, substitute it for db.","get value under var0 key of options dict, substitute it for db.",db = options . get ( 'database' ),db = options . get ( var0 )
"get the value under the key 'database' of the options dictionary, substitute it for db.","get value under key var0 of options dict, substitute it for db.",db = options . get ( 'database' ),db = options . get ( var0 )
"remove the value under the 'using' key from the options dictionary, assign it to the db, if the entry doesnt exists,","remove value under var0 key from options dict, assign it to db, if entry doesnt exists,","db = options . pop ( 'using' , DEFAULT_DB_ALIAS )","db = options . pop ( var0 , DEFAULT_DB_ALIAS )"
"call the method router.db_for_read with self.cache_model_class as argument, substitute the result for db.","call method router var1 with self var3 as argument, substitute result for db.",db = router . db_for_read ( self . cache_model_class ),db = router . var1 ( self . var3 )
"call the method router.db_for_write with argument self.cache_model_class, substitute the result for db.",call method router var1 with argument self var3 substitute result for db.,db = router . db_for_read ( self . cache_model_class ),db = router . db_for_read ( self . var3 )
"call the method router.db_for_write with argument self.cache_model_class, substitute the result for db.",call method router var1 with argument self var3 substitute result for db.,db = router . db_for_write ( self . cache_model_class ),db = router . var1 ( self . var3 )
db_module is a string 'django.db'.,var0 is string var1.,db_module = 'django.db',var0 = var1
"call the method connection.creation.create_test_db with verbosity set to verbosity, autoclobber set to inverse value of interactive,","call method connection.creation var1 with verbosity set to verbosity var2 set to inverse value of interactive,","db_name = connection . creation . create_test_db ( verbosity = verbosity , autoclobber = not interactive , serialize = False )","db_name = connection . creation . var1 ( verbosity = verbosity , var2 = not interactive , serialize = False )"
call the method deactivate.,call method deactivate.,deactivate ( ),deactivate ( )
deactivate and deactivate_all are lambda functions returning None.,deactivate and var0 are lambda functions returning var2 ,deactivate = deactivate_all = lambda : None,deactivate = var0 = lambda : var2
call the function deactivate_all.,call function var0 ,deactivate_all ( ),var0 ( )
DEBUG is integer 10.,DEBUG is integer 10.,DEBUG = 10,DEBUG = 10
"subtract length of dec_part from decimal_pos, multiply the number of character '0' by the result,","subtract length of var0 from var2 multiply number of character var4 by result,",dec_part = dec_part + ( '0' * ( decimal_pos - len ( dec_part ) ) ),var0 = var0 + var4 * ( var2 - len ( var0 ) )
"add decimal_sep and dec_part, substitute the result for dec_part.",add var0 and var1 substitute result for var1 ,dec_part = decimal_sep + dec_part,var1 = var0 + var1
decimal_digits is a string '0123456789'.,decimal_digits is string var0.,decimal_digits = '0123456789',decimal_digits = var0
"call the function get_format with an argument string 'DECIMAL_SEPARATOR', substitute the result for decimal_separator.","call function var0 with argument string var2, substitute result for var3 ",decimal_separator = get_format ( 'DECIMAL_SEPARATOR' ),var3 = var0 ( var2 )
substitute absolute value of the exponent for decimals.,substitute absolute value of exponent for decimals.,decimals = abs ( exponent ),decimals = abs ( exponent )
remove entry at the attr key of the declared_fields dictionary.,remove entry at var0 key of var1 dict.,declared_fields . pop ( attr ),var1 . pop ( var0 )
decompress is boolean True.,decompress is boolean var0 ,decompress = True,decompress = var0
"and instance of Name class created with an argument string 'python_2_unicode_compatible'.   decorated is an instance of class Node, created with 3 arguments: syms.decorated, list with 2 arguments: decorator and klass,",and instance of var0 class created with argument string var1 var2 decorated is instance of class var3 created with 3 arguments: var4 list with 2 arguments: decorator and var5 ,"decorated = Node ( syms . decorated , [ decorator , klass ] , prefix = node . prefix )","decorated = var3 ( var4 , [ decorator , var5 ] , prefix = node . prefix )"
"decorator is an instance of class Node, created with 2 arguments: instance of Leaf class created with 2 arguments: token.AT and ""@',","decorator is instance of class var0 created with 2 arguments: instance of var1 class created with 2 arguments: token var2 and ""@',","decorator = Node ( syms . decorator , [ Leaf ( token . AT , '@' ) , Name ( 'python_2_unicode_compatible' ) ] )","decorator = var0 ( syms . decorator , [ var1 ( token . var2 , 'var3' ) , Name ( 'python_2_unicode_compatible' ) ] )"
define the method __add__ with arguments self and other.,define method var0 with arguments self and other.,"def __add__ ( self , other ) : ","def var0 ( self , other ) : "
define the method __add__ with 2 arguments self and rhs.,define method var0 with 2 arguments self and rhs.,"def __add__ ( self , rhs ) : ","def var0 ( self , rhs ) : "
define the method __bool__ with argument self.,define method var0 with argument self.,def __bool__ ( self ) : ,def var0 ( self ) : 
define the method __bool__ with an argument self.,define method var0 with argument self.,def __bool__ ( self ) : ,def var0 ( self ) : 
define the method __bytes_cast with an argument self.,define method var0 with argument self.,def __bytes_cast ( self ) : ,def var0 ( self ) : 
"define the __call__method with arguments self, unpacked list args and unpacked dictionary kwargs.","define var0 with arguments self, unpacked list var1 and unpacked dict var2 ","def __call__ ( self , * args , ** kwargs ) : ","def __call__ ( self , * var1 , ** var2 ) : "
"define private method __call__ with self class instance, environ and start_response as the arguments.","define private method var0 with self class instance, environ and var1 as arguments.","def __call__ ( self , environ , start_response ) : ","def var0 ( self , environ , var1 ) : "
define the method __call__ with 2 arguments: self and f.,define method var0 with 2 arguments: self and var1,"def __call__ ( self , f ) : ","def var0 ( self , f ) : "
"define the method __call__ with 3 arguments: self, template_name and template_dirs set to None.",define method var0 with 3 arguments: self var1 and var3 set to var5 ,"def __call__ ( self , template_name , template_dirs = None ) : ","def var0 ( self , var1 , var3 = var5 ) : "
define the method __call__ with arguments self and value.,define method var0 with arguments self and value.,"def __call__ ( self , value ) : ","def var0 ( self , value ) : "
"use the result as an argument for the call to the function bytes, return the result.   define the method __cast with an argument self.","use result as argument for call to function bytes, return result var0 define method var1 with argument self.",def __cast ( self ) : ,def var1 ( self ) : 
define the method __contains__ with an argument self.,define method var0 with argument self.,"def __contains__ ( self , item ) : ","def var0 ( self , item ) : "
define the method __contains__ with 2 arguments: self and item.,define method var0 with 2 arguments: self and item.,"def __contains__ ( self , item ) : ","def var0 ( self , item ) : "
define the method __contains__ with self and key as arguments.,define method var0 with self and key as arguments.,"def __contains__ ( self , key ) : ","def var0 ( self , key ) : "
define the private method __contains__ with self class instance and key as arguments.,define private method var0 with self class instance and key as arguments.,"def __contains__ ( self , key ) : ","def var0 ( self , key ) : "
define the method __contains__ with 2 arguments: self and key.,define method var0 with 2 arguments: self and key.,"def __contains__ ( self , key ) : ","def var0 ( self , key ) : "
define the method __contains__ with 2 arguments: self and other.,define method var0 with 2 arguments: self and other.,"def __contains__ ( self , other ) : ","def var0 ( self , other ) : "
define the method __copy__ with an argument self.,define method var0 with argument self.,def __copy__ ( self ) : ,def var0 ( self ) : 
"called with 2 arguments: value and memo, for every key and value in result for the method self.items, return the result.   define the method __copy__ with an argument self.","called with 2 arguments: value and memo, for every key and value in result for method var0 return result var1 define method var2 with argument self.",def __copy__ ( self ) : ,def var2 ( self ) : 
define the method __deepcopy__ with arguments self and memo.,define method var0 with arguments self and memo.,"def __deepcopy__ ( self , memo ) : ","def var0 ( self , memo ) : "
define the method __deepcopy__ with 2 arguments: self and memo.,define method var0 with 2 arguments: self and memo.,"def __deepcopy__ ( self , memo ) : ","def var0 ( self , memo ) : "
define the method __deepcopy__ with 3 arguments: self and memo.,define method var0 with 3 arguments: self and memo.,"def __deepcopy__ ( self , memo ) : ","def var0 ( self , memo ) : "
and result of the method self.__getstate__.   define the method __deepcopy__ with 2 arguments self and memo.,and result of method var0 define method var2 with 2 arguments self and memo.,"def __deepcopy__ ( self , memo ) : ","def var2 ( self , memo ) : "
define the method __deepcopy__ with 2 arguments self and memo.,define method var0 with 2 arguments self and memo.,"def __deepcopy__ ( self , memo ) : ","def var0 ( self , memo ) : "
for every k and v in result of method the self.lists.   define the method __deepcopy__ with 2 arguments: self and memo set to None.,for every k and v in result of method var0 define method var2 with 2 arguments: self and memo set to var3 ,"def __deepcopy__ ( self , memo = None ) : ","def var2 ( self , memo = var3 ) : "
define the method __deepcopy__ with 2 arguments: self and memodict.,define method var0 with 2 arguments: self and var1 ,"def __deepcopy__ ( self , memodict ) : ","def var0 ( self , var1 ) : "
define __del__ method with self as the argument.,define __del__ method with self as argument.,def __del__ ( self ) : ,def __del__ ( self ) : 
define the method __delattr__ with self and name as arguments.,define method var0 with self and name as arguments.,"def __delattr__ ( self , name ) : ","def var0 ( self , name ) : "
define the method __delattr__ with 2 arguments self and name.,define method var0 with 2 arguments self and name.,"def __delattr__ ( self , name ) : ","def var0 ( self , name ) : "
define the method __delitem__ with 2 arguments: self and header.,define method __delitem__ with 2 arguments: self and header.,"def __delitem__ ( self , header ) : ","def __delitem__ ( self , header ) : "
define the method __delitem__ with 3 arguments: self and key.,define method __delitem__ with 3 arguments: self and key.,"def __delitem__ ( self , key ) : ","def __delitem__ ( self , key ) : "
define the method __delitem__ with 2 arguments: self and key.,define method __delitem__ with 2 arguments: self and key.,"def __delitem__ ( self , key ) : ","def __delitem__ ( self , key ) : "
define the method __dir__ with an argument self.,define method var0 with argument self.,def __dir__ ( self ) : ,def var0 ( self ) : 
define the method __enter__ with argument self.,define method var0 with argument self.,def __enter__ ( self ) : ,def var0 ( self ) : 
define __enter__ method with self as the argument.,define var0 method with self as argument.,def __enter__ ( self ) : ,def var0 ( self ) : 
define the method __enter__ with an argument self.,define method var0 with argument self.,def __enter__ ( self ) : ,def var0 ( self ) : 
define the method __eq__ with self and other as arguments.,define method var0 with self and other as arguments.,"def __eq__ ( self , other ) : ","def var0 ( self , other ) : "
define private method __eq__ with self class instance and other as arguments.,define private method var0 with self class instance and other as arguments.,"def __eq__ ( self , other ) : ","def var0 ( self , other ) : "
define the method __eq__ with self and other arguments:,define method var0 with self and other arguments:,"def __eq__ ( self , other ) : ","def var0 ( self , other ) : "
define the method __eq__ with arguments self and other.,define method var0 with arguments self and other.,"def __eq__ ( self , other ) : ","def var0 ( self , other ) : "
define the method __eq__ with an argument self.,define method var0 with argument self.,"def __eq__ ( self , other ) : ","def var0 ( self , other ) : "
define the method __eq__ with 2 arguments: self and other.,define method var0 with 2 arguments: self and other.,"def __eq__ ( self , other ) : ","def var0 ( self , other ) : "
define the method __ne__ with 2 arguments: self and other.,define method var0 with 2 arguments: self and other.,"def __eq__ ( self , other ) : ","def __eq__ ( self , other ) : "
"define the method __exit__ with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.","define method var0 with 3 arguments: self, unpacked list var1 and unpacked dict var2 ","def __exit__ ( self , * args , ** kwargs ) : ","def var0 ( self , * var1 , ** var2 ) : "
"define method __exit__ with self, exc, value and tb as the arguments.",define method var0 with self var1 value and tb as arguments.,"def __exit__ ( self , exc , value , tb ) : ","def var0 ( self , var1 , value , tb ) : "
"define the method __exit__ with self, exc_type, exc_value and tb as arguments.",define method var0 with self var1 var2 and tb as arguments.,"def __exit__ ( self , exc_type , exc_value , tb ) : ","def var0 ( self , var1 , var2 , tb ) : "
"define the method __exit__ with arguments: self, exc_type, exc_value and traceback.",define method var0 with arguments: self var1 var2 and var4 ,"def __exit__ ( self , exc_type , exc_value , traceback ) : ","def var0 ( self , var1 , var2 , var4 ) : "
"define the method __exit__ with 4 arguments: self, exc_type, exc_value and traceback.",define method var0 with 4 arguments: self var1 var2 and var4 ,"def __exit__ ( self , exc_type , exc_value , traceback ) : ","def var0 ( self , var1 , var2 , var4 ) : "
"define the method __exit__ with 4 arguments self, exc_type, exc_value and traceback.",define method var0 with 4 arguments self var1 var2 and var4 ,"def __exit__ ( self , exc_type , exc_value , traceback ) : ","def var0 ( self , var1 , var2 , var4 ) : "
"define the method __get__ with 3 arguments: self, instance and owner.","define method __get__ with 3 arguments: self, instance and owner.","def __get__ ( self , instance , owner ) : ","def __get__ ( self , instance , owner ) : "
"define the method __get__ with 3 arguments: self, instance and name type to None.","define method __get__ with 3 arguments: self, instance and name type to var0 ","def __get__ ( self , instance , type = None ) : ","def __get__ ( self , instance , type = var0 ) : "
"define the method __get__ with 3 arguments: self, obj and tp.",define method __get__ with 3 arguments: self var0 and var1 ,"def __get__ ( self , obj , tp ) : ","def __get__ ( self , var0 , var1 ) : "
define private method __getattr__ with self class instance and attr as the arguments.,define private method var0 with self class instance and var1 as arguments.,"def __getattr__ ( self , attr ) : ","def var0 ( self , var1 ) : "
define the method __getattr__ with 2 arguments: self and attr set to None.,define method var0 with 2 arguments: self and var1 set to var2 ,"def __getattr__ ( self , attr ) : ","def var0 ( self , var1 ) : "
define the method __getattr__ with self and name as arguments.,define method var0 with self and name as arguments.,"def __getattr__ ( self , name ) : ","def var0 ( self , name ) : "
define the method __getattr__ with arguments self and name.,define method var0 with arguments self and name.,"def __getattr__ ( self , name ) : ","def var0 ( self , name ) : "
define the method __getattr__ with 2 arguments: self and real_name.,define method var0 with 2 arguments: self and var1 ,"def __getattr__ ( self , real_name ) : ","def var0 ( self , var1 ) : "
define the method __getinitargs__ with an argument self.,define method var0 with argument self.,def __getinitargs__ ( self ) : ,def var0 ( self ) : 
define the __getitem__ method with self and alias arguments.,define var0 method with self and alias arguments.,"def __getitem__ ( self , alias ) : ","def var0 ( self , alias ) : "
define the method __getitem__ with 2 arguments: self and header.,define method var0 with 2 arguments: self and header.,"def __getitem__ ( self , header ) : ","def var0 ( self , header ) : "
define the method __getitem__ with an argument self.,define method var0 with argument self.,"def __getitem__ ( self , i ) : ","def var0 ( self , i ) : "
define the method __getitem__ with 2 arguments: self and idx.,define method var0 with 2 arguments: self and var1 ,"def __getitem__ ( self , idx ) : ","def var0 ( self , var1 ) : "
define the method __getitem__ with arguments self and index.,define method var0 with arguments self and index.,"def __getitem__ ( self , index ) : ","def var0 ( self , index ) : "
substitute it for self.view_name.   define the method __getitem__ with arguments self and index.,substitute it for self var1 define method var3 with arguments self and index.,"def __getitem__ ( self , index ) : ","def var3 ( self , index ) : "
define the method __getitem__ with an argument self.,define method var0 with argument self.,"def __getitem__ ( self , index ) : ","def var0 ( self , index ) : "
define the method __getitem__ with 2 arguments: self and key.,define method var0 with 2 arguments: self and key.,"def __getitem__ ( self , key ) : ","def var0 ( self , key ) : "
if it doesnt exists return otherwise.   define the method __getitem__ with 2 arguments: self and key.,if it doesnt exists return otherwise var0 define method var1 with 2 arguments: self and key.,"def __getitem__ ( self , key ) : ","def var1 ( self , key ) : "
and a result of the method __repr__ called from instance of base class of the MultiValueDict class.   define the method __getitem__ with 2 arguments: self and key.,and result of method var0 called from instance of base class of var1 class var2 define method var3 with 2 arguments: self and key.,"def __getitem__ ( self , key ) : ","def var3 ( self , key ) : "
define the method __getitem__ with 2 arguments: self and name.,define method var0 with 2 arguments: self and name.,"def __getitem__ ( self , name ) : ","def var0 ( self , name ) : "
define the method __getitem__ with arguments self and name.,define method var0 with arguments self and name.,"def __getitem__ ( self , name ) : ","def var0 ( self , name ) : "
define the method __getstate__ with an argument self.,define method var0 with argument self.,def __getstate__ ( self ) : ,def var0 ( self ) : 
define the method __hash__ with an argument self.,define method var0 with argument self.,def __hash__ ( self ) : ,def var0 ( self ) : 
define the method __html__ with an argument self.,define method var0 with argument self.,def __html__ ( self ) : ,def var0 ( self ) : 
"define the method __init__ with 6 arguments: self, _subtype set to string 'mixed', boundary set to None, _subparts set to None,","define method var0 with 6 arguments: self var1 set to string var2, boundary set to var3 var5 set to var3 ","def __init__ ( self , _subtype = 'mixed' , boundary = None , _subparts = None , encoding = None , ** _params ) : ","def var0 ( self , var1 = var2 , boundary = var3 , var5 = var3 , encoding = var3 , ** _params ) : "
"define initialization method __init__ with self class instance, unpacked list args, unpacked dictionary kwargs as arguments.","define initialization method var0 with self class instance, unpacked list var1 unpacked dict var2 as arguments.","def __init__ ( self , * args , ** kwargs ) : ","def var0 ( self , * var1 , ** var2 ) : "
"define the method __init__ with arguments self, argument list args and dictionary of arguments kwargs.","define method var0 with arguments self, argument list var1 and dict of arguments var2 ","def __init__ ( self , * args , ** kwargs ) : ","def var0 ( self , * var1 , ** var2 ) : "
"define the __init__ method with arguments: self, unpacked list args and unpacked dictionary kwargs.","define var0 method with arguments: self, unpacked list var1 and unpacked dict var2 ","def __init__ ( self , * args , ** kwargs ) : ","def var0 ( self , * var1 , ** var2 ) : "
"define the method __init__ with arguments: self, unpacked list args and unpacked dictionary kwargs.","define method var0 with arguments: self, unpacked list var1 and unpacked dict var2 ","def __init__ ( self , * args , ** kwargs ) : ","def var0 ( self , * var1 , ** var2 ) : "
"define the method __init__ with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.","define method var0 with 3 arguments: self, unpacked list var1 and unpacked dict var2 ","def __init__ ( self , * args , ** kwargs ) : ","def var0 ( self , * var1 , ** var2 ) : "
"define the method __init__ with arguments self, unpacked list args and unpacked dictionary kwargs.","define method var0 with arguments self, unpacked list var1 and unpacked dict var2 ","def __init__ ( self , * args , ** kwargs ) : ","def var0 ( self , * var1 , ** var2 ) : "
"define the __init__ method with 3 arguments: self, unpacked list args and unpacked dictionary **kwargs.","define var0 method with 3 arguments: self, unpacked list var1 and unpacked dict var2 ","def __init__ ( self , * args , ** kwargs ) : ","def var0 ( self , * var1 , ** var2 ) : "
"No file was submitted. Check the encoding type on the form. for 'invalid', return value of the function _ called with an argument,   string ""No file was submitted."" for 'missing', return value of the function _ called with an argument ""The submitted file is empty."",   for 'empty', return value of the function ungettext_lazy called with 3 arguments:   string 'Ensure this filename has at most %(max)d character (it has %(length)d).',   string 'Ensure this filename has at most %(max)d characters (it has %(length)d).' and string 'max' for 'max_length',   and return value of the function _ called with an argument string,   'Please either submit a file or check the clear checkbox, not both.' for 'contradiction'.   define the method __init__ with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.","var0 file was submitted var1 encoding type on form. for var2, return value of function var3 called with argument var6 string var13 for var14, return value of function var3 called with argument var15 var6 for var18, return value of function var19 called with 3 arguments: string var21 var6 string var30 and string var31 for var32 var6 and return value of function var3 called with argument string var6 var35 for var38 var6 define method var39 with 3 arguments: self, unpacked list var40 and unpacked dict var41 ","def __init__ ( self , * args , ** kwargs ) : ","def var39 ( self , * var40 , ** var41 ) : "
define the method __init__ with 3 arguments: self unpacked list args and unpacked dictionary kwargs.,define method var0 with 3 arguments: self unpacked list var1 and unpacked dict var2 ,"def __init__ ( self , * args , ** kwargs ) : ","def var0 ( self , * var1 , ** var2 ) : "
"define the method __init__ with 3 arguments: self,unpacked list args and unpacked dictionary kwargs.","define method var0 with 3 arguments: self,unpacked list var1 and unpacked dict var2 ","def __init__ ( self , * args , ** kwargs ) : ","def var0 ( self , * var1 , ** var2 ) : "
define the method __init__ with 2 arguments: self and unpacked list dicts.,define method var0 with 2 arguments: self and unpacked list var1 ,"def __init__ ( self , * dicts ) : ","def var0 ( self , * var1 ) : "
"define the method __init__ with 3 arguments: self, args and kw.",define method var0 with 3 arguments: self var1 and kw.,"def __init__ ( self , args , kw ) : ","def var0 ( self , var1 , kw ) : "
define the method __init__ with arguments: self class instance and argv set to None.,define method var0 with arguments: self class instance and var1 set to var2 ,"def __init__ ( self , argv = None ) : ","def var0 ( self , var1 = var2 ) : "
"define the method __init__ with 3 arguments: self, attrs set to None and check_test set to None.",define method var0 with 3 arguments: self var1 set to var2 and var4 set to var2 ,"def __init__ ( self , attrs = None , check_test = None ) : ","def var0 ( self , var1 = var2 , var4 = var2 ) : "
"define the method __init__ with 3 arguments: self, attrs set to None and choices set to an empty tuple.",define method var0 with 3 arguments: self var1 set to var2 and choices set to empty tuple.,"def __init__ ( self , attrs = None , choices = ( ) ) : ","def var0 ( self , var1 = var2 , choices = ( ) ) : "
"define the method __init__ with 4 arguments: self, attrs set to None, date_format set to None and time_format set to None.",define method var0 with 4 arguments: self var1 set to var2 var5 set to var2 and var7 set to var2 ,"def __init__ ( self , attrs = None , date_format = None , time_format = None ) : ","def var0 ( self , var1 = var2 , var5 = var2 , var7 = var2 ) : "
"define the method render with 4 arguments: self, attrs set to None, date_format set to None and time_format set to None.",define method render with 4 arguments: self var0 set to var1 var4 set to var1 and var6 set to var1 ,"def __init__ ( self , attrs = None , date_format = None , time_format = None ) : ","def __init__ ( self , var0 = var1 , var4 = var1 , var6 = var1 ) : "
"define the method __init__ with 3 arguments: self, attrs set to None and format is None.",define method var0 with 3 arguments: self var1 set to var2 and format is var2 ,"def __init__ ( self , attrs = None , format = None ) : ","def var0 ( self , var1 = var2 , format = var2 ) : "
"define the method __init__ with 3 arguments: self, attrs set to None and render_value set to boolean False.",define method var0 with 3 arguments: self var1 set to var2 and var3 set to boolean var5 ,"def __init__ ( self , attrs = None , render_value = False ) : ","def var0 ( self , var1 = var2 , var3 = var5 ) : "
"define the method __init__ with 5 arguments: self, attrs set to None, years set to None, months set to None and empty_label set to None.",define method var0 with 5 arguments: self var1 set to var2 years set to var2 months set to var2 and var6 set to var2 ,"def __init__ ( self , attrs = None , years = None , months = None , empty_label = None ) : ","def var0 ( self , var1 = var2 , years = var2 , months = var2 , var6 = var2 ) : "
define the method __init__ with arguments self and attrs set to None.,define method var0 with arguments self and var1 set to var2 ,"def __init__ ( self , attrs = None ) : ","def var0 ( self , var1 = var2 ) : "
define the method __init__ with 2 arguments: self and attrs set to None.,define method var0 with 2 arguments: self and var1 set to var2 ,"def __init__ ( self , attrs = None ) : ","def var0 ( self , var1 = var2 ) : "
define the method __init__ with 2 arguments: self and callback.,define method var0 with 2 arguments: self and callback.,"def __init__ ( self , callback ) : ","def var0 ( self , callback ) : "
"define the method __init__ with 4 arguments: self, children set to None, connector set to None and negated set to boolean False.","define method var0 with 4 arguments: self, children set to var1 connector set to var1 and negated set to boolean var3 ","def __init__ ( self , children = None , connector = None , negated = False ) : ","def var0 ( self , children = var1 , connector = var1 , negated = var3 ) : "
"Select a valid choice. %(value)s is not one of the available choices.' for 'invalid_choice'.   define the method __init__ with 9 arguments: self, choices set to an empty tuple, required set to boolean True, widget set to None,","Select valid choice var0 is not one of available choices.var1invalid_choice' var4 define method var5 with 9 arguments: self, choices set to empty tuple, required set to boolean var6 widget set to var7 ","def __init__ ( self , choices = ( ) , required = True , widget = None , label = None , initial = None , help_text = '' , * args , ** kwargs ) : ","def var5 ( self , choices = ( ) , required = var6 , widget = var7 , label = var7 , initial = var7 , help_text = '' , * args , ** kwargs ) : "
"deifne the method __init__ with 5 arguments: self, class_name, old_method_name, new_method_name and deprecation_warning.",var0 method var1 with 5 arguments: self var2 var3 var5 and var7 ,"def __init__ ( self , class_name , old_method_name , new_method_name , deprecation_warning ) : ","def var1 ( self , var2 , var3 , var5 , var7 ) : "
"define the method __init__ with arguments: self, cmd and unpacked dictionary kwargs.",define method var0 with arguments: self var1 and unpacked dict var2 ,"def __init__ ( self , cmd , ** kwargs ) : ","def var0 ( self , var1 , ** var2 ) : "
define the method __init__ with 2 arguments: self and conditions_nodelists.,define method var0 with 2 arguments: self and var1 ,"def __init__ ( self , conditions_nodelists ) : ","def var0 ( self , var1 ) : "
define the method __init__ with 2 arguments: self and config.,define method var0 with 2 arguments: self and var1 ,"def __init__ ( self , config ) : ","def var0 ( self , var1 ) : "
define the method __init__ with arguments self and connection_reset defaulting to boolean False.,define method var0 with arguments self and var1 defaulting to boolean var3 ,"def __init__ ( self , connection_reset = False ) : ","def var0 ( self , var1 = var3 ) : "
"define the method __init__ with arguments self, content and name defaulting to None.","define method var0 with arguments self, content and name defaulting to var1 ","def __init__ ( self , content , name = None ) : ","def var0 ( self , content , name = var1 ) : "
define the method __init__ with 2 arguments: self and content.,define method var0 with 2 arguments: self and content.,"def __init__ ( self , content ) : ","def var0 ( self , content ) : "
"define the method __init__ with 4 arguments: self, content set to an empty list, unpacked list args and unpacked dictionary kwargs.","define method var0 with 4 arguments: self, content set to empty list, unpacked list var1 and unpacked dict var2 ","def __init__ ( self , content = b'' , * args , ** kwargs ) : ","def var0 ( self , content = b'' , * var1 , ** var2 ) : "
"define the method __init__ with 4 arguments: self, content_type set to None, status set to None, reason set to None.",define method var0 with 4 arguments: self var1 set to var3 status set to var3 reason set to var3 ,"def __init__ ( self , content_type = None , status = None , reason = None ) : ","def var0 ( self , var1 = var3 , status = var3 , reason = var3 ) : "
"define the method __init__ with 4 arguments: self, context, unpacked list args and unpacked dictionary kwargs.","define method var0 with 4 arguments: self, context, unpacked list var1 and unpacked dict var2 ","def __init__ ( self , context , * args , ** kwargs ) : ","def var0 ( self , context , * var1 , ** var2 ) : "
"define the method __init__ with arguments self, context, base, sysid and pubid.","define method var0 with arguments self, context, base var1 and var2 ","def __init__ ( self , context , base , sysid , pubid ) : ","def var0 ( self , context , base , var1 , var2 ) : "
"define the initialization method __init__, with self instance of this class, convert_charrefs set to boolean False,",define initialization method var0 with self instance of var1 class var2 set to boolean var4 ,"def __init__ ( self , convert_charrefs = False , ** kwargs ) : ","def var0 ( self , var2 = var4 , ** kwargs ) : "
"define the method __init__ with 4 arguments: self, cyclevars, variable_name set to None and silent set to boolean False.",define method var0 with 4 arguments: self var1 var2 set to var4 and silent set to boolean var5 ,"def __init__ ( self , cyclevars , variable_name = None , silent = False ) : ","def var0 ( self , var1 , var2 = var4 , silent = var5 ) : "
"define the method __init__ with 5 arguments: self, data, encoder set to DjangoJSONEncoder, safe set to boolean True,","define method var0 with 5 arguments: self, data var1 set to var2 safe set to boolean var3 ","def __init__ ( self , data , encoder = DjangoJSONEncoder , safe = True , ** kwargs ) : ","def var0 ( self , data , var1 = var2 , safe = var3 , ** kwargs ) : "
"define the method __init__ with 4 arguments: self, data, func and prefix.","define method var0 with 4 arguments: self, data var1 and prefix.","def __init__ ( self , data , func , prefix ) : ","def var0 ( self , data , var1 , prefix ) : "
"define the method __init__ with 10 arguments: self, data set to None, files set to None, auto_id set to string 'id_%s',","define method var0 with 10 arguments: self, data set to var1 files set to var1 var3 set to string var5,","def __init__ ( self , data = None , files = None , auto_id = 'id_%s' , prefix = None , initial = None , error_class = ErrorList , label_suffix = None , empty_permitted = False , instance = None ) : ","def var0 ( self , data = var1 , files = var1 , var3 = var5 , prefix = var1 , initial = var1 , error_class = ErrorList , label_suffix = var1 , empty_permitted = False , instance = var1 ) : "
"define the method __init__ with 4 arguments: self, data set to None, files set to None, auto_id is an string 'id_%s', prefix is None,","define method var0 with 4 arguments: self, data set to var1 files set to var1 var4 is string var6, prefix is var1 ","def __init__ ( self , data = None , files = None , auto_id = 'id_%s' , prefix = None , initial = None , error_class = ErrorList , label_suffix = None , empty_permitted = False ) : ","def var0 ( self , data = var1 , files = var1 , var4 = var6 , prefix = var1 , initial = var1 , error_class = ErrorList , label_suffix = var1 , empty_permitted = False ) : "
"define the method __init__ with 7 arguments: self, data set to None, files set to None, auto_id set to an string 'id_%s',","define method var0 with 7 arguments: self, data set to var1 files set to var1 var3 set to string var5,","def __init__ ( self , data = None , files = None , auto_id = 'id_%s' , prefix = None , initial = None , error_class = ErrorList ) : ","def var0 ( self , data = var1 , files = var1 , var3 = var5 , prefix = var1 , initial = var1 , error_class = ErrorList ) : "
"define the method __init__ with 7 arguments: self, data set to None, files set to None, auto_id set to string 'id_%s',","define method var0 with 7 arguments: self, data set to var1 files set to var1 var3 set to string var5,","def __init__ ( self , data = None , files = None , auto_id = 'id_%s' , prefix = None , queryset = None , ** kwargs ) : ","def var0 ( self , data = var1 , files = var1 , var3 = var5 , prefix = var1 , queryset = var1 , ** kwargs ) : "
"define the method __init__ with 8 arguments: self, data set to None, files set to None, instance set to None,","define method var0 with 8 arguments: self, data set to var1 files set to var1 instance set to var1 ","def __init__ ( self , data = None , files = None , instance = None , save_as_new = False , prefix = None , queryset = None , ** kwargs ) : ","def var0 ( self , data = var1 , files = var1 , instance = var1 , save_as_new = False , prefix = var1 , queryset = var1 , ** kwargs ) : "
define the method __init__ with 2 arguments: self and data set to None.,define method var0 with 2 arguments: self and data set to var1 ,"def __init__ ( self , data = None ) : ","def var0 ( self , data = var1 ) : "
"define the method __init__ with 6 arguments: self, dict_ set to None, autoescape set to True, current_app set to None,",define method var0 with 6 arguments: self var1 set to var2 var4 set to var5 var6 set to var2 ,"def __init__ ( self , dict_ = None , autoescape = True , current_app = None , use_l10n = None , use_tz = None ) : ","def var0 ( self , var1 = var2 , var4 = var5 , var6 = var2 , use_l10n = var2 , use_tz = var2 ) : "
define the method __init__ with 2 arguments: self and dict_ set to None.,define method var0 with 2 arguments: self and var1 set to var2 ,"def __init__ ( self , dict_ = None ) : ","def var0 ( self , var1 = var2 ) : "
"define the initialization function with self class instance, digits and sign defaulting to '-' as arguments.","define initialization function with self class instance, digits and sign defaulting to var0 as arguments.","def __init__ ( self , digits , sign = '-' ) : ","def __init__ ( self , digits , sign = var0 ) : "
"define the initialization method __init__ with arguments: self class instance, dir and params.",define initialization method var0 with arguments: self class instance var1 and var2 ,"def __init__ ( self , dir , params ) : ","def var0 ( self , var1 , var2 ) : "
"define the method __init__ with 4 arguments: self, dirpath, file_name and locale_dir.",define method var0 with 4 arguments: self var1 var2 and var3 ,"def __init__ ( self , dirpath , file_name , locale_dir ) : ","def var0 ( self , var1 , var2 , var3 ) : "
"define the method __init__ with 5 arguments: self, display_name, loader, name and dirs.","define method var0 with 5 arguments: self var1 loader, name and var2 ","def __init__ ( self , display_name , loader , name , dirs ) : ","def var0 ( self , var1 , loader , name , var2 ) : "
define the method __init__ with 2 arguments self and dt.,define method var0 with 2 arguments self and var1 ,"def __init__ ( self , dt ) : ","def var0 ( self , var1 ) : "
define the initialization method __init__ with self class instance and environ as arguments.,define initialization method var0 with self class instance and environ as arguments.,"def __init__ ( self , environ ) : ","def var0 ( self , environ ) : "
define the __init__method with arguments self and exception.,define var0 with arguments self and exception.,"def __init__ ( self , exception ) : ","def __init__ ( self , exception ) : "
"define the method __init__ with arguments: self, fail_silently set to boolean False and unpacked dictionary kwargs.",define method var0 with arguments: self var1 set to boolean var3 and unpacked dict var4 ,"def __init__ ( self , fail_silently = False , ** kwargs ) : ","def var0 ( self , var1 = var3 , ** var4 ) : "
define the method __init__ with 2 arguments: self and field.,define method var0 with 2 arguments: self and field.,"def __init__ ( self , field ) : ","def var0 ( self , field ) : "
"define the method __init__ with arguments: self, fields set to an empty tuple, unpacked list args and unpacked dictionary kwargs.","define method var0 with arguments: self, fields set to empty tuple, unpacked list var1 and unpacked dict var2 ","def __init__ ( self , fields = ( ) , * args , ** kwargs ) : ","def var0 ( self , fields = ( ) , * var1 , ** var2 ) : "
"Enter a list of values.' for 'invalid' and return value of the function _ called with an argument string,   'Enter a complete value.' for 'incomplete'.   define the method __init__ with arguments self, fields set to an empty ilst, unpacked list args and unpacked dictionary kwargs.","var0 list of values.var1invalidvar3Enter complete value.var1incomplete' var5 define method var7 with arguments self, fields set to empty var8 unpacked list var9 and unpacked dict var10 ","def __init__ ( self , fields = ( ) , * args , ** kwargs ) : ","def var7 ( self , fields = ( ) , * var9 , ** var10 ) : "
"define the method __init__ with 8 arguments: self, file, field_name, name, content_type, size, charset and content_type_extra set to None.","define method var0 with 8 arguments: self, file var1 name var3 size var5 and var6 set to var8 ","def __init__ ( self , file , field_name , name , content_type , size , charset , content_type_extra = None ) : ","def var0 ( self , file , var1 , name , var3 , size , var5 , var3_extra = var8 ) : "
"define the method __init__ with self class instance, file, and name defaulting to None as arguments.","define method var0 with self class instance, file, and name defaulting to var1 as arguments.","def __init__ ( self , file , name = None ) : ","def var0 ( self , file , name = var1 ) : "
define the method __init__ with 2 arguments self and file.,define method var0 with 2 arguments self and file.,"def __init__ ( self , file ) : ","def var0 ( self , file ) : "
"define the method __init__ with 7 arguments: self, file set to None, name set to None, content_type set to None, size set to None, charset set to None and content_type_extra set to None.","define method var0 with 7 arguments: self, file set to var1 name set to var1 var7 set to var1 size set to var1 var9 set to var1 and var10 set to var1 ","def __init__ ( self , file = None , name = None , content_type = None , size = None , charset = None , content_type_extra = None ) : ","def var0 ( self , file = var1 , name = var1 , var7 = var1 , size = var1 , var9 = var1 , var7_extra = var1 ) : "
"define the method __init__ with 3 arguments: self, filepath and parsed.",define method var0 with 3 arguments: self var1 and parsed.,"def __init__ ( self , filepath , parsed ) : ","def var0 ( self , var1 , parsed ) : "
"define the method __init__ with 3 arguments: self, filter_expr and nodelist).",define method var0 with 3 arguments: self var1 and nodelist).,"def __init__ ( self , filter_expr , nodelist ) : ","def var0 ( self , var1 , var2 ) : "
define the method __init__ with 2 arguments: self and filter_expression.,define method var0 with 2 arguments: self and var1 ,"def __init__ ( self , filter_expression ) : ","def var0 ( self , var1 ) : "
"define the method __init__ with arguments self, flo and chunk_size set to integer 64 multiplied by integer 1024.",define method var0 with arguments self var1 and var2 set to integer 64 multiplied by integer 1024.,"def __init__ ( self , flo , chunk_size = 64 * 1024 ) : ","def var0 ( self , var1 , var2 = 64 * 1024 ) : "
"define the method __init__ with 4 arguments: self, form, field and name.","define method var0 with 4 arguments: self, form, field and name.","def __init__ ( self , form , field , name ) : ","def var0 ( self , form , field , name ) : "
define the method __init__ with 2 arguments: self and format_string.,define method var0 with 2 arguments: self and var1 ,"def __init__ ( self , format_string ) : ","def var0 ( self , var1 ) : "
"define the __init__ method with 7 arguments: self, func, args, kwargs, url_name set to None, app_name set to None and namespaces set to None.",define var0 method with 7 arguments: self var1 var2 var3 var4 set to var6 var9 set to var6 and var11 set to var6 ,"def __init__ ( self , func , args , kwargs , url_name = None , app_name = None , namespaces = None ) : ","def var0 ( self , var1 , var2 , var3 , var4 = var6 , var9 = var6 , var11 = var6 ) : "
"define the method __init__ with 3 arguments: self, func and name set to None.",define method var0 with 3 arguments: self var1 and name set to var2 ,"def __init__ ( self , func , name = None ) : ","def var0 ( self , var1 , name = var2 ) : "
define the method __init__ with 2 arguments self and func.,define method var0 with 2 arguments self and var1 ,"def __init__ ( self , func ) : ","def var0 ( self , var1 ) : "
"define initialization method __init__ with 4 arguments: self, host, list of arguments args and dictionary of arguments kwargs.","define initialization method var0 with 4 arguments: self, host, list of arguments var1 and dict of arguments var2 ","def __init__ ( self , host , * args , ** kwargs ) : ","def var0 ( self , host , * var1 , ** var2 ) : "
"define the method __init__ with arguments: self, host set to None, port set to None, username set to None, password set to None,","define method var0 with arguments: self, host set to var1 port set to var1 var5 set to var1 password set to var1 ","def __init__ ( self , host = None , port = None , username = None , password = None , use_tls = None , fail_silently = False , use_ssl = None , timeout = None , ** kwargs ) : ","def var0 ( self , host = var1 , port = var1 , var5 = var1 , password = var1 , use_tls = var1 , fail_silently = False , use_ssl = var1 , timeout = var1 , ** kwargs ) : "
"define the method __init__ with 3 arguments: self, include_html set to boolean False and email_backend set to None.",define method var0 with 3 arguments: self var1 set to boolean var3 and var4 set to var6 ,"def __init__ ( self , include_html = False , email_backend = None ) : ","def var0 ( self , var1 = var3 , var4 = var6 ) : "
"define the method __init__ with 3 arguments: self, initlist set to None and error_class set to None.",define method var0 with 3 arguments: self var1 set to var2 and var4 set to var2 ,"def __init__ ( self , initlist = None , error_class = None ) : ","def var0 ( self , var1 = var2 , var4 = var2 ) : "
"for 'invalid_date' and return value of the function _ called with an string 'Enter a valid time.', for 'invalid_time.   define the method __init__ with 3 arguments: self, input_date_formats set to None, input_time_formats set to None,","for var0 and return value of function _ called with string var1, for 'invalid_time var5 define method var6 with 3 arguments: self var7 set to var9 var11 set to var9 ","def __init__ ( self , input_date_formats = None , input_time_formats = None , * args , ** kwargs ) : ","def var6 ( self , var7 = var9 , var11 = var9 , * args , ** kwargs ) : "
"define the method __init__ with arguments self, input_formats set to None, unpacked list args and unpacked dictionary kwargs.",define method var0 with arguments self var1 set to var3 unpacked list var4 and unpacked dict var5 ,"def __init__ ( self , input_formats = None , * args , ** kwargs ) : ","def var0 ( self , var1 = var3 , * var4 , ** var5 ) : "
define the method __init__ with 2 arguments: self and iterable set to None.,define method var0 with 2 arguments: self and var1 set to var2 ,"def __init__ ( self , iterable = None ) : ","def var0 ( self , var1 = var2 ) : "
"define the method __init__ with 4 arguments: self, key set to None, sep set to ':' and salt set to None.","define method var0 with 4 arguments: self, key set to var1 sep set to var3 and salt set to var1 ","def __init__ ( self , key = None , sep = ':' , salt = None ) : ","def var0 ( self , key = var1 , sep = var3 , salt = var1 ) : "
define the method __init__ with 2 arguments: self and key_to_list_mapping set to an empty tuple.,define method var0 with 2 arguments: self and var1 set to empty tuple.,"def __init__ ( self , key_to_list_mapping = ( ) ) : ","def var0 ( self , var1 = ( ) ) : "
"define the method __init__ with 3 arguments: self, language and deactivate set to boolean False.","define method var0 with 3 arguments: self, language and deactivate set to boolean var1 ","def __init__ ( self , language , deactivate = False ) : ","def var0 ( self , language , deactivate = var1 ) : "
define the method __init__ with 2 arguments: self and language.,define method var0 with 2 arguments: self and language.,"def __init__ ( self , language ) : ","def var0 ( self , language ) : "
"define initialization method __init__ with self class instance, level, msg, hint defaulting to None, obj defaulting to None and if defaulting to None as arguments.","define initialization method var0 with self class instance, level, msg, hint defaulting to var1 var4 defaulting to var1 and if defaulting to var1 as arguments.","def __init__ ( self , level , msg , hint = None , obj = None , id = None ) : ","def var0 ( self , level , msg , hint = var1 , var4 = var1 , id = var1 ) : "
define the method __init__ with 2 arguments: self and lexer.,define method var0 with 2 arguments: self and var1 ,"def __init__ ( self , lexer ) : ","def var0 ( self , var1 ) : "
define the method __init__ with self and limit_value as arguments.,define method var0 with self and var1 as arguments.,"def __init__ ( self , limit_value ) : ","def var0 ( self , var1 ) : "
define the method __init__ with 2 arguments: self and loaders.,define method var0 with 2 arguments: self and loaders.,"def __init__ ( self , loaders ) : ","def var0 ( self , loaders ) : "
"define the method __init__ with 5 arguments: self, location set to None, base_url set to None, file_permissions_mode set to None,","define method var0 with 5 arguments: self, location set to var1 var4 set to var1 var6 set to var1 ","def __init__ ( self , location = None , base_url = None , file_permissions_mode = None , directory_permissions_mode = None ) : ","def var0 ( self , location = var1 , var4 = var1 , var6 = var1 , directory_permissions_mode = var1 ) : "
"define the method __init__ with 6 arguments: self, loopvars, sequence, is_reversed, nodelist_loop and nodelist_empty set to None.",define method var0 with 6 arguments: self var1 sequence var2 var4 and var6 set to var8 ,"def __init__ ( self , loopvars , sequence , is_reversed , nodelist_loop , nodelist_empty = None ) : ","def var0 ( self , var1 , sequence , var2 , var4 , var6 = var8 ) : "
"define the method __init__ with 5 arguments: self, max_length set to None, min_length set to None, unpacked list args,",define method var0 with 5 arguments: self var1 set to var3 var5 set to var3 unpacked list var7 ,"def __init__ ( self , max_length = None , min_length = None , * args , ** kwargs ) : ","def var0 ( self , var1 = var3 , var5 = var3 , * var7 , ** kwargs ) : "
"Enter a whole number.' for 'invalid'.   define the method __init__ with 5 arguments: self, max_value set to None, min_value set to None, unpacked list args and unpacked dictionary kwargs.",Enter whole number.var0invalid' var1 define method var2 with 5 arguments: self var3 set to var5 var7 set to var5 unpacked list var9 and unpacked dict var10 ,"def __init__ ( self , max_value = None , min_value = None , * args , ** kwargs ) : ","def var2 ( self , var3 = var5 , var7 = var5 , * var9 , ** var10 ) : "
"Enter a number.' for 'invalid', return value of the function ungettext_lazy called with 3 string arguments:   'Ensure that there are no more than %(max)s digit in total.', 'Ensure that there are no more than %(max)s digits in total.',   and 'max' for 'max_digits', return value of the function ungettext_lazy called with 3 string arguments:   'Ensure that there are no more than %(max)s decimal place.', 'Ensure that there are no more than %(max)s decimal places.' and 'max',   for 'max_decimal_places' and return value of the function ungettext_lazy called with 3 string arguments:   'Ensure that there are no more than %(max)s digit before the decimal point.',   'Ensure that there are no more than %(max)s digits before the decimal point.' and 'max' for 'max_whole_digits'.   define the method __init__ with 7 arguments: self, max_value set to None, min_value set to None, max_digits set to None,",Enter number.var0invalidvar3Ensure var24 there are no more var30 var36 digit in total.var42Ensure var24 there are no more var30 var36 digits in total.var44maxvar0max_digitsvar3Ensure var24 there are no more var30 var36 decimal place.var42Ensure var24 there are no more var30 var36 decimal places.var49maxvar51max_decimal_placesvar54Ensure var24 there are no more var30 var36 digit before decimal point.var55Ensure var24 there are no more var30 var36 digits before decimal point.var49maxvar0max_whole_digits' var11 define method var58 with 7 arguments: self var59 set to var61 var64 set to var61 var45 set to var61 ,"def __init__ ( self , max_value = None , min_value = None , max_digits = None , decimal_places = None , * args , ** kwargs ) : ","def var58 ( self , var59 = var61 , var64 = var61 , var45 = var61 , decimal_places = var61 , * args , ** kwargs ) : "
"define the method __init__ with 3 arguments: self, media set to None and unpacked dictionary kwargs.","define method var0 with 3 arguments: self, media set to var1 and unpacked dict var2 ","def __init__ ( self , media = None , ** kwargs ) : ","def var0 ( self , media = var1 , ** var2 ) : "
"define the method __init__ with 4 arguments: self, message, code set to None and params set to None.","define method var0 with 4 arguments: self, message, code set to var1 and var3 set to var1 ","def __init__ ( self , message , code = None , params = None ) : ","def var0 ( self , message , code = var1 , var3 = var1 ) : "
"define the __init__ method with 4 arguments: self, message set to None, code set to None and whitelist set to None.","define var0 method with 4 arguments: self, message set to var1 code set to var1 and var4 set to var1 ","def __init__ ( self , message = None , code = None , whitelist = None ) : ","def var0 ( self , message = var1 , code = var1 , var4 = var1 ) : "
"define the method __init__ wiht 5 arguments: self, META, input_data, upload_handlers and encoding set to None.",define method var0 var1 5 arguments: self var2 var3 var4 and encoding set to var6 ,"def __init__ ( self , META , input_data , upload_handlers , encoding = None ) : ","def var0 ( self , var2 , var3 , var4 , encoding = var6 ) : "
"define method __init__ with self class instance, mode string 'w+b', bufsize set to integer -1, suffix and prefix set to empty strig,","define method var0 with self class instance, mode string var1 var2 set to integer var3 suffix and prefix set to empty var4 ","def __init__ ( self , mode = 'w+b' , bufsize = - 1 , suffix = '' , prefix = '' , dir = None ) : ","def var0 ( self , mode = var1 , var2 = - 1 , suffix = '' , prefix = '' , dir = None ) : "
"define the method __init__ with 3 arguments: self, msg and params set to an empty tuple.","define method var0 with 3 arguments: self, msg and var1 set to empty tuple.","def __init__ ( self , msg , params = ( ) ) : ","def var0 ( self , msg , var1 = ( ) ) : "
"define the method __init__ with 4 arguments: self, name, content and content_type defaulting to a string 'text/plain'.","define method var0 with 4 arguments: self, name, content and var1 defaulting to string var3.","def __init__ ( self , name , content , content_type = 'text/plain' ) : ","def var0 ( self , name , content , var1 = var3 ) : "
"define the __init__ method with 6 arguments: self, name, content_type, size, charset and content_type_extra set to None.","define var0 method with 6 arguments: self, name var1 size var3 and var4 set to var6 ","def __init__ ( self , name , content_type , size , charset , content_type_extra = None ) : ","def var0 ( self , name , var1 , size , var3 , var1_extra = var6 ) : "
"define the method __init__ with 4 arguments: self, name, nodelist, parent set to None.","define method var0 with 4 arguments: self, name var1 parent set to var2 ","def __init__ ( self , name , nodelist , parent = None ) : ","def var0 ( self , name , var1 , parent = var2 ) : "
"define the method __init__ with 4 arguments: self, name, old and new set to None.","define method var0 with 4 arguments: self, name, old and new set to var1 ","def __init__ ( self , name , old , new = None ) : ","def var0 ( self , name , old , new = var1 ) : "
"define the method __init__ with 6 arguments: self, name, old_mod, new_mod, old_attr set to None, new_attr set to None.","define method var0 with 6 arguments: self, name var1 var3 var5 set to var7 var9 set to var7 ","def __init__ ( self , name , old_mod , new_mod , old_attr = None , new_attr = None ) : ","def var0 ( self , name , var1 , var3 , var5 = var7 , var9 = var7 ) : "
"define the initialization method __init__ with 3 arguments: self, name and params.","define initialization method var0 with 3 arguments: self, name and var1 ","def __init__ ( self , name , params ) : ","def var0 ( self , name , var1 ) : "
"define the method __init__ with 4 arguments: self, name, regex and next set to None.","define method var0 with 4 arguments: self, name var1 and next set to var2 ","def __init__ ( self , name , regex , next = None ) : ","def var0 ( self , name , var1 , next = var2 ) : "
"define the method __init__ with arguments self, name, sysid and pubid.","define method var0 with arguments self, name var1 and var2 ","def __init__ ( self , name , sysid , pubid ) : ","def var0 ( self , name , var1 , var2 ) : "
"define the method __init__ with 6 arguments: self, name, value, attrs, choice and index.","define method var0 with 6 arguments: self, name, value var1 choice and index.","def __init__ ( self , name , value , attrs , choice , index ) : ","def var0 ( self , name , value , var1 , choice , index ) : "
"define the method __init__ with 5 arguments: self, name, value, attrs and choices.","define method var0 with 5 arguments: self, name, value var1 and choices.","def __init__ ( self , name , value , attrs , choices ) : ","def var0 ( self , name , value , var1 , choices ) : "
"define the method __init__ with arguments self, name, value, base, sysid, pubid and notation_name.","define method var0 with arguments self, name, value, base var1 var2 and var3 ","def __init__ ( self , name , value , base , sysid , pubid , notation_name ) : ","def var0 ( self , name , value , base , var1 , var2 , var3 ) : "
define the method __init__ with 2 arguments: self and name.,define method var0 with 2 arguments: self and name.,"def __init__ ( self , name ) : ","def var0 ( self , name ) : "
"define the method __init__ with 4 arguments: self, nodelist, parent_name and template_dirs set to None.",define method var0 with 4 arguments: self var1 var2 and var4 set to var6 ,"def __init__ ( self , nodelist , parent_name , template_dirs = None ) : ","def var0 ( self , var1 , var2 , var4 = var6 ) : "
define the method __init__ with 2 arguments: self and nodelist.,define method var0 with 2 arguments: self and var1 ,"def __init__ ( self , nodelist ) : ","def var0 ( self , var1 ) : "
"define the method __init__ with 4 arguments: self, nodelist_true, nodelist_false and unpacked list varlist.",define method var0 with 4 arguments: self var1 var2 and unpacked list var4 ,"def __init__ ( self , nodelist_true , nodelist_false , * varlist ) : ","def var0 ( self , var1 , var2 , * var4 ) : "
"define the private method __init__, with self instance of this class, obj and list of arbitrary length *args as arguments.",define private method var0 with self instance of var1 class var2 and list of arbitrary length var3 as arguments.,"def __init__ ( self , obj , * args ) : ","def var0 ( self , var2 , * var3 ) : "
"define the method __init__, with 3 arguments: self, m2m and data set None.","define method var0 with 3 arguments: self, m2m and data set var1 ","def __init__ ( self , obj , m2m_data = None ) : ","def var0 ( self , obj , m2m_data = var1 ) : "
define the method __init__ with 2 arguments: self and obj.,define method var0 with 2 arguments: self and var1 ,"def __init__ ( self , obj ) : ","def var0 ( self , var1 ) : "
"define the method __init__ with 4 arguments: self, object_list, number, and paginator.","define method var0 with 4 arguments: self var1 number, and var2 ","def __init__ ( self , object_list , number , paginator ) : ","def var0 ( self , var1 , number , var2 ) : "
"def the method __init__ with 5 arguments: self, object_list, per_page, orphans set to integer 0 and allow_empty_first_page set to boolean True.",def method var0 with 5 arguments: self var1 var3 orphans set to integer 0 and var5 set to boolean var7 ,"def __init__ ( self , object_list , per_page , orphans = 0 , allow_empty_first_page = True ) : ","def var0 ( self , var1 , var3 , orphans = 0 , var5 = var7 ) : "
define the method __init__ with 2 arguments: self and offset.,define method var0 with 2 arguments: self and offset.,"def __init__ ( self , offset ) : ","def var0 ( self , offset ) : "
"define the method __init__ with 3 arguments: self, offset set to None, name set to None.","define method var0 with 3 arguments: self, offset set to var1 name set to var1 ","def __init__ ( self , offset = None , name = None ) : ","def var0 ( self , offset = var1 , name = var1 ) : "
define the method __init__ with arguments: self and options set to None.,define method var0 with arguments: self and options set to var1 ,"def __init__ ( self , options = None ) : ","def var0 ( self , options = var1 ) : "
"define the method __init__ with 4 arguments: self, out, style, func set to None and endings set to newline character.","define method var0 with 4 arguments: self, out, style var1 set to var2 and endings set to var3 character.","def __init__ ( self , out , style_func = None , ending = '\n' ) : ","def var0 ( self , out , style_var1 = var2 , ending = '\n' ) : "
define the initialization function __init__ with self class instance and params as arguments.,define initialization function var0 with self class instance and var1 as arguments.,"def __init__ ( self , params ) : ","def var0 ( self , var1 ) : "
"string 'The inline foreign key did not match the parent instance primary key.' for 'invalid_choice'.   define the method __init__ with 4 arguments: self, parent_instance, unpacked list args and unpacked dictionary kwargs.",string var0 for var1 var4 define method var5 with 4 arguments: self var6 unpacked list var8 and unpacked dict var9 ,"def __init__ ( self , parent_instance , * args , ** kwargs ) : ","def var5 ( self , var6 , * var8 , ** var9 ) : "
"define the method __init__ with 6 arguments self, parent_widget, name, value, attrs and choices.","define method var0 with 6 arguments self var1 name, value var2 and choices.","def __init__ ( self , parent_widget , name , value , attrs , choices ) : ","def var0 ( self , var1 , name , value , var2 , choices ) : "
"define the method __init__ with 4 arguments: self, parser, unpacked list args and unpacked dictionary kwargs.","define method var0 with 4 arguments: self, parser, unpacked list var1 and unpacked dict var2 ","def __init__ ( self , parser , * args , ** kwargs ) : ","def var0 ( self , parser , * var1 , ** var2 ) : "
"define the method __init__ with 13 arguments: self, path, match set to None, recursive set to boolean False,","define method var0 with 13 arguments: self, path, match set to var1 recursive set to boolean var2 ","def __init__ ( self , path , match = None , recursive = False , allow_files = True , allow_folders = False , required = True , widget = None , label = None , initial = None , help_text = '' , * args , ** kwargs ) : ","def var0 ( self , path , match = var1 , recursive = var2 , allow_files = True , allow_folders = var2 , required = True , widget = var1 , label = var1 , initial = var1 , help_text = '' , * args , ** kwargs ) : "
"define the method __init__ with 4 arguments: self, permitted_methods, unpacked list args and unpacked dictionary kwargs.",define method var0 with 4 arguments: self var1 unpacked list var2 and unpacked dict var3 ,"def __init__ ( self , permitted_methods , * args , ** kwargs ) : ","def var0 ( self , var1 , * var2 , ** var3 ) : "
"define the method __init__ with 3 arguments: self, producer and length set to None.","define method var0 with 3 arguments: self, producer and length set to var1 ","def __init__ ( self , producer , length = None ) : ","def var0 ( self , producer , length = var1 ) : "
"define the method __init__ with 5 arguments: self, protocol set to string 'both', unpack_ipv4 set to boolean False,","define method var0 with 5 arguments: self, protocol set to string var1 var2 set to boolean var4 ","def __init__ ( self , protocol = 'both' , unpack_ipv4 = False , * args , ** kwargs ) : ","def var0 ( self , protocol = var1 , var2 = var4 , * args , ** kwargs ) : "
"define the method __init__ with 4 arguments: self, query_string is None, mutable is boolean False and encoding set to None.",define method var0 with 4 arguments: self var1 is var3 mutable is boolean var5 and encoding set to var3 ,"def __init__ ( self , query_string = None , mutable = False , encoding = None ) : ","def var0 ( self , var1 = var3 , mutable = var5 , encoding = var3 ) : "
"string 'Enter a list of values.' for 'list', return value of the function _ called with an argument,   string 'Select a valid choice. %(value)s is not one of the available choices.' for 'invalid_choice',   and return value of the function _ called with an argument string '""%(pk)s"" is not a valid value for a primary key.' for 'invalid_pk_value'.   define the method __init__ with 10 arguments: self, queryset, cache_choices set to None, required set to boolean True,","string var0 for var1, return value of function var2 called with argument var4 string var7 for var10 var4 and return value of function var2 called with argument string var13 for var15 var4 define method var18 with 10 arguments: self var19 var20 set to var22 required set to boolean var23 ","def __init__ ( self , queryset , cache_choices = None , required = True , widget = None , label = None , initial = None , help_text = '' , * args , ** kwargs ) : ","def var18 ( self , var19 , var20 = var22 , required = var23 , widget = var22 , label = var22 , initial = var22 , help_text = '' , * args , ** kwargs ) : "
"string 'Select a valid choice. That choice is not one of the available choices.' for 'invalid_choice'.   define the method __init__ with 13 arguments: self, queryset, empty_label set to a string  ""---------"", cache_choices set to None,",string var0 for var1 var4 define method var5 with 13 arguments: self var6 var7 set to string var9 var10 set to var12 ,"def __init__ ( self , queryset , empty_label = '---------' , cache_choices = None , required = True , widget = None , label = None , initial = None , help_text = '' , to_field_name = None , limit_choices_to = None , * args , ** kwargs ) : ","def var5 ( self , var6 , var7 = '---------' , var10 = var12 , required = True , widget = var12 , label = var12 , initial = var12 , help_text = '' , to_field_name = var12 , limit_choices_to = var12 , * args , ** kwargs ) : "
"define the method __init__ with 4 arguments: self, redirect_to, unpacked list args and unpacked dictionary kwargs.",define method var0 with 4 arguments: self var1 unpacked list var2 and unpacked dict var3 ,"def __init__ ( self , redirect_to , * args , ** kwargs ) : ","def var0 ( self , var1 , * var2 , ** var3 ) : "
"define the method __init__ with 5 arguments: self, regex, callback, default_args set to None and name set to None.",define method var0 with 5 arguments: self var1 callback var2 set to var4 and name set to var4 ,"def __init__ ( self , regex , callback , default_args = None , name = None ) : ","def var0 ( self , var1 , callback , var2 = var4 , name = var4 ) : "
"define the method __init__ with 7 arguments: self, regex, max_length set to None, min_length set to None, error_message set to None,",define method var0 with 7 arguments: self var1 var2 set to var4 var7 set to var4 var9 set to var4 ,"def __init__ ( self , regex , max_length = None , min_length = None , error_message = None , * args , ** kwargs ) : ","def var0 ( self , var1 , var2 = var4 , var7 = var4 , var9 = var4 , * args , ** kwargs ) : "
"define the method __init__ with 6 arguments: self, regex, urlconf_name, default_kwargs set to None, app_name set to None and namespace set to None.",define method var0 with 6 arguments: self var1 var2 var4 set to var6 var9 set to var6 and var11 set to var6 ,"def __init__ ( self , regex , urlconf_name , default_kwargs = None , app_name = None , namespace = None ) : ","def var0 ( self , var1 , var2 , var4 = var6 , var9 = var6 , var11 = var6 ) : "
define the method __init__ with arguments self and regex.,define method var0 with arguments self and var1 ,"def __init__ ( self , regex ) : ","def var0 ( self , var1 ) : "
"define the method __init__ with 6 arguments: self, regex set to None, message set to None, code set to None,",define method var0 with 6 arguments: self var1 set to var2 message set to var2 code set to var2 ,"def __init__ ( self , regex = None , message = None , code = None , inverse_match = None , flags = None ) : ","def var0 ( self , var1 = var2 , message = var2 , code = var2 , inverse_match = var2 , flags = var2 ) : "
"define the method __init__ with 7 arguments: self, request, dict_ set to None, processors set to None, current_app set to None,","define method var0 with 7 arguments: self, request var1 set to var2 processors set to var2 var5 set to var2 ","def __init__ ( self , request , dict_ = None , processors = None , current_app = None , use_l10n = None , use_tz = None ) : ","def var0 ( self , request , var1 = var2 , processors = var2 , var5 = var2 , use_l10n = var2 , use_tz = var2 ) : "
"define the method __init__ with 7 arguments: self, request, template, context set to None, content_type set to None,","define method var0 with 7 arguments: self, request, template, context set to var1 var3 set to var1 ","def __init__ ( self , request , template , context = None , content_type = None , status = None , current_app = None ) : ","def var0 ( self , request , template , context = var1 , var3 = var1 , status = var1 , current_app = var1 ) : "
define the method __init__ with arguments self and request defaulting to None.,define method var0 with arguments self and request defaulting to var1 ,"def __init__ ( self , request = None ) : ","def var0 ( self , request = var1 ) : "
"define the function __init__ with 11 arguments: self, required set to boolean True, widget set to None, label set to None,","define function var0 with 11 arguments: self, required set to boolean var1 widget set to var2 label set to var2 ","def __init__ ( self , required = True , widget = None , label = None , initial = None , help_text = '' , error_messages = None , show_hidden_initial = False , validators = [ ] , localize = False , label_suffix = None ) : ","def var0 ( self , required = var1 , widget = var2 , label = var2 , initial = var2 , help_text = '' , error_messages = var2 , show_hidden_initial = False , validators = [ ] , localize = False , label_suffix = var2 ) : "
define the method __init__ with 2 arguments: self and s.,define method var0 with 2 arguments: self and var1,"def __init__ ( self , s ) : ","def var0 ( self , s ) : "
"define the method __init__ with 3 arguments: self, schemes set to None and unpacked dictionary kwargs.","define method var0 with 3 arguments: self, schemes set to var1 and unpacked dict var2 ","def __init__ ( self , schemes = None , ** kwargs ) : ","def var0 ( self , schemes = var1 , ** var2 ) : "
"define the method __init__ with, self, server, params, library, value_not_found_exception as arguments.","define method var0 with, self, server var1 library var2 as arguments.","def __init__ ( self , server , params , library , value_not_found_exception ) : ","def var0 ( self , server , var1 , library , var2 ) : "
"define the method __init__ with argument self, server and params.","define method var0 with argument self, server and var1 ","def __init__ ( self , server , params ) : ","def var0 ( self , server , var1 ) : "
"define the method __init__ with self, server and params as arguments.","define method var0 with self, server and var1 as arguments.","def __init__ ( self , server , params ) : ","def var0 ( self , server , var1 ) : "
"define the method __init__ with 3 arguments: self, setting and nodelist.","define method var0 with 3 arguments: self, setting and var1 ","def __init__ ( self , setting , nodelist ) : ","def var0 ( self , setting , var1 ) : "
define the method __init__ with 2 arguments: self and source.,define method var0 with 2 arguments: self and source.,"def __init__ ( self , source ) : ","def var0 ( self , source ) : "
"define the method __init__ with 3 arguments self, states and first.","define method var0 with 3 arguments self, states and first.","def __init__ ( self , states , first ) : ","def var0 ( self , states , first ) : "
"define the method __init__ with arguments self, stream and boundary.","define method var0 with arguments self, stream and boundary.","def __init__ ( self , stream , boundary ) : ","def var0 ( self , stream , boundary ) : "
"def initialization method __init__ with self class instance, stream, limit and buf_size set to integer value of the product 64*1024*1024.","def initialization method var0 with self class instance, stream, limit and var1 set to integer value of product 64*1024*1024.","def __init__ ( self , stream , limit , buf_size = 64 * 1024 * 1024 ) : ","def var0 ( self , stream , limit , var1 = 64 * 1024 * 1024 ) : "
"define the method __init__, with 3 arguments: self, stream_or_string and unpacked dictionary options.",define method var0 with 3 arguments: self var1 and unpacked dict options.,"def __init__ ( self , stream_or_string , ** options ) : ","def var0 ( self , var1 , ** options ) : "
"define the method __init__ with 3 arguments: self, stream_or_string and unpacked dictionary options.",define method var0 with 3 arguments: self var1 and unpacked dict options.,"def __init__ ( self , stream_or_string , ** options ) : ","def var0 ( self , var1 , ** options ) : "
"define the method __init__ with 4 arguments: self, result of the function streaming_content=(), unpacked list args,","define method var0 with 4 arguments: self, result of function streaming_content=(), unpacked list var3 ","def __init__ ( self , streaming_content = ( ) , * args , ** kwargs ) : ","def var0 ( self , var1 = ( ) , * var3 , ** kwargs ) : "
define the function next_space_index with 2 arguments: self and subject.,define function var0 with 2 arguments: self and subject.,"def __init__ ( self , subject ) : ","def __init__ ( self , subject ) : "
"define the method __init__ with 11 arguments: self, subject set to an empty string, body set to an empty string,","define method var0 with 11 arguments: self, subject set to empty string, body set to empty string,","def __init__ ( self , subject = '' , body = '' , from_email = None , to = None , bcc = None , connection = None , attachments = None , headers = None , alternatives = None , cc = None ) : ","def var0 ( self , subject = '' , body = '' , from_email = None , to = None , bcc = None , connection = None , attachments = None , headers = None , alternatives = None , cc = None ) : "
"define the method __init__ with 10 arguments: self, subject set to an empty string, body set to an empty string,","define method var0 with 10 arguments: self, subject set to empty string, body set to empty string,","def __init__ ( self , subject = '' , body = '' , from_email = None , to = None , bcc = None , connection = None , attachments = None , headers = None , cc = None ) : ","def var0 ( self , subject = '' , body = '' , from_email = None , to = None , bcc = None , connection = None , attachments = None , headers = None , cc = None ) : "
"define the initialization method __init__ with self, table and params as arguments.","define initialization method var0 with self, table and var1 as arguments.","def __init__ ( self , table , params ) : ","def var0 ( self , table , var1 ) : "
define the initialization method __init__ with self class instance and table as arguments.,define initialization method var0 with self class instance and table as arguments.,"def __init__ ( self , table ) : ","def var0 ( self , table ) : "
"VARIABLE_TAG_START for 'openvariable', VARIABLE_TAG_END for 'closevariable', SINGLE_BRACE_START for 'openbrace',   SINGLE_BRACE_END 'closebrace', COMMENT_TAG_START 'opencomment' and COMMENT_TAG_END for 'closecomment'.   define the method __init__ with 2 arguments: self and tagtype.",var0 for var1 var2 for var4 var6 for var8 var12 var14 var16 var18 and var20 for var22 var10 define method var24 with 2 arguments: self and var25 ,"def __init__ ( self , tagtype ) : ","def var24 ( self , var25 ) : "
"define the function __init__ with 5 arguments: self, takes_context, args, kwargs and target_var.",define function var0 with 5 arguments: self var1 var2 var3 and var4 ,"def __init__ ( self , takes_context , args , kwargs , target_var ) : ","def var0 ( self , var1 , var2 , var3 , var4 ) : "
"define the method __init__ with 4 arguments: self, takes_context, args and kwargs.",define method var0 with 4 arguments: self var1 var2 and var3 ,"def __init__ ( self , takes_context , args , kwargs ) : ","def var0 ( self , var1 , var2 , var3 ) : "
"define the method __init__ with 4 arguments: self, target, expression and var_name.","define method var0 with 4 arguments: self, target, expression and var1 ","def __init__ ( self , target , expression , var_name ) : ","def var0 ( self , target , expression , var1 ) : "
"define the method __init__ with 4 arguments: self, template, unpacked list args and unpacked dictionary kwargs.","define method var0 with 4 arguments: self, template, unpacked list var1 and unpacked dict var2 ","def __init__ ( self , template , * args , ** kwargs ) : ","def var0 ( self , template , * var1 , ** var2 ) : "
"define the method __init__ with 5 arguments: self, template, context set to None, content_type set to None and status set to None.","define method var0 with 5 arguments: self, template, context set to var1 var4 set to var1 and status set to var1 ","def __init__ ( self , template , context = None , content_type = None , status = None ) : ","def var0 ( self , template , context = var1 , var4 = var1 , status = var1 ) : "
"define the method __init__ with 3 arguments: self, template_string and origin.",define method var0 with 3 arguments: self var1 and origin.,"def __init__ ( self , template_string , origin ) : ","def var0 ( self , var1 , origin ) : "
"define the method __init__ with 4 arguments: self, template_string, origin set to None and name set to None.",define method var0 with 4 arguments: self var1 origin set to var3 and name set to var3 ,"def __init__ ( self , template_string , origin = None , name = None ) : ","def var0 ( self , var1 , origin = var3 , name = var3 ) : "
"define the __init__ method with arguments: self, text, subtype and charset.","define var0 method with arguments: self, text var1 and var2 ","def __init__ ( self , text , subtype , charset ) : ","def var0 ( self , text , var1 , var2 ) : "
define the method __init__ with 2 arguments: self and text.,define method var0 with 2 arguments: self and text.,"def __init__ ( self , text ) : ","def var0 ( self , text ) : "
define the method __init__ with 2 arguments: self and timezone.,define method var0 with 2 arguments: self and var1 ,"def __init__ ( self , timezone ) : ","def var0 ( self , var1 ) : "
"define the method __init__ with 15 elements: self, title, link, description, language set to None, author_email set to None,","define method var0 with 15 elements: self, title, link, description, language set to var1 var3 set to var1 ","def __init__ ( self , title , link , description , language = None , author_email = None , author_name = None , author_link = None , subtitle = None , categories = None , feed_url = None , feed_copyright = None , feed_guid = None , ttl = None , ** kwargs ) : ","def var0 ( self , title , link , description , language = var1 , var3 = var1 , author_name = var1 , author_link = var1 , subtitle = var1 , categories = var1 , feed_url = var1 , feed_copyright = var1 , feed_guid = var1 , ttl = var1 , ** kwargs ) : "
"define the function __init__ with 3 arguments: self, token and parser.","define function var0 with 3 arguments: self, token and parser.","def __init__ ( self , token , parser ) : ","def var0 ( self , token , parser ) : "
"define the method __init__ with 3 arguments: self, token_type and contents.",define method var0 with 3 arguments: self var1 and contents.,"def __init__ ( self , token_type , contents ) : ","def var0 ( self , var1 , contents ) : "
define the method __init__ with 2 arguments: self and token.,define method var0 with 2 arguments: self and token.,"def __init__ ( self , tokens ) : ","def var0 ( self , tokens ) : "
define the method __init__ with 2 arguments: self and tokens.,define method var0 with 2 arguments: self and tokens.,"def __init__ ( self , tokens ) : ","def var0 ( self , tokens ) : "
"define the method __init__ with 3 arguments: self, tup and hash set to hash.","define method var0 with 3 arguments: self, tup and hash set to hash.","def __init__ ( self , tup , hash = hash ) : ","def var0 ( self , tup , hash = hash ) : "
"define the method __init__ with 4 arguments: self, url, length and mime_type.","define method var0 with 4 arguments: self, url, length and var1 ","def __init__ ( self , url , length , mime_type ) : ","def var0 ( self , url , length , var1 ) : "
"define the __init__ method with 5 arguments: self, urlconf_name, default_kwargs set to None, app_name set to None and  namespace set to None.",define var1 method with 5 arguments: self var2 var4 set to var6 var9 set to var6 and var11 set to var6var0,"def __init__ ( self , urlconf_name , default_kwargs = None , app_name = None , namespace = None ) : ","def var1 ( self , var0var2 , var0var4 = var6 , var0var9 = var6 , var0var11 = var6 ) : "
"define the method __init__ with 5 arguments: self, val_expr, max_expr, max_width and asvar set to None.",define method var0 with 5 arguments: self var1 var3 var5 and var7 set to var8 ,"def __init__ ( self , val_expr , max_expr , max_width , asvar = None ) : ","def var0 ( self , var1 , var3 , var5 , var7 = var8 ) : "
"define the method __init__ with 3 arguments: self, value and text.","define method var0 with 3 arguments: self, value and text.","def __init__ ( self , value , text ) : ","def var0 ( self , value , text ) : "
define the method __init__ with 2 arguments: self and value.,define method var0 with 2 arguments: self and value.,"def __init__ ( self , value ) : ","def var0 ( self , value ) : "
"define the method __init__ with 5 arguments: self, var, name, nodelist and extra_context set to None.","define method var0 with 5 arguments: self, var, name var1 and var2 set to var4 ","def __init__ ( self , var , name , nodelist , extra_context = None ) : ","def var0 ( self , var , name , var1 , var2 = var4 ) : "
define the method __init__ with 2 arguments self and var.,define method var0 with 2 arguments self and var.,"def __init__ ( self , var ) : ","def var0 ( self , var ) : "
"define the method __init__ with 6 arguments: (self, var1, var2, nodelist_true, nodelist_false and negate.",define method var0 with 6 arguments: (self var1 var2 var3 var4 and negate.,"def __init__ ( self , var1 , var2 , nodelist_true , nodelist_false , negate ) : ","def var0 ( self , var1 , var2 , var3 , var4 , negate ) : "
define the method __init__ with 2 arguments: self and variables.,define method var0 with 2 arguments: self and variables.,"def __init__ ( self , variables ) : ","def var0 ( self , variables ) : "
"define the method __init__ with 5 arguments: self, view_name, args, kwargs and asvar.",define method var0 with 5 arguments: self var1 var2 var3 and var4 ,"def __init__ ( self , view_name , args , kwargs , asvar ) : ","def var0 ( self , var1 , var2 , var3 , var4 ) : "
"define the method __init__ with 3 arguments: self, widgets and attrs set to None.","define method var0 with 3 arguments: self, widgets and var1 set to var2 ","def __init__ ( self , widgets , attrs = None ) : ","def var0 ( self , widgets , var1 = var2 ) : "
define the __init__ method with argument self.,define var0 method with argument self.,def __init__ ( self ) : ,def var0 ( self ) : 
define initialization method __init__ with argument self.,define initialization method var0 with argument self.,def __init__ ( self ) : ,def var0 ( self ) : 
"define initialization method __init__, with self class instance as the argument.",define initialization method var0 with self class instance as argument.,def __init__ ( self ) : ,def var0 ( self ) : 
define the method __init__ with an argument self.,define method var0 with argument self.,def __init__ ( self ) : ,def var0 ( self ) : 
define the method with reload with an argument self.,define method with reload with argument self.,def __init__ ( self ) : ,def __init__ ( self ) : 
define initialization method __init__ with self instance of the class as an argument.,define initialization method var0 with self instance of class as argument.,def __init__ ( self ) : ,def var0 ( self ) : 
"result of the function literals called with an argument string ""/= /"" and next as a string 'reg', to the both_before,   appended both_after to the previous result, for 'div' and appended list with an element instance of a class Tok,   created with 3 arguments: string ""regex"",   raw string '/([^*\\/[]|\\.|\[(   [^\]\\]|   \\.)*\])(   [^\\/[]|   \\.|   \[(   [^\]\\]|   \\.)*\])*/[a-zA-Z0-9]*',   and next as a string 'div', to the both_before, appended both_after to the previous result for 'div'.   define the method __init__ with an argument self.","result of the function literals called with an argument string ""/= /"" and next as a string 'reg', to the both_before,   appended both_after to the previous result, for 'div' and appended list with an element instance of a class Tok,   created with 3 arguments: string ""regex"",   raw string '/([^*\\/[]|\\.|\[(   [^\]\\]|   \\.)*\])(   [^\\/[]|   \\.|   \[(   [^\]\\]|   \\.)*\])*/[a-zA-Z0-9]*',   and next as a string 'div', to the both_before, appended both_after to the previous result for 'div'.   define the method __init__ with an argument self.",def __init__ ( self ) : ,def __init__ ( self ) : 
define the method __iter__ with an argument self.,define method var0 with argument self.,def __iter__ ( self ) : ,def var0 ( self ) : 
define the method __iter__ with argument self.,define method var0 with argument self.,def __iter__ ( self ) : ,def var0 ( self ) : 
define iterator method __iter__ with self as the argument.,define var0 method var1 with self as argument.,def __iter__ ( self ) : ,def var1 ( self ) : 
define the method _iter with an argument self.,define method var0 with argument self.,def __iter__ ( self ) : ,def __iter__ ( self ) : 
"separated with string ', ', substitute '%s' with self.sequence, substitute '%d' with length of self.nodelist_loop,   substitute '%s' with reversed_text.   define the method __iter__ with an argument self.","separated with string var0, substitute var1 with var5 substitute var6 with length of self var9 substitute var1 with var12 define method var14 with argument self.",def __iter__ ( self ) : ,def var14 ( self ) : 
define the method __len__ with argument self.,define method var0 with argument self.,def __len__ ( self ) : ,def var0 ( self ) : 
define the method __len__ with an argument self.,define method var0 with argument self.,def __len__ ( self ) : ,def var0 ( self ) : 
define the mehod __lt__ with self and other.,define var0 __lt__ with self and other.,"def __lt__ ( self , other ) : ","def __lt__ ( self , other ) : "
define the method __lt__ with 2 arguments: self and other.,define method __lt__ with 2 arguments: self and other.,"def __lt__ ( self , other ) : ","def __lt__ ( self , other ) : "
define the method __mod__ with 2 arguments: self and rhs.,define method __mod__ with 2 arguments: self and rhs.,"def __mod__ ( self , rhs ) : ","def __mod__ ( self , rhs ) : "
define the method __ne__ with self and other as arguments.,define method var0 with self and other as arguments.,"def __ne__ ( self , other ) : ","def var0 ( self , other ) : "
"return boolean True, otherwise return boolean False.   define private method __ne__ with self class instance and other as arguments.",return boolean var0 otherwise return boolean var1 define private method __ne__ with self class instance and other as arguments.,"def __ne__ ( self , other ) : ","def __ne__ ( self , other ) : "
"and self.regex.flags equals to other.regex.flags and self.message equals to other.message and self.code equals to other.code,   and self.inverse_match equals to other.inverse_match, return the result.   define the method __ne__ with arguments self and other.",and var0 equals to var1 and var2 equals to var3 and var4 equals to other.code var5 and self var8 equals to other var8 return result var5 define method var11 with arguments self and other.,"def __ne__ ( self , other ) : ","def var11 ( self , other ) : "
define the method __ne__ with an argument self.,define method var0 with argument self.,"def __ne__ ( self , other ) : ","def var0 ( self , other ) : "
define the method __ne__ with 2 arguments: self and other.,define method var0 with 2 arguments: self and other.,"def __ne__ ( self , other ) : ","def var0 ( self , other ) : "
"define the method __new__ with 3 arguments: cls, unpacked list args and unpacked dictionary kwargs.","define method __new__ with 3 arguments: cls, unpacked list var0 and unpacked dict var1 ","def __new__ ( cls , * args , ** kwargs ) : ","def __new__ ( cls , * var0 , ** var1 ) : "
"define the method __new__ with 5 arguments: cls, fget set to None, fset set to None, fdel set to None and doc set to None.",define method __new__ with 5 arguments: cls var0 set to var1 var5 set to var1 var6 set to var1 and doc set to var1 ,"def __new__ ( cls , fget = None , fset = None , fdel = None , doc = None ) : ","def __new__ ( cls , var0 = var1 , var5 = var1 , var6 = var1 , doc = var1 ) : "
"define the method __new__ with 4 arguments: cls, name, bases and attrs.","define method __new__ with 4 arguments: cls, name, bases and var0 ","def __new__ ( cls , name , bases , attrs ) : ","def __new__ ( cls , name , bases , var0 ) : "
"define the method __new__ with 4 arguments: cls, name, this_bases and d.","define method __new__ with 4 arguments: cls, name var0 and var1","def __new__ ( cls , name , this_bases , d ) : ","def __new__ ( cls , name , var0 , d ) : "
"define the method __new__ with 4 arguments: mcs, name, bases and attrs.","define method __new__ with 4 arguments: mcs, name, bases and var0 ","def __new__ ( mcs , name , bases , attrs ) : ","def __new__ ( mcs , name , bases , var0 ) : "
"define the method __new__ with 4 arguments mcs, name, bases and attrs.","define method __new__ with 4 arguments mcs, name, bases and var0 ","def __new__ ( mcs , name , bases , attrs ) : ","def __new__ ( mcs , name , bases , var0 ) : "
define the method __newobj__ with 2 arguments cls and unpacked list args.,define method var0 with 2 arguments cls and unpacked list var1 ,"def __newobj__ ( cls , * args ) : ","def var0 ( cls , * var1 ) : "
define the method __next__ with an argument self.,define method var0 with argument self.,def __next__ ( self ) : ,def var0 ( self ) : 
define the method __nonzero__ with argument self.,define method var0 with argument self.,def __nonzero__ ( self ) : ,def var0 ( self ) : 
define the method __nonzero__ with an argument self.,define method var0 with argument self.,def __nonzero__ ( self ) : ,def var0 ( self ) : 
define the method __prepare_class__ with an argument self.,define method var0 with argument self.,def __prepare_class__ ( cls ) : ,def var0 ( cls ) : 
"define the method __promise__ with 4 arguments: cls, klass, funcname and method.",define method var0 with 4 arguments: cls var1 var2 and method.,"def __promise__ ( cls , klass , funcname , method ) : ","def var0 ( cls , var1 , var2 , method ) : "
define the method __reduce__ with an argument self.,define method var0 with argument self.,def __reduce__ ( self ) : ,def var0 ( self ) : 
define the method __reduce_ex__ with 2 arguments self and proto.,define method var0 with 2 arguments self and proto.,"def __reduce_ex__ ( self , proto ) : ","def var0 ( self , proto ) : "
define private method __repr__ with argument self.,define private method var0 with argument self.,def __repr__ ( self ) : ,def var0 ( self ) : 
define the method __repr__ with an argument self.,define method var0 with argument self.,def __repr__ ( self ) : ,def var0 ( self ) : 
define the method __repr__ with argument self.,define method var0 with argument self.,def __repr__ ( self ) : ,def var0 ( self ) : 
define the method __repr__with an argument self.,define method var0 argument self.,def __repr__ ( self ) : ,def __repr__ ( self ) : 
called with an argument BlockNode.   define the method __repr__ with an argument self.,called with argument var0 define method var2 with argument self.,def __repr__ ( self ) : ,def var2 ( self ) : 
for every c in self.children.   define the method __repr__ with an argument self.,for every c in var0 define method var2 with argument self.,def __repr__ ( self ) : ,def var2 ( self ) : 
"and placed into 2 character spaces, and '%02d' is replaced with reminder of the division of absolute offset by integer 60,   and placed into 2 character spaces.   define the method __repr__ with an argument self.","and placed into 2 character spaces, and var0 is replaced with reminder of division of absolute offset by integer 60 var1 and placed into 2 character spaces var1 define method var3 with argument self.",def __repr__ ( self ) : ,def var3 ( self ) : 
define the method __reversed__ with an argument self.,define method var0 with argument self.,def __reversed__ ( self ) : ,def var0 ( self ) : 
"define the method __setattr__ with self, name and value as arguments.","define method var0 with self, name and value as arguments.","def __setattr__ ( self , name , value ) : ","def var0 ( self , name , value ) : "
"define the method __setattr__ with 3 arguments: self, name and value.","define method var0 with 3 arguments: self, name and value.","def __setattr__ ( self , name , value ) : ","def var0 ( self , name , value ) : "
"define the method __setitem__ with 3 arguments: self, header and value.","define method var0 with 3 arguments: self, header and value.","def __setitem__ ( self , header , value ) : ","def var0 ( self , header , value ) : "
"define the method __setitem__ with 3 arguments: self, key and value.","define method var0 with 3 arguments: self, key and value.","def __setitem__ ( self , key , value ) : ","def var0 ( self , key , value ) : "
"define the method __setitem__ with 3 arguments: self, kay and value.",define method var0 with 3 arguments: self var1 and value.,"def __setitem__ ( self , key , value ) : ","def var0 ( self , key , value ) : "
"define the method __setitem__ with arguments self, name and val.","define method var0 with arguments self, name and var1 ","def __setitem__ ( self , name , val ) : ","def var0 ( self , name , var1 ) : "
define the method __setstate__ with 2 arguments: self and obj_dict.,define method var0 with 2 arguments: self and var1 ,"def __setstate__ ( self , obj_dict ) : ","def var0 ( self , var1 ) : "
define the method __setstate__ with 2 arguments: self and state.,define method var0 with 2 arguments: self and state.,"def __setstate__ ( self , state ) : ","def var0 ( self , state ) : "
define private method __str__ with argument self.,define private method var0 with argument self.,def __str__ ( self ) : ,def var0 ( self ) : 
define the method __str__ with an argument self.,define method __str__ with argument self.,def __str__ ( self ) : ,def __str__ ( self ) : 
define the method __str__ with argument self.,define method var0 with argument self.,def __str__ ( self ) : ,def var0 ( self ) : 
"join all of the results into a string separated by newline character, return the result.   define the method __str__ with an argument self.","join all of results into string separated by var0 character, return result var1 define method __str__ with argument self.",def __str__ ( self ) : ,def __str__ ( self ) : 
"with an argument: value under the name key of the media_attrs dictionary, if it exists, if not use None as an argument.   define the method __str__ with an argument self.","with argument: value under name key of var0 dict, if it exists, if not use var2 as argument var3 define method __str__ with argument self.",def __str__ ( self ) : ,def __str__ ( self ) : 
"choice and idx, return the result.   define the method __str__ with an argument self.",choice and var0 return result var1 define method __str__ with argument self.,def __str__ ( self ) : ,def __str__ ( self ) : 
define the method with reload with an argument self.,define method with reload with argument self.,def __str__ ( self ) : ,def __str__ ( self ) : 
"define the private method __str__, with self instance of this class as the only argument.",define private method var0 with self instance of var1 class as only argument.,def __str__ ( self ) : ,def var0 ( self ) : 
define the method __text_cast with an argument self.,define method var0 with argument self.,def __text_cast ( self ) : ,def var0 ( self ) : 
define the function __wrapper__ with 2 arguments: unpacked list args and unpacked dictionary kw.,define function var0 with 2 arguments: unpacked list var1 and unpacked dict kw.,"def __wrapper__ ( * args , ** kw ) : ","def var0 ( * var1 , ** kw ) : "
"define the method __wrapper__ with 3 arguments: self, unpacked list args and unpacked dictionary kw.","define method var0 with 3 arguments: self, unpacked list var1 and unpacked dict kw.","def __wrapper__ ( self , * args , ** kw ) : ","def var0 ( self , * var1 , ** kw ) : "
define the function _add_doc with 2 arguments: func and doc.,define function _add_doc with 2 arguments: var0 and doc.,"def _add_doc ( func , doc ) : ","def _add_doc ( var0 , doc ) : "
define the method _add_fallback with an argument self.,define method var0 with argument self.,def _add_fallback ( self ) : ,def var0 ( self ) : 
define the method _add_installed_apps_translations with an argument self.,define method var0 with argument self.,def _add_installed_apps_translations ( self ) : ,def var0 ( self ) : 
define the method _add_local_translations with an argument self.,define method var0 with argument self.,def _add_local_translations ( self ) : ,def var0 ( self ) : 
define the method _archive_cls with an argument file.,define method _archive_cls with argument file.,def _archive_cls ( file ) : ,def _archive_cls ( file ) : 
define the method _assert_mutable with an argument self.,define method var0 with argument self.,def _assert_mutable ( self ) : ,def var0 ( self ) : 
"define the protected method _base_set with 4 arguments, self class instance, key, value and timeout set to DEFAULT_TIMEOUT.","define protected method _base_set with 4 arguments, self class instance, key, value and var0 set to var1 ","def _base_set ( self , mode , key , value , timeout = DEFAULT_TIMEOUT ) : ","def _base_set ( self , mode , key , value , var0 = var1 ) : "
"define protected method _BaseCookie__set with self class instance, key, real_value and coded_value as arguments.","define protected method var0 with self class instance, key var1 and var2 as arguments.","def _BaseCookie__set ( self , key , real_value , coded_value ) : ","def var0 ( self , key , var1 , var2 ) : "
define the function _bin_to_long with an argument x.,define function var0 with argument var1,def _bin_to_long ( x ) : ,def var0 ( x ) : 
define the method _cache with argument self.,define method var0 with argument self.,def _cache ( self ) : ,def var0 ( self ) : 
define the method _cache with self class instance as an argument.,define method var0 with self class instance as argument.,def _cache ( self ) : ,def var0 ( self ) : 
define the function _check_boolean_field_default_value with app_config set to None and kwargs dictionary as arguments.,define function _check_boolean_field_default_value with var0 set to var2 and var3 dict as arguments.,"def _check_boolean_field_default_value ( app_configs = None , ** kwargs ) : ","def _check_boolean_field_default_value ( app_configs = var2 , ** var3 ) : "
define the function _check_middleware_classes with app_config set to None and kwargs dictionary as arguments.,define function var0 with var1 set to var3 and var4 dict as arguments.,"def _check_middleware_classes ( app_configs = None , ** kwargs ) : ","def var0 ( app_configs = var3 , ** var4 ) : "
define the function _check_test_runner with app_config set to None and kwargs dictionary as arguments.,define function _check_test_runner with var0 set to var2 and var3 dict as arguments.,"def _check_test_runner ( app_configs = None , ** kwargs ) : ","def _check_test_runner ( app_configs = var2 , ** var3 ) : "
define the function _checkLevel with an argument level.,define function var0 with argument level.,def _checkLevel ( level ) : ,def var0 ( level ) : 
define the method _clean_fields with an argument self.,define method _clean_fields with argument self.,def _clean_fields ( self ) : ,def _clean_fields ( self ) : 
define the method _clean_form with an argument self.,define method var0 with argument self.,def _clean_form ( self ) : ,def var0 ( self ) : 
"slice the filename from the previous result as start index to the end, strip it of white spaces from both ends,   if the result is not an empty string and filename is not an empty string, return boolean True, otherwise return boolean False.   define the method _close_files with an argument self.","slice filename from previous result as start index to end, strip it of white spaces from both ends var0 if result is not empty string and filename is not empty string, return boolean var2 otherwise return boolean var3 define method var4 with argument self.",def _close_files ( self ) : ,def var4 ( self ) : 
from the base class of the class TypedChoiceField.   define the method _coerce with arguments self and value.,from base class of class var0 define method var2 with arguments self and value.,"def _coerce ( self , value ) : ","def var2 ( self , value ) : "
from the base class of the class TypedMultipleChoiceField.   define the method _coerce with arguments self and value.,from base class of class var0 define method var2 with arguments self and value.,"def _coerce ( self , value ) : ","def var2 ( self , value ) : "
"define the method _construct_form with 3 arguments: self, i and unpacked dictionary kwargs.","define method var0 with 3 arguments: self, i and unpacked dict var1 ","def _construct_form ( self , i , ** kwargs ) : ","def var0 ( self , i , ** var1 ) : "
"define the method _convert_to_charset with 4 arguments: self, value, charset and mime_encode set to boolean False.","define method var0 with 4 arguments: self, value var1 and var2 set to boolean var4 ","def _convert_to_charset ( self , value , charset , mime_encode = False ) : ","def var0 ( self , value , var1 , var2 = var4 ) : "
define the method _create_alternatives with arguments self and msg.,define method var0 with arguments self and msg.,"def _create_alternatives ( self , msg ) : ","def var0 ( self , msg ) : "
"define the method _create_attachment with 4 arguments: self, filename, content and mimetype set to None.","define method _create_attachment with 4 arguments: self, filename, content and var0 set to var1 ","def _create_attachment ( self , filename , content , mimetype = None ) : ","def _create_attachment ( self , filename , content , var0 = var1 ) : "
define the method _create_attachments with arguments self and msg.,define method var0 with arguments self and msg.,"def _create_attachments ( self , msg ) : ","def var0 ( self , msg ) : "
define the function _create_cache with backend and dictionary pair of elements kwargs as arguments.,define function var0 with var1 and dict pair of elements var2 as arguments.,"def _create_cache ( backend , ** kwargs ) : ","def var0 ( var1 , ** var2 ) : "
define the method _create_message with arguments self and msg.,define method var0 with arguments self and msg.,"def _create_message ( self , msg ) : ","def var0 ( self , msg ) : "
"define the method _create_mime_attachment with arguments self, content and mimetype.","define method var0 with arguments self, content and var1 ","def _create_mime_attachment ( self , content , mimetype ) : ","def var0 ( self , content , var1 ) : "
define the method _createdir with argument self.,define method var0 with argument self.,def _createdir ( self ) : ,def var0 ( self ) : 
"define the protected method _cull with self class instance, db, cursor and now as arguments.","define protected method var0 with self class instance, db, cursor and now as arguments.","def _cull ( self , db , cursor , now ) : ","def var0 ( self , db , cursor , now ) : "
define the method _cull with argument self.,define method var0 with argument self.,def _cull ( self ) : ,def var0 ( self ) : 
define the function _curried with 2 arguments: unpacked list moreargs and unpacked dictionary morekwargs.,define function var0 with 2 arguments: unpacked list var1 and unpacked dict var2 ,"def _curried ( * moreargs , ** morekwargs ) : ","def var0 ( * var1 , ** var2 ) : "
define the method _dec with 2 arguments: unpacked list args and unpacked dictionary kwargs.,define method var0 with 2 arguments: unpacked list var1 and unpacked dict var2 ,"def _dec ( * args , ** kwargs ) : ","def var0 ( * var1 , ** var2 ) : "
define the function _dec with an argument func.,define function var1 with argument var0 ,def _dec ( func ) : ,def var1 ( var0 ) : 
substitute the middleware.   define the function _decorator with an argument view_func.,substitute var0 define function var2 with argument var3 ,def _decorator ( view_func ) : ,def var2 ( var3 ) : 
define the method _delete with self and fname as arguments.,define method var0 with self and var1 as arguments.,"def _delete ( self , fname ) : ","def var0 ( self , var1 ) : "
define the method _delete with arguments self and key.,define method _delete with arguments self and key.,"def _delete ( self , key ) : ","def _delete ( self , key ) : "
define the method _existing_object with 2 arguments: self and pk.,define method _existing_object with 2 arguments: self and var0 ,"def _existing_object ( self , pk ) : ","def _existing_object ( self , var0 ) : "
define the function _explode_shorthand_ip_string with an argument ip_str.,define function var0 with argument var1 ,def _explode_shorthand_ip_string ( ip_str ) : ,def var0 ( var1 ) : 
define the _fd function with argument f.,define var0 function with argument var1,def _fd ( f ) : ,def var0 ( f ) : 
"define the method _find_boundary with an arguments self, data and eof set to boolean False.","define method var0 with arguments self, data and var1 set to boolean var2 ","def _find_boundary ( self , data , eof = False ) : ","def var0 ( self , data , var1 = var2 ) : "
define the function _findall with 2 arguments text and substr.,define function var0 with 2 arguments text and var1 ,"def _findall ( text , substr ) : ","def var0 ( text , var1 ) : "
define the method _format_value with 2 arguments: self and value.,define method _format_value with 2 arguments: self and value.,"def _format_value ( self , value ) : ","def _format_value ( self , value ) : "
define the funtion _generate_cache_header_key with key_prefix and request as arguments.,define var0 _generate_cache_header_key with var1 and request as arguments.,"def _generate_cache_header_key ( key_prefix , request ) : ","def _generate_cache_header_key ( var1 , request ) : "
"define function _generate_cache_key, with request, method, headerlist and key_prefix as arguments.","define function var0 with request, method var1 and var2 as arguments.","def _generate_cache_key ( request , method , headerlist , key_prefix ) : ","def var0 ( request , method , var1 , var2 ) : "
define the function _generator.,define function var0 ,def _generator ( ) : ,def var0 ( ) : 
define the method _get_choices with an argument self.,define method var0 with argument self.,def _get_choices ( self ) : ,def var0 ( self ) : 
define the method _get_closed with argument self.,define method var0 with argument self.,def _get_closed ( self ) : ,def var0 ( self ) : 
define the method _get_context_stack_frame with 2 arguments: self and context.,define method var0 with 2 arguments: self and context.,"def _get_context_stack_frame ( self , context ) : ","def var0 ( self , context ) : "
define the method _get_count with an argument self.,define method var0 with argument self.,def _get_count ( self ) : ,def var0 ( self ) : 
define the method _get_filename with argument self.,define method var0 with argument self.,def _get_filename ( self ) : ,def var0 ( self ) : 
define _get_files method with self class instance as the argument.,define var0 method with self class instance as argument.,def _get_files ( self ) : ,def var0 ( self ) : 
"define the function _get_foreign_key with 4 arguments: parent_model, model, fk_name set to None and can_fail set to boolean False.",define function var0 with 4 arguments: var1 model var3 set to var5 and var6 set to boolean var8 ,"def _get_foreign_key ( parent_model , model , fk_name = None , can_fail = False ) : ","def var0 ( var1 , model , var3 = var5 , var6 = var8 ) : "
define method _get_height with self class instance as the argument.,define method _get_height with self class instance as argument.,def _get_height ( self ) : ,def _get_height ( self ) : 
define the method _get_image_dimensions with self class instance as the argument.,define method var0 with self class instance as argument.,def _get_image_dimensions ( self ) : ,def var0 ( self ) : 
define the method _get_media with an argument self.,define method var0 with argument self.,def _get_media ( self ) : ,def var0 ( self ) : 
define the function _get_model with an argument model_identifier.,define function var0 with argument var1 ,def _get_model ( model_identifier ) : ,def var0 ( var1 ) : 
"with an argument string 'object', return the result.   define the method _get_model_from_node with arguments self, node and attr.","with argument string var0, return result var1 define method var2 with arguments self, node and var3 ","def _get_model_from_node ( self , node , attr ) : ","def var2 ( self , node , var3 ) : "
define the method _get_name with argument self.,define method var0 with argument self.,def _get_name ( self ) : ,def var0 ( self ) : 
define the method _get_num_pages with an argument self.,define method var0 with argument self.,def _get_num_pages ( self ) : ,def var0 ( self ) : 
"define the method _get_page with self class instance, unpacked list args and unpacked dictionary kwargs as arguments.","define method var0 with self class instance, unpacked list var1 and unpacked dict var2 as arguments.","def _get_page ( self , * args , ** kwargs ) : ","def var0 ( self , * var1 , ** var2 ) : "
define the method _get_page_range with an argument self.,define method var0 with argument self.,def _get_page_range ( self ) : ,def var0 ( self ) : 
def _get_post method with self class instance as the argument.,def var0 method with self class instance as argument.,def _get_post ( self ) : ,def var0 ( self ) : 
define the method _get_queryset with an argument self.,define method var0 with argument self.,def _get_queryset ( self ) : ,def var0 ( self ) : 
define the method _get_regex an argument self.,define method var0 argument self.,def _get_regex ( self ) : ,def var0 ( self ) : 
define the method _get_request with self class instance as argument.,define method var0 with self class instance as argument.,def _get_request ( self ) : ,def var0 ( self ) : 
define the method _get_scheme with self class instance as argument.,define method var0 with self class instance as argument.,def _get_scheme ( self ) : ,def var0 ( self ) : 
define the method _get_scheme with an argument self.,define method var0 with argument self.,def _get_scheme ( self ) : ,def var0 ( self ) : 
define the method _get_size with argument self.,define method var0 with argument self.,def _get_size ( self ) : ,def var0 ( self ) : 
define the method _get_size_from_underlying_file with argument self.,define method var0 with argument self.,def _get_size_from_underlying_file ( self ) : ,def var0 ( self ) : 
define the function _get_timezone_name with an argument timezone.,define function var0 with argument var1 ,def _get_timezone_name ( timezone ) : ,def var0 ( var1 ) : 
define the method _get_to_python with 2 arguments: self and field.,define method var0 with 2 arguments: self and field.,"def _get_to_python ( self , field ) : ","def var0 ( self , field ) : "
define the function _get_val.,define function var0 ,def _get_val ( ) : ,def var0 ( ) : 
define the method _get_validation_exclusions with an argument self.,define method var0 with argument self.,def _get_validation_exclusions ( self ) : ,def var0 ( self ) : 
define method _get_width with self class instance as the argument.,define method var0 with self class instance as argument.,def _get_width ( self ) : ,def var0 ( self ) : 
"define the method _handle_fk_field_node with arguments self, node and field.","define method var0 with arguments self, node and field.","def _handle_fk_field_node ( self , node , field ) : ","def var0 ( self , node , field ) : "
"with field_value as an argument, return the result.   define the method _handle_m2m_field_node with arguments self, node and field.","with var0 as argument, return result var1 define method var2 with arguments self, node and field.","def _handle_m2m_field_node ( self , node , field ) : ","def var2 ( self , node , field ) : "
define the method _handle_object with arguments self and node.,define method _handle_object with arguments self and node.,"def _handle_object ( self , node ) : ","def _handle_object ( self , node ) : "
"define the method _has_changed with arguments self, initial and data.","define method var0 with arguments self, initial and data.","def _has_changed ( self , initial , data ) : ","def var0 ( self , initial , data ) : "
"define the method _has_changed with arguments self, data and initial.","define method var0 with arguments self, data and initial.","def _has_changed ( self , initial , data ) : ","def var0 ( self , initial , data ) : "
"code set to an string 'invalid_choice' and dictionary params with an entry: val for 'value'.   define the method _has_changed with arguments self, initial and data.","code set to string var0 and dict var1 with entry: val for var2 var3 define method var4 with arguments self, initial and data.","def _has_changed ( self , initial , data ) : ","def var4 ( self , initial , data ) : "
"define the method has_changed with arguments self, initial and data.","define method var0 with arguments self, initial and data.","def _has_changed ( self , initial , data ) : ","def _has_changed ( self , initial , data ) : "
"define the method _has_changed with 3 arguments: self, initial and data.","define method var0 with 3 arguments: self, initial and data.","def _has_changed ( self , initial , data ) : ","def var0 ( self , initial , data ) : "
define the method _has_expired with self and key as arguments.,define method var0 with self and key as arguments.,"def _has_expired ( self , key ) : ","def var0 ( self , key ) : "
define the function _helper with 2 arguments list and tabs set to integer 1.,define function var0 with 2 arguments list and tabs set to integer 1.,"def _helper ( list_ , tabs = 1 ) : ","def var0 ( list_ , tabs = 1 ) : "
"define the method _html_output with 6 arguments: self, normal_row, error_row, row_ender, help_text_html and errors_on_separate_row.",define method _html_output with 6 arguments: self var0 var1 var3 var5 and var7 ,"def _html_output ( self , normal_row , error_row , row_ender , help_text_html , errors_on_separate_row ) : ","def _html_output ( self , var0 , var1 , var3 , var5 , var7 ) : "
"define function _i18n_cache_key_suffix, with request and cache_key as arguments.",define function var0 with request and var1 as arguments.,"def _i18n_cache_key_suffix ( request , cache_key ) : ","def var0 ( request , var1 ) : "
define the function _import_module with an argument name.,define function var0 with argument name.,def _import_module ( name ) : ,def var0 ( name ) : 
define the method _init_translation_catalog with an argument self.,define method _init_translation_catalog with argument self.,def _init_translation_catalog ( self ) : ,def _init_translation_catalog ( self ) : 
define the method _initialize_handlers with an argument self.,define method var0 with argument self.,def _initialize_handlers ( self ) : ,def var0 ( self ) : 
define the method _ipython with an argument self.,define method _i with argument self.,def _ipython ( self ) : ,def _ipython ( self ) : 
"dest as a string 'interface' and help as a string 'Specify an interactive interpreter interface. Available options: ""ipython"" and ""bpython""'.   define the method _ipython_pre_011 with an argument self.",dest as string var0 and help as string var1 var6 define method var7 with argument self.,def _ipython_pre_011 ( self ) : ,def var7 ( self ) : 
define the method _ipython_pre_100 with an argument self.,define method var0 with argument self.,def _ipython_pre_100 ( self ) : ,def var0 ( self ) : 
define the method _is_expired with self and f as arguments.,define method _is_expired with self and f as arguments.,"def _is_expired ( self , f ) : ","def _is_expired ( self , f ) : "
define the function _is_shorthand_ip with an argument ip_str.,define function _is_shorthand_ip with argument var0 ,def _is_shorthand_ip ( ip_str ) : ,def _is_shorthand_ip ( var0 ) : 
define the method _isdst with 2 arguments: self and dt.,define method var0 with 2 arguments: self and var1 ,"def _isdst ( self , dt ) : ","def var0 ( self , var1 ) : "
define the method _isdst with 2 arguments self and dt.,define method var0 with 2 arguments self and var1 ,"def _isdst ( self , dt ) : ","def var0 ( self , var1 ) : "
define the method _iteritems with an argument self.,define method var0 with argument self.,def _iteritems ( self ) : ,def var0 ( self ) : 
define the method _iterkeys with an argument self.,define method var0 with argument self.,def _iterkeys ( self ) : ,def var0 ( self ) : 
define the method _iterlists with an argument self.,define method var0 with argument self.,def _iterlists ( self ) : ,def var0 ( self ) : 
define the method _itervalues with an argument self.,define method var0 with argument self.,def _itervalues ( self ) : ,def var0 ( self ) : 
"substitute '%s' with self._dir converted to a string.   define the method key_to_file with self class instance, key and version defaulting to None as arguments.","substitute var0 with var1 converted to string var2 define method var3 with self class instance, key and version defaulting to var5 as arguments.","def _key_to_file ( self , key , version = None ) : ","def _key_to_file ( self , key , version = var5 ) : "
"define the function _lazy_proxy_unpickle with 4 arguments: func, args, kwargs and unpacked list resultclasses.",define function var1 with 4 arguments: var0 var2 var3 and unpacked list var4 ,"def _lazy_proxy_unpickle ( func , args , kwargs , * resultclasses ) : ","def var1 ( var0 , var2 , var3 , * var4 ) : "
define the method _list_cache_files with argument self.,define method var0 with argument self.,def _list_cache_files ( self ) : ,def var0 ( self ) : 
define the method _load_post_and_files with an argument self.,define method var0 with argument self.,def _load_post_and_files ( self ) : ,def var0 ( self ) : 
define the function _load_serializers.,define function var0 ,def _load_serializers ( ) : ,def var0 ( ) : 
define the function _long_to_bin with 2 arguments: x and hex_format_string.,define function var0 with 2 arguments: x and var1 ,"def _long_to_bin ( x , hex_format_string ) : ","def var0 ( x , var1 ) : "
define the function make_decorator with 2 arguments: unpacked list m_args and unpacked dictionary m_kwargs.,define function var0 with 2 arguments: unpacked list var1 and unpacked dict var3 ,"def _make_decorator ( * m_args , ** m_kwargs ) : ","def _make_decorator ( * var1 , ** var3 ) : "
"define the function _make_key with 9 arguments: args, kwds, typed, kwd_mark as a tuple with an element result of the function object,","define function _make_key with 9 arguments: var0 var1 typed var2 as tuple with element result of function object,","def _make_key ( args , kwds , typed , kwd_mark = ( object ( ) , ) , fasttypes = { int , str , frozenset , type ( None ) } , sorted = sorted , tuple = tuple , type = type , len = len ) : ","def _make_key ( var0 , var1 , typed , var2 = ( object ( ) , ) , fasttypes = { int , str , frozenset , type ( None ) } , sorted = sorted , tuple = tuple , type = type , len = len ) : "
if the key doesnt exists substitute boolean False for self.ignore.   define the method _make_parser with an argument self.,if key doesnt exists substitute boolean var0 for var1 define method _make_parser with argument self.,def _make_parser ( self ) : ,def _make_parser ( self ) : 
define the method_mark_post_parse_error with an argument self.,define var0 with argument self.,def _mark_post_parse_error ( self ) : ,def _mark_post_parse_error ( self ) : 
define the method _media with an argument self.,define method var0 with argument self.,def _media ( self ) : ,def var0 ( self ) : 
"define the method _new_gnu_trans with 3 arguments: self, localedir and use_null_fallback set to boolean True.",define method var0 with 3 arguments: self var1 and var2 set to boolean var4 ,"def _new_gnu_trans ( self , localedir , use_null_fallback = True ) : ","def var0 ( self , var1 , var2 = var4 ) : "
"define the method _new_instance with 4 arguments: (cls, children set to None, connector set to None and negated set to boolean False.","define method var0 with 4 arguments: (cls, children set to var1 connector set to var1 and negated set to boolean var3 ","def _new_instance ( cls , children = None , connector = None , negated = False ) : ","def var0 ( cls , children = var1 , connector = var1 , negated = var3 ) : "
"or settings.FILE_UPLOAD_DIRECTORY_PERMISSIONS if it is.   define the method _open with arguments self, name and mode defaulting to string 'rb'.","or settings var0 if it is var2 define method var3 with arguments self, name and mode defaulting to string var4.","def _open ( self , name , mode = 'rb' ) : ","def var3 ( self , name , mode = var4 ) : "
define the function _parse_date_fmt.,define function var0 ,def _parse_date_fmt ( ) : ,def var0 ( ) : 
define the method _parse_header with an argument line.,define method _parse_header with argument line.,def _parse_header ( line ) : ,def _parse_header ( line ) : 
define the function _parse_header_params with an argument s.,define function var0 with argument var1,def _parse_header_params ( s ) : ,def var0 ( s ) : 
"self.namespace and self.regex.pattern, respectively. return it.   define the method _populate with an argument self.",var0 and var1 respectively. return it var2 define method var3 with argument self.,def _populate ( self ) : ,def var3 ( self ) : 
define the method _post_clean with an argument self.,define method var0 with argument self.,def _post_clean ( self ) : ,def var0 ( self ) : 
define the method _prepare_data with 2 arguments: self and data.,define method var0 with 2 arguments: self and data.,"def _prepare_data ( self , data ) : ","def var0 ( self , data ) : "
"define the method _proxy_method with 3 arguments self, unpacked list args and unpacked dictionary kwargs.","define method _proxy_method with 3 arguments self, unpacked list var0 and unpacked dict var1 ","def _proxy_method ( self , * args , ** kwargs ) : ","def _proxy_method ( self , * var0 , ** var1 ) : "
self.error_class called with an argument error_class set to string 'nonfield'.   define the method _raw_value with 2 arguments: self and fieldname.,self var1 called with argument var1 set to string var4 var5 define method var6 with 2 arguments: self and var7 ,"def _raw_value ( self , fieldname ) : ","def var6 ( self , var7 ) : "
define the method _read_limited with self class instance and size set to None as arguments.,define method _read_limited with self class instance and size set to var0 as arguments.,"def _read_limited ( self , size = None ) : ","def _read_limited ( self , size = var0 ) : "
define the method _render with 2 arguments self and context.,define method var0 with 2 arguments self and context.,"def _render ( self , context ) : ","def var0 ( self , context ) : "
define the function _replace_entity with an argument match.,define function _replace_entity with argument match.,def _replace_entity ( match ) : ,def _replace_entity ( match ) : 
define the method _reset_dicts with 2 arguments: self and value set to None.,define method var0 with 2 arguments: self and value set to var1 ,"def _reset_dicts ( self , value = None ) : ","def var0 ( self , value = var1 ) : "
define the method _resolve with an argument self.,define method var0 with argument self.,def _resolve ( self ) : ,def var0 ( self ) : 
define the method _resolve_lookup with 2 arguments: self and context.,define method _resolve_lookup with 2 arguments: self and context.,"def _resolve_lookup ( self , context ) : ","def _resolve_lookup ( self , context ) : "
"RemovedInDjango19Warning and stacklevel set to integer 2.   define the function _resolve_name with 3 arguments: name, package and level.","var0 and var1 set to integer 2 var2 define function _resolve_name with 3 arguments: name, package and level.","def _resolve_name ( name , package , level ) : ","def _resolve_name ( name , package , level ) : "
"define the method _reverse_with_prefix with arguments self, lookup_view, _prefix, unpacked list args and unpacked dictionary kwargs.",define method _reverse_with_prefix with arguments self var1 var0 unpacked list var2 and unpacked dict var3 ,"def _reverse_with_prefix ( self , lookup_view , _prefix , * args , ** kwargs ) : ","def _reverse_with_prefix ( self , var1 , var0 , * var2 , ** var3 ) : "
define the function _samefile with arguments src and dst.,define function var0 with arguments var1 and var2 ,"def _samefile ( src , dst ) : ","def var0 ( var1 , var2 ) : "
define the function _sanitize_ipv4_mapping with an argument ip_str.,define function var0 with argument var1 ,def _sanitize_ipv4_mapping ( ip_str ) : ,def var0 ( var1 ) : 
"define the method _save with arguments self, name and content.","define method _save with arguments self, name and content.","def _save ( self , name , content ) : ","def _save ( self , name , content ) : "
define the method _send with arguments self and email_message.,define method var0 with arguments self and var1 ,"def _send ( self , email_message ) : ","def var0 ( self , var1 ) : "
"define the method _set with 4 arguments, self class instance, key, value and timeout set to DEFAULT_TIMEOUT.","define method var0 with 4 arguments, self class instance, key, value and var1 set to var2 ","def _set ( self , key , value , timeout = DEFAULT_TIMEOUT ) : ","def var0 ( self , key , value , var1 = var2 ) : "
define the method _set_choices with arguments self and value.,define method var0 with arguments self and value.,"def _set_choices ( self , value ) : ","def var0 ( self , value ) : "
define the method _set_name with arguments self and name.,define method var0 with arguments self and name.,"def _set_name ( self , name ) : ","def var0 ( self , name ) : "
define the _set_post method with self class instance and post as the arguments.,define var0 method with self class instance and post as arguments.,"def _set_post ( self , post ) : ","def var0 ( self , post ) : "
define the method _set_queryset with 2 arguments: self and queryset.,define method var0 with 2 arguments: self and var1 ,"def _set_queryset ( self , queryset ) : ","def var0 ( self , var1 ) : "
define the method _set_regex with arguments self and regex.,define method var0 with arguments self and var1 ,"def _set_regex ( self , regex ) : ","def var0 ( self , var1 ) : "
"define the function _set_response_etag, with response as an argument.",define function var0 with response as argument.,def _set_response_etag ( response ) : ,def var0 ( response ) : 
define the method _set_size with arguments self and size.,define method var0 with arguments self and size.,"def _set_size ( self , size ) : ","def var0 ( self , size ) : "
define the _setup method with argument self.,define var0 method with argument self.,def _setup ( self ) : ,def var0 ( self ) : 
define the method _setup with an argument self.,define method var0 with argument self.,def _setup ( self ) : ,def var0 ( self ) : 
define the method _should_delete_form with an argument self.,define method var0 with argument self.,"def _should_delete_form ( self , form ) : ","def var0 ( self , form ) : "
define the function _split_statements with an argument content.,define function var0 with argument content.,def _split_statements ( content ) : ,def var0 ( content ) : 
define the method _start_relational_field with arguments self and field.,define method var0 with arguments self and field.,"def _start_relational_field ( self , field ) : ","def var0 ( self , field ) : "
define the function _string_concat with an argument unpacked list strings.,define function var0 with argument unpacked list strings.,def _string_concat ( * strings ) : ,def var0 ( * strings ) : 
define the function _strip_once with an argument value.,define function var0 with argument value.,def _strip_once ( value ) : ,def var0 ( value ) : 
"define the method _text_chars with 5 arguments: self, length, truncate, text and truncate_len.","define method var0 with 5 arguments: self, length, truncate, text and var1 ","def _text_chars ( self , length , truncate , text , truncate_len ) : ","def var0 ( self , length , truncate , text , var1 ) : "
"define the method _text_words with 3 arguments: self, length and truncate.","define method _text_words with 3 arguments: self, length and truncate.","def _text_words ( self , length , truncate ) : ","def _text_words ( self , length , truncate ) : "
define function _to_tuple with s as an argument.,define function var0 with s as argument.,def _to_tuple ( s ) : ,def var0 ( s ) : 
"define the method _truncate_html with 6 arguments: self, length, truncate, text, truncate_len and words.","define method var0 with 6 arguments: self, length, truncate, text var1 and words.","def _truncate_html ( self , length , truncate , text , truncate_len , words ) : ","def var0 ( self , length , truncate , text , var1 , words ) : "
define the function _unpack_ipv4 with an argument ip_str.,define function var0 with argument var1 ,def _unpack_ipv4 ( ip_str ) : ,def var0 ( var1 ) : 
define the method _update_errors with 2 arguments: self and errors.,define method _update_errors with 2 arguments: self and errors.,"def _update_errors ( self , errors ) : ","def _update_errors ( self , errors ) : "
define the method _update_unget_history with arguments self and num_bytes.,define method _update_unget_history with arguments self and var0 ,"def _update_unget_history ( self , num_bytes ) : ","def _update_unget_history ( self , var0 ) : "
"called with an argument view_func.   define the function _wrapped_view with 3 arguments: request, unpacked list args and unpacked dictionary kwargs.","called with argument var0 define function _wrapped_view with 3 arguments: request, unpacked list var2 and unpacked dict var3 ","def _wrapped_view ( request , * args , ** kwargs ) : ","def _wrapped_view ( request , * var2 , ** var3 ) : "
"define the method _wrapper with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.","define method var0 with 3 arguments: self, unpacked list var1 and unpacked dict var2 ","def _wrapper ( self , * args , ** kwargs ) : ","def var0 ( self , * var1 , ** var2 ) : "
define the method a with an argument self.,define method with argument self.,def a ( self ) : ,def a ( self ) : 
"format_html called with 3 arguments: string '<link href=""{0}"" type=""text/css"" media=""{1}"" rel=""stylesheet"" />',   return value of the function self.absolute_path called with an argument path and medium,   for every medium in media and for every path in value under the medium key of the self._css dictionary.   define the method absolute_path with 3 arguments self, path and prefix set to None.","var0 called with 3 arguments: string '<link href=""{0}"" type=""text/css"" media=""{1}"" rel=""stylesheet"" />' var2 return value of function self var6 called with argument path and medium var2 for every medium in media and for every path in value under medium key of var9 dict var2 define method var6 with 3 arguments self, path and prefix set to var10 ","def absolute_path ( self , path , prefix = None ) : ","def var6 ( self , path , prefix = var10 ) : "
define the function abspathu with an argument path.,define function var0 with argument path.,def abspathu ( path ) : ,def var0 ( path ) : 
define the method accessed_time with arguments self and name.,define method var0 with arguments self and name.,"def accessed_time ( self , name ) : ","def var0 ( self , name ) : "
"plural set to plural and number set to number, return the result.   define the function activate with an argument language.","plural set to plural and number set to number, return result var0 define function activate with argument language.",def activate ( language ) : ,def activate ( language ) : 
define the function activate with an argument language.,define function activate with argument language.,def activate ( language ) : ,def activate ( language ) : 
define the function activate with an argument timezone.,define function activate with argument var0 ,def activate ( timezone ) : ,def activate ( var0 ) : 
"define the method add with 4 arguments: self, data, conn_type and squash set to boolean True.","define method add with 4 arguments: self, data var0 and squash set to boolean var2 ","def add ( self , data , conn_type , squash = True ) : ","def add ( self , data , var0 , squash = var2 ) : "
"if iterable is true, otherwise use an empty list as an argument.   define the method add with 2 arguments: self and item.","if var0 is true, otherwise use empty list as argument var1 define method add with 2 arguments: self and item.","def add ( self , item ) : ","def add ( self , item ) : "
"define the method add with 5 arguments, self, key, value, timeout defaulting to DEFAULT_TIMEOUT and version defaulting to None.","define method add with 5 arguments, self, key, value var0 defaulting to var1 and version defaulting to var2 ","def add ( self , key , value , timeout = DEFAULT_TIMEOUT , version = None ) : ","def add ( self , key , value , var0 = var1 , version = var2 ) : "
"define the method add with 5 arguments, self class instance, key, value, timeout set to DEFAULT_TIMEOUT and version set to None.","define method add with 5 arguments, self class instance, key, value var0 set to var1 and version set to var2 ","def add ( self , key , value , timeout = DEFAULT_TIMEOUT , version = None ) : ","def add ( self , key , value , var0 = var1 , version = var2 ) : "
"define the method add with 5 arguments: self, key, value, timeout set to DEFAULT_TIMEOUT and version set to None.","define method add with 5 arguments: self, key, value var0 set to var1 and version set to var2 ","def add ( self , key , value , timeout = DEFAULT_TIMEOUT , version = None ) : ","def add ( self , key , value , var0 = var1 , version = var2 ) : "
define the function add with 2 arguments value and arg.,define function add with 2 arguments value and var0 ,"def add ( value , arg ) : ","def add ( value , var0 ) : "
define the method add_arguments with an argument self and parser.,define method var0 with argument self and parser.,"def add_arguments ( self , parser ) : ","def var0 ( self , parser ) : "
define the method add_arguments with self and parser as arguments.,define method var0 with self and parser as arguments.,"def add_arguments ( self , parser ) : ","def var0 ( self , parser ) : "
define the method add_arguments with arguments self and parser.,define method var0 with arguments self and parser.,"def add_arguments ( self , parser ) : ","def var0 ( self , parser ) : "
define method add_arguments with self class instance and parser as arguments.,define method var0 with self class instance and parser as arguments.,"def add_arguments ( self , parser ) : ","def var0 ( self , parser ) : "
define the method add_arguments with self and parser.,define method var0 with self and parser.,"def add_arguments ( self , parser ) : ","def var0 ( self , parser ) : "
define the method add_arguments with 2 arguments self and parser.,define method var0 with 2 arguments self and parser.,"def add_arguments ( self , parser ) : ","def var0 ( self , parser ) : "
format (using each model's default manager unless --all is specified)..   define the method add_arguments with arguments self and parser.,format (using each model's default manager var1 var2 is specified) var3 define method var4 with arguments self and parser.,"def add_arguments ( self , parser ) : ","def var4 ( self , parser ) : "
"migrations. Unmigrated apps will also have their initial_data fixture reloaded. Does not achieve a ""fresh install"" state.'   define the add_arguments with arguments self and parser.",migrations var0 var2 will also have var3 var4 fixture reloaded var6 not achieve var7 state.' define var9 with arguments self and parser.,"def add_arguments ( self , parser ) : ","def var9 ( self , parser ) : "
path of at least one fixture in the command line.   define the method add_arguments with 2 arguments: self and parser.,path of at least one fixture in command line var0 define method var1 with 2 arguments: self and parser.,"def add_arguments ( self , parser ) : ","def var1 ( self , parser ) : "
define the method add_arguments with 2 arguments: self and parser.,define method var0 with 2 arguments: self and parser.,"def add_arguments ( self , parser ) : ","def var0 ( self , parser ) : "
define the method add_arguments with self class instance and parse as the arguments.,define method var0 with self class instance and parse as arguments.,"def add_arguments ( self , parser ) : ","def var0 ( self , parser ) : "
define method add_arguments with class instance self and parser as the input arguments.,define method var0 with class instance self and parser as input arguments.,"def add_arguments ( self , parser ) : ","def var0 ( self , parser ) : "
define method add_arguments with self class instance and parser as the arguments.,define method var0 with self class instance and parser as arguments.,"def add_arguments ( self , parser ) : ","def var0 ( self , parser ) : "
define the method add_arguments with self class instance and parser as the arguments.,define method var0 with self class instance and parser as arguments.,"def add_arguments ( self , parser ) : ","def var0 ( self , parser ) : "
def method add_arguments with self class instance and parser as the arguments.,def method var0 with self class instance and parser as arguments.,"def add_arguments ( self , parser ) : ","def var0 ( self , parser ) : "
"define the method add_arguments, with 2 arguments self and parser.",define method var0 with 2 arguments self and parser.,"def add_arguments ( self , parser ) : ","def var0 ( self , parser ) : "
define the method with self class instance and parser as arguments.,define method with self class instance and parser as arguments.,"def add_arguments ( self , parser ) : ","def add_arguments ( self , parser ) : "
define the method add_aguments with arguments self and parser.,define method var0 with arguments self and parser.,"def add_arguments ( self , parser ) : ","def add_arguments ( self , parser ) : "
define the method self and blocks.,define method self and blocks.,"def add_blocks ( self , blocks ) : ","def add_blocks ( self , blocks ) : "
define the method add_css with arguments self and data.,define method var0 with arguments self and data.,"def add_css ( self , data ) : ","def var0 ( self , data ) : "
"define the method add_error with 3 arguments: self, field and errors.","define method var0 with 3 arguments: self, field and errors.","def add_error ( self , field , error ) : ","def var0 ( self , field , error ) : "
"if not return boolean False.   define the method add_fields with 3 arguments: self, form and index.","if not return boolean var0 define method var2 with 3 arguments: self, form and index.","def add_fields ( self , form , index ) : ","def var2 ( self , form , index ) : "
"define the method add_fields with 2 arguments: self, form and index.","define method var0 with 2 arguments: self, form and index.","def add_fields ( self , form , index ) : ","def var0 ( self , form , index ) : "
"define the method add_fields with 3 arguments: self, form and index.","define method var0 with 3 arguments: self, form and index.","def add_fields ( self , form , index ) : ","def var0 ( self , form , index ) : "
"define the method add_filters with 3 arguments: self, filterer and filters.",define method var0 with 3 arguments: self var1 and filters.,"def add_filters ( self , filterer , filters ) : ","def var0 ( self , var1 , filters ) : "
"define the method add_handlers with 3 arguments: self, logger and handlers.","define method var0 with 3 arguments: self, logger and handlers.","def add_handlers ( self , logger , handlers ) : ","def var0 ( self , logger , handlers ) : "
define the method add_initial_prefix with 2 arguments: self and field_name.,define method var0 with 2 arguments: self and var1 ,"def add_initial_prefix ( self , field_name ) : ","def var0 ( self , var1 ) : "
"define the method add_item with 17 arguments: self, title, link, description, author_email set to None, author_name set to None,","define method var0 with 17 arguments: self, title, link, description var2 set to var4 var6 set to var4 ","def add_item ( self , title , link , description , author_email = None , author_name = None , author_link = None , pubdate = None , comments = None , unique_id = None , unique_id_is_permalink = None , enclosure = None , categories = ( ) , item_copyright = None , ttl = None , updateddate = None , ** kwargs ) : ","def var0 ( self , title , link , description , var2 = var4 , var6 = var4 , author_link = var4 , pubdate = var4 , comments = var4 , unique_id = var4 , unique_id_is_permalink = var4 , enclosure = var4 , categories = ( ) , item_copyright = var4 , ttl = var4 , updateddate = var4 , ** kwargs ) : "
"define the method add_item_elements with 2 arguments, handler self and item.","define method var0 with 2 arguments, handler self and item.","def add_item_elements ( self , handler , item ) : ","def var0 ( self , handler , item ) : "
"define the method add_item_elements with 3 arguments: self, handler and item.","define method var0 with 3 arguments: self, handler and item.","def add_item_elements ( self , handler , item ) : ","def var0 ( self , handler , item ) : "
define the method __getitem__ with arguments self and name.,define method var0 with arguments self and name.,"def add_js ( self , data ) : ","def add_js ( self , data ) : "
define the function add_library with 2 arguments: self and lib.,define function var0 with 2 arguments: self and lib.,"def add_library ( self , lib ) : ","def var0 ( self , lib ) : "
define the function add_metaclass with an argument metaclass.,define function var0 with argument metaclass.,def add_metaclass ( metaclass ) : ,def var0 ( metaclass ) : 
"substitute it for value under the string "".moves.urllib"" appended to __name__ key of the sys.modules dictionary.   define the function add_move with an argument move.",substitute it for value under string var0 appended to var1 key of var2 dict var3 define function var4 with argument move.,def add_move ( move ) : ,def var4 ( move ) : 
"define function add_never_cache_headers, with response as an argument.",define function var0 with response as argument.,def add_never_cache_headers ( response ) : ,def var0 ( response ) : 
define the method add_post_render_callback with 2 arguments: self and callback.,define method var0 with 2 arguments: self and callback.,"def add_post_render_callback ( self , callback ) : ","def var0 ( self , callback ) : "
define the method add_prefix with 2 arguments: self and field_name.,define method var0 with 2 arguments: self and var1 ,"def add_prefix ( self , field_name ) : ","def var0 ( self , var1 ) : "
label set to return value of the function _ called with an string 'Delete' and required as boolean False.   define the method add_prefix with an argument self.,label set to return value of function var0 called with string var1 and required as boolean var2 define method var4 with argument self.,"def add_prefix ( self , index ) : ","def var4 ( self , index ) : "
"use it as an argument for the call to the force_str function, return the result.   define the method add_prefix with arguments self and prefix.","use it as argument for call to var0 function, return result var1 define method var2 with arguments self and prefix.","def add_prefix ( self , prefix ) : ","def var2 ( self , prefix ) : "
define the method add_root_elements with 2 arguments self and handler.,define method var0 with 2 arguments self and handler.,"def add_root_elements ( self , handler ) : ","def var0 ( self , handler ) : "
define the method add_root_elements with 2 arguments: self and handler.,define method var0 with 2 arguments: self and handler.,"def add_root_elements ( self , handler ) : ","def var0 ( self , handler ) : "
define the function add_to_builtins with an argument module.,define function var0 with argument module.,def add_to_builtins ( module ) : ,def var0 ( module ) : 
"define the method addQuickElement with 4 arguments: self, name, contents set to None and attrs set to None.","define method var0 with 4 arguments: self, name, contents set to var1 and var3 set to var1 ","def addQuickElement ( self , name , contents = None , attrs = None ) : ","def var0 ( self , name , contents = var1 , var3 = var1 ) : "
define the function address_string with an argument self.,define function var0 with argument self.,def address_string ( self ) : ,def var0 ( self ) : 
define the function addslashes with an argument value.,define function var0 with argument value.,def addslashes ( value ) : ,def var0 ( value ) : 
define the function advance_iterator with an argument it.,define function var0 with argument it.,def advance_iterator ( it ) : ,def var0 ( it ) : 
define the method all with argument self.,define method all with argument self.,def all ( self ) : ,def all ( self ) : 
define the function all_locale_paths.,define function var0 ,def all_locale_paths ( ) : ,def var0 ( ) : 
"is derived from the formset base class and with fields contained in attrs, return an instance of the obtained class.   define the function all_valid with an argument formsets.",is derived from var0 base class and with fields contained in var1 return instance of obtained class var2 define function var3 with argument var4 ,def all_valid ( formsets ) : ,def var3 ( var4 ) : 
and unpacked dictionary kwargs.   define the function allow_lazy with 2 arguments: func and unpacked list resultclasses.,and unpacked dict var0 define function var3 with 2 arguments: var2 and unpacked list var4 ,"def allow_lazy ( func , * resultclasses ) : ","def var3 ( var2 , * var4 ) : "
define the method app_dict with an argument self.,define method var0 with argument self.,def app_dict ( self ) : ,def var0 ( self ) : 
"define the method appendlist with 3 arguments: self, key and value.","define method var0 with 3 arguments: self, key and value.","def appendlist ( self , key , value ) : ","def var0 ( self , key , value ) : "
"define the method apply_response_fixes with self class instance, request and response as the arguments.","define method var0 with self class instance, request and response as arguments.","def apply_response_fixes ( self , request , response ) : ","def var0 ( self , request , response ) : "
"define the method args_check with 3 arguments: name, func and provided.",define method var0 with 3 arguments: name var1 and provided.,"def args_check ( name , func , provided ) : ","def var0 ( name , var1 , provided ) : "
define the method as_bytes with arguments self and unixfrom set to boolean False.,define method var0 with arguments self and var2 set to boolean var3 ,"def as_bytes ( self , unixfrom = False ) : ","def var0 ( self , var2 = var3 ) : "
define the method as_data with an argument self.,define method var0 with argument self.,def as_data ( self ) : ,def var0 ( self ) : 
define the method as_text with an argument self.,define method var0 with argument self.,def as_data ( self ) : ,def as_data ( self ) : 
"define the method as_hidden with 3 arguments: self, attrs set to None and unpacked dictionary kwargs.",define method var0 with 3 arguments: self var2 set to var3 and unpacked dict var4 ,"def as_hidden ( self , attrs = None , ** kwargs ) : ","def var0 ( self , var2 = var3 , ** var4 ) : "
"for every f and e in list of tuples of self dictionary key, pair entries.   define the method as_json with 2 argumens self and escape_html set to boolean False.","for every f and e in list of var0 of self dict key, pair entries var1 define method var2 with 2 var4 self and var5 set to boolean var7 ","def as_json ( self , escape_html = False ) : ","def var2 ( self , var5 = var7 ) : "
define the method as_json with 2 arguments self and escape_html set to boolean False.,define method var0 with 2 arguments self and var2 set to boolean var4 ,"def as_json ( self , escape_html = False ) : ","def var0 ( self , var2 = var4 ) : "
"<li%(html_class_attr)s>%(errors)s%(label)s %(field)s%(help_text)s</li>', error_row set to a a string '<li>%s</li>',   row_ender set to a string '</li>', help_text_html set to a string, ' <span class=""helptext"">%s</span>',   and errors_on_separate_row set to boolean False.   define the method as_p with an argument self.",<li%(html_class_attr)s>%(errors)s%(label)s %(field)s%(help_text)s</li>var9var0li>%s</li>var11</li>var17 <span class=var21>%s</span>' var12 and var22 set to boolean var24 define method var25 with argument self.,def as_p ( self ) : ,def var25 ( self ) : 
"separated by newline, use it as an argument for the call to the function mark_safe, return the result.   define the method as_p with an argument self.",separated by var0 use it as argument for call to function var1 return result var2 define method var3 with argument self.,def as_p ( self ) : ,def var3 ( self ) : 
define the method as_string with arguments self and unixfrom set to boolean False.,define method var0 with arguments self and var2 set to boolean var3 ,"def as_string ( self , unixfrom = False ) : ","def var0 ( self , var2 = var3 ) : "
define the method as_table with an argument self.,define method var0 with argument self.,def as_table ( self ) : ,def var0 ( self ) : 
"use it as an argument for the call to the function force_text, return the result.   define the method as_text with 3 arguments: self, attrs set to None and unpacked dictionary kwargs.",use it as argument for call to function var0 return result var2 define method var3 with 3 arguments: self var5 set to var6 and unpacked dict var7 ,"def as_text ( self , attrs = None , ** kwargs ) : ","def var3 ( self , var5 = var6 , ** var7 ) : "
"format_html_join, called with 3 arguments: empty string, string '<li>{0}{1}</li>', tuple containing tuples with 2 elements:   k and result of the function force_text with an argument v, for every k and v in items of the dictionary self, return the result.   define the method as_text with an argument self.","format_html_join, called with 3 arguments: empty string, string '<li>{0}{1}</li>', tuple containing tuples with 2 elements:   k and result of the function force_text with an argument v, for every k and v in items of the dictionary self, return the result.   define the method as_text with an argument self.",def as_text ( self ) : ,def as_text ( self ) : 
"format_html_join, called with 3 arguments: empty string, string '<li>{0}</li>', tuple containing results of the function,   force_text with an argument e, for every e in self, return the result.   define the method as_text with an argument self.","var0, called with 3 arguments: empty string, string '<li>{0}</li>', tuple containing results of function var4 with argument e, for every e in self, return result var2 define method var6 with argument self.",def as_text ( self ) : ,def var6 ( self ) : 
"define the method as_textarea with 3 arguments: self, attrs set to None and unpacked dictionary kwargs.",define method var0 with 3 arguments: self var2 set to var3 and unpacked dict var4 ,"def as_textarea ( self , attrs = None , ** kwargs ) : ","def var0 ( self , var2 = var3 , ** var4 ) : "
define the method as_tuple with 2 arguments: self and value.,define method var0 with 2 arguments: self and value.,"def as_tuple ( self , value ) : ","def var0 ( self , value ) : "
"<tr%(html_class_attr)s><th>%(label)s</th><td>%(errors)s%(field)s%(help_text)s</td></tr>', error_row set to a a string,   '<tr><td colspan=""2"">%s</td></tr>', row_ender set to a string '</td></tr>', help_text_html set to a string,   '<br /><span class=""helptext"">%s</span>' and errors_on_separate_row set to boolean False.   define the method as_ul with an argument self.",<tr%(html_class_attr)s><th>%(label)s</th><td>%(errors)s%(field)s%(help_text)s</td></tr>var7var0tr><td colspan=var9>%s</td></tr>var10</td></tr>var13<br /><span class=var17>%s</span>' and var18 set to boolean var20 define method var21 with argument self.,def as_ul ( self ) : ,def var21 ( self ) : 
"separated by newline, use it as an argument for the call to the function mark_safe, return the result.   define the method as_ul with an argument self.",separated by var0 use it as argument for call to function var1 return result var2 define method var3 with argument self.,def as_ul ( self ) : ,def var3 ( self ) : 
"with an argument escape_html for f, for every f and e in list of tuples of self dictionary key, pair entries, return the result.   define the method as_ul with an argument self.","with argument var0 for f, for every f and e in list of var1 of self dict key, pair entries, return result var2 define method var3 with argument self.",def as_ul ( self ) : ,def var3 ( self ) : 
"use the result as an argument for the call to the json.dumps function, return the result.   define the method as_text with an argument self.","use result as argument for call to var0 function, return result var1 define method var2 with argument self.",def as_ul ( self ) : ,def as_ul ( self ) : 
"if not evaluate the method self.form.error_class and return the result.   define the method as_widget with 4 arguments: self, widget set to None, attrs set to None, only_initial set to boolean False.","if not evaluate method self.form var1 and return result var2 define method var3 with 4 arguments: self, widget set to var5 var7 set to var5 var8 set to boolean var10 ","def as_widget ( self , widget = None , attrs = None , only_initial = False ) : ","def var3 ( self , widget = var5 , var7 = var5 , var8 = var10 ) : "
"define the function assertCountEqual with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.","define function var0 with 3 arguments: self, unpacked list var1 and unpacked dict var2 ","def assertCountEqual ( self , * args , ** kwargs ) : ","def var0 ( self , * var1 , ** var2 ) : "
"and unpacked dictionary kwargs, return the result.   define the function assertRaisesRegex with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.","and unpacked dict var0 return result var3 define function var4 with 3 arguments: self, unpacked list var2 and unpacked dict var0 ","def assertRaisesRegex ( self , * args , ** kwargs ) : ","def var4 ( self , * var2 , ** var0 ) : "
"and unpacked dictionary kwargs, return the result.   define the function assertRegex with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.","and unpacked dict var0 return result var3 define function var4 with 3 arguments: self, unpacked list var2 and unpacked dict var0 ","def assertRegex ( self , * args , ** kwargs ) : ","def var4 ( self , * var2 , ** var0 ) : "
"define the method assignment_tag with 4 arguments: self, func set to None, takes_context set to None and name set to None.",define method var0 with 4 arguments: self var1 set to var2 var5 set to var2 and name set to var2 ,"def assignment_tag ( self , func = None , takes_context = None , name = None ) : ","def var0 ( self , var1 = var2 , var5 = var2 , name = var2 ) : "
"define the method attach with 4 arguments: self, filename set to None, content set to None and mimetype set to None.","define method attach with 4 arguments: self, filename set to var0 content set to var0 and var3 set to var0 ","def attach ( self , filename = None , content = None , mimetype = None ) : ","def attach ( self , filename = var0 , content = var0 , var3 = var0 ) : "
"define the method attach_alternative with arguments self, content and mimetype.","define method var0 with arguments self, content and var1 ","def attach_alternative ( self , content , mimetype ) : ","def var0 ( self , content , var1 ) : "
"define the method attach_file with arguments self, path and mimetype set to None.","define method var0 with arguments self, path and var2 set to var3 ","def attach_file ( self , path , mimetype = None ) : ","def var0 ( self , path , var2 = var3 ) : "
define the method auto_id with an argument self.,define method var0 with argument self.,def auto_id ( self ) : ,def var0 ( self ) : 
define the method autocomplete with an argument self.,define method var0 with argument self.,def autocomplete ( self ) : ,def var0 ( self ) : 
define the function autodiscover_modules with 2 arguments unpacked list args and unpacked dictionary kwargs.,define function var0 with 2 arguments unpacked list var1 and unpacked dict var2 ,"def autodiscover_modules ( * args , ** kwargs ) : ","def var0 ( * var1 , ** var2 ) : "
define the function autoescape with 2 arguments: parser and token.,define function var0 with 2 arguments: parser and token.,"def autoescape ( parser , token ) : ","def var0 ( parser , token ) : "
define the function available_attrs with an argument fn.,define function var0 with argument var1 ,def available_attrs ( fn ) : ,def var0 ( var1 ) : 
define the function avoid_wrapping with an argument value.,define function var0 with argument value.,def avoid_wrapping ( value ) : ,def var0 ( value ) : 
define the function b with an argument s.,define function b with argument var0,def b ( s ) : ,def b ( s ) : 
define the method B with an argument self.,define method B with argument self.,def B ( self ) : ,def B ( self ) : 
"integer 212, integer 243, integer 273, integer 304 and integer 334.   define the method b with an argument self.","integer 212, integer 243, integer 273, integer 304 and integer 334 var0 define method b with argument self.",def b ( self ) : ,def b ( self ) : 
define the function b64_decode with an argument s.,define function var0 with argument var1,def b64_decode ( s ) : ,def var0 ( s ) : 
define the function b64_encode with an argument s.,define function var0 with argument var1,def b64_encode ( s ) : ,def var0 ( s ) : 
define the method back with an argument self.,define method back with argument self.,def back ( self ) : ,def back ( self ) : 
define the functionbase36_to_int with an argument s.,define var0 with argument var1,def base36_to_int ( s ) : ,def base36_to_int ( s ) : 
"define the function b64_hmac with arguments salt, value and key.","define function var0 with arguments salt, value and key.","def base64_hmac ( salt , value , key ) : ","def base64_hmac ( salt , value , key ) : "
"define the function become_daemon with 4 arguments: our_home_dir set to '.', out_log set to a string '/dev/null',","define function var0 with 4 arguments: var2 set to var4 var5 set to string var7,","def become_daemon ( our_home_dir = '.' , out_log = '/dev/null' , err_log = '/dev/null' , umask = 0o022 ) : ","def var0 ( var2 = var4 , var5 = '/dev/null' , err_log = '/dev/null' , umask = 0o022 ) : "
"define the function become_daemon with 4 argument: our_home_dir set to '.', out_log set to None, err_log set to None,",define function var0 with 4 argument: var2 set to var4 var5 set to var7 var9 set to var7 ,"def become_daemon ( our_home_dir = '.' , out_log = None , err_log = None , umask = 0o022 ) : ","def var0 ( var2 = var4 , var5 = var7 , var9 = var7 , umask = 0o022 ) : "
define the function blankout with 2 arguments: src and char.,define function var0 with 2 arguments: var1 and char.,"def blankout ( src , char ) : ","def var0 ( var1 , char ) : "
define the method body with an argument self.,define method body with argument self.,def body ( self ) : ,def body ( self ) : 
define the function boolean_check with an argument v.,define function var0 with argument var1,def boolean_check ( v ) : ,def var0 ( v ) : 
"define the method bound_data with arguments self, data and initial.","define method var0 with arguments self, data and initial.","def bound_data ( self , data , initial ) : ","def var0 ( self , data , initial ) : "
define the function bound_func with 2 arguments: unpacked list args2 and unpacked dictionary kwargs2.,define function var0 with 2 arguments: unpacked list var1 and unpacked dict var2 ,"def bound_func ( * args2 , ** kwargs2 ) : ","def var0 ( * var1 , ** var2 ) : "
define the method bpython with an argument self.,define method var0 with argument self.,def bpython ( self ) : ,def var0 ( self ) : 
define the method build_absolute_uri with an arguments self and location set to None.,define method var0 with arguments self and location set to var2 ,"def build_absolute_uri ( self , location = None ) : ","def var0 ( self , location = var2 ) : "
"define the method build_attrs with 3 arguments: self, extra_attrs set to None and unpacked dictionary kwargs.",define method var0 with 3 arguments: self var2 set to var4 and unpacked dict var5 ,"def build_attrs ( self , extra_attrs = None , ** kwargs ) : ","def var0 ( self , var2 = var4 , ** var5 ) : "
"define the function build_instance with 3 arguments: Model, data and db.",define function var0 with 3 arguments: var2 data and db.,"def build_instance ( Model , data , db ) : ","def var0 ( var2 , data , db ) : "
define the method build_potfiles with an argument self.,define method var0 with argument self.,def build_potfiles ( self ) : ,def var0 ( self ) : 
"define the function build_request_repr with arguments: request, path_override set to None, GET_override set to None,",define function var0 with arguments: request var2 set to var4 var6 set to var4 ,"def build_request_repr ( request , path_override = None , GET_override = None , POST_override = None , COOKIES_override = None , META_override = None ) : ","def var0 ( request , var2 = var4 , var6 = var4 , POST_override = var4 , COOKIES_override = var4 , META_override = var4 ) : "
define the function byte2int with an argument bs.,define function var0 with argument bs.,def byte2int ( bs ) : ,def var0 ( bs ) : 
"where '%s' is replaced with request.__class__.__name__, path, return value of the function six.text_type called with an argument get,   return value of the function six.text_type called with an argument post, return value of the function six.text_type,   called with an argument cookies and return value of the function six.text_type called with an argument meta.   define the function bytes_to_text with 2 arguments s and encoding.","var0 var1 is replaced with var2 path, return value of function six var7 called with argument get var11 return value of function six var7 called with argument post, return value of function six var7 called with argument cookies and return value of function six var7 called with argument var14 var11 define function var15 with 2 arguments s and encoding.","def bytes_to_text ( s , encoding ) : ","def var15 ( s , encoding ) : "
define the method c with an argument self.,define method c with argument self.,def c ( self ) : ,def c ( self ) : 
"value under the MISSES key of the stats dictionary, maxsize and length of cache.   define the function cache_clear.",value under var0 key of var1 dict var2 and length of cache var3 define function var4 ,def cache_clear ( ) : ,def var4 ( ) : 
define the function cache_info.,define function var0 ,def cache_info ( ) : ,def var0 ( ) : 
"define the method cache_key with 3 arguments: self, template_name and template_dirs.",define method var0 with 3 arguments: self var1 and var3 ,"def cache_key ( self , template_name , template_dirs ) : ","def var0 ( self , var1 , var3 ) : "
define the function calculate_app_template_dirs.,define function var0 ,def calculate_app_template_dirs ( ) : ,def var0 ( ) : 
"define the function call_command with 3 arguments: name, unpacked list args and unpacked dictionary options.","define function var0 with 3 arguments: name, unpacked list var1 and unpacked dict options.","def call_command ( name , * args , ** options ) : ","def var0 ( name , * var1 , ** options ) : "
define the function callable with an argument obj.,define function callable with argument var0 ,def callable ( obj ) : ,def callable ( var0 ) : 
define the method callback with an argument self.,define method callback with argument self.,def callback ( self ) : ,def callback ( self ) : 
define the function camel_case_to_spaces with an argument value.,define function var0 with argument value.,def camel_case_to_spaces ( value ) : ,def var0 ( value ) : 
define the function capfirst with an argument value.,define function var0 with argument value.,def capfirst ( value ) : ,def var0 ( value ) : 
define the function catalog.,define function catalog.,def catalog ( ) : ,def catalog ( ) : 
define the function center with 2 arguments value and arg.,define function center with 2 arguments value and var0 ,"def center ( value , arg ) : ","def center ( value , var0 ) : "
define the method cfg_convert with 2 arguments: self and value.,define method var0 with 2 arguments: self and value.,"def cfg_convert ( self , value ) : ","def var0 ( self , value ) : "
define the method changed_data with an argument self.,define method var0 with argument self.,def changed_data ( self ) : ,def var0 ( self ) : 
"define the method chars with 4 arguments: self, num, truncate set to None, html set to boolean False.",define method chars with 4 arguments: self var0 truncate set to var1 html set to boolean var2 ,"def chars ( self , num , truncate = None , html = False ) : ","def chars ( self , var0 , truncate = var1 , html = var2 ) : "
"define the method check with 4 arguments: self, app_configs set to None, tags set to None, display_num_errors set to boolean False.",define method check with 4 arguments: self var0 set to var2 tags set to var2 var4 set to boolean var6 ,"def check ( self , app_configs = None , tags = None , display_num_errors = False ) : ","def check ( self , var0 = var2 , tags = var2 , var4 = var6 ) : "
define the function check_1_6_compatibility with argument kwargs dictionary.,define function var0 with argument var1 dict.,def check_1_6_compatibility ( ** kwargs ) : ,def var0 ( ** var1 ) : 
define the function check_1_7_compatibility with argument kwargs dictionary.,define function var0 with argument var1 dict.,def check_1_7_compatibility ( ** kwargs ) : ,def var0 ( ** var1 ) : 
define the function check_all_models with app_configs defaulting to None and unpacked dictionary kwargs as arguments.,define function var0 with var2 defaulting to var4 and unpacked dict var5 as arguments.,"def check_all_models ( app_configs = None , ** kwargs ) : ","def var0 ( var2 = var4 , ** var5 ) : "
define the function check_errors with argument fn.,define function var0 with argument var1 ,def check_errors ( fn ) : ,def var0 ( var1 ) : 
define the function check_for_language with an argument lang_code.,define function var0 with argument var1 ,def check_for_language ( lang_code ) : ,def var0 ( var1 ) : 
define the function check_for_migrations with 2 arguments: app_config and connection.,define function var0 with 2 arguments: var1 and connection.,"def check_for_migrations ( app_config , connection ) : ","def var0 ( var1 , connection ) : "
define the method check_migrations with an argument self.,define method var0 with argument self.,def check_migrations ( self ) : ,def var0 ( self ) : 
"define the function check_model_signals with app_config defaulting to None and unpacked dictionary kwargs as arguments,","define function var0 with var2 defaulting to var4 and unpacked dict var5 as arguments,","def check_model_signals ( app_configs = None , ** kwargs ) : ","def var0 ( app_configs = var4 , ** var5 ) : "
define the method check_programs with an argument unpacked list programs.,define method var0 with argument unpacked list programs.,def check_programs ( * programs ) : ,def var0 ( * programs ) : 
define the method choice with 2 arguments: self and obj.,define method choice with 2 arguments: self and var0 ,"def choice ( self , obj ) : ","def choice ( self , var0 ) : "
define the method chunks with arguments self and chunk_size defaulting to None.,define method chunks with arguments self and var0 defaulting to var2 ,"def chunks ( self , chunk_size = None ) : ","def chunks ( self , var0 = var2 ) : "
define the method chunks with arguments self ad chunk_size set to None.,define method chunks with arguments self ad var0 set to var2 ,"def chunks ( self , chunk_size = None ) : ","def chunks ( self , var0 = var2 ) : "
"define the method clean with arguments self, data and initial set to None.","define method clean with arguments self, data and initial set to var0 ","def clean ( self , data , initial = None ) : ","def clean ( self , data , initial = var0 ) : "
define the method clean with arguments self and value.,define method clean with arguments self and value.,"def clean ( self , value ) : ","def clean ( self , value ) : "
define the method clean with 2 arguments self and value.,define method clean with 2 arguments self and value.,"def clean ( self , value ) : ","def clean ( self , value ) : "
and unpacked dictionary kwargs.   define the method clean with 2 arguments: self and value.,and unpacked dict var0 define method clean with 2 arguments: self and value.,"def clean ( self , value ) : ","def clean ( self , value ) : "
define the method clean with 2 arguments: self and value.,define method clean with 2 arguments: self and value.,"def clean ( self , value ) : ","def clean ( self , value ) : "
define the method clean with an argument self.,define method clean with argument self.,def clean ( self ) : ,def clean ( self ) : 
"define the function clean_ipv6_address with 3 arguments: ip_str, unpack_ipv4 set to boolean False and error_message,",define function var0 with 3 arguments: var2 var4 set to boolean var6 and var7 ,"def clean_ipv6_address ( ip_str , unpack_ipv4 = False , error_message = _ ( 'This is not a valid IPv6 address.' ) ) : ","def var0 ( var2 , var4 = var6 , var7 = _ ( 'This is not a valid IPv6 address.' ) ) : "
define the method cleaned_data with an argument self.,define method var0 with argument self.,def cleaned_data ( self ) : ,def var0 ( self ) : 
define the function cleanup_url with an argument url.,define function var0 with argument url.,def cleanup_url ( url ) : ,def var0 ( url ) : 
"define the method clear with self class instance as the argument,","define method clear with self class instance as argument,",def clear ( self ) : ,def clear ( self ) : 
"substitute the '%s' with table and list containing first element of cursor.fetchone method, respectively.   define the method clear with argument self.","substitute var0 with table and list containing first element of var1 method, respectively var2 define method clear with argument self.",def clear ( self ) : ,def clear ( self ) : 
define the method clear with argument self.,define method clear with argument self.,def clear ( self ) : ,def clear ( self ) : 
define the method clear with an argument self.,define method clear with argument self.,def clear ( self ) : ,def clear ( self ) : 
"joining string '%r: %r' formated with k and v into a string, separated with ', ', use it to format a string '{%s}', return it.   define the method clear with an argument self.","joining string var0 formated with k and v into string, separated with var1, use it to format string var2, return it var4 define method clear with argument self.",def clear ( self ) : ,def clear ( self ) : 
"define method clear_cdata_mode, with self class instance as an argument.",define method var0 with self class instance as argument.,def clear_cdata_mode ( self ) : ,def var0 ( self ) : 
define the method clear_checkbox_id with 2 arguments: self and name.,define method var0 with 2 arguments: self and name.,"def clear_checkbox_id ( self , name ) : ","def var0 ( self , name ) : "
define the method clear_checkbox_name with 2 arguments: self and name.,define method var0 with 2 arguments: self and name.,"def clear_checkbox_name ( self , name ) : ","def var0 ( self , name ) : "
define the function clear_script_prefix.,define function var0 ,def clear_script_prefix ( ) : ,def var0 ( ) : 
define the function clear_url_caches.,define function var0 ,def clear_url_caches ( ) : ,def var0 ( ) : 
"define the close method with 2 arguments, self and dictionary of argument pairs kwargs.","define close method with 2 arguments, self and dict of argument pairs var0 ","def close ( self , ** kwargs ) : ","def close ( self , ** var0 ) : "
define the method close with self and dictionary pairs of elements kwargs.,define method close with self and dict pairs of elements var0 ,"def close ( self , ** kwargs ) : ","def close ( self , ** var0 ) : "
define the method close with argument self.,define method close with argument self.,def close ( self ) : ,def close ( self ) : 
define the method close with self class instance as the argument.,define method close with self class instance as argument.,def close ( self ) : ,def close ( self ) : 
define the method close with an argument self.,define method close with argument self.,def close ( self ) : ,def close ( self ) : 
self._files is an instance of class MultiValueDict.   define the method close with an argument self.,var0 is instance of class var1 define method close with argument self.,def close ( self ) : ,def close ( self ) : 
define the function close_caches with dictionary pair of elements kwargs as argument.,define function var0 with dict pair of elements var1 as argument.,def close_caches ( ** kwargs ) : ,def var0 ( ** var1 ) : 
define the method closed with self as the argument.,define method closed with self as argument.,def closed ( self ) : ,def closed ( self ) : 
define the function code_changed.,define function var0 ,def code_changed ( ) : ,def var0 ( ) : 
"define function color_style, without input arguments.",define function var0 var1 input arguments.,def color_style ( ) : ,def var0 ( ) : 
"and '8' for 'conceal'.   define the method colorize with 3 arguments: text set to an empty string, opts set to an empty tuple and unpacked dictionary kwargs.","and var0 for var1 var2 define method colorize with 3 arguments: text set to empty string, opts set to empty tuple and unpacked dict var3 ","def colorize ( text = '' , opts = ( ) , ** kwargs ) : ","def colorize ( text = '' , opts = ( ) , ** var3 ) : "
"define the method combine with 3 arguments: cls, date and time.","define method combine with 3 arguments: cls, date and time.","def combine ( cls , date , time ) : ","def combine ( cls , date , time ) : "
define the function comment with 2 arguments: parser and token.,define function comment with 2 arguments: parser and token.,"def comment ( parser , token ) : ","def comment ( parser , token ) : "
"define the method common_logger_config with 4 arguments: self, logger, config and incremental set to boolean False.","define method var0 with 4 arguments: self, logger var2 and incremental set to boolean var3 ","def common_logger_config ( self , logger , config , incremental = False ) : ","def var0 ( self , logger , var2 , incremental = var3 ) : "
define the function compare_ordering_key with an argument k.,define function var0 with argument var1,def compare_ordering_key ( k ) : ,def var0 ( k ) : 
define the function compile_filter with 2 arguments: self and token.,define function var0 with 2 arguments: self and token.,"def compile_filter ( self , token ) : ","def var0 ( self , token ) : "
"where '%s' is replaced with parse_until elements joined into a string, separated with ', '.   define the method compile_filter_error with 3 arguments: self, token and e.","var0 var1 is replaced with var2 elements joined into string, separated with var4 var5 define method var6 with 3 arguments: self, token and var8","def compile_filter_error ( self , token , e ) : ","def var6 ( self , token , e ) : "
"define the method compile_filter_error with 3 arguments: self, token and e.","define method var0 with 3 arguments: self, token and var1","def compile_filter_error ( self , token , e ) : ","def var0 ( self , token , e ) : "
"substitute __name__ field of the result for function_name, in not, substitute func.__name__ for function_name.   define the function compile_func with 2 arguments: parser and token.","substitute __name__ field of result for var0 in not, substitute var2 for var0 define function var4 with 2 arguments: parser and token.","def compile_func ( parser , token ) : ","def var4 ( parser , token ) : "
"define the method compile_function_error with 3 arguments: self, token and e.","define method var0 with 3 arguments: self, token and var1","def compile_function_error ( self , token , e ) : ","def var0 ( self , token , e ) : "
define compile_messages method with self class instance and locations as a arguments.,define var0 method with self class instance and locations as arguments.,"def compile_messages ( self , locations ) : ","def var0 ( self , locations ) : "
define the method compile_string with 2 arguments: template_string and origin.,define method var0 with 2 arguments: var1 and origin.,"def compile_string ( template_string , origin ) : ","def var0 ( var1 , origin ) : "
"define the method complain with 3 arguments: self, unpacked dictionary wargs and unpacked dictionary kwargs.","define method complain with 3 arguments: self, unpacked dict var0 and unpacked dict var1 ","def complain ( self , * wargs , ** kwargs ) : ","def complain ( self , * var0 , ** var1 ) : "
define the method compress with arguments self and data_list.,define method compress with arguments self and var0 ,"def compress ( self , data_list ) : ","def compress ( self , var0 ) : "
define the function compress_sequence with an argument sequence.,define function var0 with argument sequence.,def compress_sequence ( sequence ) : ,def var0 ( sequence ) : 
define the function compress_string with an argument s.,define function var0 with argument var1,def compress_string ( s ) : ,def var0 ( s ) : 
define the function conditional_content_removal with request and response as the arguments.,define function var0 with request and response as arguments.,"def conditional_content_removal ( request , response ) : ","def var0 ( request , response ) : "
define the function conditional_escape with an argument text.,define function var0 with argument text.,def conditional_escape ( text ) : ,def var0 ( text ) : 
define the method configure with an argument self.,define method configure with argument self.,def configure ( self ) : ,def configure ( self ) : 
define the method configure_custom with 2 arguments: self and config.,define method var0 with 2 arguments: self and config.,"def configure_custom ( self , config ) : ","def var0 ( self , config ) : "
define the method configure_filter with 2 arguments: self and config.,define method var0 with 2 arguments: self and config.,"def configure_filter ( self , config ) : ","def var0 ( self , config ) : "
define the method configure_formatter with 2 arguments: self and config.,define method var0 with 2 arguments: self and config.,"def configure_formatter ( self , config ) : ","def var0 ( self , config ) : "
define the method configure_handler with 2 arguments: self and config.,define method var0 with 2 arguments: self and config.,"def configure_handler ( self , config ) : ","def var0 ( self , config ) : "
"define the method configure_logger with 4 arguments: self, name, config, incremental set to boolean False.","define method var0 with 4 arguments: self, name var2 incremental set to boolean var3 ","def configure_logger ( self , name , config , incremental = False ) : ","def var0 ( self , name , var2 , incremental = var3 ) : "
and 3 additional pairs of dictionaries for string.   define the function configure_logging with 2 arguments: logging_config and logging_settings.,and 3 additional pairs of dictionaries for string var0 define function var1 with 2 arguments: var2 and var4 ,"def configure_logging ( logging_config , logging_settings ) : ","def var1 ( var2 , var4 ) : "
"define the method configure_root with 3 arguments: self, config and incremental set to boolean False.",define method var0 with 3 arguments: self var2 and incremental set to boolean var3 ,"def configure_root ( self , config , incremental = False ) : ","def var0 ( self , var2 , incremental = var3 ) : "
and connection as the result of the method self.connection.   define the connection with an argument self.,and connection as result of method var0 define connection with argument self.,def connection ( self ) : ,def connection ( self ) : 
define the function constant_time_compare with 2 arguments: val1 and val2.,define function var0 with 2 arguments: var1 and var2 ,"def constant_time_compare ( val1 , val2 ) : ","def var0 ( var1 , var2 ) : "
call the function constant_time_compare with 2 arguments: val1 and val2.,call function var0 with 2 arguments: var1 and var2 ,"def constant_time_compare ( val1 , val2 ) : ","def var0 ( var1 , var2 ) : "
"define the function construct_instance with 4 arguments: form, instance, fields set to None and exclude set to None.","define function var0 with 4 arguments: form, instance, fields set to var2 and exclude set to var2 ","def construct_instance ( form , instance , fields = None , exclude = None ) : ","def var0 ( form , instance , fields = var2 , exclude = var2 ) : "
define the function contains with 2 arguments source and inst.,define function contains with 2 arguments source and inst.,"def contains ( source , inst ) : ","def contains ( source , inst ) : "
define the method content with 2 arguments: self and value.,define method content with 2 arguments: self and value.,"def content ( self , value ) : ","def content ( self , value ) : "
define the method content with self and value.,define method content with self and value.,"def content ( self , value ) : ","def content ( self , value ) : "
define the method content with an argument self.,define method content with argument self.,def content ( self ) : ,def content ( self ) : 
"define convert method with self class instance, number, from_digits, to_digits and sign as arguments.","define convert method with self class instance, number var0 var1 and sign as arguments.","def convert ( self , number , from_digits , to_digits , sign ) : ","def convert ( self , number , var0 , var1 , sign ) : "
define the method convert with 2 arguments: self and value.,define method convert with 2 arguments: self and value.,"def convert ( self , value ) : ","def convert ( self , value ) : "
define the function convert_old_style_list with an argument list_.,define function var0 with argument var1 ,def convert_old_style_list ( list_ ) : ,def var0 ( var1 ) : 
"and list with results of the function force_str with an argument i, for every i in v, only if v is a list or a tuple,   otherwise second element is result of the function force_str with an argument v, for every k and v in query,   and doseq, return the result.   define the function cookie_date with an argument epoch_seconds set to None.","and list with results of function var0 with argument i, for every i in v, only if v is list or tuple var4 otherwise second element is result of function var0 with argument v, for every k and v in query var4 and var7 return result var4 define function var8 with argument var10 set to var12 ",def cookie_date ( epoch_seconds = None ) : ,def var8 ( var10 = var12 ) : 
define COOKIES method with self as the argument.,define var0 method with self as argument.,def COOKIES ( self ) : ,def var0 ( self ) : 
define the method copy with an argument self.,define method copy with argument self.,def copy ( self ) : ,def copy ( self ) : 
"define the method copy_plural_forms with arguments self, msgs and locale.","define method var0 with arguments self, msgs and locale.","def copy_plural_forms ( self , msgs , locale ) : ","def var0 ( self , msgs , locale ) : "
define the function copystat with arguments src and dst.,define function var0 with arguments var1 and var2 ,"def copystat ( src , dst ) : ","def var0 ( var1 , var2 ) : "
define the function create_bound_function with 2 arguments: func and obj.,define function var0 with 2 arguments: func and var1 ,"def create_bound_method ( func , obj ) : ","def create_bound_method ( func , var1 ) : "
define the method create_nodelist with an argument self.,define method var0 with argument self.,def create_nodelist ( self ) : ,def var0 ( self ) : 
"define the method create_parser with 3 arguments: self, prog_name and subcommand.",define method var0 with 3 arguments: self var1 and var3 ,"def create_parser ( self , prog_name , subcommand ) : ","def var0 ( self , var1 , var3 ) : "
"define the method id_for_label with arguments self, name, field, value, val, choices and none_value.","define method var0 with arguments self, name, field, value var1 choices and var2 ","def create_select ( self , name , field , value , val , choices , none_value ) : ","def create_select ( self , name , field , var1ue , var1 , choices , var2 ) : "
"define the method create_table with arguments self, database and tablename.","define method var0 with arguments self, database and var1 ","def create_table ( self , database , tablename ) : ","def var0 ( self , database , var1 ) : "
"define the method create_token with 3 arguments: self, token_string and in_tag.",define method var0 with 3 arguments: self var1 and var3 ,"def create_token ( self , token_string , in_tag ) : ","def var0 ( self , var1 , var3 ) : "
"define the method create_token with 4 arguments: self, token_string, source and in_tag.",define method var0 with 4 arguments: self var1 source and var3 ,"def create_token ( self , token_string , source , in_tag ) : ","def var0 ( self , var1 , source , var3 ) : "
define the method create_var with 2 arguments: self and value.,define method var0 with 2 arguments: self and value.,"def create_var ( self , value ) : ","def var0 ( self , value ) : "
define the method create_variable_node with 2 arguments: self and contents.,define method var0 with 2 arguments: self and contents.,"def create_variable_node ( self , contents ) : ","def var0 ( self , contents ) : "
define the method create_variable_node with 2 arguments self and filter_expression.,define method var0 with 2 arguments self and var1 ,"def create_variable_node ( self , filter_expression ) : ","def var0 ( self , var1 ) : "
define the method created_time with arguments self and name.,define method var0 with arguments self and name.,"def created_time ( self , name ) : ","def var0 ( self , name ) : "
"use the result as an argument for the call to the function datetime.fromtimestamp, return the result.   define the method created_time with arguments self and name.",use result as argument for call to function var0 return result var1 define method var2 with arguments self and name.,"def created_time ( self , name ) : ","def var2 ( self , name ) : "
define the function csrf with an argument request.,define function var0 with argument request.,def csrf ( request ) : ,def var0 ( request ) : 
define the function csrf_token with 2 arguments: parser and token.,define function var0 with 2 arguments: parser and token.,"def csrf_token ( parser , token ) : ","def var0 ( parser , token ) : "
define the method css_classes with 2 arguments: self and extra_classes set to None.,define method var0 with 2 arguments: self and var2 set to var4 ,"def css_classes ( self , extra_classes = None ) : ","def var0 ( self , var2 = var4 ) : "
"define the function curry with 3 arguments: _curried_func, unpacked list args and unpacked dictionary kwargs.","define function curry with 3 arguments: _curried_func, unpacked list var0 and unpacked dict var1 ","def curry ( _curried_func , * args , ** kwargs ) : ","def curry ( _curried_func , * var0 , ** var1 ) : "
"define the function custom_sql_for_model with 3 arguments: app_config, style and connection.",define function var0 with 3 arguments: var1 style and connection.,"def custom_sql_for_model ( model , style , connection ) : ","def var0 ( model , style , connection ) : "
define the function cut with 2 arguments value and arg.,define function cut with 2 arguments value and var0 ,"def cut ( value , arg ) : ","def cut ( value , var0 ) : "
define the function cycle with 2 arguments: parser and token.,define function cycle with 2 arguments: parser and token.,"def cycle ( parser , token ) : ","def cycle ( parser , token ) : "
define the method d with an argument self.,define method d with argument self.,def d ( self ) : ,def d ( self ) : 
define the method data with an argument self.,define method data with argument self.,def data ( self ) : ,def data ( self ) : 
"and time.tzinfo, return the result.   define the method date with an argument self.","and time.tzinfo, return result var0 define method date with argument self.",def date ( self ) : ,def date ( self ) : 
define the function date with 2 arguments value and arg set to None.,define function date with 2 arguments value and var0 set to var1 ,"def date ( value , arg = None ) : ","def date ( value , var0 = var1 ) : "
"define the function date_format with 3 arguments: value, format set to None and use_l10n set to None.","define function var0 with 3 arguments: value, format set to var2 and var4 set to var2 ","def date_format ( value , format = None , use_l10n = None ) : ","def var0 ( value , format = var2 , var4 = var2 ) : "
define the function deactivate.,define function deactivate.,def deactivate ( ) : ,def deactivate ( ) : 
define the function deactivate_all.,define function var0 ,def deactivate_all ( ) : ,def var0 ( ) : 
define the function debug with 2 arguments: parser and token.,define function debug with 2 arguments: parser and token.,"def debug ( parser , token ) : ","def debug ( parser , token ) : "
define the function debug with an argument request.,define function debug with argument request.,def debug ( request ) : ,def debug ( request ) : 
"define the function dec with an argument func,",define function dec with argument var0 ,def dec ( func ) : ,def dec ( var0 ) : 
define the function dec with an argument func.,define function dec with argument var0 ,def dec ( func ) : ,def dec ( var0 ) : 
and name set to None.   define the function dec with an argument func.,and name set to var0 define function dec with argument var2 ,def dec ( func ) : ,def dec ( var2 ) : 
define the decode method with self class instance and s as arguments.,define decode method with self class instance and s as arguments.,"def decode ( self , s ) : ","def decode ( self , s ) : "
define the method decompress with 2 arguments: self and value.,define method decompress with 2 arguments: self and value.,"def decompress ( self , value ) : ","def decompress ( self , value ) : "
define the function deconstruct with an argument obj.,define function deconstruct with argument var0 ,def deconstruct ( obj ) : ,def deconstruct ( var0 ) : 
define the function deconstructible with 2 arguments: unpacked list args and unpacked dictionary kwargs.,define function var0 with 2 arguments: unpacked list var1 and unpacked dict var2 ,"def deconstructible ( * args , ** kwargs ) : ","def var0 ( * var1 , ** var2 ) : "
define the function decorating_function with an argument user_function.,define function var0 with argument var1 ,def decorating_function ( user_function ) : ,def var0 ( var1 ) : 
define the function decorator with an argument klass.,define function decorator with argument var0 ,def decorator ( klass ) : ,def decorator ( var0 ) : 
define the function decorator_from_middleware with an argument middleware_class.,define function var0 with argument var1 ,def decorator_from_middleware ( middleware_class ) : ,def var0 ( var1 ) : 
define the function decorator_from_middleware_with_args with an argument middleware_class.,define function var0 with argument var1 ,def decorator_from_middleware_with_args ( middleware_class ) : ,def var0 ( var1 ) : 
"define the method decr with arguments self, key, delta defaulting to integer 1 and version defaulting to None.","define method var0 with arguments self, key, delta defaulting to integer 1 and version defaulting to var1 ","def decr ( self , key , delta = 1 , version = None ) : ","def var0 ( self , key , delta = 1 , version = var1 ) : "
"define the method decr with self, key, delta defaulting to integer 1 and version defaulting to None as arguments.","define method var0 with self, key, delta defaulting to integer 1 and version defaulting to var1 as arguments.","def decr ( self , key , delta = 1 , version = None ) : ","def var0 ( self , key , delta = 1 , version = var1 ) : "
"define the method decr_version with 4 arguments, self, key, delta defaulting to integer 1 and version defaulting to None.","define method var0 with 4 arguments, self, key, delta defaulting to integer 1 and version defaulting to var2 ","def decr_version ( self , key , delta = 1 , version = None ) : ","def var0 ( self , key , delta = 1 , version = var2 ) : "
define the method defalt with arguments self and o.,define method var0 with arguments self and var1,"def default ( self , o ) : ","def default ( self , o ) : "
define the function default with 2 arguments value and arg.,define function default with 2 arguments value and var0 ,"def default ( value , arg ) : ","def default ( value , var0 ) : "
define the function default_if_none with 2 arguments value and arg.,define function var0 with 2 arguments value and var1 ,"def default_if_none ( value , arg ) : ","def var0 ( value , var1 ) : "
"define the function default_key_func with 3 arguments, key, key_prefix and version.","define function var0 with 3 arguments, key var1 and version.","def default_key_func ( key , key_prefix , version ) : ","def var0 ( key , var1 , version ) : "
"define delete method with self class instance, key and version set to None, as arguments.","define delete method with self class instance, key and version set to var0 as arguments.","def delete ( self , key , version = None ) : ","def delete ( self , key , version = var0 ) : "
"define the method delete with self class instance, key and version set to None as arguments.","define method delete with self class instance, key and version set to var0 as arguments.","def delete ( self , key , version = None ) : ","def delete ( self , key , version = var0 ) : "
"define the method delete with 3 arguments: self, key, and version set to None.","define method delete with 3 arguments: self, key, and version set to var0 ","def delete ( self , key , version = None ) : ","def delete ( self , key , version = var0 ) : "
"define the method delete with self class instance, key and version defaulting to None as arguments.","define method delete with self class instance, key and version defaulting to var0 as arguments.","def delete ( self , key , version = None ) : ","def delete ( self , key , version = var0 ) : "
"define the method delete with self, key and version set to None as arguments.","define method delete with self, key and version set to var0 as arguments.","def delete ( self , key , version = None ) : ","def delete ( self , key , version = var0 ) : "
define the method delete with arguments self and name.,define method delete with arguments self and name.,"def delete ( self , name ) : ","def delete ( self , name ) : "
"define the method delete_cookie with 4 arguments: self, key, path set to character '/' and domain set to None.","define method var0 with 4 arguments: self, key, path set to character var2 and domain set to var3 ","def delete_cookie ( self , key , path = '/' , domain = None ) : ","def var0 ( self , key , path = var2 , domain = var3 ) : "
define the method delete_first_token with an argument self.,define method var0 with argument self.,def delete_first_token ( self ) : ,def var0 ( self ) : 
"define the method delete_many with arguments self, keys and version defaulting to None.","define method var0 with arguments self, keys and version defaulting to var2 ","def delete_many ( self , keys , version = None ) : ","def var0 ( self , keys , version = var2 ) : "
"define the method delete_many with 3 arguments: self, keys, and version set to None.","define method var0 with 3 arguments: self, keys, and version set to var2 ","def delete_many ( self , keys , version = None ) : ","def var0 ( self , keys , version = var2 ) : "
"define the function delete_many with self, keys and version set to None as arguments.","define function var0 with self, keys and version set to var2 as arguments.","def delete_many ( self , keys , version = None ) : ","def var0 ( self , keys , version = var2 ) : "
define the method deleted_forms with an argument self.,define method var0 with argument self.,def deleted_forms ( self ) : ,def var0 ( self ) : 
"define the function deserialize with 3 arguments: format, stream_or_string and unpacked dictionary options.",define function var0 with 3 arguments: format var1 and unpacked dict options.,"def deserialize ( format , stream_or_string , ** options ) : ","def var0 ( format , var1 , ** options ) : "
define the function Deserializer with arguments object_list and unpacked dictionary options.,define function var0 with arguments var1 and unpacked dict options.,"def Deserializer ( object_list , ** options ) : ","def var0 ( var1 , ** options ) : "
define the function Deserializer with arguments stream_or_string and unpacked dictionary options.,define function var0 with arguments var1 and unpacked dict options.,"def Deserializer ( stream_or_string , ** options ) : ","def var0 ( var1 , ** options ) : "
define the function Deserializer with 2 arguments: stream_or_string and unpacked dictionary options.,define function var0 with 2 arguments: var1 and unpacked dict options.,"def Deserializer ( stream_or_string , ** options ) : ","def var0 ( var1 , ** options ) : "
define the method dict with an argument self.,define method var0 with argument self.,def dict ( self ) : ,def var0 ( self ) : 
define the function dictConfig with an argument config.,define function var0 with argument var1 ,def dictConfig ( config ) : ,def var0 ( var1 ) : 
define function dictitem with s as an argument.,define function var0 with s as argument.,def dictitem ( s ) : ,def var0 ( s ) : 
define the function dictsort with 2 arguments value and arg.,define function var0 with 2 arguments value and var1 ,"def dictsort ( value , arg ) : ","def var0 ( value , var1 ) : "
define the function dictsortreversed with 2 arguments value and arg.,define function var0 with 2 arguments value and var1 ,"def dictsortreversed ( value , arg ) : ","def var0 ( value , var1 ) : "
"define function dictvale, with an argument t.",define function var0 with argument var1,def dictvalue ( t ) : ,def dictvalue ( t ) : 
define the method discard with 2 arguments: self and item.,define method discard with 2 arguments: self and item.,"def discard ( self , item ) : ","def discard ( self , item ) : "
define the method display with an argument self.,define method display with argument self.,def display ( self ) : ,def display ( self ) : 
where '%s' is replaced with self.id.   define the method display with an argument self.,var0 var1 is replaced with var2 define method display with argument self.,def display ( self ) : ,def display ( self ) : 
define the function divisibleby with 2 arguments value and arg.,define function var0 with 2 arguments value and var1 ,"def divisibleby ( value , arg ) : ","def var0 ( value , var1 ) : "
define the function do_block with 2 arguments parser and token.,define function var0 with 2 arguments parser and token.,"def do_block ( parser , token ) : ","def var0 ( parser , token ) : "
define the function do_extends with 2 arguments parser and token.,define function var0 with 2 arguments parser and token.,"def do_extends ( parser , token ) : ","def var0 ( parser , token ) : "
define the function do_filter with 2 arguments: parser and token.,define function var0 with 2 arguments: parser and token.,"def do_filter ( parser , token ) : ","def var0 ( parser , token ) : "
define the function do_for with 2 arguments: parser and token.,define function var0 with 2 arguments: parser and token.,"def do_for ( parser , token ) : ","def var0 ( parser , token ) : "
define the function do_if with 2 arguments: parser and token.,define function var0 with 2 arguments: parser and token.,"def do_if ( parser , token ) : ","def var0 ( parser , token ) : "
"define the function do_ifequal with 2 arguments: parser, token and negate.","define function var0 with 2 arguments: parser, token and negate.","def do_ifequal ( parser , token , negate ) : ","def var0 ( parser , token , negate ) : "
define the function do_include with 2 arguments parser and token.,define function var0 with 2 arguments parser and token.,"def do_include ( parser , token ) : ","def var0 ( parser , token ) : "
"define the function do_ntranslate with 4 arguments: singular, plural, number and translation_function.","define function var0 with 4 arguments: singular, plural, number and var1 ","def do_ntranslate ( singular , plural , number , translation_function ) : ","def var0 ( singular , plural , number , var1 ) : "
define the function do_translate with 2 arguments: message and translation_function.,define function var0 with 2 arguments: message and var1 ,"def do_translate ( message , translation_function ) : ","def var0 ( message , var1 ) : "
define the function do_with with 2 arguments: parser and token.,define function var0 with 2 arguments: parser and token.,"def do_with ( parser , token ) : ","def var0 ( parser , token ) : "
"and '%s' is replaced with app_or_project and message, respectively.   define the method download with arguments self and url.","and var0 is replaced with var1 and message, respectively var3 define method download with arguments self and url.","def download ( self , url ) : ","def download ( self , url ) : "
define the method dst with 2 arguments self and dt.,define method var0 with 2 arguments self and var1 ,"def dst ( self , dt ) : ","def var0 ( self , var1 ) : "
define the method dst with 2 arguments: self and dt.,define method var0 with 2 arguments: self and var1 ,"def dst ( self , dt ) : ","def var0 ( self , var1 ) : "
define the method utcoffset with 2 arguments: self and dt.,define method var0 with 2 arguments: self and var1 ,"def dst ( self , dt ) : ","def dst ( self , var1 ) : "
define the function dummy with 2 arguments: unpacked list args and unpacked dictionary kwargs.,define function dummy with 2 arguments: unpacked list var0 and unpacked dict var1 ,"def dummy ( * args , ** kwargs ) : ","def dummy ( * var0 , ** var1 ) : "
"define the function dumps with 5 arguments: obj, key set to None, salt set to string 'django.core.signing',","define function dumps with 5 arguments: var0 key set to var1 salt set to string var2,","def dumps ( obj , key = None , salt = 'django.core.signing' , serializer = JSONSerializer , compress = False ) : ","def dumps ( var0 , key = var1 , salt = var2 , serializer = JSONSerializer , compress = False ) : "
define the method dumps with arguments self and obj.,define method dumps with arguments self and var0 ,"def dumps ( self , obj ) : ","def dumps ( self , var0 ) : "
define the method e with an argument self.,define method e with argument self.,def e ( self ) : ,def e ( self ) : 
define the method emit with 2 arguments: self and record.,define method emit with 2 arguments: self and record.,"def emit ( self , record ) : ","def emit ( self , record ) : "
"define the method emit_post_migrate with arguments verbosity, interactive and database.","define method var0 with arguments verbosity, interactive and database.","def emit_post_migrate ( verbosity , interactive , database ) : ","def var0 ( verbosity , interactive , database ) : "
"app set to app_config.models_module, create_models set to create_models, verbosity set to verbosity, interactive set to interactive,   and db set to db.   define the function emit_post_migrate_signal with 4 arguments: created_models, verbosity, interactive and db.","app set to var0 var3 var4 set to var4 verbosity set to verbosity, interactive set to interactive var8 and db set to db var8 define function var10 with var2 arguments: var12 verbosity, interactive and dbvar2","def emit_post_migrate_signal ( created_models , verbosity , interactive , db ) : ","def var10 ( var12 , verbosity , interactive , db ) : "
"define the function emit_pre_migrate_signal with 4 arguments: create_models, verbosity, interactive and db.","define function var0 with 4 arguments: var1 verbosity, interactive and db.","def emit_pre_migrate_signal ( create_models , verbosity , interactive , db ) : ","def var0 ( var1 , verbosity , interactive , db ) : "
define the method empty_block_tag with 2 arguments: self and token.,define method var0 with 2 arguments: self and token.,"def empty_block_tag ( self , token ) : ","def var0 ( self , token ) : "
define the method empty_form with an argument self.,define method var0 with argument self.,def empty_form ( self ) : ,def var0 ( self ) : 
define the method empty_variable with 2 arguments: self and token.,define method var0 with 2 arguments: self and token.,"def empty_variable ( self , token ) : ","def var0 ( self , token ) : "
define the method encode with self class instance and i as arguments.,define method encode with self class instance and i as arguments.,"def encode ( self , i ) : ","def encode ( self , i ) : "
define the method encoding with arguments self and val.,define method encoding with arguments self and var0 ,"def encoding ( self , val ) : ","def encoding ( self , var0 ) : "
define the method encoding with arguments self and value.,define method encoding with arguments self and value.,"def encoding ( self , value ) : ","def encoding ( self , value ) : "
define the method encoding with an argument self.,define method encoding with argument self.,def encoding ( self ) : ,def encoding ( self ) : 
define the method end_index with an argument self.,define method var0 with argument self.,def end_index ( self ) : ,def var0 ( self ) : 
define the method end_object with argument self and obj.,define method var0 with argument self and obj.,"def end_object ( self , obj ) : ","def var0 ( self , obj ) : "
define the method end_object with arguments self and obj.,define method var0 with arguments self and obj.,"def end_object ( self , obj ) : ","def var0 ( self , obj ) : "
define the method end_serialization with an argument self.,define method var0 with argument self.,def end_serialization ( self ) : ,def var0 ( self ) : 
define the method endChannelElement with 2 arguments: self and handler.,define method var0 with 2 arguments: self and handler.,"def endChannelElement ( self , handler ) : ","def var0 ( self , handler ) : "
define ensure_echo_on function.,define var0 function.,def ensure_echo_on ( ) : ,def var0 ( ) : 
"define the method enter_command with 3 arguments: self, command and token.","define method var0 with 3 arguments: self, command and token.","def enter_command ( self , command , token ) : ","def var0 ( self , command , token ) : "
"define the method entity_decl with arguments self, name, is_parameter_entity, value, base, sysid, pubid and notation_name.","define method var0 with arguments self, name var1 value, base var3 var4 and var5 ","def entity_decl ( self , name , is_parameter_entity , value , base , sysid , pubid , notation_name ) : ","def var0 ( self , name , var1 , value , base , var3 , var4 , var5 ) : "
define the method error with arguments self and message.,define method error with arguments self and message.,"def error ( self , message ) : ","def error ( self , message ) : "
"define the method enter_command with 3 arguments: self, token and msg.","define method var0 with 3 arguments: self, token and msg.","def error ( self , token , msg ) : ","def error ( self , token , msg ) : "
"define the method error with 3 arguments: self, token and msg.","define method error with 3 arguments: self, token and msg.","def error ( self , token , msg ) : ","def error ( self , token , msg ) : "
define the method errors with an argument self.,define method errors with argument self.,def errors ( self ) : ,def errors ( self ) : 
define the function escape with an argument text.,define function escape with argument text.,def escape ( text ) : ,def escape ( text ) : 
define the function escape_filter with an argument value.,define function var0 with argument value.,def escape_filter ( value ) : ,def var0 ( value ) : 
define the function escape_quotes with an argument m.,define function var0 with argument var1,def escape_quotes ( m ) : ,def var0 ( m ) : 
for integer representation of z converted into a string.   define the function escapejs with an argument value.,for integer representation of z converted into string var0 define function var1 with argument value.,def escapejs ( value ) : ,def var1 ( value ) : 
define the function escapejs_filter with an argument value.,define function var0 with argument value.,def escapejs_filter ( value ) : ,def var0 ( value ) : 
define the method eval with 2 arguments: self and context.,define method var0 with 2 arguments: self and context.,"def eval ( self , context ) : ","def var0 ( self , context ) : "
define the method eval with 2 arguments self and context.,define method var0 with 2 arguments self and context.,"def eval ( self , context ) : ","def var0 ( self , context ) : "
define the method evalu with 2 arguments self and context.,define method var0 with 2 arguments self and context.,"def eval ( self , context ) : ","def eval ( self , context ) : "
"define the function exec with 3 arguments: _code_, _globs_ set to None and _locs_ set to None.","define function exec with 3 arguments: _code_, _globs_ set to var0 and var2 set to var0 ","def exec_ ( _code_ , _globs_ = None , _locs_ = None ) : ","def exec_ ( _code_ , _globs_ = var0 , var2 = var0 ) : "
"define the method execute with 3 arguments: self, unpacked list args and unpacked dictionary options.","define method execute with 3 arguments: self, unpacked list var0 and unpacked dict options.","def execute ( self , * args , ** options ) : ","def execute ( self , * var0 , ** options ) : "
"define the method execute with 3 arguments self, unpacked list args and unpacked dictionary options.","define method execute with 3 arguments self, unpacked list var0 and unpacked dict options.","def execute ( self , * args , ** options ) : ","def execute ( self , * var0 , ** options ) : "
"define the method execute with an argument self,","define method execute with argument self,",def execute ( self ) : ,def execute ( self ) : 
define the function execute_from_command_line with an argument argv set to None.,define function var0 with argument var2 set to var3 ,def execute_from_command_line ( argv = None ) : ,def var0 ( var2 = var3 ) : 
define the function exhaust with an argument stream_or_iterable.,define function exhaust with argument var0 ,def exhaust ( stream_or_iterable ) : ,def exhaust ( var0 ) : 
define the method exists with arguments self and name.,define method exists with arguments self and name.,"def exists ( self , name ) : ","def exists ( self , name ) : "
define the method exit_command with an argument self.,define method var0 with argument self.,def exit_command ( self ) : ,def var0 ( self ) : 
define the method expression with 2 arguments: self and rbp set to integer 0.,define method expression with 2 arguments: self and var0 set to integer 0.,"def expression ( self , rbp = 0 ) : ","def expression ( self , var0 = 0 ) : "
define the method ext_convert with 2 arguments: self and value.,define method var0 with 2 arguments: self and value.,"def ext_convert ( self , value ) : ","def var0 ( self , value ) : "
"define the method extend_nodelist with 4 arguments: self, nodelist, node and token.","define method var0 with 4 arguments: self, nodelist, node and token.","def extend_nodelist ( self , nodelist , node , token ) : ","def var0 ( self , nodelist , node , token ) : "
"define the method external_entity_ref_handler with arguments self, context, base, sysid and pubid.","define method var0 with arguments self, context, base var1 and var2 ","def external_entity_ref_handler ( self , context , base , sysid , pubid ) : ","def var0 ( self , context , base , var1 , var2 ) : "
define the method extra_forms with an argument self.,define method var0 with argument self.,def extra_forms ( self ) : ,def var0 ( self ) : 
define the function extract with 2 arguments path and to_path set to empty string.,define function extract with 2 arguments path and var0 set to empty string.,"def extract ( path , to_path = '' ) : ","def extract ( path , var0 = '' ) : "
define the function with arguments self and filename.,define function with arguments self and filename.,"def extract ( self , filename ) : ","def extract ( self , filename ) : "
define the method extract with 2 arguments self and to_path.,define method extract with 2 arguments self and var0 ,"def extract ( self , to_path ) : ","def extract ( self , var0 ) : "
define the method extract with 2 arguments: self and to_path set to an empty string.,define method extract with 2 arguments: self and var0 set to empty string.,"def extract ( self , to_path = '' ) : ","def extract ( self , var0 = '' ) : "
define the method list with an argument self.,define method list with argument self.,def extract ( self ) : ,def extract ( self ) : 
define the function F with an argument i.,define function F with argument var0,def F ( i ) : ,def F ( i ) : 
define the method f with an argument self.,define method f with argument self.,def f ( self ) : ,def f ( self ) : 
define the method fastcgi_help with an argument message set to None.,define method var0 with argument message set to var2 ,def fastcgi_help ( message = None ) : ,def var0 ( message = var2 ) : 
define the function fdel with 2 arguments: instance and name set to fdel.__name__.,define function var0 with 2 arguments: instance and name set to var0 __name__.,"def fdel ( instance , name = fdel . __name__ ) : ","def var0 ( instance , name = var0 . __name__ ) : "
"define the method fetch_command, with arguments self and subcommand.",define method var0 with arguments self and var1 ,"def fetch_command ( self , subcommand ) : ","def var0 ( self , var1 ) : "
"define the function fget with 3 arguments: instance, instance_type set to None and name set to fget.__name__.",define function var0 with 3 arguments: instance var1 set to var3 and name set to var0 __name__.,"def fget ( instance , instance_type = None , name = fget . __name__ ) : ","def var0 ( instance , var1 = var3 , name = var0 . __name__ ) : "
"define the function fields_for_model with 9 arguments: model, fields set to None, exclude set to None, widgets set to None,","define function var0 with 9 arguments: model, fields set to var2 exclude set to var2 widgets set to var2 ","def fields_for_model ( model , fields = None , exclude = None , widgets = None , formfield_callback = None , localized_fields = None , labels = None , help_texts = None , error_messages = None ) : ","def var0 ( model , fields = var2 , exclude = var2 , widgets = var2 , formfield_callback = var2 , localized_fields = var2 , labels = var2 , help_texts = var2 , error_messages = var2 ) : "
define the method file_complete with arguments: self and file_size.,define method var0 with arguments: self and var1 ,"def file_complete ( self , file_size ) : ","def var0 ( self , var1 ) : "
define the method file_complete with arguments self and file_size.,define method var0 with arguments self and var1 ,"def file_complete ( self , file_size ) : ","def var0 ( self , var1 ) : "
define the function file_complete with arguments self and file_size.,define function var0 with arguments self and var1 ,"def file_complete ( self , file_size ) : ","def var0 ( self , var1 ) : "
"define the function file_move_safe with 4 arguments: old_file_name, new_file_name, chunk_size set to multiple of integers 1024 and 64,","define function var0 with 4 arguments: var1 var3 var5 set to multiple of integers 1024 and 64,","def file_move_safe ( old_file_name , new_file_name , chunk_size = 1024 * 64 , allow_overwrite = False ) : ","def var0 ( var1 , var3 , var5 = 1024 * 64 , allow_overwrite = False ) : "
"and with safe set to bytes string ""/#%[]=:;$&()+,!?*@'~"", return the result.   define function filepath_to_uri with path as the argument.","var0and with safe set to bytes string ""/#% [var0]=:;$&()+,!?*@'~"", return result var2 define function var3 with path as argument.",def filepath_to_uri ( path ) : ,var0def var3(path): 
define the function filesizeformat with an argument bytes.,define function var0 with argument bytes.,def filesizeformat ( bytes ) : ,def var0 ( bytes ) : 
"define the method filter with 4 arguments: self, name set to None, filter_func set to None and unpacked dictionary flags.","define method filter with 4 arguments: self, name set to var0 var2 set to var0 and unpacked dict flags.","def filter ( self , name = None , filter_func = None , ** flags ) : ","def filter ( self , name = var0 , var2 = var0 , ** flags ) : "
define the method filter with 2 arguments: self and record.,define method filter with 2 arguments: self and record.,"def filter ( self , record ) : ","def filter ( self , record ) : "
"where '%r' is replaced with name and filter_func, respectively.   define the method filter_function with 3 arguments: self, func and unpacked dictionary flags.",var0 var1 is replaced with name and var2 respectively var5 define method var6 with 3 arguments: self var4 and unpacked dict flags.,"def filter_function ( self , func , ** flags ) : ","def var2tion ( self , var4 , ** flags ) : "
"define the function find_command with 3 arguments: cmd, path set to None and pathext set to None.",define function var0 with 3 arguments: var2 path set to var3 and var5 set to var3 ,"def find_command ( cmd , path = None , pathext = None ) : ","def var0 ( var2 , path = var3 , var5 = var3 ) : "
define the function find_commands with an argument management_dir.,define function var0 with argument var1 ,def find_commands ( management_dir ) : ,def var0 ( var1 ) : 
define the method find_potfiles with an arguments self and root.,define method var0 with arguments self and root.,"def find_files ( self , root ) : ","def find_files ( self , root ) : "
define the function find_filter with 2 arguments: self and filter_name.,define function var0 with 2 arguments: self and var1 ,"def find_filter ( self , filter_name ) : ","def var0 ( self , var1 ) : "
define the method find_fixtures with arguments: self and fixture_label.,define method var0 with arguments: self and var1 ,"def find_fixtures ( self , fixture_label ) : ","def var0 ( self , var1 ) : "
define the function find_template with 2: template_name and dirs set to None.,define function var0 with 2: var2 and var4 set to var5 ,"def find_template ( name , dirs = None ) : ","def var0 ( name , var4 = var5 ) : "
"define the method find_template with 3 arguments: self, name, dirs set to None.","define method var0 with 3 arguments: self, name var2 set to var3 ","def find_template ( self , name , dirs = None ) : ","def var0 ( self , name , var2 = var3 ) : "
define the function firstof with 2 arguments: parser and token.,define function var0 with 2 arguments: parser and token.,"def firstof ( parser , token ) : ","def var0 ( parser , token ) : "
define the function fix with an argument match.,define function fix with argument match.,def fix ( match ) : ,def fix ( match ) : 
define function fix_location_header with request and response as arguments.,define function var0 with request and response as arguments.,"def fix_location_header ( request , response ) : ","def var0 ( request , response ) : "
define the method fixture_dirs with an argument self.,define method var0 with argument self.,def fixture_dirs ( self ) : ,def var0 ( self ) : 
define the function flatatt with an argument attrs.,define function var0 with argument var1 ,def flatatt ( attrs ) : ,def var0 ( var1 ) : 
define the method flatten with an argument self.,define method flatten with argument self.,def flatten ( self ) : ,def flatten ( self ) : 
define the function flatten_result with an argument source.,define function var0 with argument source.,def flatten_result ( source ) : ,def var0 ( source ) : 
define the function floatformat with 2 arguments text and arg set to integer -1.,define function var0 with 2 arguments text and var1 set to integer var2 ,"def floatformat ( text , arg = - 1 ) : ","def var0 ( text , var1 = - 1 ) : "
where '%s' is replaced with self.__class__.__name__.   define the method flush with an argument self.,var0 var1 is replaced with var2 define method flush with argument self.,def flush ( self ) : ,def flush ( self ) : 
define the method flush with an argument self.,define method flush with argument self.,def flush ( self ) : ,def flush ( self ) : 
define the function foo with input parameters a and b,define function var0 with input parameters and b,"def foo ( a , b ) : ","def var0 ( a , b ) : "
"resent-to', 'resent-cc' and 'resent-bcc'.   define the function forbid_multi_line_headers with arguments: name, val and encoding.",resent-tovar0resent-ccvar1resent-bcc' var3 define function var4 with arguments: name var6 and encoding.,"def forbid_multi_line_headers ( name , val , encoding ) : ","def var4 ( name , var6 , encoding ) : "
"define function force_bytes with s, encoding set to 'utf-8', strings_only set to False and errors set to 'strict' as arguments.","define function var0 with s, encoding set to var2 var3 set to var5 and errors set to var6 as arguments.","def force_bytes ( s , encoding = 'utf-8' , strings_only = False , errors = 'strict' ) : ","def var0 ( s , encoding = var2 , var3 = var5 , errors = 'strict' ) : "
define the function force_escape with an argument value.,define function var0 with argument value.,def force_escape ( value ) : ,def var0 ( value ) : 
"define the function force_text, with s, encoding set to 'utf-8', strings_only set to False, errors set to string 'strict' as arguments.","define function var0 with s, encoding set to var2 var3 set to var5 errors set to string var6 as arguments.","def force_text ( s , encoding = 'utf-8' , strings_only = False , errors = 'strict' ) : ","def var0 ( s , encoding = var2 , var3 = var5 , errors = 'strict' ) : "
"define the function format with 6 arguments: number, decimal_sep, decimal_pos set to None, grouping set to integer 0,","define function format with 6 arguments: number var0 var2 set to var3 grouping set to integer 0,","def format ( number , decimal_sep , decimal_pos = None , grouping = 0 , thousand_sep = '' , force_grouping = False ) : ","def format ( number , var0 , var2 = var3 , grouping = 0 , thousand_sep = '' , force_grouping = False ) : "
define the function format with 2 arguments self and formatstr.,define function format with 2 arguments self and var0 ,"def format ( self , formatstr ) : ","def format ( self , var0 ) : "
define the function format with 2 arguments: value and format_string.,define function format with 2 arguments: value and var0 ,"def format ( value , format_string ) : ","def format ( value , var0 ) : "
"define the function format_html with 3 arguments: format_string, unpacked list args and unpacked dictionary kwargs.",define function var0 with 3 arguments: var1 unpacked list var3 and unpacked dict var4 ,"def format_html ( format_string , * args , ** kwargs ) : ","def var0 ( var1 , * var3 , ** var4 ) : "
"use the result as an argument for the call to the function mark_safe, return the result.   define the function format_html_join with 3 arguments: sep, format_string and args_generator.",use result as argument for call to function var0 return result var1 define function var2 with 3 arguments: sep var4 and var6 ,"def format_html_join ( sep , format_string , args_generator ) : ","def var2 ( sep , var4 , var6 ) : "
"files and string created with concatenation of: name, string '_' and i converted into a string, return the results in a list.   define the method format_output with 2 arguments: self and rendered_widgets.","files and string created with concatenation of: name, string var0 and i converted into string, return results in list var1 define method var2 with 2 arguments: self and var4 ","def format_output ( self , rendered_widgets ) : ","def var2 ( self , var4 ) : "
define the method format_subject with 2 arguments: self and subject.,define method var0 with 2 arguments: self and subject.,"def format_subject ( self , subject ) : ","def var0 ( self , subject ) : "
define the method forms with an argument self.,define method forms with argument self.,def forms ( self ) : ,def forms ( self ) : 
"separated by newline, use it as an argument for the call to the function mark_safe, return the result.   define the function formset_factory with 9 arguments: form, formset set to BaseFormSet, extra set to integer 1,","separated by var0 use it as argument for call to function var1 return result var3 define function var4 with 9 arguments: form var6 set to var7 extra set to integer 1,","def formset_factory ( form , formset = BaseFormSet , extra = 1 , can_order = False , can_delete = False , max_num = None , validate_max = False , min_num = None , validate_min = False ) : ","def var4 ( form , var6 = var7 , extra = 1 , can_order = False , can_delete = False , max_num = None , validate_max = False , min_num = None , validate_min = False ) : "
define the function from_current_timezone with an argument value.,define function var0 with argument value.,def from_current_timezone ( value ) : ,def var0 ( value ) : 
define the method from_dict with argument cls and file_dict.,define method var0 with argument cls and var1 ,"def from_dict ( cls , file_dict ) : ","def var0 ( cls , var1 ) : "
"define the function fset with 3 arguments: instance, valse to None and name set to fset.__name__.","define function var0 with 3 arguments: instance, valse to var1 and name set to var0 __name__.","def fset ( instance , value , name = fset . __name__ ) : ","def var0 ( instance , value , name = var0 . __name__ ) : "
define the method full_clean with an argument self.,define method var0 with argument self.,def full_clean ( self ) : ,def var0 ( self ) : 
define the method g with an argument self.,define method g with argument self.,def g ( self ) : ,def g ( self ) : 
define the function gen_filenames with an argument only_new defaulting to boolean False.,define function var0 with argument var2 defaulting to boolean var4 ,def gen_filenames ( only_new = False ) : ,def var0 ( var2 = var4 ) : 
"define the method generic_tag_compiler with 9 arguments: parser, token, params, varargs, varkw, defaults, name, takes_context,","define method var0 with 9 arguments: parser, token var1 var2 var3 defaults, name var4 ","def generic_tag_compiler ( parser , token , params , varargs , varkw , defaults , name , takes_context , node_class ) : ","def var0 ( parser , token , var1 , var2 , var3 , defaults , name , var4 , node_class ) : "
"define the method get with 3 arguments: self, header and alternate set to None.","define method get with 3 arguments: self, header and alternate set to var0 ","def get ( self , header , alternate = None ) : ","def get ( self , header , alternate = var0 ) : "
"define the method get with 4 arguments, self, key, default set to None and version set to None.","define method get with 4 arguments, self, key, default set to var0 and version set to var0 ","def get ( self , key , default = None , version = None ) : ","def get ( self , key , default = var0 , version = var0 ) : "
"define the method get with 4 arguments, self class instance, key, default set to None and version set to None.","define method get with 4 arguments, self class instance, key, default set to var0 and version set to var0 ","def get ( self , key , default = None , version = None ) : ","def get ( self , key , default = var0 , version = var0 ) : "
"define the method get with 4 arguments: self, key, default set to None and version set to None.","define method get with 4 arguments: self, key, default set to var0 and version set to var0 ","def get ( self , key , default = None , version = None ) : ","def get ( self , key , default = var0 , version = var0 ) : "
"define the method get with 5 arguments, self class instance, key, default set to None and version set to None.","define method get with 5 arguments, self class instance, key, default set to var0 and version set to var0 ","def get ( self , key , default = None , version = None ) : ","def get ( self , key , default = var0 , version = var0 ) : "
"define the method get with 3 arguments: self, key and default set to None.","define method get with 3 arguments: self, key and default set to var0 ","def get ( self , key , default = None ) : ","def get ( self , key , default = var0 ) : "
"define the method got with 3 arguments: self, key and otherwise set to None.","define method got with 3 arguments: self, key and otherwise set to var0 ","def get ( self , key , otherwise = None ) : ","def get ( self , key , otherwise = var0 ) : "
"define the method get with 3 arguments: self, key and otherwise set to None.","define method get with 3 arguments: self, key and otherwise set to var0 ","def get ( self , key , otherwise = None ) : ","def get ( self , key , otherwise = var0 ) : "
define method GET with self class instance as an argument.,define method var0 with self class instance as argument.,def GET ( self ) : ,def var0 ( self ) : 
define the method get_available_name with arguments self and name.,define method var0 with arguments self and name.,"def get_available_name ( self , name ) : ","def var0 ( self , name ) : "
"define the method get_backend_timeout with self class instance and timeout set to DEFAULT_TIMEOUT as arguments,","define method var0 with self class instance and var2 set to var3 as arguments,","def get_backend_timeout ( self , timeout = DEFAULT_TIMEOUT ) : ","def var0 ( self , var2 = var3 ) : "
define the method get_backend_timeout with self and timeout set to DEFAULT_TIMEOUT as arguments.,define method var0 with self and var2 set to var3 as arguments.,"def get_backend_timeout ( self , timeout = DEFAULT_TIMEOUT ) : ","def var0 ( self , var2 = var3 ) : "
define the method get_block with 2 arguments self and name.,define method var0 with 2 arguments self and name.,"def get_block ( self , name ) : ","def var0 ( self , name ) : "
"define the function get_bytes_from_wsgi with environ, key and default as arguments.","define function var0 with environ, key and default as arguments.","def get_bytes_from_wsgi ( environ , key , default ) : ","def var0 ( environ , key , default ) : "
define the function get_cache with backend and dictionary pair of elements kwargs as arguments.,define function var0 with var1 and dict pair of elements var2 as arguments.,"def get_cache ( backend , ** kwargs ) : ","def var0 ( var1 , ** var2 ) : "
"define the function get_cache_key, with request key_prefix set to None, method set to 'GET' and cache set to None as arguments.",define function var0 with request var2 set to var4 method set to var6 and cache set to var4 as arguments.,"def get_cache_key ( request , key_prefix = None , method = 'GET' , cache = None ) : ","def var0 ( request , var2 = var4 , method = var6 , cache = var4 ) : "
define the function get_callable with arguments lookup_view and can_fail set to boolean False.,define function var0 with arguments var2 and var4 set to boolean var6 ,"def get_callable ( lookup_view , can_fail = False ) : ","def var0 ( var2 , var4 = var6 ) : "
define the function get_commands.,define function var0 ,def get_commands ( ) : ,def var0 ( ) : 
"define the function get_complete_version with in argument version, defaulting to None.","define function var0 with in argument version, defaulting to var2 ",def get_complete_version ( version = None ) : ,def var0 ( version = var2 ) : 
"SafeMIMEMultipart', 'DEFAULT_ATTACHMENT_MIME_TYPE', 'make_msgid', 'BadHeaderError', 'forbid_multi_line_headers',   'get_connection', 'send_mail', 'send_mass_mail', 'mail_admins' and 'mail_managers'.   define function get_connection with backend set to None, fail_silently set to boolean False and dictionary kwds as arguments.",SafeMIMEMultipartvar1DEFAULT_ATTACHMENT_MIME_TYPEvar1make_msgidvar1BadHeaderErrorvar1forbid_multi_line_headersvar16get_connectionvar1send_mailvar1send_mass_mailvar1mail_adminsvar29mail_managers' var17 define function var19 with var32 set to var33 var34 set to boolean var36 and dict var37 as arguments.,"def get_connection ( backend = None , fail_silently = False , ** kwds ) : ","def var19 ( var32 = var33 , var34 = var36 , ** var37 ) : "
define the method get_connection with arguments self and fail_silently set to boolean False.,define method var0 with arguments self and var2 set to boolean var4 ,"def get_connection ( self , fail_silently = False ) : ","def var0 ( self , var2 = var4 ) : "
"use the result as an argument for the call to the b64_encode function, return the result.   define the function get_cookie_signer with an argument salt set to string 'django.core.signing.get_cookie_signer'.","use result as argument for call to var0 function, return result var1 define function get_cookie_signer with argument salt set to string var2.",def get_cookie_signer ( salt = 'django.core.signing.get_cookie_signer' ) : ,def get_cookie_signer ( salt = var2 ) : 
define the function get_current_timezone.,define function var0 ,def get_current_timezone ( ) : ,def var0 ( ) : 
define the function get_current_timezone_name.,define function var0 ,def get_current_timezone_name ( ) : ,def var0 ( ) : 
define the method get_data with an argument self.,define method var0 with argument self.,def get_data ( self ) : ,def var0 ( self ) : 
"where '%(field)s' is replaced with return value of the get_text_list function called with 2 arguments:   unique_check and return value of the function six.text_type called with return value of the function _ with an argument string 'and',   return the result.   define the method get_date_error_message with 2 arguments: self and date_check.",var0 var1 is replaced with return value of var2 function called with 2 arguments: var8 and return value of function six var11 called with return value of function var4 with argument string var12 var5 return result var5 define method var13 with 2 arguments: self and var15 ,"def get_date_error_message ( self , date_check ) : ","def var13 ( self , var15 ) : "
"define the function get_declared_fields with 3 arguments: bases, attrs and with_base_fields set to boolean True.",define function var0 with 3 arguments: bases var2 and var3 set to boolean var5 ,"def get_declared_fields ( bases , attrs , with_base_fields = True ) : ","def var0 ( bases , var2 , var3 = var5 ) : "
define the method get_default_prefix with an argument cls.,define method var0 with argument cls.,def get_default_prefix ( cls ) : ,def var0 ( cls ) : 
define the function get_default_timezone.,define function var0 ,def get_default_timezone ( ) : ,def var0 ( ) : 
define the function get_default_timezone_name.,define function var0 ,def get_default_timezone_name ( ) : ,def var0 ( ) : 
"only if v.Serializer.internal_use_only is false, return the resulting list.   define the function get_deserializer with an argument format.","only if v var1 var3 is false, return resulting list var4 define function var5 with argument format.",def get_deserializer ( format ) : ,def var5 ( format ) : 
define the function get_digit with 2 arguments value and arg.,define function var0 with 2 arguments value and var1 ,"def get_digit ( value , arg ) : ","def var0 ( value , var1 ) : "
define the method get_dump_object with arguments self and obj.,define method var0 with arguments self and obj.,"def get_dump_object ( self , obj ) : ","def var0 ( self , obj ) : "
"define method get_exception_response, with self class instance, request, resolver and status_code as the arguments.","define method var0 with self class instance, request var1 and var2 as arguments.","def get_exception_response ( self , request , resolver , status_code ) : ","def var0 ( self , request , var1 , var2 ) : "
"define the method get_field_type with 4 arguments: self, connection, table_name and row.","define method var0 with 4 arguments: self, connection var1 and row.","def get_field_type ( self , connection , table_name , row ) : ","def var0 ( self , connection , var1 , row ) : "
define the function get_fixed_timezone with an argument offset.,define function var0 with argument offset.,def get_fixed_timezone ( offset ) : ,def var0 ( offset ) : 
"the %(lookup)s in %(date_field)s."", where '%(field_name)s' is replaced with third element of data_check,   '%(date_field)s' is replaced with fourth element of date_check and '%(lookup)s' is replaced with result of the function,   six.text_type called with second element of date_check as an argument, return the result.   define the method get_form_error with an argument self.","the %(lookup)s in %(date_field)s."" var6 var7 is replaced with third element of var8 var13 is replaced with fourth element of var14 and var18 is replaced with result of function var10 six var20 called with second element of var14 as argument, return result var10 define method var21 with argument self.",def get_form_error ( self ) : ,def var21 ( self ) : 
"define the function get_format with 3 arguments: format_type, lang set to None and use_l10n set to None.",define function var0 with 3 arguments: var2 var4 set to var5 and var7 set to var5 ,"def get_format ( format_type , lang = None , use_l10n = None ) : ","def var0 ( var2 , var4 = var5 , var7 = var5 ) : "
define the function get_format_modules with 2 arguments: lang set to None and reverse set to boolean False.,define function var0 with 2 arguments: var2 set to var3 and reverse set to boolean var4 ,"def get_format_modules ( lang = None , reverse = False ) : ","def var0 ( var2 = var3 , reverse = var4 ) : "
define the method get_fqdn with argument self.,define method var0 with argument self.,def get_fqdn ( self ) : ,def var0 ( self ) : 
define the method get_full_path with an argument self.,define method var0 with argument self.,def get_full_path ( self ) : ,def var0 ( self ) : 
define the function get_git_changeset.,define function var0 ,def get_git_changeset ( ) : ,def var0 ( ) : 
"dest set to string 'use_reloader', default set to boolean True and help is a string 'Tells Django to NOT use the auto-reloader.'.   def get_handler with 3 arguments: self, unpacked list args and unpacked dictionary options.","dest set to string var0, default set to boolean var1 and help is string var2 var7 def var8 with 3 arguments: self, unpacked list var10 and unpacked dict options.","def get_handler ( self , * args , ** options ) : ","def var8 ( self , * var10 , ** options ) : "
define the method get_host with an argument self.,define method var0 with argument self.,def get_host ( self ) : ,def var0 ( self ) : 
define the function get_image_dimension with file_or_path and close set to boolean False as the arguments.,define function var0 with var2 and close set to boolean var4 as arguments.,"def get_image_dimensions ( file_or_path , close = False ) : ","def var0s ( var2 , close = var4 ) : "
define the funtion get_internal_wsgi_application.,define var0 var1 ,def get_internal_wsgi_application ( ) : ,def var1 ( ) : 
define the method get_json_data with 2 arguments self and escape_html set to boolean False.,define method var0 with 2 arguments self and var2 set to boolean var4 ,"def get_json_data ( self , escape_html = False ) : ","def var0 ( self , var2 = var4 ) : "
define the function get_key_func with argument key_func.,define function var0 with argument var1 ,def get_key_func ( key_func ) : ,def var0 ( var1 ) : 
define the function get_language.,define function var0 ,def get_language ( ) : ,def var0 ( ) : 
define the function get_language_bidi.,define function var0 ,def get_language_bidi ( ) : ,def var0 ( ) : 
define the function get_language_from_path with 2 arguments: path and strict set to boolean False.,define function var0 with 2 arguments: path and strict set to boolean var2 ,"def get_language_from_path ( path , strict = False ) : ","def var0 ( path , strict = var2 ) : "
define the function get_language_from_path with an argument path.,define function var0 with argument path.,def get_language_from_path ( path ) : ,def var0 ( path ) : 
define the function get_language_from_path with an argument request.,define function var0 with argument request.,def get_language_from_path ( request ) : ,def var0 ( request ) : 
define the function get_language_from_request with 2 arguments: request and check_path set to boolean False.,define function var0 with 2 arguments: request and var2 set to boolean var4 ,"def get_language_from_request ( request , check_path = False ) : ","def var0 ( request , var2 = var4 ) : "
define the function get_language_info with an argument lang_code.,define function var0 with argument var1 ,def get_language_info ( lang_code ) : ,def var0 ( var1 ) : 
define the function get_library with an argument library_name.,define function var0 with argument var1 ,def get_library ( library_name ) : ,def var0 ( var1 ) : 
define the method get_limit_choices_to with arguments self.,define method var0 with arguments self.,def get_limit_choices_to ( self ) : ,def var0 ( self ) : 
define the function get_major_version with an argument version defaulting to None.,define function var0 with argument version defaulting to var2 ,def get_major_version ( version = None ) : ,def var0 ( version = var2 ) : 
"define the get_many method with self class instance, keys and version set to None as arguments.","define var0 method with self class instance, keys and version set to var2 as arguments.","def get_many ( self , keys , version = None ) : ","def var0 ( self , keys , version = var2 ) : "
"define the method get_many with 3 arguments: self, keys, and version set to None.","define method var0 with 3 arguments: self, keys, and version set to var2 ","def get_many ( self , keys , version = None ) : ","def var0 ( self , keys , version = var2 ) : "
"define the method get_many with self class instance, keys and version defaulting to None as arguments.","define method var0 with self class instance, keys and version defaulting to var2 as arguments.","def get_many ( self , keys , version = None ) : ","def var0 ( self , keys , version = var2 ) : "
define function get_max_age with response as an argument.,define function var0 with response as argument.,def get_max_age ( response ) : ,def var0 ( response ) : 
define the method get_meta with arguments self and table_name.,define method var0 with arguments self and var1 ,"def get_meta ( self , table_name ) : ","def var0 ( self , var1 ) : "
define the function get_mod_func with an argument callback.,define function var0 with argument callback.,def get_mod_func ( callback ) : ,def var0 ( callback ) : 
define the method get_nodes_by_type with 2 arguments: self and nodetype.,define method var0 with 2 arguments: self and var1 ,"def get_nodes_by_type ( self , nodetype ) : ","def var0 ( self , var1 ) : "
define the function get_ns_resolver with arguments ns_pattern and resolver.,define function var0 with arguments var1 and resolver.,"def get_ns_resolver ( ns_pattern , resolver ) : ","def var0 ( var1 , resolver ) : "
define the function get_objects.,define function var0 ,def get_objects ( ) : ,def var0 ( ) : 
define the method get_parent with 2 arguments self and context.,define method var0 with 2 arguments self and context.,"def get_parent ( self , context ) : ","def var0 ( self , context ) : "
define the get_path_info function with environ as the argument.,define var0 function with environ as argument.,def get_path_info ( environ ) : ,def var0 ( environ ) : 
define the function get_public_serializer_formats.,define function var0 ,def get_public_serializer_formats ( ) : ,def var0 ( ) : 
define the function get_quantifier with 2 arguments ch and input_iter.,define function var0 with 2 arguments var1 and var2 ,"def get_quantifier ( ch , input_iter ) : ","def var0 ( var1 , var2 ) : "
define the method get_queryset with an argument self.,define method var0 with argument self.,def get_queryset ( self ) : ,def var0 ( self ) : 
"and digestmod set to hashlib.sha1, return the result.   define the function constant_time_compare with 2 arguments: length set to integer 12,","and var0 set to var1 return result var2 define function var3 with 2 arguments: length set to integer 12,","def get_random_string ( length = 12 , allowed_chars = 'abcdefghijklmnopqrstuvwxyz' 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789' ) : ","def get_random_string ( length = 12 , allowed_chars = 'abcdefghijklmnopqrstuvwxyz' 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789' ) : "
"define the method get_renderer with 5 arguments: self, name, value, attrs set to None and choices set to an empty tuple.","define method var0 with 5 arguments: self, name, value var2 set to var3 and choices set to empty tuple.","def get_renderer ( self , name , value , attrs = None , choices = ( ) ) : ","def var0 ( self , name , value , var2 = var3 , choices = ( ) ) : "
define the method get_resolved_arguments with 2 arguments: self and context.,define method var0 with 2 arguments: self and context.,"def get_resolved_arguments ( self , context ) : ","def var0 ( self , context ) : "
define the function get_resolver with an argument urlconf.,define function var0 with argument var1 ,def get_resolver ( urlconf ) : ,def var0 ( var1 ) : 
"define the method get_response, with self class instance and request as the arguments.",define method var0 with self class instance and request as arguments.,"def get_response ( self , request ) : ","def var0 ( self , request ) : "
define get_script_name function with environ as an argument.,define var0 function with environ as argument.,def get_script_name ( environ ) : ,def var0 ( environ ) : 
define the function get_script_prefix.,define function var0 ,def get_script_prefix ( ) : ,def var0 ( ) : 
define the function get_serializer with an argument format.,define function var0 with argument format.,def get_serializer ( format ) : ,def var0 ( format ) : 
define the function get_serializer_formats.,define function var0 ,def get_serializer_formats ( ) : ,def var0 ( ) : 
"called with value under the 'QUERY_STRING' key of the self.META dictionary and append it to string '?',   append the result th the self.path converted into a string and return it,   if the value under the 'QUERY_STRING' key of the self.META dictionary is false, return self.path converted into a string.   def the method get_signed_cookie with 5 arguments: self, key, default set to RAISE_ERROR, salt as an empty string,","called with value under var0 key of self var2 dict and append it to string var6?var6 var7 append result th var10 converted into string and return it var7 if value under var0 key of self var2 dict is false, return var10 converted into string var7 def method var12 with 5 arguments: self, key, default set to var14 salt as empty string,","def get_signed_cookie ( self , key , default = RAISE_ERROR , salt = '' , max_age = None ) : ","def var12 ( self , key , default = var14 , salt = '' , max_age = None ) : "
define the function get_standard_processors.,define function var0 ,def get_standard_processors ( ) : ,def var0 ( ) : 
"use the result as an argument for the call to the function datetime.fromtimestamp, return the result.   define the function get_storage_class with argument import_path=None defaulting to None.",use result as argument for call to function var0 return result var1 define function var2 with argument import_path=None defaulting to var6 ,def get_storage_class ( import_path = None ) : ,def var2 ( var4 = var6 ) : 
"define the get_str_from_wsgi function with environ, key and default as arguments.","define var0 function with environ, key and default as arguments.","def get_str_from_wsgi ( environ , key , default ) : ","def var0 ( environ , key , default ) : "
define the function get_supported_language_variant with 2 arguments: lang_code and strict set to boolean False.,define function var0 with 2 arguments: var2 and strict set to boolean var4 ,"def get_supported_language_variant ( lang_code , strict = False ) : ","def var0 ( var2 , strict = var4 ) : "
"call the function quote with the result and with the safe set to bytes string ""/~!*()'"", return the function result.   define the function get_system_encoding without the input arguments.","call function quote with result and with safe set to bytes string var0, return function result var1 define function var2 var4 input arguments.",def get_system_encoding ( ) : ,def var2 ( ) : 
define the function get_tag_uri with 2 arguments: url and date.,define function var0 with 2 arguments: url and date.,"def get_tag_uri ( url , date ) : ","def var0 ( url , date ) : "
define the function get_template with 2: template_name and dirs set to None.,define function var0 with 2: var2 and var4 set to var5 ,"def get_template ( template_name , dirs = None ) : ","def var0 ( var2 , var4 = var5 ) : "
"define the function get_template_from_string with 3: source, origin set to None and name set to None.","define function var0 with 3: source, origin set to var2 and name set to var2 ","def get_template_from_string ( source , origin = None , name = None ) : ","def var0 ( source , origin = var2 , name = var2 ) : "
"define the method get_template_sources with 3 arguments: self, template_name, template_dirs set to None.",define method var0 with 3 arguments: self var2 var4 set to var6 ,"def get_template_sources ( self , template_name , template_dirs = None ) : ","def var0 ( self , var2 , var4 = var6 ) : "
"define the method get_template_source with 3 arguments: self, template_name, template_dirs set to None.",define method var0 with 3 arguments: self var2 var4 set to var6 ,"def get_template_sources ( self , template_name , template_dirs = None ) : ","def var0s ( self , var2 , var4 = var6 ) : "
define the function get_templatetags_modules.,define function var0 ,def get_templatetags_modules ( ) : ,def var0 ( ) : 
define the function get_text_list with 2 arguments: list_ and last_word set to result of the function ugettext_lazy called with an argument string 'or'.,define function var0 with 2 arguments: var2 and var3 set to result of function var4 called with argument string var6.,"def get_text_list ( list_ , last_word = ugettext_lazy ( 'or' ) ) : ","def var0 ( var2 , var3 = var4 ( var6 ) ) : "
define the function get_unbound_function with an argument unbound.,define function var0 with argument unbound.,def get_unbound_function ( unbound ) : ,def var0 ( unbound ) : 
define the method get_unique_error_message with 2 arguments: self and unique_check.,define method var0 with 2 arguments: self and var1 ,"def get_unique_error_message ( self , unique_check ) : ","def var0 ( self , var1 ) : "
define the function get_urlconf with an argument default set to None.,define function var0 with argument default set to var2 ,def get_urlconf ( default = None ) : ,def var0 ( default = var2 ) : 
define the function get_valid_filename with an argument s.,define function var0 with argument var1,def get_valid_filename ( s ) : ,def var0 ( s ) : 
define the method det_valid_name with arguments self and name.,define method var0 with arguments self and name.,"def get_valid_name ( self , name ) : ","def get_valid_name ( self , name ) : "
define the method get_version with an arguments self.,define method var0 with arguments self.,def get_version ( self ) : ,def var0 ( self ) : 
define the function get_version with version set to None as argument.,define function var0 with version set to var2 as argument.,def get_version ( version = None ) : ,def var0 ( version = var2 ) : 
define the function get_wsgi_application.,define function var0 ,def get_wsgi_application ( ) : ,def var0 ( ) : 
where '%s' is replaced with node.nodeName and attr.   define the function getInnerText with an argument node.,var0 var1 is replaced with node var3 and var4 define function var6 with argument node.,def getInnerText ( node ) : ,def var6 ( node ) : 
"define the method getlist with 3 arguments: self, key and default set to None.","define method var0 with 3 arguments: self, key and default set to var1 ","def getlist ( self , key , default = None ) : ","def var0 ( self , key , default = var1 ) : "
define the method getlist with 2 arguments: self and key.,define method var0 with 2 arguments: self and key.,"def getlist ( self , key ) : ","def var0 ( self , key ) : "
define the function gettext_noop with an argument message.,define function var0 with argument message.,def gettext ( message ) : ,def gettext ( message ) : 
define the function gettext with an argument message.,define function var0 with argument message.,def gettext ( message ) : ,def var0 ( message ) : 
define the function gettext_noop with an argument message.,define function var0 with argument message.,def gettext_noop ( message ) : ,def var0 ( message ) : 
define the function locale with an argument locale.,define function locale with argument locale.,def gettext_noop ( message ) : ,def gettext_noop ( message ) : 
define the method getvalue with an argument self.,define method var0 with argument self.,def getvalue ( self ) : ,def var0 ( self ) : 
"of the obj object, append the results in a list, substitute it for value under the field.name key of the self._current dictionary.   define the method getvalue with an argument self.","of var0 object, append results in list, substitute it for value under var1 key of var2 dict var3 define method var4 with argument self.",def getvalue ( self ) : ,def var4 ( self ) : 
define the method h with an argument self.,define method h with argument self.,def h ( self ) : ,def h ( self ) : 
"and help set to string 'One or more application label.'.   define the method handle with 3 arguments: self, unpacked list app_labels and unpacked dictionary options.","and help set to string var0 var1 define method handle with 3 arguments: self, unpacked list var2 and unpacked dict options.","def handle ( self , * app_labels , ** options ) : ","def handle ( self , * var2 , ** options ) : "
"dest set to string 'list_tags' and help set to string 'List available tags.'.   define method handle with arguments self, unapcked list app_labels and unpacked dictionary options.",dest set to string var0 and help set to string var1 var3 define method handle with arguments self var4 list var5 and unpacked dict options.,"def handle ( self , * app_labels , ** options ) : ","def handle ( self , * var5 , ** options ) : "
"and help is a string 'Specifies file to which the output is written.'.   define the method handle with arguments self, unpacked list app_labels and unpacked dictionary options.","and help is string var0 var1 define method handle with arguments self, unpacked list var2 and unpacked dict options.","def handle ( self , * app_labels , ** options ) : ","def handle ( self , * var2 , ** options ) : "
"dest as a string 'interactive', default set to boolean True,   and help as a string 'Tells Django to NOT prompt the user for input of any kind.'.   define the method handle with 3 arguments: self, unpacked list app_labels and unpacked dictionary options.","dest as string var0, default set to boolean var1 and help as string var4 var2 define method handle with 3 arguments: self, unpacked list var9 and unpacked dict options.","def handle ( self , * app_labels , ** options ) : ","def handle ( self , * var9 , ** options ) : "
"define the method handle with 3 arguments: self, unpacked args and unpacked dictionary options.","define method handle with 3 arguments: self, unpacked var0 and unpacked dict options.","def handle ( self , * args , ** options ) : ","def handle ( self , * var0 , ** options ) : "
"define the method handle with 3 arguments: self, unpacked list args and unpacked dictionary options.","define method handle with 3 arguments: self, unpacked list var0 and unpacked dict options.","def handle ( self , * args , ** options ) : ","def handle ( self , * var0 , ** options ) : "
"dest as a string 'keep_pot', default as boolean False and help as a string ""Keep .pot file after making messages. Useful when debugging.""   define the method handle with 3 arguments: self, unpacked list args and unpacked dictionary options.","dest as string var0, default as boolean var1 and help as string var2 define method handle with 3 arguments: self, unpacked list var8 and unpacked dict options.","def handle ( self , * args , ** options ) : ","def handle ( self , * var8 , ** options ) : "
"default set to False, help containing string 'Show a list of all known migrations and which are applied' as arguments.   define the method handle with self instance of a class, list args, dictionary options as arguments.","default set to var0 help containing string var1 as arguments var2 define method handle with self instance of class, list var3 dict options as arguments.","def handle ( self , * args , ** options ) : ","def handle ( self , * var3 , ** options ) : "
"default set to False and help set to string'Creates SQL to unapply the migration, rather than to apply it' as arguments.   define the method handle with self class instance, list of arguments args and options dictionary as the arguments.","default set to var0 and help set to stringvar2 as arguments var3 define method handle with self class instance, list of arguments var4 and options dict as arguments.","def handle ( self , * args , ** options ) : ","def handle ( self , * var4 , ** options ) : "
"dest as a string 'ignore', default set to boolean False and help set to string 'Ignores entries in the serialized data for fields that do not currently exist on the model.'.   define the method handle with 3 arguments: self, unpacked list fixture_labels and unpacked dictionary options.","dest as string var0, default set to boolean var1 and help set to string var2 var5 define method handle with 3 arguments: self, unpacked list var6 and unpacked dict options.","def handle ( self , * fixture_labels , ** options ) : ","def handle ( self , * var6 , ** options ) : "
"default set to boolean False and help set to string 'Tells Django to use an IPv6 address.'.   define the method handle with self class instance, list of arguments fixture_labels and dictionary options as arguments.","default set to boolean var0 and help set to string var1 var2 define method handle with self class instance, list of arguments var3 and dict options as arguments.","def handle ( self , * fixture_labels , ** options ) : ","def handle ( self , * var3 , ** options ) : "
"define the method handle with 3 arguments: self, unpacked list labels and unpacked dictionary options.","define method handle with 3 arguments: self, unpacked list labels and unpacked dict options.","def handle ( self , * labels , ** options ) : ","def handle ( self , * labels , ** options ) : "
"default set to DEFAULT_DB_ALIAS and help set to a string:   'Nominates a database onto which the cache tables will be installed. Defaults to the ""default"" database.'   define the method handle with arguments self, unpacked list tablenames and unpacked dictionary options.","default set to var0 and help set to string: var4 define method handle with arguments self, unpacked list var5 and unpacked dict options.","def handle ( self , * tablenames , ** options ) : ","def handle ( self , * var5 , ** options ) : "
"define the method handle with 3 arguments: self, unpacked list test_labels and unpacked dictionary options.","define method handle with 3 arguments: self, unpacked list var0 and unpacked dict options.","def handle ( self , * test_labels , ** options ) : ","def handle ( self , * var0 , ** options ) : "
default as an empty list and help as an string 'Locales to exclude. Default is none. Can be used multiple times.'.   define the handle method with self class instance and dictionary **options as arguments.,default as empty list and help as string var0 var1 define handle method with self class instance and dict **options as arguments.,"def handle ( self , ** options ) : ","def handle ( self , ** options ) : "
"default set to DEFAULT_DB_ALIAS and help set to string 'Nominates a database onto which to open a shell. Defaults to the ""default"" database.'.   define the method handle with arguments self and unpacked dictionary options.",default set to var0 and help set to string var2 var3 define method handle with arguments self and unpacked dict options.,"def handle ( self , ** options ) : ","def handle ( self , ** options ) : "
"default set to boolean False and help set to a string 'Display all settings, regardless of their value. Default values are prefixed by ""###"".'   define the method handle with arguments self and unpacked dictionary options.",default set to boolean var0 and help set to string var1 define method handle with arguments self and unpacked dict options.,"def handle ( self , ** options ) : ","def handle ( self , ** options ) : "
"dest set to string 'load_initial_data', default=True and help as a string 'Tells Django not to load any initial data after database synchronization.'.   define the method handle with arguments self and unpacked dictionary options.","dest set to string var0, default=True and help as string var2 var6 define method handle with arguments self and unpacked dict options.","def handle ( self , ** options ) : ","def handle ( self , ** options ) : "
"default set to DEFAULT_DB_ALIAS and help as a string 'Nominates a database to introspect. Defaults to using the ""default"" database.'.   define the method handle with 2 arguments: self and unpacked dictionary options.",default set to var0 and help as string var2 var3 define method handle with 2 arguments: self and unpacked dict options.,"def handle ( self , ** options ) : ","def handle ( self , ** options ) : "
define the method handle with 3 arguments: self and unpacked dictionary options.,define method handle with 3 arguments: self and unpacked dict options.,"def handle ( self , ** options ) : ","def handle ( self , ** options ) : "
"Nominates a database to print the SQL for. Defaults to the ""default"" database.' as the arguments.   define the method handle with self class instance and dictionary options as the arguments.",Nominates database to print var0 for var2 to var3 database.' as arguments var4 define method handle with self class instance and dict options as arguments.,"def handle ( self , ** options ) : ","def handle ( self , ** options ) : "
"dest as a string 'interactive', default as boolean True help as a string 'Tells Django to NOT prompt the user for input of any kind.'.   define the method handle with 3 arguments: self and unpacked dictionary options.","dest as string var0, default as boolean var1 help as string var2 var7 define method handle with 3 arguments: self and unpacked dict options.","def handle ( self , ** options ) : ","def handle ( self , ** options ) : "
define the method handle with 2 arguments: self and unpacked dictionary options.,define method handle with 2 arguments: self and unpacked dict options.,"def handle ( self , ** options ) : ","def handle ( self , ** options ) : "
define the method handle with arguments self and unpacked dictionary options.,define method handle with arguments self and unpacked dict options.,"def handle ( self , ** options ) : ","def handle ( self , ** options ) : "
"and help set to string 'Nominates a database to synchronize. Defaults to the ""default"" database.'.   define the method handle with 2 arguments: self and unpacked dictionary options.",and help set to string var0 var1 define method handle with 2 arguments: self and unpacked dict options.,"def handle ( self , ** options ) : ","def handle ( self , ** options ) : "
define the method handle with self class instance and dictionary pair of elements options as arguments.,define method handle with self class instance and dict pair of elements options as arguments.,"def handle ( self , ** options ) : ","def handle ( self , ** options ) : "
"action set to string 'append', default as an empty list and help set to a string:   'The file name(s) to render. Separate multiple extensions with commas, or use -n multiple times.'.   define the method handle with 5 arguments: self, app_or_project, name, target set to None and unpacked dictionary options.","action set to string var0, default as empty list and help set to string: var3 var1 define method handle with 5 arguments: self var8 name, target set to var10 and unpacked dict options.","def handle ( self , app_or_project , name , target = None , ** options ) : ","def handle ( self , var8 , name , target = var10 , ** options ) : "
"define the method handle_app_config with 3 arguments: self, app_config and unpacked dictionary options.",define method var0 with 3 arguments: self var1 and unpacked dict options.,"def handle_app_config ( self , app_config , ** options ) : ","def var0 ( self , var1 , ** options ) : "
"and help set to a string 'Nominates a database to print the SQL for. Defaults to the ""default"" database.'.   define the method handle_app_config with 3 arguments: self, app_config and unpacked dictionary options.",and help set to string var0 var1 define method var2 with 3 arguments: self var4 and unpacked dict options.,"def handle_app_config ( self , app_config , ** options ) : ","def var2 ( self , var4 , ** options ) : "
"Nominates a database to print the SQL for. Defaults to the ""default"" database.' as the arguments.   define method handle_app_config with self class instance, app_config and dictionary options as arguments.",Nominates database to print var0 for var2 to var3 database.' as arguments var4 define method var5 with self class instance var7 and dict options as arguments.,"def handle_app_config ( self , app_config , ** options ) : ","def var5 ( self , var7 , ** options ) : "
"and help set to string 'Nominates a database to print the SQL for. Defaults to the ""default"" database.'.   define the handle_app_config with 3 arguments self, app_config and unpacked dictionary options.",and help set to string var0 var1 define var2 with 3 arguments self var4 and unpacked dict options.,"def handle_app_config ( self , app_config , ** options ) : ","def var2 ( self , var4 , ** options ) : "
"and help as a string 'Nominates a database to print the SQL for. Defaults to the ""default"" database.', as arguments.   define the method handle_app_config with self class instance, app_config and dictionary options as arguments.","and help as string var0, as arguments var1 define method var2 with self class instance var4 and dict options as arguments.","def handle_app_config ( self , app_config , ** options ) : ","def var2 ( self , var4 , ** options ) : "
"and help set to string 'Nominates a database to print the SQL for. Defaults to the ""default"" database.'.   define the method handle_app_config with 3 arguments: self, app_config and unpacked dictionary options.",and help set to string var0 var1 define method var2 with 3 arguments: self var4 and unpacked dict options.,"def handle_app_config ( self , app_config , ** options ) : ","def var2 ( self , var4 , ** options ) : "
define the method handle_charref with 2 arguments self and name.,define method var0 with 2 arguments self and name.,"def handle_charref ( self , name ) : ","def var0 ( self , name ) : "
define the method handle_data with 2 arguments self and d.,define method var0 with 2 arguments self and var1,"def handle_data ( self , d ) : ","def var0 ( self , d ) : "
define the function handle_default_options with an argument options.,define function var0 with argument options.,def handle_default_options ( options ) : ,def var0 ( options ) : 
define the method handle_entityref with 2 arguments self and name.,define method var0 with 2 arguments self and name.,"def handle_entityref ( self , name ) : ","def var0 ( self , name ) : "
DEFAULT_LOCALE_ENCODING and strings_only set to boolean True and p.returncode.   define the function handle_extensions with 2 arguments: extensions set to tuple containing string 'html' and ignored set to tuple containing string 'py'.,var0 and var1 set to boolean var3 and var4 define function var6 with 2 arguments: extensions set to tuple containing string var8 and ignored set to tuple containing string var9.,"def handle_extensions ( extensions = ( 'html' , ) , ignored = ( 'py' , ) ) : ","def var6 ( extensions = ( var8 , ) , ignored = ( 'py' , ) ) : "
"define the method handle_field with argument self, obj and field.",define method var0 with argument self var1 and field.,"def handle_field ( self , obj , field ) : ","def var0 ( self , var1 , field ) : "
"define handle_field method with self, obj and field arguments.",define var0 method with self var1 and field arguments.,"def handle_field ( self , obj , field ) : ","def var0 ( self , var1 , field ) : "
"define the method handle_field with arguments self, obj and field.",define method var0 with arguments self var1 and field.,"def handle_field ( self , obj , field ) : ","def var0 ( self , var1 , field ) : "
"define the method handle_file_complete with 3 arguments: self, old_field_name and counters.",define method var0 with 3 arguments: self var1 and counters.,"def handle_file_complete ( self , old_field_name , counters ) : ","def var0 ( self , var1 , counters ) : "
"define the method handle_fk_field with argument self, obj and field.",define method var0 with argument self var1 and field.,"def handle_fk_field ( self , obj , field ) : ","def var0 ( self , var1 , field ) : "
"define the method handle_fk_field with self, obj and field arguments.",define method var0 with self var1 and field arguments.,"def handle_fk_field ( self , obj , field ) : ","def var0 ( self , var1 , field ) : "
"define the method handle_fk_field with arguments self, obj and field.",define method var0 with arguments self var1 and field.,"def handle_fk_field ( self , obj , field ) : ","def var0 ( self , var1 , field ) : "
define the method handle_inspection with 2 argument: self and options.,define method var0 with 2 argument: self and options.,"def handle_inspection ( self , options ) : ","def var0 ( self , options ) : "
"define the method handle_label with 3 arguments: self, label and unpacked dictionary options.","define method var0 with 3 arguments: self, label and unpacked dict options.","def handle_label ( self , label , ** options ) : ","def var0 ( self , label , ** options ) : "
"define the function handle_m2m with an argument value,","define function var0 with argument value,",def handle_m2m ( value ) : ,def var0 ( value ) : 
"define the method handle_m2m_field with argument self, obj and field.",define method var0 with argument self var1 and field.,"def handle_m2m_field ( self , obj , field ) : ","def var0 ( self , var1 , field ) : "
"define the method handle_m2m_field with self, obj and field arguments.",define method var0 with self var1 and field arguments.,"def handle_m2m_field ( self , obj , field ) : ","def var0 ( self , var1 , field ) : "
"define the method handle_m2m_field with arguments self, obj and field.",define method var0 with arguments self var1 and field.,"def handle_m2m_field ( self , obj , field ) : ","def var0 ( self , var1 , field ) : "
"define the method handle_merge with arguments self, loader and conflicts.","define method var0 with arguments self, loader and conflicts.","def handle_merge ( self , loader , conflicts ) : ","def var0 ( self , loader , conflicts ) : "
define the method handle_noargs with 2 arguments: self and unpacked dictionary options.,define method var0 with 2 arguments: self and unpacked dict options.,"def handle_noargs ( self , ** options ) : ","def var0 ( self , ** options ) : "
"define the method handle_raw_input with arguments: self, input_data, META, content_length, boundary and encoding set to None.",define method var0 with arguments: self var2 var3 var4 boundary and encoding set to var6 ,"def handle_raw_input ( self , input_data , META , content_length , boundary , encoding = None ) : ","def var0 ( self , var2 , var3 , var4 , boundary , encoding = var6 ) : "
"define the method handle_template with 3 arguments: self, template and subdir.","define method var0 with 3 arguments: self, template and var1 ","def handle_template ( self , template , subdir ) : ","def var0 ( self , template , var1 ) : "
"define the method handle_uncaught_exception with self class instance, request, resolver and exec_info as arguments.","define method var0 with self class instance, request var1 and var2 as arguments.","def handle_uncaught_exception ( self , request , resolver , exc_info ) : ","def var0 ( self , request , var1 , exc_info ) : "
define the function has_bom with fn as argument.,define function var0 with var1 as argument.,def has_bom ( fn ) : ,def var0 ( var1 ) : 
define the method has_changed with an argument self.,define method var0 with argument self.,def has_changed ( self ) : ,def var0 ( self ) : 
"define the method has_error with 3 arguments: self, field and code set to None.","define method var0 with 3 arguments: self, field and code set to var2 ","def has_error ( self , field , code = None ) : ","def var0 ( self , field , code = var2 ) : "
define the method has_header with 2 arguments: self and header.,define method var0 with 2 arguments: self and header.,"def has_header ( self , header ) : ","def var0 ( self , header ) : "
"define method has_key with self class instance, key and version set to None as arguments.","define method var0 with self class instance, key and version set to var2 as arguments.","def has_key ( self , key , version = None ) : ","def var0 ( self , key , version = var2 ) : "
"substitute the '%s' with table and list containing key, respectively.   define the method has_key with self class instance, key and version defaulting to None as arguments.","substitute var0 with table and list containing key, respectively var1 define method var2 with self class instance, key and version defaulting to var4 as arguments.","def has_key ( self , key , version = None ) : ","def var2 ( self , key , version = var4 ) : "
"define the method has_key with 3 arguments: self, key, and version set to None.","define method var0 with 3 arguments: self, key, and version set to var2 ","def has_key ( self , key , version = None ) : ","def var0 ( self , key , version = var2 ) : "
"define the method has_key with self class instance, key and version defaulting to None as arguments.","define method var0 with self class instance, key and version defaulting to var2 as arguments.","def has_key ( self , key , version = None ) : ","def var0 ( self , key , version = var2 ) : "
define the method has_key with 2 arguments: self and key.,define method var0 with 2 arguments: self and key.,"def has_key ( self , key ) : ","def var0 ( self , key ) : "
define the method has_leading_dir with 2 arguments self and paths.,define method var0 with 2 arguments self and paths.,"def has_leading_dir ( self , paths ) : ","def var0 ( self , paths ) : "
define the method has_next with an argument self.,define method var0 with argument self.,def has_next ( self ) : ,def var0 ( self ) : 
define the method has_other_pages with an argument self.,define method var0 with argument self.,def has_other_pages ( self ) : ,def var0 ( self ) : 
define the method has_previous with an argument self.,define method var0 with argument self.,def has_previous ( self ) : ,def var0 ( self ) : 
"substitute it for value of dictionary response under the key 'Vary'.   define function has_vary_header, with response and header_query as arguments.",substitute it for value of dict response under key var0 var1 define function var2 with response and var4 as arguments.,"def has_vary_header ( response , header_query ) : ","def var2 ( response , var4 ) : "
define the method hidden_fields with an argument self.,define method var0 with argument self.,def hidden_fields ( self ) : ,def var0 ( self ) : 
and elements of rfcdate from 12-th to the 25-th index.   define the function http_date with an argument epoch_seconds set to None.,and elements of var0 from 12-th to 25-th index var1 define function var2 with argument var4 set to var6 ,def http_date ( epoch_seconds = None ) : ,def var2 ( var4 = var6 ) : 
define the function humanize with an argument dirname.,define function humanize with argument var0 ,def humanize ( dirname ) : ,def humanize ( var0 ) : 
define the method i with an argument self.,define method i with argument self.,def i ( self ) : ,def i ( self ) : 
define the function i18n with an argument request.,define function var0 with argument request.,def i18n ( request ) : ,def var0 ( request ) : 
define the method id_for_label with arguments self and id.,define method var0 with arguments self and ivar1,"def id_for_label ( self , id_ ) : ","def var0 ( self , id_ ) : "
define the method id_for_label with 2 arguments: self and id.,define method var0 with 2 arguments: self and ivar1,"def id_for_label ( self , id_ ) : ","def var0 ( self , id_ ) : "
define the method id_for_label with 2 arguments: self and id_.,define method var0 with 2 arguments: self and id_.,"def id_for_label ( self , id_ ) : ","def var0 ( self , id_ ) : "
return the result.   define the method id_for_label with 2 arguments: self and id_.,return result var0 define method var1 with 2 arguments: self and id_.,"def id_for_label ( self , id_ ) : ","def var1 ( self , id_ ) : "
define the method id_for_label with an argument self.,define method var0 with argument self.,def id_for_label ( self ) : ,def var0 ( self ) : 
define the method IE_sanitize with arguments self and filename.,define method var0 with arguments self and filename.,"def IE_sanitize ( self , filename ) : ","def var0 ( self , filename ) : "
define the function ifchanged with 2 arguments: parser and token.,define function var0 with 2 arguments: parser and token.,"def ifchanged ( parser , token ) : ","def var0 ( parser , token ) : "
define the function ifequal with 2 arguments: parser and token.,define function var0 with 2 arguments: parser and token.,"def ifequal ( parser , token ) : ","def var0 ( parser , token ) : "
define the function ifnotequal with 2 arguments: parser and token.,define function var0 with 2 arguments: parser and token.,"def ifnotequal ( parser , token ) : ","def var0 ( parser , token ) : "
and third element of result of the function sys.exc_info.   define the function import_by_path with 2 arguments dotted_path and error_prefix set to an empty string..,and third element of result of function sys var1 define function var3 with 2 arguments var5 and var7 set to empty string..,"def import_by_path ( dotted_path , error_prefix = '' ) : ","def var3 ( var5 , var7 = '' ) : "
define the function import_library with an argument taglib_module.,define function var0 with argument var1 ,def import_library ( taglib_module ) : ,def var0 ( var1 ) : 
define the function import_module with 3 arguments: name and package set to None.,define function var0 with 3 arguments: name and package set to var2 ,"def import_module ( name , package = None ) : ","def var0 ( name , package = var2 ) : "
define the function import_string with an argument dotted_path.,define function var0 with argument var1 ,def import_string ( dotted_path ) : ,def var0 ( var1 ) : 
define the function include_is_allowed with an argument filepath.,define function var0 with argument var1 ,def include_is_allowed ( filepath ) : ,def var0 ( var1 ) : 
"define the method inclusion_tag with 5 arguments: self, file_name, context_class set to Context, takes_context set to boolean False,",define method var0 with 5 arguments: self var2 var3 set to var5 var6 set to boolean var8 ,"def inclusion_tag ( self , file_name , context_class = Context , takes_context = False , name = None ) : ","def var0 ( self , var2 , var3 = var5 , var6 = var8 , name = None ) : "
"define the method incr with 4 arguments, self class instance, key, delta defaulting to integer 1 and version defaulting to None.","define method var0 with 4 arguments, self class instance, key, delta defaulting to integer 1 and version defaulting to var1 ","def incr ( self , key , delta = 1 , version = None ) : ","def var0 ( self , key , delta = 1 , version = var1 ) : "
"define the method incr with self class instance, key, delta set to integer 1 and version set to None, as arguments.","define method var0 with self class instance, key, delta set to integer 1 and version set to var1 as arguments.","def incr ( self , key , delta = 1 , version = None ) : ","def var0 ( self , key , delta = 1 , version = var1 ) : "
"define the method incr with self, key, delta defaulting to integer 1 and version defaulting to None as arguments.","define method var0 with self, key, delta defaulting to integer 1 and version defaulting to var1 as arguments.","def incr ( self , key , delta = 1 , version = None ) : ","def var0 ( self , key , delta = 1 , version = var1 ) : "
"call the function warnings.warn with previous string and CacheKeyWarning as arguments.   define the method incr_version with 4 arguments, self, key, delta defaulting to integer 1 and version defaulting to None.","call function var0 with previous string and var1 as arguments var2 define method var3 with 4 arguments, self, key, delta defaulting to integer 1 and version defaulting to var5 ","def incr_version ( self , key , delta = 1 , version = None ) : ","def var3 ( self , key , delta = 1 , version = var5 ) : "
define the method indent with argument self and level.,define method indent with argument self and level.,"def indent ( self , level ) : ","def indent ( self , level ) : "
define the function indexbytes with 2 arguments buf and i.,define function var0 with 2 arguments var1 and var2,"def indexbytes ( buf , i ) : ","def var0 ( var1 , i ) : "
define the function infix with 2 arguments bp and func.,define function infix with 2 arguments var1 and var0 ,"def infix ( bp , func ) : ","def infix ( var1 , var0 ) : "
define the method initial_form_count with an argument self.,define method var0 with argument self.,def initial_form_count ( self ) : ,def var0 ( self ) : 
queryset set to qs and unpacked dictionary kwargs.   define the method initial_form_count with an argument self.,var0 set to qs and unpacked dict var1 define method var3 with argument self.,def initial_form_count ( self ) : ,def var3 ( self ) : 
define the method initial_forms with an argument self.,define method var0 with argument self.,def initial_forms ( self ) : ,def var0 ( self ) : 
"define the function inlineformset_factory with 20 arguments: parent_model, model, form set to ModelForm,","define function var0 with 20 arguments: var2 model, form set to var4 ","def inlineformset_factory ( parent_model , model , form = ModelForm , formset = BaseInlineFormSet , fk_name = None , fields = None , exclude = None , extra = 3 , can_order = False , can_delete = True , max_num = None , formfield_callback = None , widgets = None , validate_max = False , localized_fields = None , labels = None , help_texts = None , error_messages = None , min_num = None , validate_min = False ) : ","def var0 ( var2 , model , form = var4 , formset = BaseInlineFormSet , fk_name = None , fields = None , exclude = None , extra = 3 , can_order = False , can_delete = True , max_num = None , formfield_callback = None , widgets = None , validate_max = False , localized_fields = None , labels = None , help_texts = None , error_messages = None , min_num = None , validate_min = False ) : "
define the method inner with argument check.,define method inner with argument check.,def inner ( check ) : ,def inner ( check ) : 
define the method inner with 2 arguments: self and unpacked list args.,define method inner with 2 arguments: self and unpacked list var0 ,"def inner ( self , * args ) : ","def inner ( self , * var0 ) : "
"define the method inner_run with 3 arguments: self, unpacked list args and unpacked dictionary options.","define method var0 with 3 arguments: self, unpacked list var1 and unpacked dict options.","def inner_run ( self , * args , ** options ) : ","def var0 ( self , * var1 , ** options ) : "
define the function inotify_code_changed.,define function var0 ,def inotify_code_changed ( ) : ,def var0 ( ) : 
define the function int_to_base36 with an argument i.,define function var0 with argument var1,def int_to_base36 ( i ) : ,def var0 ( i ) : 
define the function int2byte with an argument i.,define function var0 with argument var1,def int2byte ( i ) : ,def var0 ( i ) : 
"define the method invalid_block_tag with 4 arguments: self, token, command and parse_until as None.","define method var0 with 4 arguments: self, token, command and var2 as var4 ","def invalid_block_tag ( self , token , command , parse_until = None ) : ","def var0 ( self , token , command , var2 = var4 ) : "
"tuple containing 2 elements: list with an element validate_ipv4_address and return value of the function _ with an argument string,   'Enter a valid IPv4 address.' for 'ipv4' and tuple containing 2 elements: list with an element validate_ipv6_address,   and return value of the function _ with an argument string 'Enter a valid IPv6 address.' for 'ipv6'.   define the function ip_address_validators with arguments protocol and unpack_ipv4.",tuple containing 2 elements: list with element var0 and return value of function var2 with argument string var5 var8 for var9 and tuple containing 2 elements: list with element var10 and return value of function var2 with argument string var13 for var16 var5 define function var17 with arguments protocol and var19 ,"def ip_address_validators ( protocol , unpack_ipv4 ) : ","def var17 ( protocol , var19 ) : "
define the method ipython with an argument self.,define method var0 with argument self.,def ipython ( self ) : ,def var0 ( self ) : 
define the function iri_to_uri with iri as an argument.,define function var0 with iri as argument.,def iri_to_uri ( iri ) : ,def var0 ( iri ) : 
define the function iriencode with an argument value.,define function var0 with argument value.,def iriencode ( value ) : ,def var0 ( value ) : 
define the method is_ajax with an argument self.,define method var0 with argument self.,def is_ajax ( self ) : ,def var0 ( self ) : 
define the function is_aware with an argument value.,define function var0 with argument value.,def is_aware ( value ) : ,def var0 ( value ) : 
"and self.choice_label, return the result.   define the method is_checked with an argument self.",and self var1 return result var2 define method var3 with argument self.,def is_checked ( self ) : ,def var3 ( self ) : 
substitute set of the results for self.value.   define the method is_checked with an argument self.,substitute set of results for var0 define method var2 with argument self.,def is_checked ( self ) : ,def var2 ( self ) : 
define the method is_hidden with an argument self.,define method var0 with argument self.,def is_hidden ( self ) : ,def var0 ( self ) : 
define the function is_ignored with arguments path and ignore_patterns.,define function var0 with arguments path and var1 ,"def is_ignored ( path , ignore_patterns ) : ","def var0 ( path , var1 ) : "
define the function is_iterable with an argument x.,define function var0 with argument var1,def is_iterable ( x ) : ,def var0 ( x ) : 
define the function is_library_missing with an argument name.,define function var0 with argument name.,def is_library_missing ( name ) : ,def var0 ( name ) : 
define the method is_multipart with an argument self.,define method var0 with argument self.,def is_multipart ( self ) : ,def var0 ( self ) : 
"return boolean True, otherwise return boolean False.   define the function is_naive with an argument value.",return boolean var0 otherwise return boolean var1 define function var3 with argument value.,def is_naive ( value ) : ,def var3 ( value ) : 
datetime.date and datetime.time.   define the function is_protected_type with obj as the only argument.,var0 and var1 define function var3 with var4 as only argument.,def is_protected_type ( obj ) : ,def var3 ( var4 ) : 
define the method is_rendered with an argument self.,define method var0 with argument self.,def is_rendered ( self ) : ,def var0 ( self ) : 
define the function is_safe_url with 2 arguments url and host set to None.,define function var0 with 2 arguments url and host set to var2 ,"def is_safe_url ( url , host = None ) : ","def var0 ( url , host = var2 ) : "
define the method is_secure with an argument self.,define method var0 with argument self.,def is_secure ( self ) : ,def var0 ( self ) : 
"replace all the '%r' with self.level, self.msg, self.hint. self.obj and self.id, respectively, return the result.   define the method is_serious with argument self.","replace all var0 with var1 var2 var3 self.obj and var4 respectively, return result var5 define method var6 with argument self.",def is_serious ( self ) : ,def var6 ( self ) : 
define the method is_silence with argument self.,define method var0 with argument self.,def is_silenced ( self ) : ,def var0d ( self ) : 
define the method is_url with arguments self and template.,define method var0 with arguments self and template.,"def is_url ( self , template ) : ","def var0 ( self , template ) : "
define the method is_valid with an argument self.,define method var0 with argument self.,def is_valid ( self ) : ,def var0 ( self ) : 
define the function is_valid_ipv6_address with an argument ip_str.,define function var0 with argument var1 ,def is_valid_ipv6_address ( ip_str ) : ,def var0 ( var1 ) : 
define the function is_valid_path with arguments path and urlconf set to None.,define function var0 with arguments path and var2 set to var3 ,"def is_valid_path ( path , urlconf = None ) : ","def var0 ( path , var2 = var3 ) : "
"of if sample starts with codecs.BOM_UTF16_LE or sample starts with codecs.BOM_UTF16_BE, return the evaluated boolean expression.   define the function is_writable with path as argument,","of if sample starts with var0 var2 or sample starts with var0 var3 return evaluated boolean expression var5 define function var6 with path as argument,",def is_writable ( path ) : ,def var6 ( path ) : 
define the method item_attributes with 2 arguments self and item.,define method var0 with 2 arguments self and item.,"def item_attributes ( self , item ) : ","def var0 ( self , item ) : "
define the method items with an argument self.,define method items with argument self.,def items ( self ) : ,def items ( self ) : 
define the function iter_format_modules with 2 arguments: lang and format_module_path set to None.,define function var0 with 2 arguments: var2 and var3 set to var5 ,"def iter_format_modules ( lang , format_module_path = None ) : ","def var0 ( var2 , var3 = var5 ) : "
define the function iterbytes with an argument buf.,define function var0 with argument var1 ,def iterbytes ( buf ) : ,def var0 ( var1 ) : 
return it.   define the function iteritems with 2 arguments: d and unpacked dictionary  kw.,return it var1 define function var2 with 2 arguments: d and unpacked dict kw.,"def iteritems ( d , ** kw ) : ","def var2(d,var0**var0kw): "
define the function iterkeys with 2 arguments: d and unpacked dictionary  kw.,define function var1 with 2 arguments: d and unpacked dict kw.,"def iterkeys ( d , ** kw ) : ","def var1(d,var0**var0kw): "
return it.   define the function iterlists with 2 arguments: d and unpacked dictionary  kw.,return it var1 define function var2 with 2 arguments: d and unpacked dict kw.,"def iterlists ( d , ** kw ) : ","def var2(d,var0**var0kw): "
return it.   define the function itervalues with 2 arguments: d and unpacked dictionary  kw.,return it var1 define function var2 with 2 arguments: d and unpacked dict kw.,"def itervalues ( d , ** kw ) : ","def var2(d,var0**var0kw): "
define the method j with an argument self.,define method j with argument self.,def j ( self ) : ,def j ( self ) : 
define the function javascript_quote with 2 arguments: s and quote_double_quotes set to boolean False.,define function var0 with 2 arguments: s and var2 set to boolean var4 ,"def javascript_quote ( s , quote_double_quotes = False ) : ","def var0 ( s , var2 = var4 ) : "
"define the function join with 3 arguments: value, arg and autoescape set to None.",define function join with 3 arguments: value var0 and var1 set to var2 ,"def join ( value , arg , autoescape = None ) : ","def join ( value , var0 , var1 = var2 ) : "
define the function join_tokens with 2 arguments: tokens and trim set to boolean False.,define function var0 with 2 arguments: tokens and trim set to boolean var2 ,"def join_tokens ( tokens , trim = False ) : ","def var0 ( tokens , trim = var2 ) : "
"define the function jython_reloader with main_func, args and kwargs as arguments.",define function var0 with var1 var3 and var4 as arguments.,"def jython_reloader ( main_func , args , kwargs ) : ","def var0 ( var1 , var3 , var4 ) : "
define the method keys with an argument self.,define method keys with argument self.,def keys ( self ) : ,def keys ( self ) : 
return resulting list.   define the method keys with an argument self.,return resulting list var0 define method keys with argument self.,def keys ( self ) : ,def keys ( self ) : 
define the method l with an argument self.,define method l with argument self.,def l ( self ) : ,def l ( self ) : 
define the method label_from_instance with 2 arguments: self and obj.,define method var0 with 2 arguments: self and var1 ,"def label_from_instance ( self , obj ) : ","def var0 ( self , var1 ) : "
"define the method label_tag with 4 arguments: self, contents set to None, attrs set to None and label_suffix set to None.","define method var0 with 4 arguments: self, contents set to var1 var4 set to var1 and var5 set to var1 ","def label_tag ( self , contents = None , attrs = None , label_suffix = None ) : ","def var0 ( self , contents = var1 , var4 = var1 , var5 = var1 ) : "
define the method language with an argument self.,define method language with argument self.,def language ( self ) : ,def language ( self ) : 
define the function last with an argument value.,define function last with argument value.,def last ( value ) : ,def last ( value ) : 
define the method latest_post_date with an argument self.,define method var0 with argument self.,def latest_post_date ( self ) : ,def var0 ( self ) : 
define the function lazy with 2 arguments: func and unpacked list resultclasses.,define function lazy with 2 arguments: var0 and unpacked list var1 ,"def lazy ( func , * resultclasses ) : ","def lazy ( var0 , * var1 ) : "
"define the function lazy_number with 4 arguments: func, resultclass, number set to None and unpacked dictionary kwargs.",define function var1 with 4 arguments: var0 var3 number set to var4 and unpacked dict var5 ,"def lazy_number ( func , resultclass , number = None , ** kwargs ) : ","def var1 ( var0 , var3 , number = var4 , ** var5 ) : "
"define function learn_cache_key with request, response, cache_timeout set to None, key_prefix set to None, cache set to None as arguments.","define function var0 with request, response var2 set to var4 var7 set to var4 cache set to var4 as arguments.","def learn_cache_key ( request , response , cache_timeout = None , key_prefix = None , cache = None ) : ","def var0 ( request , response , var2 = var4 , var7 = var4 , cache = var4 ) : "
"where '%s' is replaced with self.id.   define the method led with 3 arguments: self, left and parser.","var0 var1 is replaced with var2 define method led with 3 arguments: self, left and parser.","def led ( self , left , parser ) : ","def led ( self , left , parser ) : "
"define the method led with 3 arguments self, left and parser.","define method led with 3 arguments self, left and parser.","def led ( self , left , parser ) : ","def led ( self , left , parser ) : "
define the function length with an argument value.,define function length with argument value.,def length ( value ) : ,def length ( value ) : 
define the function length_is with 2 arguments value and arg.,define function var0 with 2 arguments value and var1 ,"def length_is ( value , arg ) : ","def var0 ( value , var1 ) : "
define the method lex with 2 arguments self and text.,define method var0 with 2 arguments self and text.,"def lex ( self , text ) : ","def var0 ( self , text ) : "
"separated with result of the function conditional_escape with an argument sep, for every args in args_generator,   use the result as an argument for the call to the function mark_safe, return the result.   define the function linebreaks with 2 arguments: value and autoescape set to boolean False.","separated with result of function var0 with argument sep, for every var2 in var3 use result as argument for call to function var7 return result var5 define function var9 with 2 arguments: value and var10 set to boolean var11 ","def linebreaks ( value , autoescape = False ) : ","def var9 ( value , var10 = var11 ) : "
define the function linebreaks_filter with 2 arguments value and autoescape set to None.,define function var0 with 2 arguments value and var2 set to var3 ,"def linebreaks_filter ( value , autoescape = None ) : ","def var0 ( value , var2 = var3 ) : "
define the function linebreaksbr with 2 arguments value and autoescape set to None.,define function var0 with 2 arguments value and var1 set to var2 ,"def linebreaksbr ( value , autoescape = None ) : ","def var0 ( value , var1 = var2 ) : "
define the function linenumbers with 2 arguments value and autoescape set to None.,define function var0 with 2 arguments value and var1 set to var2 ,"def linenumbers ( value , autoescape = None ) : ","def var0 ( value , var1 = var2 ) : "
define the method __init__ with 3 arguments self and unpacked list args and unpacked dictionary kwargs.,define method var0 with 3 arguments self and unpacked list var1 and unpacked dict var2 ,"def list ( self , * args , ** kwargs ) : ","def list ( self , * var1 , ** var2 ) : "
define the method list with 3 arguments: self and unpacked list args and unpacked dictionary kwargs.,define method list with 3 arguments: self and unpacked list var0 and unpacked dict var1 ,"def list ( self , * args , ** kwargs ) : ","def list ( self , * var0 , ** var1 ) : "
define the method list with an argument self.,define method list with argument self.,def list ( self ) : ,def list ( self ) : 
define the method listdir with arguments self and path.,define method var0 with arguments self and path.,"def listdir ( self , path ) : ","def var0 ( self , path ) : "
define the method lists with an argument self.,define method lists with argument self.,def lists ( self ) : ,def lists ( self ) : 
"define the function literals with 3 arguments: choices, prefix set to an empty string and suffix set to an empty string.","define function literals with 3 arguments: choices, prefix set to empty string and suffix set to empty string.","def literals ( choices , prefix = '' , suffix = '' ) : ","def literals ( choices , prefix = '' , suffix = '' ) : "
define the function ljust with 2 arguments value and arg.,define function var0 with 2 arguments value and var1 ,"def ljust ( value , arg ) : ","def var0 ( value , var1 ) : "
define the function load with 2 arguments: parser and token.,define function load with 2 arguments: parser and token.,"def load ( parser , token ) : ","def load ( parser , token ) : "
define the method load with self class instance and rawdata as arguments.,define method load with self class instance and var0 as arguments.,"def load ( self , rawdata ) : ","def load ( self , var0 ) : "
define the function load_command_class with arguments: app_name and name.,define function var0 with arguments: var1 and name.,"def load_command_class ( app_name , name ) : ","def var0 ( var1 , name ) : "
"name set to self.file_name, content_type set to self.content_type, size set to file_size, charset set to self.charset,   and content_type_extra set to self.content_type_extra, return it.   define the function load_handler with arguments: path, unpacked list args and unpacked dictionary kwargs.","name set to self var1 var2 set to self var2 size set to var6 var8 set to self var8 and var12 set to self var12 return it var10 define function var16 with arguments: path, unpacked list var18 and unpacked dict var19 ","def load_handler ( path , * args , ** kwargs ) : ","def var16 ( path , * var18 , ** var19 ) : "
"substitute '%d' with self.loaded_object_count, self.fixture_object_count and self.fixture_count.   define the method load_label with self and fixture_label as arguments.",substitute var0 with self var2 self var4 and self var6 define method var8 with self and var10 as arguments.,"def load_label ( self , fixture_label ) : ","def var8 ( self , var10 ) : "
define method load_middleware with class instance self as the argument.,define method var0 with class instance self as argument.,def load_middleware ( self ) : ,def var0 ( self ) : 
"define the method load_template with 3 arguments: self, template_name and template_dirs set to None.",define method var0 with 3 arguments: self var2 and var4 set to var6 ,"def load_template ( self , template_name , template_dirs = None ) : ","def var0 ( self , var2 , var4 = var6 ) : "
"define the method load_template with 3 arguments: self, template_name, template_dirs set to None.",define method var0 with 3 arguments: self var2 var4 set to var6 ,"def load_template ( self , template_name , template_dirs = None ) : ","def var0 ( self , var2 , var4 = var6 ) : "
"define the method load_template_source with 3 arguments: self, template_name and template_dirs set to None.",define method var0 with 3 arguments: self var1 and var3 set to var5 ,"def load_template_source ( self , template_name , template_dirs = None ) : ","def var0 ( self , var1 , var3 = var5 ) : "
"define the method load_template_source with 3 arguments: self, template_name, template_dirs set to None.",define method var0 with 3 arguments: self var1 var3 set to var5 ,"def load_template_source ( self , template_name , template_dirs = None ) : ","def var0 ( self , var1 , var3 = var5 ) : "
define the method loaddata with 2 arguments self and fixture_labels.,define method var0 with 2 arguments self and var1 ,"def loaddata ( self , fixture_labels ) : ","def var0 ( self , var1 ) : "
define the method loaders with an argument self.,define method loaders with argument self.,def loaders ( self ) : ,def loaders ( self ) : 
"define the function loads with 5 arguments: s, key set to None, salt set to string 'django.core.signing',","define function loads with 5 arguments: s, key set to var0 salt set to string var1,","def loads ( s , key = None , salt = 'django.core.signing' , serializer = JSONSerializer , max_age = None ) : ","def loads ( s , key = var0 , salt = var1 , serializer = JSONSerializer , max_age = var0 ) : "
"call the encode method on the result with string 'latin-1' as an argument, return the result.   define the method loads with arguments self and data.","call encode method on result with string var0 as argument, return result var1 define method loads with arguments self and data.","def loads ( self , data ) : ","def loads ( self , data ) : "
"string 'DECIMAL_SEPARATOR', lang and use_l10n set to use_l10n, decimal_pos, result of the function get_format called with 3 arguments:   string 'NUMBER_GROUPING', lang and use_l10n as use_l10n, result of the function get_format called with an argument:   string 'THOUSAND_SEPARATOR', lang and use_l10n as use_l10n and force_grouping as force_grouping, return the result.   define the function localize with 2 arguments value and use_l10n set to None.",string var0 var1 and var4 set to var4 var18 result of function var20 called with 3 arguments: string var27 var1 and var4 as var4 result of function var20 called with argument: string var30 var1 and var4 as var4 and var33 as var33 return result var24 define function localize with 2 arguments value and var4 set to var37 ,"def localize ( value , use_l10n = None ) : ","def localize ( value , var4 = var37 ) : "
define the function localize_input with 2 arguments value and default set to None.,define function var0 with 2 arguments value and default set to var2 ,"def localize_input ( value , default = None ) : ","def var0 ( value , default = var2 ) : "
define the function localtime with 2 arguments: value and timezone set to None.,define function var0 with 2 arguments: value and var1 set to var2 ,"def localtime ( value , timezone = None ) : ","def var0 ( value , var1 = var2 ) : "
define the function lock with arguments f and flags.,define function lock with arguments f and flags.,"def lock ( f , flags ) : ","def lock ( f , flags ) : "
define the function server_bind with an argument self.,define function var0 with argument self.,"def log_message ( self , format , * args ) : ","def log_message ( self , format , * args ) : "
define the function lower with an argument value.,define function lower with argument value.,def lower ( value ) : ,def lower ( value ) : 
define the function lru_cache with 2 arguments maxsize set to integer 100 and typed set to boolean False.,define function var0 with 2 arguments var2 set to integer 100 and typed set to boolean var3 ,"def lru_cache ( maxsize = 100 , typed = False ) : ","def var0 ( var2 = 100 , typed = var3 ) : "
define the function luhn with an argument candidate.,define function var0 with argument didate.,def luhn ( candidate ) : ,def var0 ( candidate ) : 
define the method m with an argument self.,define method m with argument self.,def m ( self ) : ,def m ( self ) : 
"define the function m2m_convert with an argument n,","define function var0 with argument n,",def m2m_convert ( n ) : ,def var0 ( n ) : 
define the function m2m_convert with an argument value.,define function var0 with argument value.,def m2m_convert ( value ) : ,def var0 ( value ) : 
"define the function mail_admins with subject, message, fails_silently set to boolean False, connection set to None,","define function var0 with subject, message var2 set to boolean var4 connection set to var5 ","def mail_admins ( subject , message , fail_silently = False , connection = None , html_message = None ) : ","def var0 ( subject , message , fail_silently = var4 , connection = var5 , html_message = var5 ) : "
"define the function mail_managers with subject, message, fails_silently set to boolean False, connection set to None,","define function var0 with subject, message var2 set to boolean var4 connection set to var5 ","def mail_managers ( subject , message , fail_silently = False , connection = None , html_message = None ) : ","def var0 ( subject , message , fail_silently = var4 , connection = var5 , html_message = var5 ) : "
"define the function main, with main_func, args defaulting to None and kwargs defaulting to None as arguments.","define function main, with var0 var2 defaulting to var3 and var5 defaulting to var3 as arguments.","def main ( main_func , args = None , kwargs = None ) : ","def main ( var0 , var2 = var3 , kwvar2 = var3 ) : "
define the method  main_help_text with arguments: self class instance and commands_only set to boolean False.,define method var1 with arguments: self class instance and var2 set to boolean var4var0,"def main_help_text ( self , commands_only = False ) : ","def var1 ( self , var0var2 = var4 ) : "
"return boolean True, otherwise return boolean False.   define the function make_aware with 2 arguments: value and timezone.",return boolean var0 otherwise return boolean var1 define function var3 with 2 arguments: value and var5 ,"def make_aware ( value , timezone ) : ","def var3 ( value , var5 ) : "
"expires as a string 'Thu, 01-Jan-1970 00:00:00 GMT', return the result.   define the method make_bytes with 2 arguments: self and value.","expires as string var0, return result var1 define method var2 with 2 arguments: self and value.","def make_bytes ( self , value ) : ","def var2 ( self , value ) : "
"define the function make_key with self class instance, key and version set to None as arguments.","define function var0 with self class instance, key and version set to var2 as arguments.","def make_key ( self , key , version = None ) : ","def var0 ( self , key , version = var2 ) : "
"define the method make_key with self class instance, key and version defaulting to None as arguments.","define method var0 with self class instance, key and version defaulting to var2 as arguments.","def make_key ( self , key , version = None ) : ","def var0 ( self , key , version = var2 ) : "
define the function make_list with an argument value.,define function var0 with argument value.,def make_list ( value ) : ,def var0 ( value ) : 
define the function make_middleware_decorator with an argument middleware_class.,define function var0 with argument var1 ,def make_middleware_decorator ( middleware_class ) : ,def var0 ( var1 ) : 
define the function make_msgid with argument idstring set to None.,define function var0 with argument var2 set to var3 ,def make_msgid ( idstring = None ) : ,def var0 ( var2 = var3 ) : 
define the function make_naive with 2 arguments: value and timezone.,define function var0 with 2 arguments: value and var1 ,"def make_naive ( value , timezone ) : ","def var0 ( value , var1 ) : "
"define the function make_origin with 4 arguments: display_name, loader, name and dirs.","define function var0 with 4 arguments: var1 loader, name and var3 ","def make_origin ( display_name , loader , name , dirs ) : ","def var0 ( var1 , loader , name , var3 ) : "
return the string.   define the function make_style with 2 arguments: opts set to an empty tuple and unpacked dictionary kwargs.,return string var0 define function var1 with 2 arguments: opts set to empty tuple and unpacked dict var2 ,"def make_style ( opts = ( ) , ** kwargs ) : ","def var1 ( opts = ( ) , ** var2 ) : "
define the function make_template_fragment_key with fragment_name and vary_on defaulting to None as arguments.,define function var0 with var2 and var4 defaulting to var6 as arguments.,"def make_template_fragment_key ( fragment_name , vary_on = None ) : ","def var0 ( var2 , var4 = var6 ) : "
"define the method make_view_atomic, with self class instance and view as the arguments.",define method var0 with self class instance and view as arguments.,"def make_view_atomic ( self , view ) : ","def var0 ( self , view ) : "
define the method make_writeable with arguments self and filename.,define method var0 with arguments self and filename.,"def make_writeable ( self , filename ) : ","def var0 ( self , filename ) : "
define the method management_form with an argument self.,define method var0 with argument self.,def management_form ( self ) : ,def var0 ( self ) : 
define the function mark_for_escaping with an argument s.,define function var0 with argument var1,def mark_for_escaping ( s ) : ,def var0 ( s ) : 
define the method media with an argument self.,define method media with argument self.,def media ( self ) : ,def media ( self ) : 
define the function media_property with an argument cls.,define function var0 with argument cls.,def media_property ( cls ) : ,def var0 ( cls ) : 
"define the function memoize with 3 arguments: func, cache and num_args.",define function var1 with 3 arguments: var0 cache and var2 ,"def memoize ( func , cache , num_args ) : ","def var1 ( var0 , cache , var2 ) : "
define the method merge with 2 arguments self and other.,define method merge with 2 arguments self and other.,"def merge ( self , other ) : ","def merge ( self , other ) : "
define the method message with argument self.,define method message with argument self.,def message ( self ) : ,def message ( self ) : 
define the method message_dict with an argument self.,define method var0 with argument self.,def message_dict ( self ) : ,def var0 ( self ) : 
define the messages with an argument self.,define messages with argument self.,def messages ( self ) : ,def messages ( self ) : 
define the function method_decorator with an argument decorator.,define function var0 with argument decorator.,def method_decorator ( decorator ) : ,def var0 ( decorator ) : 
"define the method migration_progress_callback with self class instance, action, migration and fake set to boolean False as arguments.","define method var0 with self class instance, action, migration and fake set to boolean var2 as arguments.","def migration_progress_callback ( self , action , migration , fake = False ) : ","def var0 ( self , action , migration , fake = var2 ) : "
"and app_config.label is contained in app_labels, create a tuple containing app_config.label and return value of the method   router.get_migratable_models called with app_config, connection.alias and include_auto_created set to True, append the tuple to the list all_models.   define the method model_installed with model as an argument.",and var0 label is contained in var6 create tuple containing var0 label and return value of method router var11 called with var0 var12 and var13 set to var15 append tuple to list var16 define method var18 with model as argument.,def model_installed ( model ) : ,def var18 ( model ) : 
"define the function model_to_dict with 3 arguments: instance, fields set to None and exclude set None.","define function var0 with 3 arguments: instance, fields set to var2 and exclude set var2 ","def model_to_dict ( instance , fields = None , exclude = None ) : ","def var0 ( instance , fields = var2 , exclude = var2 ) : "
define the function modelform_defines_fields with an argument form_class.,define function var0 with argument var1 ,def modelform_defines_fields ( form_class ) : ,def var0 ( var1 ) : 
"define the function modelform_factory with 10 arguments: model, form set to ModelForm, fields set to None, exclude set to None,","define function var0 with 10 arguments: model, form set to var2 fields set to var3 exclude set to var3 ","def modelform_factory ( model , form = ModelForm , fields = None , exclude = None , formfield_callback = None , widgets = None , localized_fields = None , labels = None , help_texts = None , error_messages = None ) : ","def var0 ( model , form = var2 , fields = var3 , exclude = var3 , formfield_callback = var3 , widgets = var3 , localized_fields = var3 , labels = var3 , help_texts = var3 , error_messages = var3 ) : "
"define the function modelformset_factory with 18 arguments: model, form set to ModelForm, formfield_callback set to None,","define function var0 with 18 arguments: model, form set to var2 var3 set to var5 ","def modelformset_factory ( model , form = ModelForm , formfield_callback = None , formset = BaseModelFormSet , extra = 1 , can_delete = False , can_order = False , max_num = None , fields = None , exclude = None , widgets = None , validate_max = False , localized_fields = None , labels = None , help_texts = None , error_messages = None , min_num = None , validate_min = False ) : ","def var0 ( model , form = var2 , var3 = var5 , formset = BaseModelFormSet , extra = 1 , can_delete = False , can_order = False , max_num = var5 , fields = var5 , exclude = var5 , widgets = var5 , validate_max = False , localized_fields = var5 , labels = var5 , help_texts = var5 , error_messages = var5 , min_num = var5 , validate_min = False ) : "
define the method modified_time with arguments self and name.,define method var0 with arguments self and name.,"def modified_time ( self , name ) : ","def var0 ( self , name ) : "
"use the result as an argument for the call to the function datetime.fromtimestamp, return the result.   define the method modified_time with arguments self and name.",use result as argument for call to function var0 return result var1 define method var2 with arguments self and name.,"def modified_time ( self , name ) : ","def var2 ( self , name ) : "
define the function module_has_submodule with 2 arguments: package and module_name.,define function var0 with 2 arguments: package and var1 ,"def module_has_submodule ( package , module_name ) : ","def var0 ( package , var1 ) : "
"define the function module_to_dict with 2 arguments: module and omittable as a lambda function with an argument k,","define function var0 with 2 arguments: module and var1 as lambda function with argument k,","def module_to_dict ( module , omittable = lambda k : k . startswith ( '_' ) ) : ","def var0 ( module , var1 = lambda k : k . startswith ( '_' ) ) : "
define the method more with an argument self.,define method more with argument self.,def more ( self ) : ,def more ( self ) : 
define the method __multiple_chunks__ with arguments self and chunk_size defaulting to None.,define method var0 with arguments self and var1 defaulting to var3 ,"def multiple_chunks ( self , chunk_size = None ) : ","def multiple_chunks ( self , var1 = var3 ) : "
define the method multiple_chunks with arguments self and hunk_size set to None.,define method var0 with arguments self and var2 set to var4 ,"def multiple_chunks ( self , chunk_size = None ) : ","def var0 ( self , cvar2 = var4 ) : "
define the method n with an argument self.,define method n with argument self.,def n ( self ) : ,def n ( self ) : 
define the method namespace_dict with an argument self.,define method var0 with argument self.,def namespace_dict ( self ) : ,def var0 ( self ) : 
define the method needs_multipart_form with an argument self.,define method var0 with argument self.,def needs_multipart_form ( self ) : ,def var0 ( self ) : 
define the method negate with an argument self.,define method negate with argument self.,def negate ( self ) : ,def negate ( self ) : 
define the method new with 2 arguments: self and values set to None.,define method new with 2 arguments: self and values set to var0 ,"def new ( self , values = None ) : ","def new ( self , values = var0 ) : "
define the function new_date with an argument d.,define function var0 with argument var1,def new_date ( d ) : ,def var0 ( d ) : 
define the function new_datetime with an argument d.,define function var0 with argument var1,def new_datetime ( d ) : ,def var0 ( d ) : 
"define the method new_file with arguments: self, unpacked list args and unpacked dictionary kwargs.","define method var0 with arguments: self, unpacked list var1 and unpacked dict var2 ","def new_file ( self , * args , ** kwargs ) : ","def var0 ( self , * var1 , ** var2 ) : "
"define the method new_file with arguments: self, field_name, file_name, content_type, content_length, charset set to None,",define method var0 with arguments: self var2 var4 var5 var7 var9 set to var10 ,"def new_file ( self , field_name , file_name , content_type , content_length , charset = None , content_type_extra = None ) : ","def var0 ( self , var2 , var4 , var5 , var7 , var9 = var10 , var5_extra = var10 ) : "
"and unpacked dictionary kwargs.   define the method new_file with arguments: self, file_name, unpacked list args and unpacked dictionary kwargs.",and unpacked dict var0 define method var4 with arguments: self var5 unpacked list var2 and unpacked dict var0 ,"def new_file ( self , file_name , * args , ** kwargs ) : ","def var4 ( self , var5 , * var2 , ** var0 ) : "
define the function new_method_proxy with an argument func.,define function var1 with argument var0 ,def new_method_proxy ( func ) : ,def var1 ( var0 ) : 
define the method next with an argument self.,define method next with argument self.,def next ( self ) : ,def next ( self ) : 
define the function next_char with an argument input_iter.,define function var0 with argument var1 ,def next_char ( input_iter ) : ,def var0 ( var1 ) : 
define the method next_page_number with an argument self.,define method var0 with argument self.,def next_page_number ( self ) : ,def var0 ( self ) : 
define the next_space_index with 2 arguments: subject and i.,define var0 with 2 arguments: subject and var1,"def next_space_index ( subject , i ) : ","def var0 ( subject , i ) : "
define the method next_token with an argument self.,define method var0 with argument self.,def next_token ( self ) : ,def var0 ( self ) : 
"define the function ngettext with 3 arguments: singular, plural and number.","define function var0 with 3 arguments: singular, plural and number.","def ngettext ( singular , plural , number ) : ","def var0 ( singular , plural , number ) : "
"define the function ngettext_lazy with 3 arguments: singular, plural and number set to None.","define function var0 with 3 arguments: singular, plural and number set to var2 ","def ngettext_lazy ( singular , plural , number = None ) : ","def var0 ( singular , plural , number = var2 ) : "
"define function no_style, without input arguments.",define function var0 var1 input arguments.,def no_style ( ) : ,def var0 ( ) : 
define the method nodelist with an argument self.,define method var0 with argument self.,def nodelist ( self ) : ,def var0 ( self ) : 
"<p%(html_class_attr)s>%(label)s %(field)s%(help_text)s</p>', error_row set to a a string '%s', row_ender set to a string '</p>',   help_text_html set to a string, <span class=""helptext"">%s</span>' and errors_on_separate_row set to boolean True.   define the method non_field_errors with an argument self.",<p%(html_class_attr)s>%(label)s %(field)s%(help_text)s</p>var6%svar8</p>var11 and var17 set to boolean var19 define method var20 with argument self.,def non_field_errors ( self ) : ,def var20 ( self ) : 
define the method non_form_errors with an argument self.,define method var0 with argument self.,def non_form_errors ( self ) : ,def var0 ( self ) : 
define the function normalize with an argument pattern.,define function normalize with argument pattern.,def normalize ( pattern ) : ,def normalize ( pattern ) : 
"define the method normalize_col_name with 4 arguments: self, col_name, used_column_names and is_relation.",define method var0 with 4 arguments: self var1 var2 and var4 ,"def normalize_col_name ( self , col_name , used_column_names , is_relation ) : ","def var0 ( self , var1 , var2 , var4 ) : "
define the function normalize_newlines with an argument text.,define function var0 with argument text.,def normalize_newlines ( text ) : ,def var0 ( text ) : 
define the function now.,define function now.,def now ( ) : ,def now ( ) : 
define the function now with 2 arguments: parser and token.,define function now with 2 arguments: parser and token.,"def now ( parser , token ) : ","def now ( parser , token ) : "
define the function npath with an argument path.,define function var0 with argument path.,def npath ( path ) : ,def var0 ( path ) : 
"define the function npgettext with 4 arguments: context, singular, plural and number.","define function var0 with 4 arguments: context, singular, plural and number.","def npgettext ( context , singular , plural , number ) : ","def var0 ( context , singular , plural , number ) : "
"define the function ngettext with 4 arguments: context, singular, plural and number.","define function var0 with 4 arguments: context, singular, plural and number.","def npgettext ( context , singular , plural , number ) : ","def npgettext ( context , singular , plural , number ) : "
"and number set to number, return the result.   define the function npgettext_lazy with 4 arguments: context, singular, plural and number set to None.","and number set to number, return result var0 define function var1 with 4 arguments: context, singular, plural and number set to var3 ","def npgettext_lazy ( context , singular , plural , number = None ) : ","def var1 ( context , singular , plural , number = var3 ) : "
define the method nud with 2 arguments: self and parser.,define method var0 with 2 arguments: self and parser.,"def nud ( self , parser ) : ","def var0 ( self , parser ) : "
define the method nud with 2 arguments self and parser.,define method var0 with 2 arguments self and parser.,"def nud ( self , parser ) : ","def var0 ( self , parser ) : "
define the method num_items with an argument self.,define method var0 with argument self.,def num_items ( self ) : ,def var0 ( self ) : 
"format, if its true, otherwise string 'TIME_FORMAT' and use_l10n as use_l10n, return the result.   define the function number_format with 4 arguments: value, decimal_pos set to None, use_l10n set to None,","format, if its true, otherwise string var0 and var1 as var1 return result var7 define function var8 with 4 arguments: value var10 set to var11 var1 set to var11 ","def number_format ( value , decimal_pos = None , use_l10n = None , force_grouping = False ) : ","def var8 ( value , var10 = var11 , var1 = var11 , force_grouping = False ) : "
define the method O with an argument self.,define method O with argument self.,def O ( self ) : ,def O ( self ) : 
define the method open with arguments self and mode defaulting to None.,define method open with arguments self and mode defaulting to var0 ,"def open ( self , mode = None ) : ","def open ( self , mode = var0 ) : "
define the method open with arguments self and mode set to None.,define method open with arguments self and mode set to var0 ,"def open ( self , mode = None ) : ","def open ( self , mode = var0 ) : "
"define the method open with arguments self, name and mode defaulting to string 'rb'.","define method open with arguments self, name and mode defaulting to string var0.","def open ( self , name , mode = 'rb' ) : ","def open ( self , name , mode = var0 ) : "
define the method open with argument self.,define method open with argument self.,def open ( self ) : ,def open ( self ) : 
define the method ordered_forms with an argument self.,define method var0 with argument self.,def ordered_forms ( self ) : ,def var0 ( self ) : 
"reminder of the division of floored result of division of seconds by 60, by integer 60.   define the method P with an argument self.","reminder of division of floored result of division of seconds by 60, by integer 60 var0 define method P with argument self.",def P ( self ) : ,def P ( self ) : 
define the method page with self class instance and number as arguments.,define method page with self class instance and number as arguments.,"def page ( self , number ) : ","def page ( self , number ) : "
define the emethod parse with 2 arguments: self and parse_until set to None.,define var0 parse with 2 arguments: self and var1 set to var3 ,"def parse ( self , parse_until = None ) : ","def parse ( self , var1 = var3 ) : "
define the method parse with an argument self.,define method parse with argument self.,def parse ( self ) : ,def parse ( self ) : 
define the function parse_accept_lang_header with an argument lang_string.,define function var0 with argument var1 ,def parse_accept_lang_header ( lang_string ) : ,def var0 ( var1 ) : 
"define the method parse_args with 3 arguments: self, args set to None and namespace set to None.",define method var0 with 3 arguments: self var2 set to var3 and var5 set to var3 ,"def parse_args ( self , args = None , namespace = None ) : ","def var0 ( self , var2 = var3 , var5 = var3 ) : "
"define the function parse_bits with 8 arguments: parser, bits, params, varargs, varkw, defaults, takes_context and name.","define function var0 with 8 arguments: parser, bits var1 var2 var3 defaults var4 and name.","def parse_bits ( parser , bits , params , varargs , varkw , defaults , takes_context , name ) : ","def var0 ( parser , bits , var1 , var2 , var3 , defaults , var4 , name ) : "
define the function parse_boundary_stream with arguments stream and max_header_size.,define function var0 with arguments stream and var1 ,"def parse_boundary_stream ( stream , max_header_size ) : ","def var0 ( stream , var1 ) : "
define the function parse_color_setting with an argument config_string.,define function var0 with argument var1 ,def parse_color_setting ( config_string ) : ,def var0 ( var1 ) : 
define the function parse_cookie with cookie as the argument.,define function var0 with cookie as argument.,def parse_cookie ( cookie ) : ,def var0 ( cookie ) : 
"(?::(?P<second>\d{1,2})(?:\.(?P<microsecond>\d{1,6})\d{0,6})?)?(?P<tzinfo>Z|[+-]\d{2}(?::?\d{2})?)?$', substitute it for datetime_re.   define the function parse_date with an argument value.","(?::(?P<second>\d{1,2})(?:\.(?P<microsecond>\d{1,6})\d{0,6})?)?(?P<tzinfo>Z|[+-]\d{2}(?::?\d{2})?)?$', substitute it for datetime_re.   define the function parse_date with an argument value.",def parse_date ( value ) : ,def parse_date ( value ) : 
define the function parse_datetime with an argument value.,define function var0 with argument value.,def parse_datetime ( value ) : ,def var0 ( value ) : 
define the method parse_endtag with self class instance and i as the arguments.,define method var0 with self class instance and i as arguments.,"def parse_endtag ( self , i ) : ","def var0 ( self , i ) : "
define the function parse_etags with an argument etag_str.,define function var0 with argument var1 ,def parse_etags ( etag_str ) : ,def var0 ( var1 ) : 
"define the method parse_file_upload with 3 arguments: self, META and post_data.",define method var0 with 3 arguments: self var2 and var3 ,"def parse_file_upload ( self , META , post_data ) : ","def var0 ( self , var2 , var3 ) : "
define the function parse_header with an argument line.,define function var0 with argument line.,def parse_header ( line ) : ,def var0 ( line ) : 
define the function parse_http_date with an argument date.,define function var0 with argument date.,def parse_http_date ( date ) : ,def var0 ( date ) : 
%r is not a valid date formated with date and third element of the result of the function sys.exc_info.   define the function parse_http_date_safe an argument date.,%r is not valid date formated with date and third element of result of function sys var2 define function var4 argument date.,def parse_http_date_safe ( date ) : ,def var4 ( date ) : 
define the method parse_name with arguments self and fixture_name.,define method var0 with arguments self and var1 ,"def parse_name ( self , fixture_name ) : ","def var0 ( self , var1 ) : "
define method parse_starttag with self class instance and i as the arguments.,define method var0 with self class instance and i as arguments.,"def parse_starttag ( self , i ) : ","def var0 ( self , i ) : "
define the function parse_time with an argument value.,define function var0 with argument value.,def parse_time ( value ) : ,def var0 ( value ) : 
define the function partition with 2 arguments: predicate and values.,define function partition with 2 arguments: predicate and values.,"def partition ( predicate , values ) : ","def partition ( predicate , values ) : "
define the function parts.,define function parts.,def parts ( ) : ,def parts ( ) : 
"define function patch_cache_control, with response and dictionary set of arguments, kwargs, as arguments.",define function var0 with response and dict set of arguments var1 as arguments.,"def patch_cache_control ( response , ** kwargs ) : ","def var0 ( response , ** var1 ) : "
"define the function patch_response_headers, with response and cache_timeout with None as default value, as arguments.","define function var0 with response and var2 with var4 as default value, as arguments.","def patch_response_headers ( response , cache_timeout = None ) : ","def var0 ( response , var2 = var4 ) : "
"define function patch_vary_headers, with response and newheaders as arguments.",define function var0 with response and var1 as arguments.,"def patch_vary_headers ( response , newheaders ) : ","def var0 ( response , var1 ) : "
define the method path with arguments self and name.,define method path with arguments self and name.,"def path ( self , name ) : ","def path ( self , name ) : "
define the method path with an argument self.,define method path with argument self.,def path ( self ) : ,def path ( self ) : 
"define the function pbkdf2 with 5 arguments: password, salt, iterations, dklen set to integer 0 and digest set to None.","define function var0 with 5 arguments: password, salt, iterations var1 set to integer 0 and digest set to var2 ","def pbkdf2 ( password , salt , iterations , dklen = 0 , digest = None ) : ","def var0 ( password , salt , iterations , var1 = 0 , digest = var2 ) : "
define the function pgettext with 2 arguments: context and message.,define function var0 with 2 arguments: context and message.,"def pgettext ( context , message ) : ","def var0 ( context , message ) : "
return the result.   define the function pgettext with 2 arguments: context and message.,return result var0 define function var1 with 2 arguments: context and message.,"def pgettext ( context , message ) : ","def var1 ( context , message ) : "
define the function phone2numeric with an argument phone.,define function var0 with argument phone.,def phone2numeric ( phone ) : ,def var0 ( phone ) : 
define the function phone2numeric_filter with an argument value.,define function var0 with argument value.,def phone2numeric_filter ( value ) : ,def var0 ( value ) : 
define the method pk_is_not_editable with an argument pk.,define method var0 with argument pk.,def pk_is_not_editable ( pk ) : ,def var0 ( pk ) : 
define the function pluralize with 2 arguments value and arg set to character 's'.,define function pluralize with 2 arguments value and var0 set to character var1.,"def pluralize ( value , arg = 's' ) : ","def pluralize ( value , var0 = var1 ) : "
define the method pop with 2 arguments: self and idx set to negative integer 1.,define method pop with 2 arguments: self and var0 set to negative integer 1.,"def pop ( self , idx = - 1 ) : ","def pop ( self , var0 = - 1 ) : "
"define the method pop with 3 arguments: self, k and unpacked list args.","define method pop with 3 arguments: self, k and unpacked list var0 ","def pop ( self , k , * args ) : ","def pop ( self , k , * var0 ) : "
"define the method pop with 3 arguments: self, key and unpacked list args.","define method pop with 3 arguments: self, key and unpacked list var0 ","def pop ( self , key , * args ) : ","def pop ( self , key , * var0 ) : "
"define the method pop with 3 arguments: self, key and default set to None.","define method pop with 3 arguments: self, key and default set to var0 ","def pop ( self , key , default = None ) : ","def pop ( self , key , default = var0 ) : "
define the method self and name.,define method self and name.,"def pop ( self , name ) : ","def pop ( self , name ) : "
define the method pop with an argument self.,define method pop with argument self.,def pop ( self ) : ,def pop ( self ) : 
define the function popen_wrapper with 2 arguments: args and os_err_exc_type set to CommandError.,define function var0 with 2 arguments: var2 and var3 set to var5 ,"def popen_wrapper ( args , os_err_exc_type = CommandError ) : ","def var0 ( var2 , var3 = var5 ) : "
define the method popitem with an argument self.,define method var0 with argument self.,def popitem ( self ) : ,def var0 ( self ) : 
define the function pprint with an argument value.,define function var0 with argument value.,def pprint ( value ) : ,def var0 ( value ) : 
define the function prefix with 2 arguments bp and func.,define function prefix with 2 arguments var1 and var0 ,"def prefix ( bp , func ) : ","def prefix ( var1 , var0 ) : "
define the function prepare_js_for_gettext with an argument js.,define function var0 with argument js.,def prepare_js_for_gettext ( js ) : ,def var0 ( js ) : 
define the method prepare_value with arguments: self and value.,define method var0 with arguments: self and value.,"def prepare_value ( self , value ) : ","def var0 ( self , value ) : "
define the method prepare_value with arguments self and value.,define method var0 with arguments self and value.,"def prepare_value ( self , value ) : ","def var0 ( self , value ) : "
define the method prepare_value with 2 arguments: self and value.,define method var0 with 2 arguments: self and value.,"def prepare_value ( self , value ) : ","def var0 ( self , value ) : "
define the function prepend_token with 2 arguments: self and token.,define function var0 with 2 arguments: self and token.,"def prepend_token ( self , token ) : ","def var0 ( self , token ) : "
define the function pretty_name with an argument name.,define function var0 with argument name.,def pretty_name ( name ) : ,def var0 ( name ) : 
define the method previous_page_number with an argument self.,define method var0 with argument self.,def previous_page_number ( self ) : ,def var0 ( self ) : 
define the function print_ with 2 arguments: unpacked list args and unpacked dictionary kwargs.,define function var0 with 2 arguments: unpacked list var1 and unpacked dict var2 ,"def print_ ( * args , ** kwargs ) : ","def var0 ( * var1 , ** var2 ) : "
"define the method print_help with 3 arguments: self, prog_name and subcommand.",define method var0 with 3 arguments: self var1 and var3 ,"def print_help ( self , prog_name , subcommand ) : ","def var0 ( self , var1 , var3 ) : "
"define the method process with 3 arguments: self, command and domain.","define method process with 3 arguments: self, command and domain.","def process ( self , command , domain ) : ","def process ( self , command , domain ) : "
define the method process_default with self class instance and event as arguments.,define method var0 with self class instance and event as arguments.,"def process_default ( self , event ) : ","def var0 ( self , event ) : "
"define the method push with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.","define method push with 3 arguments: self, unpacked list var0 and unpacked dict var1 ","def push ( self , * args , ** kwargs ) : ","def push ( self , * var0 , ** var1 ) : "
"define the method push with 3 arguments: self, name and block.","define method push with 3 arguments: self, name and block.","def push ( self , name , block ) : ","def push ( self , name , block ) : "
"and replace %r with self.obj, return the result.   define function python_2_unicode_compatible, with klass as an argument.",and replace var0 with var1 return result var2 define function var3 with var4 as argument.,def python_2_unicode_compatible ( klass ) : ,def var3 ( var4 ) : 
define the function python_reloader with main_func and kwargs as arguments.,define function var0 with var1 and var3 as arguments.,"def python_reloader ( main_func , args , kwargs ) : ","def var0 ( var1 , args , var3 ) : "
define the function quote_etag with an argument etag.,define function var0 with argument etag.,def quote_etag ( etag ) : ,def var0 ( etag ) : 
define the method r with an argument self.,define method r with argument self.,def r ( self ) : ,def r ( self ) : 
define the function random with an argument value.,define function random with argument value.,def random ( value ) : ,def random ( value ) : 
"define the method read with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.","define method read with 3 arguments: self, unpacked list var0 and unpacked dict var1 ","def read ( self , * args , ** kwargs ) : ","def read ( self , * var0 , ** var1 ) : "
define the method read with self class instance and size set to None as arguments.,define method read with self class instance and size set to var0 as arguments.,"def read ( self , size = None ) : ","def read ( self , size = var0 ) : "
define the method read with arguments self and size set to None.,define method read with arguments self and size set to var0 ,"def read ( self , size = None ) : ","def read ( self , size = var0 ) : "
define the method read with an argument self.,define method read with argument self.,def read ( self ) : ,def read ( self ) : 
define the method reader with an argument self.,define method reader with argument self.,def reader ( self ) : ,def reader ( self ) : 
define the method reader_enters with an argument self.,define method var0 with argument self.,def reader_enters ( self ) : ,def var0 ( self ) : 
define the method reader_leaves with an argument self.,define method var0 with argument self.,def reader_leaves ( self ) : ,def var0 ( self ) : 
"third element of the result of the function sys.exc_info.   define the method readline with 3 arguments: self, unpacked list args and unpacked list kwargs.","third element of result of function sys var1 define method var3 with 3 arguments: self, unpacked list var4 and unpacked list var5 ","def readline ( self , * args , ** kwargs ) : ","def var3 ( self , * var4 , ** var5 ) : "
define method readline with self class instance and size set to None.,define method var0 with self class instance and size set to var1 ,"def readline ( self , size = None ) : ","def var0 ( self , size = var1 ) : "
define the method __init__ with an argument self.,define method var0 with argument self.,def readlines ( self ) : ,def readlines ( self ) : 
"define the method receive_data_chunk with arguments: self, raw_data and start.",define method var0 with arguments: self var1 and start.,"def receive_data_chunk ( self , raw_data , start ) : ","def var0 ( self , var1 , start ) : "
"self.charset and self.content_type_extra.   define the method receive_data_chunk with arguments: self, raw_data and start.",var0 and self var2 define method var4 with arguments: self var6 and start.,"def receive_data_chunk ( self , raw_data , start ) : ","def var4 ( self , var6 , start ) : "
"define the function receive_data_chunk with arguments self, raw_data and start.",define function var0 with arguments self var1 and start.,"def receive_data_chunk ( self , raw_data , start ) : ","def var0 ( self , var1 , start ) : "
define the method recipients with argument self.,define method recipients with argument self.,def recipients ( self ) : ,def recipients ( self ) : 
define the method regex with an argument self.,define method var0 with argument self.,def regex ( self ) : ,def var0 ( self ) : 
define the method register with self ans unpacked list tags as arguments.,define method register with self ans unpacked list tags as arguments.,"def register ( self , * tags ) : ","def register ( self , * tags ) : "
"define the function register_serializer with 3 arguments: format, serializer_module and serializers set to None.",define function var0 with 3 arguments: format var2 and var4 set to var5 ,"def register_serializer ( format , serializer_module , serializers = None ) : ","def var0 ( format , var2 , var4 = var5 ) : "
define the function regroup with 2 arguments: parser and token.,define function regroup with 2 arguments: parser and token.,"def regroup ( parser , token ) : ","def regroup ( parser , token ) : "
define the method reload with an argument self.,define method reload with argument self.,def reload ( self ) : ,def reload ( self ) : 
define the method with reload with an argument self.,define method with reload with argument self.,def reload ( self ) : ,def reload ( self ) : 
define the function reloader_thread.,define function var0 ,def reloader_thread ( ) : ,def var0 ( ) : 
define the method remove with 2 arguments: self and item.,define method remove with 2 arguments: self and item.,"def remove ( self , item ) : ","def remove ( self , item ) : "
define the function remove_move with an argument name.,define function var0 with argument name.,def remove_move ( name ) : ,def var0 ( name ) : 
define the method  remove_potfiles with an argument self.,define method var1 with argument self.,def remove_potfiles ( self ) : ,def var1 ( self ) : 
define the function remove_tags with 2 arguments: html and tags.,define function var0 with 2 arguments: html and tags.,"def remove_tags ( html , tags ) : ","def var0 ( html , tags ) : "
define the function removetags with 2 arguments value and arg.,define function var0 with 2 arguments value and var1 ,"def removetags ( value , tags ) : ","def var0 ( value , tags ) : "
define the method render with 2 arguments self and context.,define method render with 2 arguments self and context.,"def render ( self , context ) : ","def render ( self , context ) : "
define the method render with 2 arguments: self and context.,define method render with 2 arguments: self and context.,"def render ( self , context ) : ","def render ( self , context ) : "
"string 'ascii' and errors set to a string 'replace', return the result.   define the method render with 2 arguments: self and context.","string var0 and errors set to string var1, return result var2 define method render with 2 arguments: self and context.","def render ( self , context ) : ","def render ( self , context ) : "
"and for every _, nodelist in self.conditions_nodelists.   define the method render with 2 arguments: self and context.","and for every _, nodelist in self var1 define method render with 2 arguments: self and context.","def render ( self , context ) : ","def render ( self , context ) : "
and unpacked dictionary kwargs.   define the method render with 2 arguments self and context.,and unpacked dict var0 define method render with 2 arguments self and context.,"def render ( self , context ) : ","def render ( self , context ) : "
"define the method render with 5 arguments: self, name, value, attrs set to None and choices set to an empty tuple.","define method render with 5 arguments: self, name, value var0 set to var1 and choices set to empty tuple.","def render ( self , name , value , attrs = None , choices = ( ) ) : ","def render ( self , name , value , var0 = var1 , choices = ( ) ) : "
"define the method render with 4 arguments: self, name, value and attrs set to None.","define method render with 4 arguments: self, name, value and var0 set to var1 ","def render ( self , name , value , attrs = None ) : ","def render ( self , name , value , var0 = var1 ) : "
"define the method render with 5 arguments: self, name set to None, value set to None, attrs set to None and choices set to an empty tuple.","define method render with 5 arguments: self, name set to var0 value set to var0 var3 set to var0 and choices set to empty tuple.","def render ( self , name = None , value = None , attrs = None , choices = ( ) ) : ","def render ( self , name = var0 , value = var0 , var3 = var0 , choices = ( ) ) : "
define the method render with an argument self.,define method render with argument self.,def render ( self ) : ,def render ( self ) : 
"string '<script type=""text/javascript"" src=""{0}""></script>' and absolute file path of the path, for every path is self._js.   define the method render_css with an argument self.","string '<script type=""text/javascript"" src=""{0}""></script>' and absolute file path of path, for every path is var1 define method var3 with argument self.",def render_css ( self ) : ,def var3 ( self ) : 
"and use it as the name of the attribute to get from the self object,   call the result and append it to a list for every name in MEDIA_TYPES, join all the results into a string with newline separator,   use the result as an argument for the call to the function mark_safe, return the result.   define the method render_js with an argument self.",and use it as name of attribute to get from self object var0 call result and append it to list for every name in var3 join all results into string with var4 separator var0 use result as argument for call to function var5 return result var0 define method var7 with argument self.,def render_js ( self ) : ,def var7 ( self ) : 
"define the method render_node with 3 arguments: self, node and context.","define method var0 with 3 arguments: self, node and context.","def render_node ( self , node , context ) : ","def var0 ( self , node , context ) : "
"return the result.   define the method render_option with 4 arguments: self, selected_choices, option_value and option_label.",return result var0 define method var1 with 4 arguments: self var2 var4 and var6 ,"def render_option ( self , selected_choices , option_value , option_label ) : ","def var1 ( self , var2 , var4 , var6 ) : "
"result of the function force_text with an argument option_label, return the result.   define the method render_options with 3 arguments: self, choices and selected_choices.","result of function var0 with argument var1 return result var3 define method var4 with 3 arguments: self, choices and var6 ","def render_options ( self , choices , selected_choices ) : ","def var4 ( self , choices , var6 ) : "
"define the function render_to_string with 4 arguments: template_name, dictionary set to None, context_instance set to None and dirs set to None.",define function var0 with 4 arguments: var2 dict set to var4 var7 set to var4 and var9 set to var4 ,"def render_to_string ( template_name , dictionary = None , context_instance = None , dirs = None ) : ","def var0 ( var2 , dictionary = var4 , var7 = var4 , var9 = var4 ) : "
define the function render_value_in_context with 2 arguments: value and context.,define function var0 with 2 arguments: value and context.,"def render_value_in_context ( value , context ) : ","def var0 ( value , context ) : "
define the method rendered_content with an argument self.,define method var0 with argument self.,def rendered_content ( self ) : ,def var0 ( self ) : 
define the method represent_decimal with arguments self and data.,define method var0 with arguments self and data.,"def represent_decimal ( self , data ) : ","def var0 ( self , data ) : "
define the function request with an argument request.,define function request with argument request.,def request ( request ) : ,def request ( request ) : 
"define the function reraise with 3 arguments: tp, value and tb set to None.",define function var0 with 3 arguments: var1 value and tb set to var2 ,"def reraise ( tp , value , tb = None ) : ","def var0 ( var1 , value , tb = var2 ) : "
define the method reset with an argument self.,define method reset with argument self.,def reset ( self ) : ,def reset ( self ) : 
define the function reset_cache with an argument unpacked dictionary kwargs.,define function var0 with argument unpacked dict var1 ,def reset_cache ( ** kwargs ) : ,def var0 ( ** var1 ) : 
"tuple with 3 elements: strings '%H:%M:%S', '%H:%M:%S.%f' and '%H:%M' for 'TIME_INPUT_FORMATS',   tuple with 4 elements: strings '%Y-%m-%d %H:%M:%S', '%Y-%m-%d %H:%M:%S.%f', '%Y-%m-%d %H:%M' and '%Y-%m-%d' for 'DATETIME_INPUT_FORMATS'.   define the function reset_format_cache.","tuple with 3 elements: strings var0, var1 and var4 for var5 var8 tuple with 4 elements: strings var10, var15, var16 and var17 for var18 var8 define function var21 ",def reset_format_cache ( ) : ,def var21 ( ) : 
define the function reset_translation.,define function var0 ,def reset_translations ( ) : ,def var0s ( ) : 
define the function resolve with arguments path and urlconf set to None.,define function resolve with arguments path and var0 set to var1 ,"def resolve ( path , urlconf = None ) : ","def resolve ( path , var0 = var1 ) : "
"define the method resolve with 3 arguments: self, context and ignore_failures set to boolean False.","define method resolve with 3 arguments: self, context and var0 set to boolean var2 ","def resolve ( self , context , ignore_failures = False ) : ","def resolve ( self , context , var0 = var2 ) : "
define the method resolve with 2 arguments: self and context.,define method resolve with 2 arguments: self and context.,"def resolve ( self , context ) : ","def resolve ( self , context ) : "
define the method resolve with arguments self and path.,define method resolve with arguments self and path.,"def resolve ( self , path ) : ","def resolve ( self , path ) : "
define the method resolve with an argument self.,define method resolve with argument self.,"def resolve ( self , path ) : ","def resolve ( self , path ) : "
define the method resolve with 2 arguments: self and s.,define method resolve with 2 arguments: self and var0,"def resolve ( self , s ) : ","def resolve ( self , s ) : "
define the method resolve_context with 2 arguments: self and context.,define method var0 with 2 arguments: self and context.,"def resolve_context ( self , context ) : ","def var0 ( self , context ) : "
define the method resolve_error_handler with arguments self and view_type.,define method var0 with arguments self and var1 ,"def resolve_error_handler ( self , view_type ) : ","def var0 ( self , var1 ) : "
"define the method resolve_expression with 3 arguments: self, obj and context.",define method var0 with 3 arguments: self var1 and context.,"def resolve_expression ( self , obj , context ) : ","def var0 ( self , var1 , context ) : "
define the method resolve_template with 2 arguments: self and template.,define method var0 with 2 arguments: self and template.,"def resolve_template ( self , template ) : ","def var0 ( self , template ) : "
define the method resolve_variable with 2 arguments: path and context.,define method var0 with 2 arguments: path and context.,"def resolve_variable ( path , context ) : ","def var0 ( path , context ) : "
define the function restart_with_reloader.,define function var0 ,def restart_with_reloader ( ) : ,def var0 ( ) : 
"define the method reverse with arguments self, lookup_view, unpacked list args and unpacked dictionary kwargs.",define method reverse with arguments self var0 unpacked list var1 and unpacked dict var2 ,"def reverse ( self , lookup_view , * args , ** kwargs ) : ","def reverse ( self , var0 , * var1 , ** var2 ) : "
"define the function reverse with 6 arguments: viewname, urlconf set to None, args set to None, kwargs set to None,",define function reverse with 6 arguments: var0 var1 set to var2 var5 set to var2 var6 set to var2 ,"def reverse ( viewname , urlconf = None , args = None , kwargs = None , prefix = None , current_app = None ) : ","def reverse ( var0 , var1 = var2 , var5 = var2 , kwvar5 = var2 , prefix = var2 , current_app = var2 ) : "
define the method reverse_dict with an argument self.,define method var0 with argument self.,def reverse_dict ( self ) : ,def var0 ( self ) : 
define the function rfc2822_date with an argument date.,define function var0 with argument date.,def rfc2822_date ( date ) : ,def var0 ( date ) : 
define the function rfc3339_date with an argument date.,define function var0 with argument date.,def rfc3339_date ( date ) : ,def var0 ( date ) : 
define the function rjust with 2 arguments value and arg.,define function var0 with 2 arguments value and var1 ,"def rjust ( value , arg ) : ","def var0 ( value , var1 ) : "
"define the function run with 5 arguments: addr, port, wsgi_handler, ipv6 set to boolean False and threading set to boolean False.",define function run with 5 arguments: var0 port var1 var3 set to boolean var4 and threading set to boolean var4 ,"def run ( addr , port , wsgi_handler , ipv6 = False , threading = False ) : ","def run ( var0 , port , var1 , var3 = var4 , threading = var4 ) : "
define the method run with 3 arguments: self and unpacked dictionary options.,define method run with 3 arguments: self and unpacked dict options.,"def run ( self , ** options ) : ","def run ( self , ** options ) : "
"define the method run_checks with self class instance, app_configs defaulting to None, tags defaulting to None as argument.",define method var0 with self class instance var2 defaulting to var4 tags defaulting to var4 as argument.,"def run_checks ( self , app_configs = None , tags = None ) : ","def var0 ( self , var2 = var4 , tags = var4 ) : "
define the method run_from_argv with arguments self and argv.,define method var0 with arguments self and argv.,"def run_from_argv ( self , argv ) : ","def var0 ( self , argv ) : "
define the method run_shell with an arguments self and shell set to None.,define method var0 with arguments self and shell set to var2 ,"def run_shell ( self , shell = None ) : ","def var0 ( self , shell = var2 ) : "
define the method run_validators with arguments self and value.,define method var0 with arguments self and value.,"def run_validators ( self , value ) : ","def var0 ( self , value ) : "
define the function runfastcgi with 2 arguments: argset set to an empty list and unpacked dictionary kwargs.,define function var0 with 2 arguments: var1 set to empty list and unpacked dict var2 ,"def runfastcgi ( argset = [ ] , ** kwargs ) : ","def var0 ( var1 = [ ] , ** var2 ) : "
define the method s with an argument self.,define method s with argument self.,def s ( self ) : ,def s ( self ) : 
define the function safe with an argument value.,define function safe with argument value.,def safe ( value ) : ,def safe ( value ) : 
define the function safe_join with 2 arguments base and unpacked dictionary paths.,define function var0 with 2 arguments base and unpacked dict paths.,"def safe_join ( base , * paths ) : ","def var0 ( base , * paths ) : "
define the function safeseq with an argument value.,define function var0 with argument value.,def safeseq ( value ) : ,def var0 ( value ) : 
"define the function salted_hmac with 3 arguments: key_salt, value and secret set to None.",define function var0 with 3 arguments: var2 value and secret set to var4 ,"def salted_hmac ( key_salt , value , secret = None ) : ","def var0 ( var2 , value , secret = var4 ) : "
"is replaced with '\\""'.   define the function same_origin with 2 arguments url1 and url2.",is replaced with var0 var1 define function var2 with 2 arguments var4 and var5 ,"def same_origin ( url1 , url2 ) : ","def var2 ( var4 , var5 ) : "
define the function sanitize_address with arguments addr and encoding.,define function var0 with arguments addr and encoding.,"def sanitize_address ( addr , encoding ) : ","def var0 ( addr , encoding ) : "
define the function sanitize_separators with an argument value.,define function var0 with argument value.,def sanitize_separators ( value ) : ,def var0 ( value ) : 
define the method save with 2 arguments: self and commit set to boolean True.,define method save with 2 arguments: self and commit set to boolean var0 ,"def save ( self , commit = True ) : ","def save ( self , commit = var0 ) : "
"define the method save with arguments self, name and content.","define method save with arguments self, name and content.","def save ( self , name , content ) : ","def save ( self , name , content ) : "
"self.object._meta.object_name and self.object.pk, respectively.   define the method save, with 3 arguments: self, save_m2m set to boolean True and using set to boolean True.","self.object._meta var1 and var2 respectively var3 define method save, with 3 arguments: self var4 set to boolean var6 and using set to boolean var6 ","def save ( self , save_m2m = True , using = None ) : ","def save ( self , var4 = var6 , using = None ) : "
"define the method save_existing with 4 arguments: self, form, instance and commit set to boolean True.","define method var0 with 4 arguments: self, form, instance and commit set to boolean var2 ","def save_existing ( self , form , instance , commit = True ) : ","def var0 ( self , form , instance , commit = var2 ) : "
define the method save_existing_objects with 2 arguments: self and commit set to boolean True.,define method var0 with 2 arguments: self and commit set to boolean var2 ,"def save_existing_objects ( self , commit = True ) : ","def var0 ( self , commit = var2 ) : "
"define the function save_instance with 7 arguments: form, instance, fields set to None, fail_message as string 'saved',","define function var0 with 7 arguments: form, instance, fields set to var2 var3 as string var5,","def save_instance ( form , instance , fields = None , fail_message = 'saved' , commit = True , exclude = None , construct = True ) : ","def var0 ( form , instance , fields = var2 , var3 = var5 , commit = True , exclude = var2 , construct = True ) : "
"where '%s' is replaced with opts.object_name and fail_message, respectively.   define the function save_m2m.",var0 var1 is replaced with opts var3 and var4 respectively var6 define function var7 ,def save_m2m ( ) : ,def var7 ( ) : 
define the function save_m2m.,define function var0 ,def save_m2m ( ) : ,def var0 ( ) : 
"define the method save_new with 3 arguments: self, form and commit set to boolean True.","define method var0 with 3 arguments: self, form and commit set to boolean var2 ","def save_new ( self , form , commit = True ) : ","def var0 ( self , form , commit = var2 ) : "
"call the method get_accessor_name on the result, substitute all occurrences of '+' in the result with an empty string, return it.   define the method save_new with 3 arguments: self, form and commit set to boolean True.","call method var0 on result, substitute all occurrences of var2 in result with empty string, return it var3 define method var4 with 3 arguments: self, form and commit set to boolean var6 ","def save_new ( self , form , commit = True ) : ","def var4 ( self , form , commit = var6 ) : "
define the method save_new_objects with 2 arguments: self and commit set to boolean True.,define method var0 with 2 arguments: self and commit set to boolean var2 ,"def save_new_objects ( self , commit = True ) : ","def var0 ( self , commit = var2 ) : "
define the method scheme with an argument self.,define method scheme with argument self.,def scheme ( self ) : ,def scheme ( self ) : 
define the function select_template with 2 arguments: template_name_list and dirs set to None.,define function var0 with 2 arguments: var2 and var4 set to var5 ,"def select_template ( template_name_list , dirs = None ) : ","def var0 ( var2 , var4 = var5 ) : "
define the method send with arguments self and fail_silently set to boolean False.,define method send with arguments self and var0 set to boolean var2 ,"def send ( self , fail_silently = False ) : ","def send ( self , var0 = var2 ) : "
"define send_mail funtion with subject, message, from_email, recipient_list, fail_silently set to boolean False,","define var0 var2 with subject, message var3 var5 var7 set to boolean var9 ","def send_mail ( subject , message , from_email , recipient_list , fail_silently = False , auth_user = None , auth_password = None , connection = None , html_message = None ) : ","def var0 ( subject , message , var3 , var5 , var7 = var9 , auth_user = None , auth_password = None , connection = None , html_message = None ) : "
"define the function send_mass_mail with, datatuple, fail_silently set to False, auth_user set to None, auth_password set to None,",define function var0 with var2 var3 set to var5 var6 set to var8 var10 set to var8 ,"def send_mass_mail ( datatuple , fail_silently = False , auth_user = None , auth_password = None , connection = None ) : ","def var0 ( var2 , var3 = var5 , var6 = var8 , var10 = var8 , connection = var8 ) : "
define the method send_messages with arguments self and email_messages.,define method var0 with arguments self and var1 ,"def send_messages ( self , email_messages ) : ","def var0 ( self , var1 ) : "
define the method send_messages with arguments self and email_message.,define method var0 with arguments self and var1 ,"def send_messages ( self , email_messages ) : ","def var0 ( self , var1s ) : "
define the method send_messages with arguments self and messages.,define method var0 with arguments self and messages.,"def send_messages ( self , messages ) : ","def var0 ( self , messages ) : "
"define the function serializer with 3 arguments: format, queryset and unpacked dictionary options.",define function var0 with 3 arguments: format var1 and unpacked dict options.,"def serialize ( format , queryset , ** options ) : ","def serialize ( format , var1 , ** options ) : "
"define the method serialize with 3 arguments: self, queryset and unpacked dictionary options.",define method serialize with 3 arguments: self var0 and unpacked dict options.,"def serialize ( self , queryset , ** options ) : ","def serialize ( self , var0 , ** options ) : "
define the serialize content with an argument self.,define serialize content with argument self.,def serialize ( self ) : ,def serialize ( self ) : 
define the method serialize_headers with an argument self.,define method var0 with argument self.,def serialize_headers ( self ) : ,def var0 ( self ) : 
define the function server_bind with an argument self.,define function var0 with argument self.,def server_bind ( self ) : ,def var0 ( self ) : 
"define the method set with 5 arguments, self, key, value, timeout set to DEFAULT_TIMEOUT and version set to None.","define method set with 5 arguments, self, key, value var0 set to var1 and version set to var2 ","def set ( self , key , value , timeout = DEFAULT_TIMEOUT , version = None ) : ","def set ( self , key , value , var0 = var1 , version = var2 ) : "
"use the result as the argument for the function call to the pickle.loads, return the result.   define the method set with 5 arguments, self class instance, key, value, timeout set to DEFAULT_TIMEOUT and version set to None.","use result as argument for function call to var0 return result var1 define method set with 5 arguments, self class instance, key, value var2 set to var3 and version set to var4 ","def set ( self , key , value , timeout = DEFAULT_TIMEOUT , version = None ) : ","def set ( self , key , value , var2 = var3 , version = var4 ) : "
"define the method set with 5 arguments: self, key, value, timeout set to DEFAULT_TIMEOUT and version set to None.","define method set with 5 arguments: self, key, value var0 set to var1 and version set to var2 ","def set ( self , key , value , timeout = DEFAULT_TIMEOUT , version = None ) : ","def set ( self , key , value , var0 = var1 , version = var2 ) : "
"define the method set with 5 arguments, self class instance, key, value, timeout set to DEFAULT_TIMEOUT and version set to None.","define method set with 5 arguments, self class instance, key, value var0 set to var1 and version set to var2 ","def set ( self , key , value , timeout = DEFAULT_TIMEOUT , version = None ) : ","def set ( self , key , value , var0 = var1 , version = var2 ) : "
"define the method get with 5 arguments, self class instance, key, value, timeout set to DEFAULT_TIMEOUT and version set to None.","define method get with 5 arguments, self class instance, key, value var0 set to var1 and version set to var2 ","def set ( self , key , value , timeout = DEFAULT_TIMEOUT , version = None ) : ","def set ( self , key , value , var0 = var1 , version = var2 ) : "
"define method set_cdata_mode, with self class instance and tag as the arguments.",define method var0 with self class instance and tag as arguments.,"def set_cdata_mode ( self , tag ) : ","def var0 ( self , tag ) : "
"if it exists return the second element of the result, if not, return alternate.   define the method set_cookie with 9 arguments: self, key, value set to an empty string, max_age set to None, expires set to None,","if it exists return second element of result, if not, return alternate var0 define method var1 with 9 arguments: self, key, value set to empty string var3 set to var5 expires set to var5 ","def set_cookie ( self , key , value = '' , max_age = None , expires = None , path = '/' , domain = None , secure = False , httponly = False ) : ","def var1 ( self , key , value = '' , var3 = var5 , expires = var5 , path = '/' , domain = var5 , secure = False , httponly = False ) : "
"define the method set_many with arguments, self, data, timeout defaulting to DEFAULT_TIMEOUT and version set to None.","define method var0 with arguments, self, data var2 defaulting to var3 and version set to var4 ","def set_many ( self , data , timeout = DEFAULT_TIMEOUT , version = None ) : ","def var0 ( self , data , var2 = var3 , version = var4 ) : "
"define the method set_many with 4 arguments: self, data, timeout set to DEFAULT_TIMEOUT and version set to None.","define method var0 with 4 arguments: self, data var2 set to var3 and version set to var4 ","def set_many ( self , data , timeout = DEFAULT_TIMEOUT , version = None ) : ","def var0 ( self , data , var2 = var3 , version = var4 ) : "
"define the method set_many with self, data, timeout set to DEFAULT_TIMEOUT and version set to None as arguments.","define method var0 with self, data var2 set to var3 and version set to var4 as arguments.","def set_many ( self , data , timeout = DEFAULT_TIMEOUT , version = None ) : ","def var0 ( self , data , var2 = var3 , version = var4 ) : "
define the function set_script_prefix with an argument prefix.,define function var0 with argument prefix.,def set_script_prefix ( prefix ) : ,def var0 ( prefix ) : 
"define the method set_signed_cookie with 5 arguments: self, key, value, salt as an empty string and unpacked dictionary kwarg.","define method var0 with 5 arguments: self, key, value, salt as empty string and unpacked dict var1 ","def set_signed_cookie ( self , key , value , salt = '' , ** kwargs ) : ","def var0 ( self , key , value , salt = '' , ** var1s ) : "
define the function set_urlconf with an argument urlconf_name.,define function var0 with argument var1 ,def set_urlconf ( urlconf_name ) : ,def var0 ( var1 ) : 
"define the method setdefault with 3 arguments: self, key and default.","define method var0 with 3 arguments: self, key and default.","def setdefault ( self , key , default ) : ","def var0 ( self , key , default ) : "
"define the method setdefault with 3 arguments: self, key and default set to None.","define method var0 with 3 arguments: self, key and default set to var1 ","def setdefault ( self , key , default = None ) : ","def var0 ( self , key , default = var1 ) : "
"define the method setlist with 3 arguments: self, key and list_.","define method var0 with 3 arguments: self, key and var1 ","def setlist ( self , key , list_ ) : ","def var0 ( self , key , var1 ) : "
"define the method setlistdefault with 3 arguments: self, key and default_list set to None.","define method var0 with 3 arguments: self, key and var1 set to var3 ","def setlistdefault ( self , key , default_list = None ) : ","def var0 ( self , key , var1 = var3 ) : "
"define show_migration_list with self class instance, connection and app_names set to None, as arguments.","define var0 with self class instance, connection and var2 set to var4 as arguments.","def show_migration_list ( self , connection , app_names = None ) : ","def var0 ( self , connection , var2 = var4 ) : "
define the method sign with arguments self and value.,define method sign with arguments self and value.,"def sign ( self , value ) : ","def sign ( self , value ) : "
"self.__class__.__module__ and self.__class__.__name__, respectively, substitute the result for self.salt.   define the method signature with arguments self and value.","var0 and var1 respectively, substitute result for var2 define method signature with arguments self and value.","def signature ( self , value ) : ","def signature ( self , value ) : "
"define the method simple_tag with 4 arguments: self, func and None, takes_context and None and name set to None.",define method var0 with 4 arguments: self var1 and var2 var5 and var2 and name set to var2 ,"def simple_tag ( self , func = None , takes_context = None , name = None ) : ","def var0 ( self , var1 = var2 , var5 = var2 , name = var2 ) : "
define the method size with arguments self and name.,define method size with arguments self and name.,"def size ( self , name ) : ","def size ( self , name ) : "
define the method skip_past with 2 arguments: self and endtag.,define method var0 with 2 arguments: self and var1 ,"def skip_past ( self , endtag ) : ","def var0 ( self , var1 ) : "
define the function slice_filter with 2 arguments value and arg.,define function var0 with 2 arguments value and var1 ,"def slice_filter ( value , arg ) : ","def var0 ( value , var1 ) : "
define the function slugify with an argument value.,define function var0 with argument value.,def slugify ( value ) : ,def var0 ( value ) : 
"define function smart_bytes with s, encoding set to string 'utf-8', strings_only set to False and errors set to string 'strict', as arguments.","define function var0 with s, encoding set to string var2 var3 set to var5 and errors set to string var6, as arguments.","def smart_bytes ( s , encoding = 'utf-8' , strings_only = False , errors = 'strict' ) : ","def var0 ( s , encoding = var2 , var3 = var5 , errors = 'strict' ) : "
"and re.VERBOSE, substitute the result for smart_split_re.   define the function smart_split with an argument text.",and re var1 substitute result for var2 define function var3 with argument textvar0,def smart_split ( text ) : ,def var3 ( text ) : 
"define the function smart_text, with s, encoding set to string 'utf-8', strings_only set to False, errors set to 'strict' as arguments.","define function var0 with s, encoding set to string var2 var3 set to var5 errors set to var6 as arguments.","def smart_text ( s , encoding = 'utf-8' , strings_only = False , errors = 'strict' ) : ","def var0 ( s , encoding = var2 , var3 = var5 , errors = 'strict' ) : "
define the function smart_urlquote with an argument url.,define function var0 with argument url.,def smart_urlquote ( url ) : ,def var0 ( url ) : 
define the function sort_dependencies with an argument app_list.,define function var0 with argument var1 ,def sort_dependencies ( app_list ) : ,def var0 ( var1 ) : 
"define the method source_error with 3 arguments: self, source and msg.","define method var0 with 3 arguments: self, source and msg.","def source_error ( self , source , msg ) : ","def var0 ( self , source , msg ) : "
define the function spaceless with 2 arguments: parser and token.,define function var0 with 2 arguments: parser and token.,"def spaceless ( parser , token ) : ","def var0 ( parser , token ) : "
define the method split_contents with an argument self.,define method var0 with argument self.,def split_contents ( self ) : ,def var0 ( self ) : 
define the function split_domain_port with an argument host.,define function var0 with argument host.,def split_domain_port ( host ) : ,def var0 ( host ) : 
define the method split_leading_dir with 2 arguments self and path.,define method var0 with 2 arguments self and path.,"def split_leading_dir ( self , path ) : ","def var0 ( self , path ) : "
define the function split_url with an argument url.,define function var0 with argument url.,def split_url ( url ) : ,def var0 ( url ) : 
define the method splitext with arguments self and the_path.,define method var0 with arguments self and var1 ,"def splitext ( self , the_path ) : ","def var0 ( self , var1 ) : "
"define the function sql_all with 3 arguments: app_config, style and connection.",define function var0 with 3 arguments: var1 style and connection.,"def sql_all ( app_config , style , connection ) : ","def var0 ( var1 , style , connection ) : "
"define the function sql_create with 3 arguments: app_config, style and connection.",define function var0 with 3 arguments: var1 style and connection.,"def sql_create ( app_config , style , connection ) : ","def var0 ( var1 , style , connection ) : "
"define the function sql_custom with 3 arguments: app_config, style and connection.",define function var0 with 3 arguments: var1 style and connection.,"def sql_custom ( app_config , style , connection ) : ","def var0 ( var1 , style , connection ) : "
"define the function sql_delete with 4 arguments: app_config, style, connection and close_connection set to boolean True.","define function var0 with 4 arguments: var2 style, connection and var4 set to boolean var6 ","def sql_delete ( app_config , style , connection , close_connection = True ) : ","def var0 ( var2 , style , connection , var4 = var6 ) : "
"define the function sql_destroy_indexes with 3 arguments: app_config, style and connection.",define function var0 with 3 arguments: var1 style and connection.,"def sql_destroy_indexes ( app_config , style , connection ) : ","def var0 ( var1 , style , connection ) : "
"define the function sql_flush with 4 arguments: style, connection, only_django set to boolean False,","define function var0 with 4 arguments: style, connection var2 set to boolean var4 ","def sql_flush ( style , connection , only_django = False , reset_sequences = True , allow_cascade = False ) : ","def var0 ( style , connection , var2 = var4 , reset_sequences = True , allow_cascade = var4 ) : "
"define the function sql_indexes with 3 arguments: app_config, style and connection.",define function var0 with 3 arguments: var1 style and connection.,"def sql_indexes ( app_config , style , connection ) : ","def var0 ( var1 , style , connection ) : "
define the function ssi with 2 arguments: parser and token.,define function var0 with 2 arguments: parser and token.,"def ssi ( parser , token ) : ","def var0 ( parser , token ) : "
"define the method start_doctype_decl with an arguments self, name, sysid, pubid and has_internal_subset.","define method var0 with arguments self, name var1 var2 and var3 ","def start_doctype_decl ( self , name , sysid , pubid , has_internal_subset ) : ","def var0 ( self , name , var1 , var2 , var3 ) : "
define the method start_index with an argument self.,define method var0 with argument self.,def start_index ( self ) : ,def var0 ( self ) : 
define the method start_object with argument self and obj.,define method var0 with argument self and obj.,"def start_object ( self , obj ) : ","def var0 ( self , obj ) : "
define the method start_object with arguments self and obj.,define method var0 with arguments self and obj.,"def start_object ( self , obj ) : ","def var0 ( self , obj ) : "
define the method start_serialization with an argument self.,define method var0 with argument self.,def start_serialization ( self ) : ,def var0 ( self ) : 
define the function static with an argument request.,define function static with argument request.,def static ( request ) : ,def static ( request ) : 
define the method streaming_content with 2 arguments: self and value.,define method var0 with 2 arguments: self and value.,"def streaming_content ( self , value ) : ","def var0 ( self , value ) : "
define the method serialize_headers with an argument self.,define method var0 with argument self.,def streaming_content ( self ) : ,def streaming_content ( self ) : 
define the function strftime with 2 arguments dt and fmt.,define function var0 with 2 arguments var1 and var2 ,"def strftime ( dt , fmt ) : ","def var0 ( var1 , var2 ) : "
define the method strftime with 2 arguments: self and fmt.,define method var0 with 2 arguments: self and var1 ,"def strftime ( self , fmt ) : ","def var0 ( self , var1 ) : "
define the method stringfilter with an argument func.,define method var0 with argument var1 ,def stringfilter ( func ) : ,def var0 ( var1 ) : 
define the function stringformat with 2 arguments value and arg.,define function var0 with 2 arguments value and var1 ,"def stringformat ( value , arg ) : ","def var0 ( value , var1 ) : "
define the function strip_entities with an argument value.,define function var0 with argument value.,def strip_entities ( value ) : ,def var0 ( value ) : 
define the function strip_spaces_between_tags with an argument value.,define function var0 with argument value.,def strip_spaces_between_tags ( value ) : ,def var0 ( value ) : 
define the function strip_tags with an argument value.,define function var0 with argument value.,def strip_tags ( value ) : ,def var0 ( value ) : 
define the function striptags with an argument value.,define function var0 with argument value.,def striptags ( value ) : ,def var0 ( value ) : 
"define the method strptime with arguments self, value and format.","define method var0 with arguments self, value and format.","def strptime ( self , value , format ) : ","def var0 ( self , value , format ) : "
"define the method subwidgets with 5 arguments: self, name, value, attrs set to None and choices set to an empty tuple.","define method var0 with 5 arguments: self, name, value var1 set to var2 and choices set to empty tuple.","def subwidgets ( self , name , value , attrs = None , choices = ( ) ) : ","def var0 ( self , name , value , var1 = var2 , choices = ( ) ) : "
"and unpacked dictionary kwargs.   define the method subwidgets with 5 arguments: self, name, value, attrs set to None and choices set to an empty tuple.","and unpacked dict var0 define method var2 with 5 arguments: self, name, value var3 set to var4 and choices set to empty tuple.","def subwidgets ( self , name , value , attrs = None , choices = ( ) ) : ","def var2 ( self , name , value , var3 = var4 , choices = ( ) ) : "
define the method super with an argument self.,define method super with argument self.,def super ( self ) : ,def super ( self ) : 
"define the function supports_color, without arguments.",define function var0 var1 arguments.,def supports_color ( ) : ,def var0 ( ) : 
define the method symlinks_supported.,define method var0 ,def symlinks_supported ( ) : ,def var0 ( ) : 
"define the method sync_apps with self class instance, connection and app_labels as arguments.","define method var0 with self class instance, connection and var1 as arguments.","def sync_apps ( self , connection , app_labels ) : ","def var0 ( self , connection , var1 ) : "
define the method T with an argument self.,define method T with argument self.,def T ( self ) : ,def T ( self ) : 
"define the method tag with 3 arguments: self, name set to None and compile_function set to None.","define method tag with 3 arguments: self, name set to var0 and var2 set to var0 ","def tag ( self , name = None , compile_function = None ) : ","def tag ( self , name = var0 , var2 = var0 ) : "
define the method tag with an argument self.,define method tag with argument self.,def tag ( self ) : ,def tag ( self ) : 
define the method tag_exists with self class instance and tag as arguments.,define method var0 with self class instance and tag as arguments.,"def tag_exists ( self , tag ) : ","def var0 ( self , tag ) : "
substitute '%r' with name and compile_function.   define the method tag_function with 2 argument: self and func.,substitute var0 with name and var1 define method var5 with 2 argument: self and var3 ,"def tag_function ( self , func ) : ","def var5 ( self , var3 ) : "
define the method tags_available with argument self.,define method var0 with argument self.,def tags_available ( self ) : ,def var0 ( self ) : 
define the method tell with an argument self.,define method tell with argument self.,def tell ( self ) : ,def tell ( self ) : 
define the function template_localtime with 2 arguments: value and use_tz set to None.,define function var0 with 2 arguments: value and var2 set to var4 ,"def template_localtime ( value , use_tz = None ) : ","def var0 ( value , var2 = var4 ) : "
define the function templatetag with 2 arguments: parser and token.,define function var0 with 2 arguments: parser and token.,"def templatetag ( parser , token ) : ","def var0 ( parser , token ) : "
define the function templatize with 2 arguments: src and origin set to None.,define function var0 with 2 arguments: var1 and origin set to var2 ,"def templatize ( src , origin = None ) : ","def var0 ( var1 , origin = var2 ) : "
define the method temporary_file_path with argument self.,define method var0 with argument self.,def temporary_file_path ( self ) : ,def var0 ( self ) : 
define the function time with 2 arguments value and arg set to None.,define function time with 2 arguments value and var0 set to var1 ,"def time ( value , arg = None ) : ","def time ( value , var0 = var1 ) : "
"format, if its true, otherwise string 'DATE_FORMAT' and use_l10n as use_l10n, return the result.   define the function time_format with 3 arguments: value, format set to None and use_l10n set to None.","format, if its true, otherwise string var0 and var1 as var1 return result var7 define function var8 with 3 arguments: value, format set to var10 and var1 set to var10 ","def time_format ( value , format = None , use_l10n = None ) : ","def var8 ( value , format = var10 , var1 = var10 ) : "
define the function time_format with 2 arguments: value and format_string.,define function var0 with 2 arguments: value and var1 ,"def time_format ( value , format_string ) : ","def var0 ( value , var1 ) : "
"define the function timesince with d, now defaulting to None, reversed defaulting to False as arguments.","define function var0 with d, now defaulting to var1 reversed defaulting to var2 as arguments.","def timesince ( d , now = None , reversed = False ) : ","def var0 ( d , now = var1 , reversed = var2 ) : "
define the function timesince_filter with 2 arguments value and arg set to None.,define function var0 with 2 arguments value and var2 set to var3 ,"def timesince_filter ( value , arg = None ) : ","def var0 ( value , var2 = var3 ) : "
define the method timestamp with an argument self.,define method var0 with argument self.,def timestamp ( self ) : ,def var0 ( self ) : 
"define the function timeuntil with 2 arguments, d and now defaulting to none.","define function var0 with 2 arguments, d and now defaulting to none.","def timeuntil ( d , now = None ) : ","def var0 ( d , now = None ) : "
define the function timeuntil_filter with 2 arguments value and arg set to None.,define function var0 with 2 arguments value and var2 set to var3 ,"def timeuntil_filter ( value , arg = None ) : ","def var0 ( value , var2 = var3 ) : "
define the function title with an argument value.,define function title with argument value.,def title ( value ) : ,def title ( value ) : 
define the function to_bytes with arguments val and encoding.,define function var0 with arguments var1 and encoding.,"def to_bytes ( val , encoding ) : ","def var0 ( var1 , encoding ) : "
define the function to_current_timezone with an argument value.,define function var0 with argument value.,def to_current_timezone ( value ) : ,def var0 ( value ) : 
define the function to_language with an argument locale.,define function var0 with argument locale.,def to_language ( locale ) : ,def var0 ( locale ) : 
define the method to_language with an argument self.,define method var0 with argument self.,def to_language ( self ) : ,def var0 ( self ) : 
define the function to_locale with 2 arguments language and to_lower set to boolean False.,define function var0 with 2 arguments language and var2 set to boolean var4 ,"def to_locale ( language , to_lower = False ) : ","def var0 ( language , var2 = var4 ) : "
define the function to_locale with an argument language.,define function var0 with argument language.,def to_locale ( language ) : ,def var0 ( language ) : 
define the method to_python with arguments self and data.,define method var0 with arguments self and data.,"def to_python ( self , data ) : ","def var0 ( self , data ) : "
"""Upload a valid image. The file you uploaded was either not an image or a corrupted image.""' for 'invalid_image'.   define the method to_python with arguments self and data.",var0var1invalid_image' var4 define method var5 with arguments self and data.,"def to_python ( self , data ) : ","def var5 ( self , data ) : "
define the method to_python with arguments self and value.,define method var0 with arguments self and value.,"def to_python ( self , value ) : ","def var0 ( self , value ) : "
Enter a number.' for 'invalid'.   define the method to_python with arguments self and value.,Enter number.var0invalid' var1 define method var2 with arguments self and value.,"def to_python ( self , value ) : ","def var2 ( self , value ) : "
unpacked list args and unpacked dictionary kwargs.   define the method to_python with arguments self and value.,unpacked list var0 and unpacked dict var1 define method var3 with arguments self and value.,"def to_python ( self , value ) : ","def var3 ( self , value ) : "
define the method to_python with arguments self and data.,define method var0 with arguments self and data.,"def to_python ( self , value ) : ","def var0 ( self , value ) : "
"Select a valid choice. %(value)s is not one of the available choices.' for 'invalid_choice',   and return value of the function _ called with an argument string 'Enter a list of values.' for 'invalid_list'.   define the method to_python with arguments self and value.",Select valid choice var0 is not one of available choices.var1invalid_choicevar6Enter list of values.var1invalid_list' var7 define method var12 with arguments self and value.,"def to_python ( self , value ) : ","def var12 ( self , value ) : "
define the method to_python with 2 arguments: self and value.,define method var0 with 2 arguments: self and value.,"def to_python ( self , value ) : ","def var0 ( self , value ) : "
"cache_choices, required, widget, label, initial, help_text, unpacked list args and unpacked dictionary kwargs.   define the method to_python with 2 arguments: self and value.","var0, required, widget, label, initial var1 unpacked list var2 and unpacked dict var3 define method var5 with 2 arguments: self and value.","def to_python ( self , value ) : ","def var5 ( self , value ) : "
"define the method token_kwargs: bits, parser and support_legacy set to boolean False.","define method token_kwargs: bits, parser and var2 set to boolean var4 ","def token_kwargs ( bits , parser , support_legacy = False ) : ","def var0 ( bits , parser , var2 = var4 ) : "
define the method tokenize with an argument self.,define method var0 with argument self.,def tokenize ( self ) : ,def var0 ( self ) : 
define the method top with an argument self.,define method top with argument self.,def top ( self ) : ,def top ( self ) : 
define the method total_error_count with an argument self.,define method var0 with argument self.,def total_error_count ( self ) : ,def var0 ( self ) : 
define the method total_form_count with an argument self.,define method var0 with argument self.,def total_form_count ( self ) : ,def var0 ( self ) : 
define the function total_ordering with an argument cls.,define function var0 with argument cls.,def total_ordering ( cls ) : ,def var0 ( cls ) : 
"define the method transform with 3 arguments: self, node and results.","define method transform with 3 arguments: self, node and results.","def transform ( self , node , results ) : ","def transform ( self , node , results ) : "
define the method translate_token with 2 arguments: self and token.,define method var0 with 2 arguments: self and token.,"def translate_token ( self , token ) : ","def var0 ( self , token ) : "
define the function translation with an argument language.,define function translation with argument language.,def translation ( language ) : ,def translation ( language ) : 
define the function trim_url with 2 arguments: x and limit set to trim_url_limit.,define function var0 with 2 arguments: x and limit set to var1 ,"def trim_url ( x , limit = trim_url_limit ) : ","def var0 ( x , limit = var0_limit ) : "
define the function trim_whitespace with an argument s.,define function var0 with argument var1,def trim_whitespace ( s ) : ,def var0 ( s ) : 
define the function truncatechars with 2 arguments value and arg.,define function var0 with 2 arguments value and var1 ,"def truncatechars ( value , arg ) : ","def var0 ( value , var1 ) : "
define the function truncatechars_html with 2 arguments value and arg.,define function var0 with 2 arguments value and var1 ,"def truncatechars_html ( value , arg ) : ","def var0 ( value , var1 ) : "
define the function truncatewords with 2 arguments value and arg.,define function var0 with 2 arguments value and var1 ,"def truncatewords ( value , arg ) : ","def var0 ( value , var1 ) : "
define the function truncatewords_html with 2 arguments value and arg.,define function var0 with 2 arguments value and var1 ,"def truncatewords_html ( value , arg ) : ","def var0 ( value , var1 ) : "
define the function tz with an argument request.,define function var0 with argument request.,def tz ( request ) : ,def var0 ( request ) : 
define the method tzname with 2 arguments self and dt.,define method var0 with 2 arguments self and var1 ,"def tzname ( self , dt ) : ","def var0 ( self , var1 ) : "
define the method tzname with 2 arguments: self and dt.,define method var0 with 2 arguments: self and var1 ,"def tzname ( self , dt ) : ","def var0 ( self , var1 ) : "
define the function u with an argument s.,define function u with argument var0,def u ( s ) : ,def u ( s ) : 
define the method u with an argument self.,define method u with argument self.,def u ( self ) : ,def u ( self ) : 
"format string '%02d' with the second element of the result, return it.   define the method U with an argument self.","format string var0 with second element of result, return it var1 define method U with argument self.",def U ( self ) : ,def U ( self ) : 
define the method ugettext with an argument message.,define method var0 with argument message.,def ugettext ( message ) : ,def var0 ( message ) : 
define the function ugettext with an argument message.,define function var0 with argument message.,def ugettext ( message ) : ,def var0 ( message ) : 
return the result.   define the method unclosed_block_tag with 2 arguments: self and parse_until.,return result var0 define method var1 with 2 arguments: self and var2 ,"def unclosed_block_tag ( self , parse_until ) : ","def var1 ( self , var2 ) : "
define the method unclosed_block_tag with 2 arguments: self and parse_until.,define method var0 with 2 arguments: self and var1 ,"def unclosed_block_tag ( self , parse_until ) : ","def var0 ( self , var1 ) : "
define the function unescape_entities with an argument text.,define function var0 with argument text.,def unescape_entities ( text ) : ,def var0 ( text ) : 
define the function unescape_string_literal with an argument s.,define function var0 with argument var1,def unescape_string_literal ( s ) : ,def var0 ( s ) : 
define the method unget with arguments self and bytes.,define method var0 with arguments self and bytes.,"def unget ( self , bytes ) : ","def var0 ( self , bytes ) : "
"define the function ungettext with 3 arguments: singular, plural and number.","define function var0 with 3 arguments: singular, plural and number.","def ungettext ( singular , plural , number ) : ","def var0 ( singular , plural , number ) : "
"and number set to number, return the result.   define the function ungettext_lazy with 3 arguments: singular, plural and number set to None.","and number set to number, return result var0 define function var1 with 3 arguments: singular, plural and number set to var3 ","def ungettext_lazy ( singular , plural , number = None ) : ","def var1 ( singular , plural , number = var3 ) : "
define the function unlock with argument f.,define function unlock with argument var0,def unlock ( f ) : ,def unlock ( f ) : 
define the function unordered_list with 2 arguments value and autoescape set to None.,define function var0 with 2 arguments value and var2 set to var3 ,"def unordered_list ( value , autoescape = None ) : ","def var0 ( value , var2 = var3 ) : "
"define the method unparsed_entity_decl with arguments self, name, base, sysid, pubid and notation_name.","define method var0 with arguments self, name, base var1 var2 and var3 ","def unparsed_entity_decl ( self , name , base , sysid , pubid , notation_name ) : ","def var0 ( self , name , base , var1 , var2 , var3 ) : "
define the function unregister_serializer with an argument format.,define function var0 with argument format.,def unregister_serializer ( format ) : ,def var0 ( format ) : 
define the method unsign with arguments self and signed_value.,define method var0 with arguments self and var1 ,"def unsign ( self , signed_value ) : ","def var0 ( self , var1 ) : "
"define the method unsign with arguments self, value and max_age set to None.","define method var0 with arguments self, value and var1 set to var3 ","def unsign ( self , value , max_age = None ) : ","def var0 ( self , value , var1 = var3 ) : "
define the function upath with an argument path.,define function var0 with argument path.,def upath ( path ) : ,def var0 ( path ) : 
"define the method update with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.","define method update with 3 arguments: self, unpacked list var0 and unpacked dict var1 ","def update ( self , * args , ** kwargs ) : ","def update ( self , * var0 , ** var1 ) : "
define the method update with 2 arguments: self and dict_.,define method update with 2 arguments: self and var0 ,"def update ( self , dict_ ) : ","def update ( self , var0 ) : "
define the method update with 2 arguments: self and other_dict.,define method update with 2 arguments: self and var0 ,"def update ( self , other_dict ) : ","def update ( self , var0 ) : "
define the method update_error_dict with arguments self and error_dict.,define method var0 with arguments self and var1 ,"def update_error_dict ( self , error_dict ) : ","def var0 ( self , var1 ) : "
define the method update_watch with sender defaulting to None and dictionary pair of elements kwargs.,define method var0 with sender defaulting to var2 and dict pair of elements var3 ,"def update_watch ( sender = None , ** kwargs ) : ","def var0 ( sender = var2 , ** var3 ) : "
define the method upload_complete with argument self.,define method var0 with argument self.,def upload_complete ( self ) : ,def var0 ( self ) : 
define the method upload_handlers with arguments: self and upload_handlers.,define method var0 with arguments: self and var0 ,"def upload_handlers ( self , upload_handlers ) : ","def var0 ( self , var0 ) : "
define the method upload_handlers with an argument self.,define method var0 with argument self.,def upload_handlers ( self ) : ,def var0 ( self ) : 
define the function upper with an argument value.,define function upper with argument value.,def upper ( value ) : ,def upper ( value ) : 
define the function url with 2 arguments: parser and token.,define function url with 2 arguments: parser and token.,"def url ( parser , token ) : ","def url ( parser , token ) : "
define the method url with arguments self and name.,define method url with arguments self and name.,"def url ( self , name ) : ","def url ( self , name ) : "
define the method url_patterns with an argument self.,define method var0 with argument self.,def url_patterns ( self ) : ,def var0 ( self ) : 
define the method urlconf_module with an argument self.,define method var0 with argument self.,def urlconf_module ( self ) : ,def var0 ( self ) : 
define the function urlencode with 2 arguments query and doseq set to integer 0.,define function var0 with 2 arguments query and var1 set to integer 0.,"def urlencode ( query , doseq = 0 ) : ","def var0 ( query , var1 = 0 ) : "
define the method urlencode with 3 arguments: self and safe set to None.,define method var0 with 3 arguments: self and safe set to var1 ,"def urlencode ( self , safe = None ) : ","def var0 ( self , safe = var1 ) : "
define the function urlencode with 2 arguments value and safe set to None.,define function var0 with 2 arguments value and safe set to var1 ,"def urlencode ( value , safe = None ) : ","def var0 ( value , safe = var1 ) : "
"define the function urlize with 4 arguments: text, trim_url_limit set to None, nofollow set to boolean False,",define function var0 with 4 arguments: text var1 set to var3 var4 set to boolean var5 ,"def urlize ( text , trim_url_limit = None , nofollow = False , autoescape = False ) : ","def var0 ( text , var1 = var3 , var4 = var5 , autoescape = var5 ) : "
define the function urlize with 2 arguments value and autoescape set to None.,define function var0 with 2 arguments value and var1 set to var2 ,"def urlize ( value , autoescape = None ) : ","def var0 ( value , var1 = var2 ) : "
"define the function urlizetrunc with 3 arguments value, limit and autoescape set to None.","define function var0 with 3 arguments value, limit and var1 set to var2 ","def urlizetrunc ( value , limit , autoescape = None ) : ","def var0 ( value , limit , var1 = var2 ) : "
substitute the result for ASCTIME_DATE.   define the function urlquote with 2 arguments: url and safe set to '/'.,substitute result for var0 define function var2 with 2 arguments: url and safe set to var3.,"def urlquote ( url , safe = '/' ) : ","def var2 ( url , safe = var3 ) : "
define the function urlquote_plus with 2 arguments: url and safe set to an empty string.,define function var0 with 2 arguments: url and safe set to empty string.,"def urlquote_plus ( url , safe = '' ) : ","def var0 ( url , safe = '' ) : "
define the function urlsafe_base64_decode with an argument s.,define function var0 with argument var1,def urlsafe_base64_decode ( s ) : ,def var0 ( s ) : 
define the function urlsafe_base64_encode with an argument s.,define function var0 with argument var1,def urlsafe_base64_encode ( s ) : ,def var0 ( s ) : 
define the function urlunquote with an argument quoted_url.,define function var0 with argument var1 ,def urlunquote ( quoted_url ) : ,def var0 ( var1 ) : 
define the function urlunquote with an argument quoted_url.,define function var0 with argument var1 ,def urlunquote_plus ( quoted_url ) : ,def var0_plus ( var1 ) : 
define the method usage with arguments self and subcommand.,define method usage with arguments self and var0 ,"def usage ( self , subcommand ) : ","def usage ( self , var0 ) : "
define the method usage with 2 argument: self and subcommand.,define method usage with 2 argument: self and var0 ,"def usage ( self , subcommand ) : ","def usage ( self , var0 ) : "
"define the method use_argparse with an argument self,","define method var0 with argument self,",def use_argparse ( self ) : ,def var0 ( self ) : 
define the method utcoffset with 2 arguments self and dt.,define method var0 with 2 arguments self and var1 ,"def utcoffset ( self , dt ) : ","def var0 ( self , var1 ) : "
define the method utcoffset with 2 arguments: self and dt.,define method var0 with 2 arguments: self and var1 ,"def utcoffset ( self , dt ) : ","def var0 ( self , var1 ) : "
define the function valid_ident with an argument s.,define function var0 with argument var1,def valid_ident ( s ) : ,def var0 ( s ) : 
code set to an string 'invalid_choice' and dictionary params with an entry: value for 'value'.   define the method valid_value with arguments self and value.,code set to string var0 and dict var1 with entry: value for var2 var3 define method var4 with arguments self and value.,"def valid_value ( self , value ) : ","def var4 ( self , value ) : "
"define the method with 3 arguments: self, app_config  set to None and display_num_errors set to boolean False.",define method with 3 arguments: self var1 set to var3 and var4 set to boolean var6var0,"def validate ( self , app_config = None , display_num_errors = False ) : ","def validate ( self , var0var1 = var3 , var0var4 = var6 ) : "
define the method to_python with arguments self and value.,define method var0 with arguments self and value.,"def validate ( self , value ) : ","def validate ( self , value ) : "
define the method validate with arguments self and value.,define method validate with arguments self and value.,"def validate ( self , value ) : ","def validate ( self , value ) : "
define the method validate with 2 arguments: self and value.,define method validate with 2 arguments: self and value.,"def validate ( self , value ) : ","def validate ( self , value ) : "
define the method validate_domain_part with arguments self and domain_part.,define method var0 with arguments self and var1 ,"def validate_domain_part ( self , domain_part ) : ","def var0 ( self , var1 ) : "
define the method validate_host with 2 arguments: host and allowed_hosts.,define method var0 with 2 arguments: host and var1 ,"def validate_host ( host , allowed_hosts ) : ","def var0 ( host , var1 ) : "
define the function validate_integer with an argument value.,define function var0 with argument value.,def validate_integer ( value ) : ,def var0 ( value ) : 
define the function validate_ipv46_address with an argument value.,define function var0 with argument value.,def validate_ipv46_address ( value ) : ,def var0 ( value ) : 
return value of the call to the function _ with an argument string 'Enter a valid IPv4 address.' and string 'invalid'.   define the function validate_ipv6_address with an argument value.,return value of call to function var0 with argument string var1 and string var2 var3 define function var4 with argument value.,def validate_ipv6_address ( value ) : ,def var4 ( value ) : 
define the method validate_key with self class instance and key as arguments.,define method var0 with self class instance and key as arguments.,"def validate_key ( self , key ) : ","def var0 ( self , key ) : "
"define validate_name with 3 arguments: self, name and app_or_project.","define var0 with 3 arguments: self, name and var1 ","def validate_name ( self , name , app_or_project ) : ","def var0 ( self , name , var1 ) : "
define the method validate_number with self class instance and number as arguments.,define method var0 with self class instance and number as arguments.,"def validate_number ( self , number ) : ","def var0 ( self , number ) : "
define the method validate_unique with an argument self.,define method var0 with argument self.,def validate_unique ( self ) : ,def var0 ( self ) : 
define the method value with an argument self.,define method value with argument self.,def value ( self ) : ,def value ( self ) : 
define method value_encode with self class instance and val as arguments.,define method var0 with self class instance and val as arguments.,"def value_encode ( self , val ) : ","def var0 ( self , val ) : "
"define the method id_for_label with arguments self, data, files and name.","define method var0 with arguments self, data, files and name.","def value_from_datadict ( self , data , files , name ) : ","def value_from_datadict ( self , data , files , name ) : "
"define the method render with 4 arguments: self, name, value and attrs set to None.","define method render with 4 arguments: self, name, value and var0 set to var1 ","def value_from_datadict ( self , data , files , name ) : ","def value_from_datadict ( self , data , files , name ) : "
"return the result.   define the method value_from_datadict with 4 arguments: self, data, files and name.","return result var0 define method var1 with 4 arguments: self, data, files and name.","def value_from_datadict ( self , data , files , name ) : ","def var1 ( self , data , files , name ) : "
"define the method value_from_datadict with 4 arguments: self, data, files and name.","define method var0 with 4 arguments: self, data, files and name.","def value_from_datadict ( self , data , files , name ) : ","def var0 ( self , data , files , name ) : "
"and result of the function flatatt, called with an argument final_attrs.   define the method value_from_datadict with 4 arguments: self, data, files and name.","and result of function var0 called with argument var1 define method var3 with 4 arguments: self, data, files and name.","def value_from_datadict ( self , data , files , name ) : ","def var3 ( self , data , files , name ) : "
"use it as an argument for the call to the mark_safe function, return the result.   define the method value_from_datadict with 4 arguments: self, data, files and name.","use it as argument for call to var0 function, return result var1 define method var2 with 4 arguments: self, data, files and name.","def value_from_datadict ( self , data , files , name ) : ","def var2 ( self , data , files , name ) : "
"define the method value_from_datadict with 2 arguments: self, data, files and name.","define method var0 with 2 arguments: self, data, files and name.","def value_from_datadict ( self , data , files , name ) : ","def var0 ( self , data , files , name ) : "
define the method values with an argument self.,define method values with argument self.,def values ( self ) : ,def values ( self ) : 
define the function verbatim with 2 arguments: parser and token.,define function verbatim with 2 arguments: parser and token.,"def verbatim ( parser , token ) : ","def verbatim ( parser , token ) : "
define the method visible_fields with an argument self.,define method var0 with argument self.,def visible_fields ( self ) : ,def var0 ( self ) : 
return result converted into an integer.   define the method w with an argument self.,return result converted into integer var0 define method w with argument self.,def w ( self ) : ,def w ( self ) : 
define the method W with an argument self.,define method W with argument self.,def W ( self ) : ,def W ( self ) : 
define the function walk_to_end with 2 arguments ch and input_iter.,define function var0 with 2 arguments var1 and var2 ,"def walk_to_end ( ch , input_iter ) : ","def var0 ( var1 , var2 ) : "
define the method widget_attrs with arguments self and widget.,define method var0 with arguments self and widget.,"def widget_attrs ( self , widget ) : ","def var0 ( self , widget ) : "
define the function widthratio with 2 arguments: parser and token.,define function var0 with 2 arguments: parser and token.,"def widthratio ( parser , token ) : ","def var0 ( parser , token ) : "
define the function with_metaclass with 2 arguments meta and unpacked list bases.,define function var0 with 2 arguments meta and unpacked list bases.,"def with_metaclass ( meta , * bases ) : ","def var0 ( meta , * bases ) : "
define the function wordcount with an argument value.,define function var0 with argument value.,def wordcount ( value ) : ,def var0 ( value ) : 
"define the method words with 4 arguments: self, num, truncate set to None, html set to boolean False.",define method words with 4 arguments: self var0 truncate set to var1 html set to boolean var2 ,"def words ( self , num , truncate = None , html = False ) : ","def words ( self , var0 , truncate = var1 , html = var2 ) : "
define the function wordwrap with 2 arguments value and arg.,define function var0 with 2 arguments value and var1 ,"def wordwrap ( value , arg ) : ","def var0 ( value , var1 ) : "
define the function wrap with 2 arguments text and width.,define function wrap with 2 arguments text and width.,"def wrap ( text , width ) : ","def wrap ( text , width ) : "
define the function wrapped with 2 arguments: unpacked list args and unpacked dictionary kwargs.,define function wrapped with 2 arguments: unpacked list var0 and unpacked dict var1 ,"def wrapped ( * args , ** kwargs ) : ","def wrapped ( * var0 , ** var1 ) : "
"define the function wrapper with list args, and dictionary pair of values kwargs as arguments.",define function wrapper with list var0 and dict pair of values var1 as arguments.,"def wrapper ( * args , ** kwargs ) : ","def wrapper ( * var0 , ** var1 ) : "
define the function wrapper with 2 arguments: unpacked list args and unpacked dictionary kwargs.,define function wrapper with 2 arguments: unpacked list var0 and unpacked dict var1 ,"def wrapper ( * args , ** kwargs ) : ","def wrapper ( * var0 , ** var1 ) : "
define the function wrapper with 2 arguments: unpacked list args and unpacked dictionary kwds.,define function wrapper with 2 arguments: unpacked list var0 and unpacked dict var1 ,"def wrapper ( * args , ** kwds ) : ","def wrapper ( * var0 , ** var1 ) : "
define the function wrapper with an argument unpacked list args.,define function wrapper with argument unpacked list var0 ,def wrapper ( * args ) : ,def wrapper ( * var0 ) : 
define the function wrapper with an argument cls.,define function wrapper with argument cls.,def wrapper ( cls ) : ,def wrapper ( cls ) : 
define the function write with an argument data.,define function write with argument data.,def write ( data ) : ,def write ( data ) : 
define the method write with 2 arguments: self and value.,define method write with 2 arguments: self and value.,"def write ( self , content ) : ","def write ( self , content ) : "
define the method write with 2 arguments: self and content.,define method write with 2 arguments: self and content.,"def write ( self , content ) : ","def write ( self , content ) : "
"define the method write with 4 arguments: self, msg, style_func with None and ending set None.","define method write with 4 arguments: self, msg var0 with var2 and ending set var2 ","def write ( self , msg , style_func = None , ending = None ) : ","def write ( self , msg , var0 = var2 , ending = var2 ) : "
"define the method write with 3 arguments self, outfile and encoding.",define method write with 3 arguments self var0 and encoding.,"def write ( self , outfile , encoding ) : ","def write ( self , var0 , encoding ) : "
"define the method write with 3 arguments: self, outfile and encoding.",define method write with 3 arguments: self var0 and encoding.,"def write ( self , outfile , encoding ) : ","def write ( self , var0 , encoding ) : "
define the method write with 2 arguments: self and s.,define method write with 2 arguments: self and var0,"def write ( self , s ) : ","def write ( self , s ) : "
define the method write with 2 arguments: self and val.,define method write with 2 arguments: self and var0 ,"def write ( self , val ) : ","def write ( self , var0 ) : "
define the method write_items with 2 arguments: self and handler.,define method var0 with 2 arguments: self and handler.,"def write_items ( self , handler ) : ","def var0 ( self , handler ) : "
define the method write_message with arguments self and message.,define method var0 with arguments self and message.,"def write_message ( self , message ) : ","def var0 ( self , message ) : "
define the method write_migration_files with arguments self and changes.,define method var0 with arguments self and changes.,"def write_migration_files ( self , changes ) : ","def var0 ( self , changes ) : "
"define the method write_po_file with arguments self, potfile and locale.",define method var0 with arguments self var1 and locale.,"def write_po_file ( self , potfile , locale ) : ","def var0 ( self , var1 , locale ) : "
define the function write_pot_file with 2 arguments potfile and msgs.,define function var0 with 2 arguments var1 and msgs.,"def write_pot_file ( potfile , msgs ) : ","def var0 ( var1 , msgs ) : "
define the method writer with an argument self.,define method writer with argument self.,def writer ( self ) : ,def writer ( self ) : 
define the method writer_enters with an argument self.,define method var0 with argument self.,def writer_enters ( self ) : ,def var0 ( self ) : 
define the method writer_leaves with an argument self.,define method var0 with argument self.,def writer_leaves ( self ) : ,def var0 ( self ) : 
define the method writeString with 2 arguments self and encoding.,define method var0 with 2 arguments self and encoding.,"def writeString ( self , encoding ) : ","def var0 ( self , encoding ) : "
third element of the result of the function sys.exc_info.   define the method __init__ with an argument self.,third element of result of function sys var1 define method var3 with argument self.,def xreadlines ( self ) : ,def xreadlines ( self ) : 
define the method y with an argument self.,define method y with argument self.,def y ( self ) : ,def y ( self ) : 
define the function yesno with 2 arguments value and arg set to None.,define function var0 with 2 arguments value and var1 set to var2 ,"def yesno ( value , arg = None ) : ","def var0 ( value , var1 = var2 ) : "
define the method Z with an argument self.,define method Z with argument self.,def Z ( self ) : ,def Z ( self ) : 
default is a string 'DEFAULT'.,default is string var0.,default = 'DEFAULT',default = var0
"call the method bytes_to_text with 2 arguments: default and self.encoding, substitute the result for default.",call method var0 with 2 arguments: default and var1 substitute result for default.,"default = bytes_to_text ( default , self . encoding )","default = var0 ( default , var1 )"
DEFAULT_ATTACHMENT_MIME_TYPE is a string 'application/octet-stream'.,var0 is string var1.,DEFAULT_ATTACHMENT_MIME_TYPE = 'application/octet-stream',var0 = var1
update default_attrs dictionary with attrs entry.,update var0 dict with attrs entry.,default_attrs . update ( attrs ),var0 . update ( attrs )
default_attrs is an dictionary with 2 initial entries: string '40' for 'cols' and string '10' for 'rows'.,var0 is dict with 2 initial entries: string var1 for var2 and string var3 for var4.,"default_attrs = { 'cols' : '40' , 'rows' : '10' }","var0 = { 'cols' : var1 , 'rows' : '10' }"
CacheKeyWarning' and 'BaseCache'   DEFAULT_CACHE_ALIAS is a string 'default'.,CacheKeyWarningvar1BaseCachevar4default'.,DEFAULT_CACHE_ALIAS = 'default',var6 = 'default'
"bring integer 2 to the power of 10, multiply it by 64, substitute the result for DEFAULT_CHUNK_SIZE.","bring integer 2 to power of 10, multiply it by 64, substitute result for var0 ",DEFAULT_CHUNK_SIZE = 64 * 2 ** 10,var0 = 64 * 2 ** 10
"bring integer 2 to the power of 10, multiply it by integer 64, substitute the result for DEFAULT_CHUNK_SIZE.","bring integer 2 to power of 10, multiply it by integer 64, substitute result for var0 ",DEFAULT_CHUNK_SIZE = 64 * 2 ** 10,var0 = 64 * 2 ** 10
"default_error_messages is an dictionary with an entry: return value of the function _ called with an argument string,","var0 is dict with entry: return value of function var1 called with argument string,","default_error_messages = { 'invalid_choice' : _ ( 'Select a valid choice. %(value)s is not one of the available choices.' ) , 'invalid_list' : _ ( 'Enter a list of values.' ) , }","var0 = { 'invalid_choice' : var1 ( 'Select a valid choice.%(value)s is not one of the available choices.' ) , 'invalid_list' : var1 ( 'Enter a list of values.' ) }"
"default_error_messages is an dictionary with an entry: return value of the function _ called with an argument string,","var0 is dict with entry: return value of function var1 called with argument string,","default_error_messages = { 'invalid_choice' : _ ( 'Select a valid choice. %(value)s is not one of the available choices.' ) , }",var0 = { 'invalid_choice' : var1 ( 'Select a valid choice.%(value)s is not one of the available choices.' ) }
"default_error_messages is a dictionary with an entry, result of the call to the function _ with an argument,","var0 is dict with entry, result of call to function var1 with argument,","default_error_messages = { 'invalid_choice' : _ ( 'Select a valid choice. That choice is not one of' ' the available choices.' ) , }",var0 = { 'invalid_choice' : var1 ( 'Select a valid choice.That choice is not one of the available choices.' ) }
"default_error_messages is an dictionary with an entry: return value of the function _ called with an argument,","var0 is dict with entry: return value of function var1 called with argument,","default_error_messages = { 'invalid_choice' : _ ( 'The inline foreign key did not match the parent instance primary key.' ) , }",var0 = { 'invalid_choice' : var1 ( 'The inline foreign key did not match the parent instance primary key.' ) }
"default_error_messages is an dictionary with 2 entries: return value of the function _ called with an string 'Enter a valid date.',","var0 is dict with 2 entries: return value of function var1 called with string var2,","default_error_messages = { 'invalid_date' : _ ( 'Enter a valid date.' ) , 'invalid_time' : _ ( 'Enter a valid time.' ) , }","var0 = { 'invalid_date' : var1 ( var2 ) , 'invalid_time' : var1 ( 'Enter a valid time.' ) }"
"default_error_messages is an dictionary with an entry: return value of the function _ called with an argument string,","var0 is dict with entry: return value of function var1 called with argument string,","default_error_messages = { 'invalid_image' : _ ( 'Upload a valid image. The file you uploaded was either not an image or a corrupted image.' ) , }",var0 = { 'invalid_image' : var1 ( 'Upload a valid image.The file you uploaded was either not an image or a corrupted image.' ) }
"default_error_messages is an dictionary with 2 entries: return value of the function _ called with an argument string,","var0 is dict with 2 entries: return value of function var1 called with argument string,","default_error_messages = { 'invalid' : _ ( 'Enter a list of values.' ) , 'incomplete' : _ ( 'Enter a complete value.' ) , }","var0 = { 'invalid' : var1 ( 'Enter a list of values.' ) , 'incomplete' : var1 ( 'Enter a complete value.' ) }"
"default_error_messages is a dictionary with 4 initial entries: return value of the function _ called with string as an argument,","var0 is dict with 4 initial entries: return value of function var1 called with string as argument,","default_error_messages = { 'invalid' : _ ( 'Enter a number.' ) , 'max_digits' : ungettext_lazy ( 'Ensure that there are no more than %(max)s digit in total.' , 'Ensure that there are no more than %(max)s digits in total.' , 'max' ) , 'max_decimal_places' : ungettext_lazy ( 'Ensure that there are no more than %(max)s decimal place.' , 'Ensure that there are no more than %(max)s decimal places.' , 'max' ) , 'max_whole_digits' : ungettext_lazy ( 'Ensure that there are no more than %(max)s digit before the decimal point.' , 'Ensure that there are no more than %(max)s digits before the decimal point.' , 'max' ) , }","var0 = { 'invalid' : var1 ( 'Enter a number.' ) , 'max_digits' : ungettext_lazy ( 'Ensure that there are no more than %(max)s digit in total.' , 'Ensure that there are no more than %(max)s digits in total.' , 'max' ) , 'max_decimal_places' : ungettext_lazy ( 'Ensure that there are no more than %(max)s decimal place.' , 'Ensure that there are no more than %(max)s decimal places.' , 'max' ) , 'max_whole_digits' : ungettext_lazy ( 'Ensure that there are no more than %(max)s digit before the decimal point.' , 'Ensure that there are no more than %(max)s digits before the decimal point.' , 'max' ) }"
"default_error_messages is an dictionary with an initial entry: result of the function _ called with an argument string,","var0 is dict with initial entry: result of function var1 called with argument string,","default_error_messages = { 'invalid' : _ ( 'Enter a number.' ) , }",var0 = { 'invalid' : var1 ( 'Enter a number.' ) }
default_error_messages is an dictionary with an entry: return value of the function _ called with an argument string 'Enter a valid date.' for 'invalid'.,var0 is dict with entry: return value of function var1 called with argument string var2 for var3.,"default_error_messages = { 'invalid' : _ ( 'Enter a valid date.' ) , }",var0 = { 'invalid' : var1 ( var2 ) }
default_error_messages is an dictionary with an entry: return value of the function _ called with an argument string 'Enter a valid date/time.' for 'invalid'.,var0 is dict with entry: return value of function var1 called with argument string var2 for var3.,"default_error_messages = { 'invalid' : _ ( 'Enter a valid date/time.' ) , }",var0 = { 'invalid' : var1 ( var2 ) }
default_error_messages is an dictionary with an entry: return value of the function _ called with an argument string 'Enter a valid time.' for 'invalid'.,var0 is dict with entry: return value of function var1 called with argument string var2 for var3.,default_error_messages = { 'invalid' : _ ( 'Enter a valid time.' ) },var0 = { 'invalid' : var1 ( var2 ) }
default_error_messages is an dictionary with an entry: return value of the function _ called with an argument string 'Enter a valid URL.' for 'invalid'.,var0 is dict with entry: return value of function var1 called with argument string var2 for var3.,"default_error_messages = { 'invalid' : _ ( 'Enter a valid URL.' ) , }",var0 = { 'invalid' : var1 ( var2 ) }
"default_error_messages is an dictionary with an initial entry: result of the function _ called with an argument string,","var0 is dict with initial entry: result of function var1 called with argument string,","default_error_messages = { 'invalid' : _ ( 'Enter a whole number.' ) , }",var0 = { 'invalid' : var1 ( 'Enter a whole number.' ) }
"default_error_messages is an dictionary with 5 initial entries: return value of the function _ called with an argument string,","var0 is dict with 5 initial entries: return value of function var1 called with argument string,","default_error_messages = { 'invalid' : _ ( 'No file was submitted. Check the encoding type on the form.' ) , 'missing' : _ ( 'No file was submitted.' ) , 'empty' : _ ( 'The submitted file is empty.' ) , 'max_length' : ungettext_lazy ( 'Ensure this filename has at most %(max)d character (it has %(length)d).' , 'Ensure this filename has at most %(max)d characters (it has %(length)d).' , 'max' ) , 'contradiction' : _ ( 'Please either submit a file or check the clear checkbox, not both.' ) }","var0 = { 'invalid' : var1 ( 'No file was submitted.Check the encoding type on the form.' ) , 'missing' : var1 ( 'No file was submitted.' ) , 'empty' : var1 ( 'The submitted file is empty.' ) , 'max_length' : ungettext_lazy ( 'Ensure this filename has at most %(max)d character(it has %(length)d).' , 'Ensure this filename has at most %(max)d characters(it has %(length)d).' , 'max' ) , 'contradiction' : var1 ( 'Please either submit a file or check the clear checkbox, not both.' ) }"
"default_error_messages is an dictionary with 3 entries: return value of the function _ called with an argument,","var0 is dict with 3 entries: return value of function var1 called with argument,","default_error_messages = {  'list' : _ ( 'Enter a list of values.' ) ,  'invalid_choice' : _ ( 'Select a valid choice. %(value)s is not one of the'  ' available choices.' ) ,  'invalid_pk_value' : _ ( ''%(pk)s' is not a valid value for a primary key.' )  }","var0 = {  'list': _('Enter a list of values.'),  'invalid_choice': _('Select a valid choice.%(value)s is not one of the'  ' available choices.'),  'invalid_pk_value': _(''%(pk)s' is not a valid value for a primary key.')  }"
default_error_messages is an dictionary containing entry: return value of the function _ called with an string 'This field is required.' for 'required'.,var0 is dict containing entry: return value of function var1 called with string var2 for var3.,"default_error_messages = { 'required' : _ ( 'This field is required.' ) , }",var0 = { 'required' : var1 ( var2 ) }
default_list is an empty list.,var0 is empty list.,default_list = [ ],var0 = [ ]
"evaluate the function get_system_encoding(), substitute the return vale for DEFAULT_LOCALE_ENCODING.","evaluate function get_system_encoding(), substitute return vale for var2 ",DEFAULT_LOCALE_ENCODING = get_system_encoding ( ),var2 = var0 ( )
"DEFAULT_LOGGING is a dictionary with 5 initial entries: 1 for 'version', False for 'disable_existing_loggers',","var0 is dict with 5 initial entries: 1 for var1 var2 for var3,","DEFAULT_LOGGING = { 'version' : 1 , 'disable_existing_loggers' : False , 'filters' : { 'require_debug_false' : { '()' : 'django.utils.log.RequireDebugFalse' , } , 'require_debug_true' : { '()' : 'django.utils.log.RequireDebugTrue' , } , } , 'handlers' : { 'console' : { 'level' : 'INFO' , 'filters' : [ 'require_debug_true' ] , 'class' : 'logging.StreamHandler' , } , 'null' : { 'class' : 'logging.NullHandler' , } , 'mail_admins' : { 'level' : 'ERROR' , 'filters' : [ 'require_debug_false' ] , 'class' : 'django.utils.log.AdminEmailHandler' } } , 'loggers' : { 'django' : { 'handlers' : [ 'console' ] , } , 'django.request' : { 'handlers' : [ 'mail_admins' ] , 'level' : 'ERROR' , 'propagate' : False , } , 'django.security' : { 'handlers' : [ 'mail_admins' ] , 'level' : 'ERROR' , 'propagate' : False , } , 'py.warnings' : { 'handlers' : [ 'console' ] , } , } }","var0 = { var1 : 1 , 'disable_existing_loggers' : var2 , 'filters' : { 'require_debug_false' : { '()' : 'django.utils.log.RequireDebugFalse' } , 'require_debug_true' : { '()' : 'django.utils.log.RequireDebugTrue' } } , 'handlers' : { 'console' : { 'level' : 'INFO' , 'filters' : [ 'require_debug_true' ] , 'class' : 'logging.StreamHandler' } , 'null' : { 'class' : 'logging.NullHandler' } , 'mail_admins' : { 'level' : 'ERROR' , 'filters' : [ 'require_debug_false' ] , 'class' : 'django.utils.log.AdminEmailHandler' } } , 'loggers' : { 'django' : { 'handlers' : [ 'console' ] } , 'django.request' : { 'handlers' : [ 'mail_admins' ] , 'level' : 'ERROR' , 'propagate' : var2 } , 'django.security' : { 'handlers' : [ 'mail_admins' ] , 'level' : 'ERROR' , 'propagate' : var2 } , 'py.warnings' : { 'handlers' : [ 'console' ] } } }"
DEFAULT_MAX_NUM is an integer 1000.,var0 is integer 1000.,DEFAULT_MAX_NUM = 1000,var0 = 1000
DEFAULT_MIN_NUM is an integer 0.,var0 is integer 0.,DEFAULT_MIN_NUM = 0,var0 = 0
"a dictionary with 18 pairs of dictionary value and string keys for DARK_PALETTE,   and a dictionary with 18 pairs of dictionary value and string keys for LIGHT_PALETTE.   substitute DARK_PALETTE for DEFAULT_PALETTE.",a dict with 18 pairs of dict value and string keys for var0 and dict with 18 pairs of dict value and string keys for var4 substitute var0 for var5 ,DEFAULT_PALETTE = DARK_PALETTE,var5 = var0
"""(?P<ipv6>\[[a-fA-F0-9:]+\]) | (?P<fqdn>[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*) ):)?(?P<port>\d+)$"", re.X   DEFAULT_PORT is a string ""8000"".","var0, re.X var5 is string var6.",DEFAULT_PORT = '8000',var5 = '8000'
"call the function module_to_dict with an argument global_settings, substitute it for default_settings.",call function var0 with argument var1 substitute it for var3 ,default_settings = module_to_dict ( global_settings ),var3 = var0 ( var1 )
"call the DefaultStorage method, substitute the result for default_storage.","call var0 method, substitute result for var1 ",default_storage = DefaultStorage ( ),var1 = var0 ( )
DEFAULT_TIMEOUT is a instance of the class object.,DEFAULT_TIMEOUT is instance of class object.,DEFAULT_TIMEOUT = object ( ),DEFAULT_TIMEOUT = object ( )
"call the function translation with an argument settings.LANGUAGE_CODE, substitute the result for default_translation.",call function translation with argument settings var0 substitute result for var1 ,default_translation = translation ( settings . LANGUAGE_CODE ),var1 = translation ( settings . var0 )
default_validators is an empty list.,var0 is empty list.,default_validators = [ ],var0 = [ ]
"default_validators is a list with an element, return value of the validators.URLValidator method.","var0 is list with element, return value of var1 var2 method.",default_validators = [ validators . URLValidator ( ) ],var0 = [ var1 . var2 ( ) ]
default_validators is a list with an element validators.validate_email.,var0 is list with element validators var2 ,default_validators = [ validators . validate_email ],var0 = [ validators . var2 ]
default_validators is an list containing validators.validate_ipv4_address.,var0 is list containing validators var2 ,default_validators = [ validators . validate_ipv4_address ],var0 = [ validators . var2 ]
default_validators is an list containing validators.validate_slug.,var0 is list containing validators var2 ,default_validators = [ validators . validate_slug ],var0 = [ validators . var2 ]
substitute Rss201rev2Feed for DefaultFeed.,substitute var0 for var1 ,DefaultFeed = Rss201rev2Feed,var1 = var0
"call the method parser.parse_args with an arguments args set to an empty list, assign the result for defaults and _, respectively.","call method parser var1 with arguments args set to empty list, assign result for defaults and _, respectively.","defaults , _ = parser . parse_args ( args = [ ] )","defaults , _ = parser . var1 ( args = [ ] )"
update defaults dictionary with kwargs.,update defaults dict with var0 ,defaults . update ( kwargs ),defaults . update ( var0 )
substitute self.data for value under the 'data' key of the defaults dictionary.,substitute var0 for value under var1 key of defaults dict.,defaults [ 'data' ] = self . data,defaults [ var1 ] = var0
"and i is greater than or equal to self.min_num,   value under the 'empty_permitted' key of the defaults dictionary is boolean True.",and i is greater var0 or equal to self var2 value under var4 key of defaults dict is boolean var5 ,defaults [ 'empty_permitted' ] = True,defaults [ var4 ] = var5
substitute self.files for value under the 'files' key of the defaults dictionary.,substitute var0 for value under var1 key of defaults dict.,defaults [ 'files' ] = self . files,defaults [ var1 ] = var0
substitute i-th element of self.initial for value under the 'initial' key of the defaults dictionary.,substitute i-th element of var0 for value under var1 key of defaults dict.,defaults [ 'initial' ] = self . initial [ i ],defaults [ var1 ] = var0 [ i ]
"defaults is an dictionary with 3 initial entries: self.auto_id for 'auto_id', result of the call to the method self.add_prefix,","defaults is dict with 3 initial entries: var0 for var1, result of call to method self var3 ","defaults = { 'auto_id' : self . auto_id , 'prefix' : self . add_prefix ( i ) , 'error_class' : self . error_class , }","defaults = { var1 : var0 , 'prefix' : self . var3 ( i ) , 'error_class' : self . error_class }"
"if not self.initial_extra is None.   defaults is a dictionary with 4 entries: data for 'data', files for 'files', auto_id for 'auto_id' and prefix for 'prefix'.","if not self var1 is var2 defaults is dict with 4 entries: data for var4, files for var5, auto_id for var10 and prefix for var11.","defaults = { 'data' : data , 'files' : files , 'auto_id' : auto_id , 'prefix' : prefix }","defaults = { var4 : data , 'files' : files , 'auto_id' : auto_id , 'prefix' : prefix }"
"create dictionary out of the unpacked dictionary options, using defaults.__dict__ as a mapping function, substitute the result for defaults.","create dict out of unpacked dict options, using var0 as mapping function, substitute result for defaults.","defaults = dict ( defaults . __dict__ , ** options )","defaults = dict ( var0 , ** options )"
"create dictionary out of the unpacked dictionary options, using defaults._get_kwargs as a mapping function, substitute the result for defaults.","create dict out of unpacked dict options, using var0 as mapping function, substitute result for defaults.","defaults = dict ( defaults . _get_kwargs ( ) , ** options )","defaults = dict ( defaults . _get_kwargs ( ) , ** options )"
"call the method parser.parse_args with an argument args set to args, substitute the result for defaults.","call method parser var1 with argument args set to args, substitute result for defaults.",defaults = parser . parse_args ( args = args ),defaults = parser . var1 ( args = args )
substitute last element of colors for value under the 'bg' key of definition dictionary.,substitute last element of colors for value under var0 key of definition dict.,definition [ 'bg' ] = colors [ - 1 ],definition [ var0 ] = colors [ - 1 ]
substitute fg for value under the 'fg' key of definition dictionary.,substitute fg for value under var0 key of definition dict.,definition [ 'fg' ] = fg,definition [ var0 ] = fg
substitute opts for value under the 'opts' key of definition dictionary.,substitute opts for value under var0 key of definition dict.,definition [ 'opts' ] = opts,definition [ var0 ] = opts
"definition is an empty dictionary,","definition is empty dict,",definition = { },definition = { }
"get the attribute 'Media' of the cls object, if it exists substitute it for definition, if not definition is None.","get attribute var0 of cls object, if it exists substitute it for definition, if not definition is var1 ","definition = getattr ( cls , 'Media' , None )","definition = getattr ( cls , var0 , var1 )"
delete _active.value.,delete var0 ,del _active . value,del var0
remove the first occurrence of the filename value in the _error_files list.,remove first occurrence of filename value in _error_files list.,del _error_files [ _error_files . index ( filename ) ],del _error_files [ _error_files . index ( filename ) ]
delete _prefixes.values.,delete var0 ,del _prefixes . value,del _prefixes . value
delete the _serializers dictionary entry at the format key.,delete var0 dict entry at format key.,del _serializers [ format ],del var0 [ format ]
delete _urlconfs.value.,delete var0 ,del _urlconfs . value,del var0
substitute attr for the obtained value.   delete attr.,substitute var0 for obtained value var2 delete var0 ,del attr,del var0
delete attr.,delete var0 ,del attr,del var0
delete entry under the attr key of the attrs dictionary.,delete entry under var0 key of var1 dict.,del attrs [ attr ],del var0s [ var0 ]
delete first element of bits.,delete first element of bits.,del bits [ : 1 ],del bits [ : 1 ]
delete first 3 elements of bits.,delete first 3 elements of bits.,del bits [ : 3 ],del bits [ : 3 ]
delete entry under the oldkey key of the cache dictionary.,delete entry under var0 key of cache dict.,del cache [ oldkey ],del cache [ var0 ]
delete dictionary item 'private' from cc.,delete dict item var0 from cc.,del cc [ 'private' ],del cc [ var0 ]
delete dictionary item 'public' from cc.,delete dict item var0 from cc.,del cc [ 'public' ],del cc [ var0 ]
delete value under the 'args' key of the cmd_options dictionary.,delete value under var0 key of var1 dict.,del cmd_options [ 'args' ],del var1 [ var0 ]
delete the form.cleaned_data dictionary entry under the field key.,delete form var1 dict entry under field key.,del form . cleaned_data [ field ],del form . var1 [ field ]
substitute the result for the value under the NON_FIELD_ERRORS key of form._errors dictionary.   delete entry from form.cleaned_data dictionary under the field key.,substitute result for value under var0 key of var1 dict var2 delete entry from form var4 dict under field key.,del form . cleaned_data [ field ],del form . var4 [ field ]
delete frame.,delete frame.,del frame,del frame
delete element under 'warning' key of kwargs dictionary.,delete element under var0 key of var1 dict.,del kwargs [ 'warning' ],del var1 [ var0 ]
delete logging._handlerList list.,delete var0 list.,del logging . _handlerList [ : ],del var0 [ : ]
delete entry under the name key of the moves.__dict__ dictionary.,delete entry under name key of var0 dict.,del moves . __dict__ [ name ],del var0 [ name ]
delete entry under the attr key of obj_dict dictionary.,delete entry under var0 key of var1 dict.,del obj_dict [ attr ],del var1 [ var0 ]
delete the value under the 'liveserver' key of the options dictionary.,delete value under var0 key of options dict.,del options [ 'liveserver' ],del options [ var0 ]
delete the value under key key of self._cache dictionary.,delete value under key key of self._cache dict.,del self . _cache [ key ],del self . _cache [ key ]
delete the value under the key key of self._cache dictionary.,delete value under key key of self._cache dict.,del self . _cache [ key ],del self . _cache [ key ]
delete the value under key key of self._expire_info.,delete value under key key of var0 ,del self . _expire_info [ key ],del var0 [ key ]
delete the value under the key key of self._expire_info dictionary.,delete value under key key of self._expire_info dict.,del self . _expire_info [ key ],del self . _expire_info [ key ]
delete the value under the key key of the self._expire_info dictionary.,delete value under key key of self._expire_info dict.,del self . _expire_info [ key ],del self . _expire_info [ key ]
delete self._get.,delete var0 ,del self . _get,del var0
delete the value under the header converted to lowercase key of the self._headers dictionary.,delete value under header converted to lowercase key of var0 dict.,del self . _headers [ header . lower ( ) ],del var0 [ header . lower ( ) ]
del self._post,del var0,del self . _post,del var0
delete the entry of self.cleaned_data dictionary under the key field.,delete entry of self var1 dict under key field.,del self . cleaned_data [ field ],del self . var1 [ field ]
delete entry under item key of self.dict dictionary.,delete entry under item key of var0 dict.,del self . dict [ item ],del var0 [ item ]
delete value under the key key of dictionary at last element of self.dicts.,delete value under key key of dict at last element of var0 ,del self . dicts [ - 1 ] [ key ],del var0 [ - 1 ] [ key ]
delete the first element of self.tokens.,delete first element of var0 ,del self . tokens [ 0 ],del var0 [ 0 ]
delete the value under the 'Content-Transfer-Encoding' key of self dictionary.,delete value under var0 key of self dict.,del self [ 'Content-Transfer-Encoding' ],del self [ var0 ]
and unpacked dictionary kwargs.   delete the value under the 'content-type' key of the self dictionary.,and unpacked dict var0 delete value under var2 key of self dict.,del self [ 'content-type' ],del self [ var2 ]
delete self entry under the key key.,delete self entry under key key.,del self [ key ],del self [ key ]
delete Trans.,delete var0 ,del Trans,del var0
delete X.,delete var0,del X,del X
delete name attribute of the _MovedItems object.,delete name attribute of var0 object.,"delattr ( _MovedItems , name )","delattr ( var0 , name )"
delete self.name attribute from the obj.__class__ object.,delete var0 attribute from var1 object.,"delattr ( obj . __class__ , self . name )","delattr ( var1 , var0 )"
delete name attribute from self._wrapped object.,delete name attribute from var0 object.,"delattr ( self . _wrapped , name )","delattr ( var0 , name )"
DELETION_FIELD_NAME is a string 'DELETE'.,var0 is string var1.,DELETION_FIELD_NAME = 'DELETE',var0 = var1
"if reversed is True substitute difference of d and now for delta, if not substitute the difference of now and d for delta.","if reversed is var0 substitute difference of d and now for delta, if not substitute difference of now and d for delta.",delta = ( d - now ) if reversed else ( now - d ),delta = d - now if reversed else now - d
"subtract year from integer 2000, substitute the result for delta.","subtract year from integer 2000, substitute result for delta.",delta = 2000 - year,delta = 2000 - year
"call the method datetime.timedelta with an argument seconds set to integer 1, increment delta by it.","call method var0 with argument seconds set to integer 1, increment delta by it.",delta = delta + datetime . timedelta ( seconds = 1 ),delta = delta + var0 ( seconds = 1 )
"call the method expires.utcnow, subtract the result from expires, substitute the result for delta.","call method var0 subtract result from expires, substitute result for delta.",delta = expires - expires . utcnow ( ),delta = expires - var0 ( )
substitute third element of renamed_method for deprecation_warning.,substitute third element of var0 for var1 ,deprecation_warning = renamed_method [ 2 ],var1 = var0 [ 2 ]
append rel_model to deps.,append var0 to var1 ,deps . append ( rel_model ),var1 . append ( var0 )
deps is an empty list.,var0 is empty list.,deps = [ ],var0 = [ ]
"for every dep in deps call the method apps.get_model with an argument dep, and append the result to the list, substitute it for deps.","for every var0 in var2 call method apps var5 with argument var0 and append result to list, substitute it for var2 ",deps = [ apps . get_model ( dep ) for dep in deps ],var2 = [ apps . var5 ( var0 ) for var0 in var0s ]
"get 'dependencies' attribute of the model.natural_key, substitute it for deps, if the attribute doesnt exist, deps in an empty list.",get var0 attribute of model var2 substitute it for var3 if attribute doesnt exist var3 in empty list.,"deps = getattr ( model . natural_key , 'dependencies' , [ ] )","var3 = getattr ( model . var2 , var0 , [ ] )"
"description is a string ""An instance of the '%s' class"" with '%s' replaced by value of receiver.__class__.__name__.",description is string var0 with var1 replaced by value of var2 ,description = 'An instance of the '%s' class' % receiver . __class__ . __name__,description = 'An instance of the var1 class' % var2
"description is a string ""The '%s' function"" replaced by value of receiver.__name__.",description is string var0 replaced by value of var1 ,description = 'The '%s' function' % receiver . __name__,description = 'The '%s' function' % var1
"df is an instance of DateFormat class, created with an argument value.","var0 is instance of var1 class, created with argument value.",df = DateFormat ( value ),var0 = var1 ( value )
"get config dictionary element under 'datefmt' key, if it exists substitute it for dfmt, if not, dfmt is None.","get var0 dict element under var1 key, if it exists substitute it for var2 if not var2 is var4 ","dfmt = config . get ( 'datefmt' , None )","var2 = var0 . get ( var1 , var4 )"
"call the method dict.__setitem__ with 3 arguments: result, result of the function copy.deepcopy, called with 2 arguments: key,","call method var0 with 3 arguments: result, result of function var1 called with 2 arguments: key,","dict . __setitem__ ( result , copy . deepcopy ( key , memo ) , copy . deepcopy ( value , memo ) )","var0 ( result , var1 ( key , memo ) , var1 ( value , memo ) )"
"call the private dict.__setitem__ method with self class instance, key and result of the function http_cookies.Morsel() as arguments.","call private var0 method with self class instance, key and result of function var1 Morsel() as arguments.","dict . __setitem__ ( self , key , http_cookies . Morsel ( ) )","var0 ( self , key , var1 . var3 ( ) )"
"call the private dict.__setitem__ method with self class instance, key and M as arguments.","call private var0 method with self class instance, key and M as arguments.","dict . __setitem__ ( self , key , M )","var0 ( self , key , M )"
"call the method dictConfigClass with an argument config, call the method configure on the result.",call method var0 with argument var1 call method configure on result.,dictConfigClass ( config ) . configure ( ),var0 ( var1 ) . var1ure ( )
substitute DictConfigurator for dictConfigClass.,substitute var0 for var1 ,dictConfigClass = DictConfigurator,var1 = var0
"join printable representation of d into a string separated with ', ', for every d in self.dicts, substitute the result for dictreprs.","join printable representation of d into string separated with var0, for every d in var1 substitute result for var2 ","dictreprs = ', ' . join ( repr ( d ) for d in self . dicts )",var2 = var0 . join ( repr ( d ) for d in var1 )
"call the function inner.copy, substitute the result for dig1, call the function outer.copy, substitute the result for dig2.",call function var0 substitute result for var1 call function var2 substitute result for var3 ,"dig1 , dig2 = inner . copy ( ) , outer . copy ( )","var1 , var3 = var0 ( ) , var2 ( )"
call the method dig1.update with an argument u.,call method var0 with argument var1,dig1 . update ( u ),var0 ( u )
"call the method dig1.digest, use the result as an argument for the call to the function dig2.update.",call method var0 use result as argument for call to function var1 ,dig2 . update ( dig1 . digest ( ) ),var1 ( dig1 . digest ( ) )
substitute hashlib.sha256 for digest.,substitute var0 for digest.,digest = hashlib . sha256,digest = var0
"calculate reminder of division of x by length to_digits, substitute it for digit.",calculate reminder of division of x by length var0 substitute it for digit.,digit = x % len ( to_digits ),digit = x % len ( var0 )
"compile a regex from raw string '^\d+$', substitute it for DIGIT_PATTERN.","compile var0 from raw string var1, substitute it for var2 ",DIGIT_PATTERN = re . compile ( r'^\d+$' ),var2 = re . compile ( '^\\d+$' )
append '-' to digits.,append var0 to digits.,digits . append ( '-' ),digits . append ( var0 )
append '0' to digits.,append var0 to digits.,digits . append ( '0' ),digits . append ( var0 )
insert '.' to digits at negative exponent index.,insert var0 to digits at negative exponent index.,"digits . insert ( - exponent , '.' )","digits . insert ( - exponent , var0 )"
"digits is a string ""0123456789abcdefghijklmnopqrstuvwxyz"".",digits is string var0.,digits = '0123456789abcdefghijklmnopqrstuvwxyz',digits = '0123456789abcdefghijklmnopqrstuvwxyz'
"call the method as_tuple on the result, substitute the result for sign, digits and exponent, respectively.   append result of method six.text_type called with an argument digit to an list, for every digit in reversed order of digits,","call method var0 on result, substitute result for sign, digits and exponent, respectively var1 append result of method six var3 called with argument digit to list, for every digit in reversed order of digits,",digits = [ six . text_type ( digit ) for digit in reversed ( digits ) ],digits = [ six . var3 ( digit ) for digit in reversed ( digits ) ]
substitute decimals for digits.,substitute decimals for digits.,digits = decimals,digits = decimals
substitute length of digittuple for digits.,substitute length of var0 for digits.,digits = len ( digittuple ),digits = len ( var0 )
"call the os.path.split with argument name, assign the result to the dir_name and file_name respectively.","call var0 with argument name, assign result to var1 and var2 respectively.","dir_name , file_name = os . path . split ( name )","var1 , var2 = var0 ( name )"
"if any resulting element is true, return boolean True, otherwise return boolean False.   convert os.sep into a string and append '*' to it, substitute the result for dir_suffix.","if any resulting element is true, return boolean var0 otherwise return boolean var1 convert var3 into string and append var4 to it, substitute result for var5 ",dir_suffix = '%s*' % os . sep,var5 = '%s*' % var3
"directories, files are empty lists.","directories, files are empty lists.","directories , files = [ ] , [ ]","directories , files = [ ] , [ ]"
append entry to the directories list.,append entry to directories list.,directories . append ( entry ),directories . append ( entry )
"call the function os.path.dirname with argument full_path, substitute the result for directory.",call function os.path.dirname with argument var0 substitute result for directory.,directory = os . path . dirname ( full_path ),directory = os . path . dirname ( var0 )
value under the all_label key of the directory_created dictionary is boolean True.,value under var0 key of var2 dict is boolean var4 ,directory_created [ app_label ] = True,var2 [ app_label ] = var4
directory_created is an empty dictionary.,var0 is empty dict.,directory_created = { },var0 = { }
"get the directory name of filename, substitute it for dirname.","get directory name of filename, substitute it for var0 ",dirname = os . path . dirname ( filename ),var0 = os . path . var0 ( filename )
"get the directory name of filename, substitute the result for dirname.","get directory name of filename, substitute result for var0 ",dirname = os . path . dirname ( filename ),var0 = os . path . var0 ( filename )
"use the result as an argument for the call to the os.path.join function,   use the result and the norm_patterns as arguments for the call to the is_ignored function, if it evaluates to true,   remove dirname from the dirnames.","use result as argument for call to var0 function var1 use result and var3 as arguments for call to var4 function, if it evaluates to true var1 remove var6 from var7 ",dirnames . remove ( dirname ),var7 . remove ( var6 )
remove dirname from the dirnames.,remove var0 from var1 ,dirnames . remove ( dirname ),var1 . remove ( var0 )
append an empty string to dirs list.,append empty string to var0 list.,dirs . append ( '' ),var0 . append ( '' )
append app_dir to dirs list.,append var0 to var1 list.,dirs . append ( app_dir ),var1 . append ( var0 )
"convert settings.FIXTURE_DIRS to a list, extend dirs by it.","convert settings var0 to list, extend var1 by it.",dirs . extend ( list ( settings . FIXTURE_DIRS ) ),var1 . extend ( list ( settings . var0 ) )
remove dirname key from dirs.,remove var0 key from var1 ,dirs . remove ( dirname ),var1 . remove ( var0 )
dirs is an empty dictionary.,var0 is empty dict.,dirs = [ ],var0 = [ ]
dirs is a list containing basedir.,var0 is list containing var1 ,dirs = [ basedir ],var0 = [ var1 ]
"join basedir, l and string 'LC_MESSAGES' into a path separated by '/' for every l in locales, assign the list to dirs.","join var0 l and string var1 into path separated by var2 for every l in locales, assign list to var3 ","dirs = [ os . path . join ( basedir , l , 'LC_MESSAGES' ) for l in locales ]","var3 = [ os . path . join ( var0 , l , var1 ) for l in locales ]"
"call the function os.path.realpath with an argument d, use the result as an argument for the call to the function os.path.abspath,","call function os.path.realpath with argument d, use result as argument for call to function var0 ",dirs = [ upath ( os . path . abspath ( os . path . realpath ( d ) ) ) for d in dirs ],dirs = [ upath ( os . path . abspath ( os . path . realpath ( d ) ) ) for d in dirs ]
"remove config dictionary element under 'disable_existing_loggers' key, if it exists substitute it for disable_existing, if not,","remove var0 dict element under var1 key, if it exists substitute it for disable_existing, if not,","disable_existing = config . pop ( 'disable_existing_loggers' , True )","disable_existing = var0 . pop ( var1 , True )"
"append '/' to tmp, substitute it for display_url.",append var0 to var1 substitute it for var2 ,display_url = tmp + '/',var2 = var1 + var0
substitute url for display_url.,substitute url for var0 ,display_url = url,var0 = url
"get the value under the 'content-disposition' key of the meta_data dictionary, substitute second element of it for disposition.","get value under var0 key of var1 dict, substitute second element of it for disposition.",disposition = meta_data [ 'content-disposition' ] [ 1 ],disposition = var1 [ var0 ] [ 1 ]
call the method django.setup.,call method var0 ,django . setup ( ),var0 ( )
call the django.setup method.,call var0 method.,django . setup ( ),var0 ( )
"get the value under the key 'DJANGO_COLORS' of os.environ dictionary, if key doesnt exists return empty string, assign the result to DJANGO_COLORS.","get value under key var0 of var1 dict, if key doesnt exists return empty string, assign result to DJANGO_COLORS.","DJANGO_COLORS = os . environ . get ( 'DJANGO_COLORS' , '' )","DJANGO_COLORS = var1 . get ( var0 , '' )"
"call the function os.path.dirname with an argument django.__file__, join the result into a path,","call function os.path.dirname with argument var0 join result into path,",django_dir = os . path . normpath ( os . path . join ( os . path . dirname ( django . __file__ ) ) ),django_dir = os . path . normpath ( os . path . join ( os . path . dirname ( var0 ) ) )
"join into a file path: django_dir, 'conf', 'locale', locale, 'LC_MESSAGES' and string '.po' appended to domain, substitute the result for django_po.","join into file path: var0 var2, var3, locale, var4 and string var7 appended to domain, substitute result for var8 ","django_po = os . path . join ( django_dir , 'conf' , 'locale' , locale , 'LC_MESSAGES' , '%s.po' % domain )","var8 = os . path . join ( var0 , var2 , 'locale' , locale , 'LC_MESSAGES' , '%s.po' % domain )"
call the method DjangoSafeDumper.add_representer with arguments decimal.Decimal and DjangoSafeDumper.represent_decimal.,call method var0 var3 with arguments decimal var4 and var0 var6 ,"DjangoSafeDumper . add_representer ( decimal . Decimal , DjangoSafeDumper . represent_decimal )","var0 . var3 ( decimal . var4 , var0 . var6 )"
substitute hlen for dklen.,substitute var0 for var1 ,dklen = hlen,var1 = var0
dklen is None.,var0 is var1 ,dklen = None,var0 = var1
substitute the length of defaults for dlen.,substitute length of defaults for var0 ,dlen = len ( defaults or [ ] ),var0 = len ( defaults or [ ] )
DNS_NAME is a instance of CachedDnsName class.,var0 is instance of var1 class.,DNS_NAME = CachedDnsName ( ),var0 = var1 ( )
"convert first 2 elements of django.VERSION into a strings, join them together, separated by a '.', substitute the result for docs_version.","convert first 2 elements of var0 var1 into strings, join var2 together, separated by var3, substitute result for var4 ",docs_version = '%d.%d' % django . VERSION [ : 2 ],var4 = '%d.%d' % var0 . var1 [ : 2 ]
docs_version is a string 'dev'.,var0 is string var1.,docs_version = 'dev',var0 = var1
"call the function split_domain_port with an argument host, assign the result to domain and port, respectively.","call function var0 with argument host, assign result to domain and port, respectively.","domain , port = split_domain_port ( host )","domain , port = var0 ( host )"
call the decode function with argument string 'ascii' on the return value of the method domain.encode with argument string 'idna' substitute the result for domain.,call decode function with argument string var0 on return value of method var1 with argument string var2 substitute result for domain.,domain = domain . encode ( 'idna' ) . decode ( 'ascii' ),domain = var1 ( 'idna' ) . decode ( var0 )
"call the method domain.encode with an argument string 'idna', call the method decode on the result with an argument string 'ascii',","call method var0 with argument string var1, call method decode on result with argument string var2,",domain = domain . encode ( 'idna' ) . decode ( 'ascii' ),domain = var0 ( var1 ) . decode ( 'ascii' )
"call the method domain_part.encode with an argument string 'idna', on the return value call the decode method with string 'ascii' as argument, substitute the result for domain_part.","call method var0 encode with argument string var3, on return value call decode method with string var4 as argument, substitute result for var0 ",domain_part = domain_part . encode ( 'idna' ) . decode ( 'ascii' ),var0 = var0 . encode ( var3 ) . decode ( 'ascii' )
"|^([\001-\010\013\014\016-\037!#-\[\]-\177]|\\[\001-\011\013\014\016-\177])*""$)"" and re.IGNORECASE, substitute the result for user_regex.    call the re.compile function with 2 arguments: raw string '(?:[A-Z0-9](?:[A-Z0-9-]{0,247}[A-Z0-9])?\.)+(?:[A-Z]{2,6}|[A-Z0-9-]{2,}(?<!-))$',","|^([\001-\010\013\014\016-\037!#-\[\]-\177]|\\[\001-\011\013\014\016-\177])*""$)"" and re.IGNORECASE, substitute the result for user_regex.    call the re.compile function with 2 arguments: raw string '(?:[A-Z0-9](?:[A-Z0-9-]{0,247}[A-Z0-9])?\.)+(?:[A-Z]{2,6}|[A-Z0-9-]{2,}(?<!-))$',","domain_regex = re . compile ( r'(?:[A-Z0-9](?:[A-Z0-9-]{0,247}[A-Z0-9])?\.)+(?:[A-Z]{2,6}|[A-Z0-9-]{2,}(?<!-))$' , re . IGNORECASE )","domain_regex = re . compile ( r'(?:[A-Z0-9](?:[A-Z0-9-]{0,247}[A-Z0-9])?\.)+(?:[A-Z]{2,6}|[A-Z0-9-]{2,}(?<!-))$' , re . IGNORECASE )"
domain_whitelist is a list containing string 'localhost'.,var0 is list containing string var1.,domain_whitelist = [ 'localhost' ],var0 = [ var1 ]
domains is a tuple with element string 'django'.,domains is tuple with element string var0.,"domains = ( 'django' , )","domains = var0 ,"
domains is a tuple with 2 elements: strings 'djangojs' and 'django'.,domains is tuple with 2 elements: strings var0 and var1.,"domains = ( 'djangojs' , 'django' )","domains = var0 , 'django'"
"for every i and k in enumerated values of self._cache, if i is divisible by self._cull_frequency, append k to doomed list.",for every i and k in enumerated values of var0 if i is divisible by var1 append k to doomed list.,"doomed = [ k for ( i , k ) in enumerate ( self . _cache ) if i % self . _cull_frequency == 0 ]","doomed = [ k for i , k in enumerate ( var0 ) if i % var1 == 0 ]"
"call the method callback.rindex with an argument character '.', substitute the result for dot.","call method var0 with argument character var1, substitute result for dot.",dot = callback . rindex ( '.' ),dot = var0 ( var1 )
substitute length of package for dot.,substitute length of package for dot.,dot = len ( package ),dot = len ( package )
"call the method package.rindex with 3 arguments: string '.', integer 0 and dot, substitute the result for dot.","call method var0 with 3 arguments: string var1, integer 0 and dot, substitute result for dot.","dot = package . rindex ( '.' , 0 , dot )","dot = var0 ( var1 , 0 , dot )"
"compile a regex from raw string '^\.\s*(\w+)\s*', substitute it for DOT_PATTERN.","compile var0 from raw string var1, substitute it for var2 ",DOT_PATTERN = re . compile ( r'^\.\s*(\w+)\s*' ),var2 = re . compile ( '^\\.\\s*(\\w+)\\s*' )
"call the function re.compile with an argument raw string '\S', substitute it for dot_re.","call function var0 with argument raw string var1, substitute it for var2 ",dot_re = re . compile ( r'\S' ),var2 = var0 ( '\\S' )
"tuple with 2 elements: '[' and ']', tuple with 2 elements: '&lt' and '&gt', tuple with 2 elements: '""' and '""',   and tuple with 2 elements: '\'' and '\''.   DOTS is a list with 6 elements: strings '&middot;', '*', '\u2022', '&#149;', '&bull;' and '&#8226;'.","tuple with 2 elements: var0 and var3, tuple with 2 elements: var4 and var12, tuple with 2 elements: var14 and var14 var16 and tuple with 2 elements: var18' and var18' var22 is list with 6 elements: strings var23, var25, var26, var28, '&bull;var1&#8226;'.","DOTS = [ '&middot;' , '*' , '\u2022' , '&#149;' , '&bull;' , '&#8226;' ]","var22 = [ var23 , '*' , '•',  ' #149;',  ' bull;',  ' #8226;'] "
"increment doublecolon_len by integer 1,","increment var0 by integer 1,",doublecolon_len += 1,var0 += 1
doublecolon_len is an integer 0.,doublecolon_len is integer 0.,doublecolon_len = 0,doublecolon_len = 0
doublecolon_len is integer 0.,doublecolon_len is integer 0.,doublecolon_len = 0,doublecolon_len = 0
doublecolon_start is an integer -1.,var0 is integer var1 ,doublecolon_start = - 1,var0 = - 1
doublecolon_start is integer -1.,var0 is integer -1.,doublecolon_start = - 1,var0 = - 1
substitute index for doublecolon_start.,substitute index for var0 ,doublecolon_start = index,var0 = index
"call the method date.weekday, use the result as an key to obtain the value from the days dictionary, substitute it for dow.","call method var0 use result as key to obtain value from days dict, substitute it for var1 ",dow = days [ date . weekday ( ) ],var1 = days [ date . weekday ( ) ]
increment doy by integer 1.,increment var0 by integer 1.,doy += 1,var0 += 1
"append self.data.day to the value under the self.data.month key of the self.year_days dictionary, substitute the result for doy.","append var0 to value under var1 key of self var3 dict, substitute result for var4 ",doy = self . year_days [ self . data . month ] + self . data . day,var4 = self . var3 [ var1 ] + var0
hard copy list self.dicts to duplicate.dicts.,hard copy list var0 to var1 ,duplicate . dicts = self . dicts [ : ],var1 = var0 [ : ]
"call the function copy with an argument self.render_context, substitute the result for duplicate.render_context.",call function copy with argument self var1 substitute result for duplicate var1 ,duplicate . render_context = copy ( self . render_context ),duplicate . var1 = copy ( self . var1 )
"call the function copy with an argument base class of the class BaseContext, substitute the result for duplicate.",call function copy with argument base class of class var0 substitute result for duplicate.,"duplicate = copy ( super ( BaseContext , self ) )","duplicate = copy ( super ( var0 , self ) )"
"call the the method __copy__ from the base class of the class Context, substitute the result for duplicate.",call the method var0 from base class of class var1 substitute result for duplicate.,"duplicate = super ( Context , self ) . __copy__ ( )","duplicate = super ( var1 , self ) . var0 ( )"
"call the method sys.exc_info, substitute the result without the first element for e and tb.",call method sys var1 substitute result var2 first element for e and tb.,"e , tb = sys . exc_info ( ) [ 1 : ]","e , tb = sys . var1 ( ) [ 1 : ]"
"e.args is a tuple containing string ""Could not load %(app_label)s.%(object_name)s(pk=%(pk)s): %(error_msg)s,","var0 is tuple containing string ""Could not load %(app_label)s.%(object_name)s(pk=%(pk)s): var5 ","e . args = ( 'Could not load %(app_label)s.%(object_name)s(pk=%(pk)s): %(error_msg)s' % { 'app_label' : obj . object . _meta . app_label , 'object_name' : obj . object . _meta . object_name , 'pk' : obj . object . pk , 'error_msg' : force_text ( e ) } , )","var0 = 'var1 not load %(var3)s.%(var4)s(pk=%(pk)s): %(var6)s' % { 'var3' : obj . object . _meta . var3 , 'var4' : obj . object . _meta . var4 , 'pk' : obj . object . pk , 'var6' : force_text ( e ) } ,"
"e.args is a tuple containing string ""Problem installing fixture '%s': %s"", where '%s' is replaced with fixture_file, e.",var0 is tuple containing string var2 var4 var3 is replaced with var5 var1,"e . args = ( 'Problem installing fixture '%s': %s' % ( fixture_file , e ) , )","var0 = 'Problem installing fixture var3: %s' % ( var5 , e ) ,"
"e.args is a tuple, containing 1 element: string ""Problem installing fixtures: %s"", where '%s' is replaced with e.","var0 is tuple, containing 1 element: string var2 var3 var4 is replaced with var1","e . args = ( 'Problem installing fixtures: %s' % e , )","var0 = 'Problem installing fixtures: %s' % e ,"
substitute node.source for e.django_template_source.,substitute var0 for e var2 ,e . django_template_source = node . source,e . var2 = var0
substitute self.source for e.django_template_source.,substitute var0 for e var2 ,e . django_template_source = self . source,e . var2 = var0
substitute source for e.django_template_source.,substitute source for e var1 ,e . django_template_source = source,e . var1 = source
substitute token.source for e.django_template_source.,substitute var0 for e var2 ,e . django_template_source = token . source,e . var2 = var0
"get the value under the e.code key of the self.error_messages dictionary, substitute the result for e.message.","get value under var0 key of self var2 dict, substitute result for var3 ",e . message = self . error_messages [ e . code ],var3 = self . var2 [ var0 ]
"replace '%s' in string ', HTTP response headers must be in %s format' for charset, append it to e.reason.",replace var0 in string var1 for var3 append it to var4 ,"e . reason += ', HTTP response headers must be in %s format' % charset",var4 += var1 % var3
"e is an instance of TemplateSyntaxError class, created with an argument msg.","e is instance of var0 class, created with argument msg.",e = TemplateSyntaxError ( msg ),e = var0 ( msg )
"otherwise if result of the call to the function _len with an argument cache is greater than or equal to maxsize,",otherwise if result of call to function var0 with argument cache is greater var1 or equal to var2 ,elif _len ( cache ) >= maxsize :,elif var0(cache) >= var2:
"otherwise if _locs_ is None,",otherwise if var0 is var1 ,elif _locs_ is None :,elif var0 is var1:
"otherwise if ':' is not contained in middle and result of the function simple_email_re.match called with an argument middle,","otherwise if var0 is not contained in middle and result of function var1 match called with argument middle,",elif ':' not in middle and simple_email_re . match ( middle ) :,elif var0 not in middle and var1.match(middle):
"otherwise if '\\' is contained in path,","otherwise if var0 is contained in path,",elif '\\' in path :,elif var0 in path:
"otherwise if '=' is contained in part,","otherwise if var0 is contained in part,",elif '=' in part :,elif var0 in part:
"if 'HTTP_HOST' is contained in self.META,",if var0 is contained in self var1 ,elif 'HTTP_HOST' in self . META :,elif var0 in self.var1:
"if cc contains item 'public' and kwargs contains item 'private',","if cc contains item var0 and var1 contains item var2,",elif 'public' in cc and 'private' in kwargs :,elif var0 in cc and 'private' in var1:
"otherwise, if first and the last character of attrvalue are '\' charter  or first and last character of attrvalue are '""' character,","otherwise, if first and last character of var1 are var3 charter or first and last character of var1 are var4 character,",elif ( attrvalue [ : 1 ] == '\'' == attrvalue [ - 1 : ] or  attrvalue [ : 1 ] == ''' == attrvalue [ - 1 : ] ) :,elif(var1 [: 1] == '\'' == var1 [- 1:] or  var1 [: 1] == var3' == var1 [- 1:]):
"otherwise if action equals to string 'apply_success',","otherwise if action equals to string var0,",elif action == 'apply_success' :,elif action == var0:
otherwise if action equals to string 'unapply_start'.,otherwise if action equals to string var0.,elif action == 'unapply_start' :,elif action == var0:
"otherwise if action equals to string ""unapply_success"".",otherwise if action equals to string var0.,elif action == 'unapply_success' :,elif action == 'unapply_success':
"if second from the end element of args equals a string 'as',","if second from end element of var0 equals string var1,",elif args [ - 2 ] == 'as' :,elif var0 [- 2] == var1:
"otherwise if first element of second row of args equals a string '1',","otherwise if first element of second row of var0 equals string var1,",elif args [ 1 ] [ 0 ] == '1' :,elif var0 [1] [0] == var1:
"otherwise if first element of second row of args equals a string '3',","otherwise if first element of second row of var0 equals string var1,",elif args [ 1 ] [ 0 ] == '3' :,elif var0 [1] [0] == var1:
"otherwise if first element of second row of args equals a string '4',","otherwise if first element of second row of var0 equals string var1,",elif args [ 1 ] [ 0 ] == '4' :,elif var0 [1] [0] == var1:
"otherwise if second element of args equals a string '304',","otherwise if second element of var0 equals string var1,",elif args [ 1 ] == '304' :,elif var0 [1] == var1:
"otherwise if second element of args equals a string '404',","otherwise if second element of var0 equals string var1,",elif args [ 1 ] == '404' :,elif var0 [1] == var1:
"otherwise if auto_id is true,","otherwise if var0 is true,",elif auto_id :,elif var0:
"otherwise if autoescape is true,","otherwise if var0 is true,",elif autoescape :,elif var0:
"otherwise if basetype equals a string 'message' and subtype equals a string 'rfc822',","otherwise if var0 equals string var1 and var2 equals string var3,",elif basetype == 'message' and subtype == 'rfc822' :,elif var0 == var1 and var2 == 'rfc822':
"otherwise if bmatch is true,","otherwise if var0 is true,",elif bmatch :,elif var0:
"filesize_number_format with result of division of bytes by KB as an argument, substitute the result for value.   otherwise if bytes is smaller than GB,","var0 with result of division of bytes by var1 as argument, substitute result for value var2 otherwise if bytes is smaller var3 var4 ",elif bytes < GB :,elif bytes < var4:
"replace '%(size)d with bytes, substitute the result for value.   otherwise if bytes is smaller than MB,","replace '%(size)d with bytes, substitute result for value var1 otherwise if bytes is smaller var2 var3 ",elif bytes < MB :,elif bytes < var3:
"filesize_number_format with result of division of bytes by GB as an argument, substitute the result for value.   otherwise if bytes is smaller than PB,","var0 with result of division of bytes by var1 as argument, substitute result for value var2 otherwise if bytes is smaller var3 var4 ",elif bytes < PB :,elif bytes < var4:
"filesize_number_format with result of division of bytes by MB as an argument, substitute the result for value.   otherwise if bytes is smaller than TB,","var0 with result of division of bytes by var1 as argument, substitute result for value var2 otherwise if bytes is smaller var3 var4 ",elif bytes < TB :,elif bytes < var4:
"otherwise if func is callable object,","otherwise if var0 is callable object,",elif callable ( func ) :,elif callable(var0):
"otherwise if func is callable,","otherwise if var0 is callable,",elif callable ( func ) :,elif callable(var0):
"otherwise if ch equals a string 'P',","otherwise if var0 equals string var1,",elif ch != 'P' :,elif var0!= var1:
"otherwise if ch equals a string ':',","otherwise if var0 equals string var1,",elif ch == ':' :,elif var0 == var1:
"otherwise if ch equals a string '.',","otherwise if var0 equals string var1,",elif ch == '.' :,elif var0 == var1:
"otherwise if ch equals a string '(',","otherwise if ch equals a string '(',",elif ch == '(' :,elif ch == '(' :
"otherwise if ch equals a string ')',","otherwise if ch equals a string ')',",elif ch == ')' :,elif ch == ')' :
"otherwise if ch equals a string '[',","otherwise if ch equals a string '[',",elif ch == '[' :,elif ch == '[' :
"otherwise if ch equals a string '|',","otherwise if var0 equals string var1,",elif ch == '|' :,elif var0 == var1:
"otherwise if ch equals a string '$',","otherwise if var0 equals string var1,",elif ch == '$' :,elif var0 == var1:
"otherwise if ch equals a string '^',","otherwise if var0 equals string '^',",elif ch == '^' :,elif var0 == '^':
"otherwise if ch is contained in string ""*?+{"",","otherwise if var0 is contained in string ""*?+{"",",elif ch in '*?+{' :,elif var0 in '*?+{':
"otherwise id change equals to I18N_MODIFIED,",otherwise id change equals to var0 ,elif change == I18N_MODIFIED :,elif change == var0:
"otherwise if cahr equals a string '\\',","otherwise if var0 equals string var1,",elif char == '\\' :,elif char == '\\':
"otherwise if char is contained in string 'bEFMmNn',","otherwise if char is contained in string var0,",elif char in 'bEFMmNn' :,elif char in var0:
"otherwise if char is contained in string 'dj',","otherwise if char is contained in string var0,",elif char in 'dj' :,elif char in var0:
"otherwis if char is contained in string 'Yy',","var0 if char is contained in string var1,",elif char in 'Yy' :,elif char in var1:
"otherwise if child.nodeType equals to child.ELEMENT_NODE,",otherwise if child var1 equals to child var2 ,elif child . nodeType == child . ELEMENT_NODE :,elif child.var1 == child.var2:
"otherwise if closing_tag is true,","otherwise if var0 is true,",elif closing_tag :,elif var0:
"otherwise if cls._delegate_bytes is true,","otherwise if var0 is true,",elif cls . _delegate_bytes :,elif var0:
"otherwise if cmatches is true,","otherwise if var0 is true,",elif cmatches :,elif var0:
"where '%s' are replaced by sel.file and errors, respectively.   if command.verbosity is greater than integer 0,","var0 var1 are replaced by var2 and errors, respectively var3 if var4 is greater var5 integer 0,",elif command . verbosity > 0 :,elif var4 > 0:
"otherwise if common_prefix is None,",otherwise if var0 is var2 ,elif common_prefix is None :,elif var0 is var2:
"otherwise if count is greater than integer 1,","otherwise if count is greater var0 integer 1,",elif count > 1 :,elif count > 1:
"otherwise if first element of cwords is contanied in tuple with 8 entries: 'dumpdata', 'sql', 'sqlall', 'sqlclear', 'sqlcustom',","otherwise if first element of var0 is var1 in tuple with 8 entries: var2, var3, var5, var7, var9,","elif cwords [ 0 ] in ( 'dumpdata' , 'sql' , 'sqlall' , 'sqlclear' ,  'sqlcustom' , 'sqlindexes' , 'sqlsequencereset' , 'test' ) :","elif var0 [0] in(var2, 'sql', 'sqlall', 'sqlclear',  'sqlcustom', 'sqlindexes', 'sqlsequencereset', 'test'):"
"with an argument curr, sort the result and join it in a list separated with blank spaces, print it to the standard output.   otherwise if first element of cwords is contanied in subcommands and is not equal to string 'help',","with argument var0 sort result and join it in list separated with blank spaces, print it to standard output var1 otherwise if first element of var2 is var3 in var4 and is not equal to string var5,",elif cwords [ 0 ] in subcommands and cwords [ 0 ] != 'help' :,elif var2 [0] in var4 and var2 [0]!= var5:
"otherwise if dirname equals string 'locale',","otherwise if var0 equals string var1,",elif dirname == 'locale' :,elif var0 == var1:
"otherwise if disable_existing is true,","otherwise if var0 is true,",elif disable_existing :,elif var0:
"otherwise if domains equals a string django' and, file_ext equals '.py' or file_ext is contained in command.extensions,",otherwise if domains equals string djangovar1.py' or file_ext is contained in var3 ,elif domain == 'django' and ( file_ext == '.py' or file_ext in command . extensions ) :,elif domain == 'var0' and(file_ext == 'var2' or file_ext in var3):
"otherwise if f.unique is true,","otherwise if var0 is true,",elif f . unique :,elif var0:
"otherwise if field.rel is true and field.rel is an instance of the models.ManyToOneRel object,","otherwise if var0 is true and var0 is instance of models var1 object,","elif field . rel and isinstance ( field . rel , models . ManyToOneRel ) :","elif var0 and isinstance(var0, models.var1):"
"otherwise, if field.rel is true and field.rel is an instance of models.ManyToOneRel,","otherwise, if var0 is true and var0 is instance of models var1 ","elif field . rel and isinstance ( field . rel , models . ManyToOneRel ) :","elif var0 and isinstance(var0, models.var1):"
"otherwise if field.required is true,","otherwise if var0 is true,",elif field . required :,elif var0:
"otherwise if field is contained in the result of the call to the method self._errors.keys,",otherwise if field is contained in result of call to method var0 ,elif field in self . _errors . keys ( ) :,elif field in var0():
"otherwise if field is contained in self.fields,",otherwise if field is contained in var0 ,elif field in self . fields :,elif field in var0:
"otherwise if field_type equals a string 'IntegerField(' and connection.features.can_introspect_autofield is false,","otherwise if field_type equals a string 'IntegerField(' and connection.features.can_introspect_autofield is false,",elif field_type == 'IntegerField(' and not connection . features . can_introspect_autofield :,elif field_type == 'IntegerField(' and not connection . features . can_introspect_autofield :
"otherwise if call to the method finder.find_module with an argument name evaluates to true,","otherwise if call to method finder var1 with argument name evaluates to true,",elif finder . find_module ( name ) :,elif finder.var1(name):
"otherwise if form.has_changed method evaluates to true,","otherwise if form var1 method evaluates to true,",elif form . has_changed ( ) :,elif form.var1():
"otherwise if first element of g equals a string ""'"",","otherwise if first element of g equals string var0,",elif g [ 0 ] == ''' :,elif g [0] == ''':
"otherwise, get the 'alters_data' attribute of current object, if it exists and is true,","otherwise, get var0 attribute of current object, if it exists and is true,","elif getattr ( current , 'alters_data' , False ) :","elif getattr(current, var0, False):"
"otherwise, if pattern has an '_callback' attribute.","otherwise, if pattern has var0 attribute.","elif hasattr ( pattern , '_callback' ) :","elif hasattr(pattern, var0):"
"otherwise if query has an attribute 'items',","otherwise if query has attribute var0,","elif hasattr ( query , 'items' ) :","elif hasattr(query, var0):"
"otherwise, if s has an attribute '__unicode__',","otherwise, if s has attribute var0,","elif hasattr ( s , '__unicode__' ) :","elif hasattr(s, var0):"
"otherwise if i is smaller than list_length decremented by one,","otherwise if i is smaller var0 var1 var2 by one,",elif i < list_length - 1 :,elif i < var1 - 1:
"otherwise if, if value under the 'unique' key of the dictionary contained under the column_name key of the dictionary indexes is true,","otherwise if, if value under var0 key of dict contained under var1 key of dict indexes is true,",elif indexes [ column_name ] [ 'unique' ] :,elif indexes [var1] [var0]:
"else if timeout converted into an integer equals to integer 0,","else if var0 converted into integer equals to integer 0,",elif int ( timeout ) == 0 :,elif int(var0) == 0:
"otherwise if intrans is true,","otherwise if var0 is true,",elif intrans :,elif var0:
otherwise if message is an instance of the list type.,otherwise if message is instance of list type.,"elif isinstance ( message , list ) :","elif isinstance(message, list):"
"otherwise if o is an instance of datetime.date object,","otherwise if o is instance of var0 object,","elif isinstance ( o , datetime . date ) :","elif isinstance(o, var0):"
"otherwise if o is an instance of datetime.time object,","otherwise if o is instance of var0 object,","elif isinstance ( o , datetime . time ) :","elif isinstance(o, var0):"
"otherwise if o is an instance of decimal.Decimal object,","otherwise if o is instance of decimal var0 object,","elif isinstance ( o , decimal . Decimal ) :","elif isinstance(o, decimal.var0):"
"otherwise if obj is an instance of EscapeData,",otherwise if var0 is instance of var1 ,"elif isinstance ( obj , EscapeData ) :","elif isinstance(var0, var1):"
"otherwise if rhs is an instance of SafeBytes,",otherwise if rhs is instance of var0 ,"elif isinstance ( rhs , SafeBytes ) :","elif isinstance(rhs, var0):"
"otherwise if self.object is an instance of the models.base.ModelBase class,","otherwise if var0 is instance of var1 var2 class,","elif isinstance ( self . obj , models . base . ModelBase ) :","elif isinstance(self.obj, var1.var2):"
"otherwise is template is six.string_types instance,","otherwise is template is six var1 instance,","elif isinstance ( template , six . string_types ) :","elif isinstance(template, six.var1):"
"otherwise if timezone is an instance of six.string_types and pytz is not None,",otherwise if var0 is instance of six var2 and var3 is not var4 ,"elif isinstance ( timezone , six . string_types ) and pytz is not None :","elif isinstance(var0, six.var2) and var3 is not var4:"
"return the result.   otherwise if value is an instance of decimal.Decimal, float or six.integer_types,",return result var0 otherwise if value is instance of decimal var1 float or six var3 ,"elif isinstance ( value , ( decimal . Decimal , float ) + six . integer_types ) :","elif isinstance(value,(decimal.var1, float) + six.var3):"
"otherwise if value is an instance of datetime.date,",otherwise if value is instance of var0 ,"elif isinstance ( value , datetime . date ) :","elif isinstance(value, var0):"
"otherwise if value is an instance of datetime.datetime,",otherwise if value is instance of var0 ,"elif isinstance ( value , datetime . datetime ) :","elif isinstance(value, var0):"
"otherwise if value is an instance of datetime.time,",otherwise if value is instance of var0 ,"elif isinstance ( value , datetime . time ) :","elif isinstance(value, var0):"
"otherwise if vale is an instance of value,","otherwise if vale is instance of value,","elif isinstance ( value , six . string_types ) :","elif isinstance(value, six.string_types):"
"formated with value under 'target' key of config dictionary and e.   otherwise if klass is a subclass of logging.handlers.SMTPHandler and string 'mailhost' is contained in config,",formated with value under var0 key of var1 dict and var3 otherwise if var5 is subclass of var6 var7 and string var9 is contained in var1 ,"elif issubclass ( klass , logging . handlers . SMTPHandler ) and 'mailhost' in config :","elif issubclass(var5, var6.var7) and var9 in var1:"
"substitute the result for value under 'mailhost' key of config dictionary.   otherwise if klass is subclass of logging.handlers.SysLogHandler class, and string 'address' is contained in config,","substitute result for value under var0 key of var1 dict var3 otherwise if var4 is subclass of var5 var6 class, and string var8 is contained in var1 ","elif issubclass ( klass , logging . handlers . SysLogHandler ) and 'address' in config :","elif issubclass(var4, var5.var6) and var8 in var1:"
"formated with values under the 'author_email' and 'author_name' keys of item dictionary.   otherwise if value under the ""author_email"" key of the item dictionary is true,","formated with values under var0 and var1 keys of item dict var4 otherwise if value under var5 key of item dict is true,",elif item [ 'author_email' ] :,elif item [var0]:
"otherwise if value under the ""author_name"" key of the item dictionary is true,","otherwise if value under var0 key of item dict is true,",elif item [ 'author_name' ] :,elif item ['author_name']:
"data, encoding and errors as a string 'replace'.   otherwise if item_type equals FILE,","data, encoding and errors as string var0 var1 otherwise if var2 equals var4 ",elif item_type == FILE :,elif var2 == var4:
"otherwise if k equals a string 'bg',","otherwise if k equals string var0,",elif k == 'bg' :,elif k == var0:
"otherwise if length of app_labels is greater than integer 1,","otherwise if length of var0 is greater var1 integer 1,",elif len ( app_labels ) > 1 :,elif len(var0) > 1:
"otherwise if length of bits equals integer 6,","otherwise if length of bits equals integer 6,",elif len ( bits ) == 6 :,elif len(bits) == 6:
"fk_name, parent_model._meta.app_label and parent_model._meta.object_name, respectively.   otherwise if length of fks_to_parent is zero,","var0 var1 _meta var4 and var1 _meta var6 respectively var7 otherwise if length of var8 is zero,",elif len ( fks_to_parent ) == 0 :,elif len(var8) == 0:
"otherwise if length of fks_to_parent is zero,","otherwise if length of var0 is zero,",elif len ( fks_to_parent ) == 0 :,elif len(var0) == 0:
"otherwise if length of key equals integer 1 and type of first element of key is contained in fasttypes,",otherwise if length of key equals integer 1 and type of first element of key is contained in var0 ,elif len ( key ) == 1 and type ( key [ 0 ] ) in fasttypes :,elif len(key) == 1 and type(key [0]) in var0:
"otherwise, length of options.args is lesser than integer 1,","otherwise, length of var0 is lesser var1 integer 1,",elif len ( options . args ) < 1 :,elif len(var0) < 1:
"otherwise if maxsize is None,",otherwise if var0 is var1 ,elif maxsize is None :,elif var0 is var1:
"otherwise if, first element of message_context is equal to ""'"",","otherwise if, first element of var0 is equal to var2,",elif message_context [ 0 ] == ''' :,elif var0 [0] == ''':
"otherwise if first element of message_context equals to character ""'"",","otherwise if first element of var0 equals to character var2,",elif message_context [ 0 ] == ''' :,elif var0 [0] == ''':
"otherwise if msg is true,","otherwise if msg is true,",elif msg :,elif msg:
"otherwise if msg and visible_issue_count are true,","otherwise if msg and var0 are true,",elif msg and visible_issue_count :,elif msg and var0:
else if name is equal to 'abcd',else if name is equal to var0,elif name == 'abcd':,elif name == var0:
otherwise if name equals a string 'id'.,otherwise if name equals string var0.,elif name == 'id' :,elif name == var0:
"otherwise if name starts with a string 'string',","otherwise if name starts with string var0,",elif name == 'string' :,elif name == var0:
"otherwise if name is contained in lib.filters,",otherwise if name is contained in var0 ,elif name in lib . filters :,elif name in var0:
"otherwise if name is not None and compile_function is None,",otherwise if name is not var0 and var2 is var0 ,elif name is not None and compile_function is None :,elif name is not var0 and var2 is var0:
"otherwise if name is not None and compile_function is not None,",otherwise if name is not var0 and var2 is not var0 ,elif name is not None and compile_function is not None :,elif name is not var0 and var2 is not var0:
"otherwise if name is not None and filter_func is None,",otherwise if name is not var0 and var2 is var0 ,elif name is not None and filter_func is None :,elif name is not var0 and var2 is var0:
"otherwise if name is not None and filter_func is not None,",otherwise if name is not var0 and var2 is not var0 ,elif name is not None and filter_func is not None :,elif name is not var0 and var2 is not var0:
"otherwise if base_url does not ends with '/' character,","otherwise if var0 does not ends with var1 character,",elif not base_url . endswith ( '/' ) :,elif not var0.endswith(var1):
"otherwise if formfield_callback is not callable object,","otherwise if var0 is not callable object,",elif not callable ( formfield_callback ) :,elif not callable(var0):
"alternatively, if six.PY3 is true check if message does not have an attribute 'message', if six.PY3 is false, check if message doesnt have an attribute 'code', perform the following,","alternatively, if six var0 is true check if message does not have attribute var4, if six var0 is false, check if message doesnt have attribute var5, perform following,","elif not hasattr ( message , 'message' if six . PY3 else 'code' ) :","elif not hasattr(message, var4 if six.var0 else 'code'):"
"otherwise if content is not an instance of Message class,","otherwise if content is not instance of var0 class,","elif not isinstance ( content , Message ) :","elif not isinstance(content, var0):"
"otherwise if end is not an instance of string type,","otherwise if end is not instance of string type,","elif not isinstance ( end , str ) :","elif not isinstance(end, str):"
"otherwise if file_name is not an instance of six.string_types and call to the function is_iterable with an argument file_name,",otherwise if var0 is not instance of six var3 and call to function var4 with argument var0 ,"elif not isinstance ( file_name , six . string_types ) and is_iterable ( file_name ) :","elif not isinstance(var0, six.var3) and var4(var0):"
"otherwise if sep is not an instance of string type,","otherwise if sep is not instance of string type,","elif not isinstance ( sep , str ) :","elif not isinstance(sep, str):"
"otherwise if value is not an instance of list ot tuple type,","otherwise if value is not instance of list var0 tuple type,","elif not isinstance ( value , ( list , tuple ) ) :","elif nvar0 isinstance(value,(list, tuple)):"
"otherwise if vale is not an instance of ConvertingList and value is an instance of list type,","otherwise if vale is not instance of var0 and value is instance of list type,","elif not isinstance ( value , ConvertingList ) and isinstance ( value , list ) :","elif not isinstance(value, var0) and isinstance(value, list):"
"otherwise if vale is not an instance of ConvertingTuple and value is an instance of tuple type,","otherwise if vale is not instance of var0 and value is instance of tuple type,","elif not isinstance ( value , ConvertingTuple ) and isinstance ( value , tuple ) :","elif not isinstance(value, var0) and isinstance(value, tuple):"
"if values under the 'socket', 'host' and 'port' keys of the options dictionary are false,","if values under var0, var1 and var2 keys of options dict are false,",elif not options [ 'socket' ] and not options [ 'host' ] and not options [ 'port' ] :,elif not options [var0] and not options ['host'] and not options ['port']:
"otherwise if self.file_path file path doesnt exists,","otherwise if self var1 file path doesnt exists,",elif not os . path . exists ( self . file_path ) :,elif not os.path.exists(self.var1):
"and code set to string 'required.   otherwise if self.required is false and value is false,","and code set to string 'required var0 otherwise if var1 is false and value is false,",elif not self . required and not value :,elif not var1 and not value:
"otherwise if ns is not contained in app_list,",otherwise if ns is not contained in var0 ,elif ns not in app_list :,elif ns not in var0:
"where '%s' is replaced with first element of bits.   otherwise if options equals 'only',","var0 var1 is replaced with first element of bits var2 otherwise if options equals var3,",elif option == 'only' :,elif option == var3:
"otherwise if value under the key 'all' of the options dictionary is true,","otherwise if value under key var0 of options dict is true,",elif options [ 'all' ] :,elif options [var0]:
"otherwise if value under the 'app_label' key of options dictionary is true,","otherwise if value under var0 key of options dict is true,",elif options [ 'app_label' ] :,elif options [var0]:
"otherwise if value under the 'method' key of optins dictionary equals to string 'thread' or 'threaded',","otherwise if value under var0 key of var1 dict equals to string var2 or var3,","elif options [ 'method' ] in ( 'thread' , 'threaded' ) :","elif options [var0] in('thread', 'threaded'):"
"convert the value under the 'daemonize' key of options dictionary to lowercase, if it equals to string 'false', 'no' or 'f',","convert value under var0 key of options dict to lowercase, if it equals to string var1, var2 or var3,","elif options [ 'daemonize' ] . lower ( ) in ( 'false' , 'no' , 'f' ) :","elif options [var0].lower() in('false', 'no', 'f'):"
"of the options dictionary and value under the 'port' key of the options dictionary converted into an integer.   if value under the 'socket' key of the options dictionary is true and values under the 'host' and 'port' keys of the options dictionary are false,","of options dict and value under var0 key of options dict converted into integer var2 if value under var3 key of options dict is true and values under var4 and var0 keys of options dict are false,",elif options [ 'socket' ] and not options [ 'host' ] and not options [ 'port' ] :,elif options ['socket'] and not options ['host'] and not options [var0]:
"where '%s' are replaced with name and param.   otherwise if param is contained in kwargs,",var0 var1 are replaced with name and var2 otherwise if var2 is contained in var5 ,elif param in kwargs :,elif var2 in var5:
"append the result to pieces.   otherwise if piece is true,","append result to pieces var0 otherwise if piece is true,",elif piece :,elif piece:
"otherwise if pluralmatch is true,","otherwise if var0 is true,",elif pluralmatch :,elif var0:
"otherwise if prefix is not equal to common_prefix,",otherwise if prefix is not equal to var0 ,elif prefix != common_prefix :,elif prefix!= var0:
"otherwise if safe_input is true,","otherwise if var0 is true,",elif safe_input :,elif var0:
"otherwise if self._delegate_text is true,","otherwise if var0 is true,",elif self . _delegate_text :,elif var0:
"otherwise if self._meta.exclude is true and field is not contained in self._meta.exclude,",otherwise if var0 is true and field is not contained in var0 ,elif self . _meta . exclude and field in self . _meta . exclude :,elif var0 and field in var0:
"otherwise if self._meta.fields is true and field is not contained in self._meta.fields,",otherwise if var0 is true and field is not contained in var0 ,elif self . _meta . fields and field not in self . _meta . fields :,elif var0 and field not in var0:
"if self.argv, without the first element is contained in a tuple with 2 entries: a list containing a string '--help',","if var0 var1 first element is contained in tuple with 2 entries: list containing string var2,","elif self . argv [ 1 : ] in ( [ '--help' ] , [ '-h' ] ) :","elif var0 [1:] in([var2], ['-h']):"
"otherwise if self.fixture_object_count equals self.loaded_object_count,",otherwise if self var1 equals self var3 ,elif self . fixture_object_count == self . loaded_object_count :,elif self.var1 == self.var3:
"otherwise if value under the 'CONTENT_TYPE' key of hte self.META dictionary starts with 'application/x-www-form-urlencoded',","otherwise if value under var0 key of var1 self var2 dict starts with var4,","elif self . META . get ( 'CONTENT_TYPE' , '' ) . startswith ( 'application/x-www-form-urlencoded' ) :","elif self.var2.get(var0, '').startswith('application/x-www-form-urlencoded'):"
"otherwise if self.name exists and self.name file path exists,","otherwise if var0 exists and var0 file path exists,",elif self . name and os . path . exists ( self . name ) :,elif var0 and os.path.exists(var0):
"otherwise if self.nodelist_false is true,","otherwise if self var1 is true,",elif self . nodelist_false :,elif self.var1:
"otherwise if self.reason_phrase is None,",otherwise if self var1 is var2 ,elif self . reason_phrase is None :,elif self.var1 is var2:
"otherwise if self.required is true,","otherwise if var0 is true,",elif self . required :,elif var0:
"otherwise if self.use_ipv6 is true and _fqdn is false,","otherwise if self var1 is true and var2 is false,",elif self . use_ipv6 and not _fqdn :,elif self.var1 and not var2:
"otherwise if self.verbosity equals integer 3,","otherwise if var0 equals integer 3,",elif self . verbosity == 3 :,elif var0 == 3:
"otherwise if self.verbosity is greater than integer 0,","otherwise if var0 is greater var1 integer 0,",elif self . verbosity > 0 :,elif var0 > 0:
"otherwise if self.waiting_readers is not equal to integer 0,","otherwise if self var1 is not equal to integer 0,",elif self . waiting_readers != 0 :,elif self.var1!= 0:
"otherwise is settings.USE_TI is true,","otherwise is settings var0 is true,",elif settings . USE_TZ :,elif settings.USE_TZ:
"otherwise if call the method simple_url_2_re.match with an argument middle evaluates to true,","otherwise if call method var0 match with argument middle evaluates to true,",elif simple_url_2_re . match ( middle ) :,elif var0.match(middle):
"otherwise if size is less than length of self.buffer,",otherwise if size is less var0 length of var1 ,elif size < len ( self . buffer ) :,elif size < len(var1):
"otherwise if level converted into a string equals level,","otherwise if level converted into string equals level,",elif str ( level ) == level :,elif str(level) == level:
"with 2 arguments: self.prog_name and first element of options.args.   otherwise if subcommand equals a string 'version' or self.argv, without the first element equals a list containing a string '--version'",with 2 arguments: self var1 and first element of var2 otherwise if var4 equals string var5 or var6 var7 first element equals list containing string var8,elif subcommand == 'version' or self . argv [ 1 : ] == [ '--version' ] :,elif var4 == var5 or var6 [1:] == ['--version']:
"otherwise if t.contents equals a string 'comment',","otherwise if var0 equals string var1,",elif t . contents == 'comment' :,elif var0 == var1:
"otherwise if t.token_type equals TOKEN_COMMENT,",otherwise if t var1 equals var2 ,elif t . token_type == TOKEN_COMMENT :,elif t.var1 == var2:
if t.token_type == TOKEN_TEXT:,if t var1 == TOKEN_TEXT:,elif t . token_type == TOKEN_TEXT :,elif t.var1 == var2:
"formated with t.contents, filemsg and t.lineno.   otherwise if t.token_type equals TOKEN_VAR,",formated with var0 var1 and var2 otherwise if t var5 equals var6 ,elif t . token_type == TOKEN_VAR :,elif t.var5 == var6:
"otherwise if t.token_type equals TOKEN_VAR,",otherwise if t var1 equals var2 ,elif t . token_type == TOKEN_VAR :,elif t.var1 == var2:
"otherwise if template_tuple is None,",otherwise if var0 is var2 ,elif template_tuple is None :,elif var0 is var2:
"else if timeout equals to integer 0,","else if var0 equals to integer 0,",elif timeout == 0 :,elif var0 == 0:
"and token.   otherwise if token.token_type equals integer 1,","and token var0 otherwise if token var2 equals integer 1,",elif token . token_type == 1 :,elif token.var2 == 1:
"otherwise if token.token_type equals integer 2,","otherwise if token var1 equals integer 2,",elif token . token_type == 2 :,elif token.var1 == 2:
"and elements of token_string from second to second last element wiht the whitespaces striped from the both sides.   otherwise if token_string starts with BLOCK_TAG_START,",and elements of var0 from second to second last element var4 var5 striped from both sides var6 otherwise if var0 starts with var7 ,elif token_string . startswith ( BLOCK_TAG_START ) :,elif var0.startswith(var7):
"otherwise if token_string starts with COMMENT_TAG_START,",otherwise if var0 starts with var2 ,elif token_string . startswith ( COMMENT_TAG_START ) :,elif var0.startswith(var2):
"otherwise if total_forms is grater than self.max_num is grater or equal to integer 0,","otherwise if var0 is grater var1 self var3 is grater or equal to integer 0,",elif total_forms > self . max_num >= 0 :,elif var0 > self.var3 >= 0:
"otherwise if, type of s doesnt equal to six.text_type,","otherwise if, type of s doesnt equal to six var1 ",elif type ( s ) != six . text_type :,elif type(s)!= six.var1:
"otherwise if tzinfo is not None,",otherwise if var0 is not var1 ,elif tzinfo is not None :,elif var0 is not var1:
"otherwise if value under the key key of the user_settings dictionary is not equal to the value under the key key of the default_settings dictionary,","otherwise if value under key key of var0 dict is not equal to value under key key of var1 dict,",elif user_settings [ key ] != default_settings [ key ] :,elif var0 [key]!= var1 [key]:
"otherwise if value is boolean False, string 'False' or string '0'","otherwise if value is boolean False, string var0 or string var1","elif value in ( False , 'False' , '0' ) :","elif value in(False, var0, '0'):"
"otherwise if value is boolean False,",otherwise if value is boolean var0 ,elif value is False :,elif value is var0:
"otherwise if var is None,",otherwise if var is var0 ,elif var is None :,elif var is var0:
"created with an argument constant_arg, append it to args.   otherwise if var_arg is true,","created with argument var0 append it to var1 otherwise if var3 is true,",elif var_arg :,elif var3:
else if x is equal to 5,else if x is equal to 5,elif x == 5:,elif x == 5:
else if x is equal to y,else if x is equal to y,elif x == y:,elif x == y:
"substitute the '%s' with table and 3 elements of a list: b64encoded, exp and key, respectively.   if not,","substitute var0 with table and 3 elements of list: var1 var2 and key, respectively var3 if not,",else :,else:
"It looks like this project was generated using Django 1.5 or earlier. You should ensure your tests are all running & behaving   as expected. See https://docs.djangoproject.com/en/dev/releases/1.6/#new-test-runner for more information."",   obj set to None and id set to a string '1_6.W001', put the result into a list and return it.   if not,","It looks like var0 project was generated using var1 1.5 or earlier var3 var5 ensure var6 tests are all running var7 behaving as expected var11 var12 for more information."" var8 var13 set to var14 and id set to string var15, put result into list and return it var8 if not,",else :,else:
"Django 1.7 changed the global defaults for the MIDDLEWARE_CLASSES. django.contrib.sessions.middleware.SessionMiddleware,   django.contrib.auth.middleware.AuthenticationMiddleware, and django.contrib.messages.middleware.MessageMiddleware were removed   from the defaults. If your project needs these middleware then you should configure this setting., obj set to None, and   id set to a string '1_7.W001', put the result into a list and return it.   if not,","var0 1.7 changed global defaults for var1 var3 var5 var11 var12 and var14 var15 were removed from defaults var17 var19 project needs var21 var4 then var20 var22 configure var23 setting var24 set to var25 and id set to string var26, put result into list and return it var7 if not,",else :,else:
if not.,if not.,else :,else:
"subtype and charset, respectively.   if not,","var0 and var1 respectively var2 if not,",else :,else:
"and evaluated boolean expression s_opt.nargs doesnt equal to integer 0, for every s_opt in parser._actions,   only if s_opt.option_strings is true,   if not,","and evaluated boolean expression var0 nargs doesnt equal to integer 0, for every var0 in var4 only if var0 var8 is true var5 if not,",else :,else:
"if the key doesnt exists use sys.stderr as an argument.   if not,","if key doesnt exists use var0 as argument var1 if not,",else :,else:
"substitute the resulting list for app_config.   if not,","substitute resulting list for var0 if not,",else :,else:
"for every app_config in return value of the method apps.get_app_configs, only if app_config.models_module is not None,   and app_config is not contained in excluded_apps.   if not,","for every var0 in return value of method apps var6 only if var0 var8 is not var9 and var0 is not contained in var12 if not,",else :,else:
"This will IRREVERSIBLY DESTROY all data currently in the %r database, and return each table to an empty state.   ""Are you sure you want to do this?""Type 'yes' to continue, or 'no' to cancel: "", where '%s' is replaced with value under the 'NAME' key of the connection.settings_dict dictionary.   if not,","var0 will var1 var2 all data currently in var3 database, and return each table to empty state var4 ""Are you sure you want to do this?""Type var9 to continue, or var11 to cel: "" var12 var13 is replaced with value under var15 key of connection var18 dict var4 if not,",else :,else:
"otherwise, value under the 'decimal_places' key of the field_params is integer 5.   if not","otherwise, value under var0 key of var1 is integer 5 var3 if not",else :,else:
"where '%d' is replaced with self.loaded_object_count and self.fixture_count, respectively.   if not,","var0 var1 is replaced with self var3 and self var5 respectively var6 if not,",else :,else:
"replace '%s' with: elements of last element of parts joined into a string and last element of parts.   if not,","replace var0 with: elements of last element of parts joined into string and last element of parts var1 if not,",else :,else:
"separated by newline, substitute it for msgs.   if not,","separated by var0 substitute it for msgs var1 if not,",else :,else:
"write it to self.stdout.   if not,","write it to var0 if not,",else :,else:
"if it does append it to targets list.   if not,","if it does append it to targets list var0 if not,",else :,else:
"if set is empty return string '(none)' instead, append the previous to the string "" Apply all migrations: "",   use the previous string as the argument for the call to the method self.style.MIGRATE_LABEL,   use the result as an argument for the call to the method self.stdout.write.   if not,","if set is empty return string var0 instead, append previous to string var1 var3 use previous string as argument for call to method var6 var7 use result as argument for call to method var8 var3 if not,",else :,else:
"use the it as an argument for the call to the self.style.MIGRATE_LABEL method, use the result to cal the self.stdout.write method.   if not,","use it as argument for call to var1 var2 method, use result to var0 var3 method var4 if not,",else :,else:
"string joined from invalided_apps list and separated with string ', '.   if not,","string joined from var0 list and separated with string var2 var3 if not,",else :,else:
"in not,","in not,",else :,else:
"if not, substitute used_name for guessed_filename.   if not,","if not, substitute var0 for var1 if not,",else :,else:
"with unpacked list value as an argument, return the pk field of the result.   if not,","with unpacked list value as argument, return var0 field of result var1 if not,",else :,else:
"smart_text function, return the result.   if not,","var0 function, return result var1 if not,",else :,else:
"unpacked list field_value as an argument, substitute the result for value of under the field.attname key of the data dictionary.   if not,","unpacked list var0 as argument, substitute result for value of under field.attname key of data dict var1 if not,",else :,else:
"field.attname of the data dictionary.   if not,","field.attname of data dict var0 if not,",else :,else:
"with unpacked list field_value as an argument, substitute the field pk of the result for obj_pk.   if not,","with unpacked list var0 as argument, substitute field var1 of result for var2 if not,",else :,else:
"and an empty dictionary, substitute the result for httpd_cls.   if not,","and empty dict, substitute result for var0 if not,",else :,else:
"for 'maxSpare', value under the key 'minspare' of options dictionary converted to an integer for 'minSpare',   and value under the key 'maxchildren' of options dictionary converted to an integer, for 'maxThreads'.   if not,","for var0, value under key var1 of options dict converted to integer for var3 var6 and value under key var8 of options dict converted to integer, for var10 var6 if not,",else :,else:
"where string '%s' is replaced by lookup_view and mod_name, respectively.   if not,","var0 string var1 is replaced by var2 and var4 respectively var6 if not,",else :,else:
"substitute it for candidate_subs.   if not,","substitute it for var0 if not,",else :,else:
"respectively replace '%s' with key and elements of the resolved_path joined into a string, separated by ':'.   if not,","respectively replace var0 with key and elements of var1 joined into string, separated by var3 var4 if not,",else :,else:
"convert the result to a lowercase string, substitute it for step.   if not,","convert result to lowercase string, substitute it for step var0 if not,",else :,else:
"substitute the result for last element of output.   if not,","substitute result for last element of output var0 if not,",else :,else:
"substitute the result for value under the field key of the self._errors dictionary.   if not,","substitute result for value under field key of var0 dict var1 if not,",else :,else:
"ManagementForm data is missing or has been tampered with' and code as a string 'missing_management_form'.   if not,","var0 data is missing or has been tampered withvar1missing_management_form' var4 if not,",else :,else:
"and self.absolute_max, return the result.   if not,","and self var0 return result var1 if not,",else :,else:
"label set to return value of the function _ called with an string 'Order', initial set to index incremented by 1,   and required as boolean False.   if not,","label set to return value of function var0 called with string var1, initial set to index var2 by 1 var3 and required as boolean var5 if not,",else :,else:
"substitute the result for value under the f.name key of data dictionary.   if not,","substitute result for value under var0 key of data dict var1 if not,",else :,else:
"where '%(field)s' is replaced with first element of unique_check, return the result.   if not,","var0 var1 is replaced with first element of var2 return result var4 if not,",else :,else:
"widget is an instance of HiddenInput class.   if not,","widget is instance of var0 class var1 if not,",else :,else:
"model._meta.app_label, model._meta.object_name, fk_name, respectively.   if not,","model._meta var1 model._meta var3 var4 respectively var6 if not,",else :,else:
"model._meta.app_label, model._meta.object_name, parent_model._meta.app_label, parent_model._meta.object_name, respectively.   if not,","model._meta var1 model._meta var4 var6 _meta var1 var6 _meta var4 respectively var10 if not,",else :,else:
"RemovedInDjango19Warning and stacklevel set to integer 2.   if not,","var0 and var1 set to integer 2 var2 if not,",else :,else:
"and sub_widgets set to return value of the function sub_ul_renderer.render, append the result to output.   if not,","and var0 set to return value of function var1 render, append result to output var3 if not,",else :,else:
"self._files is an instance of class MultiValueDict.   if not,","var0 is instance of class var1 if not,",else :,else:
"return value of the function quote called with arguments k and safe, and with return value of the function quote called with arguments v and safe.   if not,","return value of function quote called with arguments k and safe, and with return value of function quote called with arguments v and safe var0 if not,",else :,else:
"convert the result into a string and substitute it for value.   if not,","convert result into string and substitute it for value var0 if not,",else :,else:
"substitute it for max_age, if not, max_age is integer 0.   if not,","substitute it for var0 if not var0 is integer 0 var2 if not,",else :,else:
"substitute the result for value.   if not,","substitute result for value var0 if not,",else :,else:
"substitute the result for new_obj.   if not,","substitute result for var0 if not,",else :,else:
"if else,","if else,",else :,else:
"where '%s' are replaced with name and param.   if not,","var0 var1 are replaced with name and var2 if not,",else :,else:
"substitute the result for i-th element of lines.   if not,","substitute result for i-th element of lines var0 if not,",else :,else:
"filesize_number_format with result of division of bytes by TB as an argument, substitute the result for value.   if not,","var0 with result of division of bytes by var1 as argument, substitute result for value var2 if not,",else :,else:
"and csrf_token, return the result.   if not,","and var0 return result var1 if not,",else :,else:
"for every var in self._varlist.   if not,","for every var in var0 if not,",else :,else:
"where '%s' is replaced with taglib and e.   if not,","var0 var1 is replaced with var2 and var3 if not,",else :,else:
"use the result as the argument for the call to the function hashlib.sha1, call the hexdigest method on the result,   join template_name and previous final result into a string, separated with '-', return it.   if not,","use result as argument for call to function var0 call var1 method on result var2 join var4 and previous final result into string, separated with var6, return it var2 if not,",else :,else:
"and result of the function force_bytes called with an argument val2, return the result.   if not,","and result of function var0 called with argument var1 return result var2 if not,",else :,else:
"iterations and dklen, return the result.   if not,","iterations and var0 return result var1 if not,",else :,else:
"return result converted into an integer.   if not,","return result converted into integer var0 if not,",else :,else:
"substitute the result for s.   if not,","substitute result for var0 if not,",else :,else:
"and self.ns for ""xmlns"".   if not,","and var0 for var1 var2 if not,",else :,else:
"format the string  '<p>%s</p>' with the result, for every p in paras, substitute list of results for paras.   if not,","format string var2 with result, for every p in paras, substitute list of results for paras var0 if not,",else :,else:
"substitute the result for i-th element of words.   if not,","substitute result for i-th element of words var0 if not,",else :,else:
"convert_charrefs set to convert_charrefs and dictionary **kwargs as the arguments.   if not,","var0 set to var0 and dict var1 as arguments var2 if not,",else :,else:
"substitute the result for offset.   if not,","substitute result for offset var0 if not,",else :,else:
"otherwise return boolean False.   if not,","otherwise return boolean var0 if not,",else :,else:
"if nor,",if var0 ,else :,else:
"substitute the result for proxy.   if not,","substitute result for proxy var0 if not,",else :,else:
"determine whether string is singular or plural.', where '%s' is replaced with number.   if not,","determine var0 string is singular or plural.var1%s' is replaced with number var3 if not,",else :,else:
"convert slice of language string from (p+1)-th index to the end to uppercase, append it to the previous result, return the resulting string.   if not,","convert slice of language string from (p+1)-th index to end to uppercase, append it to previous result, return resulting string var1 if not,",else :,else:
"covert to lowercase language elements from (p+1)-th index to the end, append it to the previous result, return it.   if not,","covert to lowercase language elements from (p+1)-th index to end, append it to previous result, return it var1 if not,",else :,else:
"covert to uppercase language elements from (p+1)-th index to the end, append it to the previous result, return it.   if not,","covert to uppercase language elements from (p+1)-th index to end, append it to previous result, return it var1 if not,",else :,else:
"covert to lowercase locale elements from (p+1)-th index to the end, append it to the previous result, return it.   if not,","covert to lowercase locale elements from (p+1)-th index to end, append it to previous result, return it var1 if not,",else :,else:
"called with 2 arguments: singular and trimmed and result of the function join_tokens called with 2 arguments: plural and trimmed,   write the result to out.   if not,","called with 2 arguments: singular and trimmed and result of function var0 called with 2 arguments: plural and trimmed var1 write result to out var1 if not,",else :,else:
"called with 2 arguments: singular and trimmed, write the result to out.   if not,","called with 2 arguments: singular and trimmed, write result to out var0 if not,",else :,else:
"if the 'fake' key doesnt exists set fake to boolean False, as arguments.   call the method emit_post_migrate_signal with created_models, self.verbosity, self.interactive and connection.alias as arguments.",if var0 key doesnt exists set fake to boolean var1 as arguments var2 call method var3 with var5 var7 var8 and var9 as arguments.,"emit_post_migrate_signal ( created_models , self . verbosity , self . interactive , connection . alias )","var3 ( var5 , var7 , var8 , var9 )"
"extend all_models list with the result.   call the function emit_post_migrate_signal with 4 arguments: all_models converted into a set, verbosity, interactive and database.","extend var0 list with result var2 call function var3 with 4 arguments: var0 converted into set, verbosity, interactive and database.","emit_post_migrate_signal ( set ( all_models ) , verbosity , interactive , database )","var3 ( set ( var0 ) , verbosity , interactive , database )"
"call the emit_pre_migrate_signal with create_models, self.verbosity, self.interactive. connection.alias as arguments.",call var0 with var1 var3 var4 var5 as arguments.,"emit_pre_migrate_signal ( create_models , self . verbosity , self . interactive , connection . alias )","var0 ( var1 , var3 , var4 , var5 )"
"create list of first remaining elements of chunk, substitute it for emitting.","create list of first remaining elements of chunk, substitute it for emitting.",emitting = chunk [ : remaining ],emitting = chunk [ : remaining ]
empty is an instance of object class.,empty is instance of object class.,empty = object ( ),empty = object ( )
incremental is boolean False.   EMPTY_DICT is an empty dictionary.,incremental is boolean var0 var2 is empty dict.,EMPTY_DICT = { },var2 = { }
"en_byte is a string """"",var0 is string var1,en_byte = '',var0 = ''
en_byte is a random element of the list chars between 0 and the lenght of chars - 1,var0 is random element of list chars between 0 and var1 of chars - 1,"en_byte = chars [ random . randint ( 0 , len ( chars ) - 1 ) ]","var0 = chars [ random . randint ( 0 , len ( chars ) - 1 ) ]"
set enc to the reversed hexadecimal value of dec,set var0 to reversed hexadecimal value of dec,enc = hex ( dec ) [ : : - 1 ],var0 = hex ( dec ) [ : : - 1 ]
"encode is an lambda function with 2 arguments k and v, return value is the result of the function urlencode, called with an argument:","encode is lambda function with 2 arguments k and v, return value is result of function var0 called with argument:","encode = lambda k , v : urlencode ( { k : v } )","encode = lambda k , v : var0 ( { k : v } )"
append '\\x'' to encoded,append var0' to encoded,encoded += '\\x',encoded += '\\x'
"concatenate the string '\\x' and the conversion to hex of a random integer between 1 and 255, then append it to encoded","concatenate string var0 and conversion to hex of random integer between 1 and 255, then append it to encoded","encoded += '\\x%02x' % random . randint ( 1 , 255 )","encoded += '\\x%02x' % random . randint ( 1 , 255 )"
concatenate the string '\\x' and the conversion to string the value en_byte and append it to encoded,concatenate string var0 and conversion to string value var1 and append it to encoded,encoded += '\\x%s' % en_byte,encoded += '\\x%s' % var1
append '\n' to encoded,append var0 to encoded,encoded += '\n',encoded += '\n'
"Convert the variable y to a hexadecimal. Concatenate the result with the string ','and add the result to the variable encoded",Convert variable y to hexadecimal var0 result with string var1and add result to variable encoded,"encoded += '%02x, ' % y","encoded += '%02x, ' % y"
append string '%02x' modulo x to encoded,append string var0 var1 x to encoded,encoded += '%02x' % x,encoded += var0 % x
append to encoded the conversion to hex of xor_rot,append to encoded conversion to hex of var0,encoded += '%02x' % xor_rot,encoded += '%02x' % var0
append string '%02x' modulo repeat to encoded,append string var0 var1 repeat to encoded,encoded += '%02x' % repeat,encoded += var0 % repeat
put the double qoutes around encoded.,put double var0 around encoded.,encoded = ''' + encoded + ''',encoded = ' + encoded + '
"in encoded, replace all the occurrences of unicode character ""\\054"" with ',' character and ""\\073"" with ';' characters.","in encoded, replace all occurrences of var0 character var1 with var2 character and var3 with var5 characters.","encoded = encoded . replace ( ';' , '\\073' ) . replace ( ', ' , '\\054' )","encoded = encoded . replace ( var5 , '\\073' ) . replace ( ', ' , '\\054' )"
encoded is the result of the or operation between val1 and val2,encoded is result of or operation between var0 and var1,encoded = val1 | val2,encoded = var0 | var1
"Convert the value of z to a hexadecimal then add it to the variable encoded1 followed by the string ', '",Convert value of z to hexadecimal then add it to variable var0 followed by string var1,"encoded1 += '%02x, ' % z","var0 += '%02x, ' % z"
"Convert the value of z bitwise and 0xaa to a hexadecimal then add it to the variable encoded1 followed by the string ','",Convert value of z var0 and var1 to hexadecimal then add it to variable var2 followed by string var3,"encoded1 += '%02x, ' % ( z & 0xaa )","var2 += '%02x, ' % ( z & var1 )"
"Convert the variable w to a hexadecimal. Concatenate the result with the string ',' and add the result to the variable encoded1",Convert variable w to hexadecimal var0 result with string var1 and add result to variable var2,"encoded1 += '%02x, ' % w","var2 += '%02x, ' % w"
"Convert the value of z to a hexadecimal then add it to the variable encoded1 followed by the string ', '",Convert value of z to hexadecimal then add it to variable var0 followed by string var1,"encoded1 += '%02x, ' % z","var0 += '%02x, ' % z"
"Convert the variable z to a hexadecimal. Concatenate the result with the string ',' and add the result to the variable encoded1",Convert variable z to hexadecimal var0 result with string var1 and add result to variable var2,"encoded1 += '%02x, ' % z","var2 += '%02x, ' % z"
"convert the value z to hex, concatenate the result with ',' and append it to the string encoded1","convert value z to hex, concatenate result with var0 and append it to string var1","encoded1 += '%02x, ' % z","var1 += '%02x, ' % z"
"convert (8 +(128 + z)) to hexadecimal, concatenate the result with the string ',' and append it to the string encoded1","convert (8 +(128 + z)) to hexadecimal, concatenate the result with the string ',' and append it to the string encoded1","encoded1 += '%02x, ' % ( 8 + ( 128 + z ) )","encoded1 += '%02x, ' % ( 8 + ( 128 + z ) )"
"Convert the value of z bitwise and 0x1f to a hexadecimal, concatenate the result with the string ',' and then add it to the variable encoded1","Convert value of z var0 and var1 to hexadecimal, concatenate result with string var2 and then add it to variable var3","encoded1 += '%02x, ' % ( z & 0x1f )","var3 += '%02x, ' % ( z & var1 )"
"convert (z-7) to hexadecimal, concatenate the result with the string ',' and append it to the string encoded1","convert (z-7) to hexadecimal, concatenate result with string var0 and append it to string var1","encoded1 += '%02x, ' % ( z - 7 )","var1 += '%02x, ' % ( z - 7 )"
"Convert the value of z to a hexadecimal, concatenate the result with the string ',' and then add it to the variable encoded1","Convert value of z to hexadecimal, concatenate result with string var0 and then add it to variable var1","encoded1 += '%02x, ' % z","var1 += '%02x, ' % z"
concatenate the string '0x' with the hexadecimal conversion of 0xff and append the result to the string encoded1,concatenate string var0 with hexadecimal conversion of var1 and append result to string var2,"encoded1 += '0x%02x, ' % 0xff","var2 += '0x%02x, ' % var1"
concatenate the string '0x' with the hexadecimal conversion of tmp and append the result to the string encoded1,concatenate string var0 with hexadecimal conversion of var1 and append result to string var2,"encoded1 += '0x%02x, ' % tmp","var2 += '0x%02x, ' % var1"
"encoded1 is the concatenation of the string ""0x"" with the hexadecimal conversion of the lenght of the array of bytes of str1",var0 is concatenation of string var1 with hexadecimal conversion of var2 of array of bytes of var3,"encoded1 = '0x%02x, ' % len ( bytearray ( str1 ) )","var0 = '0x%02x, ' % len ( bytearray ( var3 ) )"
"append string '%02x,' modulo repeat to encoded2",append string var0 var1 repeat to var2,"encoded2 += '%02x, ' % repeat","var2 += '%02x, ' % repeat"
"append string '%02x,' modulo x to encoded2",append string var0 var1 x to var2,"encoded2 += '%02x, ' % x","var2 += '%02x, ' % x"
append to encoded2 the conversion to hex of xor_rot,append to var0 conversion to hex of var1,"encoded2 += '%02x, ' % xor_rot","var0 += '%02x, ' % var1"
append string '0x' to the string encoded2,append string var0 to string var1,encoded2 += '0x',var1 += var0
"concatenate the string '\\x' and the conversion to hex of a random integer between 1 and 255, then append it to encoded2","concatenate string var0 and conversion to hex of random integer between 1 and 255, then append it to var1","encoded2 += '0x%02x, ' % random . randint ( 1 , 255 )","var1 += '0x%02x, ' % random . randint ( 1 , 255 )"
concatenate the string '\\x' and the conversion to string the value en_byte and append it to encoded2,concatenate string var0 and conversion to string value var1 and append it to var3,"encoded2 += '0x%s, ' % en_byte","var3 += '0x%s, ' % var1"
append string '\\x' to encoded3,append string var0 to var1,encoded3 += '\\x',var1 += '\\x'
append string '0x' to encoded3,append string var0 to var1,encoded3 += '0x',var1 += var0
append '0x' to encoded3,append var0 to var1,encoded3 += '0x',var1 += var0
"encoded3 is a string """"",var0 is string var1,encoded3 = '',var0 = ''
"evaluate the function getdefaultlocale from the module locale, if second element of return value exists assign it to encoding,","evaluate function var0 from module locale, if second element of return value exists assign it to encoding,",encoding = locale . getdefaultlocale ( ) [ 1 ] or 'ascii',encoding = locale . var0 ( ) [ 1 ] or 'ascii'
encoding is None.,encoding is var0 ,encoding = None,encoding = var0
"define lambda function that returns self.file.encoding field, use it as an argument for property function, put the result in encoding.","define lambda function var0 returns var1 field, use it as argument for property function, put result in encoding.",encoding = property ( lambda self : self . file . encoding ),encoding = property ( lambda self : var1 )
substitute self._encoding for encoding.,substitute var0 for encoding.,encoding = self . _encoding,encoding = var0
"if self.encoding exists substitute it for encoding, if not substitute settings.DEFAULT_CHARSET for encoding.","if var0 exists substitute it for encoding, if not substitute settings var1 for encoding.",encoding = self . encoding or settings . DEFAULT_CHARSET,encoding = var0 or settings . var1
substitute settings.DEFAULT_CHARSET for encoding.,substitute settings var0 for encoding.,encoding = settings . DEFAULT_CHARSET,encoding = settings . var0
decrement end by one.,decrement end by one.,end -= 1,end -= 1
substitute index for end.,substitute index for end.,end = index,end = index
"remove 'end' key from the kwargs dictionary, if it exists substitute it for end, if not end is None.","remove var0 key from var1 dict, if it exists substitute it for end, if not end is var2 ","end = kwargs . pop ( 'end' , None )","end = var1 . pop ( var0 , var2 )"
substitute length of s for end.,substitute length of s for end.,end = len ( s ),end = len ( s )
substitute length of text for end.,substitute length of text for end.,end = len ( text ),end = len ( text )
substitute space for end.,substitute space for end.,end = newline,end = newline
"slice the rawdata string from the k-th to the endpos-th index, remove the whitespaces from the start and the end of the string, substitute it for end.","slice var0 string from k-th to endpos-th index, remove var3 from start and end of string, substitute it for end.",end = rawdata [ k : endpos ] . strip ( ),end = var0 [ k : var2 ] . strip ( )
"is an even number,   call the method s.find with 2 arguments: bytes string ';' and end incremented by one, substitute the result for end.","is even number var0 call method var1 with 2 arguments: bytes string var2 and end var3 by one, substitute result for end.","end = s . find ( b';' , end + 1 )","end = var1 ( b';' , end + 1 )"
"call the method s.find with an argument bytes string ';', substitute the result for end.","call method var0 with argument bytes string var1, substitute result for end.",end = s . find ( b';' ),end = var0 ( b';' )
substitute i for end_index.,substitute i for var0 ,end_index = i,var0 = i
end_index is None.,var0 is var1 ,end_index = None,var0 = var1
where '%r' is replaced with first element of bits.   append first element of bits to 'end'. substitute the result for end_tag.,var0 var1 is replaced with first element of bits var2 append first element of bits to var3. substitute result for var4 ,end_tag = 'end' + bits [ 0 ],var4 = var3 + bits [ 0 ]
end_text_pos is equal to integer 0.,var0 is equal to integer 0.,end_text_pos = 0,var0 = 0
substitute pos for end_text_pos.,substitute pos for var0 ,end_text_pos = pos,var0 = pos
"call the method parser.next_token, substitute the result for endblock.",call method parser var1 substitute result for var2 ,endblock = parser . next_token ( ),var2 = parser . var1 ( )
"substitute the result for block_re.   call the function re.compile with an argument raw string ""^\s*endblocktrans$"", substitute the result for endblock_re.","substitute result for var0 call function var3 with argument raw string var4, substitute result for var5 ",endblock_re = re . compile ( r'''^\s*endblocktrans$''' ),endvar0 = var3 ( '^\\s*endblocktrans$' )
"call the function endblock_re.match with an argument t.contents, substitute the result for endbmatch.",call function var0 match with argument var2 substitute result for var3 ,endbmatch = endblock_re . match ( t . contents ),var3 = var0 . match ( var2 )
if ending is None substitute self.ending for ending.,if ending is var0 substitute var1 for ending.,ending = self . ending if ending is None else ending,ending = var1 if ending is var0 else ending
"call the method self.check_for_whole_start_tag with i as an argument, substitute result for the endpos.","call method self var1 with i as argument, substitute result for var2 ",endpos = self . check_for_whole_start_tag ( i ),var2 = self . var1 ( i )
"substitute the result for starttag_re.   call the function re.compile with an argument string '</%s>' formated with tags_re, substitute the result for endtag_re.",substitute result for var0 call function var3 with argument string var4 formated with var5 substitute result for var7 ,endtag_re = re . compile ( '</%s>' % tags_re ),var7 = var3 ( var4 % var5 )
EndToken is an instance of EndToken class.,var0 is instance of var0 class.,EndToken = EndToken ( ),var0 = var0 ( )
call the function ensure_echo_on.,call function var0 ,ensure_echo_on ( ),var0 ( )
entropy is the cast to integer of the first argument,entropy is cast to integer of first argument,entropy = int ( sys . argv [ 1 ] ),entropy = int ( sys . argv [ 1 ] )
"replace every occurrence of string '\r\n' in message with '\n', replace every occurrence of string '\r',","replace every occurrence of string var0 in message with var1, replace every occurrence of string var2,","eol_message = message . replace ( str ( '\r\n' ) , str ( '\n' ) ) . replace ( str ( '\r' ) , str ( '\n' ) )","eol_message = message . replace ( str ( '\r\n' ) , str ( '\n' ) ) . replace ( str ( '\r' ) , str ( '\n' ) )"
"error is an dictionary with an initial entry error.error_list for filed if true, or NON_FIELD_ERRORS if not.","error is dict with initial entry error var1 for filed if true, or var2 if not.",error = { field or NON_FIELD_ERRORS : error . error_list },error = { ( field or var2 ) : error . var1 }
ERROR is integer 40.,ERROR is integer 40.,ERROR = 40,ERROR = 40
substitute error.error_dict for error.,substitute error var1 for error.,error = error . error_dict,error = error . var1
substitute i-th element of self.data for error.,substitute i-th element of var0 for error.,error = self . data [ i ],error = var0 [ i ]
"append string "".moves.urllib_error"" to __name__, use it as an key to get the value from the sys.modules dictionary, substitute it for error.","append string var0 to var1 use it as key to get value from var2 dict, substitute it for error.",error = sys . modules [ __name__ + '.moves.urllib_error' ],error = var2 [ var1 + '.moves.urllib_error' ]
error is an instance of ValidationError created with an argument error.,error is instance of var0 created with argument error.,error = ValidationError ( error ),error = var0 ( error )
substitute TemplateSyntaxError for error_class.,substitute var0 for var1 ,error_class = TemplateSyntaxError,var1 = var0
substitute ValueError for error_class.,substitute var0 for var1 ,error_class = ValueError,var1 = var0
call the method extend with an argument error_list on the return value of the method error_dict.setdefault called with 2 arguments: field and an empty list.,call method extend with argument var0 on return value of method var1 setdefault called with 2 arguments: field and empty list.,"error_dict . setdefault ( field , [ ] ) . extend ( error_list )","var1 . setdefault ( field , [ ] ) . extend ( var0 )"
call the method extend with an argument error_list on the return value of the method error_dict.setdefault called with 2 arguments: NON_FIELD_ERRORS and an empty list.,call method extend with argument var0 on return value of method var2 setdefault called with 2 arguments: var3 and empty list.,"error_dict . setdefault ( NON_FIELD_ERRORS , [ ] ) . extend ( self . error_list )","var2 . setdefault ( var3 , [ ] ) . extend ( self . var0 )"
error_messages is an empty dictionary.   substitute error_message for value under the 'invalid' key of the error_messages dictionary.,var1 is empty dict var5 substitute var0 for value under var6 key of var1 dict.,error_messages [ 'invalid' ] = error_message,var1 [ var6 ] = var0
"get the value under the 'error_messages' key of the kwargs dictionary, if it exists substitute it for error_messages, if not,","get value under var0 key of var1 dict, if it exists substitute it for error_messages, if not,",error_messages = kwargs . get ( 'error_messages' ) or { },error_messages = var1 . get ( var0 ) or { }
substitute value under the NON_FIELD_ERRORS key of opts.error_messages dictionary for error_messages.,substitute value under var0 key of opts var2 dict for var2 ,error_messages = opts . error_messages [ NON_FIELD_ERRORS ],var2 = opts . var2 [ var0 ]
"get the value under the field key of self.fields dictionary, substitute error_messages field of the result for error_messages.","get value under field key of var0 dict, substitute var1 field of result for var1 ",error_messages = self . fields [ field ] . error_messages,var1 = var0 [ field ] . var1
"append string "" Got this from the '%s' variable."" to error_msg, where '%s is replaced with self.parent_name.token.",append string var0 to var1 var2 '%s is replaced with self var4 token.,error_msg += ' Got this from the '%s' variable.' % self . parent_name . token,var1 += ' Got this from the '%s' variable.' % self.var4.token
"error_msg is a string ""Invalid template name in 'extends' tag: %r."", where '%s' is replaced with parent.",error_msg is string var0 var1 var2 is replaced with parent.,error_msg = 'Invalid template name in 'extends' tag: %r.' % parent,error_msg = 'Invalid template name in 'extends' tag: %r.' % parent
"err_msg is a string ""Tried %s"", where '%s' is replaced with tried.",var0 is string var1 var2 var3 is replaced with tried.,error_msg = 'Tried %s' % tried,error_msg = 'Tried %s' % tried
"error_msg is a string ""Your TEMPLATE_DIRS setting is empty. Change it to point to at least one template directory."".",error_msg is string var0.,error_msg = 'Your TEMPLATE_DIRS setting is empty. Change it to point to at least one template directory.',error_msg = ( 'Your TEMPLATE_DIRS setting is empty.Change it to point to at least one template directory.' )
"get the value under the e.errno key of the ERRORS dictionary, substitute it for error_text.","get value under var0 key of var1 dict, substitute it for var2 ",error_text = ERRORS [ e . errno ],var2 = var1 [ var0 ]
"convert e to a string, substitute it for error_text.","convert e to string, substitute it for var0 ",error_text = str ( e ),var0 = str ( e )
"call the Error function with 4 arguments, string ""%s was connected to the '%s' signal with a lazy reference to the '%s' sender,","call var0 function with 4 arguments, string ""%s was connected to var1 signal with lazy reference to var1 sender,","errors . append (  Error (  '%s was connected to the '%s' signal '  'with a lazy reference to the '%s' sender, '  'which has not been installed.' % (  description , name , '.' . join ( reference )  ) ,  obj = receiver . __module__ ,  hint = None ,  id = 'signals.E001'  )  )","errors . append ( var0 ( '%s was connected to the var1 signal with a lazy reference to the var1 sender, which has not been installed.' % ( description , name , '.' . join ( reference ) ) , obj = receiver . __module__ , hint = None , id = 'signals.E001' ) )"
"append to errors list a dictionary created with 2 etries, if escape_html is true, return value of the function escape","append to errors list dict created with 2 var0 if var1 is true, return value of function escape","errors . append ( { 'message' : escape ( message ) if escape_html else message , 'code' : error . code or '' , } )","errors . append ( { 'message' : escape ( message ) if var1 else message , 'code' : error . code or '' } )"
"get the value under the 'incomplete' key of the field.error_messages dictionary, append it to errors.","get value under var0 key of field var2 dict, append it to errors.",errors . append ( field . error_messages [ 'incomplete' ] ),errors . append ( field . var2 [ var0 ] )
"call the method self.get_date_error_message with an argument date_check, append the result to errors.",call method self var1 with argument var2 append result to errors.,errors . append ( self . get_date_error_message ( date_check ) ),errors . append ( self . var1 ( var2 ) )
"call the method self.get_unique_error_message with an argument unique_check, append the result to errors.",call method self var1 with argument var2 append result to errors.,errors . append ( self . get_unique_error_message ( unique_check ) ),errors . append ( self . var1 ( var2 ) )
"call the function _check_boolean_field_default_value with dictionary kwargs as argument, use the result as an argument for the call to the function errors.extend.","call function _check_boolean_field_default_value with dict var0 as argument, use result as argument for call to function var1 ",errors . extend ( _check_boolean_field_default_value ( ** kwargs ) ),var1 ( _check_boolean_field_default_value ( ** var0 ) )
"call the function _check_middleware_classes with dictionary kwargs as argument, use the result as an argument for the call to the function errors.extend.","call function var0 with dict var1 as argument, use result as argument for call to function var2 ",errors . extend ( _check_middleware_classes ( ** kwargs ) ),var2 ( var0 ( ** var1 ) )
"call the function _check_test_runner with dictionary kwargs as argument, use the result as an argument for the call to the function errors.extend.","call function _check_test_runner with dict var0 as argument, use result as argument for call to function var1 ",errors . extend ( _check_test_runner ( ** kwargs ) ),var1 ( _check_test_runner ( ** var0 ) )
extend errors list with e.error_list.,extend errors list with e var1 ,errors . extend ( e . error_list ),errors . extend ( e . var1 )
"extend errors list with m for every m in e.error_list, only if m is not in errors.",extend errors list with m for every m in e var1 only if m is not in errors.,errors . extend ( m for m in e . error_list if m not in errors ),errors . extend ( m for m in e . var1 if m not in errors )
call the method errors.extend with argument new_errors.,call method var0 with argument var1 ,errors . extend ( new_errors ),var0 ( var1 )
"get the value under the 'error_messages' key of the kwargs dictionary, update errors dictionary with it.","get value under var0 key of var1 dict, update errors dict with it.",errors . update ( kwargs [ 'error_messages' ] ),errors . update ( var1 [ var0 ] )
"errors is a string ""strict"".",errors is string var0.,errors = 'strict',errors = 'strict'
errors is an empty list,errors is empty list,errors = [ ],errors = [ ]
errors is an empty list.,errors is empty list.,errors = [ ],errors = [ ]
"and e.level is lesser than checks.WARNING and result of the method e.is_silenced in false.   append e to errors list for every e in all_issues, if checks.ERROR is lesser than or equal to e.level,",and var0 is lesser var2 checks var4 and result of method e var6 in false var7 append e to errors list for every e in var8 if checks var10 is lesser var2 or equal to var0 ,errors = [ e for e in all_issues if checks . ERROR <= e . level < checks . CRITICAL ],errors = [ e for e in var8 if checks . var10 <= var0 < checks . CRITICAL ]
"call the model.check method with unpacked dictionary kwargs for every model in return value of function apps.get_models,",call var0 method with unpacked dict var1 for every model in return value of function apps var3 ,errors = [ model . check ( ** kwargs ) for model in apps . get_models ( ) if app_configs is None or model . _meta . app_config in app_configs ],errors = [ model . check ( ** var1 ) for model in apps . var3 ( ) if app_configs is None or model . _meta . app_config in app_configs ]
"ERRORS is a dictionary with 3 initial entries: string ""You don't have permission to access that port."" for errno.EACCES,",ERRORS is dict with 3 initial entries: string var0 for var1 var2 ,"ERRORS = {  errno . EACCES : 'You don't have permission to access that port.' ,  errno . EADDRINUSE : 'That port is already in use.' ,  errno . EADDRNOTAVAIL : 'That IP address can't be assigned-to.' ,  }","ERRORS = {  var1.var2: 'You don't have permission to access that port.',  var1.EADDRINUSE: 'That port is already in use.',  var1.EADDRNOTAVAIL: 'That IP address can't be assigned-to.',  }"
"get 'errors' attribute from fp object, substitute it for errors if it exists, if not errors is None.","get var0 attribute from var1 object, substitute it for errors if it exists, if not errors is var2 ","errors = getattr ( fp , 'errors' , None )","errors = getattr ( var1 , var0 , var2 )"
and errors set to the result of self.default_error_messages.copy.,and errors set to result of self var1 copy.,errors = self . default_error_messages . copy ( ),errors = self . var1 . copy ( )
"every occurrence of '<' with '&lt;', every occurrence of '>' with '&gt;', every occurrence of '""' with '&quot;',   and every occurrence of ""'"" with '&#39;', call the function mark_safe with the previous result as an argument, return the result.   call the function allow_lazy with 2 arguments: escape, six.text_type, substitute the result for escape.","every occurrence of var0 with var1, every occurrence of var7 with var9, every occurrence of var11 with var12 var14 and every occurrence of var16 with var17, call function var19 with previous result as argument, return result var14 call function var21 with 2 arguments: escape, six var23 substitute result for escape.","escape = allow_lazy ( escape , six . text_type )","escape = var21 ( escape , six . var23 )"
"ESCAPE_MAPPINGS is an dictionary with 10 initial entries: None for 'A', None for 'b', None for 'B', '0' for 'd', 'x' for 'D',","ESCAPE_MAPPINGS is dict with 10 initial entries: var0 for var3 var0 for var4 var0 for var5, var6 for var7, var9 for var10,","ESCAPE_MAPPINGS = { 'A' : None , 'b' : None , 'B' : None , 'd' : '0' , 'D' : 'x' , 's' : ' ' , 'S' : 'x' , 'w' : 'x' , 'W' : '!' , 'Z' : None , }","ESCAPE_MAPPINGS = { var3 : var0 , 'b' : var0 , 'B' : var0 , 'd' : '0' , 'D' : 'x' , 's' : ' ' , 'S' : 'x' , 'w' : 'x' , 'W' : '!' , 'Z' : var0 }"
escaped is boolean False.,escaped is boolean var0 ,escaped = False,escaped = var0
escaped is boolean True.,escaped is boolean var0 ,escaped = True,escaped = var0
"use the result as an argument for the call to the mark_safe function, return the result.   call the function allow_lazy with 2 arguments: escapejs, six.text_type, substitute the result for escapejs.","use result as argument for call to var0 function, return result var1 call function var2 with 2 arguments: var4 six var7 substitute result for var4 ","escapejs = allow_lazy ( escapejs , six . text_type )","var4 = var2 ( var4 , six . var7 )"
substitute conditional_escape for escaper.,substitute var0 for var1 ,escaper = conditional_escape,var1 = var0
escaper is an identity lambda function.,var0 is identity lambda function.,escaper = lambda x : x,var0 = lambda x : x
substitute EscapeBytes for EscapeString.,substitute var0 for var1 ,EscapeString = EscapeBytes,var1 = var0
substitute EscapeText for EscapeString.,substitute var0 for var1 ,EscapeString = EscapeText,var1 = var0
substitute EscapeText for EscapeUnicode.,substitute var0 for var1 ,EscapeUnicode = EscapeText,var1 = var0
"call the sys.exc_info function, assign the result to et, ev and tb, respectively.","call sys var1 function, assign result to var2 ev and tb, respectively.","et , ev , tb = sys . exc_info ( )","var2 , ev , tb = sys . var1 ( )"
"call the function re.compile with an argument raw string '(?:W/)?""((?:\\.|[^""])*)""', substitute the result for ETAG_MATCH.","call function var0 with argument raw string var1, substitute result for var3 ",ETAG_MATCH = re . compile ( r'(?:W/)?'((?:\\.|[^'])*)'' ),var3 = var0(r'(?:W/)?'((?:\\.|[^'])*)'')
"for every e in etags call the method e.encode with an argument string 'ascii', call the method decode on the result with an argument,","for every e in var0 call method var1 with argument string var2, call method decode on result with argument,",etags = [ e . encode ( 'ascii' ) . decode ( 'unicode_escape' ) for e in etags ],var0 = [ e . encode ( var2 ) . decode ( 'unicode_escape' ) for e in var0 ]
"call the method ETAG_MATCH.findall with an argument etag_str, substitute the result for etags.",call method var0 findall with argument var2 substitute result for var4 ,etags = ETAG_MATCH . findall ( etag_str ),var4 = var0 . findall ( var2 )
"for every c in reversed order of candidate, convert c into an integer, sum all the results and substitute the result for evens.","for every c in reversed order of didate, convert c into integer, sum all results and substitute result for evens.",evens = sum ( int ( c ) for c in candidate [ - 1 : : - 2 ] ),evens = sum ( int ( c ) for c in candidate [ - 1 : : - 2 ] )
EventHandler.modified_code is FILE_MODIFIED.,EventHandler var1 is var2 ,EventHandler . modified_code = FILE_MODIFIED,EventHandler . var1 = var2
EventHandler.modified_code is I18N_MODIFIED.,EventHandler var1 is var2 ,EventHandler . modified_code = I18N_MODIFIED,EventHandler . var1 = var2
"exc_info is an tuple with 3 elements: None, result of method record.getMessage and None.",var0 is tuple with 3 elements: var1 result of method record var4 and var1 ,"exc_info = ( None , record . getMessage ( ) , None )","var0 = var1 , record . var4 ( ) , var1"
substitute record.exc_info for exc_info.,substitute record var0 for var0 ,exc_info = record . exc_info,var0 = record . var0
call the function sys.exc_info with an argument exc_info.,call function sys var1 with argument var1 ,exc_info = sys . exc_info ( ),var1 = sys . var1 ( )
"get the type of the exc object, substitute it for exc_type.","get type of exc object, substitute it for var0 ",exc_type = type ( exc ),var0 = type ( exc )
substitute the result for exc_value.   substitute exc for exc_value.__cause__.,substitute result for var0 substitute exc for var0 __cause__.,exc_value . __cause__ = exc,var0 . __cause__ = exc
"call the function exc_type with an argument string ""Unsupported value: %r. You should install pytz."", replace '%s' with dt,","call function var0 with argument string var2, replace var3 with var5 ",exc_value = exc_type ( 'Unsupported value: %r. You should install pytz.' % dt ),exc_value = var0 ( 'Unsupported value: %r.You should install pytz.' % var5 )
"if _BASE64_DECODE_ERROR exception is caught,","if var0 exception is caught,",except _BASE64_DECODE_ERROR :,except var0:
"if an exception occurred,","if exception occurred,",except :,except:
"otherwise if any other exception is caught,","otherwise if any other exception is caught,",except :,except:
"if any exception is caught,","if any exception is caught,",except :,except:
"if exception is caught,","if exception is caught,",except :,except:
"is exception is caught,","is exception is caught,",except :,except:
"if archive.ArchiveException or IOError, renamed to e, exception are caught,","if archive var0 or var1 renamed to e, exception are caught,","except ( archive . ArchiveException , IOError ) as e :","except(archive.var0, var1) as e:"
"if TypeError or AttributeError exceptions are caught,","if var0 or var1 exceptions are caught,","except ( AttributeError , TypeError ) :","except(var1, var0):"
if AttributeError or UnsupportedOperation exception occurred.,if var0 or var1 exception occurred.,"except ( AttributeError , UnsupportedOperation ) :","except(var0, var1):"
"if DatabaseError or IntegrityError, renamed to e, exceptions are caught,","if var0 or var1 renamed to e, exceptions are caught,","except ( DatabaseError , IntegrityError ) as e :","except(var0, var1) as e:"
"if HTMLParseError or UnboundLocalError exceptions are caught,","if var0 or var1 exceptions are caught,","except ( HTMLParseError , UnboundLocalError ) :","except(var0, var1):"
"if ImportError or AttributeError exception occurred,","if var0 or var1 exception occurred,","except ( ImportError , AttributeError ) :","except(var0, var1):"
"if ImportError, AttributeError, renamed to e, exceptions are caught,","if var0 var1 renamed to e, exceptions are caught,","except ( ImportError , AttributeError ) as e :","except(var0, var1) as e:"
"if ImportError, IndentationError, NameError, SyntaxError, TypeError or AttributeErrorexception is caught,","if var0 var1 var3 var5 var7 or var9 is caught,","except ( ImportError , IndentationError , NameError , SyntaxError ,  TypeError , AttributeError ) :","except(var0, var1, var3, var5,  var7, AttributeError):"
"if IndexError, ValueError, KeyError or TypeError exceptions are caught,","if var0 var1 var3 or var5 exceptions are caught,","except ( IndexError ,  ValueError ,  KeyError ,  TypeError ) :","except(var0,  var1,  var3,  var5):"
"if IndexError, TypeError or ValueError exception is caught,","if var0 var1 or var3 exception is caught,","except ( IndexError , TypeError , ValueError ) :","except(var0, var1, var3):"
"if IOError or OSError exceptions occurred,","if var0 or var1 exceptions occurred,","except ( IOError , OSError ) :","except(var0, var1):"
"if KeyError or AttributeError, renamed to exc, exceptions are caught,","if var0 or var1 renamed to var3 exceptions are caught,","except ( KeyError , AttributeError ) as exc :","except(var0, var1) as var3:"
"if KeyError, IndexError and AttributeError exception is caught,","if var0 var1 and var3 exception is caught,","except ( KeyError , IndexError , AttributeError ) :","except(var0, var1, var3):"
"if KeyError and TypeError exceptions are caught,","if var0 and var1 exceptions are caught,","except ( KeyError , TypeError ) :","except(var0, var1):"
"pad the rest of the field with bytes string '=', use the result as an argument for the call to the method base64.urlsafe_b64decode,   return the result.   if LookupError or BinasciiError, renamed to e, exceptions are caught.","pad rest of field with bytes string var0, use result as argument for call to method base64 var2 return result var3 if var5 or var7 renamed to e, exceptions are caught.","except ( LookupError , BinasciiError ) as e :","except(var5, var7) as e:"
"if LookupError or ImportError, renamed to e, exceptions are caught,","if var0 or var1 renamed to e, exceptions are caught,","except ( LookupError , ImportError ) as e :","except(var0, var1) as e:"
"if LookupError or TypeError exceptions are caught,","if var0 or var1 exceptions are caught,","except ( LookupError , TypeError ) :","except(var0, var1):"
"if OSError or IOError exceptions were raised,","if var0 or var1 exceptions were raised,","except ( OSError , IOError ) :","except(var0, var1):"
"if OSError, NotImplementedError or AttributeError exceptions are caught,","if var0 var1 or var3 exceptions are caught,","except ( OSError , NotImplementedError , AttributeError ) :","except(var0, var1, var3):"
if OSError or TypeError errors occurred.,if var0 or var1 errors occurred.,"except ( OSError , TypeError ) :","except(var0, var1):"
"if OSError exception was raised,","if var0 exception was raised,",except ( OSError ) :,except(var0):
"if OverflowError or ValueError exceptions are caught,","if var0 or var1 exceptions are caught,","except ( OverflowError , ValueError ) :","except(var0, var1):"
"if OverflowError or ValueError, renamed to exc, exceptions are caught,","if var0 or var1 renamed to var3 exceptions are caught,","except ( OverflowError , ValueError ) as exc :","except(var0, var1) as var3:"
"if ssl.SSLError or smtplib.SMTPServerDisconnected exception occurred,","if var0 var1 or var2 var3 exception occurred,","except ( ssl . SSLError , smtplib . SMTPServerDisconnected ) :","except(var0.var1, var2.var3):"
"if TypeError, AttributeError, KeyError or ValueError exceptions are caught,","if var0 var1 var3 or var5 exceptions are caught,","except ( TypeError , AttributeError , KeyError , ValueError ) :","except(var0, var1, var3, var5):"
"if TypeError and AttributeError exceptions are caught,","if var0 and var1 exceptions are caught,","except ( TypeError , AttributeError ) :","except(var0, var1):"
"if TypeError, ValueError or UnicodeDecodeError exceptions are caught,","if var0 var1 or var3 exceptions are caught,","except ( TypeError , ValueError , UnicodeDecodeError ) :","except(var0, var1, var3):"
"if TypeError or ValueError exceptions are caught,","if var0 or var1 exceptions are caught,","except ( TypeError , ValueError ) :","except(var0, var1):"
"if TypeError or VariableDoesNotExist exceptions are caught,","if var0 or var1 exceptions are caught,","except ( TypeError , VariableDoesNotExist ) :","except(var0, var1):"
"called with an argument text converted into a floating point number.   if ValueError, InvalidOperation, TypeError or UnicodeEncodeError exceptions are caught,","called with argument text converted into floating point number var0 if var1 var2 var4 or var6 exceptions are caught,","except ( ValueError , InvalidOperation , TypeError , UnicodeEncodeError ) :","except(var1, var2, var4, var6):"
"if OverflowError or ValueError exceptions are caught,","if var0 or var1 exceptions are caught,","except ( ValueError , KeyError ) :","except(var1, KeyError):"
"if ValueError, OverflowError or InvalidOperation exceptions are caught,","if var0 var1 or var3 exceptions are caught,","except ( ValueError , OverflowError , InvalidOperation ) :","except(var0, var1, var3):"
"if ValueError or self.queryset.model.DoesNotExist exception is caught,","if var0 or var1 var2 exception is caught,","except ( ValueError , self . queryset . model . DoesNotExist ) :","except(var0, var1.var2):"
"if ValueError, TypeError or OverflowError exceptions are caught,","if var0 var1 or var3 exceptions are caught,","except ( ValueError , TypeError , OverflowError ) :","except(var0, var1, var3):"
"if ValueError, TypeError or ValidationError exception is caught,","if var0 var1 or var3 exception is caught,","except ( ValueError , TypeError , ValidationError ) :","except(var0, var1, var3):"
"if ValueError or TypeError exceptions occurred,","if var0 or var1 exceptions occurred,","except ( ValueError , TypeError ) :","except(var0, var1):"
"if exception ValueError or TypeError is caught,","if exception var0 or var1 is caught,","except ( ValueError , TypeError ) :","except(var0, var1):"
"if ValueError or TypeError exceptions are caught,","if var0 or var1 exceptions are caught,","except ( ValueError , TypeError ) :","except(var0, var1):"
"if ValueError or TypeError are caught,","if var0 or var1 are caught,","except ( ValueError , TypeError ) :","except(var0, var1):"
"if TypeError or ValueError exceptions are caught,","if var0 or var1 exceptions are caught,","except ( ValueError , TypeError ) :","except(var1, var0):"
"if exception ValueError or TypeError is raised,","if exception var0 or var1 is raised,","except ( ValueError , TypeError ) :","except(var0, var1):"
"if AmbiguityError exception is caught,","if var0 exception is caught,",except AmbiguityError :,except var0:
"if AmbiguityError exception is raised,","if var0 exception is raised,",except AmbiguityError :,except var0:
"if AppRegistryNotReady exception is caught,","if var0 exception is caught,",except AppRegistryNotReady :,except var0:
"except if AttributeError is caught,","except if var0 is caught,",except AttributeError :,except var0:
"if AttributeError exception is caught,","if var0 exception is caught,",except AttributeError :,except var0:
if AttributeError exception is caught.,if var0 exception is caught.,except AttributeError :,except var0:
"if AttributeError exception is raised,","if var0 exception is raised,",except AttributeError :,except var0:
"substitute the result for data.   if AttributeError exception is caught,","substitute result for data var0 if var1 exception is caught,",except AttributeError :,except var1:
"if base.DeserializationError exception is caught,","if base var0 exception is caught,",except base . DeserializationError :,except base.var0:
"if CommandError exception is caught,","if var0 exception is caught,",except CommandError :,except var0:
"substitute the '%s' with table and 3 elements of a list: b64encoded, exp and key, respectively.   if DatabaseError exception is caught,","substitute var0 with table and 3 elements of list: var1 var2 and key, respectively var3 if var4 exception is caught,",except DatabaseError :,except var4:
"if DatabaseError, renamed to e, exception is caught,","if var0 renamed to e, exception is caught,",except DatabaseError as e :,except var0 as e:
"if DecimalException exception is caught,","if var0 exception is caught,",except DecimalException :,except var0:
"if Exception exception is caught,","if var0 exception is caught,",except Exception :,except var0:
"if GET_override is not None, or otherwise generated with the call to the function pformat with an argument request.GET.   if Exception exception is caught,","if var0 is not var2 or otherwise generated with call to function var3 with argument request var1 if var5 exception is caught,",except Exception :,except var5:
"if POST_override is not None, or otherwise generated with the call to the function pformat with an argument request.POST.   if Exception exception is caught,","if var0 is not var2 or otherwise generated with call to function var3 with argument request var1 if var5 exception is caught,",except Exception :,except var5:
"if COOKIES_override is not None, or otherwise generated with the call to the function pformat with an argument request.COOKIES.   if Exception exception is caught,","if var0 is not var2 or otherwise generated with call to function var3 with argument request var1 if var5 exception is caught,",except Exception :,except var5:
"if META_override is not None, or otherwise generated with the call to the function pformat with an argument request.META.   if Exception exception is caught,","if var0 is not var2 or otherwise generated with call to function var3 with argument request var1 if var5 exception is caught,",except Exception :,except var5:
"if the Exception exception is caught,","if var0 exception is caught,",except Exception :,except var0:
if Exception exception is caught.,if var0 exception is caught.,except Exception :,except var0:
"as the arguments, substitute the result for response.   if Exception, renamed to e, exception is caught,","as arguments, substitute result for response var0 if var1 renamed to e, exception is caught,",except Exception as e :,except var1 as e:
"if Exception, renamed to e, exception is caught,","if var0 renamed to e, exception is caught,",except Exception as e :,except var0 as e:
"if exception of class Exception, as e, is caught,","if exception of class var0 as e, is caught,",except Exception as e :,except var0 as e:
"if exception of the class Exception, as e, is caught,","if exception of class var0 as e, is caught,",except Exception as e :,except var0 as e:
"if GeneratorExit exception is caught,","if var0 exception is caught,",except GeneratorExit :,except var0:
"if exception GeneratorExit is caught,","if exception var0 is caught,",except GeneratorExit :,except var0:
"if HTMLParseError exception is caught,","if var0 exception is caught,",except HTMLParseError :,except var0:
"if exception http.Http404 as e is caught,","if exception http var0 as e is caught,",except http . Http404 as e :,except http.var0 as e:
"if http_cookies.CookieError exception is caught,","if var0 var2 exception is caught,",except http_cookies . CookieError :,except var0.var2:
if http_cookies.CookieError exception is raised.,if var0 var2 exception is raised.,except http_cookies . CookieError :,except var0.var2:
"if http_cookies.CookieError exception is raised,","if var0 var2 exception is raised,",except http_cookies . CookieError :,except var0.var2:
"if ImportError exception occurred,","if var0 exception occurred,",except ImportError :,except var0:
"if ImportError exception is caught,","if var0 exception is caught,",except ImportError :,except var0:
if ImportError exception is caught.,if var0 exception is caught.,except ImportError :,except var0:
"if imoportError exception is caught,","if var0 exception is caught,",except ImportError :,except ImportError:
"yield the result.   if ImportError exception is caught,","yield result var0 if var1 exception is caught,",except ImportError :,except var1:
except ImportError.,except var0 ,except ImportError :,except var0:
"if ImportError, renamed to e, exception is caught,","if var0 renamed to e, exception is caught,",except ImportError as e :,except var0 as e:
"if ImportError, renamed to e, is caught,","if var0 renamed to e, is caught,",except ImportError as e :,except var0 as e:
"if ImportError, rename it to e, exception is caught,","if var0 rename it to e, exception is caught,",except ImportError as e :,except var0 as e:
"if ImportError, renamed to exc, exception is caught,","if var0 renamed to var1 exception is caught,",except ImportError as exc :,except var0 as var1:
"if ImproperlyConfigured exception is caught,","if var0 exception is caught,",except ImproperlyConfigured :,except var0:
"if ImproperlyConfigured renamed to exc, exception is caught,","if var0 renamed to var1 exception is caught,",except ImproperlyConfigured as exc :,except var0 as var1:
"if IndexError exception is caugh,",if var0 exception is var1 ,except IndexError :,except var0:
"if IndexError exception is caught,","if var0 exception is caught,",except IndexError :,except var0:
"substitute it for value under the 'initial' key of kwargs dictionary.   if IndexError exception is caught,","substitute it for value under var0 key of var1 dict var2 if var3 exception is caught,",except IndexError :,except var3:
"if InputStreamExhausted exception is caught,","if var0 exception is caught,",except InputStreamExhausted :,except var0:
"if InvalidOperation exception is caught,","if var0 exception is caught,",except InvalidOperation :,except var0:
"use the result as an argument for the call to the mark_safe function, return the result.   if InvalidOperation exception is caught,","use result as argument for call to var0 function, return result var2 if var3 exception is caught,",except InvalidOperation :,except var3:
"if InvalidTemplateLibrary, renamed to e, exception is caught,","if var0 renamed to e, exception is caught,",except InvalidTemplateLibrary as e :,except var0 as e:
"if IOError exception is caught,","if var0 exception is caught,",except IOError :,except var0:
"previous result and filepath.   if IOError exception is caught,","previous result and var0 if var2 exception is caught,",except IOError :,except var2:
"if IOError, renamed to e, exception is caught,","if var0 renamed to e, exception is caught,",except IOError as e :,except var0 as e:
"if IOErro, renamed to e, exception is caught,","if var0 renamed to e, exception is caught,",except IOError as e :,except var0r as e:
"if IOError, substituted to e, exception is caught,","if var0 substituted to e, exception is caught,",except IOError as e :,except var0 as e:
"if KeyboardInterrupt exception is caught,","if var0 exception is caught,",except KeyboardInterrupt :,except var0:
"if KeyError exception is caught,","if var0 exception is caught,",except KeyError :,except var0:
"except if KeyError exception is caught,","except if var0 exception is caught,",except KeyError :,except var0:
"with '%s' substituted for migration_name and app_label, respectively, as arguments.   if KeyError exception is caught,","with var0 substituted for var1 and var3 respectively, as arguments var5 if var6 exception is caught,",except KeyError :,except var6:
if KeyError exception is caught.,if var0 exception is caught.,except KeyError :,except var0:
"with all '%s' strings replaced with migration_name and app_label, respectively, as an argument.   if KeyError exception is raised,","with all var0 strings replaced with var1 and var3 respectively, as argument var5 if var6 exception is raised,",except KeyError :,except var6:
"where '%s' is replaced with migration_name and app_label.   if KeyError exception is caught,","var0 var1 is replaced with var2 and var4 if var7 exception is caught,",except KeyError :,except var7:
"and '3' for '3', substitute it for value.   if KeyError exception is caught,","and var0 for var0, substitute it for value var2 if var3 exception is caught,",except KeyError :,except var3:
"if NameError exception is caught,","if var0 exception is caught,",except KeyError :,except KeyError:
"if KeyError, renamed to key, exception is caught,","if var0 renamed to key, exception is caught,",except KeyError as key :,except var0 as key:
"if exception LookupError is caught,","if exception var0 is caught,",except LookupError :,except var0:
"if LookupError exception is caught,","if var0 exception is caught,",except LookupError :,except var0:
if LookupError exception is caught.,if var0 exception is caught.,except LookupError :,except var0:
"if MiddlewareNotUsed exception is raised,","if var0 exception is raised,",except MiddlewareNotUsed :,except var0:
"an unpacked list natural_key as argument, substitute the pk filed of the resulting object for obj.pk.   if Model.DoesNotExist exception is caught,","an unpacked list var0 as argument, substitute var2 filed of resulting object for obj var2 if var5 var6 exception is caught,",except Model . DoesNotExist :,except var5.var6:
"if MultiPartParserError exception is caught,","if var0 exception is caught,",except MultiPartParserError :,except var0:
"if NameError exception is caught,","if var0 exception is caught,",except NameError :,except var0:
"substitute the result for url.   if NoReverseMatch exception is caught,","substitute result for url var0 if var1 exception is caught,",except NoReverseMatch :,except var1:
"current_app as context.current_app, substitute the result for url.   if NoReverseMatch exception is caught,","var0 as context var0 substitute result for url var2 if var3 exception is caught,",except NoReverseMatch :,except var3:
"if NotImplementedError exception is caught,","if var0 exception is caught,",except NotImplementedError :,except var0:
"if NotImplementedError exception,","if var0 exception,",except NotImplementedError :,except var0:
"if exception OSError occurred,","if exception var0 occurred,",except OSError :,except var0:
"if OSError exception is caught,","if var0 exception is caught,",except OSError :,except var0:
"if exception OSError, renamed to e, is caught,","if exception var0 renamed to e, is caught,",except OSError as e :,except var0 as e:
"if OSError, renamed to e, exception is caught,","if var0 renamed to e, exception is caught,",except OSError as e :,except var0 as e:
"if OSError, renamed to e, is caught,","if var0 renamed to e, is caught,",except OSError as e :,except var0 as e:
"if exception OSError, renamed to e, occurred,","if exception var0 renamed to e, occurred,",except OSError as e :,except var0 as e:
"if OSError renamed to e, exception is caught,","if var0 renamed to e, exception is caught,",except OSError as e :,except var0 as e:
"stderr set to PIPE, close_fds set to boolean True is os.name is not equal to 'nt', universal_newlines set to boolean True.   if OSError, renamed to e, exception is caught,","var0 set to var1 var2 set to boolean var3 is var5 is not equal to var6 var7 set to boolean var3 if var10 renamed to e, exception is caught,",except OSError as e :,except var10 as e:
"if OSError, renamed to err, is caught,","if var0 renamed to err, is caught,",except OSError as err :,except var0 as err:
"if OverflowError exception is caught,","if var0 exception is caught,",except OverflowError :,except var0:
"if exception PermissionDenied is caught,","if exception var0 is caught,",except PermissionDenied :,except var0:
"if pickle.PickleError exception is caught,","if pickle var0 exception is caught,",except pickle . PickleError :,except pickle.var0:
"if re.error, renamed to e, is caught,","if var0 renamed to e, is caught,",except re . error as e :,except var0 as e:
"if Resolver404 exception is caught,","if var0 exception is caught,",except Resolver404 :,except var0:
"if Resolver404, renamed to e, exception is caught,","if var0 renamed to e, exception is caught,",except Resolver404 as e :,except var0 as e:
"if self.LibraryValueNotFoundException exception is caught,","if self var0 exception is caught,",except self . LibraryValueNotFoundException :,except self.var0:
"if serializers.SerializerDoesNotExist exception is caught,","if var0 var1 exception is caught,",except serializers . SerializerDoesNotExist :,except var0.var1:
"with arguments cookie_value and max_age set to max_age.   if signing.BadSignature exception is caught,","with arguments var0 and var2 set to var2 if signing var7 exception is caught,",except signing . BadSignature :,except signing.var7:
"if SkipFile exception is caught,","if var0 exception is caught,",except SkipFile :,except var0:
"if smtplib.SMTPException exception is caught,","if var0 var1 exception is caught,",except smtplib . SMTPException :,except var0.var1:
"if socket.error, renamed to e, exception is caught,","if var0 renamed to e, exception is caught,",except socket . error as e :,except var0 as e:
"if StandardError, renamed to e, exception is caught,","if var0 renamed to e, exception is caught,",except StandardError as e :,except var0 as e:
"substitute the result for formatters dictionary value under name key.   if StandardError, renamed to e, exception is caught,","substitute result for var0 dict value under name key var1 if var2 renamed to e, exception is caught,",except StandardError as e :,except var2 as e:
"substitute the result for filters dictionary value under name key.   if StandardError, renamed to e, exception is caught,","substitute result for filters dict value under name key var0 if var1 renamed to e, exception is caught,",except StandardError as e :,except var1 as e:
"use the result as an argument for the call to the method filterer.addFilter.   if StandardError, renamed to e, exception is caught,","use result as argument for call to method filterer var1 if var3 renamed to e, exception is caught,",except StandardError as e :,except var3 as e:
"under the 'handlers' key of self.config dictionary, substitute the result for value under 'target' key of config dictioanry.   if StandardError, renamed to e, exception is caught,","under var0 key of self var1 dict, substitute result for value under var2 key of var1 var3 if var5 renamed to e, exception is caught,",except StandardError as e :,except var5 as e:
if StopFutureHandlers exception is caught.,if var0 exception is caught.,except StopFutureHandlers :,except var0:
"if StopIteration exception,","if var0 exception,",except StopIteration :,except var0:
"if StopUpload, renamed to e, exception is caught,","if var0 renamed to e, exception is caught,",except StopUpload as e :,except var0 as e:
"if exception SuspiciousOperation as e is caught,","if exception var0 as e is caught,",except SuspiciousOperation as e :,except var0 as e:
"if SystemExit exception is caught,","if var0 exception is caught,",except SystemExit :,except var0:
"if TemplateDoesNotExist exception is caught,","if var0 exception is caught,",except TemplateDoesNotExist :,except var0:
"source and previous result.   if TemplateDoesNotExist exception is caught,","source and previous result var0 if var1 exception is caught,",except TemplateDoesNotExist :,except var1:
"if TemplateDoesNotExist, renamed to e, exception is caught,","if var0 renamed to e, exception is caught,",except TemplateDoesNotExist as e :,except var0 as e:
"if TemplateSyntaxError, replaced with e, exception is caught,","if var0 replaced with e, exception is caught,",except TemplateSyntaxError as e :,except var0 as e:
"if TemplateSyntaxError, renamed to e, exception is caught,","if var0 renamed to e, exception is caught,",except TemplateSyntaxError as e :,except var0 as e:
"if TypeError exception is caught,","if var0 exception is caught,",except TypeError :,except var0:
"if TypeError, renamed to te, exception is caught,","if var0 renamed to te, exception is caught,",except TypeError as te :,except var0 as te:
"if UnicodeDecodeError exception is caught,","if var0 exception is caught,",except UnicodeDecodeError :,except var0:
"if except UnicodeDecodeError exception is caught,","if except var0 exception is caught,",except UnicodeDecodeError :,except var0:
"return the result.   if UnicodeDecodeError exception is caught,","return result var0 if var1 exception is caught,",except UnicodeDecodeError :,except var1:
"if an exception of the type UnicodeDecodeError, renamed to e, is caught,","if exception of type var0 renamed to e, is caught,",except UnicodeDecodeError as e :,except var0 as e:
"if UnicodeEncodeError exception is caught,","if var0 exception is caught,",except UnicodeEncodeError :,except var0:
"if the UnicodeEncodeError exception is caught,","if var0 exception is caught,",except UnicodeEncodeError :,except var0:
"if UnicodeError exception is caught,","if var0 exception is caught,",except UnicodeError :,except var0:
"substitute the result for netloc.   if UnicodeError exception is caught,","substitute result for var0 if var2 exception is caught,",except UnicodeError :,except var2:
"substitute the result for domain.   if UnicodeError exception is caught,","substitute result for domain var0 if var1 exception is caught,",except UnicodeError :,except var1:
"if UnicodeError, renamed to e, exception is caught,","if var0 renamed to e, exception is caught,",except UnicodeError as e :,except var0 as e:
"if ValidationError exception is caught,","if var0 exception is caught,",except ValidationError :,except var0:
"use the result as an argument for the call to the field.to_python method, substitute the result for initial_value.   if ValidationError exception is caught,","use result as argument for call to field var1 method, substitute result for var2 if var5 exception is caught,",except ValidationError :,except var5:
"if ValidationError, renamed to e, is caught,","if var0 renamed to e, is caught,",except ValidationError as e :,except var0 as e:
"if ValidationError, substituted for e, exception is caught,","if var0 substituted for e, exception is caught,",except ValidationError as e :,except var0 as e:
"if ValidationError renamed to e, exception is caught,","if var0 renamed to e, exception is caught,",except ValidationError as e :,except var0 as e:
"if ValidationError, renamed to e, exception is caught,","if var0 renamed to e, exception is caught,",except ValidationError as e :,except var0 as e:
"if ValueError exception is caught,","if var0 exception is caught,",except ValueError :,except var0:
"substitute the result for self.literal.   if ValueError exception is caught,","substitute result for var0 if var2 exception is caught,",except ValueError :,except var2:
if ValueError exception is caught.,if var0 exception is caught.,except ValueError :,except var0:
"if VariableDoesNotExist exception is not caught,","if var0 exception is not caught,",except VariableDoesNotExist :,except var0:
"if VariableDoesNotExist exception is caught,","if var0 exception is caught,",except VariableDoesNotExist :,except var0:
except statement,except statement,except:,except:
exception,exception,except:,except:
append f.name to exclude.,append var0 to exclude.,exclude . append ( f . name ),exclude . append ( var0 )
append name to exclude.,append name to exclude.,exclude . append ( name ),exclude . append ( name )
exclude is an empty list.,exclude is empty list.,exclude = [ ],exclude = [ ]
"call the method form._get_validation_exclusions, substitute the result for exclude.",call method var0 substitute result for exclude.,exclude = form . _get_validation_exclusions ( ),exclude = var0 ( )
"get the value under the key 'exclude' of the options dictionary, substitute it for exclude.","get value under key var0 of options dict, substitute it for exclude.",exclude = options . get ( 'exclude' ),exclude = options . get ( var0 )
"get the value under the 'exclude' key of the options dictionary, substitute it for exclude.","get value under var0 key of options dict, substitute it for exclude.",exclude = options . get ( 'exclude' ),exclude = options . get ( var0 )
"call the method self._get_validation_exclusions, substitute the result for exclude.",call method var0 substitute result for exclude.,exclude = self . _get_validation_exclusions ( ),exclude = var0 ( )
add app_config to excluded_apps set.,add var0 to var1 set.,excluded_apps . add ( app_config ),var1 . add ( var0 )
excluded_apps is an empty set.,var0 is empty set.,excluded_apps = set ( ),var0 = set ( )
add model to excluded_models set.,add model to var0 set.,excluded_models . add ( model ),var0 . add ( model )
excluded_models is an empty set.,var0 is empty set.,excluded_models = set ( ),var0 = set ( )
"get the value under the 'exclude' key of the options dictionary, substitute the result for exclude.","get value under var0 key of options dict, substitute result for exclude.",excludes = options . get ( 'exclude' ),excludes = options . get ( var0 )
"substitute fist and second element of exc_info for exctype and value, respectively.","substitute fist and second element of var0 for var1 and value, respectively.","exctype , value = exc_info [ : 2 ]","var1 , value = var0 [ : 2 ]"
"execute code statement """"""exec _code_ in _globs_, _locs_"""""".","execute code statement var0""exec var3 in var4 _locs_var0"".","exec ( '''exec _code_ in _globs_, _locs_''' )","exec ( 'exec var3 in var4, var5' )"
"compile the handle.read in mode 'exec' source is read from file pythonrc, execute the compiled script with imported_objects variables.",compile var0 in mode var1 source is read from file var2 execute compiled script with var3 variables.,"exec ( compile ( handle . read ( ) , pythonrc , 'exec' ) , imported_objects )","exec ( compile ( handle . read ( ) , var2 , var1 ) , var3 )"
"call the function exec_ with an argument string """"""def reraise(tp, value, tb=None):    raise tp, value, tb"""""".","call the function exec_ with an argument string """"""def reraise(tp, value, tb=None):    raise tp, value, tb"""""".","exec_ ( '''def reraise(tp, value, tb=None):     raise tp, value, tb ''' )","exec_ ( '''def reraise(tp, value, tb=None):     raise tp, value, tb ''' )"
"get 'exec' attribute from the moves.builtins object, substitute it for exec_.","get var0 attribute from var1 object, substitute it for var2 ","exec_ = getattr ( moves . builtins , 'exec' )","var2 = getattr ( var1 , var0 )"
"call the executor.migrate method with, targets, plan and fake set to the value under the 'fake' key of options dictionary,","call var0 method with, targets, plan and fake set to value under var1 key of options dict,","executor . migrate ( targets , plan , fake = options . get ( 'fake' , False ) )","var0 ( targets , plan , fake = options . get ( var1 , False ) )"
"if exists, if not use None as the second argument, return the result.   call the function MigrationExecutor with connection and self.migration_progress_callback as arguments, substitute the result fro executor.","if exists, if not use var0 as second argument, return result var1 call function var2 with connection and self var5 as arguments, substitute result var6 executor.","executor = MigrationExecutor ( connection , self . migration_progress_callback )","executor = var2 ( connection , self . var5 )"
"call the MigrationExecutor with the connection as the argument, substitute it for executor.","call var0 with connection as argument, substitute it for executor.",executor = MigrationExecutor ( connection ),executor = var0 ( connection )
call the function exhaust with an argument stream.,call function exhaust with argument stream.,exhaust ( stream ),exhaust ( stream )
remove name from existing.,remove name from existing.,existing . remove ( name ),existing . remove ( name )
sort elements of list existing.,sort elements of list existing.,existing . sort ( ),existing . sort ( )
"convert root.manager.loggerDict into a list, substitute it for existing.","convert root.manager var1 into list, substitute it for existing.",existing = list ( root . manager . loggerDict ),existing = list ( root . manager . var1 )
existing_headers is a set of lowercase headers for every header in vary_headers.,var0 is set of lowercase headers for every header in var1 ,existing_headers = set ( header . lower ( ) for header in vary_headers ),var0 = set ( header . lower ( ) for header in var1 )
existing_headers is a set containing lowercase strings header for every header in vary_headers.,var0 is set containing lowercase strings header for every header in var1 ,existing_headers = set ( header . lower ( ) for header in vary_headers ),var0 = set ( header . lower ( ) for header in var1 )
terminate the program with exit code 6,terminate program with exit code 6,exit ( 6 ),exit ( 6 )
terminate the program with exit code 7,terminate program with exit code 7,exit ( 7 ),exit ( 7 )
substitute the datetime.max for exp.,substitute var0 for var1 ,exp = datetime . max,var1 = var0
"call the function datetime.utcfromtimestamp with argument timeout, substitute it for exp.",call function var0 with argument var1 substitute it for var2 ,exp = datetime . utcfromtimestamp ( timeout ),var2 = var0 ( var1 )
"instantiate class Decimal with string '1.0' as argument, divide it by product of instance of Decimal class created with integer 10,","instantiate class var0 with string var2 as argument, divide it by product of instance of var0 class created with integer 10,",exp = Decimal ( '1.0' ) / ( Decimal ( 10 ) ** abs ( p ) ),exp = var0 ( var2 ) / var0 ( 10 ) ** abs ( p )
"exp is an instance of Decimal, created with an argument integer 1.",var0 is instance of var1 created with argument integer 1.,exp = Decimal ( 1 ),var0 = var1 ( 1 )
"call the exp.replace with microsecond set to integer 0, substitute the result for exp.","call var0 with microsecond set to integer 0, substitute result for var1 ",exp = exp . replace ( microsecond = 0 ),var1 = var0 ( microsecond = 0 )
"call the function pickle.load with argument f, substitute the result for exp.","call function var0 with argument f, substitute result for var1 ",exp = pickle . load ( f ),var1 = var0 ( f )
"call the method self._expire_info.get with key and integer -1 as arguments, substitute the result for exp.","call method var0 with key and integer var2 as arguments, substitute result for var1 ","exp = self . _expire_info . get ( key , - 1 )","var1 = var0 ( key , - 1 )"
"call the method path.expanduser with an argument template, substitute it for expanded_template.","call method var0 with argument template, substitute it for var1 ",expanded_template = path . expanduser ( template ),var1 = var0 ( template )
"call the method path.normpath with an argument expanded_template, substitute it for expanded_template.",call method var0 with argument var1 substitute it for var1 ,expanded_template = path . normpath ( expanded_template ),var1 = var0 ( var1 )
expires is None.,expires is var0 ,expires = None,expires = var0
substitute third element of row list for expires.,substitute third element of row list for expires.,expires = row [ 2 ],expires = row [ 2 ]
"call the method timezone.make_naive with arguments: expires, timezone.utc, substitute the result for expires.",call method timezone var1 with arguments: expires var2 substitute result for expires.,"expires = timezone . make_naive ( expires , timezone . utc )","expires = timezone . var1 ( expires , var2 )"
"and expires is not an instance of datetime.   convert expires to a string, use it as argument for the call to the function typecast_timestamp, substitute the result for expires.","and expires is not instance of var0 convert expires to string, use it as argument for call to function var2 substitute result for expires.",expires = typecast_timestamp ( str ( expires ) ),expires = var2 ( str ( expires ) )
"call the method self.get_backend_timeout with argument timeout, substitute it for expiry.","call method self var1 with argument timeout, substitute it for expiry.",expiry = self . get_backend_timeout ( timeout ),expiry = self . var1 ( timeout )
"concatenate var_name, VARIABLE_ATTRIBUTE_SEPARATOR and fourth element of bits, use the result as an argument for the call the method,","concatenate var0 var2 and fourth element of bits, use result as argument for call method,",expression = parser . compile_filter ( var_name + VARIABLE_ATTRIBUTE_SEPARATOR + bits [ 3 ] ),expression = parser . compile_filter ( var0 + var2 + bits [ 3 ] )
"take last four elements of base and append ext to it, substitute result for ext.","take last four elements of base and append var0 to it, substitute result for var0 ",ext = base [ - 4 : ] + ext,var0 = base [ - 4 : ] + var0
substitute the first 255 elements of ext for ext.,substitute first 255 elements of var0 for var0 ,ext = ext [ : 255 ],var0 = var0 [ : 255 ]
"call the method mimetypes.guess_extension with an argument content_type, substitute result for ext.",call method mimetypes var1 with argument var2 substitute result for ext.,ext = mimetypes . guess_extension ( content_type ),ext = mimetypes . var1 ( var2 )
"call the method self.splitext with an argument guessed_filename, substitute the second element of the result for ext.",call method var0 with argument var2 substitute second element of result for var1 ,ext = self . splitext ( guessed_filename ) [ 1 ],var1 = var0 ( var2 ) [ 1 ]
"delete all the whitespaces from ext, split it by ',' character, extend ext_list with the result.","delete all var0 from var1 split it by var2 character, extend var3 with result.","ext_list . extend ( ext . replace ( ' ' , '' ) . split ( ', ' ) )","var3 . var1end ( var1 . replace ( ' ' , '' ) . split ( ', ' ) )"
prepend '.' to the i-th element of the ext_list.,var0 var1 to i-th element of var2 ,ext_list [ i ] = '.%s' % ext_list [ i ],var2 [ i ] = '.%s' % var2 [ i ]
"ext_list is an empty list,","var0 is empty list,",ext_list = [ ],var0 = [ ]
substitute complain for extend.,substitute complain for extend.,extend = complain,extend = complain
"get the attribute 'extend' of the cls object, if it exists substitute it for extend, if not extend is boolean True.","get attribute var0 of cls object, if it exists substitute it for extend, if not extend is boolean var1 ","extend = getattr ( definition , 'extend' , True )","extend = getattr ( definition , var0 , var1 )"
"extension_map is a dictioanry with 6 initial elntries: TarArchive for '.tar', TarArchive for '.tar.bz2', TarArchive for '.tar.gz',","extension_map is var0 with 6 initial elntries: var2 for var8 var2 for var9 var2 for var11,","extension_map = { '.tar' : TarArchive , '.tar.bz2' : TarArchive , '.tar.gz' : TarArchive , '.tgz' : TarArchive , '.tz2' : TarArchive , '.zip' : ZipArchive , }","extension_map = { var8 : var2 , '.tar.bz2' : var2 , '.tar.gz' : var2 , '.tgz' : var2 , '.tz2' : var2 , '.zip' : ZipArchive }"
"get the value under the 'extensions' key of the options dictionary, substitute it for extensions.","get value under var0 key of options dict, substitute it for extensions.",extensions = options . get ( 'extensions' ),extensions = options . get ( var0 )
"where '%s' is replaced with top_dir.   call the function handle_extensions with 2 arguments: value under the 'extensions' key of the options dictionary,","var0 var1 is replaced with var2 call function var5 with 2 arguments: value under var7 key of options dict,","extensions = tuple ( handle_extensions ( options [ 'extensions' ] , ignored = ( ) ) )","extensions = tuple ( var5 ( options [ var7 ] , ignored = ( ) ) )"
"substitute the value under the ns key of the resolver.namespace_dict dictionary for extra and resolver, respectively.",substitute value under ns key of var1 var2 dict for extra and var1 respectively.,"extra , resolver = resolver . namespace_dict [ ns ]","extra , var1 = var1 . var2 [ ns ]"
"call the method self.widget_attrs with an argument widget, substitute the result for extra_attrs.","call method self var1 with argument widget, substitute result for var2 ",extra_attrs = self . widget_attrs ( widget ),var2 = self . var1 ( widget )
add self.form.error_css_class to extra_classes set.,add self.form var1 to var2 set.,extra_classes . add ( self . form . error_css_class ),var2 . add ( self . form . var1 )
add self.form.required_css_class to extra_classes set.,add self.form var1 to var2 set.,extra_classes . add ( self . form . required_css_class ),var2 . add ( self . form . var1 )
"split extra_classes into words, by whitespaces, substitute the result for extra_classes.","split var0 into words, by var2 substitute result for var0 ",extra_classes = extra_classes . split ( ),var0 = var0 . split ( )
"if extra_classes is not empty put its elements into a set, substitute it for extra_classes, if not extra_classes is an empty set.","if var0 is not empty put its elements into set, substitute it for var0 if not var0 is empty set.",extra_classes = set ( extra_classes or [ ] ),var0 = set ( var0 or [ ] )
"call the function token_kwargs with 3 arguments: remaining_bits, parser and support_legacy set to boolean True, substitute the result for extra_context.",call function var0 with 3 arguments: var2 parser and var4 set to boolean var6 substitute result for var7 ,"extra_context = token_kwargs ( remaining_bits , parser , support_legacy = True )","var7 = var0 ( var2 , parser , var4 = var6 )"
"split file by ',' character, apply on its every element a lambda function which takes an argument x,","split file by var0 character, apply on its every element lambda function var1 takes argument x,","extra_files . extend ( map ( lambda x : x . strip ( ) , file . split ( ', ' ) ) )","extra_files . extend ( map ( lambda x : x . strip ( ) , file . split ( ', ' ) ) )"
"and ignored as an empty tuple, convert the result into a tuple and substitute it for extensions.   extra_files is an empty list.","and ignored as empty tuple, convert result into tuple and substitute it for extensions var1 is empty list.",extra_files = [ ],var1 = [ ]
"field_notes, respectively.   add field_params to extra_params dictionary.","var0, respectively var1 add var2 to var3 dict.",extra_params . update ( field_params ),var3 . update ( var2 )
add params to extra_params dictionary.,add params to var0 dict.,extra_params . update ( params ),var0 . update ( params )
value under the 'blank' key of the extra_params dictionary is boolean True.,value under var0 key of var1 dict is boolean var3 ,extra_params [ 'blank' ] = True,var1 [ var0 ] = var3
value under the 'null' key of the extra_params dictionary is boolean True.,value under var0 key of var1 dict is boolean var3 ,extra_params [ 'null' ] = True,var1 [ var0 ] = var3
"value under the 'primary_key' key of the extra_params dictionary is boolean True,",value under var0 key of var1 dict is boolean var3 ,extra_params [ 'primary_key' ] = True,var1 [ var0 ] = var3
"value under the 'unique' key of the extra_params dictionary is boolean True,",value under var0 key of var1 dict is boolean var3 ,extra_params [ 'unique' ] = True,var1 [ var0 ] = var3
extra_params is an instance of the class OrderedDict.,var0 is instance of class var1 ,extra_params = OrderedDict ( ),var0 = var1 ( )
call the method extracted.close.,call method var0 ,extracted . close ( ),var0 ( )
"call the method self._archive.extractfile with an argument member, substitute the result for extracted.","call method var0 with argument member, substitute result for extracted.",extracted = self . _archive . extractfile ( member ),extracted = var0 ( member )
"if extensions is false, substitute it for exts, otherwise exts is a list containing 2 elements: string 'html' and string 'txt'.","if extensions is false, substitute it for var0 otherwise var0 is list containing 2 elements: string var2 and string var3.","exts = extensions if extensions else [ 'html' , 'txt' ]","var0 = extensions if extensions else [ var2 , 'txt' ]"
"if extensions is false, substitute it for exts, otherwise exts is a list containing string 'js'.","if extensions is false, substitute it for var0 otherwise var0 is list containing string var2.",exts = extensions if extensions else [ 'js' ],var0 = extensions if extensions else [ var2 ]
call close method on a file stream.,call close method on file stream.,f . close ( ),f . close ( )
second element of l for every l in return value of the self._files.lists   call the method f.close.,second element of l for every l in return value of var0 call method var2 ,f . close ( ),var2 ( )
"if 'incomplete' key of the f.error_messages doesnt exists, assign it the value under the 'incomplete' key of the self.error_messages dictionary.","if var0 key of f var3 doesnt exists, assign it value under var0 key of self var3 dict.","f . error_messages . setdefault ( 'incomplete' , self . error_messages [ 'incomplete' ] )","f . var3 . setdefault ( var0 , self . var3 [ var0 ] )"
call the function f.process with 2 arguments: self and self.domain.,call function var0 with 2 arguments: self and var1 ,"f . process ( self , self . domain )","var0 ( self , var1 )"
f.required is boolean False.,var0 is boolean var1 ,f . required = False,var0 = var1
call the method f.save_form_data with 2 arguments: instance and value under the f.name key of cleaned_data dictionary.,call method f var1 with 2 arguments: instance and value under var2 key of var3 dict.,"f . save_form_data ( instance , cleaned_data [ f . name ] )","f . var1 ( instance , var3 [ var2 ] )"
call the method f.seek with an argument integer 0.,call method var0 with argument integer 0.,f . seek ( 0 ),var0 ( 0 )
"call the function pickle.dumps with expiry and integer -1 as arguments, use the result as the argument for the call to f.write function.","call function var0 with expiry and integer var1 as arguments, use result as argument for call to var2 function.","f . write ( pickle . dumps ( expiry , - 1 ) )","var2 ( pickle . dumps ( expiry , - 1 ) )"
"call the function pickle.dumps with argument value, use the result and integer -1 as arguments for the call to the function zlib.compress, use the result as an argument for the call to the f.write method.","call function var0 with argument value, use result and integer var1 as arguments for call to function var2 use result as argument for call to var3 method.","f . write ( zlib . compress ( pickle . dumps ( value ) , - 1 ) )","var3 ( zlib . compress ( pickle . dumps ( value ) , - 1 ) )"
"join p and cmd into a file path, substitute it for f.","join p and var0 into file path, substitute it for var1","f = os . path . join ( p , cmd )","f = os . path . join ( p , var0 )"
"join root and f into a file, substitute it for f.","join root and f into file, substitute it for var0","f = os . path . join ( root , f )","f = os . path . join ( root , f )"
"join root and f in path, substitute the result for f.","join root and f in path, substitute result for var0","f = os . path . join ( root , f )","f = os . path . join ( root , f )"
substitute first end elements of s for f.,substitute first end elements of s for var0,f = s [ : end ],f = s [ : end ]
"call the method to_python with an argument data from the base class of the class ImageField, substitute the result for f.",call method var0 with argument data from base class of class var2 substitute result for var3,"f = super ( ImageField , self ) . to_python ( data )","f = super ( var2 , self ) . var0 ( data )"
decrement factor by one.,decrement factor by one.,factor -= 1,factor -= 1
increment factor by one.,increment factor by one.,factor += 1,factor += 1
factor is integer 0.,factor is integer 0.,factor = 0,factor = 0
substitute c for factory.,substitute c for factory.,factory = c,factory = c
substitute config dictionary value under '()' key for factory.,substitute var0 dict value under var1 key for factory.,factory = config [ '()' ],factory = var0 [ var1 ]
substitute the result for value under 'address' key of config dictionary.   substitute klass for factory.,substitute result for value under var0 key of var1 dict var2 substitute var3 for factory.,factory = klass,factory = var3
fail_message is a string changed'.,var0 is string changed'.,fail_message = 'changed',var0 = 'changed'
fail_message is a string 'created'.,var0 is string var1.,fail_message = 'created',var0 = var1
"call the method tempfile.mkstemp with dir set to self._dir, substitute result for fd and tmp_path, respectively.",call method var0 with var1 set to var2 substitute result for var3 and var4 respectively.,"fd , tmp_path = tempfile . mkstemp ( dir = self . _dir )","var3 , var4 = var0 ( var1 = var2 )"
"binary or 'O_BINARY' attribute of the os object, or integer 0 if it doesnt exists.   call the os.open function with full_path, flags and octal number 0o666 as arguments, substitute the result for fd.","binary or var0 attribute of os object, or integer 0 if it doesnt exists var1 call var2 function with var3 flags and octal number 0o666 as arguments, substitute result for var5 ","fd = os . open ( full_path , flags , 0o666 )","var5 = var2 ( var3 , flags , 438 )"
"evaluate the binary expression with 4 operands: os.O_WRONLY, binary or os.O_CREATE, binary or 'O_BINARY' attribute of object os,","evaluate binary expression with var0 operands: os var1 binary or os var3 binary or var5 attribute of object os,","fd = os . open ( new_file_name , ( os . O_WRONLY | os . O_CREAT | getattr ( os , 'O_BINARY' , 0 ) | ( os . O_EXCL if not allow_overwrite else 0 ) ) )","fd var0 os.var0pen(new_file_name,var0os.var0ar1 var0 os.var0_CREAT var0 getattr(os,var0var5,var0var0) |(os.var0_EXCL if not allow_overwrite else var0)))"
"call the method pyinotify.INotifyWrapper.create, on the return value call the inotify_init method, substitute the result for fd.","call method pyinotify var1 create, on return value call var2 method, substitute result for var4 ",fd = pyinotify . INotifyWrapper . create ( ) . inotify_init ( ),var4 = pyinotify . var1 . create ( ) . var2 ( )
substitute sys.stdin for fd.,substitute var0 for var1 ,fd = sys . stdin,var1 = var0
"add ext to f, substitute the result for fext.","add var0 to f, substitute result for var1 ",fext = f + ext,fvar0 = f + var0
"remove the first element from colors, substitute it for fg.","remove first element from colors, substitute it for var0 ",fg = colors . pop ( ),var0 = colors . pop ( )
write migration_string to file fh.,write var0 to file var1 ,fh . write ( migration_string ),var1 . write ( var0 )
"call the method writer.as_string, write the result to fh file.",call method writer var1 write result to var2 file.,fh . write ( writer . as_string ( ) ),var2 . write ( writer . var1 ( ) )
"call the method writer.as_string, write the result to file fh.",call method writer var1 write result to file var2 ,fh . write ( writer . as_string ( ) ),var2 . write ( writer . var1 ( ) )
"call the method Field.__init__ with 8 arguments: self, required, widget, label, initial, help_text, unpacked list args,","call method var0 __init__ with 8 arguments: self, required, widget, label, initial var2 unpacked list var4 ","Field . __init__ ( self , required , widget , label , initial , help_text , * args , ** kwargs )","var0 . __init__ ( self , required , widget , label , initial , var2 , * var4 , ** kwargs )"
increment Field.creation_counter by one.,increment var0 var2 by one.,Field . creation_counter += 1,var0 . var2 += 1
"FIELD is a field"".","FIELD is field"".",FIELD = 'field',FIELD = 'field'
substitute f.name for field.,substitute var0 for field.,field = f . name,field = var0
"call the method field.rel.get_related_field, substitute the result for field.",call method field.rel var1 substitute result for field.,field = field . rel . get_related_field ( ),field = field . rel . var1 ( )
"settings.DEFAULT_CHARSET if the key doesnt exists and strings_only set to boolean True.   call the Model._meta.get_field method with an argument field_name, substitute the result for field.",settings var0 if key doesnt exists and var1 set to boolean var3 call var5 _meta var7 method with argument var8 substitute result for field.,field = Model . _meta . get_field ( field_name ),field = var5 . _meta . var7 ( var8 )
"call the method Model._meta.get_field with an argument field_name, substitute it for field.",call method var0 _meta var2 with argument var3 substitute it for field.,field = Model . _meta . get_field ( field_name ),field = var0 . _meta . var2 ( var3 )
substitute the value under the fieldname key of the self.fields dictionary for field.,substitute value under var0 key of var1 dict for field.,field = self . fields [ fieldname ],field = var1 [ var0 ]
"get the value under the name key of the self.fields dictionary, substitute it for field.","get value under name key of var0 dict, substitute it for field.",field = self . fields [ name ],field = var0 [ name ]
"join elements of comment_notes into a string, separated by whitespaces, append it to the string ' #', append the result to field_desc.","join elements of var0 into string, separated by var2 append it to string var3, append result to var4 ",field_desc += '  # ' + ' ' . join ( comment_notes ),var4 += '  # ' + ' ' . join ( var0 )
"append string ', ' to field_desc.",append string var0 to var1 ,"field_desc += ', '",var1 += var0
"in string '%s=%s' replace '%s' with k and return value of the function strip_prefix with an argument printable representation of v,","in string var0 replace var1 with k and return value of function var2 with argument printable representation of v,","field_desc += ', ' . join ( [ '%s=%s' % ( k , strip_prefix ( repr ( v ) ) ) for k , v in extra_params . items ( ) ] )","field_desc += ', ' . join ( [ ( var0 % ( k , var2 ( repr ( v ) ) ) ) for k , v in extra_params . items ( ) ] )"
"for every k and v in return value of the extra_params.items method, join all results into a string separated by a string ', ',   substitute it for field_desc.   append string ')' to field_desc.","for every k and v in return value of the extra_params.items method, join all results into a string separated by a string ', ',   substitute it for field_desc.   append string ')' to field_desc.",field_desc += ')',field_desc += ')'
"field_desc is a string '%s = %s%s', where '%s' is replaced with: att_name, an empty string if '.' is contained in field_type,",var0 is string var1 var2 var3 is replaced with: var4 empty string if var6 is contained in var7 ,"field_desc = '%s = %s%s' % ( att_name , '' if '.' in field_type else 'models.' , field_type , )","var0 = var1 % ( var4 , '' if '.' in var7 else 'models.' , var7 )"
"for every f in fields, if exclude is false, or if exclude is true and f is not contained in exclude, and only if f is not in ignored,","for every f in fields, if exclude is false, or if exclude is true and f is not contained in exclude, and only if f is not in ignored,","field_dict = OrderedDict ( [ ( f , field_dict . get ( f ) ) for f in fields if ( ( not exclude ) or ( exclude and f not in exclude ) ) and ( f not in ignored ) ] )","field_dict = OrderedDict ( [ ( f , field_dict . get ( f ) ) for f in fields if ( not exclude or exclude and f not in exclude ) and f not in ignored ] )"
"field_dict is an instance of OrderedDict class, created with an argument field_list.","var0 is instance of var1 class, created with argument var2 ",field_dict = OrderedDict ( field_list ),var0 = var1 ( var2 )
append a tuple with 2 elements: f.name and formfield to field_list.,append tuple with 2 elements: var0 and var1 to var2 ,"field_list . append ( ( f . name , formfield ) )","var2 . append ( ( var0 , var1 ) )"
field_list is an empty list.,var0 is empty list.,field_list = [ ],var0 = [ ]
"get the value under the 'name' key of the disposition dictionary, strip it of whitespaces, substitute the result for field_name.","get value under var0 key of disposition dict, strip it of var1 substitute result for var2 ",field_name = disposition [ 'name' ] . strip ( ),var2 = disposition [ var0 ] . strip ( )
"call the method field_node.getAttribute with an argument string 'name', substitute the result for field_name.","call method var0 var2 with argument string var3, substitute result for var4 ",field_name = field_node . getAttribute ( 'name' ),var4 = var0 . var2 ( var3 )
"call the function force_text with 3 arguments: field_name, encoding and errors as a string 'replace', substitute the result for field_name.","call function var0 with 3 arguments: var2 encoding and errors as string var6, substitute result for var2 ","field_name = force_text ( field_name , encoding , errors = 'replace' )","var2 = var0 ( var2 , encoding , errors = var6 )"
"append string 'max_digits and decimal_places have been guessed, as this database handles decimal fields as float' to field_notes.",append string var0 to var1 ,"field_notes . append ( 'max_digits and decimal_places have been guessed, as this ' 'database handles decimal fields as float' )","var1 . append ( 'max_digits and decimal_places have been guessed, as this database handles decimal fields as float' )"
append string 'Field name made lowercase.' to field_notes.,append string var0 to var1 ,field_notes . append ( 'Field name made lowercase.' ),var1 . append ( var0 )
"append string ""Field renamed because it was a Python reserved word."" to field_notes.",append string var0 to var1 ,field_notes . append ( 'Field renamed because it was a Python reserved word.' ),var1 . append ( 'Field renamed because it was a Python reserved word.' )
"append string ""Field renamed because of name conflict."" to field_notes.",append string var0 to var1 ,field_notes . append ( 'Field renamed because of name conflict.' ),var1 . append ( 'Field renamed because of name conflict.' )
append string 'Field renamed to remove unsuitable characters.' to field_notes.,append string var0 to var1 ,field_notes . append ( 'Field renamed to remove unsuitable characters.' ),var1 . append ( var0 )
append a string 'This field type is a guess.' to field_notes.,append string var0 to var1 ,field_notes . append ( 'This field type is a guess.' ),var1 . append ( var0 )
"append string ""Field renamed because it contained more than one '_' in a row."" to field_notes.",append string var0 to var1 ,field_notes . append ( 'Field renamed because it contained more than one '_' in a row.' ),var1.append('Field renamed because it contained more than one '_' in a row.')
"append string ""Field renamed because it ended with '_'."" to field_notes.",append string var0 to var1 ,field_notes . append ( 'Field renamed because it ended with '_'.' ),var1.append('Field renamed because it ended with '_'.')
"append string ""Field renamed because it started with '_'."" to field_notes.",append string var0 to var1 ,field_notes . append ( 'Field renamed because it started with '_'.' ),var1.append('Field renamed because it started with '_'.')
"append string ""Field renamed because it wasn't a valid Python identifier."" to field_notes.",append string var0 to var1 ,field_notes . append ( 'Field renamed because it wasn't a valid Python identifier.' ),var1.append('Field renamed because it wasn't a valid Python identifier.')
field_notes is an empty list.,var0 is empty list.,field_notes = [ ],var0 = [ ]
"and return value of the function f.db_type called with an argument connection set to connection.   if f.null is false, append string append ""NOT NULL"" to field_output, otherwise append ""NULL"" to field_output.","and return value of function f var1 called with argument connection set to connection var2 if var3 is false, append string append var4 to var5 otherwise append var9 to var5 ",field_output . append ( '%sNULL' % ( 'NOT ' if not f . null else '' ) ),var5 . append ( '%sNULL' % ( 'NOT ' if not var3 else '' ) )
"append string ""PRIMARY KEY"" to field_output.",append string var0 to var1 ,field_output . append ( 'PRIMARY KEY' ),var1 . append ( 'PRIMARY KEY' )
"append string ""UNIQUE"" to field_output.",append string var0 to var1 ,field_output . append ( 'UNIQUE' ),var1 . append ( 'UNIQUE' )
"field_output is an list containing 2 elements: return value of the function qn called with an argument f.name,",var0 is list containing 2 elements: return value of function var1 called with argument var2 ,"field_output = [ qn ( f . name ) , f . db_type ( connection = connection ) ]","var0 = [ var1 ( var2 ) , f . db_type ( connection = connection ) ]"
call the method field_params.update with an argument new_params.1,call method var0 update with argument var1 1,field_params . update ( new_params ),var0 . update ( var1 )
substitute col_name for value under the 'db_column' key of the field_params dictionary.,substitute var0 for value under var2 key of var3 dict.,field_params [ 'db_column' ] = col_name,var3 [ var2 ] = var0
substitute sixth element of row for value under the 'decimal_places' key of the field_params.,substitute sixth element of row for value under var0 key of var1 ,field_params [ 'decimal_places' ] = row [ 5 ],var1 [ var0 ] = row [ 5 ]
"otherwise, value under the 'max_digits' key of the field_params is integer 10.   if sixth element of row is not None, substitute it for value under the 'decimal_places' key of the field_params,","otherwise, value under var0 key of var1 is integer 10 var5 if sixth element of row is not var6 substitute it for value under var7 key of var1 ",field_params [ 'decimal_places' ] = row [ 5 ] if row [ 5 ] is not None else 5,var1 [ var7 ] = row [ 5 ] if row [ 5 ] is not var6 else 5
substitute fifth element of row for value under the 'max_digits' key of the field_params.,substitute fifth element of row for value under var0 key of var1 ,field_params [ 'max_digits' ] = row [ 4 ],var1 [ var0 ] = row [ 4 ]
"if fifth element of row is not None, substitute it for value under the 'max_digits' key of the field_params,",if fifth element of row is not var0 substitute it for value under var1 key of var2 ,field_params [ 'max_digits' ] = row [ 4 ] if row [ 4 ] is not None else 10,var2 [ var1 ] = row [ 4 ] if row [ 4 ] is not var0 else 10
"convert fourth element of row to an integer, substitute it for value under the 'max_digits' key of the field_params.","convert fourth element of row to integer, substitute it for value under var0 key of var1 ",field_params [ 'max_length' ] = int ( row [ 3 ] ),var1 [ 'max_length' ] = int ( row [ 3 ] )
field_params is an empty dictionary.,var0 is empty dict.,field_params = { },var0 = { }
field_params is an instance of a class OrderedDict.,var0 is instance of class var1 ,field_params = OrderedDict ( ),var0 = var1 ( )
"call the method self.get_field_type with 3 arguments connection, table_name and row, assign the result to field_type, field_params,","call method self var1 with 3 arguments connection var3 and row, assign result to var2 var5 ","field_type , field_params , field_notes = self . get_field_type ( connection , table_name , row )","var2 , var5 , field_notes = self . var1 ( connection , var3 , row )"
"substitute field_type for field_type and new_params, respectively.",substitute var0 for var0 and var2 respectively.,"field_type , new_params = field_type","var0 , var2 = var0"
append '(' to field_type.,append '(' to field_type.,field_type += '(',field_type += '('
"append rel_to to string 'ForeignKey(, substitute the result for field_type.","append var0 to string 'ForeignKey(, substitute result for var3 ",field_type = 'ForeignKey(%s' % rel_to,var3 = 'ForeignKey(%s' % var0
field_type is a string 'NullBooleanField(',field_type is a string 'NullBooleanField(',field_type = 'NullBooleanField(',field_type = 'NullBooleanField('
field_type is a string 'TextField'.,var0 is string var1.,field_type = 'TextField',var0 = var1
"append rel_to to string 'ForeignKey(, append character ""'"" to it, substitute the result for field_type.","append var0 to string var2"" to it, substitute result for var3 ",field_type = 'ForeignKey('%s'' % rel_to,var3 = 'ForeignKey('%s'' % var0
"call the method connection.introspection.get_field_type with 2 arguments: second element of row and row, substitute the result for field_type.","call method connection.introspection var1 with 2 arguments: second element of row and row, substitute result for var2 ","field_type = connection . introspection . get_field_type ( row [ 1 ] , row )","var2 = connection . introspection . var1 ( row [ 1 ] , row )"
"call the function getInnerText with argument k, on the result call the method strip, for every k in keys, append the results to field_value list.","call function var0 with argument k, on result call method strip, for every k in keys, append results to var1 list.",field_value = [ getInnerText ( k ) . strip ( ) for k in keys ],var1 = [ var0 ( k ) . strip ( ) for k in keys ]
"call the function getInnerText with an argument node, call the strip method on the result, substitute the result for field_value.","call function var0 with argument node, call strip method on result, substitute result for var1 ",field_value = getInnerText ( node ) . strip ( ),var1 = var0 ( node ) . strip ( )
field_value is None.,var0 is var1 ,field_value = None,var0 = var1
"get the value under the field key of the self.cleaned_data dictionary, if it exists substitute it for field_value,","get value under field key of self var1 dict, if it exists substitute it for var2 ","field_value = self . cleaned_data . get ( field , None )","var2 = self . var1 . get ( field , None )"
"call the smart_text function with 3 arguments: field_value, value under the 'encoding' key of the options dictionary or,","call var0 function with 3 arguments: var2 value under var4 key of options dict or,","field_value = smart_text ( field_value , options . get ( 'encoding' , settings . DEFAULT_CHARSET ) , strings_only = True )","var2 = var0 ( var2 , options . get ( var4 , settings . DEFAULT_CHARSET ) , strings_only = True )"
substitute i-th element of value for field_value.,substitute i-th element of value for var0 ,field_value = value [ i ],var0 = value [ i ]
"if obj is an instance of Field, append to a list a tuple with 2 elements: field_name,   and poped value under the field_name key of the attrs dictionary, substitute the resulting list for fields.   sort fields elements with key being a lambda function with argument x and return value creation_counter filed of first element of x.","if var0 is instance of var1 append to list tuple with 2 elements: var2 and poped value under var2 key of var8 dict, substitute resulting list for fields var6 sort fields elements with key being lambda function with argument x and return value var9 filed of first element of var11",fields . sort ( key = lambda x : x [ 1 ] . creation_counter ),fields . sort ( key = lambda x : x [ 1 ] . var9 )
update fields dictionary with new_class.declared_fields.,update fields dict with var0 var2 ,fields . update ( new_class . declared_fields ),fields . update ( var0 . var2 )
fields is an tuple containing 3 entries: return value of the method models.CharField called with 4 arguments:,fields is tuple containing 3 entries: return value of method models var0 called with 4 arguments:,"fields = ( models . CharField ( name = 'cache_key' , max_length = 255 , unique = True , primary_key = True ) , models . TextField ( name = 'value' ) , models . DateTimeField ( name = 'expires' , db_index = True ) , )","fields = models . var0 ( name = 'cache_key' , max_length = 255 , unique = True , primary_key = True ) , models . TextField ( name = 'value' ) , models . DateTimeField ( name = 'expires' , db_index = True )"
"fields is an tuple containing instances of the class DateField, created with 3 arguments: input_formats set to input_date_formats,",fields is tuple containing instances of class var0 created with 3 arguments: var1 set to var3 ,"fields = ( DateField ( input_formats = input_date_formats , error_messages = { 'invalid' : errors [ 'invalid_date' ] } , localize = localize ) , TimeField ( input_formats = input_time_formats , error_messages = { 'invalid' : errors [ 'invalid_time' ] } , localize = localize ) , )","fields = var0 ( var1 = var3 , error_messages = { 'invalid' : errors [ 'invalid_date' ] } , localize = localize ) , TimeField ( var1 = input_time_formats , error_messages = { 'invalid' : errors [ 'invalid_time' ] } , localize = localize )"
"RemovedInDjango19Warning, stacklevel set to integer 2.   for field_name every obj in list created from the elements of the return value of the function six.iteritems with an argument attrs.",var0 var1 set to integer 2 var2 for var3 every var4 in list created from elements of return value of function var5 with argument var6 ,"fields = [ ( field_name , attrs . pop ( field_name ) ) for field_name , obj in list ( six . iteritems ( attrs ) ) if isinstance ( obj , Field ) ]","fields = [ ( var3 , var6 . pop ( var3 ) ) for var3 , var4 in list ( six . iteritems ( var6 ) ) if isinstance ( var4 , Field ) ]"
"call the function fields_for_model with 9 arguments: opts.model, opts.fields, opts.exclude, opts.widgets, formfield_callback,",call function var0 with 9 arguments: var1 var2 var3 var4 var5 ,"fields = fields_for_model ( opts . model , opts . fields , opts . exclude , opts . widgets , formfield_callback , opts . localized_fields , opts . labels , opts . help_texts , opts . error_messages )","fields = var0 ( var1 , var2 , var3 , var4 , var5 , opts . localized_fields , opts . labels , opts . help_texts , opts . error_messages )"
"call the method six.iteritems with an argument base.base_fields, convert it to a list and append fields to it, substitute the result for fields.","call method var0 with argument base var2 convert it to list and append fields to it, substitute result for fields.",fields = list ( six . iteritems ( base . base_fields ) ) + fields,fields = list ( six . iteritems ( base . var2 ) ) + fields
"call the method six.iteritems with an argument base.declared_fields, convert it to a list and append fields to it, substitute the result for fields.","call method var0 with argument base var2 convert it to list and append fields to it, substitute result for fields.",fields = list ( six . iteritems ( base . declared_fields ) ) + fields,fields = list ( six . iteritems ( base . var2 ) ) + fields
substitute new_class.declared_fields for fields.,substitute var0 var2 for fields.,fields = new_class . declared_fields,fields = var0 . var2
close file file.,close file file.,file . close ( ),file . close ( )
set the file position pointer at the beginning.,set file position pointer at beginning.,file . seek ( 0 ),file . seek ( 0 )
set the file position pointer at file_pos.,set file position pointer at var0 ,file . seek ( file_pos ),file . seek ( var0 )
"FILE is a file"".","FILE is file"".",FILE = 'file',FILE = 'file'
file is an instance of BytesIO class created with an argument: return value of the method data.read.,file is instance of var0 class created with argument: return value of method var1 ,file = BytesIO ( data . read ( ) ),file = var0 ( data . read ( ) )
file is an instance of BytesIO class created with an argument: value under the 'content' key of the data dictionary.,file is instance of var0 class created with argument: value under var2 key of data dict.,file = BytesIO ( data [ 'content' ] ),file = var0 ( data [ var2 ] )
substitute the result of the function data.temporary_file_path for file.,substitute result of function data var1 for file.,file = data . temporary_file_path ( ),file = data . var1 ( )
substitute file_or_path for file.,substitute var0 for file.,file = file_or_path,file = var0
"open file named file_or_path for reading, store the file object handle in file.","open file named var0 for reading, store file object handle in file.","file = open ( file_or_path , 'rb' )","file = open ( var0 , 'rb' )"
call the method tempfile.NamedTemporaryFile with arguments: suffix set to string '.upload' and dir set to settings.FILE_UPLOAD_TEMP_DIR.,call method var0 var1 with arguments: suffix set to string var3 and var4 set to settings var5 ,"file = tempfile . NamedTemporaryFile ( suffix = '.upload' , dir = settings . FILE_UPLOAD_TEMP_DIR )","file = var0 . var1 ( suffix = var3 , var4 = settings . var5 )"
call the method tempfile.NamedTemporaryFile with argument suffix set to string '.upload'.,call method var0 var1 with argument suffix set to string var3.,file = tempfile . NamedTemporaryFile ( suffix = '.upload' ),file = var0 . var1 ( suffix = var3 )
"call the method imp.find_module with 2 arguments: module_name and list containing element entry, assign the result to file_, _,","call method imp var1 with 2 arguments: var2 and list containing element entry, assign result to var4 _,","file_ , _ , _ = imp . find_module ( module_name , [ entry ] )","var4 , _ , _ = imp . var1 ( var2 , [ entry ] )"
close file_ file descriptor.,close var0 file descriptor.,file_ . close ( ),var0 . close ( )
append f to file_field_list.,append f to var0 ,file_field_list . append ( f ),var0 . append ( f )
file_field_list is an empty list.,var0 is empty list.,file_field_list = [ ],var0 = [ ]
FILE_INPUT_CONTRADICTION is an instance of object class.,var0 is instance of object class.,FILE_INPUT_CONTRADICTION = object ( ),var0 = object ( )
"call the method self.find_files with an argument string '.', substitute the result for file_list.","call method self var1 with argument string var2, substitute result for var3 ",file_list = self . find_files ( '.' ),var3 = self . var1 ( var2 )
FILE_MODIFIED is integer 1.,var0 is integer 1.,FILE_MODIFIED = 1,var0 = 1
call the function file_move_safe with content.temporary_file_path function result and full_path.,call function var0 with content var2 function result and var3 ,"file_move_safe ( content . temporary_file_path ( ) , full_path )","var0 ( content . var2 ( ) , var3 )"
"call the function file_move_safe with tmp_path, fname, allow_overwrite set to boolean True as arguments.",call function var0 with var2 var4 var5 set to boolean var7 as arguments.,"file_move_safe ( tmp_path , fname , allow_overwrite = True )","var0 ( var2 , var4 , var5 = var7 )"
substitute data.name for file_name.,substitute var0 for var1 ,file_name = data . name,var1 = var0
"get the value under the 'filename' key of the disposition dictionary, substitute it for file_name.","get value under var0 key of disposition dict, substitute it for var1 ",file_name = disposition . get ( 'filename' ),var1 = disposition . get ( var0 )
"call the function force_text with 3 arguments: file_name, encoding and errors set to string 'replace',","call function var0 with 3 arguments: var2 encoding and errors set to string var3,","file_name = force_text ( file_name , encoding , errors = 'replace' )","var2 = var0 ( var2 , encoding , errors = var3 )"
"substitute the result for file_name.   call the function unescape_entities with an argument file_name, use the result as an argument for the call to the self.IE_sanitize,",substitute result for var0 call function var3 with argument var0 use result as argument for call to self var5 ,file_name = self . IE_sanitize ( unescape_entities ( file_name ) ),var0 = self . var5 ( var3 ( var0 ) )
"call the method handler.file_complete with i-th element of counters as an argument, substitute the result for file_obj.","call method handler var1 with i-th element of counters as argument, substitute result for var2 ",file_obj = handler . file_complete ( counters [ i ] ),var2 = handler . var1 ( counters [ i ] )
"join dirpath and filename into path, use it as an argument for the call to the function os.path.normpath, substitute it for file_path.","join var0 and filename into path, use it as argument for call to function var1 substitute it for var2 ","file_path = os . path . normpath ( os . path . join ( dirpath , filename ) )","var2 = var1 ( os . path . join ( var0 , filename ) )"
"get the position in bytes from the start of the file, store it in file_pos.","get position in bytes from start of file, store it in var0 ",file_pos = file . tell ( ),var0 = file . tell ( )
"call the os.path.splitext with argument file_name, assign the result to the file_root and file_ext respectively.",call var0 with argument var1 assign result to var2 and var4 respectively.,"file_root , file_ext = os . path . splitext ( file_name )","var2 , var4 = var0 ( var1 )"
substitute data.size for file_name.,substitute var0 for var1 ,file_size = data . size,file_size = var0
"sum _cached_filenames, new_filenames and _error_files, store the result in filelist.",sum _cached_filenames var0 and var1 store result in var2 ,filelist = _cached_filenames + new_filenames + _error_files,var2 = _cached_filenames + var0 + var1
"for every fname in return value of the glob.glob1 function called with 2 arguments: self._dir and ,","for every var0 in return value of var1 function called with 2 arguments: var2 and ,","filelist = [ os . path . join ( self . _dir , fname ) for fname in glob . glob1 ( self . _dir , '*%s' % self . cache_suffix ) ]","filelist = [ os . path . join ( var2 , var0 ) for var0 in var1 ( var2 , '*%s' % self . cache_suffix ) ]"
substitute new_filenames for filelist.,substitute var0 for var1 ,filelist = new_filenames,var1 = var0
"divide num_entries by self._cull_frequency, convert the result to an integer, call the random.sample function with filelist and previous result as arguments, substitute the result for filelist.","divide var0 by var1 convert result to integer, call var2 function with var3 and previous result as arguments, substitute result for var3 ","filelist = random . sample ( filelist , int ( num_entries / self . _cull_frequency ) )","var3 = var2 ( var3 , int ( var0 / var1 ) )"
"call the self._list_cache_files method, substitute the result for filelist.","call var0 method, substitute result for var1 ",filelist = self . _list_cache_files ( ),var1 = var0 ( )
filemsg is an empty string.,var0 is empty string.,filemsg = '',var0 = ''
"filemsg is a string 'file %s, ', where '%s' is replaced with origin.",var0 is string var1 var2 var3 is replaced with origin.,"filemsg = 'file %s, ' % origin",var0 = var1 % origin
"call the function cleanup_url with an argument url, assign the result to filename and display_url, respectively.","call function var0 with argument url, assign result to filename and var1 respectively.","filename , display_url = cleanup_url ( url )","filename , var1 = var0 ( url )"
call the method filename.encode with an argument string 'ascii',call method var0 with argument string var1,filename . encode ( 'ascii' ),var0 ( var1 )
"filename is a tuple containing 3 initial elements: string 'utf-8', and empty string and filename.","filename is tuple containing 3 initial elements: string var0, and empty string and filename.","filename = ( 'utf-8' , '' , filename )","filename = var0 , '' , filename"
substitute ev.filename for filename.,substitute ev.filename for filename.,filename = ev . filename,filename = ev . filename
substitute file for filename.,substitute file for filename.,filename = file,filename = file
substitute file.name for filename.,substitute var0 for filename.,filename = file . name,filename = var0
"call the method filename.encode with an argument string 'utf-8', substitute the result for filename.","call method var0 with argument string var1, substitute result for filename.",filename = filename . encode ( 'utf-8' ),filename = var0 ( var1 )
truncate the last element of filename.,truncate last element of filename.,filename = filename [ : - 1 ],filename = filename [ : - 1 ]
"truncate last 9 elements of filename and append it string "".py"".",truncate last 9 elements of filename and append it string var0.,filename = filename [ : - 9 ] + '.py',filename = filename [ : - 9 ] + '.py'
"call the os.path.basename with path as argument, substitute the result for filename.","call os.path.basename with path as argument, substitute result for filename.",filename = os . path . basename ( path ),filename = os . path . basename ( path )
"call the function os.path.basename with an arguments path, substitute the result for filename.","call function os.path.basename with arguments path, substitute result for filename.",filename = os . path . basename ( path ),filename = os . path . basename ( path )
"join to_path and name into a valid system path, substitute the result for filename.","join var0 and name into valid system path, substitute result for filename.","filename = os . path . join ( to_path , name )","filename = os . path . join ( var0 , name )"
"join to_path and name into a file path, substitute the result for filename.","join var0 and name into file path, substitute result for filename.","filename = os . path . join ( to_path , name )","filename = os . path . join ( var0 , name )"
"split tmp at '/' character, substitute the last element of the result for filename.","split var0 at var1 character, substitute last element of result for filename.",filename = tmp . split ( '/' ) [ - 1 ],filename = var0 . split ( var1 ) [ - 1 ]
"call the traceback.extract_tb method with argument tb, substitute the first element of last row of the result to filename.","call traceback var1 method with argument tb, substitute first element of last row of result to filename.",filename = traceback . extract_tb ( tb ) [ - 1 ] [ 0 ],filename = traceback . var1 ( tb ) [ - 1 ] [ 0 ]
append filename to filenames.,append filename to filenames.,filenames . append ( filename ),filenames . append ( filename )
filenames is an empty list.,filenames is empty list.,filenames = [ ],filenames = [ ]
"define lambda function that returns self.file.fileno field, use it as an argument for property function, put the result in fileno.","define lambda function var0 returns var1 field, use it as argument for property function, put result in var2 ",fileno = property ( lambda self : self . file . fileno ),var2 = property ( lambda self : var1 )
"return the absolute path of file path filepath, substitute it for filepath.",return absolute path of file path var0 substitute it for var0 ,filepath = os . path . abspath ( filepath ),var0 = os . path . abspath ( var0 )
"where '%s' is replaced with first element of bits.   call the method parser.compile_filter with second element of bits as an argument, substitute the result for filepath.","var0 var1 is replaced with first element of bits var2 call method parser var4 with second element of bits as argument, substitute result for var5 ",filepath = parser . compile_filter ( bits [ 1 ] ),var5 = parser . var4 ( bits [ 1 ] )
"call the function self.filepath.resolve with an argument context, substitute the result for filepath.","call function var0 with argument context, substitute result for var1 ",filepath = self . filepath . resolve ( context ),var1 = var0 ( context )
append entry to files list.,append entry to files list.,files . append ( entry ),files . append ( entry )
_get_files is getter function for FILES attribute of this class.,var0 is var1 function for var2 attribute of var3 class.,FILES = property ( _get_files ),var2 = property ( var0 )
"filesize_number_format is an lambda function with an argument value, return value is the result of the method formats.number_format,","var0 is lambda function with argument value, return value is result of method formats var1 ","filesize_number_format = lambda value : formats . number_format ( round ( value , 1 ) , 1 )","filesize_var1 = lambda value : formats . var1 ( round ( value , 1 ) , 1 )"
fill_to is an integer 7.,var0 is integer 7.,fill_to = 7,var0 = 7
fill_to is an integer 8.,var0 is integer 8.,fill_to = 8,var0 = 8
"of the request.META dictionary is contained in settings.INTERNAL_IPS, otherwise use string 'EXTERNAL',   and result of the method record.getMessage.   call the function get_exception_reporter_filter with an argument request, substitute the result for filter.","of request var0 dict is contained in settings var2 otherwise use string var4 var5 and result of method record var8 call function var9 with argument request, substitute result for filter.",filter = get_exception_reporter_filter ( request ),filter = var9 ( request )
FILTER_ARGUMENT_SEPARATOR is a string ':'.,var0 is string var1.,FILTER_ARGUMENT_SEPARATOR = ':',var0 = var1
"call the method parser.compile_filter with an argument string ""var|%s"", where '%s' is replaced with rest, substitute the result for filter_expr.","call method parser var1 with argument string var2 var3 var4 is replaced with rest, substitute result for var5 ",filter_expr = parser . compile_filter ( 'var|%s' % ( rest ) ),var5 = parser . var1 ( 'var|%s' % rest )
"call the method self.compile_filter with an argument token.contents, substitute the result for filter_expression.",call method self var1 with argument var2 substitute result for var3 ,filter_expression = self . compile_filter ( token . contents ),var3 = self . var1 ( var2 )
substitute name for filter_func._filter_name.,substitute name for var0 _filter_name.,filter_func . _filter_name = name,var0 . _filter_name = name
"call the method parser.find_filter with an argument filter_name, substitute the result for filter_func.",call method parser var1 with argument var2 substitute result for var4 ,filter_func = parser . find_filter ( filter_name ),var4 = parser . var1 ( var2 )
"get '_filter_name' attribute of the func object, if it exists, substitute it for filter_name, if not, filter_name is None.","get var0 attribute of var1 object, if it exists, substitute it for filter_name, if not, filter_name is var2 ","filter_name = getattr ( func , '_filter_name' , None )","filter_name = getattr ( var1 , var0 , var2 )"
"call the methof match.group with an argument ""filter_name"", substitute the result for filter_name.","call var0 var1 with argument var2, substitute result for filter_name.",filter_name = match . group ( 'filter_name' ),filter_name = var1 ( 'filter_name' )
"filter_raw_string is a raw string ""^(?P<constant>%(constant)s)|^(?P<var>[%(var_chars)s]+|%(num)s)| (?:\s*%(filter_sep)s\s*","filter_raw_string is a raw string ""^(?P<constant>%(constant)s)|^(?P<var>[%(var_chars)s]+|%(num)s)| (?:\s*%(filter_sep)s\s*","filter_raw_string = r''' ^(?P<constant>%(constant)s)| ^(?P<var>[%(var_chars)s]+|%(num)s)|  (?:\s*%(filter_sep)s\s*      (?P<filter_name>\w+)          (?:%(arg_sep)s              (?:               (?P<constant_arg>%(constant)s)|               (?P<var_arg>[%(var_chars)s]+|%(num)s)              )          )?  )''' % { 'constant' : constant_string , 'num' : r'[-+\.]?\d[\d\.e]*' , 'var_chars' : '\w\.' , 'filter_sep' : re . escape ( FILTER_SEPARATOR ) , 'arg_sep' : re . escape ( FILTER_ARGUMENT_SEPARATOR ) , }","filter_raw_string = r''' ^(?P<constant>%(constant)s)| ^(?P<var>[%(var_chars)s]+|%(num)s)|  (?:\s*%(filter_sep)s\s*      (?P<filter_name>\w+)          (?:%(arg_sep)s              (?:               (?P<constant_arg>%(constant)s)|               (?P<var_arg>[%(var_chars)s]+|%(num)s)              )          )?  )''' % { 'constant' : constant_string , 'num' : r'[-+\.]?\d[\d\.e]*' , 'var_chars' : '\w\.' , 'filter_sep' : re . escape ( FILTER_SEPARATOR ) , 'arg_sep' : re . escape ( FILTER_ARGUMENT_SEPARATOR ) , }"
"(?P<filter_name>\w+)(?:%(arg_sep)s(?:(?P<constant_arg>%(constant)s)|(?P<var_arg>[%(var_chars)s]+|%(num)s)))?)"",   where 'constant' is replaced with constant_string, 'num' with raw string '[-+\.]?\d[\d\.e]*', 'var_chars' with string ""\w\."",   'filter_sep' with result of the function re.escape called with an argument FILTER_SEPARATOR,   anbd 'arg_sep' with result of the function re.escape called with an argument FILTER_ARGUMENT_SEPARATOR.   call the function re.compile with 2 arguments: filter_raw_string and result for bitwise OR on 2 operands re.UNICODE and re.VERBOSE,","(?P<filter_name>\w+)(?:%(arg_sep)s(?:(?P<constant_arg>%(constant)s)|(?P<var_arg>[%(var_chars)s]+|%(num)s)))?)"",   where 'constant' is replaced with constant_string, 'num' with raw string '[-+\.]?\d[\d\.e]*', 'var_chars' with string ""\w\."",   'filter_sep' with result of the function re.escape called with an argument FILTER_SEPARATOR,   anbd 'arg_sep' with result of the function re.escape called with an argument FILTER_ARGUMENT_SEPARATOR.   call the function re.compile with 2 arguments: filter_raw_string and result for bitwise OR on 2 operands re.UNICODE and re.VERBOSE,","filter_re = re . compile ( filter_raw_string , re . UNICODE | re . VERBOSE )","filter_re = re . compile ( filter_raw_string , re . UNICODE | re . VERBOSE )"
and 'Comment' for TOKEN_COMMENT.   FILTER_SEPARATOR is a string '|'.,and var0 for var1 var3 is string var5.,FILTER_SEPARATOR = '|',var3 = var5
"get the value under f key of dictionary under 'filters' key of self.config dictionary,","get value under f key of dict under var0 key of self.config dict,",filterer . addFilter ( self . config [ 'filters' ] [ f ] ),filterer . addFilter ( self . config [ var0 ] [ f ] )
append a tuple with 2 arguments: filter_func and args to filters.,append tuple with 2 arguments: var0 and var1 to filters.,"filters . append ( ( filter_func , args ) )","filters . append ( ( var0 , var1 ) )"
"call the method self.configure_filter with an argument value under name key of filters dictionary,","call method self var1 with argument value under name key of filters dict,",filters [ name ] = self . configure_filter ( filters [ name ] ),filters [ name ] = self . var1 ( filters [ name ] )
filters is an empty list.,filters is empty list.,filters = [ ],filters = [ ]
"get config dictionary element under 'filters' key, if it exists substitute it for filters, if not, filters is EMPTY_DICT.","get var0 dict element under var1 key, if it exists substitute it for filters, if not, filters is var2 ","filters = config . get ( 'filters' , EMPTY_DICT )","filters = var0 . get ( var1 , var2 )"
"get value under the 'filters' key of the config dictioanry, if it exists substitute it for filters, if not filters is None.","get value under var0 key of var1 var2 if it exists substitute it for filters, if not filters is var3 ","filters = config . get ( 'filters' , None )","filters = var1 . get ( var0 , var3 )"
"remove config dictionary element under 'filter' key, if it exists substitute it for filters, if not, filters is None.","remove var0 dict element under var1 key, if it exists substitute it for filters, if not, filters is var2 ","filters = config . pop ( 'filters' , None )","filters = var0 . pop ( 'filters' , var2 )"
substitute string 'checked' for value under the 'checked' key of final_attrs dictionary.,substitute string var0 for value under var0 key of var2 dict.,final_attrs [ 'checked' ] = 'checked',var2 [ var0 ] = var0
"call the method self._format_value with an argument value, use the result as an argument for the call to the function force_text,","call method var0 with argument value, use result as argument for call to function var1 ",final_attrs [ 'value' ] = force_text ( self . _format_value ( value ) ),final_attrs [ 'value' ] = var1 ( self . _format_value ( value ) )
"call the function force_text with an argument value, substitute the result for value under the 'value' key of the final_attrs.","call function var0 with argument value, substitute result for value under var2 key of var3 ",final_attrs [ 'value' ] = force_text ( value ),var3 [ var2 ] = var0 ( value )
"call the dict function with 2 arguments: final_attrs and id set to string '%s_%s', where '%s' is replaced with id_ and i,","call var0 function with 2 arguments: var1 and id set to string var3 var4 var5 is replaced with var6 and i,","final_attrs = dict ( final_attrs , id = '%s_%s' % ( id_ , i ) )","var1 = var0 ( var1 , id = var3 % ( var6 , i ) )"
"call the method dict with 4: self.attrs, type as self.input_type, name as self.name, value as self.choice_value,",call method var0 with 4: var1 type as self var3 name as var4 value as self var6 ,"final_attrs = dict ( self . attrs , type = self . input_type , name = self . name , value = self . choice_value )","final_attrs = var0 ( var1 , type = self . var3 , name = var4 , value = self . var6 )"
"call the method self.build_attrs with 2 arguments: attrs and name set to name, substitute the result for final_attrs.","call method self var1 with 2 arguments: attrs and name set to name, substitute result for var2 ","final_attrs = self . build_attrs ( attrs , name = name )","var2 = self . var1 ( attrs , name = name )"
"call the method self.build_attrs with arguments attrs, name as name, substitute the result for final_attrs.","call method self var1 with arguments attrs, name as name, substitute result for var2 ","final_attrs = self . build_attrs ( attrs , name = name )","var2 = self . var1 ( attrs , name = name )"
"call the method self.build_attrs with 3 arguments: attrs, type as a string 'checkbox', name as name, substitute the result for final_attrs.","call method self var1 with 3 arguments: var2 type as string var3, name as name, substitute result for var4 ","final_attrs = self . build_attrs ( attrs , type = 'checkbox' , name = name )","var4 = self . var1 ( var2 , type = var3 , name = name )"
"call the method self.build_attrs with 3 arguments: attrs, type as self.input_type, name as name, substitute the result for final_attrs.","call method self var1 with 3 arguments: attrs, type as self var3 name as name, substitute result for var4 ","final_attrs = self . build_attrs ( attrs , type = self . input_type , name = name )","var4 = self . var1 ( attrs , type = self . var3 , name = name )"
"call the method self.build_attrs with 3 arguments: attrs, type set to self.input_type, name set to name,","call method self var1 with 3 arguments: attrs, type set to self var3 name set to name,","final_attrs = self . build_attrs ( attrs , type = self . input_type , name = name )","final_attrs = self . var1 ( attrs , type = self . var3 , name = name )"
"call the method self.build_attrs with an argument attrs, substitute the result for final_attrs.","call method self var1 with argument attrs, substitute result for var2 ",final_attrs = self . build_attrs ( attrs ),var2 = self . var1 ( attrs )
append string '-- The following references should be added but depend on non-existent tables:' to the final_output.,append string var0 to var1 ,final_output . append ( '-- The following references should be added but depend on non-existent tables:' ),var1 . append ( var0 )
extend final_output with alter_sql.,extend var0 with var1 ,final_output . extend ( alter_sql ),var0 . extend ( var1 )
"use the result as an argument for the call to the method final_output.extend.   call the method connection.creation.sql_for_pending_references with 3 arguments: refo, style and pending_references,",use result as argument for call to method var0 extend var2 call method connection.creation var3 with 3 arguments: var6 style and var4 ,"final_output . extend ( connection . creation . sql_for_pending_references ( model , style , pending_references ) )","var0 . extend ( connection . creation . var3 ( model , style , var4 ) )"
"call the method connection.creation.sql_for_pending_references with 3 arguments: refo, style and pending_references,",call method connection.creation var0 with 3 arguments: var2 style and var1 ,"final_output . extend ( connection . creation . sql_for_pending_references ( refto , style , pending_references ) )","final_output . extend ( connection . creation . var0 ( refto , style , var1 ) )"
call the method final_output.extend with an argument output.,call method var0 extend with argument output.,final_output . extend ( output ),var0 . extend ( output )
final_output is an empty list.,var0 is empty list.,final_output = [ ],var0 = [ ]
"execute regardless of the exception being raised,","execute regardless of exception being raised,",finally :,finally:
"append the result to the '\n' string, write it to self.stdout.   finally perform,","append result to var0 string, write it to var1 finally perform,",finally :,finally:
"use_natural_foreign_keys set to use_natural_foreign_keys, use_natural_primary_keys set to use_natural_primary_keys,   and stream set to stream, if the stream is true, otherwise stream set to self.stdout.   finally perform,","var0 set to var0 var1 set to var1 and stream set to stream, if stream is true, otherwise stream set to var7 var5 finally perform,",finally :,finally:
"finally, perform,","finally, perform,",finally :,finally:
"with all occurrences of '%s' replaced with app_name and model._meta.object_name and e, respectively.   finally perform,","with all occurrences of var0 replaced with var1 and model._meta var4 and e, respectively var5 finally perform,",finally :,finally:
"finally,","finally,",finally :,finally:
"call the function hook with an argument entry, substitute the result for finder.","call function hook with argument entry, substitute result for finder.",finder = hook ( entry ),finder = hook ( entry )
substitute the value under the entry key of the sys.path_importer_cache dictionary for finder.,substitute value under entry key of sys var0 dict for finder.,finder = sys . path_importer_cache [ entry ],finder = sys . var0 [ entry ]
"substitute 3 successive elements starting from the i-th index of pieces for first, lang and priority, respectively.","substitute 3 successive elements starting from i-th index of pieces for first var0 and priority, respectively.","first , lang , priority = pieces [ i : i + 3 ]","first , var0 , priority = pieces [ i : i + 3 ]"
first and second are None.,first and second are var0 ,first = second = None,first = second = var0
"substitute list_ for first_item and second_item, respectively.",substitute var0 for var1 and var2 respectively.,"first_item , second_item = list_","var1 , var2 = var0"
call the method fixture.close.,call method var0 ,fixture . close ( ),var0 ( )
"call the function open_method with arguments: fixture_file and mode, substitute the result for fixture.","call function var0 with arguments: var1 and mode, substitute result for fixture.","fixture = open_method ( fixture_file , mode )","fixture = var0 ( var1 , mode )"
"call the method os.path.dirname with an argument fixture_name, append it to a list, substitute resulting list for fixture_dirs.","call method os.path.dirname with argument var0 append it to list, substitute resulting list for var1 ",fixture_dirs = [ os . path . dirname ( fixture_name ) ],var1 = [ os . path . dirname ( var0 ) ]
"join dir_ and return value of the function os.path.dirname called with an argument fixture_name into a valid file path,","join var0 and return value of function os.path.dirname called with argument var1 into valid file path,","fixture_dirs = [ os . path . join ( dir_ , os . path . dirname ( fixture_name ) ) for dir_ in fixture_dirs ]","fixture_dirs = [ os . path . join ( var0 , os . path . dirname ( var1 ) ) for var0 in fixture_dirs ]"
substitute self.fixture_dirs for fixture_dirs.,substitute self var1 for var1 ,fixture_dirs = self . fixture_dirs,var1 = self . var1
fixture_name and result of the function humanize called with an argument fixture_dir.   extend fixture_files list with fixture_files_in_dir.,var0 and result of function humanize called with argument var1 extend var3 list with var5 ,fixture_files . extend ( fixture_files_in_dir ),var3 . extend ( var5 )
fixture_files is an empty list.,var0 is empty list.,fixture_files = [ ],var0 = [ ]
"append tuple containing 3 elements: candidate, fixture_dir and fixture_name to list fixture_files_in_dir.",append tuple containing 3 elements: didate var0 and var1 to list var3 ,"fixture_files_in_dir . append ( ( candidate , fixture_dir , fixture_name ) )","var3 . append ( ( candidate , var0 , var1 ) )"
"where '%s' is replaced with result of the function humanize, called with an argument fixture_dir.   fixture_files_in_dir is an empty list.","var0 var1 is replaced with result of function humanize, called with argument var2 var5 is empty list.",fixture_files_in_dir = [ ],var5 = [ ]
"call the method self.parse_name with an argument fixture_label, substitute the result for fixture_name, ser_fmt, cmp_fmt, respective.",call method self var1 with argument var2 substitute result for var4 var6 var8 respective.,"fixture_name , ser_fmt , cmp_fmt = self . parse_name ( fixture_label )","var4 , var6 , var8 = self . var1 ( var2 )"
"call the method os.path.basename with an argument fixture_name, substitute the result for fixture_name.",call method var0 with argument var1 substitute result for var1 ,fixture_name = os . path . basename ( fixture_name ),var1 = var0 ( var1 )
"append it to a list, perform the previous for every dir_ in fixture_dirs, substitute the resulting list for fixture_dirs.   call the method os.path.basename with an argument fixture_name, substitute the result for fixture_name.","append it to list, perform previous for every var0 in var1 substitute resulting list for var1 call method var4 with argument var5 substitute result for var5 ",fixture_name = os . path . basename ( fixture_name ),var5 = var4 ( var5 )
"call the function _get_foreign_key with 3 arguments: parent_model, model and fk_name=fk_name, substitute the result for fk.","call function var0 with 3 arguments: var1 model and fk_name=fk_name, substitute result for var6 ","fk = _get_foreign_key ( parent_model , model , fk_name = fk_name )","var6 var7 var0(var1, model, var2 var7 var2)"
substitute first element of fks_to_parent for fk.,substitute first element of var0 for fk.,fk = fks_to_parent [ 0 ],fk = var0 [ 0 ]
"fks_to_parent is a list containing f for every f in opts.fields, only if f is an instance of ForeignKey,",var0 is list containing f for every f in var1 only if f is instance of var2 ,"fks_to_parent = [ f for f in opts . fields if isinstance ( f , ForeignKey ) and ( f . rel . to == parent_model or f . rel . to in parent_model . _meta . get_parent_list ( ) ) ]","var0 = [ f for f in var1 if isinstance ( f , var2 ) and ( f . rel . to == parent_model or f . rel . to in parent_model . _meta . get_parent_list ( ) ) ]"
"fks_to_parent is a list containing f, for every f in opts.fields if f.name equals fk_name.","var0 is list containing f, for every f in var1 if var2 equals var3 ",fks_to_parent = [ f for f in opts . fields if f . name == fk_name ],var0 = [ f for f in var1 if var2 == var3 ]
"evaluate binary expression with 4 operands: os.O_WRONLY, binary or os.O_CREAT, binary or os.O_EXCL,",evaluate binary expression with var0 operands: os var3 binary or os var4 binary or os var6 ,"flags = ( os . O_WRONLY | os . O_CREAT | os . O_EXCL | getattr ( os , 'O_BINARY' , 0 ) )","flags =(os.var0ar3 var0 os.var0ar4 var0 os.var0ar6 var0 getattr(os,var0ar0'O_BINARY'var0 var0))"
flags is a integer 0.,flags is integer 0.,flags = 0,flags = 0
update flat dictionary with d.,update flat dict with var0,flat . update ( d ),flat . update ( d )
"flat is an empty dictionary,","flat is empty dict,",flat = { },flat = { }
"for 'maxSpare', value under the key 'minspare' of options dictionary converted to an integer for 'minSpare',   value under the key 'maxchildren' of options dictionary converted to an integer, for 'maxChildren',   and value under the key 'maxrequests' of options dictionary converted to an integer, for 'maxRequests'.   append string '_fork' to flup_module.","for var0, value under key var1 of options dict converted to integer for var3 var6 value under key var9 of options dict converted to integer, for var11 var6 and value under key var14 of options dict converted to integer, for var16 var6 append string var19 to var21 ",flup_module += '_fork',var21 += var19
"append value under the 'protocol' key of the options dictionary to the string 'server.', substitute it for flup_module.","append value under var0 key of options dict to string var1, substitute it for var2 ",flup_module = 'server.' + options [ 'protocol' ],var2 = 'server.' + options [ var0 ]
"define lambda function that returns self.file.flush field, use it as an argument for property function, put the result in flush.","define lambda function var0 returns var1 field, use it as argument for property function, put result in flush.",flush = property ( lambda self : self . file . flush ),flush = property ( lambda self : var1 )
"get config dictionary element under 'format' key, if it exists substitute it for fmt, if not, fmt is None.","get var0 dict element under var1 key, if it exists substitute it for var2 if not var2 is var4 ","fmt = config . get ( 'format' , None )","var2 = var0 . get ( var1 , var4 )"
"call the function get_format with an argument string 'DATE_FORMAT', substitute it for fmt.","call function var0 with argument string var2, substitute it for var3 ",fmt = get_format ( 'DATE_FORMAT' ),var3 = var0 ( var2 )
call the function fn with list of arguments args and dictionary of argument values kwargs.,call function var0 with list of arguments var1 and dict of argument values var2 ,"fn ( * args , ** kwargs )","var0 ( * var1 , ** var2 )"
substitute code_changed for fn.,substitute var0 for var1 ,fn = code_changed,var1 = var0
substitute inotify_code_changed for fn.,substitute var0 for var1 ,fn = inotify_code_changed,var1 = var0
"fname is a string ""%s-%s.log"", with '%s' replaced by timestamp and absolute value of the return value of the function id with argument self, respectively.","var0 is string var1, with var2 replaced by var3 and absolute value of return value of function id with argument self, respectively.","fname = '%s-%s.log' % ( timestamp , abs ( id ( self ) ) )","var0 = '%s-%s.log' % ( var3 , abs ( id ( self ) ) )"
"call the function self._key_to_file with key and version as arguments, substitute it for fname.","call function self._key_to_file with key and version as arguments, substitute it for var0 ","fname = self . _key_to_file ( key , version )","var0 = self . _key_to_file ( key , version )"
"for every _ and nodelist in self.conditions_nodelists,",for every _ and nodelist in self var1 ,"for _ , nodelist in self . conditions_nodelists : ","for _ , nodelist in self . var1 : "
"for every __ in iterator,",for every var0 in var1 ,for __ in iterator : ,for var0 in var1 : 
"for every __ in range of integers from 0 up to sep subtracted from fill_to,",for every var0 in range of integers from 0 up to sep subtracted from var1 ,for __ in xrange ( fill_to - sep ) : ,for var0 in xrange ( var1 - sep ) : 
"for every field_name and field_value in return value of the function six.iteritems called with value under the 'fields' key of dictionary d,","for every var0 and var2 in return value of function var4 called with value under var5 key of dict d,","for ( field_name , field_value ) in six . iteritems ( d [ 'fields' ] ) : ","for ( var0 , var2 ) in var4 ( d [ var5 ] ) : "
"for every k and v in items of dictionary kwargs, respectively,","for every k and v in items of dict var0 respectively,","for ( k , v ) in kwargs . items ( ) : ","for ( k , v ) in var0 . items ( ) : "
"for every k and v in result of the call to the method type_.__dict__.items,",for every k and v in result of call to method var0 ,"for ( k , v ) in type_ . __dict__ . items ( ) : ","for ( k , v ) in var0 ( ) : "
loop through shellcode converted into a bytearray,loop through var0 converted into var1,for a in bytearray ( shellcode ) : ,for a in var1 ( var0 ) : 
loop through z converted into a bytearray,loop through z converted into var0,for a in bytearray ( z ) : ,for a in var0 ( z ) : 
"if not accept is an empty string.   call the function parse_accept_lang_header with an argument accept, for every accept_lang and unused in the result,","if not accept is empty string var0 call function var1 with argument accept, for every var2 and unused in result,","for accept_lang , unused in parse_accept_lang_header ( accept ) : ","for var2 , unused in var1 ( accept ) : "
for every accessor_name and object_list is return value of the method self.m2m_data.items.,for every var0 and var1 is return value of method var3 ,"for accessor_name , object_list in self . m2m_data . items ( ) : ","for var0 , var1 in var3 ( ) : "
"for every alternative in self.alternatives,",for every alternative in var0 ,for alternative in self . alternatives : ,for alternative in var0 : 
"for every app in sorted return value of the commands_dict.keys function,","for every var0 in sorted return value of var1 keys function,",for app in sorted ( commands_dict . keys ( ) ) : ,for var0 in sorted ( var1 . keys ( ) ) : 
"for every app_config and model_list in app_list,",for every var0 and var1 in var3 ,"for app_config , model_list in app_list : ","for var0 , var1 in var3 : "
"for eery app_config in app_configs,",for eery var0 in var1 ,for app_config in app_configs : ,for var0 in var0s : 
"apps registry is ready. Check that you don't make non-lazy gettext calls at import time..   for every app_config in app_configs,",var0 registry is ready var1 var2 var3 don't make non-lazy var6 calls at import time var7 for every var8 in var10 ,for app_config in app_configs : ,for var8 in var8s : 
"for every app_config in return value of the method apps.get_app_configs,",for every var0 in return value of method apps var2 ,for app_config in apps . get_app_configs ( ) : ,for var0 in apps . var2 ( ) : 
"for ever app_config in return value of the method apps.get_app_configs,",for ever var0 in return value of method apps var2 ,for app_config in apps . get_app_configs ( ) : ,for var0 in apps . var2 ( ) : 
"for every app_config in return value of the call to the function apps.get_app_configs,",for every var0 in return value of call to function apps var2 ,for app_config in apps . get_app_configs ( ) : ,for var0 in apps . var2 ( ) : 
"for app_config in return value of the method apps.get_app_configs,",for var0 in return value of method apps var2 ,for app_config in apps . get_app_configs ( ) : ,for var0 in apps . var2 ( ) : 
"call the function apps.get_app_configs, for every app_config in result,","call function apps var1 for every var2 in result,",for app_config in apps . get_app_configs ( ) : ,for var2 in apps . var1 ( ) : 
"call the method apps.get_app_configs, for app_config in the result,","call method apps var1 for var2 in result,",for app_config in apps . get_app_configs ( ) : ,for var2 in apps . var1 ( ) : 
"call the method apps.get_app_configs, for every app_config in the result,","call method apps var1 for every var2 in result,",for app_config in apps . get_app_configs ( ) : ,for var2 in apps . var1 ( ) : 
"for every app_config in reversed list created out of the return value of the function apps.get_app_configs,",for every var0 in reversed list created out of return value of function apps var2 ,for app_config in reversed ( list ( apps . get_app_configs ( ) ) ) : ,for var0 in reversed ( list ( apps . var2 ( ) ) ) : 
"for app_config in reversed list of apps.get_app_configs() elements,","for var0 in reversed list of apps.get_app_configs() elements,",for app_config in reversed ( list ( apps . get_app_configs ( ) ) ) : ,for var0 in reversed ( list ( apps . var2 ( ) ) ) : 
"for every app_dir in app_dirs,",for every var0 in var1 ,for app_dir in app_dirs : ,for var0 in var0s : 
"for every app_label and app_migrations in result of the method changes.items,",for every var0 and var1 in result of method var3 ,"for app_label , app_migrations in changes . items ( ) : ","for var0 , var1 in var3 ( ) : "
"boolean True for 'ask_merge'.   for every app_label and migration_names in result of the method conflicts.items,",boolean var0 for var1 var2 for every var3 and var5 in result of method var7 ,"for app_label , migration_names in conflicts . items ( ) : ","for var3 , var5 in var7 ( ) : "
"for every app_label in app_labels,",for every var0 in var1 ,for app_label in app_labels : ,for var0 in var0s : 
"for every app_label in bad_app_labels,",for every var0 in var1 ,for app_label in bad_app_labels : ,for var0 in var1 : 
"for every app_name and model_list in return value of manifest.items function,","for every var0 and var1 in return value of var3 function,","for app_name , model_list in manifest . items ( ) : ","for var0 , var1 in var3 ( ) : "
"for every app_name and mode_list in return value of manifest.items method,","for every var0 and var1 in return value of manifest.items method,","for app_name , model_list in manifest . items ( ) : ","for var0 , model_list in manifest . items ( ) : "
"for every app_name and model_list in return value of manifest.items method,","for every var0 and var1 in return value of manifest.items method,","for app_name , model_list in manifest . items ( ) : ","for var0 , var1 in manifest . items ( ) : "
"for every app_name and namespace_list in pattern.app_dict.items method return value,","for every var0 and var1 in pattern var4 items method return value,","for app_name , namespace_list in pattern . app_dict . items ( ) : ","for var0 , var1 in pattern . var4 . items ( ) : "
"for every app_name is app_names,",for every var0 is var1 ,for app_name in app_names : ,for var0 in var0s : 
for every app_name in app_names.,for every var0 in var1 ,for app_name in app_names : ,for var0 in var0s : 
"for every arg in args,",for every var0 in var1 ,for arg in args : ,for var0 in var0s : 
"for arg in argv list without the first two elements,","for var0 in var1 list var2 first two elements,",for arg in argv [ 2 : ] : ,for var0 in var0v [ 2 : ] : 
"call the function six.itervalues with an argument kwargs, convert the result to a list and append it to a list containing args,",call function var0 with argument var1 convert result to list and append it to list containing var2 ,for arg in list ( args ) + list ( six . itervalues ( kwargs ) ) : ,for arg in list ( var2 ) + list ( six . itervalues ( var1 ) ) : 
"for every attachment in self.attachments,",for every attachment in var0 ,for attachment in self . attachments : ,for attachment in var0 : 
"call the method base.__dict__.items, for every attr and value in the result,","call method var0 for every var1 and value in result,","for attr , value in base . __dict__ . items ( ) : ","for var1 , value in var0 ( ) : "
"convert items of attrs dictionary to list of tuples, for every attr and value in it,","convert items of var0 dict to list of var2 for every var1 and value in it,","for attr , value in list ( attrs . items ( ) ) : ","for var1 , value in list ( var0 . items ( ) ) : "
"with different 3 string arguments, the others are results of the call to the function MovedModule called with 3 string arguments.   for every attr in _moved_attributes,","with different 3 string arguments, var0 are results of call to function var1 called with 3 string arguments var2 for every var3 in _moved_attributes,",for attr in _moved_attributes : ,for var3 in _moved_attributes : 
"strings ""URLError"", ""urllib2"", ""urllib.error"", result of the call to the function MovedAttribute with 3 arguments:   strings ""HTTPError"", ""urllib2"", ""urllib.error"" and result of the call to the function MovedAttribute with 3 arguments:   strings ""ContentTooShortError"", ""urllib"", ""urllib.error"".   for every attr in _urllib_error_moved_attributes,","strings var0, var1, var6, result of call to function var12 with 3 arguments: strings var19, var1, var6 and result of call to function var12 with 3 arguments: strings var22, var25, var6 var16 for every var26 in _urllib_error_moved_attributes,",for attr in _urllib_error_moved_attributes : ,for var26 in _urllib_error_moved_attributes : 
"for every attr in _urllib_parse_moved_attributes,",for every var0 in var1 ,for attr in _urllib_parse_moved_attributes : ,for var0 in var1 : 
"for every attr in _urllib_request_moved_attributes,",for every var0 in var1 ,for attr in _urllib_request_moved_attributes : ,for var0 in var1 : 
"strings ""addbase"", ""urllib"" and ""urllib.response"", result of the function MovedAttribute, called with 3 arguments:   strings ""addclosehook"", ""urllib"", ""urllib.response"", result of the function MovedAttribute, called with 3 arguments:   strings ""addinfo"", ""urllib"", ""urllib.response"" and result of the function MovedAttribute, called with 3 arguments:   strings ""addinfourl"", ""urllib"", ""urllib.response"".   for every attr in _urllib_response_moved_attributes,","strings var0, var1 and var9, result of function var17 called with 3 arguments: strings var27, var1, var9, result of function var17 called with 3 arguments: strings var29, var1, var9 and result of function var17 called with 3 arguments: strings var31, var1, var9 var23 for every var33 in _urllib_response_moved_attributes,",for attr in _urllib_response_moved_attributes : ,for var33 in _urllib_response_moved_attributes : 
"RobotFileParser, ""robotparser"", ""urllib.robotparser"".   for every attr in _urllib_robotparser_moved_attributes,","var0, var1, var2 var4 for every var5 in var6 ",for attr in _urllib_robotparser_moved_attributes : ,for var5 in var6 : 
"for every attr in tuple with 3 arguments: strings 'expects_localtime', 'is_safe' and 'needs_autoescape',","for every var0 in tuple with 3 arguments: strings var1, var2 and var5,","for attr in ( 'expects_localtime' , 'is_safe' , 'needs_autoescape' ) : ","for var0 in ( var1 , 'is_safe' , 'needs_autoescape' ) : "
"for every attr in self.child_nodelists,",for every var0 in self var2 ,for attr in self . child_nodelists : ,for var0 in self . var2 : 
"for every attr in self.rendering_attrs,",for every attr in self var1 ,for attr in self . rendering_attrs : ,for attr in self . var1 : 
loop through shellcode converted into a bytearray,loop through var0 converted into var1,for b in bytearray ( shellcode ) : ,for b in var1 ( var0 ) : 
"for every base in reversed order of bases,","for every base in reversed order of bases,",for base in bases [ : : - 1 ] : ,for base in bases [ : : - 1 ] : 
"call the method inspect.getmro with an argument new_class, for every base in the result,","call method var0 with argument var1 for every base in result,",for base in inspect . getmro ( new_class ) : ,for base in var0 ( var1 ) : 
"for every base in new_class.__mro__ in reversed order,","for every base in var0 __mro__ in reversed order,",for base in reversed ( new_class . __mro__ ) : ,for base in reversed ( var0 . __mro__ ) : 
"for every basedir in basedirs,",for every var0 in var1 ,for basedir in basedirs : ,for var0 in var0s : 
"for every bit in bits,","for every bit in bits,",for bit in bits : ,for bit in bits : 
"for bit in self.lookups,",for bit in var0 ,for bit in self . lookups : ,for bit in var0 : 
iterate each byte of the array of bytes of sc starting from the index 16,iterate each byte of array of bytes of sc starting from index 16,for byte in bytearray ( sc ) [ 16 : ] : ,for byte in bytearray ( sc ) [ 16 : ] : 
declare a for loop with an iterator byte for each element in sh starting from index 12 converted into a bytearray,declare for loop with var0 byte for each element in var1 starting from index 12 converted into var2,for byte in bytearray ( sh ) [ 12 : ] : ,for byte in var2 ( var1 ) [ 12 : ] : 
"for every c in return value of the method response.cookies.values,",for every c in return value of method var0 ,for c in response . cookies . values ( ) : ,for c in var0 ( ) : 
"for every c in reversed order of self.__class__.__mro__,",for every c in reversed order of var0 ,for c in reversed ( self . __class__ . __mro__ ) : ,for c in reversed ( var0 ) : 
for every cache in return value of the function caches.all.,for every cache in return value of function var0 ,for cache in caches . all ( ) : ,for cache in var0 ( ) : 
"for every cache_alias in settings.CACHES,",for every var0 in settings var2 ,for cache_alias in settings . CACHES : ,for var0 in settings . var2 : 
"for every d in deps, if d is not contained in models and d is contained in model_list add boolean True to a tuple,","for every d in var0 if d is not contained in models and d is contained in var1 add boolean var3 to tuple,",for candidate in ( ( d not in models or d in model_list ) for d in deps ) : ,for candidate in ( ( d not in models or d in var1 ) for d in var0 ) : 
"join fixture_dir, fixture_name with appended character '*' into a valid file path,","join var0 var2 with appended character var4 into valid file path,","for candidate in glob . iglob ( os . path . join ( fixture_dir , fixture_name + '*' ) ) : ","for candidate in glob . iglob ( os . path . join ( var0 , var2 + var4 ) ) : "
"field url of the value under the 'enclosure' key of the item dictionary for 'url',   field length of the value under the 'enclosure' key of the item dictionary for 'length',   and field mime_type of the value under the 'enclosure' key of the item dictionary for 'type'.   for every cat in value under the 'categories' key of the item dictionary,","field url of value under var0 key of item dict for var3 var4 field length of value under var0 key of item dict for var7 var4 and field var8 of value under var0 key of item dict for var10 var4 for every cat in value under var11 key of item dict,",for cat in item [ 'categories' ] : ,for cat in item [ var11 ] : 
"enclosure for 'rel', field url of value under the ""enclosure"" key of item dictionary for 'href',   field length of value under the ""enclosure"" key of item dictionary for 'length',   and field mime_type of value under the ""enclosure"" key of item dictionary for 'type'.   for every cat in value under 'categories' key of item dictionary,","enclosure for var0, field url of value under var1 key of item dict for var4 var6 field length of value under var1 key of item dict for var9 var6 and field var10 of value under var1 key of item dict for var12 var6 for every cat in value under var13 key of item dict,",for cat in item [ 'categories' ] : ,for cat in item [ var13 ] : 
for every cat in value under the 'categories' key of the self.feed dictionary.,for every cat in value under var0 key of var1 dict.,for cat in self . feed [ 'categories' ] : ,for cat in var1 [ var0 ] : 
"and MEMCACHE_MAX_KEY_LENGTH, call the function warnings.warn with previous string and CacheKeyWarning as arguments.   for every char in key,","and var0 call function var1 with previous string and var2 as arguments var4 for every char in key,",for char in key : ,for char in key : 
"for every char in result of the self.add_truncation_text, called with 2 arguments: an empty string and truncate.",for every char in result of self var1 called with 2 arguments: empty string and truncate.,"for char in self . add_truncation_text ( '' , truncate ) : ","for char in self . var1 ( '' , truncate ) : "
"for every character in name,","for every character in name,",for character in name : ,for character in name : 
"for every check in checks,","for every check in checks,",for check in checks : ,for check in checks : 
"for every child in node.childNodes,",for every child in node var1 ,for child in node . childNodes : ,for child in node . var1 : 
"for every obj in result of the method self.queryset.all.   for every choice in self.field.choice_cache,",for every var0 in result of method var1 for every choice in self.field var4 ,for choice in self . field . choice_cache : ,for choice in self . field . var4 : 
"for every choice in value,","for every choice in value,",for choice in value : ,for choice in value : 
"for every chunk in content.chunks function return value,","for every chunk in var0 function return value,",for chunk in content . chunks ( ) : ,for chunk in var0 ( ) : 
"for every chunk in field_stream,",for every chunk in var0 ,for chunk in field_stream : ,for chunk in var0 : 
"for every chunk in return value of the method self.chunks,",for every chunk in return value of method var0 ,for chunk in self . chunks ( ) : ,for chunk in var0 ( ) : 
"for every closable in self._closable_objects,",for every var0 in var1 ,for closable in self . _closable_objects : ,for var0 in var1 : 
"for every cmatch in cmatches,",for every var0 in var1 ,for cmatch in cmatches : ,for var0 in var0es : 
"for every cnt and digit in enumerated list int_part with reversed ordering of elements,","for every var0 and digit in enumerated list var1 with reversed ordering of elements,","for cnt , digit in enumerate ( int_part [ : : - 1 ] ) : ","for var0 , digit in enumerate ( var1 [ : : - 1 ] ) : "
"for every code in tuple with 2 elements: lang_code and generic_lang_code,",for every code in tuple with 2 elements: var0 and var1 ,"for code in ( lang_code , generic_lang_code ) : ","for code in ( var0 , var1 ) : "
"for every condition and nodelist in self.conditions_nodelists,",for every condition and nodelist in self var1 ,"for condition , nodelist in self . conditions_nodelists : ","for condition , nodelist in self . var1 : "
"substitute boolean False for ignore.   for every d in object_list,",substitute boolean var0 for ignore var1 for every d in var2 ,for d in object_list : ,for d in var2 : 
"for every d in reversed list self.dicts,",for every d in reversed list var0 ,for d in reversed ( self . dicts ) : ,for d in reversed ( var0 ) : 
"for every d in self.dicts,",for every d in var0 ,for d in self . dicts : ,for d in var0 : 
"for every d in last element of self.dicts,",for every d in last element of var0 ,for d in self . dicts [ - 1 ] : ,for d in var0 [ - 1 ] : 
"for every date_check in all_date_checks,",for every var0 in var1 ,for date_check in all_date_checks : ,for var0 in var1 : 
"for every date_key in date_keys,",for every var0 in var1 ,for date_key in date_keys : ,for var0 in var0s : 
"call the method connections.all(), perform the following for every db in the result,","call method connections.all(), perform following for every db in result,",for db in connections . all ( ) : ,for db in var0 ( ) : 
"for every dict_ in self.dicts,",for every var0 in var1 ,for dict_ in self . dicts : ,for var0 in var1 : 
"for every digit in number coverted to a string,","for every digit in number var0 to string,",for digit in str ( number ) : ,for digit in str ( number ) : 
"for every dirpath, dirnames and filenames in the result,   for every dirname in list dirnames,",for every var0 var1 and filenames in result var4 for every var2 in list var1 ,for dirname in dirnames [ : ] : ,for var2 in var1 [ : ] : 
"for dirname in dirs,",for var0 in var1 ,for dirname in dirs [ : ] : ,for var0 in var1 [ : ] : 
"for dirpath, dirnames and filenames, respectively, in directory tree tuple starting from the ldir,","for var0 var1 and filenames, respectively, in directory tree tuple starting from var2 ","for dirpath , dirnames , filenames in os . walk ( ldir ) : ","for var0 , var1 , filenames in os . walk ( var2 ) : "
"call the function os.walk with 3 arguments: root, topdown set to boolean True, followlinks set to self.symlinks,",call function os.walk with 3 arguments: root var0 set to boolean var1 var2 set to var3 ,"for dirpath , dirnames , filenames in os . walk ( root , topdown = True , followlinks = self . symlinks ) : ","for dirpath , dirnames , filenames in os . walk ( root , var0 = var1 , var2 = var3 ) : "
"for every dirpath, dirnames and locale_filenames in directory tree starting at the basedir directory.",for every var0 var1 and var2 in directory tree starting at var3 directory.,"for dirpath , dirnames , locale_filenames in os . walk ( basedir ) : ","for var0 , var1 , var2 in os . walk ( var3 ) : "
"for every domain in domains,","for every domain in domains,",for domain in domains : ,for domain in domains : 
"for every elt in source,","for every var0 in source,",for elt in source : ,for var0 in source : 
"for every entry in os.listdir function return value called with the argument path,","for every entry in os.listdir function return value called with argument path,",for entry in os . listdir ( path ) : ,for entry in os . listdir ( path ) : 
"for every entry in package_path,",for every entry in var0 ,for entry in package_path : ,for entry in var0 : 
"call the method self.as_data, for every error in the result.",call method self var1 for every error in result.,for error in self . as_data ( ) : ,for error in self . var1 ( ) : 
"for every error in self.error_list,",for every error in self var1 ,for error in self . error_list : ,for error in self . var1 : 
"call the method self.errors.as_data, for every error for value under the filed key of the returned dictionary,","call method self.errors var1 for every error for value under filed key of returned dict,",for error in self . errors . as_data ( ) [ field ] : ,for error in self . errors . var1 ( ) [ field ] : 
"for every event and node in self.event_stream,",for every event and node in self var1 ,"for event , node in self . event_stream : ","for event , node in self . var1 : "
"for every exclude in excludes,","for every exclude in excludes,",for exclude in excludes : ,for exclude in excludes : 
"for every ext in extensions,","for every var0 in extensions,",for ext in extensions : ,for var0 in var0ensions : 
"for ext in pathext,",for var0 in var1 ,for ext in pathext : ,for var0 in var1 : 
"for every ext in pathext,",for every var0 in var1 ,for ext in pathext : ,for var0 in var1 : 
for every f in return value of the return value of the method chain.from_iterable called with argument:,for every f in return value of return value of method chain var1 called with argument:,for f in chain . from_iterable ( l [ 1 ] for l in self . _files . lists ( ) ) : ,for f in chain . var1 ( l [ 1 ] for l in self . _files . lists ( ) ) : 
"for every f in files,","for every f in files,",for f in dirs : ,for f in dirs : 
"for every f in fields,","for every f in fields,",for f in fields : ,for f in fields : 
"for every f in file_field_list,",for every f in var0 ,for f in file_field_list : ,for f in var0 : 
"for f in file_list,",for f in var0 ,for f in file_list : ,for f in var0 : 
"for every f in files,","for every f in files,",for f in files : ,for f in files : 
"for every f in filters,","for every f in filters,",for f in filters : ,for f in filters : 
"concatenate opts.concrete_fields, opts.virtual_fields and opts.many_to_many, for every f in the result,","concatenate opts var1 opts var3 and opts var5 for every f in result,",for f in opts . concrete_fields + opts . virtual_fields + opts . many_to_many : ,for f in opts . var1 + opts . var3 + opts . var5 : 
"for every f in opts.fields,",for every f in var0 ,for f in opts . fields : ,for f in var0 : 
"for every f in opts.local_fields,",for every f in opts var1 ,for f in opts . local_fields : ,for f in opts . var1 : 
"append opts.virtual_fields to opts.many_to_many, for every f in the result,","append opts var1 to opts var3 for every f in result,",for f in opts . many_to_many + opts . virtual_fields : ,for f in opts . var3 + opts . var1 : 
"for every f in post_sql_fields,",for every f in var0 ,for f in post_sql_fields : ,for f in var0 : 
"for every f in self.instance._meta.fields,",for every f in var0 ,for f in self . instance . _meta . fields : ,for f in var0 : 
"concatenate opts.concrete_fields, sortable_virtual_fields and opts.many_to_many, for every f in sorted result,","concatenate opts var1 var2 and opts var5 for every f in sorted result,",for f in sorted ( opts . concrete_fields + sortable_virtual_fields + opts . many_to_many ) : ,for f in sorted ( opts . var1 + var2 + opts . var5 ) : 
"for f in sorted list of the files in the self.path directory,","for f in sorted list of files in var0 directory,",for f in sorted ( os . listdir ( self . path ) ) : ,for f in sorted ( os . listdir ( var0 ) ) : 
"call the method error.items, for every field and error_list in the result,","call method var0 for every field and var1 in result,","for field , error_list in error . items ( ) : ","for field , var1 in var0 ( ) : "
"for every field, error_list in self.error_dict.items method return value,","for every field var0 in self var2 items method return value,","for field , error_list in self . error_dict . items ( ) : ","for field , var0 in self . var2 . items ( ) : "
"for every field, errors in self.error_dict.items method return value,","for every field, errors in self var1 items method return value,","for field , errors in self . error_dict . items ( ) : ","for field , errors in self . var1 . items ( ) : "
"call the method self.items, for every field and errors in the result.",call method var0 for every field and errors in result.,"for field , errors in self . items ( ) : ","for field , errors in var0 ( ) : "
"for every field, initial and data in list of tuples tuple containing elements of self.fields, initial and data, respectively,","for every field, initial and data in list of var0 tuple containing elements of var1 initial and data, respectively,","for field , initial , data in zip ( self . fields , initial , data ) : ","for field , initial , data in zip ( var1 , initial , data ) : "
"call the function errors.error_dict.items, for every field and messages in the result,","call function errors var1 items, for every field and messages in result,","for field , messages in errors . error_dict . items ( ) : ","for field , messages in errors . var1 . items ( ) : "
"for every field, messages in return value of the message.items method,","for every field, messages in return value of message.items method,","for field , messages in message . items ( ) : ","for field , messages in message . items ( ) : "
"for every field in return value of the function _parse_date_fmt,",for every field in return value of function var0 ,for field in _parse_date_fmt ( ) : ,for field in var0 ( ) : 
"for every field in concrete_model._meta.local_fields,",for every field in var0 _meta var2 ,for field in concrete_model . _meta . local_fields : ,for field in var0 . _meta . var2 : 
"for every field in concrete_model._meta.many_to_many,",for every field in var0 _meta var2 ,for field in concrete_model . _meta . many_to_many : ,for field in var0 . _meta . var2 : 
"for every field in model._meta.fields,",for every field in var0 ,for field in model . _meta . fields : ,for field in var0 : 
"for every field in model._meta.many_to_many,",for every field in model._meta var1 ,for field in model . _meta . many_to_many : ,for field in model . _meta . var1 : 
"for every field in self.fields,",for every field in var0 ,for field in self . fields : ,for field in var0 : 
"call the method self.fields.values, for every field in result,","call method var0 for every field in result,",for field in self . fields . values ( ) : ,for field in var0 ( ) : 
"substitute the result for value under the NON_FIELD_ERRORS key of the form._errors dictionary.   for every field in unique_check,",substitute result for value under var0 key of var1 dict var2 for every field in var3 ,for field in unique_check : ,for field in var3 : 
"error_class, label_suffix and empty_permitted.   for every field_name in self.fields,",var0 var1 and var2 for every var5 in var7 ,for field_name in self . fields : ,for var5 in var7 : 
for every field_node in return value of the method node.getElementsByTagName with an argument string 'field'.,for every var0 in return value of method node var3 with argument string var4.,for field_node in node . getElementsByTagName ( 'field' ) : ,for var0 in node . var3 ( var4 ) : 
for every file in value under the 'files' key of the options dictionary.,for every file in value under var0 key of options dict.,for file in options [ 'files' ] : ,for file in options [ var0 ] : 
"for every filename is filelist,",for every filename is var0 ,for filename in filelist : ,for filename in var0 : 
"for every filename in filenames,","for every filename in filenames,",for filename in filenames : ,for filename in filenames : 
"for every filename in files,","for every filename in files,",for filename in files : ,for filename in files : 
"for every filename in gen_filenames(),","for every filename in gen_filenames(),",for filename in gen_filenames ( ) : ,for filename in var0 ( ) : 
"for every filenam in locale_filenames,",for every filenam in var0 ,for filename in locale_filenames : ,for filename in var0 : 
"call the method self.get_template_sources with 2 arguments template_name and template_dirs, for every filepath in the result,","call method self var1 with 2 arguments var2 and var4 for every var6 in result,","for filepath in self . get_template_sources ( template_name , template_dirs ) : ","for var6 in self . var1 ( var2 , var4 ) : "
"for every finder in sys.meta_path,",for every finder in sys var0 ,for finder in sys . meta_path : ,for finder in sys . var0 : 
for every first_select in return value of the function _parse_date_fmt.,for every var0 in return value of function var1 ,for first_select in _parse_date_fmt ( ) : ,for var0 in var1 ( ) : 
"for every fixture_dir in fixture_dirs,",for every var0 in var1 ,for fixture_dir in fixture_dirs : ,for var0 in var0s : 
"for every fixture_file, fixture_dir and fixture_name in return value of the method self.find_fixtures called with an argument fixture_label,",for every var0 var1 and var2 in return value of method self var5 called with argument var6 ,"for fixture_file , fixture_dir , fixture_name in self . find_fixtures ( fixture_label ) : ","for var0 , var1 , var2 in self . var5 ( var6 ) : "
"for every fixture_label in fixture_labels,",for every var0 in var1 ,for fixture_label in fixture_labels : ,for var0 in var0s : 
"call the method constant_re.findall with an argument t.contents, for every fmatch in the result,","call method var0 findall with argument var2 for every var3 in result,",for fmatch in constant_re . findall ( t . contents ) : ,for var3 in var0 . findall ( var2 ) : 
"for every fname in filelist,",for every var0 in var1 ,for fname in filelist : ,for var0 in var1 : 
"if fname is contained in self._list_cache_files method return value,","if var0 is contained in var1 method return value,",for fname in self . _list_cache_files ( ) : ,for var0 in var1 ( ) : 
"for every form in self.extra_forms,",for every form in self var1 ,for form in self . extra_forms : ,for form in self . var1 : 
"for every form in self.initial_forms,",for every form in self var1 ,for form in self . initial_forms : ,for form in self . var1 : 
"for every form in self.saved_forms,",for every form in self var1 ,for form in self . saved_forms : ,for form in self . var1 : 
"and form is not contained in forms_to_delete, substitute the resulting list for valid_forms.   for every form in valid_forms,",and form is not contained in var0 substitute resulting list for var1 for every form in var1 ,for form in valid_forms : ,for form in var1 : 
"for every form in valid_forms,",for every form in var0 ,for form in valid_forms : ,for form in var0 : 
"for every format in BUILTIN_SERIALIZERS,",for every format in var0 ,for format in BUILTIN_SERIALIZERS : ,for format in var0 : 
"for every format in self.input_formats,",for every format in self var1 ,for format in self . input_formats : ,for format in self . var1 : 
"for every format in settings.SERIALIZATION_MODULES,",for every format in settings var0 ,for format in settings . SERIALIZATION_MODULES : ,for format in settings . var0 : 
"for every formset in formsets,",for every var0 in var1 ,for formset in formsets : ,for var0 in var0s : 
for every frag in name.,for every var0 in name.,for frag in name : ,for var0 in name : 
"for every func and args in self.filters,",for every var0 and var1 in var2 ,"for func , args in self . filters : ","for var0 , var1 in var2 : "
"for every func and unused in filter_expr.filters,","for every var0 and unused in var1 filters,","for func , unused in filter_expr . filters : ","for var0 , unused in var1 . filters : "
"for every func in self.response_fixes,",for every var0 in self var2 ,for func in self . response_fixes : ,for var0 in self . var2 : 
"for every h in handlers,","for every h in handlers,",for h in handlers : ,for h in handlers : 
"for every h in elements of logger.handlers list,","for every h in elements of var0 list,",for h in logger . handlers [ : ] : ,for h in var0 [ : ] : 
"for every handler in handlers,","for every handler in handlers,",for handler in handlers : ,for handler in handlers : 
"for every handler in self._upload_handlers,",for every handler in var0 ,for handler in self . _upload_handlers : ,for handler in var0 : 
for every header in list of strings compiled by splitting string cc_delim_re with value under the key 'Vary' of response dictionary as a delimiter.,for every header in list of strings compiled by splitting string var0 with value under key var2 of response dict as var3 ,for header in cc_delim_re . split ( response [ 'Vary' ] ) : ,for header in var0 . split ( response [ var2 ] ) : 
"for every header in headerlist,",for every header in var0 ,for header in headerlist : ,for header in var0 : 
"split ip_str into parts by ':', for every hextet in the result,","split var0 into parts by var2, for every var3 in result,",for hextet in ip_str . split ( ':' ) : ,for var3 in var0 . split ( var2 ) : 
"for every hextet in new_ip,",for every var0 in var1 ,for hextet in new_ip : ,for var0 in var1 : 
"for every hook in sys.path_hooks,",for every hook in sys var1 ,for hook in sys . path_hooks : ,for hook in sys . var1 : 
"for every i and tuple containing dirpath and f, in enumerated list of locations,","for every i and tuple containing var0 and f, in enumerated list of locations,","for i , ( dirpath , f ) in enumerate ( locations ) : ","for i , ( var0 , f ) in enumerate ( locations ) : "
"for every i and tuple containing 2 elements: seconds and name, in enumerated chunks,","for every i and tuple containing 2 elements: seconds and name, in enumerated chunks,","for i , ( seconds , name ) in enumerate ( chunks ) : ","for i , ( seconds , name ) in enumerate ( chunks ) : "
"for every i and arg in enumerated iterable args,",for every i and var0 in enumerated var1 var2 ,"for i , arg in enumerate ( args ) : ","for i , var0 in enumerate ( var2 ) : "
"for every i and char in enumerated text,","for every i and char in enumerated text,","for i , char in enumerate ( text ) : ","for i , char in enumerate ( text ) : "
"for every i and choice in enumerated iterable self.choices,",for every i and choice in enumerated var0 var1 ,"for i , choice in enumerate ( self . choices ) : ","for i , choice in enumerate ( var1 ) : "
"for every i and ext in enumerated iterable ext_list,",for every i and ext in enumerated var0 var1 ,"for i , ext in enumerate ( ext_list ) : ","for i , ext in enumerate ( var1 ) : "
"for every i and field in enumerated iterable self.fields,",for every i and field in enumerated var0 var1 ,"for i , field in enumerate ( self . fields ) : ","for i , field in enumerate ( var1 ) : "
"and third element of the result of the function sys.exc_info.   for every i and handler in enumerated iterable handlers,","and third element of result of function sys var1 for every i and handler in enumerated var3 handlers,","for i , handler in enumerate ( handlers ) : ","for i , handler in enumerate ( handlers ) : "
"for every i and handler in enumerated iterator self._upload_handlers,",for every i and handler in enumerated var0 var1 ,"for i , handler in enumerate ( self . _upload_handlers ) : ","for i , handler in enumerate ( var1 ) : "
"for every i and item in enumerated iterable values,","for every i and item in enumerated var0 values,","for i , item in enumerate ( values ) : ","for i , item in enumerate ( values ) : "
"for every i and line in enumerated iterable lines,","for every i and line in enumerated var0 lines,","for i , line in enumerate ( lines ) : ","for i , line in enumerate ( lines ) : "
"for every i and line in enumerated iterable table_output,",for every i and line in enumerated var0 var1 ,"for i , line in enumerate ( table_output ) : ","for i , line in enumerate ( var1 ) : "
"call the function force_text with an argument formatstr, use the result as an argument for the call to the method,","call function var0 with argument var1 use result as argument for call to method,","for i , piece in enumerate ( re_formatchars . split ( force_text ( formatstr ) ) ) : ","for i , piece in enumerate ( re_formatchars . split ( force_text ( var1 ) ) ) : "
"for every i and row in enumerated result of the method connection.introspection.get_table_description called with arguments: cursor and table_name,",for every i and row in enumerated result of method connection.introspection var1 called with arguments: cursor and var2 ,"for i , row in enumerate ( connection . introspection . get_table_description ( cursor , table_name ) ) : ","for i , row in enumerate ( connection . introspection . var1 ( cursor , var2 ) ) : "
"for every i and v in enumerated iterable value,","for every i and v in enumerated var0 value,","for i , v in enumerate ( value ) : ","for i , v in enumerate ( value ) : "
iterate each element i of the array of bytes of sc starting from the index 8,iterate each element i of array of bytes of sc starting from index 8,for i in bytearray ( sc ) [ 8 : ] : ,for i in bytearray ( sc ) [ 8 : ] : 
loop through shellcode converted into a bytearray,loop through var0 converted into var1,for i in bytearray ( shellcode ) : ,for i in var1 ( var0 ) : 
iterate i over 96 random numbers between 1 and 128,iterate i over 96 random numbers between 1 and 128,"for i in random . sample ( range ( 1 , 128 ) , 96 ) : ","for i in random . sample ( range ( 1 , 128 ) , 96 ) : "
iterate i over 96 random numbers between 32 and 128,iterate i over 96 random numbers between 32 and 128,"for i in random . sample ( range ( 32 , 128 ) , 96 ) : ","for i in random . sample ( range ( 32 , 128 ) , 96 ) : "
"for every i in sequence of integers, from 0 to the result of the method self.total_form_count,","for every i in sequence of integers, from 0 to result of method self var1 ","for i in range ( 0 , self . total_form_count ( ) ) : ","for i in range ( 0 , self . var1 ( ) ) : "
iterate i over a range between 1 and the value repeat+1,iterate i over range between 1 and value repeat+1,"for i in range ( 1 , repeat + 1 ) : ","for i in range ( 1 , repeat + 1 ) : "
initialize a for loop with an iterator i with a range starting from 16 until the length of shellcode with a step of 2,initialize for loop with var0 i with range starting from 16 var1 length of var2 with step of 2,"for i in range ( 16 , len ( shellcode ) , 2 ) : ","for i in range ( 16 , len ( var2 ) , 2 ) : "
iterate i over a sequence of number from 2 to 10,iterate i over sequence of number from 2 to 10,"for i in range ( 2 , 10 ) : ","for i in range ( 2 , 10 ) : "
initialize a for loop with an iterator i with a range starting from 3 until the value of val1,initialize for loop with var0 i with range starting from 3 var1 value of var2,"for i in range ( 3 , val1 ) : ","for i in range ( 3 , var2 ) : "
initialize a for loop with an iterator i with a range starting from 8 until the length of sh with a step of 4,initialize for loop with var0 i with range starting from 8 var1 length of var2 with step of 4,"for i in range ( 8 , len ( sh ) , 4 ) : ","for i in range ( 8 , len ( var2 ) , 4 ) : "
"for every ip in tuple containing 3 elements: self._ipython, self._ipython_pre_100 and self._ipython_pre_011,",for every ip in tuple containing 3 elements: var0 var1 and var2 ,"for ip in ( self . _ipython , self . _ipython_pre_100 , self . _ipython_pre_011 ) : ","for ip in ( var0 , var0_pre_100 , var0_pre_011 ) : "
"get the value under the if iso_input not in val key of the ISO_INPUT_FORMATS dictionary, if it doesnt exists return an empty tuple,","get value under if var1 not in var0 key of var3 dict, if it doesnt exists return empty tuple,","for iso_input in ISO_INPUT_FORMATS . get ( format_type , ( ) ) : ","for var1 in var3 . get ( format_type , ( ) ) : "
"infos, 'INFOS'   for every issues and group_name in sorted_issues,","infos, var0 for every issues and var2 in var4 ","for issues , group_name in sorted_issues : ","for issues , var2 in var4 : "
"zip elements of result and result_args into a list of tuples, for every item and args in the result,","zip elements of result and var0 into list of var1 for every item and args in result,","for item , args in zip ( result , result_args ) : ","for item , args in zip ( result , var0 ) : "
"for every item in elt,",for every item in var0 ,for item in elt : ,for item in var0 : 
"for every item in self.items,",for every item in var0 ,for item in self . items : ,for item in var0 : 
"for every item in sequence,","for every item in sequence,",for item in sequence : ,for item in sequence : 
"call the function six.iteritems with an argument dict_, for every item in the result,","call function var0 with argument var1 for every item in result,",for item in six . iteritems ( dict_ ) : ,for item in var0 ( var1 ) : 
"for every item in sorted_items,",for every item in var0 ,for item in sorted_items : ,for item in var0 : 
"for every item in values,","for every item in values,",for item in values : ,for item in values : 
"call the Parser object with stream and self._boundary, for every item_type, meta_data and field_stream in return value,","call var0 object with stream and var1 for every var2 var4 and var6 in return value,","for item_type , meta_data , field_stream in Parser ( stream , self . _boundary ) : ","for var2 , var4 , var6 in var0 ( stream , var1 ) : "
iterate each element j of the array of bytes of sc starting from the index 1,iterate each element j of array of bytes of sc starting from index 1,for j in bytearray ( sc ) [ 1 : ] : ,for j in bytearray ( sc ) [ 1 : ] : 
declare a for loop with an iterator j for each element in sh starting from index 2 converted into a bytearray,declare for loop with var0 j for each element in var1 starting from index 2 converted into var2,for j in bytearray ( sh ) [ 2 : ] : ,for j in var2 ( var1 ) [ 2 : ] : 
initialize a for loop with an iterator j with a range starting from 1 until the value of val2,initialize for loop with var0 j with range starting from 1 var1 value of var2,"for j in range ( 1 , val2 ) : ","for j in range ( 1 , var2 ) : "
iterate j over a sequence of number from 4 to 12,iterate j over sequence of number from 4 to 12,"for j in range ( 4 , 12 ) : ","for j in range ( 4 , 12 ) : "
"dictionary containing element v for k.   for every k and list_ in return value of the method self.lists,",dict containing element v for var0 for every k and var2 in return value of method var3 ,"for k , list_ in self . lists ( ) : ","for k , var2 in var3 ( ) : "
"call the method data.items, for every k and v in the result,","call method var0 for every k and v in result,","for k , v in data . items ( ) : ","for k , v in var0 ( ) : "
"for every k and v in return value of the function defaults.items,",for every k and v in return value of function var0 ,"for k , v in defaults . items ( ) : ","for k , v in var0 ( ) : "
"for every k and v in return value of the ret.items function,","for every k and v in return value of var0 function,","for k , v in ret . items ( ) : ","for k , v in var0 ( ) : "
"call the method self._iteritems, for every k and v in the result,","call method var0 for every k and v in result,","for k , v in self . _iteritems ( ) : ","for k , v in var0 ( ) : "
"for every k and v in self.choices,",for every k and v in var0 ,"for k , v in self . choices : ","for k , v in var0 : "
"call the method six.iteritems with an argument dict_, for every k and v in the result,","call method var0 with argument var1 for every k and v in result,","for k , v in six . iteritems ( dict_ ) : ","for k , v in var0 ( var1 ) : "
"call the function six.iteritems with an argument kwargs, for every k and v in the result,","call function var0 with argument var1 for every k and v in result,","for k , v in six . iteritems ( kwargs ) : ","for k , v in var0 ( var1 ) : "
"for every k in doomed,","for every k in doomed,",for k in doomed : ,for k in doomed : 
"for every k in keys,","for every k in keys,",for k in keys : ,for k in keys : 
"for every k2 and v2 in v,","for every k2 and v2 in v,","for k2 , v2 in v : ","for k2 , v2 in v : "
"and lambda function with 3 arguments context, x and y, returns boolean True if x.eval(context) or y.eval(context) is True, for 'or',   result of the function inflix called with 2 arguments, integer 7,   and lambda function with 3 arguments context, x and y, returns boolean True if x.eval(context) and y.eval(context) is True for 'and',   result of the function prefix called with 2 arguments, integer 8,   and lambda function with 2 arguments context and x, returns boolean True if x.eval(context) is True for 'not',   result of the function inflix called with 2 arguments, integer 9,   and lambda function with 2 arguments context and x, returns boolean True if x.eval(context) is contained in y.eval(context) for 'in',   result of the function inflix called with 2 arguments, integer 9,   and lambda function with 2 arguments context and x, returns boolean True if x.eval(context) is not contained in y.eval(context),   for 'not in', result of the function inflix called with 2 arguments, integer 10,   and lambda function with 3 arguments context, x and y, returns boolean True if x.eval(context) equals y.eval(context) for '=',   result of the function inflix called with 2 arguments, integer 10,   and lambda function with 3 arguments context, x and y, returns boolean True if x.eval(context) equals y.eval(context) for '==',   result of the function inflix called with 2 arguments, integer 10,   and lambda function with 3 arguments context, x and y, returns boolean True if x.eval(context) doesnt equals y.eval(context) for '!=',   result of the function inflix called with 2 arguments, integer 10 and,   lambda function with 3 arguments context, x and y, returns boolean True if x.eval(context) is greater than y.eval(context) for '>',   result of the function inflix called with 2 arguments, integer 10 and and lambda function with 3 arguments context, x and y,   returns boolean True if x.eval(context) is greater than or equal to y.eval(context) for '>=',   result of the function inflix called with 2 arguments, integer 10 and and lambda function with 3 arguments context, x and y,   returns boolean True if x.eval(context) is smaller than y.eval(context) for '<',   result of the function inflix called with 2 arguments, integer 10 and and lambda function with 3 arguments context, x and y,   returns boolean True if x.eval(context) is smaller than or equal to y.eval(context) for '<=',   call the function OPERATORS.items, for every key and op in result,","and lambda function with 3 arguments context, x and y, returns boolean var0 if x.eval(context) or y.eval(context) is var0 for var38 var39 result of function var62 called with 2 arguments, integer 7 var39 and lambda function with 3 arguments context, x and y, returns boolean var0 if x.eval(context) and y.eval(context) is var0 for var72 var39 result of function prefix called with 2 arguments, integer 8 var39 and lambda function with 2 arguments context and x, returns boolean var0 if x.eval(context) is var0 for var73 var39 result of function var62 called with 2 arguments, integer 9 var39 and lambda function with 2 arguments context and x, returns boolean var0 if x.eval(context) is contained in y.eval(context) for var74 var39 result of function var62 called with 2 arguments, integer 9 var39 and lambda function with 2 arguments context and x, returns boolean var0 if x.eval(context) is not contained in y.eval(context) var39 for var75, result of function var62 called with 2 arguments, integer 10 var39 and lambda function with 3 arguments context, x and y, returns boolean var0 if x.eval(context) equals y.eval(context) for var76 var39 result of function var62 called with 2 arguments, integer 10 var39 and lambda function with 3 arguments context, x and y, returns boolean var0 if x.eval(context) equals y.eval(context) for var79 var39 result of function var62 called with 2 arguments, integer 10 var39 and lambda function with 3 arguments context, x and y, returns boolean var0 if x.eval(context) doesnt equals y.eval(context) for var80 var39 result of function var62 called with 2 arguments, integer 10 and var39 lambda function with 3 arguments context, x and y, returns boolean var0 if x.eval(context) is greater var81 y.eval(context) for var85 var39 result of function var62 called with 2 arguments, integer 10 and and lambda function with 3 arguments context, x and y var39 returns boolean var0 if x.eval(context) is greater var81 or equal to y.eval(context) for var87 var39 result of function var62 called with 2 arguments, integer 10 and and lambda function with 3 arguments context, x and y var39 returns boolean var0 if x.eval(context) is smaller var81 y.eval(context) for var88 var39 result of function var62 called with 2 arguments, integer 10 and and lambda function with 3 arguments context, x and y var39 returns boolean var0 if x.eval(context) is smaller var81 or equal to y.eval(context) for var90 var39 call function var91 items, for every key and var93 in result,","for key , op in OPERATORS . items ( ) : ","for key , var93 in var91 . items ( ) : "
"for every key and value in data,","for every key and value in data,","for key , value in data : ","for key , value in data : "
"for every key and value in data.items method return value,","for every key and value in var0 method return value,","for key , value in data . items ( ) : ","for key , value in var0 ( ) : "
"for every key and value in data.items function return value,","for every key and value in var0 function return value,","for key , value in data . items ( ) : ","for key , value in var0 ( ) : "
"for every key and value in items of dictionary self,","for every key and value in items of dict self,","for key , value in dict . items ( self ) : ","for key , value in dict . items ( self ) : "
"for every key and value in list created out of the elements of the result of the call to the method attrs.items,",for every key and value in list created out of elements of result of call to method var0 ,"for key , value in list ( attrs . items ( ) ) : ","for key , value in list ( attrs . items ( ) ) : "
"for every key and value in items of other_dict dictionary,","for every key and value in items of var0 dict,","for key , value in other_dict . items ( ) : ","for key , value in var0 . items ( ) : "
"for every key and value in return value of the parse_qsl with 3 arguments: query_string is it exists or an empty string if not,","for every key and value in return value of var0 with 3 arguments: var1 is it exists or empty string if not,","for key , value in parse_qsl ( query_string or '' , keep_blank_values = True , encoding = encoding ) : ","for key , value in var0 ( var1 or '' , keep_blank_values = True , encoding = encoding ) : "
for every key and value in parse_gsl with query_string is it exists or an empty string if not and keep_blank_values set to boolean True.,for every key and value in var0 with var1 is it exists or empty string if not and var3 set to boolean var5 ,"for key , value in parse_qsl ( query_string or '' , keep_blank_values = True ) : ","for key , value in parse_qsl ( var1 or '' , var3 = var5 ) : "
"call the function six.iteritems with an argument kwargs, for every key and value in the result,","call function var0 with argument var1 for every key and value in result,","for key , value in six . iteritems ( kwargs ) : ","for key , value in var0 ( var1 ) : "
"for key and value in return value of the six.iterlists function called with an argument self,","for key and value in return value of var0 function called with argument self,","for key , value in six . iterlists ( self ) : ","for key , value in var0 ( self ) : "
"for key and value in result of the function six.iterlists called with an argument,","for key and value in result of function var0 called with argument,","for key , value in six . iterlists ( self ) : ","for key , value in var0 ( self ) : "
"call the method other_dict.lists, for every key and value_list in result,","call method var0 lists, for every key and var2 in result,","for key , value_list in other_dict . lists ( ) : ","for key , var2 in var0 . lists ( ) : "
"for every key in return value of the method c.keys call,","for every key in return value of method var0 call,",for key in c . keys ( ) : ,for key in var0 ( ) : 
"for every key in keys,","for every key in keys,",for key in keys : ,for key in keys : 
"for every key in self,","for every key in self,",for key in self : ,for key in self : 
"for every key is self.bad_cookies,",for every key is self var1 ,for key in self . bad_cookies : ,for key in self . var1 : 
"for every key in self.keyOrder,",for every key in self var1 ,for key in self . keyOrder : ,for key in self . var1 : 
"for every key in sorted list of user_settings,",for every key in sorted list of var0 ,for key in sorted ( user_settings ) : ,for key in sorted ( var0 ) : 
"for every key_value in natural,","for every var0 in natural,",for key_value in natural : ,for var0 in natural : 
"for every key_value in related,","for every var0 in related,",for key_value in related : ,for var0 in related : 
"for every label in app_labels,",for every label in var0 ,for label in app_labels : ,for label in var0 : 
"for every label in labels,","for every label in labels,",for label in labels : ,for label in labels : 
"for every ldir in dirs,",for every var0 in var1 ,for ldir in dirs : ,for var0 in var1 : 
"for m in merge_migrations append m.ancestry to a list, zip the resulting list into tuples of pairs, for every level in result,","for m in var0 append var1 to list, zip resulting list into var2 of pairs, for every level in result,",for level in zip ( * [ m . ancestry for m in merge_migrations ] ) : ,for level in zip ( * [ var1 for m in var0 ] ) : 
"for every lib in builtins,",for every var0 in var1 ,for lib in builtins : ,for var0 in var1 : 
"for every line in chunk_buffer,",for every line in var0 ,for line in chunk_buffer : ,for line in var0 : 
"split content by newline character, for every line in result,","split content by var0 character, for every line in result,",for line in content . split ( '\n' ) : ,for line in content . split ( '\n' ) : 
"split header string at string '\r\n', for every line in result,","split header string at string var0, for every line in result,",for line in header . split ( b'\r\n' ) : ,for line in header . split ( b'\r\n' ) : 
"split msgs by newline characters, for every line in result,","split msgs by var0 characters, for every line in result,",for line in msgs . split ( '\n' ) : ,for line in msgs . split ( '\n' ) : 
"for every line in return value of the method self.handle_inspection called with an argument options,","for every line in return value of method self var1 called with argument options,",for line in self . handle_inspection ( options ) : ,for line in self . var1 ( options ) : 
"for every line in sequence_sql,",for every line in var0 ,for line in sequence_sql : ,for line in var0 : 
"call the method text.splitlines with an argument boolean True, for every line in the result,","call method var0 with argument boolean var1 for every line in result,",for line in text . splitlines ( True ) : ,for line in var0 ( var1 ) : 
"for every lineno and line is enumerated result of the method content.splitlines, called with an argument boolean True,",for every var0 and line is enumerated result of method var1 called with argument boolean var2 ,"for lineno , line in enumerate ( content . splitlines ( True ) ) : ","for var0 , line in enumerate ( content . splitlines ( var2 ) ) : "
"for every loader in self._loaders,",for every loader in var0 ,for loader in self . _loaders : ,for loader in var0 : 
"for every loader in self.loaders,",for every loader in var0 ,for loader in self . loaders : ,for loader in var0 : 
"for every loader in template_source_loaders,",for every loader in var0 ,for loader in template_source_loaders : ,for loader in var0 : 
"for every loader_name in settings.TEMPLATE_LOADERS,",for every var0 in settings var2 ,for loader_name in settings . TEMPLATE_LOADERS : ,for var0 in settings . var2 : 
"for every loc in locales,","for every var0 in locales,",for loc in locales : ,for var0 in var0ales : 
"for every locale in locales,","for every locale in locales,",for locale in locales : ,for locale in locales : 
"reverse settings.LOCALE_PATHS element order, for every localedir in the result,","reverse settings var0 element order, for every var1 in result,",for localedir in reversed ( settings . LOCALE_PATHS ) : ,for var1 in reversed ( settings . var0 ) : 
"for every location in format_locations,",for every location in var0 ,for location in format_locations : ,for location in var0 : 
"for every log in existing,","for every log in existing,",for log in existing : ,for log in existing : 
"for every lookup and arg in args,",for every lookup and var0 in var1 ,"for lookup , arg in args : ","for lookup , var0 in var0s : "
"for every match in matches,","for every match in matches,",for match in matches : ,for match in matches : 
"get the value under the state key of the regexes dictionary, call the method finditer on the result with 2 arguments: text and start,","get value under state key of var0 dict, call method var1 on result with 2 arguments: text and start,","for match in regexes [ state ] . finditer ( text , start ) : ","for match in var0 [ state ] . var1 ( text , start ) : "
"call the method tag_re.finditer with an argument self.template_string, for every match in result,","call method var0 finditer with argument self var3 for every match in result,",for match in tag_re . finditer ( self . template_string ) : ,for match in var0 . finditer ( self . var3 ) : 
"for every matches, pat and defaults in return value of the method pattern.reverse_dict.getlist called with an argument name,","for every matches, pat and defaults in return value of method pattern var1 getlist called with argument name,","for matches , pat , defaults in pattern . reverse_dict . getlist ( name ) : ","for matches , pat , defaults in pattern . var1 . getlist ( name ) : "
"call the method data.items, for every medium and paths in the result.",call method var0 for every medium and paths in result.,"for medium , paths in data . items ( ) : ","for medium , paths in var0 ( ) : "
"for every medium in extend,","for every medium in extend,",for medium in extend : ,for medium in extend : 
"for every member in members,","for every member in members,",for member in members : ,for member in members : 
"for every message in email_messages,",for every message in var0 ,for message in email_messages : ,for message in var0 : 
for every message in email_messages:,for every message in email_messages:,for message in email_messages : ,for message in var0 : 
"for every message is message,","for every message is message,",for message in message : ,for message in message : 
"for every message in messages,","for every message in messages,",for message in messages : ,for message in messages : 
for meta_line in return value of the method self.get_meta called with an argument table_name.,for var0 in return value of method self var2 called with argument var3 ,for meta_line in self . get_meta ( table_name ) : ,for var0 in self . var2 ( var3 ) : 
"for every middleware_method in self._exception_middleware,",for every var0 in var1 ,for middleware_method in self . _exception_middleware : ,for var0 in var1 : 
"for every middleware_method in self._request_middleware,",for every var0 in var1 ,for middleware_method in self . _request_middleware : ,for var0 in var1 : 
"for every middleware_method in self._response_middleware,",for every var0 in var1 ,for middleware_method in self . _response_middleware : ,for var0 in var1 : 
"for every middleware_method in self._template_response_middleware,",for every var0 in var1 ,for middleware_method in self . _template_response_middleware : ,for var0 in var1 : 
"for every middleware_method in self._view_middleware,",for every var0 in var1 ,for middleware_method in self . _view_middleware : ,for var0 in var1 : 
for every middleware_path in settings.MIDDLEWARE_CLASSES:,for every var0 in settings.MIDDLEWARE_CLASSES:,for middleware_path in settings . MIDDLEWARE_CLASSES : ,for var0 in settings . var2 : 
"use it as an argument for the call to the method self.style.MIGRATE_HEADING, write the result to self.stdout.   for every migration in app_migrations,",use it as argument for call to method var0 var1 write result to var2 for every migration in var4 ,for migration in app_migrations : ,for migration in var4 : 
"for every migration in merge_migrations,",for every migration in var0 ,for migration in merge_migrations : ,for migration in var0 : 
"use it as an argument for the call to the method self.style.MIGRATE_HEADING, write the result to self.stdout.   for every migration in merge_migrations,",use it as argument for call to method var0 var1 write result to var2 for every migration in var4 ,for migration in merge_migrations : ,for migration in var4 : 
"write it to self.stdout.   for every migration in migrations_to_squash,",write it to var0 for every migration in var2 ,for migration in migrations_to_squash : ,for migration in var2 : 
"for every migration in migrations_to_squash,",for every migration in var0 ,for migration in migrations_to_squash : ,for migration in var0 : 
"for every migration_name in migration_names,",for every var0 in var1 ,for migration_name in migration_names : ,for var0 in var0s : 
"for every model in app_models,",for every model in var0 ,for model in app_models : ,for model in var0 : 
"for every model in model_list,",for every model in var0 ,for model in model_list : ,for model in var0 : 
"for model in model_list,",for model in var0 ,for model in model_list : ,for model in var0 : 
"for every model in not_installed_models,",for every model in var0 ,for model in not_installed_models : ,for model in var0 : 
"for every model in return value of the function router.get_migratable_models, called with arguments:",for every model in return value of function router var1 called with arguments:,"for model in router . get_migratable_models ( app_config , connection . alias , include_auto_created = True ) : ","for model in router . var1 ( app_config , connection . alias , include_auto_created = True ) : "
"for model in router.get_migratable_models method return value, called with 3 arguments: app_config, connection.alias,","for model in router var1 method return value, called with 3 arguments: var2 var4 ","for model in router . get_migratable_models ( app_config , connection . alias , include_auto_created = True ) : ","for model in router . var1 ( var2 , var4 , include_auto_created = True ) : "
"for model in return value of the method router.get_migratable_models with arguments app_config, connection.alias,",for model in return value of method router var1 with arguments var2 var4 ,"for model in router . get_migratable_models ( app_config , connection . alias , include_auto_created = True ) : ","for model in router . var1 ( var2 , var4 , include_auto_created = True ) : "
"call the method app_list.items, use the result as an argument for the call to the function sort_dependencies, for every model in result,","call method var0 items, use result as argument for call to function var2 for every model in result,",for model in sort_dependencies ( app_list . items ( ) ) : ,for model in var2 ( var0 . items ( ) ) : 
"call the function get_format_modules with an argument lang, for every module in the result,","call function var0 with argument var1 for every module in result,",for module in get_format_modules ( lang ) : ,for module in var0 ( var1 ) : 
"for every module in templatetags_modules,",for every module in var0 ,for module in templatetags_modules : ,for module in var0 : 
"for every module_to_search in args,",for every var0 in var1 ,for module_to_search in args : ,for var0 in var1 : 
"substitute the result for commands_dict.   for every name and app in return value of the function six.iteritems calle with return argument of function get_commands as an arugment,",substitute result for var0 for every name and var2 in return value of function var3 var4 with return argument of function var5 as var7 ,"for name , app in six . iteritems ( get_commands ( ) ) : ","for name , var2 in var3 ( get_commands ( ) ) : "
"call the function  six.iteritems with an argument blocks, for every name and block in result,","call function var1 with argument blocks, for every name and block in result,","for name , block in six . iteritems ( blocks ) : ","for name , var0block in var1 ( blocks ) : "
"call the method self.fields.items, for every name and field in return value,","call method var0 for every name and field in return value,","for name , field in self . fields . items ( ) : ","for name , field in var0 ( ) : "
"call the method self.fields.items, for every name and field in result,","call method var0 for every name and field in result,","for name , field in self . fields . items ( ) : ","for name , field in var0 ( ) : "
"call the method self.fields.items, for every name and field in the result,","call method var0 for every name and field in result,","for name , field in self . fields . items ( ) : ","for name , field in var0 ( ) : "
"call the method lexer.lex with an arguments js, for every name and tok in the result,","call method var0 with arguments js, for every name and var1 in result,","for name , tok in lexer . lex ( js ) : ","for name , var1 in var0 ( js ) : "
"for every name and value in items of props dictionary,","for every name and value in items of props dict,","for name , value in props . items ( ) : ","for name , value in props . items ( ) : "
"for every name and value in return value of the method self.extra_headers.items,","for every name and value in return value of method self var1 items,","for name , value in self . extra_headers . items ( ) : ","for name , value in self . var1 . items ( ) : "
"for every name in bits from the start index 1 to the end index negative 2,","for every name in bits from start index 1 to end index negative 2,",for name in bits [ 1 : - 2 ] : ,for name in bits [ 1 : - 2 ] : 
"for name in attributes of models_signals object,","for name in attributes of var0 object,",for name in dir ( models . signals ) : ,for name in dir ( models . signals ) : 
"for every name in filters,","for every name in filters,",for name in filters : ,for name in filters : 
"for every name in formatters,",for every name in var0 ,for name in formatters : ,for name in var0 : 
"for every name in handlers,","for every name in handlers,",for name in handlers : ,for name in handlers : 
"for every name in loggers,","for every name in loggers,",for name in loggers : ,for name in loggers : 
"for every name in MEDIA_TYPES,",for every name in var0 ,for name in MEDIA_TYPES : ,for name in var0 : 
"for every name in namelist,",for every name in var0 ,for name in namelist : ,for name in var0 : 
"for every name in pattern.reverse_dict,",for every name in pattern var1 ,for name in pattern . reverse_dict : ,for name in pattern . var1 : 
"for every name in self.fields,",for every name in var0 ,for name in self . fields : ,for name in var0 : 
"for every name in sorted value under the app key of the commands_dict dictionary,","for every name in sorted value under var0 key of var1 dict,",for name in sorted ( commands_dict [ app ] ) : ,for name in sorted ( var1 [ var0 ] ) : 
"sort elements of handlers, for every name in result,","sort elements of handlers, for every name in result,",for name in sorted ( handlers ) : ,for name in sorted ( handlers ) : 
"and dictionary created by applying defaults mapping on the pattern.default_kwargs dictionary.   for every namespace and tuple containing: prefix and sub_pattern, in return value of the method pattern.namespace_dict.items,","and dict created by applying defaults mapping on pattern var1 dict var2 for every var3 and tuple containing: prefix and var4 in return value of method pattern var7 items,","for namespace , ( prefix , sub_pattern ) in pattern . namespace_dict . items ( ) : ","for var3 , ( prefix , var4 ) in pattern . var7 . items ( ) : "
"for every node in compiled_parent.nodelist,","for every node in var0 nodelist,",for node in compiled_parent . nodelist : ,for node in var0 . nodelist : 
"for every node in return value of the graph.leaf_nodes method called with the app_name argument,","for every node in return value of graph var1 method called with var2 argument,",for node in graph . leaf_nodes ( app_name ) : ,for node in graph . var1 ( var2 ) : 
"for every node in nodelist,",for every node in var0 ,for node in nodelist : ,for node in var0 : 
"for every node in self,","for every node in self,",for node in self : ,for node in self : 
"for every node in self.nodelist,",for every node in var0 ,for node in self . nodelist : ,for node in var0 : 
"for every node in self.nodelist_empty,",for every node in self var1 ,for node in self . nodelist_empty : ,for node in self . var1 : 
"for every node in self.nodelist_loop,",for every node in self var1 ,for node in self . nodelist_loop : ,for node in self . var1 : 
"for every node_app and node_name in migration.branch,",for every var0 and var1 in var3 ,"for node_app , node_name in migration . branch : ","for var0 , var1 in var3 : "
"for every o in opts,","for every o in opts,",for o in opts : ,for o in opts : 
loop from 0 to 256,loop from 0 to 256,for o in range ( 256 ) : ,for o in range ( 256 ) : 
"and ignorenonexistent set to self.ignore, substitute the result for objects.   for every obj in objects,","and var0 set to var1 substitute result for objects var3 for every var2 in objects,",for obj in objects : ,for var2 in var2ects : 
"for every obj in PythonDeserializer called with arguments objects and unpacked dictionary options,","for every var0 in var1 called with arguments objects and unpacked dict options,","for obj in PythonDeserializer ( objects , ** options ) : ","for var0 in var1 ( objects , ** options ) : "
"for every obj in return value of the PythonDeserializer created with 2 arguments: return value of the function yaml.load,",for every var0 in return value of var1 created with 2 arguments: return value of function var2 ,"for obj in PythonDeserializer ( yaml . load ( stream , Loader = SafeLoader ) , ** options ) : ","for var0 in var1 ( yaml . load ( stream , Loader = SafeLoader ) , ** options ) : "
"for every obj in queryset,",for every var0 in var1 ,for obj in queryset : ,for var0 in var1 : 
"for every obj in result of the method queryset.iterator,",for every var0 in result of method var1 ,for obj in queryset . iterator ( ) : ,for var0 in var1 ( ) : 
"for every obj in result of the call to the method self.queryset.all,",for every var0 in result of call to method var1 ,for obj in self . queryset . all ( ) : ,for var0 in var1 ( ) : 
"for every opening and closing in WRAPPING_PUNCTUATION,",for every opening and closing in var0 ,"for opening , closing in WRAPPING_PUNCTUATION : ","for opening , closing in var0 : "
"use it as an argument for the call to the method self.style.MIGRATE_HEADING, write the result to self.stdout.   for every operation in migration.merged_operations,",use it as argument for call to method var0 var1 write result to var2 for every operation in migration var5 ,for operation in migration . merged_operations : ,for operation in migration . var5 : 
"write the result to self.stdout.   for every operation in migration.operations,",write result to var0 for every operation in var2 ,for operation in migration . operations : ,for operation in var2 : 
"get the value under the root key of the convert dictionary, for every opname and opfunc in the result,","get value under root key of convert dict, for every var0 and var1 in result,","for opname , opfunc in convert [ root ] : ","for var0 , var1 in convert [ root ] : "
"assign the result to opts and new_class._meta.   for every opt in list containing 3 elements: strings 'fields', 'exclude' and 'localized_fields',","assign result to opts and var0 _meta var2 for every opt in list containing var2 elements: strings var4, var5 and var6,","for opt in [ 'fields' , 'exclude' , 'localized_fields' ] : ","for opt in [ var4 , 'exclude' , 'localized_fields' ] : "
"dest set to string 'no_color' default set to boolean False and help set to a string ""Don't colorize the command output."".   for every opt in self.option_list,",dest set to string var0 default set to boolean var1 and help set to string var2 var5 for every opt in self var7 ,for opt in self . option_list : ,for opt in self . var7 : 
"called with an argument option_value, append the result to output.   for every option in option_label,",called with argument var0 append result to output var1 for every option in var2 ,for option in option_label : ,for option in var2 : 
"sort the result and substitute it for options.   for every option in options,","sort result and substitute it for options var0 for every option in options,",for option in options : ,for option in options : 
"call the function chain with arguments self.choices and choices, for every option_value and option_label in the result,","call function chain with arguments var0 and choices, for every var1 and var2 in result,","for option_value , option_label in chain ( self . choices , choices ) : ","for var1 , var2 in chain ( var0 , choices ) : "
"for every p in parts without the first element,","for every p in parts var0 first element,",for p in parts [ 1 : ] : ,for p in parts [ 1 : ] : 
"for every p in path,","for every p in path,",for p in path : ,for p in path : 
"for every p in plist,",for every p in var0 ,for p in plist : ,for p in var0 : 
"for every part in parts,","for every part in parts,",for part in parts : ,for part in parts : 
"for every part in plural,","for every part in plural,",for part in plural : ,for part in plural : 
"and trimmed and result of the function join_tokens called with 2 arguments: plural and trimmed, write the result to out.   for every part in singular,","and trimmed and result of function var0 called with 2 arguments: plural and trimmed, write result to out var1 for every part in singular,",for part in singular : ,for part in singular : 
"and trimmed, write the result to out.   for every part in singular,","and trimmed, write result to out var0 for every part in singular,",for part in singular : ,for part in singular : 
"call the function all_locale_paths, for every path is the result,","call function var0 for every path is result,",for path in all_locale_paths ( ) : ,for path in var0 ( ) : 
"for every path in collect,","for every path in collect,",for path in collect : ,for path in collect : 
"for every path in data,","for every path in data,",for path in data : ,for path in data : 
"for every path in format_module_path,",for every path in var0 ,for path in format_module_path : ,for path in var0 : 
"pyinotify.IN_MOVED_FROM, pyinotify.IN_MOVED_TO and pyinotify.IN_CREATE, store the result in mask.   for every path in return value of the call to the function gen_filenames with argument only_new set to boolean True,",var0 var3 var0 var4 and var0 var6 store result in mask var8 for every path in return value of call to function var9 with argument var11 set to boolean var12 ,for path in gen_filenames ( only_new = True ) : ,for path in var9 ( var11 = var12 ) : 
"for every path in paths,","for every path in paths,",for path in paths : ,for path in paths : 
"for every path in self.locale_paths,",for every path in self var1 ,for path in self . locale_paths : ,for path in self . var1 : 
"for every path_to_remove in self.paths_to_remove,",for every var0 in self var2 ,for path_to_remove in self . paths_to_remove : ,for var0 in self . var2 : 
for every pattern in allowed_hosts:,for every pattern in allowed_hosts:,for pattern in allowed_hosts : ,for pattern in var0 : 
"for every pattern in reversed list self.url_patterns,",for every pattern in reversed list self var1 ,for pattern in reversed ( self . url_patterns ) : ,for pattern in reversed ( self . var1 ) : 
"for every pattern in self.url_patterns,",for every pattern in self var1 ,for pattern in self . url_patterns : ,for pattern in self . var1 : 
"for every pk in value,","for every var0 in value,",for pk in value : ,for var0 in value : 
for every plan_node in return value of the graph.forwards_plan method called with node as argument.,for every var0 in return value of graph var2 method called with node as argument.,for plan_node in graph . forwards_plan ( node ) : ,for var0 in graph . var2 ( node ) : 
"for every pos and elt in enumerated iterable source,","for every pos and var0 in enumerated var1 source,","for pos , elt in enumerate ( source ) : ","for pos , var0 in enumerate ( source ) : "
"substitute the fitst element of the result for prefix_norm and prefix_args, respectively.   for every possibility, pattern and defaults in possibilities,","substitute var0 element of result for var1 and var2 respectively var4 for every possibility, pattern and defaults in possibilities,","for possibility , pattern , defaults in possibilities : ","for possibility , pattern , defaults in possibilities : "
"for every post_callback in self._post_render_callbacks,",for every var0 in var1 ,for post_callback in self . _post_render_callbacks : ,for var0 in var1 : 
"for every potfile in potfiles,",for every var0 in var1 ,for potfile in potfiles : ,for var0 in var0s : 
"call the function get_standard_processors, append processors to the result, for every processor is the result,","call function var0 append processors to result, for every processor is result,",for processor in get_standard_processors ( ) + processors : ,for processor in var0 ( ) + processors : 
"for every program in programs,","for every program in programs,",for program in programs : ,for program in programs : 
"for every punctuation in TRAILING_PUNCTUATION,",for every punctuation in var0 ,for punctuation in TRAILING_PUNCTUATION : ,for punctuation in var0 : 
"for every pythonrc in tuple containing 2 elements: return value of the function os.environ.get called with a string ""PYTHONSTARTUP"",","for every var0 in tuple containing 2 elements: return value of function var1 called with string var2,","for pythonrc in ( os . environ . get ( 'PYTHONSTARTUP' ) , '~/.pythonrc.py' ) : ","for var0 in ( os . environ . get ( 'PYTHONSTARTUP' ) , '~/.var0.py' ) : "
"for every receiver, _ and _ in receivers,","for every receiver var0 and var0 in receivers,","for receiver , _ , _ in receivers : ","for receiver , var0 , var0 in receivers : "
"for every reference and receivers in return value of the call of obj.unresolved_references.items method,","for every reference and receivers in return value of call of obj var1 items method,","for reference , receivers in obj . unresolved_references . items ( ) : ","for reference , receivers in obj . var1 . items ( ) : "
for every refto and refs in return value of references.items method.,for every var0 and refs in return value of references.items method.,"for refto , refs in references . items ( ) : ","for var0 , refs in references . items ( ) : "
"for every refto and refs in return value of the method references.items,",for every var0 and refs in return value of method var1 ,"for refto , refs in references . items ( ) : ","for var0 , refs in var1 ( ) : "
"for every regex in tuple with 3 elements: RFC1123_DATE, RFC850_DATE and ASCTIME_DATE,",for every var0 in tuple with 3 elements: var1 var2 and var4 ,"for regex in RFC1123_DATE , RFC850_DATE , ASCTIME_DATE : ","for var0 in var1 , var2 , var4 : "
return value of the function smart_text with return value of the method value._get_pk_val as an argument for 'pk'.   for every relobj in iterator generated from the field.name attribute of the obj object.,return value of function var0 with return value of method var2 as argument for var3 var4 for every var5 in var7 generated from var8 attribute of var6 object.,"for relobj in getattr ( obj , field . name ) . iterator ( ) : ","for var5 in getattr ( var6 , var8 ) . var7 ( ) : "
"for every renamed_method in cls.renamed_methods,",for every var0 in cls var2 ,for renamed_method in cls . renamed_methods : ,for var0 in cls . var0s : 
"call the function unicodedata.normalize with 2 arguments: string 'NFKD' and thousand_sep, put the result and thousand_sep into a set,","call function var0 with 2 arguments: string var1 and var2 put result and var2 into set,","for replacement in set ( [ thousand_sep , unicodedata . normalize ( 'NFKD' , thousand_sep ) ] ) : ","for replacement in set ( [ var2 , var0 ( var1 , var2 ) ] ) : "
"for every result and params in possibility,","for every result and var0 in possibility,","for result , params in possibility : ","for result , var0 in possibility : "
"for every resultclass in resultclasses,",for every var0 in var1 ,for resultclass in resultclasses : ,for var0 in var0es : 
"for every role in termcolors.PALETTES list at the index termcolors.NOCOLOR_PALETTE,",for every role in var0 var2 list at index var0 var3 ,for role in termcolors . PALETTES [ termcolors . NOCOLOR_PALETTE ] : ,for role in var0 . var2 [ var0 . var3 ] : 
"for every root, dirs and files in subdirectory tree starting from the base dir template_dir,",for every root var0 and files in subdirectory tree starting from base dir var1 ,"for root , dirs , files in os . walk ( template_dir ) : ","for root , var0 , files in os . walk ( var1 ) : "
"for root, dirs and files in sorted list of the directory tree starting from the directory self.path,",for root var0 and files in sorted list of directory tree starting from directory var1 ,"for root , dirs , files in sorted ( os . walk ( self . path ) ) : ","for root , var0 , files in sorted ( os . walk ( var1 ) ) : "
"for every root in settings.ALLOWED_INCLUDE_ROOTS,",for every root in settings var0 ,for root in settings . ALLOWED_INCLUDE_ROOTS : ,for root in settings . var0 : 
"for every shell in available_shells,",for every shell in var0 ,for shell in available_shells : ,for shell in var0 : 
"for every site in sites,","for every site in sites,",for site in sites : ,for site in sites : 
"if site is contained in sites1,",if site is contained in var0 ,for site in sites1 : ,for site in var0 : 
"for every slots_var in slots,","for every var0 in slots,",for slots_var in slots : ,for var0 in slots : 
"for every smigration in migrations_to_squash,",for every var0 in var1 ,for smigration in migrations_to_squash : ,for var0 in var1 : 
"for every sql in custom_sql,",for every sql in var0 ,for sql in custom_sql : ,for sql in var0 : 
"for every sql in index_sql,",for every sql in var0 ,for sql in index_sql : ,for sql in var0 : 
"for every sql in sql_list,",for every sql in var0 ,for sql in sql_list : ,for sql in var0 : 
"for every sql_file in sql_files,",for every var0 in var1 ,for sql_file in sql_files : ,for var0 in var0s : 
"call the method states.items, for every state and rules in the result,","call method var0 for every state and rules in result,","for state , rules in states . items ( ) : ","for state , rules in var0 ( ) : "
"tablename and return value of the function force_text called with an argument e, respectively.   for every statement in index_output,","var0 and return value of function var1 called with argument e, respectively var2 for every statement in var3 ",for statement in index_output : ,for statement in var3 : 
"for statements is sql,",for statements is var0 ,for statement in sql : ,for statement in var0 : 
for every statements in sql_statements:,for every statements in sql_statements:,for statement in sql_statements : ,for statement in var0 : 
"for every sub_stream in boundarystream,",for every var0 in var1 ,for sub_stream in boundarystream : ,for var0 in var1 : 
"for every sublist in second_item,",for every var0 in var1 ,for sublist in second_item : ,for var0 in var1 : 
"for every subnode in node,","for every var0 in node,",for subnode in node : ,for var0 in node : 
"call the method self.field.widget.subwidgets with 3 arguments: self.html_name, return value of the method self.value and attrs,",call method var0 with 3 arguments: self var2 return value of method var3 and var4 ,"for subwidget in self . field . widget . subwidgets ( self . html_name , self . value ( ) , attrs ) : ","for subwidget in var0 ( self . var2 , var3 ( ) , var4 ) : "
"for every supported_code in _supported,",for every var0 in var1 ,for supported_code in _supported : ,for var0 in var1 : 
"instantiate Lexer class with 2 argumets src and origin, call the method tokenize from it, for every t in the result,","instantiate var0 class with 2 var1 var2 and origin, call method var3 from it, for every t in result,","for t in Lexer ( src , origin ) . tokenize ( ) : ","for t in var0 ( var2 , origin ) . var3 ( ) : "
"get the type of res, call the method mro on the result, for every t in the result,","get type of res, call method var0 on result, for every t in result,",for t in type ( res ) . mro ( ) : ,for t in type ( res ) . var0 ( ) : 
"for every table_name in return value of the method connection.introspection.table_names called with an argument cursor,","for every var0 in return value of method connection.introspection var2 called with argument cursor,",for table_name in connection . introspection . table_names ( cursor ) : ,for var0 in connection . introspection . var0s ( cursor ) : 
"for every tablename in tablenames,",for every var0 in var1 ,for tablename in tablenames : ,for var0 in var0s : 
"for every tag in open_tags,",for every tag in var0 ,for tag in open_tags : ,for tag in var0 : 
"for every taglib in bits without the first element,","for every var0 in bits var1 first element,",for taglib in bits [ 1 : ] : ,for var0 in bits [ 1 : ] : 
"for every template_dir in template_dirs,",for every var0 in var1 ,for template_dir in template_dirs : ,for var0 in var0s : 
"for every template_name in template_name_list,",for every var0 in var1 ,for template_name in template_name_list : ,for var0 in var0_list : 
"for every app_config in result of the method apps.get_app_configs, append the resulting list to templatetags_modules_candidates.   for every templatetag_module in templatetags_modules_candidates,",for every var0 in result of method apps var2 append resulting list to var3 for every var8 in var3 ,for templatetag_module in templatetags_modules_candidates : ,for var8 in var3 : 
"for every tok in rules,","for every var0 in rules,",for tok in rules : ,for var0 in rules : 
"call the method resultclass.mro, reverse the order of elements, for every type_ in the result.","call method var0 reverse order of elements, for every var1 in result.",for type_ in reversed ( resultclass . mro ( ) ) : ,for var1 in reversed ( resultclass . mro ( ) ) : 
"for every uclass, unique_check in all_unique_checks,",for every var0 var1 in var2 ,"for uclass , unique_check in all_unique_checks : ","for var0 , var1 in var2 : "
"for every v in self.validators,",for every v in var0 ,for v in self . validators : ,for v in var0 : 
"and code set to an string 'required'.   for every val in value,","and code set to string var0 var1 for every var2 in value,",for val in value : ,for var2 in var2ue : 
"for every o in opts.   for every val in value,","for every o in opts var0 for every var1 in value,",for val in value : ,for var1 in var1ue : 
"joined into a string, separated by whitespaces, substitute the result for loopvars.   for every var in loopvars,","joined into string, separated by var0 substitute result for var1 for every var in var1 ",for var in loopvars : ,for var in var1 : 
"for every var in self.vars,",for every var in var0 ,for var in self . vars : ,for var in var0 : 
"for every w in self.widgets,",for every w in var0 ,for w in self . widgets : ,for w in var0 : 
"call the method self.get_renderer with 4 arguments: name, value, attrs and choices, for every widget in result,","call method self var1 with 4 arguments: name, value var2 and choices, for every widget in result,","for widget in self . get_renderer ( name , value , attrs , choices ) : ","for widget in self . var1 ( name , value , var2 , choices ) : "
"for every bwidget in self.widgets,",for every var0 in var1 ,for widget in self . widgets : ,for widget in var1 : 
"for every widget in self.widgets:,","for every widget in self.widgets:,",for widget in self . widgets : ,for widget in var0 : 
"zip val1 and va2 into list of tuples, for every x and y in the result,","zip var0 and var1 into list of var2 for every x and y in result,","for x , y in zip ( val1 , val2 ) : ","for x , y in zip ( var0 , val2 ) : "
"split arg by ':', for every x in result,","split var0 by var1, for every x in result,",for x in arg . split ( ':' ) : ,for x in var0 . split ( var1 ) : 
loop through the variable code converted into a bytearray using an iterator x,loop through variable code converted into var0 using var1 x,for x in bytearray ( code ) : ,for x in var0 ( code ) : 
loop through the variable decoded_shell converted into a bytearray using an iterator x,loop through variable var0 converted into var1 using var2 x,for x in bytearray ( decoded_shell ) : ,for x in var1 ( var0 ) : 
loop through the variable decoded_shellcode converted into a bytearray using an iterator x,loop through variable var0 converted into var1 using var2 x,for x in bytearray ( decoded_shellcode ) : ,for x in var1 ( var0 ) : 
loop through the variable encoded_shell converted into a bytearray using an iterator x,loop through variable var0 converted into var1 using var2 x,for x in bytearray ( encoded_shell ) : ,for x in var1 ( var0 ) : 
loop through sc converted into a bytearray,loop through sc converted into var0,for x in bytearray ( sc ) : ,for x in var0 ( sc ) : 
Make a for loop for each x in the bytearray of sc2,Make for loop for each x in var0 of var1,for x in bytearray ( sc2 ) : ,for x in var0 ( var1 ) : 
iterate x over the array of bytes of the string sh4,iterate x over array of bytes of string var0,for x in bytearray ( sh4 ) : ,for x in bytearray ( var0 ) : 
iterate over x in the array of bytes of the string shellcode,iterate over x in array of bytes of string var0,for x in bytearray ( shellcode ) : ,for x in bytearray ( var0 ) : 
loop through the variable shellcode converted into a bytearray using an iterator x,loop through variable var0 converted into var1 using var2 x,for x in bytearray ( shellcode ) : ,for x in var1 ( var0 ) : 
loop through the variable y converted into a bytearray using an iterator x,loop through variable y converted into var0 using var1 x,for x in bytearray ( y ) : ,for x in var0 ( y ) : 
loop through decoded_shellcode converted into a bytearray,loop through var0 converted into var1,for y in bytearray ( decoded_shellcode ) : ,for y in var1 ( var0 ) : 
loop through encded_shellcode converted into a bytearray,loop through var0 converted into var1,for y in bytearray ( encoded_shellcode ) : ,for y in var1 ( encoded_shellcode ) : 
loop through the variable shellcode converted into a bytearray using an iterator y,loop through variable var0 converted into var1 using var2 y,for y in bytearray ( shellcode ) : ,for y in var1 ( var0 ) : 
loop through f converted into a bytearray,loop through f converted into var0,for z in bytearray ( f ) : ,for z in var0 ( f ) : 
loop through shellcode converted into a bytearray,loop through var0 converted into var1,for z in bytearray ( shellcode ) : ,for z in var1 ( var0 ) : 
substitute force_text for force_str.,substitute var0 for var1 ,force_str = force_text,var1 = var0
substitute force_text for force_unicode.,substitute var0 for var1 ,force_unicode = force_text,var1 = var0
"foreground is a dictionary created with elements: x appended to a string '3' for value under the key x of color_names dictionary,","foreground is dict created with elements: x appended to string var0 for value under key x of var1 dict,","foreground = dict ( ( color_names [ x ] , '3%s' % x ) for x in range ( 8 ) )","foreground = dict ( ( var1 [ x ] , '3%s' % x ) for x in range ( 8 ) )"
"call the method self.error_class with an argument list with a element: result of the method self.get_form_error,",call method self var1 with argument list with element: result of method self var3 ,form . _errors [ NON_FIELD_ERRORS ] = self . error_class ( [ self . get_form_error ( ) ] ),form . _errors [ NON_FIELD_ERRORS ] = self . var1 ( [ self . var3 ( ) ] )
"call the method self.error_class with an argument list with one element, return value of the method self.get_form_error,","call method self var1 with argument list with one element, return value of method self var3 ",form . _errors [ NON_FIELD_ERRORS ] = self . error_class ( [ self . get_form_error ( ) ] ),form . _errors [ NON_FIELD_ERRORS ] = self . var1 ( [ self . var3 ( ) ] )
append self.fk.name to form._meta.fields.,append var0 to var1 ,form . _meta . fields . append ( self . fk . name ),var1 . append ( var0 )
form._meta.fields is a list created out of form._meta.fields elements.,var0 is list created out of var0 elements.,form . _meta . fields = list ( form . _meta . fields ),var0 = list ( var0 )
"call the method form.add_prefix with an argument self._pk_field.name,",call method form var1 with argument var2 ,form . data [ form . add_prefix ( self . _pk_field . name ) ] = None,form . data [ form . var1 ( var2 ) ] = None
"use the result as an key to get the value of the form.data dictionary, assign it value None.   call the method form.add_prefix with an argument self.fk.name,","use result as key to get value of form.data dict, assign it value var0 call method form var3 with argument var4 ",form . data [ form . add_prefix ( self . fk . name ) ] = None,form . data [ form . var3 ( var4 ) ] = var0
"value under the DELETION_FIELD_NAME key of the form.fields is an instance of BooleanField class, created with 2 arguments:","value under var0 key of var1 is instance of var2 class, created with 2 arguments:","form . fields [ DELETION_FIELD_NAME ] = BooleanField ( label = _ ( 'Delete' ) , required = False )","var1 [ var0 ] = var2 ( label = _ ( 'Delete' ) , required = False )"
value under the name key of the form.fields dictionary is an instance of InlineForeignKeyField created with 2 arguments:,value under name key of var0 dict is instance of var1 created with 2 arguments:,"form . fields [ name ] = InlineForeignKeyField ( self . instance , ** kwargs )","var0 [ name ] = var1 ( self . instance , ** kwargs )"
"value under the ORDERING_FIELD_NAME key of the form.fields is an instance of IntegerField class, created with 3 arguments:","value under var0 key of var1 is instance of var2 class, created with 3 arguments:","form . fields [ ORDERING_FIELD_NAME ] = IntegerField ( label = _ ( 'Order' ) , initial = index + 1 , required = False )","var1 [ var0 ] = var2 ( label = _ ( 'Order' ) , initial = index + 1 , required = False )"
"value under the ORDERING_FIELD_NAME key of the form.fields is an instance of IntegerField class, created with 2 arguments:","value under var0 key of var1 is instance of var2 class, created with 2 arguments:","form . fields [ ORDERING_FIELD_NAME ] = IntegerField ( label = _ ( 'Order' ) , required = False )","var1 [ var0 ] = var2 ( label = _ ( 'Order' ) , required = False )"
"value under the self._pk_field.name key of form.fields dictionary is an instance of ModelChoiceField class,","value under var0 key of var1 dict is instance of var2 class,","form . fields [ self . _pk_field . name ] = ModelChoiceField ( qs , initial = pk_value , required = False , widget = widget )","var1 [ var0 ] = var2 ( qs , initial = pk_value , required = False , widget = widget )"
call the function form.save_m2m.,call function form var2 ,form . save_m2m ( ),form . var2 ( )
call the method form.save_m2m.,call method form var2 ,form . save_m2m ( ),form . var2 ( )
substitute save_m2m for form.save_m2m.,substitute var0 for form var0 ,form . save_m2m = save_m2m,form . var0 = var0
"form is an instance of ManagementForm class, created with 3 arguments: auto_id as self.auto_id, prefix as self.prefix,","form is instance of var0 class, created with 3 arguments: var1 as self var1 prefix as var5 ","form = ManagementForm ( auto_id = self . auto_id , prefix = self . prefix , initial = { TOTAL_FORM_COUNT : self . total_form_count ( ) , INITIAL_FORM_COUNT : self . initial_form_count ( ) , MIN_NUM_FORM_COUNT : self . min_num , MAX_NUM_FORM_COUNT : self . max_num } )","form = var0 ( var1 = self . var1 , prefix = var5 , initial = { TOTAL_FORM_COUNT : self . total_form_count ( ) , INITIAL_FORM_COUNT : self . initial_form_count ( ) , MIN_NUM_FORM_COUNT : self . min_num , MAX_NUM_FORM_COUNT : self . max_num } )"
"form is an instance of ManagementForm class, created with 3 arguments: self.data, auto_id as self.auto_id and prefix as self.prefix.","form is instance of var0 class, created with 3 arguments: var1 var2 as self var2 and prefix as var6 ","form = ManagementForm ( self . data , auto_id = self . auto_id , prefix = self . prefix )","form = var0 ( var1 , var2 = self . var2 , prefix = var6 )"
"explicitly is prohibited.""   call the function modelform_factory with 10 arguments: model, form as form, fields as fields, exclude as exclude,","explicitly is prohibited."" call function var1 with 10 arguments: model, form as form, fields as fields, exclude as exclude,","form = modelform_factory ( model , form = form , fields = fields , exclude = exclude , formfield_callback = formfield_callback , widgets = widgets , localized_fields = localized_fields , labels = labels , help_texts = help_texts , error_messages = error_messages )","form = var1 ( model , form = form , fields = fields , exclude = exclude , formfield_callback = formfield_callback , widgets = widgets , localized_fields = localized_fields , labels = labels , help_texts = help_texts , error_messages = error_messages )"
"call the function empty_form with 3 arguments: auto_id as self.auto_id, prefix set to the return value of the self.add_prefix method,","call function var0 with 3 arguments: var1 as self var1 prefix set to return value of self var6 method,","form = self . form ( auto_id = self . auto_id , prefix = self . add_prefix ( '__prefix__' ) , empty_permitted = True , )","form = self . form ( var1 = self . var1 , prefix = self . var6 ( '__prefix__' ) , empty_permitted = True )"
"call the method self.form with unpacked dictionary defaults as an argument, substitute it for form.","call method var0 with unpacked dict defaults as argument, substitute it for form.",form = self . form ( ** defaults ),form = var0 ( ** defaults )
substitute i-th element of self.forms for form.,substitute i-th element of var0 for form.,form = self . forms [ i ],form = var0 [ i ]
"call the method _construct_form from the base class of the class BaseInlineFormSet, with 2 arguments: i,","call method var0 from base class of class var1 with 2 arguments: i,","form = super ( BaseInlineFormSet , self ) . _construct_form ( i , ** kwargs )","form = super ( var1 , self ) . var0 ( i , ** kwargs )"
form_class_attrs is a dictionary with 2 entries: Meta for 'Meta' and formfield_callback for 'formfield_callback'.,var0 is dict with 2 entries: Meta for var1 and formfield_callback for var6.,"form_class_attrs = { 'Meta' : Meta , 'formfield_callback' : formfield_callback }","var0 = { var1 : Meta , 'formfield_callback' : formfield_callback }"
substitute value under the field key of the self.fields dictionary for form_field.,substitute value under field key of var0 dict for var1 ,form_field = self . fields [ field ],var1 = var0 [ field ]
"assign the value of the dictionary color_settings under the key role to format, if key doesnt exist assign the empty dictionary.","assign value of dict var0 under key role to format, if key doesnt exist assign empty dict.","format = color_settings . get ( role , { } )","format = var0 . get ( role , { } )"
"call the function force_str with an argument: default if it is true, or if not, first element of the result of the function,","call function var0 with argument: default if it is true, or if not, first element of result of function,",format = force_str ( default or get_format ( 'DATE_INPUT_FORMATS' ) [ 0 ] ),format = var0 ( default or get_format ( 'DATE_INPUT_FORMATS' ) [ 0 ] )
"call the function force_str with an argument: default if it is true, or if not, first element of the result of the function,","call function var0 with argument: default if it is true, or if not, first element of result of function,",format = force_str ( default or get_format ( 'DATETIME_INPUT_FORMATS' ) [ 0 ] ),format = var0 ( default or get_format ( 'DATETIME_INPUT_FORMATS' ) [ 0 ] )
"call the function force_str with an argument: default if it is true, or if not, first element of the result of the function,","call function var0 with argument: default if it is true, or if not, first element of result of function,",format = force_str ( default or get_format ( 'TIME_INPUT_FORMATS' ) [ 0 ] ),format = var0 ( default or get_format ( 'TIME_INPUT_FORMATS' ) [ 0 ] )
append string '0' to format_0x,append string var0 to var1,format_0x += '0',var1 += var0
append string '0xxx' to format_0x,append string var0 to var1,format_0x += '0xxx',var1 += var0
"append the string "",""  and encoded_instruction_in_hex to format_0x",append string var1 and var2 to var4,"format_0x += ', ' + encoded_instruction_in_hex","var4 += ',var0' + var2"
"append the string "",""  and the variable encoded_instruction_in_hex to format_0x",append string var1 and variable var2 to var4,"format_0x += ', ' + encoded_instruction_in_hex","var4 += ',var0' + var2"
"append  the variable encoded and string "","" to format_0x",append variable encoded and string var1 to var2,"format_0x += encoded + ', '","var2 += encoded + ',var0'"
initialize the variable format_0x to an empty string,initialize variable var0 to empty string,format_0x = '',var0 = ''
format_key is a string 'DATE_INPUT_FORMATS'.,format_key is string var0.,format_key = 'DATE_INPUT_FORMATS',format_key = var0
format_key is a string 'DATETIME_INPUT_FORMATS'.,format_key is string var0.,format_key = 'DATETIME_INPUT_FORMATS',format_key = var0
format_key is a string 'TIME_INPUT_FORMATS'.,format_key is string var0.,format_key = 'TIME_INPUT_FORMATS',format_key = var0
append string 'django.conf.locale.%s' to format_locations.,append string var0 to var1 ,format_locations . append ( 'django.conf.locale.%s' ),var1 . append ( var0 )
"concatenate path and string '.%s', append the result to format_module_path.","concatenate path and string var0, append result to var1 ",format_locations . append ( path + '.%s' ),format_locations . append ( path + var0 )
format_locations is an empty list.,var0 is empty list.,format_locations = [ ],var0 = [ ]
format_module_path is a list containing an element format_module_path.,var0 is list containing element var0 ,format_module_path = [ format_module_path ],var0 = [ var0 ]
substitute settings.FORMAT_MODULE_PATH for settings.FORMAT_MODULE_PATH.,substitute settings var0 for settings var0 ,format_module_path = settings . FORMAT_MODULE_PATH,format_module_path = settings . var0
format_slash_x is an empty string,var0 is empty string,format_slash_x = '',var0 = ''
initialize format_slash_x as a string,initialize var0 as string,format_slash_x = '',var0 = ''
"call the function force_str with an argument format_type, substitute the result for format_type.",call function var0 with argument var1 substitute result for var1 ,format_type = force_str ( format_type ),var1 = var0 ( var1 )
append string '0x' to formatted,append string var0 to formatted,formatted += '0x',formatted += var0
initialize formatted to an empty string,initialize formatted to empty string,formatted = '',formatted = ''
"sort elements formatted, join them in the list separated with newline character, substitute the result for formatted.","sort elements formatted, join var0 in list separated with var1 character, substitute result for formatted.",formatted = '\n' . join ( sorted ( formatted ) ),formatted = '\n' . join ( sorted ( formatted ) )
"if e.is_serious method evaluates to true, call the function color_style, on the result call the method ERROR with result of the  force_str called with an argument e, if not call the function color_style on the result call the method ERROR with result of the  force_str called with an argument e, for every e in issues, formatted is a tuple containing the previous result.","if e var3 method evaluates to true, call function var4 on result call method var8 with result of var10 called with argument e, if not call function var4 on result call method var8 with result of var10 called with argument e, for every e in issues, formatted is tuple containing previous result.",formatted = ( color_style ( ) . ERROR ( force_str ( e ) ) if e . is_serious ( ) else color_style ( ) . WARNING ( force_str ( e ) ) for e in issues ),formatted = ( var4 ( ) . var8 ( var10 ( e ) ) if e . var3 ( ) else var4 ( ) . WARNING ( var10 ( e ) ) for e in issues )
"replace every occurrence of '\n' in subject with '\\n' and replace every occurrence of '\r' in subject with '\\r',","replace every occurrence of var0 in subject with var1 and replace every occurrence of var3 in subject with var5,","formatted_subject = subject . replace ( '\n' , '\\n' ) . replace ( '\r' , '\\r' )","formatted_subject = subject . replace ( '\n' , '\\n' ) . replace ( '\r' , '\\r' )"
"remove config dictionary element under 'formatter' key, if it exists substitute it for formatter, if not, formatter is None.","remove var0 dict element under var1 key, if it exists substitute it for formatter, if not, formatter is var2 ","formatter = config . pop ( 'formatter' , None )","formatter = var0 . pop ( var1 , var2 )"
"get the value under formatter key of dictionary under 'formatters' key of self.config dictionary, substitute the result for formatter.","get value under formatter key of dict under var0 key of self.config dict, substitute result for formatter.",formatter = self . config [ 'formatters' ] [ formatter ],formatter = self . config [ var0 ] [ formatter ]
"call the method self.configure_filter with an argument value under name key of formatters dictionary,","call method self var1 with argument value under name key of var2 dict,",formatters [ name ] = self . configure_formatter ( formatters [ name ] ),var2 [ name ] = self . configure_formatter ( var2 [ name ] )
"get config dictionary element under 'formatters' key, if it exists substitute it for formatters, if not, formatters is EMPTY_DICT.","get var0 dict element under var1 key, if it exists substitute it for formatters, if not, formatters is var2 ","formatters = config . get ( 'formatters' , EMPTY_DICT )","formatters = var0 . get ( var1 , var2 )"
"call the method formfield.queryset.complex_filter with an argument limit_choices_to, substitute the result for formfield.queryset.",call method var1 var2 with argument var3 substitute result for var1 ,formfield . queryset = formfield . queryset . complex_filter ( limit_choices_to ),var1 = var1 . var2 ( var3 )
"call the method f.formfield with an argument, unpacked dictionary kwargs, substitute the result for formfield.","call method var0 with argument, unpacked dict var2 substitute result for var1 ",formfield = f . formfield ( ** kwargs ),var1 = var0 ( ** var2 )
"call the method formfield_callback with 2 arguments: f and unpacked dictionary kwargs, substitute the result for formfield.",call method var0 with 2 arguments: f and unpacked dict var1 substitute result for formfield.,"formfield = formfield_callback ( f , ** kwargs )","formfield = var0 ( f , ** var1 )"
substitute value under the field_name key of the self.fields dictionary for formfield.,substitute value under var0 key of var1 dict for var2 ,formfield = self . fields [ field_name ],var2 = var1 [ var0 ]
"remove entry under the 'formfield_callback' key of the attrs dictionary, if it exists substitute if for formfield_callback,","remove entry under var0 key of var1 dict, if it exists substitute if for formfield_callback,","formfield_callback = attrs . pop ( 'formfield_callback' , None )","formfield_callback = var1 . pop ( var0 , None )"
"for every form in self call the form.as_p method, join the results in a string, separated by an empty string.","for every form in self call form var1 method, join results in string, separated by empty string.",forms = ' ' . join ( form . as_p ( ) for form in self ),forms = ' ' . join ( form . var1 ( ) for form in self )
"for every form in self call the form.as_table method, join the results in a string, separated by an empty string.","for every form in self call form var1 method, join results in string, separated by empty string.",forms = ' ' . join ( form . as_table ( ) for form in self ),forms = ' ' . join ( form . var1 ( ) for form in self )
"for every form in self call the form.as_ul method, join the results in a string, separated by an empty string.","for every form in self call form var0 method, join results in string, separated by empty string.",forms = ' ' . join ( form . as_ul ( ) for form in self ),forms = ' ' . join ( form . var0 ( ) for form in self )
"for every i in sequence of integers from 0 to result of the method self.total_form_count, call the method self._construct_form,",for every i in sequence of integers from 0 to result of method self var1 call method var2 ,forms = [ self . _construct_form ( i ) for i in xrange ( self . total_form_count ( ) ) ],forms = [ self . _construct_form ( i ) for i in xrange ( self . var1 ( ) ) ]
substitute self.deleted_forms for forms_to_delete.,substitute self var1 for var2 ,forms_to_delete = self . deleted_forms,var2 = self . var1
"call the method form.is_valid, perform bitwise and with the result and forms_valid as operands, substitute the result for forms_valid.","call method form var1 perform var2 and with result and var3 as operands, substitute result for var3 ",forms_valid &= form . is_valid ( ),var3 &= form . var1 ( )
forms_valid is True.,var0 is var1 ,forms_valid = True,var0 = var1
substitute fk for FormSet.fk.,substitute var0 for var1 var0 ,FormSet . fk = fk,var1 . var0 = var0
"can_order as can_order, can_delete as can_delete, validate_min as validate_min, validate_max as validate_max,   substitute the result for form.   substitute model for FormSet.model.",var0 as var0 var3 as var3 var7 as var7 var11 as var11 substitute result for form var13 substitute model for var15 model.,FormSet . model = model,var15 . model = model
"formfield_callback as formfield_callback, widgets as widgets, localized_fields as localized_fields, labels as labels,   help_texts as help_texts and error_messages as error_messages, substitute the result for form.   call the function formset_factory with 10 arguments: form, formset, extra as extra, min_num as min_num, max_num as max_num,",var0 as var0 widgets as widgets var1 as var1 labels as labels var7 as var7 and var11 as var11 substitute result for form var5 call function var15 with 10 arguments: form var17 extra as extra var18 as var18 var22 as var22 ,"FormSet = formset_factory ( form , formset , extra = extra , min_num = min_num , max_num = max_num , can_order = can_order , can_delete = can_delete , validate_min = validate_min , validate_max = validate_max )","FormSet = var15 ( form , var17 , extra = extra , var18 = var18 , var22 = var22 , can_order = can_order , can_delete = can_delete , validate_min = validate_min , validate_max = validate_max )"
"extra for 'extra', can_delete for 'can_delete', can_order for 'can_order', fields for 'fields', exclude for 'exclude',   min_num for 'min_num', max_num for 'max_num', widgets for 'widgets', validate_min for 'validate_min',   validate_max for 'validate_max', localized_fields for 'localized_fields', labels for 'labels', help_texts for 'help_texts',   and error_messages for 'error_messages'.   call the function modelformset_factory with 2 arguments: model and unpacked dictionary kwargs, substitute the result for FormSet.","extra for var0, _delete for var5, _order for var10, fields for var11, exclude for var12 var13 min_num for var21, max_num for var26, widgets for var27, validate_min for var31 var13 validate_max for var34, localized_fields for var39, labels for var40, help_texts for var45 var13 and error_messages for var50 var13 call function var51 with 2 arguments: model and unpacked dict var53 substitute result for var54 ","FormSet = modelformset_factory ( model , ** kwargs )","var54 = var51 ( model , ** var53 )"
found is boolean False.,found is boolean var0 ,found = False,found = var0
"get frag attribute from found object, substitute it for found.","get var0 attribute from found object, substitute it for found.","found = getattr ( found , frag )","found = getattr ( found , var0 )"
"call the method self.importer with an argument used, substitute the result for found.","call method var0 with argument used, substitute result for found.",found = self . importer ( used ),found = var0 ( used )
found is boolean True.,found is boolean var0 ,found = True,found = var0
"call the method fp.write with an argument string '%d\n"", with '%d' replaced by os.getpid function return value.",call method var0 with argument string var1%d' replaced by os.getpid function return value.,fp . write ( '%d\n' % os . getpid ( ) ),var0 ( '%d\n' % os . getpid ( ) )
"and encoding set to string 'utf-8' as arguments, with the result renamed to fp, perform the following:   call the method fp.write with an argument content.","and encoding set to string var0 as arguments, with result renamed to var1 perform following: call method var1 write with argument content.",fp . write ( content ),var1 . write ( content )
write data to fp.,write data to var0 ,fp . write ( data ),var0 . write ( data )
"with the result renamed to fp, perform the following:   call the method fp.write with an argument msgs.",with result renamed to var0 perform following: call method var0 write with argument msgs.,fp . write ( msgs ),var0 . write ( msgs )
"with the result renamed to fp, perform the following:   write msgs to fp.",with result renamed to var0 perform following: write msgs to var0 ,fp . write ( msgs ),var0 . write ( msgs )
"with the result renamed to fp, perform the following:   call the method fp.write with an arguments src_data.",with result renamed to var0 perform following: call method var0 write with arguments var3 ,fp . write ( src_data ),var0 . write ( var3 )
"remover 'file' key from the kwargs dictionary, if it exists substitute it for fp, if not substitute sys.stdout for fp.","remover var0 key from var1 dict, if it exists substitute it for var2 if not substitute var4 for var2 ","fp = kwargs . pop ( 'file' , sys . stdout )","var2 = var1 . pop ( var0 , var4 )"
fp is a instance of a class six.BytesIO.,var0 is instance of class six var1 ,fp = six . BytesIO ( ),var0 = six . var1 ( )
fp is a instance of a class six.StringIO.,var0 is instance of class six var1 ,fp = six . StringIO ( ),var0 = six . var1 ( )
"call the method sys._getframe with an argument 1, substitute the result for frame.","call method var0 with argument 1, substitute result for frame.",frame = sys . _getframe ( 1 ),frame = var0 ( 1 )
from __future__ import absolute_import into default name space.,from __future__ import var0 into default name space.,from __future__ import absolute_import,from __future__ import var0
from __future__ import absolute_ into default name space.,from __future__ import var0 into default name space.,from __future__ import absolute_import,from __future__ import var0import
from __future__ import unicode_literals into default name space.,from __future__ import var0 into default name space.,from __future__ import unicode_literals,from __future__ import var0
from module __future__ import unicode_literals to default name space.,from module __future__ import var0 to default name space.,from __future__ import unicode_literals,from __future__ import var0
from _systemrestart import SystemRestart into default name space.,from var0 import var1 into default name space.,from _systemrestart import SystemRestart,from var0 import var1
"from .. import Warning, register and Tags into default name space.",from .. import var0 register and var1 into default name space.,"from . . import Warning , register , Tags","from . . import var0 , register , var1"
from .base import CommandError into default name space.,from var0 import var1 into default name space.,from . base import CommandError,fromvar0 import var1
from .html_parser import HTMLParser and HTMLParseError into default name space.,from var1 import var2 and var3 into default name space.,"from . html_parser import HTMLParser , HTMLParseError","from . var1 import var2 , var3"
"from . import Error, Tags and register into default name space.",from . import var0 var1 and register into default name space.,"from . import Error , Tags , register","from . import var0 , var1 , register"
from . import six into default name space.,from . import six into default name space.,from . import six,from . import six
"from .messages import CheckMessage, Debug, Info, Warning, Error, Critical, DEBUG, INFO, WARNING, ERROR and CRITICAL into default name space.",from var0 import var1 var2 var3 var4 var5 var6 var7 var8 var9 var10 and var11 into default name space.,"from . messages import ( CheckMessage , Debug , Info , Warning , Error , Critical , DEBUG , INFO , WARNING , ERROR , CRITICAL )","fromvar0 import(var1, var2, var3, var4, var5, var6, var7, var8, var9, var10, var11)"
"from .registry import register, run_checks, tag_exists and Tags into default name space.",from var0 import register var1 var3 and var5 into default name space.,"from . registry import register , run_checks , tag_exists , Tags","fromvar0 import register, var1, var3, var5"
from argparse import ArgumentParser into default name space.,from var0 import var1 into default name space.,from argparse import ArgumentParser,from var0 import var1
from binascii import Error as BinasciiError into default name space.,from var0 import var1 as var2 into default name space.,from binascii import Error as BinasciiError,from var0 import var1 as var2
from collections import defaultdict into default name space.,from collections import var0 into default name space.,from collections import defaultdict,from collections import var0
from collections import namedtuple.,from collections import var0 ,from collections import namedtuple,from collections import var0
from collections import OrderedDict into default name space.,from collections import var0 into default name space.,from collections import OrderedDict,from collections import var0
from collections import UserList into default namespace.,from collections import var0 into default var1 ,from collections import UserList,from collections import var0
from copy import copy into default name space.,from copy import copy into default name space.,from copy import copy,from copy import copy
"from ctypes.wintypes import BOOL, DWORD and HANDLE into default name space.",from var0 import var1 var2 and var4 into default name space.,"from ctypes . wintypes import BOOL , DWORD , HANDLE","from var0 import var1 , var2 , var4"
"from ctypes import sizeof, c_ulong, c_void_p, c_int64, Structure, Union, POINTER, windll and byref into default name space.",from var0 import var1 var2 var4 var6 var8 var9 var10 var11 and var12 into default name space.,"from ctypes import ( sizeof , c_ulong , c_void_p , c_int64 , Structure , Union , POINTER , windll , byref )","from var0 import var1 , var2 , var4 , var6 , var8 , var9 , var10 , var11 , var12"
from datetime import date as real_date and datetime as real_datetime into default name space.,from var0 import date as var2 and var0 as var3 into default name space.,"from datetime import date as real_date , datetime as real_datetime","from var0 import date as var2 , var0 as var2time"
from datetime import datetime into default name space.,from var0 import var0 into default name space.,from datetime import datetime,from var0 import var0
"from datetime import datetime,  timedelta and tzinfo into default name space.",from var1 import var1 var3 and var4 into default name space.,"from datetime import datetime , timedelta , tzinfo","from var1 import var1 , var0timedelta , var0tzinfo"
from datetime import timedelta and tzinfo into default name space.,from var0 import var1 and var2 into default name space.,"from datetime import timedelta , tzinfo","from var0 import var1 , var2"
from decimal import Decimal into default name space.,from decimal import var0 into default name space.,from decimal import Decimal,from decimal import var0
from decimal import Decimal and DecimalException into default name space.,from decimal import var0 and var1 into default name space.,"from decimal import Decimal , DecimalException","from decimal import var0 , var0Exception"
"from decimal import Decimal, InvalidOperation, Context and ROUND_HALF_UP into default name space.",from decimal import var0 var1 var3 and var4 into default name space.,"from decimal import Decimal , InvalidOperation , Context , ROUND_HALF_UP","from decimal import var0 , var1 , var3 , var4"
from django.apps import apps into default name space.,from var0 import var1 into default name space.,from django . apps import apps,from var0 import var1
from django.apps import apps.,from var0 import var1 ,from django . apps import apps,from var0 import var1
from django.conf.locale import LANG_INFO.,from var0 import var1 ,from django . conf . locale import LANG_INFO,from var0 import var1
from django.conf import settings into default name space.,from var0 import settings into default name space.,from django . conf import settings,from var0 import settings
"from django.conf import settings into default namespace,",from var0 import settings into default var1 ,from django . conf import settings,from var0 import settings
from django.conf import settings into default namespace.,from var0 import settings into default var1 ,from django . conf import settings,from var0 import settings
"return value of the function os.path.basename called with first element of sys.argv as an argument, and second element of sys.argv.   from django.conf import settings into default namespace.","return value of function os.path.basename called with first element of var0 as argument, and second element of var0 from var3 import settings into default var4 ",from django . conf import settings,from var3 import settings
and RemovedInDjango19Warning.   from django.conf import settings into default namespace.,and var0 from var2 import settings into default var3 ,from django . conf import settings,from var2 import settings
"name for base_name, top_dir for base_directory and docs_version for 'docs_version' and autoescape set to boolean False.   from django.conf import settings into a default name space,","name for var0 var2 for var4 and docs_version for var6 and var7 set to boolean var8 from var10 import settings into default name space,",from django . conf import settings,from var10 import settings
from django.conf import settings object to the default name space.,from var0 import settings object to default name space.,from django . conf import settings,from var0 import settings
from django.conf import settings.,from var0 import settings.,from django . conf import settings,from var0 import settings
"from django.conf import settings, global_settings into default name space.",from var0 import settings var1 into default name space.,"from django . conf import settings , global_settings","from var0 import settings , var1"
"from django.conf import urls into default name space,","from var0 import urls into default name space,",from django . conf import urls,from var0 import urls
from django.contrib.auth import get_user_model into default name space.,from var0 import var1 into default name space.,from django . contrib . auth import get_user_model,from var0 import var1
"from django.core.cache.backends.base import InvalidCacheBackendError, CacheKeyWarning and BaseCache into default name space.",from var0 import var1 var2 and var4 into default name space.,"from django . core . cache . backends . base import ( InvalidCacheBackendError , CacheKeyWarning , BaseCache )","from var0 import var1 , var2 , var4"
from django.core.cache.backends.base import BaseCache and DEFAULT_TIMEOUT into default name space.,from var0 import var1 and var2 into default name space.,"from django . core . cache . backends . base import BaseCache , DEFAULT_TIMEOUT","from var0 import var1 , var2"
from django.core.cache.backends.db import BaseDatabaseCache into default name space.,from django.core.cache.backends.db import var0 into default name space.,from django . core . cache . backends . db import BaseDatabaseCache,from django . core . cache . backends . db import var0
from django.core.cache import caches into default name space.,from var0 import caches into default name space.,from django . core . cache import caches,from var0 import caches
from django.core.cache import caches to the default name space.,from var0 import caches to default name space.,from django . core . cache import caches,from var0 import caches
from django.core.checks.registry import registry into default name space.,from var0 import registry into default name space.,from django . core . checks . registry import registry,from var0 import registry
"django.core.exceptions import ImproperlyConfigured, ValidationError, NON_FIELD_ERRORS and FieldError into default namespace.",var0 import var1 var2 var4 and var6 into default var8 ,"from django . core . exceptions import ( ImproperlyConfigured , ValidationError , NON_FIELD_ERRORS , FieldError )","from var0 import var1 , var2 , var4 , var6"
from django.core.exceptions import AppRegistryNotReady into default name space.,from var0 import var1 into default name space.,from django . core . exceptions import AppRegistryNotReady,from var0 import var1
from django.core.exceptions import DisallowedHost and ImproperlyConfigured into default name space.,from var0 import var1 and var2 into default name space.,"from django . core . exceptions import DisallowedHost , ImproperlyConfigured","from var0 import var1 , var2"
from django.core.exceptions import DisallowedRedirect into default name space.,from var0 import var1 into default name space.,from django . core . exceptions import DisallowedRedirect,from var0 import var1
from django.core.exceptions import ImproperlyConfigured into default name space.,from var0 import var1 into default name space.,from django . core . exceptions import ImproperlyConfigured,from var0 import var1
from django.core.exceptions import ImproperlyConfigured and DjangoRuntimeWarning into default name space.,from var0 import var1 and var2 into default name space.,"from django . core . exceptions import ImproperlyConfigured , DjangoRuntimeWarning","from var0 import var1 , var2"
from django.core.exceptions import ImproperlyConfigured and ViewDoesNotExist into default name space.,from var0 import var1 and var2 into default name space.,"from django . core . exceptions import ImproperlyConfigured , ViewDoesNotExist","from var0 import var1 , var2"
"from django.core.exceptions import MiddlewareNotUsed, PermissionDenied and SuspiciousOperation into default name space.",from var0 import var1 var2 and var4 into default name space.,"from django . core . exceptions import MiddlewareNotUsed , PermissionDenied , SuspiciousOperation","from var0 import var1 , var2 , var4"
from django.core.exceptions import SuspiciousFileOperation into default name space.,from var0 import var1 into default name space.,from django . core . exceptions import SuspiciousFileOperation,from var0 import var1
from django.core.exceptions import SuspiciousMultipartF into default name space.,from var0 import var1 into default name space.,from django . core . exceptions import SuspiciousMultipartForm,from var0 import var1orm
from django.core.exceptions import ValidationError into default name space.,from var0 import var1 into default name space.,from django . core . exceptions import ValidationError,from var0 import var1
from django.core.exceptions import ValidationError and NON_FIELD_ERRORS into default name space.,from var0 import var1 and var2 into default name space.,"from django . core . exceptions import ValidationError , NON_FIELD_ERRORS","from var0 import var1 , var2"
from django.core.files.base import File into default name space.,from var0 import var1 into default name space.,from django . core . files . base import File,from var0 import var1
from django.core.files.move import file_move_safe into default name space.,from var0 import var1 into default name space.,from django . core . files . move import file_move_safe,from var0 import var1
from django.core.files.uploadedfile import TemporaryUploadedFile and InMemoryUploadedFile into default name space.,from var0 import var1 and var2 into default name space.,"from django . core . files . uploadedfile import TemporaryUploadedFile , InMemoryUploadedFile","from var0 import var1 , var2"
"from django.core.files.uploadhandler import StopUpload,  SkipFile and StopFutureHandlers into default name space.",from var1 import var2 var3 and var5 into default name space.,"from django . core . files . uploadhandler import StopUpload , SkipFile , StopFutureHandlers","from var1 import var2 , var0var3 , var0var5"
from django.core.files.utils import FileProxyMixin into default name space.,from var0 import var1 into default name space.,from django . core . files . utils import FileProxyMixin,from var0 import var1
from django.core.files import File into default name space.,from var0 import var1 into default name space.,from django . core . files import File,from var0 import var1
from django.core.files import locks into default name space.,from var0 import locks into default name space.,from django . core . files import locks,from var0 import locks
from django.core.files import locks and File into default name space.,from var0 import locks and var1 into default name space.,"from django . core . files import locks , File","from var0 import locks , var1"
from django.core.files import temp as tempfile into default name space.,from var0 import temp as var1 into default name space.,from django . core . files import temp as tempfile,from var0 import temp as var1
from django.core.files import uploadhandler into default name space.,from var0 import var1 into default name space.,from django . core . files import uploadhandler,from var0 import var1
from django.core.handlers.wsgi import WSGIHandler into default name space.,from var0 import var1 into default name space.,from django . core . handlers . wsgi import WSGIHandler,from var0 import var1
from django.core.handlers import base into default name space.,from var0 import base into default name space.,from django . core . handlers import base,from var0 import base
from django.core.mail.backends.base import BaseEmailBackend into default name space.,from var0 import var1 into default name space.,from django . core . mail . backends . base import BaseEmailBackend,from var0 import var1
from django.core.mail.backends.console import EmailBackend as ConsoleEmailBackend into default name space.,from var0 import var1 as var2 into default name space.,from django . core . mail . backends . console import EmailBackend as ConsoleEmailBackend,from var0 import var1 as var2
"from django.core.mail.message import EmailMessage, EmailMultiAlternatives, SafeMIMEText, SafeMIMEMultipart,",from var0 import var1 var2 var4 var6 ,"from django . core . mail . message import ( EmailMessage , EmailMultiAlternatives , SafeMIMEText , SafeMIMEMultipart , DEFAULT_ATTACHMENT_MIME_TYPE , make_msgid , BadHeaderError , forbid_multi_line_headers )","from var0 import var1 , var2 , var4 , var6 , DEFAULT_ATTACHMENT_MIME_TYPE , make_msgid , BadHeaderError , forbid_multi_line_headers"
from django.core.mail.message import sanitize_address into default name space.,from var0 import var1 into default name space.,from django . core . mail . message import sanitize_address,from var0 import var1
from django.core.mail.utils import CachedDnsName and DNS_NAME into default name space.,from var0 import var1 and var2 into default name space.,"from django . core . mail . utils import CachedDnsName , DNS_NAME","from var0 import var1 , var2"
from django.core.mail.utils import DNS_NAME into default name space.,from var0 import var1 into default name space.,from django . core . mail . utils import DNS_NAME,from var0 import var1
from django.core.mail import get_connection into default name space.,from var0 import var1 into default name space.,from django . core . mail import get_connection,from var0 import var1
"from django.core.management.base import BaseCommand, CommandError, CommandParser and handle_default_options into default name space.",from var0 import var1 var2 var4 and var6 into default name space.,"from django . core . management . base import ( BaseCommand , CommandError , CommandParser , handle_default_options )","from var0 import var1 , var2 , var4 , var6"
from django.core.management.base import AppCommand into default name space.,from var0 import var1 into default name space.,from django . core . management . base import AppCommand,from var0 import var1
from django.core.management.base import BaseCommand into default name space.,from var0 import var1 into default name space.,from django . core . management . base import BaseCommand,from var0 import var1
from django.core.management.base import BaseCommand and CommandError into default name space.,from var0 import var1 and var2 into default name space.,"from django . core . management . base import BaseCommand , CommandError","from var0 import var1 , var2"
from django.core.management.base import CommandError into default name space.,from var0 import var1 into default name space.,from django . core . management . base import CommandError,from var0 import var1
from django.core.management.base import CommandError and BaseCommand into default name space.,from var0 import var1 and var2 into default name space.,"from django . core . management . base import CommandError , BaseCommand","from var0 import var1 , var2"
from django.core.management.color import color_style into default name space.,from django.core.management.color import var0 into default name space.,from django . core . management . color import color_style,from django . core . management . color import var0
from django.core.management.color import color_style and no_style into default name space.,from django.core.management.color import var0 and var1 into default name space.,"from django . core . management . color import color_style , no_style","from django . core . management . color import var0 , var1"
from django.core.management.color import no_style into default name space.,from django.core.management.color import var0 into default name space.,from django . core . management . color import no_style,from django . core . management . color import var0
from django.core.management.commands.check import Command as CheckCommand into default name space.,from var0 import var1 as var2 into default name space.,from django . core . management . commands . check import Command as CheckCommand,from var0 import var1 as var2
from django.core.management.sql import check_for_migrations into default name space.,from var0 import var1 into default name space.,from django . core . management . sql import check_for_migrations,from var0 import var1
"from django.core.management.sql import custom_sql_for_model, emit_post_migrate_signal and emit_pre_migrate_signal into default name space.",from var0 import var1 var2 and var4 into default name space.,"from django . core . management . sql import custom_sql_for_model , emit_post_migrate_signal , emit_pre_migrate_signal","from var0 import var1 , var2 , var4"
from django.core.management.sql import sql_all into default name space.,from var0 import var1 into default name space.,from django . core . management . sql import sql_all,from var0 import var1
from django.core.management.sql import sql_create into default name space.,from var0 import var1 into default name space.,from django . core . management . sql import sql_create,from var0 import var1
from django.core.management.sql import sql_custom into default name space.,from var0 import var1 into default name space.,from django . core . management . sql import sql_custom,from var0 import var1
from django.core.management.sql import sql_delete into default name space.,from var0 import var1 into default name space.,from django . core . management . sql import sql_delete,from var0 import var1
from django.core.management.sql import sql_destroy_indexes into default name space.,from var0 import var1 into default name space.,from django . core . management . sql import sql_destroy_indexes,from var0 import var1
from django.core.management.sql import sql_flush into default name space.,from var0 import var1 into default name space.,from django . core . management . sql import sql_flush,from var0 import var1
from django.core.management.sql import sql_flush and emit_post_migrate_signal into default name space.,from var0 import var1 and var2 into default name space.,"from django . core . management . sql import sql_flush , emit_post_migrate_signal","from var0 import var1 , var2"
from django.core.management.sql import sql_indexes into default name space.,from var0 import var1 into default name space.,from django . core . management . sql import sql_indexes,from var0 import var1
from django.core.management.templates import TemplateCommand into default name space.,from var0 import var1 into default name space.,from django . core . management . templates import TemplateCommand,from var0 import var1
"from django.core.management.utils import handle_extensions, find_command and popen_wrapper into default name space.",from var0 import var1 var2 and var4 into default name space.,"from django . core . management . utils import ( handle_extensions , find_command , popen_wrapper )","from var0 import var1 , var2 , var4"
from django.core.management.utils import find_command and popen_wrapper into default name space.,from var0 import var1 and var2 into default name space.,"from django . core . management . utils import find_command , popen_wrapper","from var0 import var1 , var2"
from django.core.management.utils import handle_extensions into default name space.,from var0 import var1 into default name space.,from django . core . management . utils import handle_extensions,from var0 import var1
from django.core.management import call_command into default name space.,from var0 import var1 into default name space.,from django . core . management import call_command,from var0 import var1
from django.core.serializers.base import DeserializationError into default name space.,from var0 import var1 into default name space.,from django . core . serializers . base import DeserializationError,from var0 import var1
from django.core.serializers.base import SerializerDoesNotExist into default name space.,from var0 import var1 into default name space.,from django . core . serializers . base import SerializerDoesNotExist,from var0 import var1
from django.core.serializers.json import DjangoJSONEncode into default name space.,from var0 import var1 into default name space.,from django . core . serializers . json import DjangoJSONEncoder,from var0 import var1r
from django.core.serializers.python import Deserializer as PythonDeserializer into default name space.,from var0 import var1 as var2 into default name space.,from django . core . serializers . python import Deserializer as PythonDeserializer,from var0 import var1 as var2
from django.core.serializers.python import Serializer as PythonSerializer into default name space.,from var0 import var1 as var2 into default name space.,from django . core . serializers . python import Serializer as PythonSerializer,from var0 import var1 as var2
from django.core.serializers import base into default name space.,from var0 import base into default name space.,from django . core . serializers import base,from var0 import base
from django.core.servers.basehttp import get_internal_wsgi_application into default name space.,from var0 import var1 into default name space.,from django . core . servers . basehttp import get_internal_wsgi_application,from var0 import var1
from django.core.servers.basehttp import run and get_internal_wsgi_application into default name space.,from var0 import run and var1 into default name space.,"from django . core . servers . basehttp import run , get_internal_wsgi_application","from var0 import run , var1"
from django.core.servers.fastcgi import FASTCGI_HELP into default namespace.,from django.core.servers.fastcgi import var0 into default var1 ,from django . core . servers . fastcgi import FASTCGI_HELP,from django . core . servers . fastcgi import var0
"from django.core.servers.fastcgi import FASTCGI_OPTIONS into default namespace,",from django.core.servers.fastcgi import var0 into default var1 ,from django . core . servers . fastcgi import FASTCGI_OPTIONS,from django . core . servers . fastcgi import var0
from django.core.servers.fastcgi import runfastcgi into default namespace.,from django.core.servers.fastcgi import var0 into default var1 ,from django . core . servers . fastcgi import runfastcgi,from django . core . servers . fastcgi import var0
from django.core.signals import request_finished into default name space.,from var0 import var1 into default name space.,from django . core . signals import request_finished,from var0 import var1
"from django.core.urlresolvers import reverse, NoReverseMatch.",from var0 import reverse var1 ,"from django . core . urlresolvers import reverse , NoReverseMatch","from var0 import reverse , var1"
from django.core.urlresolvers import set_script_prefix into default name space.,from var0 import var1 into default name space.,from django . core . urlresolvers import set_script_prefix,from var0 import var1
from django.core.validators import EMPTY_VALUES into default name space.,from var0 import var1 into default name space.,from django . core . validators import EMPTY_VALUES,from var0 import var1
from django.core.validators import validate_ipv4_address.,from var0 import var1 ,from django . core . validators import validate_ipv4_address,from var0 import var1
from django.core.wsgi import get_wsgi_application into default name space.,from var0 import var1 into default name space.,from django . core . wsgi import get_wsgi_application,from var0 import var1
from django.core import checks into default name space.,from var0 import checks into default name space.,from django . core import checks,from var0 import checks
from django.core import mail into default name space.,from var0 import mail into default name space.,from django . core import mail,from var0 import mail
from django.core import serializers into default name space.,from var0 import var1 into default name space.,from django . core import serializers,from var0 import var1
from django.core import signals into default name space.,from var0 import signals into default name space.,from django . core import signals,from var0 import signals
from django.core import signing into default name space.,from var0 import signing into default name space.,from django . core import signing,from var0 import signing
from django.core import urlresolvers into default name space.,from var0 import var1 into default name space.,from django . core import urlresolvers,from var0 import var1
from django.core import validators into default name space.,from var0 import var1 into default name space.,from django . core import validators,from var0 import var1
from django.db.backends.utils import typecast_timestamp into default name space.,from django.db.backends.utils import var0 into default name space.,from django . db . backends . utils import typecast_timestamp,from django . db . backends . utils import var0
from django.db.migrations.autodetector import MigrationAutodetector into default name space.,from var0 import var1 into default name space.,from django . db . migrations . autodetector import MigrationAutodetector,from var0 import var1
from django.db.migrations.executor import MigrationExecutor into default name space.,from var0 import var1 into default name space.,from django . db . migrations . executor import MigrationExecutor,from var0 import var1
from django.db.migrations.loader import AmbiguityError into default name space.,from var0 import var1 into default name space.,from django . db . migrations . loader import AmbiguityError,from var0 import var1
from django.db.migrations.loader import MigrationLoader into default name space.,from var0 import var1 into default name space.,from django . db . migrations . loader import MigrationLoader,from var0 import var1
from django.db.migrations.loader import MigrationLoader and AmbiguityError into default name space.,from var0 import var1 and var2 into default name space.,"from django . db . migrations . loader import MigrationLoader , AmbiguityError","from var0 import var1 , var2"
from django.db.migrations.optimizer import MigrationOptimizer into default name space.,from var0 import var1 into default name space.,from django . db . migrations . optimizer import MigrationOptimizer,from var0 import var1
from django.db.migrations.questioner import MigrationQuestioner and InteractiveMigrationQuestioner into default name space.,from var0 import var1 and var2 into default name space.,"from django . db . migrations . questioner import MigrationQuestioner , InteractiveMigrationQuestioner","from var0 import var1 , var2"
from django.db.migrations.state import ProjectState into default name space.,from var0 import var1 into default name space.,from django . db . migrations . state import ProjectState,from var0 import var1
from django.db.migrations.writer import MigrationWriter into default name space.,from var0 import var1 into default name space.,from django . db . migrations . writer import MigrationWriter,from var0 import var1
from django.db.migrations import Migration into default name space.,from var0 import var1 into default name space.,from django . db . migrations import Migration,from var0 import var1
from django.db.models.fields.related import ManyToManyField.,from var0 import var1 ,from django . db . models . fields . related import ManyToManyField,from var0 import var1
from django.db.models.fields.related import RelatedObject into default namespace.,from var0 import var1 into default var2 ,from django . db . models . fields . related import RelatedObject,from var0 import var1
from django.db.models.fields import Field as ModelField.,from var0 import var1 as var2 ,from django . db . models . fields import Field as ModelField,from var0 import var1 as var2
"from django.db.models import AutoField, OneToOneField and ForeignKey.",from var0 import var1 var2 and var4 ,"from django . db . models import AutoField , OneToOneField , ForeignKey","from var0 import var1 , var2 , var4"
from django.db.models import ForeignKey.,from var0 import var1 ,from django . db . models import ForeignKey,from var0 import var1
from django.db.utils import DatabaseError into default name space.,from var0 import var1 into default name space.,from django . db . utils import DatabaseError,from var0 import var1
"from django.db import connections, router, transaction, DEFAULT_DB_ALIAS, IntegrityError and DatabaseError into default name space.","from django.db import connections, router, transaction var0 var1 and var3 into default name space.","from django . db import ( connections , router , transaction , DEFAULT_DB_ALIAS , IntegrityError , DatabaseError )","from django . db import connections , router , transaction , var0 , var1 , var3"
from django.db import connection into default name space.,from django.db import connection into default name space.,from django . db import connection,from django . db import connection
from django.db import connections and DEFAULT_DB_ALIAS into default namespace.,from django.db import connections and var0 into default var1 ,"from django . db import connections , DEFAULT_DB_ALIAS","from django . db import connections , var0"
from django.db import connections and DEFAULT_DB_ALIAS into default name space.,from django.db import connections and var0 into default name space.,"from django . db import connections , DEFAULT_DB_ALIAS","from django . db import connections , var0"
"from django.db import connections,  DEFAULT_DB_ALIAS and migrations into default name space.",from django.db import connections var1 and migrations into default name space.,"from django . db import connections , DEFAULT_DB_ALIAS , migrations","from django . db import connections , var0var1 , var0migrations"
"from django.db import connections, router, transaction and DEFAULT_DB_ALIAS into default name space.","from django.db import connections, router, transaction and var0 into default name space.","from django . db import connections , router , transaction , DEFAULT_DB_ALIAS","from django . db import connections , router , transaction , var0"
"from django.db import connections,  router,  transaction and DEFAULT_DB_ALIAS into default name space.",from django.db import connections var0 router var0 transaction and var2 into default name space.,"from django . db import connections , router , transaction , DEFAULT_DB_ALIAS","from django . db import connections , var0router , var0transaction , var0var2"
"from django.db import connections, router, transaction, models and DEFAULT_DB_ALIAS into default name space.","from django.db import connections, router, transaction, models and var0 into default name space.","from django . db import connections , router , transaction , models , DEFAULT_DB_ALIAS","from django . db import connections , router , transaction , models , var0"
from django.db import connections and transaction into default name space.,from django.db import connections and transaction into default name space.,"from django . db import connections , transaction","from django . db import connections , transaction"
"from django.db import connections, transaction, router and DatabaseError into default name space.","from django.db import connections, transaction, router and var0 into default name space.","from django . db import connections , transaction , router , DatabaseError","from django . db import connections , transaction , router , var0"
from django.db import DEFAULT_DB_ALIAS into default name space.,from django.db import var0 into default name space.,from django . db import DEFAULT_DB_ALIAS,from django . db import var0
from django.db import models into default name space.,from django.db import models into default name space.,from django . db import models,from django . db import models
from django.db import models into default namespace.,from django.db import models into default var0 ,from django . db import models,from django . db import models
from django.db import models and DEFAULT_DB_ALIAS into default name space.,from django.db import models and var0 into default name space.,"from django . db import models , DEFAULT_DB_ALIAS","from django . db import models , var0"
from django.db import models and router into default name space.,from django.db import models and router into default name space.,"from django . db import models , router","from django . db import models , router"
from django.db import router and DEFAULT_DB_ALIAS into default name space.,from django.db import router and var0 into default name space.,"from django . db import router , DEFAULT_DB_ALIAS","from django . db import router , var0"
from django.dispatch import receiver into default name space.,from var0 import receiver into default name space.,from django . dispatch import receiver,from var0 import receiver
from django.dispatch import Signal into default name space.,from var0 import var1 into default name space.,from django . dispatch import Signal,from var0 import var1
from django.forms.extras.widgets import SelectDateWidget into default name space.,from var0 import var1 into default name space.,from django . forms . extras . widgets import SelectDateWidget,from var0 import var1
from django.forms.fields import everything into default name space.,from var0 import var1 into default name space.,from django . forms . fields import *,from var0 import *
from django.forms.fields import Field and ChoiceField into default name space.,from var0 import var1 and var2 into default name space.,"from django . forms . fields import Field , ChoiceField","from var0 import var1 , var2"
from django.forms.fields import Field and FileField into default name space.,from var0 import var1 and var2 into default name space.,"from django . forms . fields import Field , FileField","from var0 import var1 , var2"
from django.forms.fields import IntegerField and BooleanField into default name space.,from var0 import var1 and var2 into default name space.,"from django . forms . fields import IntegerField , BooleanField","from var0 import var1 , var2"
from django.forms.forms import everything into default name space.,from var0 import var1 into default name space.,from django . forms . forms import *,from var0 import *
from django.forms.forms import DeclarativeFieldsMetaclass and BaseForm into default name space.,from var0 import var1 and var2 into default name space.,"from django . forms . forms import DeclarativeFieldsMetaclass , BaseForm","from var0 import var1 , var2"
from django.forms.formsets import everything into default name space.,from var0 import var1 into default name space.,from django . forms . formsets import *,from var0 import *
from django.forms.formsets import BaseFormSet and formset_factory into default name space.,from var0 import var1 and var2 into default name space.,"from django . forms . formsets import BaseFormSet , formset_factory","from var0 import var1 , var2"
from django.forms.models import everything into default name space.,from var0 import var1 into default name space.,from django . forms . models import *,from var0 import *
"Use django.forms.utils instead., RemovedInDjango19Warning and stacklevel set to an integer 2.   from django.forms.utils import everything into default name space.",Use var0 instead var2 and var3 set to integer 2 var4 from var0 import var5 into default name space.,from django . forms . utils import *,from var0 import *
from django.forms.utils import ErrorList into default name space.,from var0 import var1 into default name space.,from django . forms . utils import ErrorList,from var0 import var1
"from django.forms.utils import flatatt,  ErrorDict and ErrorList into default name space.",from var1 import var2 var3 and var4 into default name space.,"from django . forms . utils import flatatt , ErrorDict , ErrorList","from var1 import var2 , var0var3 , var0var4"
from django.forms.utils import flatatt and to_current_timezone into default name space.,from var0 import var1 and var2 into default name space.,"from django . forms . utils import flatatt , to_current_timezone","from var0 import var1 , var2"
from django.forms.utils import from_current_timezone and to_current_timezone into default name space.,from var0 import var1 and var2 into default name space.,"from django . forms . utils import from_current_timezone , to_current_timezone","from var0 import var1 , var2"
"from django.forms.widgets import TextInput, NumberInput, EmailInput, URLInput, HiddenInput, MultipleHiddenInput, ClearableFileInput,",from var0 import var1 var2 var4 var6 var8 var10 var12 ,"from django . forms . widgets import ( TextInput , NumberInput , EmailInput , URLInput , HiddenInput , MultipleHiddenInput , ClearableFileInput , CheckboxInput , Select , NullBooleanSelect , SelectMultiple , DateInput , DateTimeInput , TimeInput , SplitDateTimeWidget , SplitHiddenDateTimeWidget , FILE_INPUT_CONTRADICTION )","from var0 import var1 , var2 , var4 , var6 , var8 , var10 , var12 , CheckboxInput , Select , NullBooleanSelect , SelectMultiple , DateInput , DateTimeInput , TimeInput , SplitDateTimeWidget , SplitHiddenDateTimeWidget , FILE_INPUT_CONTRADICTION"
"from django.forms.widgets import SelectMultiple, HiddenInput, MultipleHiddenInput into default namespace.",from var0 import var1 var2 var4 into default var6 ,"from django . forms . widgets import ( SelectMultiple , HiddenInput , MultipleHiddenInput )","from var0 import var1 , var2 , var4"
from django.forms.widgets import everything into default name space.,from var0 import var1 into default name space.,from django . forms . widgets import *,from var0 import *
from django.forms.widgets import HiddenInput into default name space.,from var0 import var1 into default name space.,from django . forms . widgets import HiddenInput,from var0 import var1
"from django.forms.widgets import Media,  MediaDefiningClass,  TextInput and Textarea into default name space.",from var2 import var3 var4 var6 and var8 into default name space.,"from django . forms . widgets import Media , MediaDefiningClass , TextInput , Textarea","from var2 import var3 , var0var3DefiningClass , var0var6 , var0var8"
from django.forms.widgets import Widget and Select into default name space.,from var0 import var1 and var2 into default name space.,"from django . forms . widgets import Widget , Select","from var0 import var1 , var2"
from django.forms import Form into default name space.,from var0 import var1 into default name space.,from django . forms import Form,from var0 import var1
from django.http.cookie import SimpleCookie into default name space.,from var0 import var1 into default name space.,from django . http . cookie import SimpleCookie,from var0 import var1
from django.http.cookie import SimpleCookie and parse_cookie into default name space.,from var0 import var1 and var2 into default name space.,"from django . http . cookie import SimpleCookie , parse_cookie","from var0 import var1 , var2"
from django.http.multipartparser import MultiPartParser and MultiPartParserError into default name space.,from var0 import var1 and var2 into default name space.,"from django . http . multipartparser import MultiPartParser , MultiPartParserError","from var0 import var1 , var1Error"
"from django.http.request import HttpRequest, QueryDict, RawPostDataException, UnreadablePostError and build_request_repr into default name space.",from var0 import var1 var2 var4 var6 and var8 into default name space.,"from django . http . request import ( HttpRequest , QueryDict , RawPostDataException , UnreadablePostError , build_request_repr )","from var0 import var1 , var2 , var4 , var6 , var8"
"from django.http.response import HttpResponse, StreamingHttpResponse, HttpResponseRedirect, HttpResponsePermanentRedirect,",from var0 import var1 var2 var4 var6 ,"from django . http . response import ( HttpResponse , StreamingHttpResponse , HttpResponseRedirect , HttpResponsePermanentRedirect , HttpResponseNotModified , HttpResponseBadRequest , HttpResponseForbidden , HttpResponseNotFound , HttpResponseNotAllowed , HttpResponseGone , HttpResponseServerError , Http404 , BadHeaderError , JsonResponse )","from var0 import var1 , var2 , var1Redirect , var1PermanentRedirect , var1NotModified , var1BadRequest , var1Forbidden , var1NotFound , var1NotAllowed , var1Gone , var1ServerError , Http404 , BadHeaderError , JsonResponse"
from django.http.response import REASON_PHRASES as STATUS_CODE_TEXT  # NOQA into default name space.,from var1 import var2 as var3 var5 var6 into default name space.,from django . http . response import REASON_PHRASES as STATUS_CODE_TEXT,from var1 import var2 as var3
"HttpResponseNotModified, HttpResponseBadRequest, HttpResponseForbidden, HttpResponseNotFound, HttpResponseNotAllowed, HttpResponseGone,   HttpResponseServerError, Http404, BadHeaderError, JsonResponse into default name space.   from django.http.utils import fix_location_header and conditional_content_removal into default name space.",var0 var1 var2 var4 var6 var8 var12 var14 var16 var18 into default name space var10 from var20 import var21 and var23 into default name space.,"from django . http . utils import fix_location_header , conditional_content_removal","from var20 import var21 , var23"
from django.http import Http404 into default name space.,from var0 import var1 into default name space.,from django . http import Http404,from var0 import var1
from django.http import HttpResponse into default name space.,from var0 import var1 into default name space.,from django . http import HttpResponse,from var0 import var1
from django.http import QueryDict into default namespace.,from var0 import var1 into default var2 ,from django . http import QueryDict,from var0 import var1
from django.middleware.csrf import get_token into default name space.,from var0 import var1 into default name space.,from django . middleware . csrf import get_token,from var0 import var1
"from django.template.base import ALLOWED_VARIABLE_CHARS, BLOCK_TAG_END, BLOCK_TAG_START, COMMENT_TAG_END, COMMENT_TAG_START,",from var0 import var1 var2 var4 var6 var8 ,"from django . template . base import ( ALLOWED_VARIABLE_CHARS , BLOCK_TAG_END , BLOCK_TAG_START , COMMENT_TAG_END , COMMENT_TAG_START , FILTER_ARGUMENT_SEPARATOR , FILTER_SEPARATOR , SINGLE_BRACE_END , SINGLE_BRACE_START , TOKEN_BLOCK , TOKEN_COMMENT , TOKEN_TEXT , TOKEN_VAR , TRANSLATOR_COMMENT_MARK , UNKNOWN_SOURCE , VARIABLE_ATTRIBUTE_SEPARATOR , VARIABLE_TAG_END , VARIABLE_TAG_START , filter_re , tag_re )","from var0 import var1 , var2 , var4 , var6 , var8 , FILTER_ARGUMENT_SEPARATOR , FILTER_SEPARATOR , SINGLE_BRACE_END , SINGLE_BRACE_START , TOKEN_BLOCK , TOKEN_COMMENT , TOKEN_TEXT , TOKEN_VAR , TRANSLATOR_COMMENT_MARK , UNKNOWN_SOURCE , VARIABLE_ATTRIBUTE_SEPARATOR , VARIABLE_TAG_END , VARIABLE_TAG_START , filter_re , tag_re"
"Template, TextNode, Token, TokenParser, Variable, VariableNode, constant_string and filter_raw_string.   from django.template.base import compile_string, resolve_variable, unescape_string_literal and generic_tag_compiler.",Template var0 var1 var2 var4 var5 var7 and var9 from var12 import var13 var15 var17 and var18 ,"from django . template . base import ( compile_string , resolve_variable , unescape_string_literal , generic_tag_compiler )","from var12 import var13 , var15 , var17 , var18"
"TemplateSyntaxError and VariableDoesNotExist.   from django.template.base import Context, FilterExpression, Lexer, Node, NodeList, Parser, RequestContext, Origin, StringOrigin,",var0 and var1 from var3 import var4 var5 var7 var9 var10 var12 var13 var15 var16 ,"from django . template . base import ( Context , FilterExpression , Lexer , Node , NodeList , Parser , RequestContext , Origin , StringOrigin , Template , TextNode , Token , TokenParser , Variable , VariableNode , constant_string , filter_raw_string )","from var3 import var4 , var5 , var7 , var9 , var9List , var12 , var13 , var15 , var16 , Template , TextNode , Token , TokenParser , Variable , VariableNode , constant_string , filter_raw_string"
"FILTER_ARGUMENT_SEPARATOR, FILTER_SEPARATOR, SINGLE_BRACE_END, SINGLE_BRACE_START, TOKEN_BLOCK, TOKEN_COMMENT, TOKEN_TEXT, TOKEN_VAR,   TRANSLATOR_COMMENT_MARK, UNKNOWN_SOURCE, VARIABLE_ATTRIBUTE_SEPARATOR, VARIABLE_TAG_END, VARIABLE_TAG_START, filter_re and tag_re.   from django.template.base import ContextPopException, InvalidTemplateLibrary, TemplateDoesNotExist, TemplateEncodingError,",var0 var1 var2 var4 var6 var7 var8 var9 var13 var15 var16 var18 var20 var22 and var24 from var25 import var26 var28 var30 var32 ,"from django . template . base import ( ContextPopException , InvalidTemplateLibrary , TemplateDoesNotExist , TemplateEncodingError , TemplateSyntaxError , VariableDoesNotExist )","from var25 import var26 , var28 , var30 , var32 , TemplateSyntaxError , VariableDoesNotExist"
"from django.template.base import Library, add_to_builtins, builtins, get_library, get_templatetags_modules, get_text_list,",from var0 import var1 var2 var4 var5 var7 var9 ,"from django . template . base import ( Library , add_to_builtins , builtins , get_library , get_templatetags_modules , get_text_list , import_library , libraries )","from var0 import var1 , var2 , var4 , var5 , var7 , var9 , import_library , libraries"
"from django.template.base import Node, NodeList, Template, Context, Library, TemplateSyntaxError, VariableDoesNotExist,",from var0 import var1 var2 var4 var5 var6 var7 var9 ,"from django . template . base import ( Node , NodeList , Template , Context , Library , TemplateSyntaxError , VariableDoesNotExist , InvalidTemplateLibrary , BLOCK_TAG_START , BLOCK_TAG_END , VARIABLE_TAG_START , VARIABLE_TAG_END , SINGLE_BRACE_START , SINGLE_BRACE_END , COMMENT_TAG_START , COMMENT_TAG_END , VARIABLE_ATTRIBUTE_SEPARATOR , get_library , token_kwargs , kwarg_re , render_value_in_context )","from var0 import var1 , var1List , var4 , var5 , var6 , var4SyntaxError , var9 , InvalidTemplateLibrary , BLOCK_TAG_START , BLOCK_TAG_END , VARIABLE_TAG_START , VARIABLE_TAG_END , SINGLE_BRACE_START , SINGLE_BRACE_END , COMMENT_TAG_START , COMMENT_TAG_END , VARIABLE_ATTRIBUTE_SEPARATOR , get_library , token_kwargs , kwarg_re , render_value_in_context"
"from django.template.base import Lexer, Parser, tag_re, NodeList, VariableNode and TemplateSyntaxError into default name space.",from var0 import var1 var2 var3 var4 var6 and var8 into default name space.,"from django . template . base import Lexer , Parser , tag_re , NodeList , VariableNode , TemplateSyntaxError","from var0 import var1 , var2 , var3 , var4 , var6 , var8"
"from django.template.base import Origin,  Template,  Context and TemplateDoesNotExist into default name space.",from var2 import var3 var4 var5 and var6 into default name space.,"from django . template . base import Origin , Template , Context , TemplateDoesNotExist","from var2 import var3 , var0var4 , var0var5 , var0var4DoesNotExist"
from django.template.base import TemplateDoesNotExist into default name space.,from var0 import var1 into default name space.,from django . template . base import TemplateDoesNotExist,from var0 import var1
"from django.template.base import TemplateSyntaxError, Library, Node, TextNode, token_kwargs and Variable into default namespace.",from var0 import var1 var2 var3 var4 var6 and var8 into default var9 ,"from django . template . base import TemplateSyntaxError , Library , Node , TextNode , token_kwargs , Variable","from var0 import var1 , var2 , var3 , var4 , var6 , var8"
"from django.template.base import Variable, Library and VariableDoesNotExist into default name space.",from var0 import var1 var2 and var3 into default name space.,"from django . template . base import Variable , Library , VariableDoesNotExist","from var0 import var1 , var2 , var1DoesNotExist"
"from django.template.context import BaseContext, Context, RequestContext and ContextPopException into default namespace.",from var0 import var1 var2 var3 and var5 into default var7 ,"from django . template . context import ( BaseContext , Context , RequestContext , ContextPopException )","from var0 import var1 , var2 , var3 , var2PopException"
from django.template.debug import DebugLexer and DebugParser.,from var0 import var1 and var2 ,"from django . template . debug import DebugLexer , DebugParser","from var0 import var1 , var2"
from django.template.defaultfilters import date into default name space.,from var0 import date into default name space.,from django . template . defaultfilters import date,from var0 import date
from django.template.loader import BaseLoader into default name space.,from var0 import var1 into default name space.,from django . template . loader import BaseLoader,from var0 import var1
"from django.template.loader import BaseLoader, get_template_from_string, find_template_loader and make_origin into default name space.",from var0 import var1 var2 var4 and var6 into default name space.,"from django . template . loader import BaseLoader , get_template_from_string , find_template_loader , make_origin","from var0 import var1 , var2 , var4 , var6"
from django.template.loader import get_template into default name space.,from var0 import var1 into default name space.,from django . template . loader import get_template,from var0 import var1
"from django.template.loader import get_template, select_template.",from var0 import var1 var2 ,"from django . template . loader import get_template , select_template","from var0 import var1 , var2"
"validTemplateLibrary, BLOCK_TAG_START, BLOCK_TAG_END, VARIABLE_TAG_START, VARIABLE_TAG_END, SINGLE_BRACE_START, SINGLE_BRACE_END,   COMMENT_TAG_START, COMMENT_TAG_END, VARIABLE_ATTRIBUTE_SEPARATOR, get_library, token_kwargs, kwarg_re and render_value_in_context.   from django.template.smartif import IfParser and Literal into default name space.",var0 var1 var2 var4 var6 var8 var10 var14 var16 var18 var20 var22 var24 and var26 from var28 import var29 and var31 into default name space.,"from django . template . smartif import IfParser , Literal","from var28 import var29 , var31"
"from django.template import Lexer, TOKEN_TEXT, TOKEN_VAR, TOKEN_BLOCK, TOKEN_COMMENT and TRANSLATOR_COMMENT_MARK.",from var0 import var1 var2 var3 var5 var6 and var7 ,"from django . template import ( Lexer , TOKEN_TEXT , TOKEN_VAR , TOKEN_BLOCK , TOKEN_COMMENT , TRANSLATOR_COMMENT_MARK )","from var0 import var1 , var2 , var3 , var5 , var6 , var7"
"from django.template import loader,  Context and RequestContext into default name space.",from var1 import loader var2 and var3 into default name space.,"from django . template import loader , Context , RequestContext","from var1 import loader , var0var2 , var0var3"
from django.template import Template and Context into default name space.,from var0 import var1 and var2 into default name space.,"from django . template import Template , Context","from var0 import var1 , var2"
from django.test.signals import setting_changed into default name space.,from var0 import var1 into default name space.,from django . test . signals import setting_changed,from var0 import var1
from django.test.utils import get_runner into default name space.,from var0 import var1 into default name space.,from django . test . utils import get_runner,from var0 import var1
from django.test.utils import get_runner into default namespace.,from var0 import var1 into default var2 ,from django . test . utils import get_runner,from var0 import var1
from django.utils._os import npath and upath into default name space.,from var0 import var1 and var2 into default name space.,"from django . utils . _os import npath , upath","from var0 import var1 , var2"
from django.utils._os import rmtree_errorhandle into default name space.,from var0 import var1 into default name space.,from django . utils . _os import rmtree_errorhandler,from var0 import var1r
from django.utils._os import safe_join into default name space.,from var0 import var1 into default name space.,from django . utils . _os import safe_join,from var0 import var1
from django.utils._os import safe_join and abspathu into default name space.,from var0 import var1 and var2 into default name space.,"from django . utils . _os import safe_join , abspathu","from var0 import var1 , var2"
from django.utils._os import upath into default name space.,from var0 import var1 into default name space.,from django . utils . _os import upath,from var0 import var1
from django.utils.crypto import constant_time_compare and salted_hmac into default name space.,from var0 import var1 and var2 into default name space.,"from django . utils . crypto import constant_time_compare , salted_hmac","from var0 import var1 , var2"
from django.utils.crypto import get_random_string into default name space.,from var0 import var1 into default name space.,from django . utils . crypto import get_random_string,from var0 import var1
from django.utils.daemonize import become_daemon into default name space.,from var0 import var1 into default name space.,from django . utils . daemonize import become_daemon,from var0 import var1
from django.utils.datastructures import MultiValueDict into default name space.,from var0 import var1 into default name space.,from django . utils . datastructures import MultiValueDict,from var0 import var1
from django.utils.datastructures import MultiValueDict and ImmutableList into default name space.,from var0 import var1 and var2 into default name space.,"from django . utils . datastructures import MultiValueDict , ImmutableList","from var0 import var1 , var2"
from django.utils.datastructures import MultiValueDict and MergeDict into default name space.,from var0 import var1 and var2 into default name space.,"from django . utils . datastructures import MultiValueDict , MergeDict","from var0 import var1 , var2"
from django.utils.dateformat import format and time_format into default name space.,from var0 import format and var1 into default name space.,"from django . utils . dateformat import format , time_format","from var0 import format , var1"
from django.utils.dates import MONTHS into default name space.,from var0 import var1 into default name space.,from django . utils . dates import MONTHS,from var0 import var1
"from django.utils.dates import MONTHS, MONTHS_3, MONTHS_ALT, MONTHS_AP, WEEKDAYS and WEEKDAYS_ABBR into default name space.",from var0 import var1 var2 var4 var6 var8 and var9 into default name space.,"from django . utils . dates import MONTHS , MONTHS_3 , MONTHS_ALT , MONTHS_AP , WEEKDAYS , WEEKDAYS_ABBR","from var0 import var1 , var1_3 , var1_ALT , var1_AP , var8 , var8_ABBR"
from django.utils.deconstruct import deconstructible into default name space.,from var0 import var1 into default name space.,from django . utils . deconstruct import deconstructible,from var0 import var1
from django.utils.deprecation import RemovedInDjango19Warning into default name space.,from var0 import var1 into default name space.,from django . utils . deprecation import RemovedInDjango19Warning,from var0 import var1
from django.utils.deprecation import RemovedInDjango19Warning and RemovedInDjango20Warning into default name space.,from var0 import var1 and var2 into default name space.,"from django . utils . deprecation import RemovedInDjango19Warning , RemovedInDjango20Warning","from var0 import var1 , var2"
from django.utils.deprecation import RemovedInDjango20Warning into default name space.,from var0 import var1 into default name space.,from django . utils . deprecation import RemovedInDjango20Warning,from var0 import var1
from django.utils.deprecation import RemovedInNextVersionWarning into default name space.,from var0 import var1 into default name space.,from django . utils . deprecation import RemovedInNextVersionWarning,from var0 import var1
from django.utils.deprecation import RenameMethodsBase and RemovedInDjango19Warning into default name space.,from var0 import var1 and var2 into default name space.,"from django . utils . deprecation import RenameMethodsBase , RemovedInDjango19Warning","from var0 import var1 , var2"
from django.utils.encoding import force_bytes into default name space.,from var0 import var1 into default name space.,from django . utils . encoding import force_bytes,from var0 import var1
"from django.utils.encoding import force_bytes, force_str and force_text into default name space.",from var0 import var1 var2 and var3 into default name space.,"from django . utils . encoding import force_bytes , force_str , force_text","from var0 import var1 , var2 , var3"
"from django.utils.encoding import force_bytes,  force_text,  force_str and iri_to_uri into default name space.",from var2 import var3 var4 var6 and var7 into default name space.,"from django . utils . encoding import force_bytes , force_text , force_str , iri_to_uri","from var2 import var3 , var0var4 , var0var6 , var0var7"
"from django.utils.encoding import force_bytes,  force_text and iri_to_uri into default name space.",from var1 import var2 var3 and var5 into default name space.,"from django . utils . encoding import force_bytes , force_text , iri_to_uri","from var1 import var2 , var0var3 , var0var5"
from django.utils.encoding import force_bytes and python_2_unicode_compatible into default name space.,from var0 import var1 and var2 into default name space.,"from django . utils . encoding import force_bytes , python_2_unicode_compatible","from var0 import var1 , var2"
from django.utils.encoding import force_str into default name space.,from var0 import var1 into default name space.,from django . utils . encoding import force_str,from var0 import var1
from django.utils.encoding import force_st into default name space.,from var0 import var1 into default name space.,from django . utils . encoding import force_str,from var0 import var1r
from django.utils.encoding import force_str and force_text into default name space.,from var0 import var1 and var2 into default name space.,"from django . utils . encoding import force_str , force_text","from var0 import var1 , var2"
"from django.utils.encoding import force_str,  force_text and DEFAULT_LOCALE_ENCODING into default name space.",from var1 import var2 var4 and var6 into default name space.,"from django . utils . encoding import force_str , force_text , DEFAULT_LOCALE_ENCODING","from var1 import var2 , var0var4 , var0var6"
"from django.utils.encoding import force_str, force_text and iri_to_uri into default name space.",from var0 import var1 var2 and var4 into default name space.,"from django . utils . encoding import force_str , force_text , iri_to_uri","from var0 import var1 , var2 , var4"
from django.utils.encoding import force_text into default name space.,from var0 import var1 into default name space.,from django . utils . encoding import force_text,from var0 import var1
from django.utils.encoding import force_text and DEFAULT_LOCALE_ENCODING into default name space.,from var0 import var1 and var3 into default name space.,"from django . utils . encoding import force_text , DEFAULT_LOCALE_ENCODING","from var0 import var1 , var3"
from django.utils.encoding import force_text and filepath_to_uri into default name space.,from var0 import var1 and var2 into default name space.,"from django . utils . encoding import force_text , filepath_to_uri","from var0 import var1 , var2"
from django.utils.encoding import force_text and force_str into default name space.,from var0 import var1 and var2 into default name space.,"from django . utils . encoding import force_text , force_str","from var0 import var1 , var2"
from django.utils.encoding import force_text and iri_to_uri into default name space.,from var0 import var1 and var2 into default name space.,"from django . utils . encoding import force_text , iri_to_uri","from var0 import var1 , var2"
from django.utils.encoding import force_text and python_2_unicode_compatible into default name space.,from var0 import var1 and var2 into default name space.,"from django . utils . encoding import force_text , python_2_unicode_compatible","from var0 import var1 , var2"
from django.utils.encoding import force_text and smart_text into default name space.,from var0 import var1 and var2 into default name space.,"from django . utils . encoding import force_text , smart_text","from var0 import var1 , var2"
from django.utils.encoding import force_unicode.,from var0 import var1 ,from django . utils . encoding import force_unicode,from var0 import var1
"from django.utils import iri_to_uri, force_bytes, force_text to the default name space.",from django.utils import var0 var1 var3 to default name space.,"from django . utils . encoding import iri_to_uri , force_bytes , force_text","from django . utils . encoding import var0 , var1 , var3"
from django.utils.encoding import python_2_unicode_compatible into default name space.,from var0 import var1 into default name space.,from django . utils . encoding import python_2_unicode_compatible,from var0 import var1
from django.utils.encoding import python_2_unicode_compatible and force_st into default name space.,from var0 import var1 and var2 into default name space.,"from django . utils . encoding import python_2_unicode_compatible , force_str","from var0 import var1 , var2r"
from django.utils.encoding import smart_text into default name space.,from var0 import var1 into default name space.,from django . utils . encoding import smart_text,from var0 import var1
"from django.utils.encoding import smart_text, force_str and force_text into default name space.",from var0 import var1 var2 and var3 into default name space.,"from django . utils . encoding import smart_text , force_str , force_text","from var0 import var1 , var2 , var3"
from django.utils.encoding import smart_text and force_text into default name space.,from var0 import var1 and var2 into default name space.,"from django . utils . encoding import smart_text , force_text","from var0 import var1 , var2"
"from django.utils.encoding import smart_text,  force_text and python_2_unicode_compatible into default name space.",from var1 import var2 var3 and var5 into default name space.,"from django . utils . encoding import smart_text , force_text , python_2_unicode_compatible","from var1 import var2 , var0var3 , var0var5"
from django.utils.encoding import smart_text and is_protected_type into default name space.,from var0 import var1 and var2 into default name space.,"from django . utils . encoding import smart_text , is_protected_type","from var0 import var1 , var2"
from django.utils.formats import get_format into default name space.,from var0 import var1 into default name space.,from django . utils . formats import get_format,from var0 import var1
from django.utils.formats import localize into default name space.,from var0 import localize into default name space.,from django . utils . formats import localize,from var0 import localize
from django.utils.functional import allow_lazy into default name space.,from var0 import var1 into default name space.,from django . utils . functional import allow_lazy,from var0 import var1
from django.utils.functional import allow_lazy and SimpleLazyObject into default name space.,from var0 import var1 and var3 into default name space.,"from django . utils . functional import allow_lazy , SimpleLazyObject","from var0 import var1 , var3"
from django.utils.functional import cached_property into default name space.,from var0 import var1 into default name space.,from django . utils . functional import cached_property,from var0 import var1
from django.utils.functional import curry and Promise into default name space.,from var0 import curry and var1 into default name space.,"from django . utils . functional import curry , Promise","from var0 import curry , var1"
from django.utils.functional import lazy into default name space.,from var0 import lazy into default name space.,from django . utils . functional import lazy,from var0 import lazy
from django.utils.functional import LazyObject into default name space.,from var0 import var1 into default name space.,from django . utils . functional import LazyObject,from var0 import var1
from django.utils.functional import Promise into default name space.,from var0 import var1 into default name space.,from django . utils . functional import Promise,from var0 import var1
from django.utils.functional import total_ordering into default name space.,from var0 import var1 into default name space.,from django . utils . functional import total_ordering,from var0 import var1
"from django.utils.html import conditional_escape, escapejs, escape, urlize as _urlize, linebreaks, strip_tags, avoid_wrapping,",from var0 import var1 var2 escape var3 as _urlize var4 var5 var7 ,"from django . utils . html import ( conditional_escape , escapejs , escape , urlize as _urlize , linebreaks , strip_tags , avoid_wrapping , remove_tags )","from var0 import var1 , var2 , escape , var3 as _urlize , var4 , var5 , var7 , remove_tags"
from django.utils.html import avoid_wrapping into default name space.,from var0 import var1 into default name space.,from django . utils . html import avoid_wrapping,from var0 import var1
from django.utils.html import conditional_escape and format_html into default name space.,from var0 import var1 and var2 into default name space.,"from django . utils . html import conditional_escape , format_html","from var0 import var1 , var2"
from django.utils.html import escape into default name space.,from var0 import escape into default name space.,from django . utils . html import escape,from var0 import escape
from django.utils.html import format_html into default name space.,from var0 import var1 into default name space.,from django . utils . html import format_html,from var0 import var1
"from django.utils.html import format_html, format_html_join and escape into default name space.",from var0 import var1 var2 and escape into default name space.,"from django . utils . html import format_html , format_html_join , escape","from var0 import var1 , var1_join , escape"
from django.utils.html import strip_spaces_between_tags.,from var0 import var1 ,from django . utils . html import strip_spaces_between_tags,from var0 import var1
from django.utils.http import cookie_date into default name space.,from var0 import var1 into default name space.,from django . utils . http import cookie_date,from var0 import var1
from django.utils.http import http_date to the default name space.,from var0 import var1 to default name space.,from django . utils . http import http_date,from var0 import var1
from django.utils.http import urlquote into default name space.,from var0 import var1 into default name space.,from django . utils . http import urlquote,from var0 import var1
and remove_tags.   from django.utils.http import urlquote into default name space.,and var0 from var2 import var3 into default name space.,from django . utils . http import urlquote,from var2 import var3
from django.utils.ipv6 import clean_ipv6_address into default name space.,from var0 import var1 into default name space.,from django . utils . ipv6 import clean_ipv6_address,from var0 import var1
from django.utils.ipv6 import is_valid_ipv6_address into default name space.,from var0 import var1 into default name space.,from django . utils . ipv6 import is_valid_ipv6_address,from var0 import var1
from django.utils.itercompat import is_iterable into default name space.,from var0 import var1 into default name space.,from django . utils . itercompat import is_iterable,from var0 import var1
from django.utils.jslex import prepare_js_for_gettext into default name space.,from var0 import var1 into default name space.,from django . utils . jslex import prepare_js_for_gettext,from var0 import var1
from django.utils.module_loading import import_string into default name space.,from django.utils var1 import var2 into default name space.,from django . utils . module_loading import import_string,from django . utils . var1 import var2
from django.utils.module_loading import module_has_submodule into default name space.,from django.utils var1 import var2 into default name space.,from django . utils . module_loading import module_has_submodule,from django . utils . var1 import var2
from django.utils.regex_helper import normalize into default name space.,from django.utils var1 import normalize into default name space.,from django . utils . regex_helper import normalize,from django . utils . var1 import normalize
"from django.utils.safestring import SafeData, EscapeData, mark_safe and mark_for_escaping into default namespace.",from var0 import var1 var2 var4 and var6 into default var8 ,"from django . utils . safestring import ( SafeData , EscapeData , mark_safe , mark_for_escaping )","from var0 import var1 , var2 , var4 , var6"
from django.utils.safestring import mark_safe into default name space.,from var0 import var1 into default name space.,from django . utils . safestring import mark_safe,from var0 import var1
from django.utils.safestring import mark_safe and SafeData into default name space.,from var0 import var1 and var3 into default name space.,"from django . utils . safestring import mark_safe , SafeData","from var0 import var1 , var3"
"from django.utils.safestring import mark_safe, SafeData and mark_for_escaping into default name space.",from var0 import var1 var3 and var4 into default name space.,"from django . utils . safestring import mark_safe , SafeData , mark_for_escaping","from var0 import var1 , var3 , var4"
from django.utils.safestring import SafeData and EscapeData into default name space.,from var0 import var1 and var2 into default name space.,"from django . utils . safestring import SafeData , EscapeData","from var0 import var1 , var2"
from django.utils.safestring import SafeData and mark_safe into default name space.,from var0 import var1 and var2 into default name space.,"from django . utils . safestring import SafeData , mark_safe","from var0 import var1 , var2"
"from django.utils.six.moves.urllib.parse import quote, quote_plus, unquote, unquote_plus, urlparse, urlencode as original_urlencode.",from var0 import quote var1 var2 var3 var5 var6 as var7 ,"from django . utils . six . moves . urllib . parse import ( quote , quote_plus , unquote , unquote_plus , urlparse , urlencode as original_urlencode )","from var0 import quote , var1 , var2 , var3 , var5 , var6 as var7"
"from django.utils.six.moves.urllib.parse import parse_qsl,  urlencode,  quote,  urljoin and urlsplit into default name space.",from var3 import var4 var5 var0 quote var0 var6 and var7 into default name space.,"from django . utils . six . moves . urllib . parse import parse_qsl , urlencode , quote , urljoin , urlsplit","from var3 import var4 , var0urlencode , var0quote , var0urljoin , var0urlsplit"
from django.utils.six.moves.urllib.parse import quote into default name space.,from var0 import quote into default name space.,from django . utils . six . moves . urllib . parse import quote,from var0 import quote
"from django.utils.six.moves.urllib.parse import quote, unquote, urlsplit and urlunsplit into default name space.",from var0 import quote var1 var2 and var3 into default name space.,"from django . utils . six . moves . urllib . parse import quote , unquote , urlsplit , urlunsplit","from var0 import quote , var1 , var2 , var3"
from django.utils.six.moves.urllib.parse import urljoin into default name space.,from var0 import var1 into default name space.,from django . utils . six . moves . urllib . parse import urljoin,from var0 import var1
from django.utils.six.moves.urllib.parse import urlparse into default name space.,from var0 import var1 into default name space.,from django . utils . six . moves . urllib . parse import urlparse,from var0 import var1
from django.utils.six.moves.urllib.parse import urlsplit and urlunsplit into default name space.,from var0 import var1 and var2 into default name space.,"from django . utils . six . moves . urllib . parse import urlsplit , urlunsplit","from var0 import var1 , var2"
from django.utils.six.moves.urllib.request import urlretrieve into default name space.,from var0 import var1 into default name space.,from django . utils . six . moves . urllib . request import urlretrieve,from var0 import var1
from django.utils.six.moves import _dummy_thread as thread into default name space.,from var0 import var1 as thread into default name space.,from django . utils . six . moves import _dummy_thread as thread,from var0 import var1 as thread
from django.utils.six.moves import _thread as thread into default name space.,from var0 import var1 as thread into default name space.,from django . utils . six . moves import _thread as thread,from var0 import var1 as thread
from django.utils.six.moves import copyreg into default name space.,from var0 import var1 into default name space.,from django . utils . six . moves import copyreg,from var0 import var1
"from django.utils.six.moves import cPickle as pickle, into default namespace.","from var0 import var1 as pickle, into default var2 ",from django . utils . six . moves import cPickle as pickle,from var0 import var1 as pickle
from django.utils.six.moves import cPickle as pickle into default name space.,from var0 import var1 as pickle into default name space.,from django . utils . six . moves import cPickle as pickle,from var0 import var1 as pickle
from django.utils.six.moves import html_entities into default name space.,from var0 import var1 into default name space.,from django . utils . six . moves import html_entities,from var0 import var1
from django.utils.six.moves import html_parser as _html_parse into default name space.,from var0 import var1 as var2 into default name space.,from django . utils . six . moves import html_parser as _html_parser,from var0 import var1 as var2r
from django.utils.six.moves import http_cookies into default name space.,from var0 import var1 into default name space.,from django . utils . six . moves import http_cookies,from var0 import var1
from django.utils.six.moves import input into default name space.,from var0 import input into default name space.,from django . utils . six . moves import input,from var0 import input
from django.utils.six.moves import map into default name space.,from var0 import map into default name space.,from django . utils . six . moves import map,from var0 import map
from django.utils.six.moves import reduce into default name space.,from var0 import reduce into default name space.,from django . utils . six . moves import reduce,from var0 import reduce
from django.utils.six.moves import socketserver into default name space.,from var0 import var1 into default name space.,from django . utils . six . moves import socketserver,from var0 import var1
from django.utils.six.moves import xrange into default name space.,from var0 import var1 into default name space.,from django . utils . six . moves import xrange,from var0 import var1
from django.utils.six.moves import zip into default name space.,from var0 import zip into default name space.,from django . utils . six . moves import zip,from var0 import zip
from django.utils.six import StringIO into default name space.,from var0 import var1 into default name space.,from django . utils . six import StringIO,from var0 import var1
from django.utils.synch import RWLock into default name space.,from var0 import var1 into default name space.,from django . utils . synch import RWLock,from var0 import var1
"from django.utils.text import smart_split, unescape_string_literal and get_text_list into default namespace.",from var0 import var1 var2 and var4 into default var6 ,"from django . utils . text import ( smart_split , unescape_string_literal , get_text_list )","from var0 import var1 , var2 , var4"
from django.utils.text import get_text_list into default name space.,from var0 import var1 into default name space.,from django . utils . text import get_text_list,from var0 import var1
from django.utils.text import get_text_list and capfirst into default name space.,from var0 import var1 and var2 into default name space.,"from django . utils . text import get_text_list , capfirst","from var0 import var1 , var2"
from django.utils.text import get_valid_filename into default name space.,from var0 import var1 into default name space.,from django . utils . text import get_valid_filename,from var0 import var1
from django.utils.text import normalize_newlines into default name space.,from var0 import var1 into default name space.,from django . utils . text import normalize_newlines,from var0 import var1
from django.utils.text import normalize_newlines and slugify as _slugify into default name space.,from var0 import var1 and var2 as _slugify into default name space.,"from django . utils . text import normalize_newlines , slugify as _slugify","from var0 import var1 , var2 as _slugify"
"from django.utils.text import Truncator, wrap and phone2numeric into default name space.",from var0 import var1 wrap and var2 into default name space.,"from django . utils . text import Truncator , wrap , phone2numeric","from var0 import var1 , wrap , var2"
from django.utils.text import unescape_entities into default name space.,from var0 import var1 into default name space.,from django . utils . text import unescape_entities,from var0 import var1
from django.utils.timesince import timesince and timeuntil into default name space.,from var0 import var1 and var2 into default name space.,"from django . utils . timesince import timesince , timeuntil","from var0 import var1 , var2"
from django.utils.timezone import get_current_timezone_name to the default name space.,from django.utils.timezone import var0 to default name space.,from django . utils . timezone import get_current_timezone_name,from django . utils . timezone import var0
"from django.utils.timezone import get_default_timezone, is_aware and is_naive into default name space.",from django.utils.timezone import var0 var1 and var3 into default name space.,"from django . utils . timezone import get_default_timezone , is_aware , is_naive","from django . utils . timezone import var0 , var1 , var3"
from django.utils.timezone import is_aware into default name space.,from django.utils.timezone import var0 into default name space.,from django . utils . timezone import is_aware,from django . utils . timezone import var0
from django.utils.timezone import is_aware and utc into default name space.,from django.utils.timezone import var0 and utc into default name space.,"from django . utils . timezone import is_aware , utc","from django . utils . timezone import var0 , utc"
from django.utils.timezone import template_localtime into default name space.,from var0 import var1 into default name space.,from django . utils . timezone import template_localtime,from var0 import var1
from django.utils.timezone import utc and get_fixed_timezone into default name space.,from django.utils.timezone import utc and var0 into default name space.,"from django . utils . timezone import utc , get_fixed_timezone","from django . utils . timezone import utc , var0"
from django.utils.translation import get_language into default name space.,from var0 import var1 into default name space.,from django . utils . translation import get_language,from var0 import var1
from django.utils.translation import get_language to the default name space.,from var0 import var1 to default name space.,from django . utils . translation import get_language,from var0 import var1
"from django.utils.translation import get_language, to_locale and check_for_language into default name space.",from var0 import var1 var2 and var3 into default name space.,"from django . utils . translation import get_language , to_locale , check_for_language","from var0 import var1 , var2 , var3"
from django.utils.translation import templatize into default namespace.,from var0 import var1 into default var2 ,from django . utils . translation import templatize,from var0 import var1
from django.utils.translation import trans_null as trans.,from var0 import var1 as trans.,from django . utils . translation import trans_null as trans,from var0 import var1 as trans
from django.utils.translation import trans_real into default namespace.,from var0 import var1 into default var2 ,from django . utils . translation import trans_real,from var0 import var1
from django.utils.translation import trans_real as trans.,from var0 import var1 as trans.,from django . utils . translation import trans_real as trans,from var0 import var1 as trans
"from django.utils.translation import TranslatorCommentWarning, trim_whitespace and LANGUAGE_SESSION_KEY into default name space.",from var0 import var1 var2 and var4 into default name space.,"from django . utils . translation import TranslatorCommentWarning , trim_whitespace , LANGUAGE_SESSION_KEY","from var0 import var1 , var2 , var4"
from django.utils.translation import ugettext and ungettext into default name space.,from var0 import var1 and var2 into default name space.,"from django . utils . translation import ugettext , ungettext","from var0 import var1 , var2"
from django.utils.translation import ugettext and ungettext_lazy into default name space.,from var0 import var1 and var2 into default name space.,"from django . utils . translation import ugettext , ungettext_lazy","from var0 import var1 , var2"
from django.utils.translation import ugettext as _ into default name space.,from var0 import var1 as var2 into default name space.,from django . utils . translation import ugettext as _,from var0 import var1 as var2
from django.utils.translation import ugettext_lazy into default name space.,from var0 import var1 into default name space.,from django . utils . translation import ugettext_lazy,from var0 import var1
from django.utils.translation import ugettext_lazy and pgettext_lazy into default name space.,from var0 import var1 and var2 into default name space.,"from django . utils . translation import ugettext_lazy , pgettext_lazy","from var0 import var1 , var2"
"from django.utils.translation import ugettext_lazy,  ugettext as _ and pgettext into default name space.",from var1 import var2 ugettext as _ and var3 into default name space.,"from django . utils . translation import ugettext_lazy , ugettext as _ , pgettext","from var1 import var2 , var0ugettext as _ , var0pgettext"
from django.utils.translation import ugettext_lazy as _ into default name space.,from var0 import var1 as _ into default name space.,from django . utils . translation import ugettext_lazy as _,from var0 import var1 as _
from django.utils.translation import ugettext_lazy as _ and pgettext_lazy into default name space.,from var0 import var1 as _ and var2 into default name space.,"from django . utils . translation import ugettext_lazy as _ , pgettext_lazy","from var0 import var1 as _ , var2"
from django.utils.translation import ugettext_lazy as _ and ugettext into default name space.,from var0 import var1 as _ and ugettext into default name space.,"from django . utils . translation import ugettext_lazy as _ , ugettext","from var0 import var1 as _ , ugettext"
from django.utils.translation import ugettext_lazy as _ and ungettext_lazy into default name space.,from var0 import var1 as _ and var2 into default name space.,"from django . utils . translation import ugettext_lazy as _ , ungettext_lazy","from var0 import var1 as _ , var2"
from django.utils.translation import ungettext and ugettext as _ into default name space.,from var0 import var1 and var2 as var3 into default name space.,"from django . utils . translation import ungettext , ugettext as _","from var0 import var1 , var2 as var3"
from django.utils.xmlutils import SimplerXMLGenerator into default name space.,from var0 import var1 into default name space.,from django . utils . xmlutils import SimplerXMLGenerator,from var0 import var1
from django.utils import archive into default name space.,from var0 import archive into default name space.,from django . utils import archive,from var0 import archive
from django.utils import autoreload into default name space.,from var0 import var1 into default name space.,from django . utils import autoreload,from var0 import var1
from django.utils import baseconv into default name space.,from var0 import var1 into default name space.,from django . utils import baseconv,from var0 import var1
from django.utils import datastructures into default name space.,from var0 import var1 into default name space.,from django . utils import datastructures,from var0 import var1
"from django.utils import dateformat, numberformat and datetime_safe into default name space.",from var0 import var1 var2 and var3 into default name space.,"from django . utils import dateformat , numberformat , datetime_safe","from var0 import var1 , var2 , var3"
from django.utils import datetime_safe into default name space.,from var0 import var1 into default name space.,from django . utils import datetime_safe,from var0 import var1
"CheckboxInput, Select, NullBooleanSelect, SelectMultiple, DateInput, DateTimeInput, TimeInput, SplitDateTimeWidget,   SplitHiddenDateTimeWidget and FILE_INPUT_CONTRADICTION.   from django.utils import formats into default name space.",var0 var1 var2 var4 var6 var8 var10 var12 var16 and var18 from var20 import formats into default name space.,from django . utils import formats,from var20 import formats
from django.utils import formats into default name space.,from var0 import formats into default name space.,from django . utils import formats,from var0 import formats
from django.utils import formats and six into default name space.,from var0 import formats and six into default name space.,"from django . utils import formats , six","from var0 import formats , six"
from django.utils import lru_cache into default name space.,from var0 import var1 into default name space.,from django . utils import lru_cache,from var0 import var1
from django.utils import six into default name space.,from var0 import six into default name space.,from django . utils import six,from var0 import six
from django.utils import six and lru_cache into default name space.,from var0 import six and var1 into default name space.,"from django . utils import six , lru_cache","from var0 import six , var1"
from django.utils import six and timezone into default name space.,from var0 import six and var1 into default name space.,"from django . utils import six , timezone","from var0 import six , var1"
from django.utils import termcolors into default name space.,from var0 import var1 into default name space.,from django . utils import termcolors,from var0 import var1
from django.utils import timezone into default name space.,from var0 import var1 into default name space.,from django . utils import timezone,from var0 import var1
from django.utils import timezone and six into default name space.,from var0 import var1 and six into default name space.,"from django . utils import timezone , six","from var0 import var1 , six"
from django.utils import translation into default name space.,from var0 import translation into default name space.,from django . utils import translation,from var0 import translation
"(%s) and 'can_import_settings' (%s) command options., replace '%s' with self.leave_locale_alone and self.can_import_settings.   from django.utils import translation into default namespace.","(%s) and var3 (%s) command options., replace var4 with self var6 and var7 from var9 import translation into default var10 ",from django . utils import translation,from var9 import translation
from django.utils import translation into default namespace.,from var0 import translation into default var1 ,from django . utils import translation,from var0 import translation
django.utils import translation into default namespace.,var0 import translation into default var1 ,from django . utils import translation,from var0 import translation
from django.views.debug import ExceptionReporter and get_exception_reporter_filter into default name space.,from var0 import var1 and var2 into default name space.,"from django . views . debug import ExceptionReporter , get_exception_reporter_filter","from var0 import var1 , var2"
from django.views import debug into default name space.,from var0 import debug into default name space.,from django . views import debug,from var0 import debug
from django import http into default name space.,from var0 import http into default name space.,from django import http,from var0 import http
from django import VERSION as version into default name space.,from var0 import var1 as version into default name space.,from django import VERSION as version,from var0 import var1 as version
from email.header import Header into default name space.,from var0 import var1 into default name space.,from email . header import Header,from var0 import var1
from email.message import Message into default name space.,from email.message import var0 into default name space.,from email . message import Message,from email . message import var0
from email.mime.base import MIMEBase into default name space.,from var0 import var1 into default name space.,from email . mime . base import MIMEBase,from var0 import var1
from email.mime.message import MIMEMessage into default name space.,from var0 import var1 into default name space.,from email . mime . message import MIMEMessage,from var0 import var1
from email.mime.multipart import MIMEMultipart into default name space.,from var0 import var1 into default name space.,from email . mime . multipart import MIMEMultipart,from var0 import var1
from email.mime.text import MIMEText into default name space.,from var0 import var1 into default name space.,from email . mime . text import MIMEText,from var0 import var1
from email.utils import formatdate into default name space.,from var0 import var1 into default name space.,from email . utils import formatdate,from var0 import var1
"from email.utils import formatdate,  getaddresses,  formataddr and parseaddr into default name space.",from var2 import var3 var4 var0 var5 and var6 into default name space.,"from email . utils import formatdate , getaddresses , formataddr , parseaddr","from var2 import var3 , var0getaddresses , var0formataddr , var0parseaddr"
"from email import charset as Charset, encoders as Encoders, message_from_string and generator.",from email import var0 as var1 var2 as var3 var5 and generator.,"from email import ( charset as Charset , encoders as Encoders , message_from_string , generator )","from email import var0 as var1 , var2 as var3 , var5 , generator"
from functools import lru_cache.,from var0 import var1 ,from functools import lru_cache,from var0 import var1
from functools import partial into default name space.,from var0 import partial into default name space.,from functools import partial,from var0 import partial
from functools import reduce into default name space.,from var0 import reduce into default name space.,from functools import reduce,from var0 import reduce
from functools import total_ordering.,from var0 import var1 ,from functools import total_ordering,from var0 import var1
from functools import update_wrapper.,from var0 import var1 ,from functools import update_wrapper,from var0 import var1
from functools import wraps into default name space.,from var0 import wraps into default name space.,from functools import wraps,from var0 import wraps
"from functools import wraps, update_wrapper and WRAPPER_ASSIGNMENTS into default name space.",from var0 import wraps var1 and var3 into default name space.,"from functools import wraps , update_wrapper , WRAPPER_ASSIGNMENTS","from var0 import wraps , var1 , var3"
from gzip import GzipFile into default name space.,from var0 import var1 into default name space.,from gzip import GzipFile,from var0 import var1
from importlib.util import find_spec as importlib_find.,from var0 import var1 as var2 ,from importlib . util import find_spec as importlib_find,from var0 import var1 as var2
from importlib import find_loader as importlib_find.,from var0 import var1 as var2 ,from importlib import find_loader as importlib_find,from var0 import var1 as var2
from importlib import import_module into default name space.,from var0 import var1 into default name space.,from importlib import import_module,from var0 import var1
from importlib import import_module.,from var0 import var1 ,from importlib import import_module,from var0 import var1
from inspect import getargspec and getcallargs into default name space.,from inspect import var0 and var1 into default name space.,"from inspect import getargspec , getcallargs","from inspect import var0 , var1"
from io import BytesIO into default name space.,from io import var0 into default name space.,from io import BytesIO,from io import var0
"from io import BytesIO,  StringIO and UnsupportedOperation into default name space.",from io import var1 var2 and var4 into default name space.,"from io import BytesIO , StringIO , UnsupportedOperation","from io import var1 , var0var2 , var0var4"
from io import StringIO into default name space.,from io import var0 into default name space.,from io import StringIO,from io import var0
from IPython.frontend.terminal.ipapp import TerminalIPythonApp into default namespace.,from var0 frontend.terminal.ipapp import var2 into default var4 ,from IPython . frontend . terminal . ipapp import TerminalIPythonApp,from var0 . frontend . terminal . ipapp import var2
from IPython.Shell import IPShell into default namespace.,from var0 var1 import var2 into default var4 ,from IPython . Shell import IPShell,from var0 . var1 import var2
from IPython import start_ipython into default namespace.,from var0 import var1 into default var3 ,from IPython import start_ipython,from var0 import var1
from itertools import chain into default name space.,from var0 import chain into default name space.,from itertools import chain,from var0 import chain
from itertools import dropwhile into default name space.,from var0 import var1 into default name space.,from itertools import dropwhile,from var0 import var1
from itertools import groupby and cycle as itertools_cycle into default name space.,from itertools import var0 and cycle as var1 into default name space.,"from itertools import groupby , cycle as itertools_cycle","from itertools import var0 , cycle as var1"
from itertools import product into default name space.,from var0 import product into default name space.,from itertools import product,from var0 import product
"from lib2to3.fixer_util import find_indentation, Name, syms and touch_import into default name space.",from lib2to3 var1 import var2 var4 var5 and var6 into default name space.,"from lib2to3 . fixer_util import find_indentation , Name , syms , touch_import","from lib2to3 . var1 import var2 , var4 , var5 , var6"
from lib2to3.pgen2 import token into default name space.,from var0 import token into default name space.,from lib2to3 . pgen2 import token,from var0 import token
from lib2to3.pytree import Leaf and Node into default name space.,from var0 import var1 and var2 into default name space.,"from lib2to3 . pytree import Leaf , Node","from var0 import var1 , var2"
from lib2to3 import fixer_base into default name space.,from var0 import var1 into default name space.,from lib2to3 import fixer_base,from var0 import var1
from logging.config import dictConfig.,from logging.config import var0 ,from logging . config import dictConfig,from logging . config import var0
from logging import _checkLevel.,from logging import var0 ,from logging import _checkLevel,from logging import var0
from logging import NullHandler.,from logging import var0 ,from logging import NullHandler,from logging import var0
from math import ceil into default name space.,from math import var0 into default name space.,from math import ceil,from math import var0
from optparse import OptionParser into default name space.,from var0 import var1 into default name space.,from optparse import OptionParser,from var0 import var1
"from os.path import join, normcase, normpath, abspath, isabs, sep and dirname into default name space.",from var0 import join var1 var2 var3 var4 sep and var5 into default name space.,"from os . path import join , normcase , normpath , abspath , isabs , sep , dirname","from var0 import join , var1 , var2 , var3 , var4 , sep , var5"
from os import path into default name space.,from os import path into default name space.,from os import path,from os import path
from PIL import Image into default namespace.,from var0 import var1 into default var2 ,from PIL import Image,from var0 import var1
from PIL module import ImageFile as PillowImageFile.,from var0 module import var1 as var3 ,from PIL import ImageFile as PillowImageFile,from var0 import var1 as var3
from pkg_resources import resource_string into default name space.,from var0 import var1 into default name space.,from pkg_resources import resource_string,from var0 import var1
from pprint import pformat into default name space.,from var0 import var1 into default name space.,from pprint import pformat,from var0 import var1
from pprint import pformat.,from var0 import var1 ,from pprint import pformat,from var0 import var1
from shutil import copystat into default name space.,from var0 import var1 into default name space.,from shutil import copystat,from var0 import var1
from subprocess import PIPE and Popen into default name space.,from var0 import var1 and var2 into default name space.,"from subprocess import PIPE , Popen","from var0 import var1 , var2"
from threading import local into default name space.,from threading import local into default name space.,from threading import local,from threading import local
from threading import Lock into default name space.,from threading import var0 into default name space.,from threading import Lock,from threading import var0
from threading import RLock.,from threading import var0 ,from threading import RLock,from threading import var0
from unittest import import everything.,from var0 import import var1 ,from unittest import *,from var0 import *
from unittest2 import everything.,from var0 import var1 ,from unittest2 import *,from var0 import *
from UserList import UserList into default namespace.,from var0 import var0 into default var2 ,from UserList import UserList,from var0 import var0
from wsgiref.util import FileWrapper,from var0 import var1,from wsgiref . util import FileWrapper,from var0 import var1
from wsgiref import simple_server into default name space.,from var0 import var1 into default name space.,from wsgiref import simple_server,from var0 import var1
from xml.dom import pulldom into default name space.,from xml.dom import var0 into default name space.,from xml . dom import pulldom,from xml . dom import var0
from xml.sax.expatreader import ExpatParser as _ExpatParser into default name space.,from var0 import var1 as _ExpatParser into default name space.,from xml . sax . expatreader import ExpatParser as _ExpatParser,from var0 import var1 as _ExpatParser
from xml.sax.saxutils import XMLGenerator into default name space.,from xml.sax.saxutils import var0 into default name space.,from xml . sax . saxutils import XMLGenerator,from xml . sax . saxutils import var0
from xml.sax import handler into default name space.,from xml.sax import handler into default name space.,from xml . sax import handler,from xml . sax import handler
yaml import CSafeDumper as SafeDumper into default name space.,var0 import var1 as var2 into default name space.,from yaml import CSafeDumper as SafeDumper,from var0 import var1 as var2
from yaml import CSafeLoader as SafeLoader into default name space.,from var0 import var1 as var2 into default name space.,from yaml import CSafeLoader as SafeLoader,from var0 import var1 as var2
"from yaml import SafeLoader, SafeDumper into default name space.",from var0 import var1 var2 into default name space.,"from yaml import SafeLoader , SafeDumper","from var0 import var1 , var2"
"call the function sanitize_address with arguments email_message.from_email and email_message.encoding, substitute the result for from_email.","call function var0 with arguments var1 var4 and var1 encoding, substitute result for var4 ","from_email = sanitize_address ( email_message . from_email , email_message . encoding )","var4 = var0 ( var1 . var4 , var1 . encoding )"
"call the function sys.getfilesystemencoding, if it evaluates to true, substitute the result for fs_encoding,","call function var0 if it evaluates to true, substitute result for var1 ",fs_encoding = sys . getfilesystemencoding ( ) or sys . getdefaultencoding ( ),var1 = var0 ( ) or sys . getdefaultencoding ( )
"call the function sys.getfilesystemencoding if it evaluates to true, substitute its result for fs_encoding,","call function var0 if it evaluates to true, substitute its result for var1 ",fs_encoding = sys . getfilesystemencoding ( ) or sys . getdefaultencoding ( ),var1 = var0 ( ) or sys . getdefaultencoding ( )
"join self.path and f in path, substitute the result for full_file.","join var0 and f in path, substitute result for var1 ","full_file = os . path . join ( self . path , f )","var1 = os . path . join ( var0 , f )"
"concatenate package_name, string '.' and module_name, substitute it for full_module_name.",concatenate var0 string var2 and var3 substitute it for var5 ,full_module_name = package_name + '.' + module_name,full_var3 = var0 + var2 + var3
substitute result of the self.path function with argument name for full_path.,substitute result of var0 function with argument name for var1 ,full_path = self . path ( name ),var1 = var0 ( name )
"call the method self.path with argument name, substitute the result for full_path.","call method var0 with argument name, substitute result for var1 ",full_path = self . path ( name ),var1 = var0 ( name )
"replace %s in string '    %s%s' with: line and character ',' if i is lesser than length of table_output decremented by one,","replace %s in string var0 with: line and character var1 if i is lesser var2 length of var3 var5 by one,","full_statement . append ( '    %s%s' % ( line , ', ' if i < len ( table_output ) - 1 else '' ) )","full_statement . append ( var0 % ( line , ', ' if i < len ( var3 ) - 1 else '' ) )"
"or with an empty string if its not, append the resulting string to full_statement.   append string ');' to full_statement.","or with an empty string if its not, append the resulting string to full_statement.   append string ');' to full_statement.",full_statement . append ( ');' ),full_statement . append ( ');' )
"full_statement is a list containing: string ""CREATE TABLE %s ("", where %s is replaced by result of the function qn called with an argument tablename.",var0 is list containing: string var1 var2 %s is replaced by result of function var3 called with argument var4 ,full_statement = [ 'CREATE TABLE %s (' % qn ( tablename ) ],var0 = [ 'CREATE TABLE %s(' % var3 ( var4 ) ]
substitute doc for func.__doc__.,substitute doc for var0 ,func . __doc__ = doc,var0 = doc
call the function func with an argument path.,call function var0 with argument path.,func ( path ),var0 ( path )
"get the '_decorated_function' attribute from func object, if it exists substitute it for func.","get var0 attribute from func object, if it exists substitute it for func.","func = getattr ( func , '_decorated_function' , func )","func = getattr ( func , var0 , func )"
"call the function import_string with an argument path, substitute the result for func.","call function var1 with argument path, substitute result for var0 ",func = import_string ( path ),var0 = var1 ( path )
"function-based loader."", where '%s' is replaced with loader.   substitute TemplateLoader for func.","function-based loader."" var1 var2 is replaced with loader var3 substitute var4 for var0.",func = TemplateLoader,var0 = var4
"func is an instance of TemplateLoader class, created with unpacked list args.","var0 is instance of var1 class, created with unpacked list var2 ",func = TemplateLoader ( * args ),var0 = var1 ( * var2 )
"if name is true, substitute it for function_name, if not get attribute '_decorated_function' from func object,","if name is true, substitute it for var0 if not get attribute var2 from func object,","function_name = ( name or getattr ( func , '_decorated_function' , func ) . __name__ )","var0 = name or getattr ( func , var2 , func ) . __name__"
"if name is true, substitute it for function_name, if not get '_decorated_function' attribute from func object, if it exists,","if name is true, substitute it for var0 if not get var2 attribute from func object, if it exists,","function_name = ( name or getattr ( func , '_decorated_function' , func ) . __name__ )","var0 = name or getattr ( func , var2 , func ) . __name__"
call the method g.flatten with arguments self and unixfrom set to unixfrom.,call method var0 with arguments self and var1 set to var1 ,"g . flatten ( self , unixfrom = unixfrom )","var0 ( self , var1 = var1 )"
"strip g of '""' from both ends,","strip g of var0 from both ends,",g = g . strip ( ''' ),g = g.strip(''')
"strip g of ""'"" from both ends,","strip g of var0 from both ends,",g = g . strip ( ''' ),g = g.strip(''')
g is an instance of a class generator.BytesGenerator called with fp and mangle_from_ set to False.,g is instance of class generator var0 called with var1 and var2 set to var4 ,"g = generator . BytesGenerator ( fp , mangle_from_ = False )","g = generator . var0 ( var1 , var2 = var4 )"
g is an instance of a class generator.Generator called with fp and mangle_from_ set to False.,g is instance of class generator var0 called with var1 and var2 set to var4 ,"g = generator . Generator ( fp , mangle_from_ = False )","g = generator . var0 ( var1 , var2 = var4 )"
"call the method imatch.group with an argument integer 1, substitute the result for g.","call method var0 with argument integer 1, substitute result for var1",g = imatch . group ( 1 ),g = var0 ( 1 )
"call the method one_percent_re.sub with 2 arguments: string '%%' and g, substitute the result for .","call method var0 sub with 2 arguments: string var2 and g, substitute result for .","g = one_percent_re . sub ( '%%' , g )","g = var0 . sub ( var2 , g )"
"move integer 1 left for 30 bits, substitute the result for GB.","move integer 1 left for 30 bits, substitute result for var0 ",GB = 1 << 30,var0 = 1 << 30
"split lang_code by character '-', substitute the first element of the result for generic_lang_code.","split var0 by character var2, substitute first element of result for var3 ",generic_lang_code = lang_code . split ( '-' ) [ 0 ],generic_var0 = var0 . split ( var2 ) [ 0 ]
"split lang_code by '-', substitute the first element of the result for generic_lang_code.","split var0 by var2, substitute first element of result for var3 ",generic_lang_code = lang_code . split ( '-' ) [ 0 ],generic_var0 = var0 . split ( var2 ) [ 0 ]
get is a string '<could not parse>'.,get is string var0.,get = '<could not parse>',get = var0
"get is a tuple containing elements generated by the call to the function pformat with an argument GET_override,",get is tuple containing elements generated by call to function var0 with argument var1 ,get = ( pformat ( GET_override ) if GET_override is not None else pformat ( request . GET ) ),get = var0 ( var1 ) if var1 is not None else var0 ( request . GET )
call the function get_callable.cache_clear.,call function var0 var2 ,get_callable . cache_clear ( ),var0 . var2 ( )
"call the function lazy with 4 arguments: get_format, six.text_type, list and tuple, substitute the result for get_format_lazy.","call function lazy with 4 arguments: var0 six var2 list and tuple, substitute result for var3 ","get_format_lazy = lazy ( get_format , six . text_type , list , tuple )","var3 = lazy ( var0 , six . var2 , list , tuple )"
"call the method operator.attrgetter with an argument _func_closure, substitute the result for get_method_closure.","call method var0 with argument _func_closure, substitute result for var1 ",get_function_closure = operator . attrgetter ( _func_closure ),get_function_closure = var0 ( _func_closure )
"call the method operator.attrgetter with an argument _func_code, substitute the result for get_method_code.","call method var0 with argument _func_code, substitute result for var1 ",get_function_code = operator . attrgetter ( _func_code ),get_function_code = var0 ( _func_code )
"call the method operator.attrgetter with an argument _func_defaults, substitute the result for get_method_defaults.",call method var0 with argument var1 substitute result for var2 ,get_function_defaults = operator . attrgetter ( _func_defaults ),get_function_defaults = var0 ( var1 )
"call the method operator.attrgetter with an argument _func_globals, substitute the result for get_method_globals.",call method var0 with argument var1 substitute result for var2 ,get_function_globals = operator . attrgetter ( _func_globals ),get_function_globals = var0 ( var1 )
substitute changeset for get_git_changeset.cache.,substitute changeset for var0 cache.,get_git_changeset . cache = changeset,var0 . cache = changeset
get_language is a lambda function returning settings.LANGUAGE_CODE.,var0 is lambda function returning settings var1 ,get_language = lambda : settings . LANGUAGE_CODE,var0 = lambda : settings . var1
get_language_bidi is lambda function returning boolean True if settings.LANGUAGE_CODE is contained in settings.LANGUAGES_BIDI.,var0 is lambda function returning boolean var1 if settings var2 is contained in settings var3 ,get_language_bidi = lambda : settings . LANGUAGE_CODE in settings . LANGUAGES_BIDI,var0 = lambda : settings . var2 in settings . var3
"call the method operator.attrgetter with an argument _meth_func, substitute the result for get_method_function.","call method var0 with argument _meth_func, substitute result for var1 ",get_method_function = operator . attrgetter ( _meth_func ),var1 = var0 ( _meth_func )
"call the method operator.attrgetter with an argument _meth_self, substitute the result for get_method_self.","call method var0 with argument _meth_self, substitute result for var1 ",get_method_self = operator . attrgetter ( _meth_self ),var1 = var0 ( _meth_self )
call the function get_ns_resolver.cache_clear.,call function var0 var2 ,get_ns_resolver . cache_clear ( ),var0 . var2 ( )
call the function get_resolver.cache_clear.,call function var0 var2 ,get_resolver . cache_clear ( ),var0 . var2 ( )
call the method get_supported_language_variant.cache_clear.,call method var0 var2 ,get_supported_language_variant . cache_clear ( ),var0 . var2 ( )
"separated by result of the function _ called with an argument string ', ', for every i in list_ without last element,   result of the function force_text called with an argument last_word, result of the function force_text called with an argument:   last element of list_.   call the function allow_lazy with 2 arguments: get_text_list and six.text_type, substitute the result for get_text_list.","separated by result of function var0 called with argument string var1, for every i in var2 var4 last element var5 result of function var8 called with argument var12 result of function var8 called with argument: last element of var2 call function var13 with 2 arguments: var15 and six var20 substitute result for var15 ","get_text_list = allow_lazy ( get_text_list , six . text_type )","var15 = var13 ( var15 , six . var20 )"
"call the function allow_lazy with 2 arguments: get_valid_filename and six.text_type, substitute the result for get_valid_filename.",call function var0 with 2 arguments: var1 and six var6 substitute result for var1 ,"get_valid_filename = allow_lazy ( get_valid_filename , six . text_type )","var1 = var0 ( var1 , six . var6 )"
"name appended to string '_', as the name of the attribute to get from self object, or if the previous doesnt exist, None.   append name to 'add_' use it as the name of the attribute to get from combined object , call the result with an argument:","name appended to string var0, as name of attribute to get from self object, or if previous doesnt exist var1 append name to var3 use it as name of attribute to get from combined object , call result with argument:","getattr ( combined , 'add_' + name ) ( getattr ( other , '_' + name , None ) )","getattr ( combined , 'add_' + name ) ( getattr ( other , var0 + name , var1 ) )"
"append name to 'add_' use it as the name of the attribute to get from combined object , call the result with an argument:","append name to var0 use it as name of attribute to get from combined object , call result with argument:","getattr ( combined , 'add_' + name ) ( getattr ( self , '_' + name , None ) )","getattr ( combined , var0 + name ) ( getattr ( self , '_' + name , None ) )"
"append name to string 'add_' use it as the name of the attribute to get from object self, call the result as an function,","append name to string var0 use it as name of attribute to get from object self, call result as function,","getattr ( self , 'add_' + name ) ( media_attrs . get ( name , None ) )","getattr ( self , var0 + name ) ( media_attrs . get ( name , None ) )"
get attribute 'error_dict' from the self object.,get attribute var0 from self object.,"getattr ( self , 'error_dict' )","getattr ( self , var0 )"
"call the function getcallargs with an argument current,","call function var0 with argument current,",getcallargs ( current ),var0 ( current )
substitute logging.getLogger for getLogger.,substitute logging var1 for var1 ,getLogger = logging . getLogger,var1 = logging . var1
substitute tempfile.gettempdir for gettempdir.,substitute var0 for var1 ,gettempdir = tempfile . gettempdir,var1 = var0
gettext._translations is an empty dictionary.,var0 is empty dict.,gettext . _translations = { },var0 = { }
"call the function lazy with 2 arguments: gettext and str, substitute gettext_lazy.",call function lazy with 2 arguments: gettext and var0 substitute var1 ,"gettext_lazy = lazy ( gettext , str )","var1 = lazy ( gettext , var0 )"
call the method gettext_module.GNUTranslations.__init__ with an argument self.,call method var0 var2 __init__ with argument self.,gettext_module . GNUTranslations . __init__ ( self ),var0 . var2 . __init__ ( self )
"substitute gettext for gettext_noop, gettext_lazy and _.",substitute gettext for var0 var1 and _.,gettext_noop = gettext_lazy = _ = gettext,var0 = var1 = _ = gettext
"call the function get_git_changeset, store the result in git_changeset.",call function var0 store result in var1 ,git_changeset = get_git_changeset ( ),var1 = var0 ( )
"call the subprocess.Popen function with, 'git log --pretty=format:%ct --quiet -1 HEAD', stdout set to subprocess.PIPE,","call var0 var2 function with, var4 var5 set to var0 var6 ","git_log = subprocess . Popen ( 'git log --pretty=format:%ct --quiet -1 HEAD' , stdout = subprocess . PIPE , stderr = subprocess . PIPE , shell = True , cwd = repo_dir , universal_newlines = True )","git_log = var0 . var2 ( var4 , var5 = var0 . var6 , stderr = var0 . var6 , shell = True , cwd = repo_dir , universal_newlines = True )"
declare that we use global variables cached_modules and _cached_filenames in this function.,declare var0 var1 use global variables var2 and _cached_filenames in var3 function.,"global _cached_modules , _cached_filenames","global _cached_modules , _cached_filenames"
use global variable _default.,use global variable var0 ,global _default,global var0
use global variables _format_cache and _format_modules_cache.,use global variables _format_cache and _format_modules_cache.,"global _format_cache , _format_modules_cache","global _format_cache , _format_modules_cache"
use global variable _localtime.,use global variable var0 ,global _localtime,global var0
use the global variables _mtimes and _win in this function.,use global variables var0 and var1 in var2 function.,"global _mtimes , _win","global var0 , var1"
use the global variable _serializers.,use global variable var0 ,global _serializers,global var0
use global variable _standard_context_processors.,use global variable var0 ,global _standard_context_processors,global var0
use global variable _supported.,use global variable var0 ,global _supported,global var0
use global variable _translations.,use global variable var0 ,global _translations,global var0
use global variable invalid_var_format_string.,use global variable var0 ,global invalid_var_format_string,global var0
use global variable template_source_loaders.,use global variable var0 ,global template_source_loaders,global var0
use global variable templatetags_modules.,use global variable var0 ,global templatetags_modules,global var0
"get the value under the settings.__module__ key of the sys.modules dictionary, use its __file__ field as an argument,","get value under var0 key of var1 dict, use its var2 field as argument,","globalpath = os . path . join ( os . path . dirname ( upath ( sys . modules [ settings . __module__ ] . __file__ ) ) , 'locale' )","globalpath = os . path . join ( os . path . dirname ( upath ( var1 [ var0 ] . var2 ) ) , 'locale' )"
"got_request_exception is a instance of a Signal class, created with an argument providing_args as the list containing string 'request'.","var0 is instance of var1 class, created with argument var2 as list containing string var4.",got_request_exception = Signal ( providing_args = [ 'request' ] ),var0 = var1 ( var2 = [ var4 ] )
substitute loader.graph for graph.,substitute var0 for graph.,graph = loader . graph,graph = var0
"groupid is a string ""t%d"" formated with tok.id.",var0 is string var1 formated with var2 ,groupid = 't%d' % tok . id,var0 = 't%d' % var2
append ext to guessed_filename.,append var0 to var1 ,guessed_filename += ext,var1 += var0
"get the value under the 'filename' key of the params dictionary, if the key exists substitute it for guessed_filename,","get value under var0 key of var1 dict, if key exists substitute it for var2 ",guessed_filename = params . get ( 'filename' ) or used_name,var2 = var1 . get ( var0 ) or used_name
substitute used_name for guessed_filename.,substitute var0 for var1 ,guessed_filename = used_name,var1 = var0
"join tempdir and guessed_filename into a file path, substitute it for guessed_path.","join var0 and var1 into file path, substitute it for var2 ","guessed_path = path . join ( tempdir , guessed_filename )","var2 = path . join ( var0 , var1 )"
"covert to string value under the 'unique_id_is_permalink' key of the item dictionary, convert it to lowercase,","covert to string value under var0 key of item dict, convert it to lowercase,",guid_attrs [ 'isPermaLink' ] = str ( item [ 'unique_id_is_permalink' ] ) . lower ( ),guid_attrs [ 'isPermaLink' ] = str ( item [ var0 ] ) . lower ( )
guid_attrs is an empty dictionary.,var0 is empty dict.,guid_attrs = { },var0 = { }
h is the sum of y and x modulo 128,h is sum of y and x var0 128,h = ( y + x ) % 128,h = ( y + x ) % 128
h is the sum of y and x modulo 2,h is sum of y and x var0 2,h = ( y + x ) % 2,h = ( y + x ) % 2
h is the sum of y and z modulo 256,h is sum of y and z var0 256,h = ( y + z ) % 256,h = ( y + z ) % 256
"and args, respectively.   call the method handle_default_options with an argument options.",and var0 respectively var1 call method var2 with argument options.,handle_default_options ( options ),var2 ( options )
call the function handle_default_options with an argument options.,call function var0 with argument options.,handle_default_options ( options ),var0 ( options )
call the function handle_m2m with an argument relobj.,call function var0 with argument var1 ,handle_m2m ( relobj ),var0 ( var1 )
"call the method handler.addQuickElement with 2 arguments: string 'published' and result of the function rfc3339_date,",call method handler var1 with 2 arguments: string var2 and result of function var3 ,"handler . addQuickElement ( 'published' , rfc3339_date ( item [ 'pubdate' ] ) )","handler . var1 ( var2 , var3 ( item [ 'pubdate' ] ) )"
"call the method handler.addQuickElement with 2 arguments: string 'updated' and result of the function rfc3339_date,",call method handler var1 with 2 arguments: string var2 and result of function var3 ,"handler . addQuickElement ( 'updated' , rfc3339_date ( item [ 'updateddate' ] ) )","handler . var1 ( var2 , var3 ( item [ 'updateddate' ] ) )"
"call the method handler.addQuickElement with 3 arguments: string 'atom:link', None and dictionary with 2 entries: 'self' for 'rel',","call method handler var1 with 3 arguments: string var2 var3 and dict with 2 entries: var4 for var5,","handler . addQuickElement ( 'atom:link' , None , { 'rel' : 'self' , 'href' : self . feed [ 'feed_url' ] } )","handler . var1 ( var2 , var3 , { 'rel' : 'self' , 'href' : self . feed [ 'feed_url' ] } )"
"call the method handler.addQuickElement with an argument string ""author"", ""%s (%s)"",","call method handler var1 with argument string var2, var3,","handler . addQuickElement ( 'author' , '%s (%s)' % ( item [ 'author_email' ] , item [ 'author_name' ] ) )","handler . var1 ( 'author' , '%s(var4)' % ( item [ 'author_email' ] , item [ 'author_name' ] ) )"
call the method handler.addQuickElement with 2 arguments: string 'author' and value under the 'author_email' key of the item dictionary.,call method handler var1 with 2 arguments: string var2 and value under var3 key of item dict.,"handler . addQuickElement ( 'author' , item [ 'author_email' ] )","handler . var1 ( var2 , item [ 'author_email' ] )"
"call the method handler.addQuickElement with 3 arguments: string 'category', an empty string and a dictionary with an entry:","call method handler var1 with 3 arguments: string var2, empty string and dict with entry:","handler . addQuickElement ( 'category' , '' , { 'term' : cat } )","handler . var1 ( var2 , '' , { 'term' : cat } )"
"call the method handler.addQuickElement with 3 arguments: string 'link', an empty string and a dictionary with an entry:","call method handler var1 with 3 arguments: string var2, empty string and dict with entry:","handler . addQuickElement ( 'category' , '' , { 'term' : cat } )","handler . var1 ( 'category' , '' , { 'term' : cat } )"
"call the method handler.addQuickElement with 2 arguments: string ""category"" and cat.",call method handler var1 with 2 arguments: string var2 and cat.,"handler . addQuickElement ( 'category' , cat )","handler . var1 ( 'category' , cat )"
call the method handler.addQuickElement with 2 arguments: string 'category' and cat.,call method handler var1 with 2 arguments: string var2 and cat.,"handler . addQuickElement ( 'category' , cat )","handler . var1 ( var2 , cat )"
call the method handler.addQuickElement with 2 arguments: string 'comments' and value under the 'comments' key of the item dictionary.,call method handler var1 with 2 arguments: string var2 and value under var2 key of item dict.,"handler . addQuickElement ( 'comments' , item [ 'comments' ] )","handler . var1 ( var2 , item [ var2 ] )"
call the method handler.addQuickElement with 2 arguments: string 'copyright' and value under the 'feed_copyright' key of the self.feed dictionary.,call method handler var1 with 2 arguments: string var2 and value under var3 key of var6 dict.,"handler . addQuickElement ( 'copyright' , self . feed [ 'feed_copyright' ] )","handler . var1 ( var2 , var6 [ 'feed_copyright' ] )"
"call the method handler.addQuickElement with 3 arguments: string 'dc:creator',","call method handler var1 with 3 arguments: string var2,","handler . addQuickElement ( 'dc:creator' , item [ 'author_name' ] , { 'xmlns:dc' : 'http://purl.org/dc/elements/1.1/' } )","handler . var1 ( var2 , item [ 'author_name' ] , { 'xmlns:dc' : 'http://purl.org/dc/elements/1.1/' } )"
call the method handler.addQuickElement with 2 arguments: string 'description' and value under the 'description' key of item dictionary.,call method handler var1 with 2 arguments: string var2 and value under var2 key of item dict.,"handler . addQuickElement ( 'description' , item [ 'description' ] )","handler . var1 ( var2 , item [ var2 ] )"
call the method handler.addQuickElement with 2 arguments: string 'description' and value under the 'description' key of the item dictionary.,call method handler var1 with 2 arguments: string var2 and value under var2 key of item dict.,"handler . addQuickElement ( 'description' , item [ 'description' ] )","handler . var1 ( var2 , item [ var2 ] )"
call the method handler.addQuickElement with 2 arguments: string 'description' and value under the 'description' key of the self.feed dictionary.,call method handler var1 with 2 arguments: string var2 and value under var2 key of var4 dict.,"handler . addQuickElement ( 'description' , self . feed [ 'description' ] )","handler . var1 ( var2 , var4 [ var2 ] )"
call the method handler.addQuickElement with 2 arguments: string 'email' and value under the 'author_email' key of the item dictionary.,call method handler var1 with 2 arguments: string var2 and value under var3 key of item dict.,"handler . addQuickElement ( 'email' , item [ 'author_email' ] )","handler . var1 ( var2 , item [ 'author_email' ] )"
call the method handler.addQuickElement with 2 arguments: string 'email' and value under the 'author_email' key of the self.feed dictionary.,call method handler var1 with 2 arguments: string var2 and value under var3 key of var6 dict.,"handler . addQuickElement ( 'email' , self . feed [ 'author_email' ] )","handler . var1 ( var2 , var6 [ 'author_email' ] )"
"call the method handler.addQuickElement with 3 arguments: string 'title', an empty string and a dictionary with 3 entries:","call method handler var1 with 3 arguments: string var2, empty string and dict with 3 entries:","handler . addQuickElement ( 'enclosure' , '' , { 'url' : item [ 'enclosure' ] . url , 'length' : item [ 'enclosure' ] . length , 'type' : item [ 'enclosure' ] . mime_type } )","handler . var1 ( 'enclosure' , '' , { 'url' : item [ 'enclosure' ] . url , 'length' : item [ 'enclosure' ] . length , 'type' : item [ 'enclosure' ] . mime_type } )"
"substitute the result for value under the 'isPermaLink' key of the guid_attrs dictionary.   call the method handler.addQuickElement with 3 arguments: string 'guid', value under the 'unique_id' key of the item dictionary,","substitute result for value under var0 key of var1 dict var4 call method handler var6 with 3 arguments: string var7, value under var8 key of item dict,","handler . addQuickElement ( 'guid' , item [ 'unique_id' ] , guid_attrs )","handler . var6 ( var7 , item [ 'unique_id' ] , var1 )"
self' for 'rel' and value under the 'feed_url' key of self.feed dictionary for 'href'.   call the method handler.addQuickElement with 2 arguments: string 'title' and value under the 'title' key of the self.feed dictionary.,selfvar0relvar2feed_urlvar6hrefvar10titlevar2title' key of var7 dict.,"handler . addQuickElement ( 'id' , self . feed [ 'id' ] )","handler . var13 ( 'id' , var7 [ 'id' ] )"
call the method handler.addQuickElement with 2 arguments: string 'id' and unique_id.,call method handler var1 with 2 arguments: string var2 and var3 ,"handler . addQuickElement ( 'id' , unique_id )","handler . var1 ( var2 , var3 )"
call the method handler.addQuickElement with 2 arguments: string 'language' and value under the 'language' key of the self.feed dictionary.,call method handler var1 with 2 arguments: string var2 and value under var2 key of var4 dict.,"handler . addQuickElement ( 'language' , self . feed [ 'language' ] )","handler . var1 ( var2 , var4 [ var2 ] )"
"call the method handler.addQuickElement with 2 arguments: string 'lastBuildDate' and result of the function rfc2822_date,",call method handler var1 with 2 arguments: string var2 and result of function var3 ,"handler . addQuickElement ( 'lastBuildDate' , rfc2822_date ( self . latest_post_date ( ) ) )","handler . var1 ( var2 , var3 ( self . latest_post_date ( ) ) )"
"call the method handler.addQuickElement with 3 arguments: string 'link', an empty string and a dictionary with 4 entries:","call method handler var1 with 3 arguments: string var2, empty string and dict with 4 entries:","handler . addQuickElement ( 'link' , '' , { 'rel' : 'enclosure' , 'href' : item [ 'enclosure' ] . url , 'length' : item [ 'enclosure' ] . length , 'type' : item [ 'enclosure' ] . mime_type } )","handler . var1 ( var2 , '' , { 'rel' : 'enclosure' , 'href' : item [ 'enclosure' ] . url , 'length' : item [ 'enclosure' ] . length , 'type' : item [ 'enclosure' ] . mime_type } )"
"call the method handler.addQuickElement with 3 arguments: string 'link', an empty string and a dictionary with 2 entries:","call method handler var1 with 3 arguments: string var2, empty string and dict with 2 entries:","handler . addQuickElement ( 'link' , '' , { 'href' : item [ 'link' ] , 'rel' : 'alternate' } )","handler . var1 ( var2 , '' , { 'href' : item [ var2 ] , 'rel' : 'alternate' } )"
"call the method handler.addQuickElement with 3 arguments: string 'link', an empty string and a dictionary with 2 entries:","call method handler var1 with 3 arguments: string var2, empty string and dict with 2 entries:","handler . addQuickElement ( 'link' , '' , { 'rel' : 'alternate' , 'href' : self . feed [ 'link' ] } )","handler . var1 ( var2 , '' , { 'rel' : 'alternate' , 'href' : self . feed [ var2 ] } )"
"call the method handler.addQuickElement with 3 arguments: string 'link', an empty string and a dictionary with 2 entries:","call method handler var1 with 3 arguments: string var2, empty string and dict with 2 entries:","handler . addQuickElement ( 'link' , '' , { 'rel' : 'self' , 'href' : self . feed [ 'feed_url' ] } )","handler . var1 ( var2 , '' , { 'rel' : 'self' , 'href' : self . feed [ 'feed_url' ] } )"
call the method handler.addQuickElement with 2 arguments: string 'link' and value under the 'link' key of the item dictionary.,call method handler var1 with 2 arguments: string var2 and value under var2 key of item dict.,"handler . addQuickElement ( 'link' , item [ 'link' ] )","handler . var1 ( var2 , item [ var2 ] )"
call the method handler.addQuickElement with 2 arguments: string 'link' and value under the 'link' key of the self.feed dictionary.,call method handler var1 with 2 arguments: string var2 and value under var2 key of var4 dict.,"handler . addQuickElement ( 'link' , self . feed [ 'link' ] )","handler . var1 ( var2 , var4 [ var2 ] )"
call the method handler.addQuickElement with 2 arguments: string 'name' and value under the 'author_name' key of the item dictionary.,call method handler var1 with 2 arguments: string var2 and value under var3 key of item dict.,"handler . addQuickElement ( 'name' , item [ 'author_name' ] )","handler . var1 ( var2 , item [ 'author_name' ] )"
call the method handler.addQuickElement with 2 arguments: string 'name' and value under the 'author_name' key of the self.feed dictionary.,call method handler var1 with 2 arguments: string var2 and value under var3 key of var6 dict.,"handler . addQuickElement ( 'name' , self . feed [ 'author_name' ] )","handler . var1 ( var2 , var6 [ 'author_name' ] )"
"call the method handler.addQuickElement with 2 arguments: string 'pubDate' and result of the function rfc2822_date,",call method handler var1 with 2 arguments: string var2 and result of function var3 ,"handler . addQuickElement ( 'pubDate' , rfc2822_date ( item [ 'pubdate' ] ) )","handler . var1 ( var2 , var3 ( item [ 'pubdate' ] ) )"
call the method handler.addQuickElement with 2 arguments: string 'rights' and value under the 'item_copyright' key of the item dictionary.,call method handler var1 with 2 arguments: string var2 and value under var3 key of item dict.,"handler . addQuickElement ( 'rights' , item [ 'item_copyright' ] )","handler . var1 ( var2 , item [ 'item_copyright' ] )"
call the method handler.addQuickElement with 2 arguments: string 'rights' and value under the 'feed_copyright' key of the self.feed dictionary.,call method handler var1 with 2 arguments: string var2 and value under var3 key of var6 dict.,"handler . addQuickElement ( 'rights' , self . feed [ 'feed_copyright' ] )","handler . var1 ( var2 , var6 [ 'feed_copyright' ] )"
call the method handler.addQuickElement with 2 arguments: string 'subtitle' and value under the 'subtitle' key of the self.feed dictionary.,call method handler var1 with 2 arguments: string var2 and value under var2 key of var4 dict.,"handler . addQuickElement ( 'subtitle' , self . feed [ 'subtitle' ] )","handler . var1 ( var2 , var4 [ var2 ] )"
"call the method handler.addQuickElement with 3 arguments: string 'summary', value under the 'description' key of item dictionary,","call method handler var1 with 3 arguments: string var2, value under var3 key of item dict,","handler . addQuickElement ( 'summary' , item [ 'description' ] , { 'type' : 'html' } )","handler . var1 ( var2 , item [ 'description' ] , { 'type' : 'html' } )"
call the method handler.addQuickElement with 2 arguments: string 'title' and value under the 'title' key of the item dictionary.,call method handler var1 with 2 arguments: string var2 and value under var2 key of item dict.,"handler . addQuickElement ( 'title' , item [ 'title' ] )","handler . var1 ( var2 , item [ var2 ] )"
call the method handler.addQuickElement with 2 arguments: string 'title' and value under the 'title' key of the self.feed dictionary.,call method handler var1 with 2 arguments: string var2 and value under var2 key of var4 dict.,"handler . addQuickElement ( 'title' , self . feed [ 'title' ] )","handler . var1 ( var2 , var4 [ var2 ] )"
call the method handler.addQuickElement with 2 arguments: string 'ttl' and value under the 'ttl' key of the item dictionary.,call method handler var1 with 2 arguments: string var2 and value under var2 key of item dict.,"handler . addQuickElement ( 'ttl' , item [ 'ttl' ] )","handler . var1 ( var2 , item [ var2 ] )"
call the method handler.addQuickElement with 2 arguments: string 'ttl' and value under the 'ttl' key of the self.feed dictionary.,call method handler var1 with 2 arguments: string var2 and value under var2 key of var4 dict.,"handler . addQuickElement ( 'ttl' , self . feed [ 'ttl' ] )","handler . var1 ( var2 , var4 [ var2 ] )"
"call the method handler.addQuickElement with 2 arguments: string 'updated' and result of the function rfc3339_date,",call method handler var1 with 2 arguments: string var2 and result of function var3 ,"handler . addQuickElement ( 'updated' , rfc3339_date ( self . latest_post_date ( ) ) )","handler . var1 ( var2 , var3 ( self . latest_post_date ( ) ) )"
call the method handler.addQuickElement with 2 arguments: string 'uri' and value under the 'author_link' key of the item dictionary.,call method handler var1 with 2 arguments: string var2 and value under var3 key of item dict.,"handler . addQuickElement ( 'uri' , item [ 'author_link' ] )","handler . var1 ( var2 , item [ 'author_link' ] )"
call the method handler.addQuickElement with 2 arguments: string 'uri' and value under the 'author_link' key of the self.feed dictionary.,call method handler var1 with 2 arguments: string var2 and value under var3 key of var6 dict.,"handler . addQuickElement ( 'uri' , self . feed [ 'author_link' ] )","handler . var1 ( var2 , var6 [ 'author_link' ] )"
call the method handler.endElement with an argument string 'author'.,call method handler var1 with argument string var2.,handler . endElement ( 'author' ),handler . var1 ( var2 )
call the method handler.endElement with an argument string 'channel'.,call method handler var1 with argument string var2.,handler . endElement ( 'channel' ),handler . var1 ( var2 )
call the method handler.endElement with an argument string 'entry'.,call method handler var1 with argument string var2.,handler . endElement ( 'entry' ),handler . var1 ( var2 )
call the method handler.endElement with an argument string 'feed'.,call method handler var1 with argument string var2.,handler . endElement ( 'feed' ),handler . var1 ( var2 )
call the method handler.endElement with an argument string 'item'.,call method handler var1 with argument string var2.,handler . endElement ( 'item' ),handler . var1 ( var2 )
call the method handler.endElement with an argument string 'rss'.,call method handler var1 with argument string var2.,handler . endElement ( 'rss' ),handler . var1 ( var2 )
call the method handler.file.close.,call method var0 ,handler . file . close ( ),var0 ( )
substitute name for handler.name.,substitute name for var0 ,handler . name = name,var0 = name
"call the method handler.new_file with 6 arguments: field_name, file_name, content_type, content_length, charset and  content_type_extra.",call method handler var2 with 6 arguments: var3 var5 var6 var8 var10 and var11var0,"handler . new_file ( field_name , file_name , content_type , content_length , charset , content_type_extra )","handler . var2 ( var3 , var0var5 , var0var6 , var0var8 , var0var10 , var0var6_extra )"
"call the function _checkLevel with an argument level, use the result as an argument for the call to the function handler.setLevel.","call function var0 with argument level, use result as argument for call to function handler var2 ",handler . setLevel ( _checkLevel ( level ) ),handler . var2 ( var0 ( level ) )
call the method handler.startDocument.,call method handler var1 ,handler . startDocument ( ),handler . var1 ( )
call the method handler.startElement with 2 arguments: string 'feed' and result of the method self.root_attributes.,call method handler var1 with 2 arguments: string var2 and result of method self var4 ,"handler . startElement ( 'feed' , self . root_attributes ( ) )","handler . var1 ( var2 , self . var4 ( ) )"
"call the method handler.startElement with 2 arguments: string ""item"" and result of the method self.item_attributes with an argument item.",call method handler var1 with 2 arguments: string var2 and result of method self var4 with argument item.,"handler . startElement ( 'item' , self . item_attributes ( item ) )","handler . var1 ( 'item' , self . var4 ( item ) )"
call the method handler.startElement with 2 arguments: string 'author' and an empty dictionary.,call method handler var1 with 2 arguments: string var2 and empty dict.,"handler . startElement ( 'author' , { } )","handler . var1 ( var2 , { } )"
call the method handler.endElement with 2 arguments: string 'author' and an empty dictionary.,call method handler var1 with 2 arguments: string var2 and empty dict.,"handler . startElement ( 'author' , { } )","handler . startElement ( var2 , { } )"
"call the method handler.startElement with 2 arguments: string ""channel"" and result of the method self.root_attributes.",call method handler var1 with 2 arguments: string var2 and result of method self var4 ,"handler . startElement ( 'channel' , self . root_attributes ( ) )","handler . var1 ( 'channel' , self . var4 ( ) )"
"call the method handler.startElement with 2 arguments: string 'entry' and result of the function self.item_attributes,",call method handler var1 with 2 arguments: string var2 and result of function self var4 ,"handler . startElement ( 'entry' , self . item_attributes ( item ) )","handler . var1 ( var2 , self . var4 ( item ) )"
"call the method handler.startElement with 2 arguments: string ""rss"" and result of the method self.rss_attributes.",call method handler var1 with 2 arguments: string var2 and result of method self var4 ,"handler . startElement ( 'rss' , self . rss_attributes ( ) )","handler . var1 ( 'rss' , self . var4 ( ) )"
substitute value under name key of logging._handlers dictionary for handler.,substitute value under name key of var0 dict for handler.,handler = logging . _handlers [ name ],handler = var0 [ name ]
"call the method logging.StreamHandler, substitute the result for handler.",call method logging var0 substitute result for handler.,handler = logging . StreamHandler ( ),handler = logging . var0 ( )
"call the method self.configure_handler with an argument value under name key of handlers dictionary, substitute the result for handler.","call method self var1 with argument value under name key of handlers dict, substitute result for handler.",handler = self . configure_handler ( handlers [ name ] ),handler = self . var1 ( handlers [ name ] )
"call the method self.get_handler with 2 arguments unpacked list args and unpacked dictionary options, substitute the result for handler.","call method self var1 with 2 arguments unpacked list var2 and unpacked dict options, substitute result for handler.","handler = self . get_handler ( * args , ** options )","handler = self . var1 ( * var2 , ** options )"
"handler is an instance of SimplerXMLGenerator class, created with 2 arguments: outfile and encoding.","handler is instance of var0 class, created with 2 arguments: var1 and encoding.","handler = SimplerXMLGenerator ( outfile , encoding )","handler = var0 ( var1 , encoding )"
substitute value under name key of handlers dictionary for handler_config.,substitute value under name key of handlers dict for var0 ,handler_config = handlers [ name ],var0 = handlers [ name ]
substitute handler for value under name key of handlers dictionary.,substitute handler for value under name key of handlers dict.,handlers [ name ] = handler,handlers [ name ] = handler
"get config dictionary element under 'handlers' key, if it exists substitute it for handlers, if not, handlers is EMPTY_DICT.","get var0 dict element under var1 key, if it exists substitute it for handlers, if not, handlers is var2 ","handlers = config . get ( 'handlers' , EMPTY_DICT )","handlers = var0 . get ( var1 , var2 )"
"get value under the 'handlers' key of the config dictioanry, if it exists substitute it for handlers, if not handlers is None.","get value under var0 key of var1 var2 if it exists substitute it for handlers, if not handlers is var3 ","handlers = config . get ( 'handlers' , None )","handlers = var1 . get ( var0 , var3 )"
substitute self._upload_handlers for handlers.,substitute var0 for handlers.,handlers = self . _upload_handlers,handlers = var0
"raw string '(?:<br clear=""all"">|<i><\/i>|<b><\/b>|<em><\/em>|<strong><\/strong>|<\/?smallcaps>|<\/?uppercase>)' and re.IGNORECASE,   substitute the result for html_gunk_re.   call the function re.compile with 2 arguments: raw string '((?:<p>(?:%s).*?[a-zA-Z].*?</p>\s*)+)',","raw string var0 and re var1 substitute result for var5 call function var7 with 2 arguments: raw string var8,","hard_coded_bullets_re = re . compile ( r'((?:<p>(?:%s).*?[a-zA-Z].*?</p>\s*)+)' % '|' . join ( re . escape ( x ) for x in DOTS ) , re . DOTALL )","hard_coded_bullets_re = var7 ( rvar8 % '|' . join ( re . escape ( x ) for x in DOTS ) , re . DOTALL )"
has_bz2 is boolean False.,has_bz2 is boolean var0 ,has_bz2 = False,has_bz2 = var0
has_bz2 is boolean True.,has_bz2 is boolean var0 ,has_bz2 = True,has_bz2 = var0
"if self has an 'requires_system_checks' attribute, has_new_option is boolean True, otherwise it is boolean False.",if self has var0 attribute var1 is boolean var3 otherwise it is boolean var4 ,"has_new_option = hasattr ( self , 'requires_system_checks' )","var1 = hasattr ( self , var0 )"
"if self has an 'requires_model_validation' attribute, has_old_option is boolean True, otherwise it is boolean False.",if self has var0 attribute var1 is boolean var3 otherwise it is boolean var4 ,"has_old_option = hasattr ( self , 'requires_model_validation' )","var1 = hasattr ( self , var0 )"
"assign the settings.SECURE_PROXY_SSL_HEADER to header and value, respectively.","assign settings var0 to header and value, respectively.","header , value = settings . SECURE_PROXY_SSL_HEADER","header , value = settings . var0"
substitute first header_end elements of chunk list for header.,substitute first var0 elements of chunk list for header.,header = chunk [ : header_end ],header = chunk [ : var0 ]
"convert string header to uppercase and replace all occurrences of '-' with '_', substitute it for header.","convert string header to uppercase and replace all occurrences of var0 with var1, substitute it for header.","header = header . upper ( ) . replace ( '-' , '_' )","header = header . upper ( ) . replace ( var0 , '_' )"
"call the method self._convert_to_charset with arguments: header and string 'ascii', substitute the result for header.","call method var0 with arguments: header and string var1, substitute result for header.","header = self . _convert_to_charset ( header , 'ascii' )","header = var0 ( header , var1 )"
"call the method chunk.find with an argument bytes string '\r\n\r\n', substitute the result for header_end.","call method var0 with argument bytes string var1, substitute result for var2 ",header_end = chunk . find ( b'\r\n\r\n' ),var2 = var0 ( b'\r\n\r\n' )
"call the key.lower method for every key in self.extra_headers, join the results into a header_names.",call var0 method for every key in self var2 join results into var3 ,header_names = [ key . lower ( ) for key in self . extra_headers ],var3 = [ key . lower ( ) for key in self . var2 ]
"append header to the string 'HTTP_', append the result to the list headerlist.","append header to string var0, append result to list var1 ",headerlist . append ( 'HTTP_' + header ),var1 . append ( var0 + header )
call method sort on the headerlist.,call method sort on var0 ,headerlist . sort ( ),var0 . sort ( )
headerlist is an empty list.,var0 is empty list.,headerlist = [ ],var0 = [ ]
"get the value of dictionary cache under the key cache_key, if key is not available return None, substitute it for headerlist.",get value of dict cache under key var0 if key is not available return var2 substitute it for var3 ,"headerlist = cache . get ( cache_key , None )","var3 = cache . get ( var0 , var2 )"
"for every key and value in return value of the self._headers.values method, call the function to_bytes with 2 arguments: key,","for every key and value in return value of var0 method, call function var1 with 2 arguments: key,","headers = [ ( b': ' . join ( [ to_bytes ( key , 'ascii' ) , to_bytes ( value , 'latin-1' ) ] ) ) for key , value in self . _headers . values ( ) ]","headers = [ b': ' . join ( [ var1 ( key , 'ascii' ) , var1 ( value , 'latin-1' ) ] ) for key , value in var0 ( ) ]"
"get property attribute _get_height, and substitute it for width.",get property attribute var0 and substitute it for width.,height = property ( _get_height ),height = property ( var0 )
help is an empty string.,help is empty string.,help = '',help = ''
help is string 'Compiles .po files to .mo files for use with builtin gettext support.'.,help is string var0.,help = 'Compiles .po files to .mo files for use with builtin gettext support.',help = 'Compiles.po files to.mo files for use with builtin gettext support.'
"concatenate CheckCommand.help to string 'Deprecated. Use ""check"" command instead. ', substitute it for help.","concatenate var0 help to string var2, substitute it for help.",help = 'Deprecated. Use 'check' command instead. ' + CheckCommand . help,help = 'Deprecated.Use 'check' command instead.' + var0.help
help is a string 'Discover and run tests in the specified modules or the current directory.'.,help is string var0.,help = 'Discover and run tests in the specified modules or the current directory.',help = var0
help is an string 'Installs the named fixture(s) in the database.'.,help is string var0.,help = 'Installs the named fixture(s) in the database.',help = var0
help is a string 'Prints the SQL statements for resetting sequences for the given app name(s).'.,help is string var0.,help = 'Prints the SQL statements for resetting sequences for the given app name(s).',help = var0
help is a string 'Runs a development server with data from the given fixture(s).'.,help is string var0.,help = 'Runs a development server with data from the given fixture(s).',help = var0
"help is a string ""Checks the entire Django project for potential problems."".",help is string var0.,help = 'Checks the entire Django project for potential problems.',help = 'Checks the entire Django project for potential problems.'
"help is a string ""Creates new migration(s) for apps."".",help is string var0.,help = 'Creates new migration(s) for apps.',help = 'Creates new migration(s) for apps.'
"help is an string ""Creates the tables needed to use the SQL cache backend."".",help is string var0.,help = 'Creates the tables needed to use the SQL cache backend.',help = 'Creates the tables needed to use the SQL cache backend.'
"help is a string ""Deprecated - use 'migrate' instead."".",help is string var0.,help = 'Deprecated - use 'migrate' instead.',help = 'Deprecated - use 'migrate' instead.'
"help is an string ""Introspects the database tables in the given database and outputs a Django model module."".",help is string var0.,help = 'Introspects the database tables in the given database and outputs a Django model module.',help = ( 'Introspects the database tables in the given database and outputs a Django model module.' )
"help is a string ""Prints the CREATE INDEX SQL statements for the given model module name(s)."".",help is string var0.,help = 'Prints the CREATE INDEX SQL statements for the given model module name(s).',help = ( 'Prints the CREATE INDEX SQL statements for the given model module name(s).' )
"help is a string ""Prints the CREATE TABLE SQL statements for the given app name(s)."".",help is string var0.,help = 'Prints the CREATE TABLE SQL statements for the given app name(s).',help = 'Prints the CREATE TABLE SQL statements for the given app name(s).'
"help is a string ""Prints the CREATE TABLE, custom SQL and CREATE INDEX SQL statements for the given model module name(s)."".",help is string var0.,"help = 'Prints the CREATE TABLE, custom SQL and CREATE INDEX SQL statements for the given model module name(s).'","help = ( 'Prints the CREATE TABLE, custom SQL and CREATE INDEX SQL statements for the given model module name(s).' )"
"help is a string, ""Prints the custom table modifying SQL statements for the given app name(s)."".","help is string, var0.",help = 'Prints the custom table modifying SQL statements for the given app name(s).',help = ( 'Prints the custom table modifying SQL statements for the given app name(s).' )
"help is an string ""Prints the DROP INDEX SQL statements for the given model module name(s)."".",help is string var0.,help = 'Prints the DROP INDEX SQL statements for the given model module name(s).',help = ( 'Prints the DROP INDEX SQL statements for the given model module name(s).' )
"help is a string ""Prints the DROP TABLE SQL statements for the given app name(s)."".",help is string var0.,help = 'Prints the DROP TABLE SQL statements for the given app name(s).',help = 'Prints the DROP TABLE SQL statements for the given app name(s).'
"help is a string ""Prints the SQL statements for the named migration.""",help is string var0,help = 'Prints the SQL statements for the named migration.',help = 'Prints the SQL statements for the named migration.'
"help is a string, containing ""Returns a list of the SQL statements required to return all tables in the database to the state they were in just after they were installed."".","help is string, containing var0.",help = 'Returns a list of the SQL statements required to return all tables in the database to the state they were in just after they were installed.',help = ( 'Returns a list of the SQL statements required to return all tables in the database to the state they were in just after they were installed.' )
"help is a string ""Runs a Python interactive interpreter. Tries to use IPython or bpython, if one of them is available."".",help is string var0.,"help = 'Runs a Python interactive interpreter. Tries to use IPython or bpython, if one of them is available.'","help = ( 'Runs a Python interactive interpreter.Tries to use IPython or bpython, if one of them is available.' )"
"help is a string ""Runs this project as a FastCGI application. Requires flup."".",help is string var0.,help = 'Runs this project as a FastCGI application. Requires flup.',help = 'Runs this project as a FastCGI application.Requires flup.'
"help is a string ""Squashes an existing set of migrations (from first until specified) into a single new one."".",help is string var0.,help = 'Squashes an existing set of migrations (from first until specified) into a single new one.',help = ( 'Squashes an existing set of migrations(from first until specified) into a single new one.' )
"help is a string ""Starts a lightweight Web server for development."".",help is string var0.,help = 'Starts a lightweight Web server for development.',help = 'Starts a lightweight Web server for development.'
"help is a string ""Updates database schema. Manages both apps with migrations and those without."".",help is string var0.,help = 'Updates database schema. Manages both apps with migrations and those without.',help = ( 'Updates database schema.Manages both apps with migrations and those without.' )
"help is a tuple containing a string: 'Removes ALL DATA from the database, including data added during '",help is tuple containing string: var0,"help = ( 'Removes ALL DATA from the database, including data added during '  'migrations. Unmigrated apps will also have their initial_data '  'fixture reloaded. Does not achieve a 'fresh install' state.' )",help =(var0  'migrations.Unmigrated apps will also have their initial_data '  'fixture reloaded.Does not achieve a 'fresh install' state.')
"help is a tuple containing a string ""Creates a Django app directory structure for the given app name in the current directory or optionally in the given directory."".",help is tuple containing string var0.,help = ( 'Creates a Django app directory structure for the given app ' 'name in the current directory or optionally in the given ' 'directory.' ),help = ( 'Creates a Django app directory structure for the given app name in the current directory or optionally in the given directory.' )
"help is a tuple containing string ""Creates a Django project directory structure for the given """,help is tuple containing string var0,help = ( 'Creates a Django project directory structure for the given ' 'project name in the current directory or optionally in the ' 'given directory.' ),help = ( 'Creates a Django project directory structure for the given project name in the current directory or optionally in the given directory.' )
"help is a tuple containing a string ""Output the contents of the database as a fixture of the given """,help is tuple containing string var0,help = ( 'Output the contents of the database as a fixture of the given '  'format (using each model's default manager unless --all is '  'specified).' ),help =('Output the contents of the database as a fixture of the given '  'format(using each model's default manager unless --all is '  'specified).')
"help is a string ""Runs over the entire source tree of the current directory and """,help is string var0,"help = ( 'Runs over the entire source tree of the current directory and ' 'pulls out all strings marked for translation. It creates (or updates) a message ' 'file in the conf/locale (in the django tree) or locale (for projects and ' 'applications) directory.\n\nYou must run this command with one of either the ' '--locale, --exclude or --all options.' )","help = '''Runs over the entire source tree of the current directory and pulls out all strings marked for translation.It creates(or updates) a message file in the conf/locale(in the django tree) or locale(for projects and applications) directory.You must run this command with one of either the --locale, --exclude or --all options.'''"
"help is a tuple containing a string ""Runs the command-line client for specified database, or the default database if none is provided."".",help is tuple containing string var0.,"help = ( 'Runs the command-line client for specified database, or the ' 'default database if none is provided.' )","help = ( 'Runs the command-line client for specified database, or the default database if none is provided.' )"
label is an empty string.,label is empty string.,help_text = '',help_text = ''
"call the function force_text with an argument field.help_text, format help_text_html with it, substitute the result for help_text.","call function var0 with argument field var2 format var5 with it, substitute result for var2 ",help_text = help_text_html % force_text ( field . help_text ),var2 = var2_html % var0 ( field . var2 )
"hex_format_string is a string ""%%0%ix"" formated with hlen multiplied with integer 2.",var0 is string var1 formated with var2 multiplied with integer 2.,hex_format_string = '%%0%ix' % ( hlen * 2 ),var0 = '%%0%ix' % ( var2 * 2 )
"split ip_str by '::', substitute it for hextet.","split var0 by var2, substitute it for var3 ",hextet = ip_str . split ( '::' ),var3 = var0 . split ( var2 )
replace hextets list from the best_doublecolon_start index to best_doublecolon_end index with an empty string.,replace var0 list from var1 index to var2 index with empty string.,hextets [ best_doublecolon_start : best_doublecolon_end ] = [ '' ],var0 [ var1 : var2 ] = [ '' ]
value under the index key of the hextets dictionary is a string '0'.,value under index key of var0 dict is string var1.,hextets [ index ] = '0',var0 [ index ] = var1
"get the value under the index key of the hextets dictionary, remove the leading '0' characters,","get value under index key of var0 dict, remove leading var1 characters,",hextets [ index ] = hextets [ index ] . lstrip ( '0' ),var0 [ index ] = var0 [ index ] . lstrip ( var1 )
append an empty string to list hextets.,append empty string to list var0 ,hextets += [ '' ],var0 += [ '' ]
prepend an empty string to hextets list.,var0 empty string to var1 list.,hextets = [ '' ] + hextets,var1 = [ '' ] + var1
"split ip_str into parts by ':', substitute the result for hextets.","split var0 into parts by var2, substitute result for var3 ",hextets = ip_str . split ( ':' ),var3 = var0 . split ( var2 )
"split ip_str by ':', substitute the result for hextets.","split var0 by var2, substitute result for var3 ",hextets = ip_str . split ( ':' ),var3 = var0 . split ( var2 )
"call the function msvcrt.get_osfhandle with return value of the _fd(f) function as argument, substitute the result for hfile.","call the function msvcrt.get_osfhandle with return value of the _fd(f) function as argument, substitute the result for hfile.",hfile = msvcrt . get_osfhandle ( _fd ( f ) ),hfile = msvcrt . get_osfhandle ( _fd ( f ) )
"divide absolute offset by module 60, use the result to format string '%02d%02d', substitute it for hhmm.","divide absolute offset by module 60, use result to format string var0, substitute it for var1 ","hhmm = '%02d%02d' % divmod ( abs ( offset ) , 60 )","var1 = var0 % divmod ( abs ( offset ) , 60 )"
"and '%(error)s' is replaced with return value of the force_text function called with an argument e,   extend the top_errors with the result.   call the function six.text_type with an argument bf, append the result to hidden_fields.",and var0 is replaced with return value of var1 function called with argument e var3 extend var5 with result var3 call function six var7 with argument var8 append result to var9 ,hidden_fields . append ( six . text_type ( bf ) ),var9 . append ( six . var7 ( var8 ) )
"call the method field.hidden_widget, substitute the result for field.hidden_widget.",call method field var2 substitute result for field var2 ,hidden_widget = field . hidden_widget ( ),var2 = field . var2 ( )
substitute HiddenInput for hidden_widget.,substitute var0 for var1 ,hidden_widget = HiddenInput,var1 = var0
substitute MultipleHiddenInput for hidden_widget.,substitute var0 for var1 ,hidden_widget = MultipleHiddenInput,var1 = var0
substitute SplitHiddenDateTimeWidget for hidden_widget.,substitute var0 for var1 ,hidden_widget = SplitHiddenDateTimeWidget,var1 = var0
"if self.hint exists, replace '%s' in a string ""\n\tHINT: %s"" with value of self.hint, substitute it for hint, otherwise hint is an empty string.","if self.hint exists, replace '%s' in a string ""\n\tHINT: %s"" with value of self.hint, substitute it for hint, otherwise hint is an empty string.",hint = '\n\tHINT: %s' % self . hint if self . hint else '',hint = '\n\tHINT: %s' % self . hint if self . hint else ''
"HITS and MISSES are integer 0 and 1, respectively.","HITS and var0 are integer 0 and 1, respectively.","HITS , MISSES = 0 , 1","HITS , var0 = 0 , 1"
"get greater value between integer 1 and result of subtraction of self.orphans from self.count, substitute it for hits.",get greater value between integer 1 and result of subtraction of var0 from var1 substitute it for hits.,"hits = max ( 1 , self . count - self . orphans )","hits = max ( 1 , var1 - var0 )"
Convert the variable encoded to a hexadecimal and store it in the variable hopcode,Convert variable encoded to hexadecimal and store it in variable var0,hopcode = '%02x' % encoded,var0 = '%02x' % encoded
Convert x to a hexadecimal and store it in the variable hopcode,Convert x to hexadecimal and store it in variable var0,hopcode = '%02x' % x,var0 = '%02x' % x
Convert x to a hexadecimal and store in hopcode,Convert x to hexadecimal and store in var0,hopcode = '%02x' % x,var0 = '%02x' % x
convert host to lowercase.,convert host to lowercase.,host = host . lower ( ),host = host . lower ( )
"if host ends with '.', remove the last element from host.","if host ends with var0, remove last element from host.",host = host [ : - 1 ] if host . endswith ( '.' ) else host,host = host [ : - 1 ] if host . endswith ( var0 ) else host
"substitute the value under the 'HTTP_HOST' key of the self.META dictionary, substitute it for host.","substitute value under var0 key of self var1 dict, substitute it for host.",host = self . META [ 'HTTP_HOST' ],host = self . var1 [ var0 ]
"get the value under the 'HTTP_X_FORWARDED_HOST' key of the self.META dictionary, substitute the result for host.","get value under var0 key of self var1 dict, substitute result for host.",host = self . META [ 'HTTP_X_FORWARDED_HOST' ],host = self . var1 [ var0 ]
"substitute the value under the 'SERVER_NAME' key of the self.META dictionary, substitute it for host.","substitute value under var0 key of self var1 dict, substitute it for host.",host = self . META [ 'SERVER_NAME' ],host = self . var1 [ var0 ]
"compile the regex ""^([a-z0-9.-]+|\[[a-f0-9]*:[a-f0-9:]+\])(:\d+)?$"", substitute it for host_validation_re.","compile the regex ""^([a-z0-9.-]+|\[[a-f0-9]*:[a-f0-9:]+\])(:\d+)?$"", substitute it for host_validation_re.",host_validation_re = re . compile ( r'^([a-z0-9.-]+|\[[a-f0-9]*:[a-f0-9:]+\])(:\d+)?$' ),host_validation_re = re . compile ( r'^([a-z0-9.-]+|\[[a-f0-9]*:[a-f0-9:]+\])(:\d+)?$' )
"substitute the result for timezone.   divide timezone by integer 60, substitute the quotient of the division for hour and reminder for minute.","substitute result for var0 divide var0 by integer 60, substitute quotient of division for hour and reminder for minute.","hour , minute = divmod ( timezone , 60 )","hour , minute = divmod ( var0 , 60 )"
"and integer 60, substitute the result for timezone.   divide timezone by integer 60, substitute the quotient of the division for hour and reminder for minute.","and integer 60, substitute result for var0 divide var0 by integer 60, substitute quotient of division for hour and reminder for minute.","hour , minute = divmod ( timezone , 60 )","hour , minute = divmod ( var0 , 60 )"
"call the method m.group with an argument string 'hour', convert the result into a string, substitute it for hour.","call method var0 with argument string var1, convert result into string, substitute it for hour.",hour = int ( m . group ( 'hour' ) ),hour = int ( m . group ( var1 ) )
"substitute the resulting string for choices.   call the method self.create_select with 6 arguments: name, self.year_field, value, day_val, choices and self.day_none_value,","substitute resulting string for choices var0 call method self var2 with 6 arguments: name, self var4 value var5 choices and self var8 ","html [ 'day' ] = self . create_select ( name , self . day_field , value , day_val , choices , self . day_none_value )","html [ 'day' ] = self . var2 ( name , self . day_field , value , var5 , choices , self . var8 )"
"call the method self.create_select with 6 arguments: name, self.month_field, value, month_val, choices and self.month_none_value,","call method self var1 with 6 arguments: name, self var3 value var4 choices and self var6 ","html [ 'month' ] = self . create_select ( name , self . month_field , value , month_val , choices , self . month_none_value )","html [ 'month' ] = self . var1 ( name , self . var3 , value , var4 , choices , self . var6 )"
"call the method self.create_select with 6 arguments: name, self.year_field, value, year_val, choices and self.year_none_value,","call method self var1 with 6 arguments: name, self var3 value var4 choices and self var7 ","html [ 'year' ] = self . create_select ( name , self . year_field , value , year_val , choices , self . year_none_value )","html [ 'year' ] = self . var1 ( name , self . var3 , value , var4 , choices , self . var7 )"
"assign the result for year_val, month_val and day_val, respectively.   html is an empty dictionary.",assign result for var0 var1 and var2 respectively var4 html is empty dict.,html = { },html = { }
"call the function endtag_re.sub with 2 arguments: an empty string and html, substitute the result for html.","call function var0 sub with 2 arguments: empty string and html, substitute result for html.","html = endtag_re . sub ( '' , html )","html = var0 . sub ( '' , html )"
"call the function starttag_re.sub with 2 arguments: an empty string and html, substitute the result for html.","call function var0 sub with 2 arguments: empty string and html, substitute result for html.","html = starttag_re . sub ( '' , html )","html = var0 . sub ( '' , html )"
"replace ""%s"" from the string ' class=""%s""' with css_classes, substitute it for html_class_attr.",replace var0 from string ' class=var0' with var3 substitute it for var5 ,html_class_attr = ' class='%s'' % css_classes,var5 = ' var2'' % var3
html_class_attr is an empty string.,var0 is empty string.,html_class_attr = '',var0 = ''
call the function re.compile with 2 arguments:,call function var0 with 2 arguments:,"html_gunk_re = re . compile ( r'(?:<br clear='all'>|<i><\/i>|<b><\/b>|<em><\/em>|<strong><\/strong>|<\/?smallcaps>|<\/?uppercase>)' , re . IGNORECASE )","html_gunk_re = var0(r'(?:<br clear='all'>|<i><\/i>|<b><\/b>|<em><\/em>|<strong><\/strong>|<\/?smallcaps>|<\/?uppercase>)', re.IGNORECASE)"
"unpacked list exc_info.   if self.include_html is true, call the method reporter.get_traceback_html and substitute the result for html_message,","unpacked list var0 if self var3 is true, call method reporter var5 and substitute result for var6 ",html_message = reporter . get_traceback_html ( ) if self . include_html else None,var6 = reporter . var5 ( ) if self . var3 else None
"html4_singlets is a tuple with 9 elements: strings 'br', 'col', 'link', 'base', 'img', 'param', 'area', 'hr' and 'input'.","var0 is tuple with 9 elements: strings var1, var2, var3, var4, var5, var7, var9, var10 and var11.","html4_singlets = ( 'br' , 'col' , 'link' , 'base' , 'img' , 'param' , 'area' , 'hr' , 'input' )","var0 = var1 , 'col' , 'link' , 'base' , 'img' , 'param' , 'area' , 'hr' , 'input'"
"or if current_version is greater than (3,0), but smaller than (3,2,3), otherwise set use_workaround to boolean False.   substitute HTMLParseError from the module _html_parser for HTMLParseError.","or if var0 is greater var2 (3,0), but smaller var2 (3,2,3), otherwise set var4 to boolean var6 substitute var8 from module _html_parser for var8 ",HTMLParseError = _html_parser . HTMLParseError,var8 = _html_parser . var8
call the method HTMLParser.__init__ with 2 arguments: self and strict set to boolean False.,call method var0 __init__ with 2 arguments: self and strict set to boolean var1 ,"HTMLParser . __init__ ( self , strict = False )","var0 . __init__ ( self , strict = var1 )"
call the method HTMLParser.__init__ with an argument self.,call method var0 __init__ with argument self.,HTMLParser . __init__ ( self ),var0 . __init__ ( self )
substitute HTMLParser from the module _html_parser for HTMLParser.,substitute var0 from module _html_parser for var0 ,HTMLParser = _html_parser . HTMLParser,var0 = _html_parser . var0
httpd.daemon_threads is boolean True.,httpd var1 is boolean var2 ,httpd . daemon_threads = True,httpd . var1 = var2
call the method httpd.serve_forever.,call method httpd var1 ,httpd . serve_forever ( ),httpd . var1 ( )
call the method httpd.set_app with an argument wsgi_handler.,call method httpd var1 with argument var2 ,httpd . set_app ( wsgi_handler ),httpd . var1 ( var2 )
"call the httpd_cls function with 4 arguments: server_address, WSGIRequestHandler and ipv6 set to ipv6, substitute the result for httpd.",call var0 function with 4 arguments: var3 var5 and var6 set to var6 substitute result for var2 ,"httpd = httpd_cls ( server_address , WSGIRequestHandler , ipv6 = ipv6 )","var2 = var0 ( var3 , var5 , var6 = var6 )"
"call the function type with 3 arguments: string 'WSGIServer', tuple containing 2 elements: socketserver.ThreadingMixIn and WSGIServer,","call function type with 3 arguments: string var0, tuple containing 2 elements: var1 var2 and WSGIServer,","httpd_cls = type ( str ( 'WSGIServer' ) , ( socketserver . ThreadingMixIn , WSGIServer ) , { } )","httpd_cls = type ( str ( var0 ) , ( var1 . var2 , WSGIServer ) , { } )"
substitute WSGIServer for httpd_cls.,substitute var0 for var1 ,httpd_cls = WSGIServer,var1 = var0
call the method HttpResponse.content.fset with 2 arguments: self and value.,call method var0 content.fset with 2 arguments: self and value.,"HttpResponse . content . fset ( self , value )","var0 . content . fset ( self , value )"
increment i by integer 1.,increment i by integer 1.,i += 1,i += 1
increment i by one.,increment i by one.,i += 1,i += 1
where '%d' is replaced with i and '%s' is replaced with subject.   increment i by one.,var0 var1 is replaced with i and var2 is replaced with subject var4 increment i by one.,i += 1,i += 1
"increment i by integer 1,","increment i by integer 1,",i += 1,i += 1
"where '%d' is replaced with i and '%s' is replaced with subject.   increment i by integer 1,","var0 var1 is replaced with i and var2 is replaced with subject var4 increment i by integer 1,",i += 1,i += 1
"increment i by integer 1,.","increment i by integer 1,.",i += 1,i += 1
increment the variable i by 1,increment variable i by 1,i += 1,i += 1
i is integer 365.,i is integer 365.,i = 365,i = 365
i is integer 366.,i is integer 366.,i = 366,i = 366
"get the index of first occurrence of name in existing, substitute it for i.","get index of first occurrence of name var0 existing, substitute var0 for var0",i = existing . index ( name ),i = existing . index ( name )
i is the reminder of the division of i by j.,i is reminder of division of i by var0,i = i % j,i = i % j
"increment i by integer 1, substitute the result for i.","increment i by integer 1, substitute result for var0",i = i + 1,i = i + 1
"add j and integer 1, substitute the result for i.","add j and integer 1, substitute result for var0",i = j + 1,i = j + 1
"call the function next_space_index with 2 arguments: subject and i, substitute the result for i.",call function var0 with 2 arguments: subject and var1 substitute result for var1,"i = next_space_index ( subject , i )","i = var0 ( subject , i )"
"call the function next_space_index with 2 arguments subject and i, substitute the result for i.",call function var0 with 2 arguments subject and var1 substitute result for var1,"i = next_space_index ( subject , i )","i = var0 ( subject , i )"
"get the index of the first occurrence of tagname, substitute it for i.",get index of first occurrence of var0 substitute var1 for var1,i = open_tags . index ( tagname ),i = open_tags . index ( var0 )
"call the method p.find with bytes string '=' as an argument, substitute the result for i.","call method var0 with bytes string var1 as argument, substitute result for var2",i = p . find ( b'=' ),i = var0 ( b'=' )
initialize i as an integer with the value of 0,initialize i as integer with value of 0,i = 0,i = 0
"if self.id exists, convert self.id to a string, surround it with round brackets, substitute id for it, otherwise id is an empty string.","if var0 exists, convert var0 to string, surround it with round brackets, substitute id for it, otherwise id is empty string.",id = '(%s) ' % self . id if self . id else '',id = '(%s) ' % var0 if var0 else ''
"id is a string ""literal"".",id is string var0.,id = 'literal',id = 'literal'
id is None.,id is var0 ,id = None,id = var0
append string '_0' to id_.,append string var0 to var1 ,id_ += '_0',var1 += var0
"substitute '%s' in string 'id_%s' with name, return it.","substitute var0 in string var1 with name, return it.",id_ = 'id_%s' % name,id_ = var1 % name
"substitute the result for final_attrs.   get the value under the 'id' key of final_attrs dictionary, substitute if for id_ if the key doesnt exists, id_ is None.","substitute result for var0 get value under var5 key of var0 dict, substitute if for var6 if key doesnt exists var6 is var8 ","id_ = final_attrs . get ( 'id' , None )","var6 = var0 . get ( var5 , var8 )"
"get the value under the 'id' key of the final_attrs dictionary, substitute it for id_, if it doesnt exists, id_ is None.","get value under var0 key of var1 dict, substitute it for var3 if it doesnt exists var3 is var5 ","id_ = final_attrs . get ( 'id' , None )","var3 = var1 . get ( var0 , var5 )"
"get the value under the 'id' key of the self.attrs dictionary, substitute it for id_ if the key exists, if not id_ is None.","get value under var0 key of self.attrs dict, substitute it for var1 if key exists, if not var1 is var3 ","id_ = self . attrs . get ( 'id' , None )","var1 = self . attrs . get ( var0 , var3 )"
"get the value under the 'id' key of the attrs dictionary, substitute the return value field of the self object for id_.","get value under var0 key of var1 dict, substitute return value field of self object for var2 ",id_ = self . attrs [ 'id' ],var2 = self . var1 [ var0 ]
"get the value under the 'id' key of the self.field.widget.attrs dictionary, if the key exists substitute it for id_,","get value under var0 key of var1 dict, if key exists substitute it for var2 ",id_ = self . field . widget . attrs . get ( 'id' ) or self . auto_id,var2 = var1 . get ( var0 ) or self . auto_id
"get the value under the 'id' key of the widget.attrs dictionary, if the key exists substitute it for id_,","get value under var0 key of var1 dict, if key exists substitute it for var2 ",id_ = widget . attrs . get ( 'id' ) or self . auto_id,var2 = var1 . get ( var0 ) or self . auto_id
"call the method widget.id_for_label with an argument id_, substitute the result for id_for_label.","call method widget var1 with argument id_, substitute result for var1 ",id_for_label = widget . id_for_label ( id_ ),var1 = widget . var1 ( id_ )
"compile regex from string '^[a-z_][a-z0-9_]*$' in case insensitive mode, substitute it for IDENTIFIER.","compile var0 from string '^ [var2] [var3]*$' in case insensitive mode, substitute it for var4 ","IDENTIFIER = re . compile ( '^[a-z_][a-z0-9_]*$' , re . I )","var4 = re . compile ( '^[var2][var3]*$' , re . I )"
substitute DNS_NAME for idhost.,substitute var0 for var1 ,idhost = DNS_NAME,var1 = var0
"append idstring to the '.' character, substitute it for idstring.","append var0 to var2 character, substitute it for var0 ",idstring = '.' + idstring,var0 = var2 + var0
idstring is an empty string.,var0 is empty string.,idstring = '',var0 = ''
"call the method m.groups, substitute the first element of the result for idx.",call method var0 substitute first element of result for var1 ,idx = m . groups ( ) [ 0 ],var1 = var0 ( ) [ 0 ]
if __name__ equals a string '__main__'.,if var0 equals string var1.,if __name__ == '__main__' : ,if var0 == var1 : 
"if _cached_modules equals to module_values,",if var0 equals to var1 ,if _cached_modules == module_values : ,if var0 == var1 : 
"if _cookie_encodes_correctly and _cookie_allows_colon_in_names are boolean True,",if var0 and var1 are boolean var2 ,if _cookie_encodes_correctly and _cookie_allows_colon_in_names : ,if var0 and var1 : 
if _default is None,if var0 is var1,if _default is None : ,if var0 is var1 : 
"if _default is None,",if var0 is var1 ,if _default is None : ,if var0 is var1 : 
"if _file is None,",if var0 is var1 ,if _file is None : ,if var0 is var1 : 
"if _file is not None,",if var0 is not var1 ,if _file is not None : ,if var0 is not var1 : 
"if _globs_ is None,",if var0 is var1 ,if _globs_ is None : ,if var0 is var1 : 
"if _ipv6 is true,","if var0 is true,",if _ipv6 : ,if var0 : 
"if _localtime is None,",if var0 is var1 ,if _localtime is None : ,if var0 is var1 : 
"if _locs_ is None,",if var0 is var1 ,if _locs_ is None : ,if var0 is var1 : 
"if call to the function _samefile with old_file_name and new_file_name evaluates to boolean True,",if call to function var0 with var1 and var3 evaluates to boolean var5 ,"if _samefile ( old_file_name , new_file_name ) : ","if var0 ( var1 , var3 ) : "
"if _standard_context_processors is None,",if var0 is var1 ,if _standard_context_processors is None : ,if var0 is var1 : 
"if _supported is None,",if var0 is var1 ,if _supported is None : ,if var0 is var1 : 
"if _time.daylight is true,","if var0 is true,",if _time . daylight : ,if var0 : 
"if _win is true,","if var0 is true,",if _win : ,if var0 : 
"if string '__str__' is not contained in __dict__ field of klass,",if string var0 is not contained in var1 field of var2 ,if '__str__' not in klass . __dict__ : ,if var0 not in var2 . var1 : 
"if '_' is contained in locale,","if var0 is contained in locale,",if '_' in locale : ,if var0 in locale : 
"if string '--commands' is contained in args,",if string var0 is contained in var1 ,if '--commands' in args : ,if var0 in var1 : 
"if character '-' is not contained  in lang_code,",if character var1 is not contained in var2var0,if '-' not in lang_code : ,if var1 not in var2 : 
"if ',' is contained in second element of args,",if var0 is contained in second element of var1 ,"if ', ' in args [ 1 ] : ","if ', ' in var1 [ 1 ] : "
"if ',' is not contained in arg,",if var0 is not contained in var1 ,"if ', ' not in arg : ","if ', ' not in var1 : "
"if string ':::' is contained in ip_str,",if string var0 is contained in var1 ,if ':::' in ip_str : ,if var0 in var1 : 
"if '::' is not contained in ip_str and number of occurrences of ':' in ip_str is not equal to integer 7,","if var0 is not contained in var1 and number of occurrences of var5 in var1 is not equal to integer 7,",if '::' not in ip_str and ip_str . count ( ':' ) != 7 : ,if var0 not in var1 and var1 . count ( ':' ) != 7 : 
if ':' is not contained in ip_str.,if var0 is not contained in var1 ,if ':' not in ip_str : ,if var0 not in var1 : 
"if character ':' is not contained in template,","if character var0 is not contained in template,",if ':' not in template : ,if var0 not in template : 
"if '.' is contained in exclude,","if var0 is contained in exclude,",if '.' in exclude : ,if var0 in exclude : 
"if '.' is contained in last elements of hextets,",if var0 is contained in last elements of var1 ,if '.' in hextets [ - 1 ] : ,if var0 in var1 [ - 1 ] : 
"split ip_str into parts by ':', if '.' is contained in the last element of the result,","split var0 into parts by var2, if var3 is contained in last element of result,",if '.' in ip_str . split ( ':' ) [ - 1 ] : ,if '.' in var0 . split ( var2 ) [ - 1 ] : 
"if '.' is not contained in str_number,",if var0 is not contained in var1 ,if '.' in str_number : ,if var0 in var1 : 
"if '.' is contained in words or '@' is contained in word or ':' is contained in word,","if var0 is contained in words or var0 is contained in word or var0 is contained in word,",if '.' in word or '@' in word or ':' in word : ,if var0 in word or var0 in word or var0 in word : 
"if '.' is not contained in var and 'e' is not contained in var converted into lowercase,","if var0 is not contained in var and var0 is not contained in var converted into lowercase,",if '.' not in var and 'e' not in var . lower ( ) : ,if var0 not in var and var0 not in var . lower ( ) : 
"if string '()' is contained in config,",if string var0 is contained in var1 ,if '()' in config : ,if var0 in var1 : 
"if character '@' is contained in addr,",if character var0 is contained in var1 ,if '@' in addr : ,if var0 in var1 : 
"if '/' is contained in path, and only if '\\' is contained in path and index of the first occurrence of '/' in path is lesser than,","if var0 is contained in path, and only if var2 is contained in path and index of first occurrence of var0 in path is lesser var4 ",if '/' in path and ( ( '\\' in path and path . find ( '/' ) < path . find ( '\\' ) ) or '\\' not in path ) : ,if var0 in path and ( ( '\\' in path and path . find ( var0 ) < path . find ( '\\' ) ) or '\\' not in path ) : 
"if characters '\n' or '\r' are contained in val,",if characters var0 or var1 are contained in var3 ,if '\n' in val or '\r' in val : ,if var0 in var3 or '\r' in var3 : 
"if string '%(truncated_text)s' is contained in truncate,","if string var0 is contained in truncate,",if '%(truncated_text)s' in truncate : ,if var0 in truncate : 
"if 'args' is contained in options,","if var0 is contained in options,",if 'args' in options : ,if var0 in options : 
"use it to call the cgi.parse_header method, assign the result to the _ and content_params respectively.   if string 'charset' is contained in content_params,","use it to call cgi var1 method, assign result to var2 and var3 respectively var7 if string var8 is contained in var3 ",if 'charset' in content_params : ,if var8 in var3 : 
"if 'class' is contained in attrs,",if var0 is contained in var1 ,if 'class' in attrs : ,if var0 in var1 : 
"if 'date' is not in header_names,",if var0 is not in var1 ,if 'date' not in header_names : ,if var0 not in var1 : 
"if string 'DJANGO_AUTO_COMPLETE' is not contained in os.environ,",if string var0 is not contained in var1 ,if 'DJANGO_AUTO_COMPLETE' not in os . environ : ,if var0 not in var1 : 
"if string 'django.middleware.clickjacking.XFrameOptionsMiddleware' is not contained in settings.MIDDLEWARE_CLASSES set,","if string var0 is not contained in settings var1 set,",if 'django.middleware.clickjacking.XFrameOptionsMiddleware' not in set ( settings . MIDDLEWARE_CLASSES ) : ,if var0 not in set ( settings . var1 ) : 
"if 'error_messages' is contained in kwargs,",if var0 is contained in var1 ,if 'error_messages' in kwargs : ,if var0 in var1 : 
"if 'file_path' is contained in kwargs,",if var0 is contained in var1 ,if 'file_path' in kwargs : ,if var0 in var1 : 
"if string 'forloop' is contained in context,","if string var0 is contained in context,",if 'forloop' in context : ,if var0 in context : 
"if 'id' is contained in self.attrs,",if var0 is contained in var1 ,if 'id' in self . attrs : ,if var0 in var1 : 
"if string 'id' is contained in self.attrs,",if string var0 is contained in var1 ,if 'id' in self . attrs : ,if var0 in var1 : 
"if 'Location' is contained in response and function request.get_host evaluates to True,",if var0 is contained in response and function request var2 evaluates to var3 ,if 'Location' in response and request . get_host ( ) : ,if var0 in response and request . var2 ( ) : 
"for every el in split string cc_delim_re, with delimiter being the value of dictionary response under the key 'Cache-Control'.   if cc contains item 'max-age',","for every el in split string var0 with var2 being value of dict response under key var3 var4 if cc contains item var5,",if 'max-age' in cc : ,if var5 in cc : 
"if cc contains item 'max-age' and kwargs contains item 'max_age',","if cc contains item var0 and var1 contains item var2,",if 'max-age' in cc and 'max_age' in kwargs : ,if var0 in cc and 'max_age' in var1 : 
"if 'media' is not contained in attrs,",if var0 is not contained in var1 ,if 'media' not in attrs : ,if var0 not in var1 : 
"if message-id' is not in header_names,",if message-id' is not in var0 ,if 'message-id' not in header_names : ,if 'message-id' not in var0 : 
"if string 'noreset' is not contained in opts,","if string var0 is not contained in opts,",if 'noreset' not in opts : ,if var0 not in opts : 
"if 'pk' is contained in d,","if var0 is contained in d,",if 'pk' in d : ,if var0 in d : 
"if it is smaller than the value of dictionary kwargs under the key 'max_age', substitute kwargs value under the key 'max-age' by it.   if cc contains item 'private' and kwargs contains item 'public',","if it is smaller var0 value of dict var1 under key var4, substitute var1 value under key var5 by it var6 if cc contains item var7 and var1 contains item var8,",if 'private' in cc and 'public' in kwargs : ,if var7 in cc and 'public' in var1 : 
"if string 'version' is not contained in config,",if string var0 is not contained in var1 ,if 'version' not in config : ,if var0 not in var1 : 
"if 'warning' is contained in kwargs,",if var0 is contained in var1 ,if 'warning' in kwargs : ,if var0 in var1 : 
"if string ""'format'"" is not contained in e converted into a string,","if string var0 is not contained in e converted into string,",if ''format'' not in str ( te ) :,if ''format'' not in str(te):
"if ""'stream'"" is not contained in te converted into a string,","if var0 is not contained in te converted into string,",if ''stream'' not in str ( te ) :,if ''stream'' not in str(te):
"if encoded contains string ""\\"" and if encoded doesnt start with the double quote symbol,","if encoded contains string var0 and if encoded doesnt start with double quote symbol,",if '\\' in encoded and not encoded . startswith ( ''' ) :,if '\\' in encoded and not encoded.startswith('''):
"if self.__stattag_text contains newline character,","if var0 contains var1 character,",if '\n' in self . __starttag_text : ,if '\n' in self . __starttag_text : 
"if string ""0x0,aec"" is in format_0x",if string var0 is in var1,"if '0x0aec, ' in format_0x : ","if '0x0aec, ' in var1 : "
"if self.allow_files is true and full_file is a file, or if self.allow_folders is true and full_file is an directory,","if self var1 is true and var2 is file, or if self var7 is true and var2 is directory,",if ( ( ( self . allow_files and os . path . isfile ( full_file ) ) or ( self . allow_folders and os . path . isdir ( full_file ) ) ) and ( self . match is None or self . match_re . search ( f ) ) ) : ,if ( ( ( self . var1 and os . path . isfile ( var2 ) ) or ( self . var7 and os . path . isdir ( var2 ) ) ) and ( self . match is None or self . match_re . search ( f ) ) ) : 
"if context.autoescape is true and value is not an instance of SafeData, or value is an instance of EscapeData,",if var0 is true and value is not instance of var1 or value is instance of var2 ,"if ( ( context . autoescape and not isinstance ( value , SafeData ) ) or isinstance ( value , EscapeData ) ) : ","if ( ( var0 and not isinstance ( value , var1 ) ) or isinstance ( value , var2 ) ) : "
"if ip_str starts with ':, but it doesnt starts with '::', or if ip_str ends with ':, but it doesnt ends with '::',","if var0 starts with var4::var6:, but it doesnt ends with var5,",if ( ( ip_str . startswith ( ':' ) and not ip_str . startswith ( '::' ) ) or ( ip_str . endswith ( ':' ) and not ip_str . endswith ( '::' ) ) ) : ,if ( ( var0 . startswith ( ':' ) and not var0 . startswith ( var5 ) ) or ( var0 . endswith ( ':' ) and not var0 . endswith ( var5 ) ) ) : 
"call the function os.stat with an argument path, perform bitwise and on 2 operands st_mode field of the result and stat.S_IREAD,","call function var0 with argument path, perform var2 and on 2 operands var3 field of result and var1 var5 ",if ( ( os . stat ( path ) . st_mode & stat . S_IREAD ) != stat . S_IREAD ) : ,if ( ( os . var1 ( path ) . var3 & var1 . var5 ) != var1 . var5 ) : 
"if integers 3 and 2 in a tuple are smaller than the sys.version_info and sys.version_info is smaller than integers 3,4 and 4 in a tuple, respectively,","if integers 3 and 2 in tuple are smaller var0 sys var2 and sys var2 is smaller var0 integers var4 and 4 in tuple, respectively,","if ( 3 , 2 ) < sys . version_info < ( 3 , 3 , 4 ) : ","if ( 3 , 2 ) < sys . var2 < ( 3 , 3 , 4 ) : "
"if attr equals any of the strings ""__file__"", ""__name__"" or ""__path__"" and self.mod is not contained in sys.modules,","if var0 equals any of strings var1, var2 or var4 and var6 is not contained in var7 ","if ( attr in ( '__file__' , '__name__' , '__path__' ) and self . mod not in sys . modules ) : ","if ( var0 in ( '__file__' , '__name__' , '__path__' ) and var6 not in var7 ) : "
"if BLOCK_CONTEXT_KEY is contained in render_context and call to the method get_block with an argument self.name from the object,","if var0 is contained in var1 and call to method var3 with argument var5 from object,",if ( BLOCK_CONTEXT_KEY in render_context and render_context [ BLOCK_CONTEXT_KEY ] . get_block ( self . name ) is not None ) : ,if ( var0 in var1 and var1 [ var0 ] . var3 ( var5 ) is not None ) : 
if features.needs_datetime_string_cast field of object under the db key of connections dictionary is true and current_expires is not an instance of datetime object.,if features var1 field of object under db key of connections dict is true and var2 is not instance of datetime object.,"if ( connections [ db ] . features . needs_datetime_string_cast and not isinstance ( current_expires , datetime ) ) : ","if ( connections [ db ] . features . var1 and not isinstance ( var2 , datetime ) ) : "
"if context.autoescape is true and output is not an instance of SafeData class or output is an instance of EscapeData class,","if var0 is true and output is not instance of var1 class or output is instance of var2 class,","if ( context . autoescape and not isinstance ( output , SafeData ) ) or isinstance ( output , EscapeData ) : ","if ( var0 and not isinstance ( output , var1 ) ) or isinstance ( output , var2 ) : "
"if value under the key 'ATOMIC_REQUESTS of db.settings_dic dictionary is True and db.alias is not present in the non_atomic_requests,",if value under key 'ATOMIC_REQUESTS of db var2 dict is var3 and var4 is not present in var5 ,if ( db . settings_dict [ 'ATOMIC_REQUESTS' ] and db . alias not in non_atomic_requests ) : ,if ( db . var2t [ 'var0' ] and var4 not in var5 ) : 
"if domain_part is not contained in self.domain_whitelist and method self.validate_domain_part with an argument domain_part evaluates to false,","if var0 is not contained in self var3 and method self var5 with argument var0 evaluates to false,",if ( domain_part not in self . domain_whitelist and not self . validate_domain_part ( domain_part ) ) : ,if ( var0 not in self . var3 and not self . var5 ( var0 ) ) : 
"if field equals NON_FIELD_ERRORS and opts.error_messages is true and NON_FIELD_ERRORS is contained in opts.error_messages,",if field equals var0 and opts var4 is true and var0 is contained in opts var4 ,if ( field == NON_FIELD_ERRORS and opts . error_messages and NON_FIELD_ERRORS in opts . error_messages ) : ,if ( field == var0 and opts . var4 and var0 in opts . var4 ) : 
"if form.cleaned_data is true and value under the field key of form.cleaned_data dictionary is not None,",if form var2 is true and value under field key of form var2 dict is not var4 ,if ( form . cleaned_data and form . cleaned_data [ field ] is not None and form . cleaned_data [ unique_for ] is not None ) : ,if ( form . var2 and form . var2 [ field ] is not var4 and form . var2 [ unique_for ] is not var4 ) : 
"if 'fields' attribute of meta is None, or if it doesnt exists if fields is None and if 'exclude' attribute of meta is None,",if var0 attribute of var1 is var3 or if it doesnt exists if fields is var3 and if var6 attribute of var1 is var3 ,"if ( getattr ( meta , 'fields' , fields ) is None and getattr ( meta , 'exclude' , exclude ) is None ) : ","if ( getattr ( var1 , var0 , fields ) is var3 and getattr ( var1 , 'exclude' , exclude ) is var3 ) : "
"if 'fields' attribute of Meta object is None and 'exclude' attribute of Meta object is None,",if var0 attribute of var1 object is var5 and var7 attribute of var1 object is var5 ,"if ( getattr ( Meta , 'fields' , None ) is None and getattr ( Meta , 'exclude' , None ) is None ) : ","if ( getattr ( var1 , var0 , var5 ) is var5 and getattr ( var1 , 'exclude' , var5 ) is var5 ) : "
"if self.cmd has an attribute 'missing_args_message' and next statement is not true: args is true or any arg doesnt start with '-' for arg in args,","if self.cmd has attribute var0 and next statement is not true: args is true or any arg doesnt start with var1 for arg in args,","if ( hasattr ( self . cmd , 'missing_args_message' ) and not ( args or any ( [ not arg . startswith ( '-' ) for arg in args ] ) ) ) : ","if ( hasattr ( self . cmd , var0 ) and not ( args or any ( [ not arg . startswith ( '-' ) for arg in args ] ) ) ) : "
"if value has an attribute '__iter__' and value is not an instance of six.text_type and value doesnt have an attribute '_meta',","if value has attribute var0 and value is not instance of six var2 and value doesnt have attribute var3,","if ( hasattr ( value , '__iter__' ) and not isinstance ( value , six . text_type ) and not hasattr ( value , '_meta' ) ) : ","if ( hasattr ( value , var0 ) and not isinstance ( value , six . var2 ) and not hasattr ( value , '_meta' ) ) : "
"subtract day_of_year from i, if the result is smaller than the result of subtraction of weekday from integer 4,","subtract var0 from i, if result is smaller var1 result of subtraction of weekday from integer 4,",if ( i - day_of_year ) < ( 4 - weekday ) : ,if ( i - var0 ) < ( 4 - weekday ) : 
"if first element of args is an instance of SafeData, and 'is_safe' attribute of dec._decorated_function object is true,","if first element of var0 is instance of var1 and var3 attribute of dec._decorated_function object is true,","if ( isinstance ( args [ 0 ] , SafeData ) and getattr ( _dec . _decorated_function , 'is_safe' , False ) ) : ","if ( isinstance ( var0 [ 0 ] , var1 ) and getattr ( _dec . _decorated_function , var3 , False ) ) : "
"if data is an instance of datetime.datetime or datetime.time classes, and supports_microseconds field of self.field.widget is false,","if data is instance of var0 or datetime.time classes, and var1 field of var2 is false,","if ( isinstance ( data , ( datetime . datetime , datetime . time ) ) and not getattr ( self . field . widget , 'supports_microseconds' , True ) ) : ","if ( isinstance ( data , ( var0 , datetime . time ) ) and not getattr ( var2 , 'var1' , True ) ) : "
"if data is instance of Node and data.negated is false, and if data.connector equals conn_type or length of data equals integer 1,","if data is instance of var0 and var1 is false, and if var2 equals var3 or length of data equals integer 1,","if ( isinstance ( data , Node ) and not data . negated and ( data . connector == conn_type or len ( data ) == 1 ) ) : ","if ( isinstance ( data , var0 ) and not var1 and ( var2 == var3 or len ( data ) == 1 ) ) : "
"if fp is an instance of file and data is an instance of unicode and fp.encoding is not None,",if var0 is instance of file and data is instance of var1 and var0 encoding is not var3 ,"if ( isinstance ( fp , file ) and isinstance ( data , unicode ) and fp . encoding is not None ) : ","if ( isinstance ( var0 , file ) and isinstance ( data , var1 ) and var0 . encoding is not var3 ) : "
"if message is an instance of ValidationError class and message.code is contained in error_messages,",if message is instance of var0 class and var1 is contained in var2 ,"if ( isinstance ( message , ValidationError ) and message . code in error_messages ) : ","if ( isinstance ( message , var0 ) and var1 in var2 ) : "
"evaluate the boolean expression: locale is None and exclude is false and process_all is false,","evaluate boolean expression: locale is var0 and exclude is false and var1 is false,",if ( locale is None and not exclude and not process_all ) or self . domain is None : ,if ( locale is var0 and not exclude and not var1 ) or self . domain is var0 : 
"if middle ends with closing and count of occurrence of closing in middle equals count of occurrence of opening in middle incremented by one,","if middle ends with closing and count of occurrence of closing in middle equals count of occurrence of opening in middle var0 by one,",if ( middle . endswith ( closing ) and middle . count ( closing ) == middle . count ( opening ) + 1 ) : ,if ( middle . endswith ( closing ) and middle . count ( closing ) == middle . count ( opening ) + 1 ) : 
"if return value of the function normcase called with an argument final_path doesnt starts with result of the function normcase,",if return value of function var0 called with argument var2 doesnt starts with result of function var0 ,if ( not normcase ( final_path ) . startswith ( normcase ( base_path + sep ) ) and normcase ( final_path ) != normcase ( base_path ) and dirname ( normcase ( base_path ) ) != normcase ( base_path ) ) : ,if ( not var0 ( var2 ) . startswith ( normcase ( base_path + sep ) ) and var0 ( var2 ) != var0 ( base_path ) and dirname ( normcase ( base_path ) ) != var0 ( base_path ) ) : 
"if obj.pk is None, and Model has an 'natural_key' attribute, and Model._default_manager has and 'get_by_natural_key',","if var0 is var1 and var2 has var4 attribute, and var2 _default_manager has and var6,","if ( obj . pk is None and hasattr ( Model , 'natural_key' ) and hasattr ( Model . _default_manager , 'get_by_natural_key' ) ) : ","if ( var0 is var1 and hasattr ( var2 , var4 ) and hasattr ( var2 . _default_manager , 'get_by_natural_key' ) ) : "
"code set to string 'max_decimal_places' and params set to a dictionary with an entry: self.decimal_places for 'max'.    if self.max_digits is not None and self.decimal_places is not None and whole_digits is grater than the difference of,","code set to string var0 and var1 set to dict with entry: var2 for var4 var5 if self var7 is not var8 and var2 is not var8 and var10 is grater var12 difference of,",if ( self . max_digits is not None and self . decimal_places is not None and whole_digits > ( self . max_digits - self . decimal_places ) ) : ,if ( self . var7 is not var8 and var2 is not var8 and var10 > ( self . var7 - var2 ) ) : 
"if self.negate is true and val1 is not equal to val2, or if, self.negate is false and val1 equals val2,",if var0 is true and var2 is not equal to var4 or if var0 is false and var2 equals var4 ,if ( self . negate and val1 != val2 ) or ( not self . negate and val1 == val2 ) : ,if ( var0 and var2 != var4 ) or ( not var0 and var2 == var4 ) : 
"if self.requires_system_checks is true and values under the 'skip_validation' and 'skip_checks' keys of the options dictionary are false,","if self var1 is true and values under var2 and var3 keys of options dict are false,",if ( self . requires_system_checks and not options . get ( 'skip_validation' ) and not options . get ( 'skip_checks' ) ) : ,if ( self . var1 and not options . get ( var2 ) and not options . get ( 'skip_checks' ) ) : 
"if self.validate_max is true, and length of self.deleted_forms subtracted from the return value of the method self.total_form_count,","if self var1 is true, and length of self var3 subtracted from return value of method self var5 ",if ( self . validate_max and self . total_form_count ( ) - len ( self . deleted_forms ) > self . max_num ) or self . management_form . cleaned_data [ TOTAL_FORM_COUNT ] > self . absolute_max : ,if ( self . var1 and self . var5 ( ) - len ( self . var3 ) > self . max_num ) or self . management_form . cleaned_data [ TOTAL_FORM_COUNT ] > self . absolute_max : 
check if the length of execve_shellcode is not divisible by 3,check if length of var0 is not divisible by 3,if ( len ( execve_shellcode ) % 3 ) != 0 : ,if ( len ( var0 ) % 3 ) != 0 : 
check if the length of z is not divisible by 100,check if length of z is not divisible by 100,if ( len ( z ) % 100 ) != 0 : ,if ( len ( z ) % 100 ) != 0 : 
check if the following expression is true r bitwise xor c at index i is not equal to 0 and r bitwise xor c at index i+1 does not equal 0 and r bitwise xor c at index i+2 does not equal 0 and r bitwise xor c at index i+3 does not equal 0,check if following expression is true r var0 xor c at index i is not equal to 0 and r var0 xor c at index var4 does not equal 0 and r var0 xor c at index var5 does not equal 0 and r var0 xor c at index var6 does not equal 0,if ( r ^ c [ i ] != 0 ) and ( r ^ c [ i + 1 ] != 0 ) and ( r ^ c [ i + 2 ] != 0 ) and ( r ^ c [ i + 3 ] != 0 ) : ,if ( r ^ c [ i ] != 0 ) and ( r ^ c [ i + 1 ] != 0 ) and ( r ^ c [ i + 2 ] != 0 ) and ( r ^ c [ i + 3 ] != 0 ) : 
"check if r bitwise xor shellcode_original at index i, i+1, i+2, and i+3 are not equal to 0",check if r var0 xor var1 at index i var2 var3 and var4 are not equal to 0,if ( r ^ shellcode_original [ i ] != 0 ) and ( r ^ shellcode_original [ i + 1 ] != 0 ) and ( r ^ shellcode_original [ i + 2 ] != 0 ) and ( r ^ shellcode_original [ i + 3 ] != 0 ) : ,if ( r ^ var1 [ i ] != 0 ) and ( r ^ var1 [ i + 1 ] != 0 ) and ( r ^ var1 [ i + 2 ] != 0 ) and ( r ^ var1 [ i + 3 ] != 0 ) : 
if variable a modulo 2 is equal to 0,if variable var0 2 is equal to 0,if a % 2 == 0 : ,if a % 2 == 0 : 
"if action equals to string ""apply_start"",","if action equals to string var0,",if action == 'apply_start' : ,if action == 'apply_start' : 
"if age is greater than max_age,",if age is greater var0 var1 ,if age > max_age : ,if age > var1 : 
"if alias is not contained in setting.CACHES,",if alias is not contained in setting var0 ,if alias not in settings . CACHES : ,if alias not in settings . var0 : 
"if all_issues is true,","if var0 is true,",if all_issues : ,if var0 : 
"and pending_references append sql to the string '-- ', put the results in a list, extend alter_sql with the result.   if alter_sql,","and var0 append var2 to string var3, put results in list, extend var4 with result var6 if var4 ",if alter_sql : ,if var4 : 
"if answer equals a string 'y',","if answer equals string var0,",if answer != 'y' : ,if answer != var0 : 
"if visible_issue_count equals to integer 0, or for string ""1 issue"" if visible_issue_count equals integer 1,   or for string ""%s issues"", with '%s' replaced by visible_issue_count, subtract visible_issue_count from length of all_issues,   and substitute it for second '%s' in the stirting string.   if any element in the return value of the e.is_serious method is true, and if return value of the method e.is_silenced is false,","if var0 equals to integer 0, or for string var7 if var0 equals integer 1 var8 or for string var11, with var15 replaced by var0 subtract var0 from length of var17 and substitute it for second var15 in var19 string var8 if any element in return value of e var21 method is true, and if return value of method e var23 is false,",if any ( e . is_serious ( ) and not e . is_silenced ( ) for e in all_issues ) : ,if any ( e . var21 ( ) and not e . var23 ( ) for e in var17 ) : 
"split ip_str into parts by ':', for every x in the result, calculate length of x, if any is smaller than integer 4,","split var0 into parts by var2, for every x in result, calculate length of x, if any is smaller var3 integer 4,",if any ( len ( x ) < 4 for x in ip_str . split ( ':' ) ) : ,if any ( len ( x ) < 4 for x in var0 . split ( var2 ) ) : 
"if app equals a string 'django.core',","if var0 equals string var1,",if app == 'django.core' : ,if var0 == var1 : 
"if app_config.label is contained in loader.migrated_apps,",if var0 label is contained in loader var3 ,if app_config . label in loader . migrated_apps : ,if var0 . label in loader . var3 : 
"RemovedInDjango19Warning and stacklevel set to integer 2.   if app_config.models_module is None,",var0 and var1 set to integer 2 var2 if var3 var5 is var6 ,if app_config . models_module is None : ,if var3 . var5 is var6 : 
"if app_config.models_module is None,",if var0 var2 is var3 ,if app_config . models_module is None : ,if var0 . var2 is var3 : 
if app_config.models_module is None.,if var0 var2 is var3 ,if app_config . models_module is None : ,if var0 . var2 is var3 : 
"if app_config.models_module is None or app_config is contained in excluded_apps,",if var0 var4 is var5 or var0 is contained in var6 ,if app_config . models_module is None or app_config in excluded_apps : ,if var0 . var4 is var5 or var0 in var6 : 
if app_config.models_module is None or app_config is contained in excluded_apps,if var0 var4 is var5 or var0 is contained in var6,if app_config . models_module is None or app_config in excluded_apps : ,if var0 . var4 is var5 or var0 in var6 : 
"if app_config is None,",if var0 is var2 ,if app_config is None : ,if var0 is var2 : 
"if app_label is not contained in executor.loader.migrated_apps,",if var0 is not contained in executor.loader var2 ,if app_label not in executor . loader . migrated_apps : ,if var0 not in executor . loader . var2 : 
"if app_labels is true,","if var0 is true,",if app_labels : ,if var0 : 
"if app_list_value is not None,",if var0 is not var2 ,if app_list_value is not None : ,if var0 is not var2 : 
"if app_name is not contained in loader.migrated_apps,",if var0 is not contained in loader var2 ,if app_name not in loader . migrated_apps : ,if var0 not in loader . var2 : 
"if app_names is not empty,","if var0 is not empty,",if app_names : ,if var0 : 
"if app_output is true,","if var0 is true,",if app_output : ,if var0 : 
"if app_path is None,",if var0 is var2 ,if app_path is None : ,if var0 is var2 : 
"if arg is true,","if var0 is true,",if arg : ,if var0 : 
"if arg starts with options,","if var0 starts with options,",if arg . startswith ( option ) : ,if var0 . startswith ( option ) : 
"if arg is smaller than integer 1,","if var0 is smaller var1 integer 1,",if arg < 1 : ,if var0 < 1 : 
"if arg is None,",if var0 is var1 ,if arg is None : ,if var0 is var1 : 
if arg is None,if var0 is var1,if arg is None : ,if var0 is var1 : 
"if arg is not string 'on' or 'off',","if var0 is not string var1 or var2,","if arg not in ( 'on' , 'off' ) : ","if var0 not in ( var1 , 'off' ) : "
"if args is true,","if var0 is true,",if args : ,if var0 : 
"if args in true,","if var0 in true,",if args : ,if var0 : 
"if last element of args is not equal to a string ""silent"",","if last element of var0 is not equal to string var1,",if args [ - 1 ] != 'silent' : ,if var0 [ - 1 ] != 'silent' : 
"if third element from the end of the args equals string 'as',","if third element from end of var0 equals string var1,",if args [ - 3 ] == 'as' : ,if var0 [ - 3 ] == var1 : 
"if first element of the second row of args equals a string '2',","if first element of second row of var0 equals string var1,",if args [ 1 ] [ 0 ] == '2' : ,if var0 [ 1 ] [ 0 ] == var1 : 
"if args and kwargs are both true,","if var0 and var1 are both true,",if args and kwargs : ,if var0 and var1 : 
"if args is None,",if var0 is var1 ,if args is None : ,if var0 is var1 : 
"if as_ is not equal to string 'as',","if var0 is not equal to string var1,",if as_ != 'as' : ,if var0 != var1 : 
"if as_form is true,","if var0 is true,",if as_form : ,if var0 : 
"if att_name equals string 'id' and extra_params equals a dictionary with 1 entry: boolean True for 'primary_key',","if var0 equals string var2 and var3 equals dict with 1 entry: boolean var5 for var6,",if att_name == 'id' and extra_params == { 'primary_key' : True } : ,if var0 == var2 and var3 == { 'primary_key' : var5 } : 
"if attr is contained in flags,","if var0 is contained in flags,",if attr in flags : ,if var0 in flags : 
"if attr is contained in obj_dict,",if var0 is contained in var1 ,if attr in obj_dict : ,if var0 in var1 : 
"if attrs is true,","if var0 is true,",if attrs : ,if var0 : 
"if attrs is None,",if var0 is var1 ,if attrs is None : ,if var0 is var1 : 
"if attrs is not None,",if var0 is not var1 ,if attrs is not None : ,if var0 is not var1 : 
"if attrvalue is not an empty string,","if var0 is not empty string,",if attrvalue : ,if var0 : 
"if auto_id is true and '%s' is contained in result of the call to the function smart_text with an argument auto_id,",if var0 is true and var4 is contained in result of call to function var5 with argument var0 ,if auto_id and '%s' in smart_text ( auto_id ) : ,if var0 and var4 in var5 ( var0 ) : 
"if auto_id is true and 'id' is not contained in attrs and 'id' is not contained in widget.attrs,",if var0 is true and var2 is not contained in var4 and var2 is not contained in widget var4 ,if auto_id and 'id' not in attrs and 'id' not in widget . attrs : ,if var0 and var2 not in var4 and var2 not in widget . var4 : 
"if autoescape is true,","if var0 is true,",if autoescape : ,if var0 : 
"if autoescape is true and safe_input is false,","if var0 is true and var1 is false,",if autoescape and not safe_input : ,if var0 and not var1 : 
"if bad_app_labels is true,","if var0 is true,",if bad_app_labels : ,if var0 : 
"convert base to lowercase, if it ends with string '.tar',","convert base to lowercase, if it ends with string var0,",if base . lower ( ) . endswith ( '.tar' ) : ,if base . lower ( ) . endswith ( var0 ) : 
"if base_url is None,",if var0 is var1 ,if base_url is None : ,if var0 is var1 : 
"if first element of base64d equals to a '.' character,","if first element of var0 equals to var1 character,",if base64d [ : 1 ] == b'.' : ,if var0 [ : 1 ] == b'.' : 
substitute the result for new_class.   if bases equals a tuple with an element: class BaseModelForm.,substitute result for var0 if bases equals tuple with element: class var3 ,"if bases == ( BaseModelForm , ) : ","if bases == ( var3 , ) : "
"if basetype equals a string 'text',","if var0 equals string var1,",if basetype == 'text' : ,if var0 == var1 : 
"if bcc is true,","if var0 is true,",if bcc : ,if var0 : 
"if best_doublecolon_end equals length of hextets,",if var0 equals length of var1 ,if best_doublecolon_end == len ( hextets ) : ,if var0 == len ( var1 ) : 
"if best_doublecolon_len is greater than integer 1,","if var0 is greater var1 integer 1,",if best_doublecolon_len > 1 : ,if var0 > 1 : 
"if best_doublecolon_start equals integer 0,","if var0 equals integer 0,",if best_doublecolon_start == 0 : ,if var0 == 0 : 
"called with an argument error, for every error in bf.errors, substitute the result for bf_errors.   if bf.is_hidden is true,","called with argument error, for every error in var0 substitute result for var1 if bf var4 is true,",if bf . is_hidden : ,if bf . var4 : 
"if bf.label is true,","if var0 is true,",if bf . label : ,if var0 : 
"if bf_errors is true,","if var0 is true,",if bf_errors : ,if var0 : 
"if bit is true,","if bit is true,",if bit : ,if bit : 
"if bit starts with '_(""' ot bit starts with ""_('"",","if bit starts with var0 var1 bit starts with var2,",if bit . startswith ( '_('' ) or bit . startswith ( '_('' ) :,if bit.startswith('_('') or bit.startswith('_(''):
"if first element of bits is not equal to string 'and',","if first element of bits is not equal to string var0,",if bits [ 0 ] != 'and' : ,if bits [ 0 ] != var0 : 
"if third element of bits is not equal to a string 'by',","if third element of bits is not equal to string var0,",if bits [ 2 ] != 'by' : ,if bits [ 2 ] != var0 : 
"if third element of bits equals a string 'parsed',","if third element of bits equals string var0,",if bits [ 2 ] == 'parsed' : ,if bits [ 2 ] == var0 : 
"if fift element of bits is not equal to a string 'as',","if var0 element of bits is not equal to string var1,",if bits [ 4 ] != 'as' : ,if bits [ 4 ] != var1 : 
"if in_index-th element of bits equals to string 'in',","if in_index-th element of bits equals to string var2,",if bits [ in_index ] != 'in' : ,if bits [ var0 ] != var2 : 
"if bits is true and kwarg_format is false,","if bits is true and var0 is false,",if bits and not kwarg_format : ,if bits and not var0 : 
"if block is None,",if block is var0 ,if block is None : ,if block is var0 : 
"if first nine elements of block_content is string 'verbatim' or 'verbatim ',","if first nine elements of var0 is string var2 or var3,","if block_content [ : 9 ] in ( 'verbatim' , 'verbatim ' ) : ","if var0 [ : 9 ] in ( var2 , 'verbatim ' ) : "
"if block_context is None,",if var0 is var2 ,if block_context is None : ,if var0 is var2 : 
"if BLOCK_CONTEXT_KEY is not contained in context.render_context,",if var0 is not contained in context var2 ,if BLOCK_CONTEXT_KEY not in context . render_context : ,if var0 not in context . var2 : 
"if block_name is contained in parser.__loaded_blocks,",if var0 is contained in var1 ,if block_name in parser . __loaded_blocks : ,if var0 in var1 : 
"call the method bmatch.group with an argument integer 1, if it evaluates to true,","call method var0 with argument integer 1, if it evaluates to true,",if bmatch . group ( 1 ) : ,if var0 ( 1 ) : 
"or boolean False if not, substitute the result for boundary.   if boundary is true,","or boolean var0 if not, substitute result for boundary var1 if boundary is true,",if boundary : ,if boundary : 
"if buffer_ is true,","if var0 is true,",if buffer_ : ,if var0 : 
"if buffer_ is not None,",if var0 is not var1 ,if buffer_ is not None : ,if var0 is not var1 : 
"if bytes is smaller than KB,",if bytes is smaller var0 var1 ,if bytes < KB : ,if bytes < var1 : 
"if bytes_read is greater than rollback,","if var0 is greater var1 rollback,",if bytes_read > rollback : ,if var0 > rollback : 
"if cache is None,",if cache is var0 ,if cache is None : ,if cache is var0 : 
"if cache_choices is not None,",if var0 is not var2 ,if cache_choices is not None : ,if var0 is not var2 : 
"if cache_timeout is lesser than integer 0,","if var0 is lesser var1 integer 0,",if cache_timeout < 0 : ,if var0 < 0 : 
"if cache_timeout equals to None,",if var0 equals to var2 ,if cache_timeout is None : ,if var0 is var2 : 
"if cache_timeout is None,",if var0 is var2 ,if cache_timeout is None : ,if var0 is var2 : 
"if cached is not None,",if cached is not var0 ,if cached is not None : ,if cached is not var0 : 
"call the function calendar.isleap with an argument self.data.year, if it evaluates to true,","call function var0 with argument var1 if it evaluates to true,",if calendar . isleap ( self . data . year ) : ,if var0 ( var1 ) : 
"if callback is an callable object,","if callback is callable object,",if callable ( callback ) : ,if callable ( callback ) : 
"where '%s' is replaced with bit and '%r' is replaced with current.   if current is callable object,","var0 var1 is replaced with bit and var2 is replaced with current var4 if current is callable object,",if callable ( current ) : ,if callable ( current ) : 
"if not, substitute self.field.initial for data.   if data is an callable object,","if not, substitute var0 for data var1 if data is callable object,",if callable ( data ) : ,if callable ( data ) : 
"get 'getvalue' attribute of the self.stream object, if it exists and is callable,","get var0 attribute of var1 object, if it exists and is callable,","if callable ( getattr ( self . stream , 'getvalue' , None ) ) : ","if callable ( getattr ( var1 , var0 , None ) ) : "
"if not substitute field.initial for initial_value.   if initial_value is an callable object,","if not substitute var0 for var1 if var1 is callable object,",if callable ( initial_value ) : ,if callable ( var1 ) : 
"if key_function is callable object,","if var0 is callable object,",if callable ( key_func ) : ,if callable ( key_func ) : 
"if limit_choices_to is callable object,","if var0 is callable object,",if callable ( limit_choices_to ) : ,if callable ( var0 ) : 
"if lookup_view is a callable object,","if var0 is callable object,",if callable ( lookup_view ) : ,if callable ( var0 ) : 
"if name is callable object,","if name is callable object,",if callable ( name ) : ,if callable ( name ) : 
"if self.limit_choices_to object is callable,","if self var0 object is callable,",if callable ( self . limit_choices_to ) : ,if callable ( self . var0 ) : 
"if can_fail is true,","if var0 is true,",if can_fail : ,if var0 : 
"if can fail is true,","if fail is true,",if can_fail : ,if can_fail : 
"called with 2 arguments: s and string_only as boolean True.   if categories is true,","called with 2 arguments: s and var0 as boolean var2 if categories is true,",if categories : ,if categories : 
"if cc is true,","if cc is true,",if cc : ,if cc : 
if ch is not in bad_chars,if ch is not in var0,if ch not in bad_chars : ,if ch not in var0 : 
"if ch is true,","if var0 is true,",if ch : ,if var0 : 
"if ch is not equal to a sring '?' or escaped is true,","if var0 is not equal to var1 var2?var2 or escaped is true,",if ch != '?' or escaped : ,if var0!= var2?var2 or escaped: 
if ch is not equal to string '\\'.,if var0 is not equal to string var1.,if ch != '\\' : ,if var0 != '\\' : 
"if ch equals a string '?',","if var0 equals string var1?var1,",if ch == '?' : ,if var0 == var1?var1: 
"if ch equal a string '(',","if ch equal a string '(',",if ch == '(' : ,if ch == '(' : 
"if ch equals string '+',","if var0 equals string var1,",if ch == '+' : ,if var0 == var1 : 
"if ch equals a string '<',","if var0 equals string var1,",if ch == '<' : ,if var0 == var1 : 
"if ch is contained in string '*?+',","if ch is contained in string '*?+',",if ch in '*?+' : ,if ch in '*?+' : 
"if ch is contained in string ""iLmsu#"",","if var0 is contained in string var1,",if ch in 'iLmsu#' : ,if var0 in 'iLmsu#' : 
"if ch is not equal to string '<' or string '=',","if var0 is not equal to string var1 or string var2,","if ch not in ( '<' , '=' ) : ","if var0 not in ( var1 , '=' ) : "
"if ch2 equals string '?',","if var0 equals string var1?var1,",if ch2 == '?' : ,if var0 == var1?var1: 
"if change equals to FILE_MODIFIED,",if change equals to var0 ,if change == FILE_MODIFIED : ,if change == var0 : 
"if character is not equal to a string '.',","if character is not equal to string var0,",if character != '.' : ,if character != var0 : 
"if charset equals to string 'utf-8',","if var0 equals to string var1,",if charset == 'utf-8' : ,if var0 == var1 : 
if check is not contained in self.registered_checks.,if check is not contained in self var1 ,if check not in self . registered_checks : ,if check not in self . var1 : 
"if check_path is true,","if var0 is true,",if check_path : ,if var0 : 
"if child.nodeType equals to child.TEXT_NODE or child.nodeType equals to child.CDATA_SECTION_NODE,",if child var2 equals to child var4 or child var2 equals to child var5 ,if child . nodeType == child . TEXT_NODE or child . nodeType == child . CDATA_SECTION_NODE : ,if child . var2 == child . var4 or child . var2 == child . var5 : 
"if chunk is None,",if chunk is var0 ,if chunk is None : ,if chunk is var0 : 
"if cleaned_data is not None,",if var0 is not var2 ,if cleaned_data is not None : ,if var0 is not var2 : 
"if cleaned_line ends with ';' character,","if var0 ends with var2 character,",if cleaned_line . endswith ( ';' ) : ,if var0 . endswith ( var2 ) : 
"if close is True,",if close is var0 ,if close : ,if close : 
"if cls._delegate_text is true,","if var0 is true,",if cls . _delegate_text : ,if var0 : 
"if cmatch is true,","if var0 is true,",if cmatch : ,if var0 : 
"if cmd ends with ext,",if var0 ends with var1 ,if cmd . endswith ( ext ) : ,if var0 . endswith ( var1 ) : 
"if cnt is true and remained of dividing cnt with grouping is zero,","if var0 is true and remained of dividing var0 with grouping is zero,",if cnt and not cnt % grouping : ,if var0 and not var0 % grouping : 
"if code is contained in _supported and call to the function check_for_language with an argument code evaluates to true,","if code is contained in var0 and call to function var1 with argument code evaluates to true,",if code in _supported and check_for_language ( code ) : ,if code in var0 and var1 ( code ) : 
"if code is None,",if code is var0 ,if code is None : ,if code is var0 : 
"if code is not None,",if code is not var0 ,if code is not None : ,if code is not var0 : 
if code is not None,if code is not var0,if code is not None : ,if code is not var0 : 
"if return value of the code_changed function is true,","if return value of var0 function is true,",if code_changed ( ) : ,if var0 ( ) : 
"if col_name is not equal to new_name and field_notes is true,","if var0 is not equal to var1 and var3 is true,",if col_name != new_name and field_notes : ,if var0 != var1 and var3 : 
"convert col_name to lowercase, on the result call the method find with an argument string '__', if the result is greater of equal to integer 0,","convert var0 to lowercase, on result call method find with argument string var2, if result is greater of equal to integer 0,",if col_name . lower ( ) . find ( '__' ) >= 0 : ,if var0 . lower ( ) . find ( var2 ) >= 0 : 
"if color_setting is True,",if var0 is var2 ,if color_settings : ,if var0s : 
"if colors is true and last element of colors is contained in color_names,",if colors is true and last element of colors is contained in var0 ,if colors and colors [ - 1 ] in color_names : ,if colors and colors [ - 1 ] in var0 : 
"if column_name is contained in indexes,","if var0 is contained in indexes,",if column_name in indexes : ,if var0 in indexes : 
"if command.use_argparse is true,","if command var1 is true,",if command . use_argparse : ,if command . var1 : 
"if command.verbosity is greater than integer 1,","if var0 is greater var1 integer 1,",if command . verbosity > 1 : ,if var0 > 1 : 
"if command is contained in parse_until,",if command is contained in var0 ,if command in parse_until : ,if command in var0 : 
"if commands_only is true,","if var0 is true,",if commands_only : ,if var0 : 
if comment_lineno_cache equals cur_lineno.,if var0 equals var1 ,if comment_lineno_cache == cur_lineno : ,if var0 == var1 : 
"if comment_lineno_cache is not None,",if var0 is not var2 ,if comment_lineno_cache is not None : ,if var0 is not var2 : 
"if comment_notes is true,","if var0 is true,",if comment_notes : ,if var0 : 
"if commit is true,","if commit is true,",if commit : ,if commit : 
"of the obj object.   if commit is true,","of var0 object var1 if commit is true,",if commit : ,if commit : 
"if commit is true and form has an attribute 'save_m2m',","if commit is true and form has attribute var0,","if commit and hasattr ( form , 'save_m2m' ) : ","if commit and hasattr ( form , var0 ) : "
"if common_ancestor is None,",if var0 is var2 ,if common_ancestor is None : ,if var0 is var2 : 
if compare_to is not equal to value under the self key of state_frame.,if var0 is not equal to value under self key of var1 ,if compare_to != state_frame [ self ] : ,if var0 != var1 [ self ] : 
"if compress is true,","if compress is true,",if compress : ,if compress : 
"if condition is not None,",if condition is not var0 ,if condition is not None : ,if condition is not var0 : 
"if config dictionary value under 'version' key is not equal to integer 1,","if var0 dict value under var1 key is not equal to integer 1,",if config [ 'version' ] != 1 : ,if var0 [ var1 ] != 1 : 
"if confirm equals a string 'yes',","if confirm equals string var0,",if confirm == 'yes' : ,if confirm == var0 : 
"if confirm equals string 'yes',","if confirm equals string var0,",if confirm == 'yes' : ,if confirm == var0 : 
"if confirm is not equal to string 'yes' or string 'no',","if confirm is not equal to string var0 or string var1,","if confirm not in ( 'yes' , 'no' ) : ","if confirm not in ( var0 , 'no' ) : "
"if conflicts is true,","if conflicts is true,",if conflicts : ,if conflicts : 
"if conflicts is true and self.merge is false,","if conflicts is true and var0 is false,",if conflicts and not self . merge : ,if conflicts and not var0 : 
if return value of the function connection.introspection.table_name_converter called with an arugment: model._meta.db_table is contained in table_names,if return value of function connection.introspection var1 called with arugment: model._meta var4 is contained in var5,if connection . introspection . table_name_converter ( model . _meta . db_table ) in table_names : ,if connection . introspection . var1 ( model . _meta . var4 ) in var5 : 
"from the connections list, substitute it for connection.   call the method connection.ops.start_transaction_sql, if it evaluates to true,","from connections list, substitute it for connection var0 call method connection.ops var2 if it evaluates to true,",if connection . ops . start_transaction_sql ( ) : ,if connection . ops . var2 ( ) : 
"if value under the 'ENGINE' key of the connection.settings_dict dictionary equals a string 'django.db.backends.dummy',","if value under var0 key of connection var2 dict equals string var3,",if connection . settings_dict [ 'ENGINE' ] == 'django.db.backends.dummy' : ,if connection . var2 [ var0 ] == 'django.db.backends.dummy' : 
"if features.needs_datetime_string_cast field of the object represented stored under the db key of connections dictionary is true,","if features var1 field of object represented stored under db key of connections dict is true,","if connections [ db ] . features . needs_datetime_string_cast and not isinstance ( expires , datetime ) : ","if connections [ db ] . features . var1 and not isinstance ( expires , datetime ) : "
"if constant is true,","if constant is true,",if constant : ,if constant : 
"and var_arg, respectively.   if constant_arg is true,","and var0 respectively var1 if var2 is true,",if constant_arg : ,if var2 : 
"call the function constant_time_compare with 2 arguments: sig and return value of the self.signature method with an argument value,  if it evaluates to true,","call function var1 with 2 arguments: var2 and return value of var3 method with argument value var0 if it evaluates to true,","if constant_time_compare ( sig , self . signature ( value ) ) : ","if var1 ( var2 , var0self . var2nature ( value ) ) : "
"if construct is true,","if construct is true,",if construct : ,if construct : 
"if consume_next is true,","if var0 is true,",if consume_next : ,if var0 : 
"call the function contains with 2 arguments: elt and inst, if it evaluates to true,","call function contains with 2 arguments: var0 and inst, if it evaluates to true,","if contains ( elt , inst ) : ","if contains ( var0 , inst ) : "
"if call to the function contains with 2 arguments: last element of result and Group, evaluates to true,","if call to function contains with 2 arguments: last element of result and var0 evaluates to true,","if contains ( result [ - 1 ] , Group ) : ","if contains ( result [ - 1 ] , var0 ) : "
"if content_disposition is true,","if var0 is true,",if content_disposition : ,if var0 : 
"if content_length is lesser than integer 0,","if var0 is lesser var1 integer 0,",if content_length < 0 : ,if var0 < 0 : 
"if content_length is greater than settings.FILE_UPLOAD_MAX_MEMORY_SIZE,",if var0 is greater var2 settings var3 ,if content_length > settings . FILE_UPLOAD_MAX_MEMORY_SIZE : ,if var0 > settings . var3 : 
"if contents is not None,",if contents is not var0 ,if contents is not None : ,if contents is not var0 : 
"if CONTEXT_SEPARATOR is contained in result,","if var0 is contained in result,",if CONTEXT_SEPARATOR in result : ,if var0 in result : 
"if converter is true,","if converter is true,",if converter : ,if converter : 
check if count is not divisble by 2,check if count is not var0 by 2,if count % 2 != 0 : ,if count % 2 != 0 : 
if count is not even,if count is not even,if count % 2 != 0 : ,if count % 2 != 0 : 
if count is equal to integer 0.,if count is equal to integer 0.,if count == 0 : ,if count == 0 : 
if counter is even,if counter is even,if counter % 2 == 0 : ,if counter % 2 == 0 : 
if variable counter is divisible by 2,if variable counter is divisible by 2,if counter % 2 == 0 : ,if counter % 2 == 0 : 
"if csrf_token equals string 'NOTPROVIDED',","if var0 equals string var2,",if csrf_token == 'NOTPROVIDED' : ,if var0 == var2 : 
"if csrf_token is not None,",if var0 is not var2 ,if csrf_token is not None : ,if var0 is not var2 : 
"if css_classes is true,","if var0 is true,",if css_classes : ,if var0 : 
"if current_app and is true and current_app is contained in app_list,",if var0 and is true and var0 is contained in var2 ,if current_app and current_app in app_list : ,if var0 and var0 in var2 : 
"if current_len is smaller than or equal to length,","if var0 is smaller var1 or equal to length,",if current_len <= length : ,if var0 <= length : 
"if current_len equals truncate_len,",if var0 equals var1 ,if current_len == truncate_len : ,if var0 == var1 : 
"if tuple current_version elements are greater or equal to (3, 4), respectively,","if tuple var0 elements are greater or equal to (3, 4), respectively,","if current_version >= ( 3 , 4 ) : ","if var0 >= ( 3 , 4 ) : "
"if cursor is true,","if cursor is true,",if cursor : ,if cursor : 
"if both cursor and close_connection are true,","if both cursor and var0 are true,",if cursor and close_connection : ,if cursor and var0 : 
"if cursor is true and return value of the function connection.introspection.table_name_converter called with an arugment:  model._meta.db_table is contained in table_names,",if cursor is true and return value of function connection.introspection var2 called with arugment: model._meta var5 is contained in var6var0,if cursor and connection . introspection . table_name_converter ( model . _meta . db_table ) in table_names : ,if cursor and connection . introspection . var2 ( model . _meta . var5 ) in var6 : 
"if custom_sql is empty,","if var0 is empty,",if custom_sql : ,if var0 : 
"if cword equlals a integer 1,","if var0 var1 integer 1,",if cword == 1 : ,if var0 == 1 : 
"if first element of cwords equals a string 'runfcgi',","if first element of var0 equals string var1,",if cwords [ 0 ] == 'runfcgi' : ,if var0 [ 0 ] == var1 : 
"if daemonize is true,","if var0 is true,",if daemonize : ,if var0 : 
"if data is true,","if data is true,",if data : ,if data : 
element of data at the index last equals to newline bytes character.,element of data at index last equals to var0 bytes character.,if data [ last : last + 1 ] == b'\n' : ,if data [ last : last + 1 ] == b'\n' : 
element of data at the index last equals to carriage return bytes character.,element of data at index last equals to carriage return bytes character.,if data [ last : last + 1 ] == b'\r' : ,if data [ last : last + 1 ] == b'\r' : 
"if data is not None or FILE_INPUT_CONTRADICTION,",if data is not var0 or var1 ,"if data in ( None , FILE_INPUT_CONTRADICTION ) : ","if data in ( var0 , var1 ) : "
"substitute it for data.   if data is contained in seen_data,",substitute it for data var0 if data is contained in var1 ,if data in seen_data : ,if data in var1 : 
"if data is contained in self.children,",if data is contained in var0 ,if data in self . children : ,if data in var0 : 
"if data in self.empty_values is true,","if data in self var1 is true,",if data in self . empty_values : ,if data in self . var1 : 
"if data is boolean False,",if data is boolean var0 ,if data is False : ,if data is var0 : 
"if data is bound to the same object as FILE_INPUT_CONTRADICTION,",if data is bound to same object as var0 ,if data is FILE_INPUT_CONTRADICTION : ,if data is var0 : 
"if data is None,",if data is var0 ,if data is None : ,if data is var0 : 
"RemovedInDjango19Warning and stacklevel set to integer 2.   if data is None or data is an instance of dict type,","var0 and var1 set to integer 2 var2 if data is var3 or data is instance of var4 type,","if data is None or isinstance ( data , dict ) : ","if data is var3 or isinstance ( data , var4 ) : "
"if data is not None,",if data is not var0 ,if data is not None : ,if data is not var0 : 
"if data_list is true,","if var0 is true,",if data_list : ,if var0 : 
"if first element of data_list is contained in self.empty_values,",if first element of var0 is contained in self var2 ,if data_list [ 0 ] in self . empty_values : ,if var0 [ 0 ] in self . var2 : 
"if second element of data_list is contained in self.empty_values,",if second element of var0 is contained in self var2 ,if data_list [ 1 ] in self . empty_values : ,if var0 [ 1 ] in self . var2 : 
"if date is not None,",if date is not var0 ,if date is not None : ,if date is not var0 : 
"if day_of_year is smaller than or equalt to jan1_weekday subtracted from integer 8 and jan1_weekday is greater than integer 4,","if var0 is smaller var1 or var3 to var4 subtracted from integer 8 and var4 is greater var1 integer 4,",if day_of_year <= ( 8 - jan1_weekday ) and jan1_weekday > 4 : ,if var0 <= ( 8 - var4 ) and var4 > 4 : 
"append the resulting string to dec_part, substitute it for dec_part.   if dec_part is true,","append resulting string to var0 substitute it for var0 if var0 is true,",if dec_part : ,if var0 : 
"if decimal_pos is not None,",if var0 is not var2 ,if decimal_pos is not None : ,if var0 is not var2 : 
if decimal_pos is not None,if var0 is not var2,if decimal_pos is not None : ,if var0 is not var2 : 
"if decimal_separator is contained in value,","if var0 is contained in value,",if decimal_separator in value : ,if var0 in value : 
"if decimals is greater than digits,","if decimals is greater var0 digits,",if decimals > digits : ,if decimals > digits : 
"if decompress is true,","if decompress is true,",if decompress : ,if decompress : 
"if default is None,",if default is var0 ,if default is None : ,if default is var0 : 
"if default is true and RAISE_ERROR is false,","if default is true and var0 is false,",if default is not RAISE_ERROR : ,if default is not var0 : 
"if DEFAULT_CACHE_ALIAS is not contained in settings.CACHES,",if var0 is not contained in settings var1 ,if DEFAULT_CACHE_ALIAS not in settings . CACHES : ,if var0 not in settings . var1 : 
"if default_list is None,",if var0 is var2 ,if default_list is None : ,if var0 is var2 : 
"where '%s' is replaced with name.   if defaults is not None,",var0 var1 is replaced with name var2 if defaults is not var3 ,if defaults is not None : ,if defaults is not var3 : 
"if definition is true,","if definition is true,",if definition : ,if definition : 
"if delta is smaller than integer 0,","if delta is smaller var0 integer 0,",if delta < 0 : ,if delta < 0 : 
if delta is smaller than integer 0.,if delta is smaller var0 integer 0.,if delta < 0 : ,if delta < 0 : 
"if deps is true,","if var0 is true,",if deps : ,if var0 : 
"if digest is None,",if digest is var0 ,if digest is None : ,if digest is var0 : 
"if dirname starts with character '.' or dirname equals a string '__pycache__',","if var0 starts with character var2 or var0 equals string var3,",if dirname . startswith ( '.' ) or dirname == '__pycache__' : ,if var0 . startswith ( var2 ) or var0 == '__pycache__' : 
"if dirname is true and dirname directory doesnt exists,","if var0 is true and var0 directory doesnt exists,",if dirname and not os . path . exists ( dirname ) : ,if var0 and not os . path . exists ( var0 ) : 
"if dirname is true and dirname path doesnt exists,","if var0 is true and var0 path doesnt exists,",if dirname and not os . path . exists ( dirname ) : ,if var0 and not os . path . exists ( var0 ) : 
"if display_num_errors is true,","if var0 is true,",if display_num_errors : ,if var0 : 
"if second last element of django.VERSION is not equal to a string 'final',","if second last element of var0 var1 is not equal to string var2,",if django . VERSION [ - 2 ] != 'final' : ,if var0 . var1 [ - 2 ] != var2 : 
"bring intger 2 to integer 32, decrement the result by 1, multiply it with hlen, if dklen is greater than the previous result,","bring var0 2 to integer 32, decrement result by 1, multiply it with var1 if var2 is greater var3 previous result,",if dklen > ( 2 ** 32 - 1 ) * hlen : ,if var2 > ( 2 ** 32 - 1 ) * var1 : 
"if domain is true,","if domain is true,",if domain : ,if domain : 
"if domain equals a string 'djangojs' and file_ext is contained in command.extensions,",if domain equals string var0 and var1 is contained in var3 ,if domain == 'djangojs' and file_ext in command . extensions : ,if domain == var0 and var1 in var3 : 
"if domain is true and return value of the function validate_host called with 2 arguments: domain and settings.ALLOWED_HOSTS, evaluates to true,","if domain is true and return value of function var0 called with 2 arguments: domain and settings var2 evaluates to true,","if domain and validate_host ( domain , settings . ALLOWED_HOSTS ) : ","if domain and var0 ( domain , settings . var2 ) : "
"if domain is not None,",if domain is not var0 ,if domain is not None : ,if domain is not var0 : 
"if doublecolon_len is greater than best_doublecolon_len,",if var0 is greater var1 var2 ,if doublecolon_len > best_doublecolon_len : ,if var0 > var2 : 
"if doublecolon_start equals integer -1,",if var0 equals integer var1 ,if doublecolon_start == - 1 : ,if var0 == - 1 : 
"if dt.year is greater than or equal to integer 1900,","if var0 is greater var1 or equal to integer 1900,",if dt . year >= 1900 : ,if var0 >= 1900 : 
"if e.args list first element starts with string ""Error -5"",","if var0 list first element starts with string var1,",if e . args [ 0 ] . startswith ( 'Error -5' ) : ,if var0 [ 0 ] . startswith ( 'Error -5' ) : 
"if first element of e.args is not contained in not_found,",if first element of var0 is not contained in var1 ,if e . args [ 0 ] not in not_found : ,if var0 [ 0 ] not in var1 : 
"if e.errno is not equal to errno.EEXIST,",if var0 is not equal to var1 var2 ,if e . errno != errno . EEXIST : ,if var0 != var1 . var2 : 
"if e.errno does not equals to errno.ENOENT,",if var0 does not equals to var1 var2 ,if e . errno != errno . ENOENT : ,if var0 != var1 . var2 : 
"if e.errno equals to errno.EEXIST,",if var0 equals to var1 var2 ,if e . errno != errno . ENOENT : ,if var0 != var1 . ENOENT : 
"if e.errno is not equal to errno.ENOENT,",if var0 is not equal to var1 var2 ,if e . errno != errno . ENOENT : ,if var0 != var1 . var2 : 
"if e.errno equals to errno.EEXIST,",if var0 equals to var1 var2 ,if e . errno == errno . EEXIST : ,if var0 == var1 . var2 : 
"if e.errno equals errno.EEXIST,",if var0 equals var1 var2 ,if e . errno == errno . EEXIST : ,if var0 == var1 . var2 : 
"if e.errno equals to errno.ENOENT,",if var0 equals to var1 var2 ,if e . errno == errno . ENOENT : ,if var0 == var1 . var2 : 
"if empty_label is not None,",if var0 is not var2 ,if empty_label is not None : ,if var0 is not var2 : 
if encoding equals to string 'utf-8'.,if encoding equals to string var0.,if encoding == 'utf-8' : ,if encoding == var0 : 
"with it replace %r in the string ""junk characters in start tag: %r"",   call the method self.error with the resulting string as an argument.   if string end ends with string '/>',","with it replace %r in string var0 var1 call method var3 with resulting string as argument var1 if string end ends with string var4,",if end . endswith ( '/>' ) : ,if end . endswith ( var4 ) : 
"if end is lesser than integer 0,","if end is lesser var0 integer 0,",if end < 0 : ,if end < 0 : 
if end is None,if end is var0,if end is None : ,if end is var0 : 
"if end is not None,",if end is not var0 ,if end is not None : ,if end is not var0 : 
"if end is not a '>' or '/>' character,","if end is not var0 or var1 character,","if end not in ( '>' , '/>' ) : ","if end not in ( var0 , '/>' ) : "
"if end_index is None and s_len is greater than truncate_len,",if var0 is var2 and var3 is greater var5 var6 ,if end_index is None and s_len > truncate_len : ,if var0 is var2 and var3 > var6 : 
"if endblock.contents is not contained in acceptable_endblocks,",if var0 is not contained in var1 ,if endblock . contents not in acceptable_endblocks : ,if var0 not in var1 : 
"if endbmatch is true,","if var0 is true,",if endbmatch : ,if var0 : 
"if ending is true and msg doesnt end with ending,","if ending is true and msg doesnt end with ending,",if ending and not msg . endswith ( ending ) : ,if ending and not msg . endswith ( ending ) : 
"if endpos is lesser than zero,","if var0 is lesser var1 zero,",if endpos < 0 : ,if var0 < 0 : 
"if err_log is true,","if var0 is true,",if err_log : ,if var0 : 
"if error.code equals code,","if var0 equals code,",if error . code == code : ,if var0 == code : 
"if error.params is true,","if var0 is true,",if error . params : ,if var0 : 
"if error_class is None,",if var0 is var2 ,if error_class is None : ,if var0 is var2 : 
"if error_message is not None,",if var0 is not var2 ,if error_message is not None : ,if var0 is not var2 : 
"if error_messages is true and f.name is contained in error_messages,",if var0 is true and var2 is contained in var0 ,if error_messages and f . name in error_messages : ,if var0 and var2 in var0 : 
"if error_messages is not None,",if var0 is not var2 ,if error_messages is not None : ,if var0 is not var2 : 
"if errors is True,",if errors is var0 ,if errors : ,if errors : 
"if errors is None,",if errors is var0 ,if errors is None : ,if errors is var0 : 
"if errors_on_separate_row and bf_errors are both true,","if var0 and var1 are both true,",if errors_on_separate_row and bf_errors : ,if var0 and var1 : 
"if escaped is true,","if escaped is true,",if escaped : ,if escaped : 
"if event.path ends with string '.mo',","if var0 ends with string var1,",if event . path . endswith ( '.mo' ) : ,if var0 . endswith ( var1 ) : 
"if event equals a string ""START_ELEMENT"" and node.nodeName equals a string 'object',","if event equals string var0 and node var2 equals string var3,",if event == 'START_ELEMENT' and node . nodeName == 'object' : ,if event == 'START_ELEMENT' and node . var2 == var3 : 
"if exclude is true and f.name is contained in exclude,","if exclude is true and var0 is contained in exclude,",if exclude and f . name in exclude : ,if exclude and var0 in exclude : 
"if exclude is not None,",if exclude is not var0 ,if exclude is not None : ,if exclude is not var0 : 
"if exctype is not WindowsError or string 'Access is denied' is not contained in value converted into a string,","if var0 is not var1 or string var3 is not contained in value converted into string,",if exctype is not WindowsError or 'Access is denied' not in str ( value ) : ,if var0 is not var1 or var3 not in str ( value ) : 
if exit_code is not equal to integer 3.,if var0 is not equal to integer 3.,if exit_code != 3 : ,if var0 != 3 : 
"if exit_code is lesser than integer 0,","if var0 is lesser var1 integer 0,",if exit_code < 0 : ,if var0 < 0 : 
"if exp is None or exp is greater than the return value of the call to the function time.time,",if var0 is var2 or var0 is greater var3 return value of call to function var4 ,if exp is None or exp > time . time ( ) : ,if var0 is var2 or var0 > var4 ( ) : 
"if exp is not None and exp is lesser than return value of the function time.time,",if var0 is not var2 and var0 is lesser var3 return value of function var4 ,if exp is not None and exp < time . time ( ) : ,if var0 is not var2 and var0 < var4 ( ) : 
"if expires is lesser than now,","if expires is lesser var0 now,",if expires < now : ,if expires < now : 
"if expires is not None,",if expires is not var0 ,if expires is not None : ,if expires is not var0 : 
"if ext is true,","if var0 is true,",if ext : ,if var0 : 
"if extend is true,","if extend is true,",if extend : ,if extend : 
"if extend is boolean True,",if extend is boolean var0 ,if extend is True : ,if extend is var0 : 
"if extra_attrs is true,","if var0 is true,",if extra_attrs : ,if var0 : 
"or with string 'models.' if it is not and field_type.   if extra_params is true,","or with string var0 if it is not and var1 if var4 is true,",if extra_params : ,if var4 : 
"if extracted is true,","if extracted is true,",if extracted : ,if extracted : 
"if f.db_index is true,","if f var1 is true,",if f . db_index : ,if f . var1 : 
"if f.name is contained in cleaned_data,",if var0 is contained in var1 ,if f . name in cleaned_data : ,if var0 in var1 : 
"if f.primary_key is true,","if f var1 is true,",if f . primary_key : ,if f . var1 : 
"if f.rel and f.rel.to are not contained in to_delete,",if var0 and var0 to are not contained in var2 ,if f . rel and f . rel . to not in to_delete : ,if var0 and var0 . to not in var2 : 
"if f equals to string '__pycache__',","if f equals to string var0,",if f == '__pycache__' : ,if f == var0 : 
"if f is None,",if f is var0 ,if f is None : ,if f is var0 : 
"if failures is true,","if failures is true,",if failures : ,if failures : 
"if fake is true,","if fake is true,",if fake : ,if fake : 
"evaluate the fd.isatty method, if the result is true,","evaluate fd.isatty method, if result is true,",if fd . isatty ( ) : ,if fd . isatty ( ) : 
if fd is greater or equal to integer 0.,if var0 is greater or equal to integer 0.,if fd >= 0 : ,if var0 >= 0 : 
"if fdel is not None,",if var0 is not var1 ,if fdel is not None : ,if var0 is not var1 : 
"if fg is contained in color_names,",if var0 is contained in var1 ,if fg in color_names : ,if var0 in var1 : 
"if fget is not None,",if var0 is not var1 ,if fget is not None : ,if var0 is not var1 : 
"if field is not equal to NON_FIELD_ERRORS and field is not contained in self.fields,",if field is not equal to var0 and field is not contained in var1 ,if field != NON_FIELD_ERRORS and field not in self . fields : ,if field != var0 and field not in var1 : 
"call the method field._has_changed with 2 arguments: return value of the function field.to_python called with an argument initial,","call method var0 with 2 arguments: return value of function field var2 called with argument initial,","if field . _has_changed ( field . to_python ( initial ) , data ) : ","if var0 ( field . var2 ( initial ) , data ) : "
"call the method field._has_changed with 2 arguments: initial_value and data_value, if it evaluates to true,","call method var0 with 2 arguments: var1 and var2 if it evaluates to true,","if field . _has_changed ( initial_value , data_value ) : ","if var0 ( var1 , var2 ) : "
"get the value under the 'incomplete' key of the field.error_messages dictionary, if it is not contained in errors,","get value under var0 key of field var2 dict, if it is not contained in errors,",if field . error_messages [ 'incomplete' ] not in errors : ,if field . var2 [ var0 ] not in errors : 
"if field.help_text is true,","if field var1 is true,",if field . help_text : ,if field . var1 : 
"if field.rel.through._meta.auto_created is true,","if field.rel.through._meta var1 is true,",if field . rel . through . _meta . auto_created : ,if field . rel . through . _meta . var1 : 
"if field.rel.to._meta.pk.rel is true,","if var0 is true,",if field . rel . to . _meta . pk . rel : ,if var0 : 
"if field.rel is true, and field.rel is an instance of models.ManyToManyRel,","if var0 is true, and var0 is instance of models var1 ","if field . rel and isinstance ( field . rel , models . ManyToManyRel ) : ","if var0 and isinstance ( var0 , models . var1 ) : "
"if field.rel is true and field.rel is an instance of models.ManyToManyRel,",if var0 is true and var0 is instance of models var2 ,"if field . rel and isinstance ( field . rel , models . ManyToManyRel ) : ","if var0 and isinstance ( var0 , models . var2 ) : "
"if field.rel is None,",if field.rel is var0 ,if field . rel is None : ,if field . rel is var0 : 
"if field.serialize is true,","if var0 is true,",if field . serialize : ,if var0 : 
"if field.widget.needs_multipart_form is true,","if field.widget var1 is true,",if field . widget . needs_multipart_form : ,if field . widget . var1 : 
"if field equals NON_FIELD_ERRORS,",if field equals var0 ,if field == NON_FIELD_ERRORS : ,if field == var0 : 
"if field is contained in form.cleaned_data,",if field is contained in form var1 ,if field in form . cleaned_data : ,if field in form . var1 : 
"if field is contained in self.cleaned_data,",if field is contained in self var1 ,if field in self . cleaned_data : ,if field in self . var1 : 
"if field is contained in self.errors,",if field is contained in var0 ,if field in self . errors : ,if field in var0 : 
"if field is not None,",if field is not var0 ,if field is not None : ,if field is not var0 : 
"if field is not contained in self.errors,",if field is not contained in var0 ,if field not in self . errors : ,if field not in var0 : 
"if field is not contained in self.fields,",if field is not contained in var0 ,if field not in self . fields : ,if field not in var0 : 
"call the method field_node.getElementsByTagName with an argument string 'None', if it evaluates to true,","call method var0 var2 with argument string var3, if it evaluates to true,",if field_node . getElementsByTagName ( 'None' ) : ,if var0 . var2 ( var3 ) : 
"if field_type equals a string 'AutoField(',","if field_type equals a string 'AutoField(',",if field_type == 'AutoField(' : ,if field_type == 'AutoField(' : 
"if field_type equals a string 'BooleanField(',","if field_type equals a string 'BooleanField(',",if field_type == 'BooleanField(' : ,if field_type == 'BooleanField(' : 
"if field_type equals a string CharField' and fourth element of row is true,","if var0 equals string CharField' and fourth element of row is true,",if field_type == 'CharField' and row [ 3 ] : ,if var0 == 'var2' and row [ 3 ] : 
"if field_type equals a string 'DecimalField',","if var0 equals string var2,",if field_type == 'DecimalField' : ,if var0 == var2 : 
"if field_type is not equal to string 'TextField(' or string 'CharField(',","if field_type is not equal to string 'TextField(' or string 'CharField(',","if field_type not in ( 'TextField(' , 'CharField(' ) : ","if field_type not in ( 'TextField(' , 'CharField(' ) : "
"if field_value is cotained in self.empty_values,",if var0 is var1 in self var3 ,if field_value in self . empty_values : ,if var0 in self . var3 : 
"if field_value is not None,",if var0 is not var2 ,if field_value is not None : ,if var0 is not var2 : 
"if fields is true,","if fields is true,",if fields : ,if fields : 
"if fields is true and f.name is not contained in fields,","if fields is true and var0 is not contained in fields,",if fields and f . name not in fields : ,if fields and var0 not in fields : 
"if fields is not None,",if fields is not var0 ,if fields is not None : ,if fields is not var0 : 
"if fields is not None and f.name is not contained in fields,","if fields is not var0 and var1 is not contained in fields,",if fields is not None and f . name not in fields : ,if fields is not var0 and var1 not in fields : 
"and _, respectively.   if file_ is true,","and var0 respectively var1 if var2 is true,",if file_ : ,if var2 : 
"if file_obj is true,","if var0 is true,",if file_obj : ,if var0 : 
"if filename is true,","if filename is true,",if filename : ,if filename : 
"if filename ends with string '.mo',","if filename ends with string var0,",if filename . endswith ( '.mo' ) : ,if filename . endswith ( var0 ) : 
"if filename ends with string "".pyc"" or it ends with "".pyo"",","if filename ends with string var0 or it ends with var1,",if filename . endswith ( '.pyc' ) or filename . endswith ( '.pyo' ) : ,if filename . endswith ( '.pyc' ) or filename . endswith ( '.pyo' ) : 
"if filename ends with string ""$py.class"",","if filename ends with string var0,",if filename . endswith ( '$py.class' ) : ,if filename . endswith ( '$py.class' ) : 
"if filename ends with '.pyo', '.pyc' or '.py.class',","if filename ends with var0, var1 or var3,","if filename . endswith ( ( '.pyo' , '.pyc' , '.py.class' ) ) : ","if filename . endswith ( ( var0 , '.pyc' , '.py.class' ) ) : "
"if filename ends with '/' or with '\\',","if filename ends with var0 or with var1,","if filename . endswith ( ( '/' , '\\' ) ) : ","if filename . endswith ( ( var0 , '\\' ) ) : "
"if filename ends with extensions or filename is contained in extra_files,",if filename ends with extensions or filename is contained in var0 ,if filename . endswith ( extensions ) or filename in extra_files : ,if filename . endswith ( extensions ) or filename in var0 : 
"if filename is true and filename path doesnt exist,","if filename is true and filename path doesnt exist,",if filename and not os . path . exists ( filename ) : ,if filename and not os . path . exists ( filename ) : 
"if filename is not contained in _error_files,",if filename is not contained in var0 ,if filename not in _error_files : ,if filename not in var0 : 
"if filename is not contained in _mtimes,",if filename is not contained in var0 ,if filename not in _mtimes : ,if filename not in var0 : 
"if filepath starts with root,","if var0 starts with root,",if filepath . startswith ( root ) : ,if var0 . startswith ( root ) : 
"if every filter_name in strings 'escape' or 'safe',","if every var0 in strings var2 or var3,","if filter_name in ( 'escape' , 'safe' ) : ","if var0 in ( var2 , 'safe' ) : "
"if filter_name is contained in self.filters,",if var0 is contained in var1 ,if filter_name in self . filters : ,if var0 in var1 : 
"if filters is true,","if filters is true,",if filters : ,if filters : 
"call the function find_command with an argument program, if it evaluates to None,","call function var0 with argument program, if it evaluates to var2 ",if find_command ( program ) is None : ,if var0 ( program ) is var2 : 
"if evaluation of the function find_command with self.program as argument equals to None,",if evaluation of function var0 with var2 as argument equals to var3 ,if find_command ( self . program ) is None : ,if var0 ( var2 ) is var3 : 
"if call to the method finder.find_module with 2 arguments: name and package_path evaluates to true,","if call to method finder var1 with 2 arguments: name and var2 evaluates to true,","if finder . find_module ( name , package_path ) : ","if finder . var1 ( name , var2 ) : "
"if call to the method finder.find_module with an argument name evaluates to true,","if call to method finder var1 with argument name evaluates to true,",if finder . find_module ( name ) : ,if finder . var1 ( name ) : 
"if finder is None,",if finder is var0 ,if finder is None : ,if finder is var0 : 
"if first is true,","if first is true,",if first : ,if first : 
"if fixture_name is not equal to string 'initial_data' and fixture_files is false,","if var0 is not equal to string var2 and var3 is false,",if fixture_name != 'initial_data' and not fixture_files : ,if var0 != var2 and not var3 : 
"if fk.unique is boolean true,","if var0 is boolean true,",if fk . unique : ,if var0 : 
"if fk_name is true,","if var0 is true,",if fk_name : ,if var0 : 
"if flags is not None,",if flags is not var0 ,if flags is not None : ,if flags is not var0 : 
"convert value to an floating point number if it is not equal to integer 1,","convert value to floating point number if it is not equal to integer 1,",if float ( value ) != 1 : ,if float ( value ) != 1 : 
"call the function force_text with an argument val, if the result is not contained in pks,",call function var0 with argument var1 if result is not contained in var2 ,if force_text ( val ) not in pks : ,if var0 ( var1 ) not in var2 : 
"if return values of the function force_text called two times with 1 argument, with value, and with orig, are equal,","if return values of function var0 called two times with 1 argument, with value, and with var1 are equal,",if force_text ( value ) != force_text ( orig ) : ,if var0 ( value ) != var0 ( var1 ) : 
"self.instance and unpacked dictionary kwargs.   if form._meta.fields is true,","var0 and unpacked dict var1 if var3 is true,",if form . _meta . fields : ,if var3 : 
"if form._meta.widgets is true,","if var0 is true,",if form . _meta . widgets : ,if var0 : 
"if form.errors is true,","if var0 is true,",if form . errors : ,if var0 : 
"if form.is_bound is true,","if form var1 is true,",if form . is_bound : ,if form . var1 : 
"if form is contained in forms_to_delete,",if form is contained in var0 ,if form in forms_to_delete : ,if form in var0 : 
"if format is not contained in _serializers,",if format is not contained in var0 ,if format not in _serializers : ,if format not in var0 : 
"if format is not contained in return value of the method serializers.get_public_serializer_formats,",if format is not contained in return value of method serializers var1 ,if format not in serializers . get_public_serializer_formats ( ) : ,if format not in serializers . var1 ( ) : 
"if format_module_path is true,","if var0 is true,",if format_module_path : ,if var0 : 
if format_module_path is None.,if var0 is var2 ,if format_module_path is None : ,if var0 is var2 : 
"if formatter is true,","if var0 is true,",if formatter : ,if var0 : 
"if formfield is true,","if var0 is true,",if formfield : ,if var0 : 
"if formfield_callback is None,",if var0 is var2 ,if formfield_callback is None : ,if var0 is var2 : 
"if found is true,","if found is true,",if found : ,if found : 
"if fp is None,",if var0 is var1 ,if fp is None : ,if var0 is var1 : 
"if fset is not None,",if var0 is not var1 ,if fset is not None : ,if var0 is not var1 : 
"if func is None,",if var0 is var1 ,if func is None : ,if var0 is var1 : 
"if first element of g equals a string '""',","if first element of g equals string var0,",if g [ 0 ] == ''' : ,if g [ 0 ] == ''' : 
"get the 'do_not_call_in_templates' attribute of current object, if it exists and is true,","get var0 attribute of current object, if it exists and is true,","if getattr ( current , 'do_not_call_in_templates' , False ) : ","if getattr ( current , var0 , False ) : "
"get the 'silent_variable_failure' attribute of e object, if it exists and is true,","get var0 attribute of e object, if it exists and is true,","if getattr ( e , 'silent_variable_failure' , False ) : ","if getattr ( e , var0 , False ) : "
"if attribute 'winerror' of object e is not equal to integer 32 and if 'errno' attribute is not equal to integer 13,","if attribute var0 of object e is not equal to integer 32 and if var1 attribute is not equal to integer 13,","if getattr ( e , 'winerror' , 0 ) != 32 and getattr ( e , 'errno' , 0 ) != 13 : ","if getattr ( e , var0 , 0 ) != 32 and getattr ( e , 'errno' , 0 ) != 13 : "
"if 'filename' attribute of ev is None,",if var0 attribute of ev is var1 ,"if getattr ( ev , 'filename' , None ) is None : ","if getattr ( ev , var0 , var1 ) is var1 : "
"if 'expects_localtime' attribute of func object exists and is true,","if var0 attribute of var1 object exists and is true,","if getattr ( func , 'expects_localtime' , False ) : ","if getattr ( var1 , var0 , False ) : "
"if 'is_safe' attribute of func object exists and is true and obj is an instance of SafeData,",if var0 attribute of var1 object exists and is true and var2 is instance of var3 ,"if getattr ( func , 'is_safe' , False ) and isinstance ( obj , SafeData ) : ","if getattr ( var1 , var0 , False ) and isinstance ( var2 , var3 ) : "
"if 'needs_autoescape' attribute of func object exists and is true,","if var0 attribute of var1 object exists and is true,","if getattr ( func , 'needs_autoescape' , False ) : ","if getattr ( var1 , var0 , False ) : "
"and return value of the field.get_internal_type method for 'type'.   if field.name attribute of obj is not None,",and return value of field var1 method for var2 var3 if var4 attribute of var5 is not var6 ,"if getattr ( obj , field . name ) is not None : ","if getattr ( var5 , var4 ) is not var6 : "
"if self object has an attribute '_client',","if self object has attribute var0,","if getattr ( self , '_client' , None ) is None : ","if getattr ( self , var0 , None ) is None : "
"if attribute '_client' of the self object is None,",if attribute var0 of self object is var1 ,"if getattr ( self , '_client' , None ) is None : ","if getattr ( self , var0 , var1 ) is var1 : "
"call the method gettext_module.find with 3 arguments: string 'django', path and list with an element: result of the function,","call method var0 find with 3 arguments: string var1, path and list with element: result of function,","if gettext_module . find ( 'django' , path , [ to_locale ( lang_code ) ] ) is not None : ","if var0 . find ( var1 , path , [ to_locale ( lang_code ) ] ) is not None : "
"if git_changeset is true,","if var0 is true,",if git_changeset : ,if var0 : 
"if replaces filed of graph.nodes element at the plan_node index is true,","if replaces filed of var0 element at var1 index is true,",if graph . nodes [ plan_node ] . replaces : ,if var0 [ var1 ] . replaces : 
"if handlers is true,","if handlers is true,",if handlers : ,if handlers : 
evaluate function has_bom with po_path as argument.,evaluate function var0 with var1 as argument.,if has_bom ( po_path ) : ,if var0 ( var1 ) : 
"tuple with 2 arguments: gzip.GzipFile and string 'rb' for 'gz', tuple with 2 arguments: SingleZipReader and string 'r' for 'gzip'.   if has_bz2 is true,","tuple with 2 arguments: gzip var3 and string var5 for var6, tuple with 2 arguments: var7 and string var9 for var10 var11 if var12 is true,",if has_bz2 : ,if var12 : 
"if has_old_option is true,","if var0 is true,",if has_old_option : ,if var0 : 
"in favor of ""requires_system_checks"".' and RemovedInDjango19Warning.   if has_old_option and has_new_option are both true,","in favor of var0.' and var1 if var4 and var6 are both true,",if has_old_option and has_new_option : ,if var4 and var6 : 
"if active has an attribute 'value',","if active has attribute var0,","if hasattr ( _active , 'value' ) : ","if hasattr ( _active , var0 ) : "
"if _active has an attribute ""value"",","if var0 has attribute var1,","if hasattr ( _active , 'value' ) : ","if hasattr ( var0 , 'value' ) : "
"if _urlconfs has an attribute 'value',","if var0 has attribute var1,","if hasattr ( _urlconfs , 'value' ) : ","if hasattr ( var0 , var1 ) : "
if base has an attribute 'base_fields'.,if base has attribute var0.,"if hasattr ( base , 'base_fields' ) : ","if hasattr ( base , var0 ) : "
"if base has an 'declared_fields' attribute,","if base has var0 attribute,","if hasattr ( base , 'declared_fields' ) : ","if hasattr ( base , var0 ) : "
"if base has an attribute 'declared_fields',","if base has attribute var0,","if hasattr ( base , 'declared_fields' ) : ","if hasattr ( base , var0 ) : "
"if cls has an attribute k,","if cls has attribute k,","if hasattr ( cls , k ) : ","if hasattr ( cls , k ) : "
"if content has an attribute 'temporary_file_path',","if content has attribute var0,","if hasattr ( content , 'temporary_file_path' ) : ","if hasattr ( content , var0 ) : "
"if data has an attribute 'read',","if data has attribute var0,","if hasattr ( data , 'read' ) : ","if hasattr ( data , var0 ) : "
"if data has an 'temporary_file_path' attribute,","if data has var0 attribute,","if hasattr ( data , 'temporary_file_path' ) : ","if hasattr ( data , var0 ) : "
"called with an argument decorator.   if decorator has an attribute 'process_view',","called with argument decorator var0 if decorator has attribute var1,","if hasattr ( decorator , '__name__' ) : ","if hasattr ( decorator , '__name__' ) : "
"if e has an attribute 'code' and e.code is contained in self.error_messages,",if e has attribute var0 and var1 is contained in self var3 ,"if hasattr ( e , 'code' ) and e . code in self . error_messages : ","if hasattr ( e , var0 ) and var1 in self . var3 : "
"if error has an attribute 'error_dict',","if error has attribute var0,","if hasattr ( error , 'error_dict' ) : ","if hasattr ( error , var0 ) : "
"if extra_classes has an attribute 'split',","if var0 has attribute var2,","if hasattr ( extra_classes , 'split' ) : ","if hasattr ( var0 , var2 ) : "
"value under the 'invalid_image' key of the self.error_messages dictionary and code set to a string 'invalid_image',   and third element of the return value of the function sys.exc_info.   if f has an attribute 'seek' and if f.seek is an callable object,","value under var0 key of self var3 dict and code set to string var0 var4 and third element of return value of function sys var7 if f has attribute var8 and if var9 is callable object,","if hasattr ( f , 'seek' ) and callable ( f . seek ) : ","if hasattr ( f , var8 ) and callable ( var9 ) : "
"if field.rel has an 'to' attribute,","if var0 has var1 attribute,","if hasattr ( field . rel , 'to' ) : ","if hasattr ( var0 , var1 ) : "
"if field.rel.to._default_manager has an attribute 'get_by_natural_key',","if var0 has attribute var1,","if hasattr ( field . rel . to . _default_manager , 'get_by_natural_key' ) : ","if hasattr ( var0 , var1 ) : "
"if field.rel.to._default_manager has an 'get_by_natural_key' attribute,","if var0 has var1 attribute,","if hasattr ( field . rel . to . _default_manager , 'get_by_natural_key' ) : ","if hasattr ( var0 , var1 ) : "
"if field.rel.to._default_manager has an atttribute 'get_by_natural_key',","if var0 has var1 var2,","if hasattr ( field . rel . to . _default_manager , 'get_by_natural_key' ) : ","if hasattr ( var0 , var2 ) : "
"if field_value has an attribute '__iter__' and is not an instance of six.text_type object,","if var0 has attribute var2 and is not instance of six var4 object,","if hasattr ( field_value , '__iter__' ) and not isinstance ( field_value , six . text_type ) : ","if hasattr ( var0 , var2 ) and not isinstance ( var0 , six . var4 ) : "
"if file object has an attribute 'mode',","if file object has attribute var0,","if hasattr ( file , 'mode' ) : ","if hasattr ( file , var0 ) : "
"if file_or_path has an attribute 'read',","if var0 has attribute var2,","if hasattr ( file_or_path , 'read' ) : ","if hasattr ( var0 , var2 ) : "
"if filter_func has an attribute ""_decorated_function"",","if var0 has attribute var2,","if hasattr ( filter_func , '_decorated_function' ) : ","if hasattr ( var0 , '_decorated_function' ) : "
"if form has an attribute 'Meta',","if form has attribute var0,","if hasattr ( form , 'Meta' ) : ","if hasattr ( form , var0 ) : "
"if formfield has an attribute 'queryset',","if var0 has attribute var1,","if hasattr ( formfield , 'queryset' ) : ","if hasattr ( var0 , var1 ) : "
"if get_git_changeset has an attribute 'cache',","if var0 has attribute var2,","if hasattr ( get_git_changeset , 'cache' ) : ","if hasattr ( var0 , var2 ) : "
"if handler has an attribute 'file',","if handler has attribute var0,","if hasattr ( handler , 'file' ) : ","if hasattr ( handler , var0 ) : "
"use the result as an argument for the call to the function binascii.unhexlify, return the result.   if hashlib had an instance ""pbkdf2_hmac"",","use result as argument for call to function var0 return result var1 if var2 had instance var3,","if hasattr ( hashlib , 'pbkdf2_hmac' ) : ","if hasattr ( var2 , 'pbkdf2_hmac' ) : "
"join the results into a string, return it.   if hmac has an attribute ""compare_digest"",","join results into string, return it var0 if var1 has attribute var2,","if hasattr ( hmac , 'compare_digest' ) : ","if hasattr ( var1 , 'compare_digest' ) : "
"if message has an 'error_dict' attribute,","if message has var0 attribute,","if hasattr ( message , 'error_dict' ) : ","if hasattr ( message , var0 ) : "
"if middleware has an attribute 'process_exception',","if var0 has attribute var1,","if hasattr ( middleware , 'process_exception' ) : ","if hasattr ( var0 , var1 ) : "
"if middleware has an attribute 'process_request',","if var0 has attribute var1,","if hasattr ( middleware , 'process_request' ) : ","if hasattr ( var0 , var1 ) : "
"if middleware has an attribute 'process_response',","if var0 has attribute var1,","if hasattr ( middleware , 'process_response' ) : ","if hasattr ( var0 , var1 ) : "
"if middleware has an attribute 'process_response',","if var0 has attribute var1,","if hasattr ( middleware , 'process_template_response' ) : ","if hasattr ( var0 , 'process_template_response' ) : "
"if middleware has an attribute 'process_view',","if var0 has attribute var1,","if hasattr ( middleware , 'process_view' ) : ","if hasattr ( var0 , var1 ) : "
"if model has an 'natural_key' attribute,","if model has var0 attribute,","if hasattr ( model , 'natural_key' ) : ","if hasattr ( model , var0 ) : "
if mw_instance has an attribute named 'process_exception'.,if var0 has attribute named var2.,"if hasattr ( mw_instance , 'process_exception' ) : ","if hasattr ( var0 , var2 ) : "
if mw_instance has an attribute named 'process_request'.,if var0 has attribute named var2.,"if hasattr ( mw_instance , 'process_request' ) : ","if hasattr ( var0 , var2 ) : "
if mw_instance has an attribute named 'process_response'.,if var0 has attribute named var2.,"if hasattr ( mw_instance , 'process_response' ) : ","if hasattr ( var0 , var2 ) : "
if mw_instance has an attribute named 'process_template_response'.,if var0 has attribute named var2.,"if hasattr ( mw_instance , 'process_template_response' ) : ","if hasattr ( var0 , var2 ) : "
if mw_instance has an attribute named 'process_view'.,if var0 has attribute named var2.,"if hasattr ( mw_instance , 'process_view' ) : ","if hasattr ( var0 , var2 ) : "
"if os has an attribute 'chmod',","if os has attribute var0,","if hasattr ( os , 'chmod' ) : ","if hasattr ( os , var0 ) : "
"if os has an attribute 'utime',","if os has attribute var0,","if hasattr ( os , 'utime' ) : ","if hasattr ( os , var0 ) : "
"if os.path has an attribute 'samefile',","if var0 has attribute var1,","if hasattr ( os . path , 'samefile' ) : ","if hasattr ( var0 , var1 ) : "
"if out has an 'isatty' argument and return value of the function out.isatty is true,","if out has var0 argument and return value of function var1 is true,","if hasattr ( out , 'isatty' ) and out . isatty ( ) : ","if hasattr ( out , var0 ) and var1 ( ) : "
"if parent has an attribute 'render',","if parent has attribute var0,","if hasattr ( parent , 'render' ) : ","if hasattr ( parent , var0 ) : "
"if pattern has an attribute '_callback_str',","if pattern has attribute var0,","if hasattr ( pattern , '_callback_str' ) : ","if hasattr ( pattern , var0 ) : "
"if rel_model has an attribute 'natural_key' and rel_model is not equal to model,","if var0 has attribute var4 and var0 is not equal to model,","if hasattr ( rel_model , 'natural_key' ) and rel_model != model : ","if hasattr ( var0 , var4 ) and var0 != model : "
"if rel_model has an 'natural_key' attribute and rel_model is not equal to model,","if var0 has var4 attribute and var0 is not equal to model,","if hasattr ( rel_model , 'natural_key' ) and rel_model != model : ","if hasattr ( var0 , var4 ) and var0 != model : "
"if request has an attribute 'session',","if request has attribute var0,","if hasattr ( request , 'session' ) : ","if hasattr ( request , var0 ) : "
"if request has an attribute named 'urlconf',","if request has attribute named var0,","if hasattr ( request , 'urlconf' ) : ","if hasattr ( request , var0 ) : "
"with the name of the module callback is in and the view_name, respectively, use it as the argument for the ValueError exception raise.   if response has an attribute named 'render' and response.render is a callable function,","with name of module callback is in and var0 respectively, use it as argument for var2 exception raise var4 if response has attribute named var5 and var6 is callable function,","if hasattr ( response , 'render' ) and callable ( response . render ) : ","if hasattr ( response , var5 ) and callable ( var6 ) : "
"if object response has an attribute 'render' and if response.render is callable object,","if object response has attribute var0 and if var1 is callable object,","if hasattr ( response , 'render' ) and callable ( response . render ) : ","if hasattr ( response , var0 ) and callable ( var1 ) : "
"if response has an attribute 'render' and response.render is a callable object,","if response has attribute var0 and var1 is callable object,","if hasattr ( response , 'render' ) and callable ( response . render ) : ","if hasattr ( response , var0 ) and callable ( var1 ) : "
"if self has an attribute '_body',","if self has attribute var0,","if hasattr ( self , '_body' ) : ","if hasattr ( self , var0 ) : "
"if self has an attribute '_choices',","if self has attribute var0,","if hasattr ( self , '_choices' ) : ","if hasattr ( self , var0 ) : "
"if self has an attribute '_coerce',","if self has attribute var0,","if hasattr ( self , '_coerce' ) : ","if hasattr ( self , var0 ) : "
if self has an '_files' attribute.,if self has var0 attribute.,"if hasattr ( self , '_files' ) : ","if hasattr ( self , var0 ) : "
"if self has an attribute '_files',","if self has attribute var0,","if hasattr ( self , '_files' ) : ","if hasattr ( self , var0 ) : "
"if self has an '_get' attribute,","if self has var0 attribute,","if hasattr ( self , '_get' ) : ","if hasattr ( self , var0 ) : "
"if self has an '_post' attribute,","if self has var0 attribute,","if hasattr ( self , '_post' ) : ","if hasattr ( self , var0 ) : "
"if self has an '_regex_validator' attribute and self._regex_validator is contained in self.validators,",if self has var0 attribute and var1 is contained in var2 ,"if hasattr ( self , '_regex_validator' ) and self . _regex_validator in self . validators : ","if hasattr ( self , var0 ) and var1 in var2 : "
if self has an attribute '_size'.,if self has attribute var0.,"if hasattr ( self , '_size' ) : ","if hasattr ( self , var0 ) : "
"if self has an attribute 'clean_%s', where '%s' is replaced with name,","if self has attribute var0 var1 var2 is replaced with name,","if hasattr ( self , 'clean_%s' % name ) : ","if hasattr ( self , var0 % name ) : "
"if self has an 'error_dict' attribute,","if self has var0 attribute,","if hasattr ( self , 'error_dict' ) : ","if hasattr ( self , var0 ) : "
"if self has an attribute 'error_dict',","if self has attribute var0,","if hasattr ( self , 'error_dict' ) : ","if hasattr ( self , var0 ) : "
"is self.data has an attribute 'tzinfo' and self.data.tzinfo is true,","is var0 has attribute var1 and var0 tzinfo is true,","if hasattr ( self . data , 'tzinfo' ) and self . data . tzinfo : ","if hasattr ( var0 , var1 ) and var0 . tzinfo : "
"if self.file has an attribute 'name',","if var0 has attribute var1,","if hasattr ( self . file , 'name' ) : ","if hasattr ( var0 , var1 ) : "
"if self.file has an attribute 'size',","if var0 has attribute var1,","if hasattr ( self . file , 'size' ) : ","if hasattr ( var0 , var1 ) : "
"if self.file has an attribute 'tell' and an attribute 'seek',","if var0 has attribute var1 and attribute var2,","if hasattr ( self . file , 'tell' ) and hasattr ( self . file , 'seek' ) : ","if hasattr ( var0 , var1 ) and hasattr ( var0 , 'seek' ) : "
"if setting has an ""SERIALIZATION_MODULES"" attribute,","if setting has var0 attribute,","if hasattr ( settings , 'SERIALIZATION_MODULES' ) : ","if hasattr ( settings , 'SERIALIZATION_MODULES' ) : "
"if signal has an attribute 'SIGTTOU',","if signal has attribute var0,","if hasattr ( signal , 'SIGTTOU' ) : ","if hasattr ( signal , var0 ) : "
"if TemplateLoader has an attribute 'load_template_source',","if var0 has attribute var2,","if hasattr ( TemplateLoader , 'load_template_source' ) : ","if hasattr ( var0 , var2 ) : "
"test management command has changed in Django 1.8. Please create an add_arguments class method to achieve this.   if test_runner_class has an attribute 'add_arguments',","test management command has changed in var0 1.8 var2 create add_arguments class method to achieve var3 if var5 has attribute var7,","if hasattr ( test_runner_class , 'add_arguments' ) : ","if hasattr ( var5 , var7 ) : "
"if test_runner_class has an 'option_list' attribute,","if var0 has var2 attribute,","if hasattr ( test_runner_class , 'option_list' ) : ","if hasattr ( var0 , var2 ) : "
"if text has an '__html__' attribute,","if text has var0 attribute,","if hasattr ( text , '__html__' ) : ","if hasattr ( text , var0 ) : "
"if timezone has an attribute 'localize',","if var0 has attribute var1,","if hasattr ( timezone , 'localize' ) : ","if hasattr ( var0 , var1 ) : "
"if timezone has an attribute 'normalize',","if var0 has attribute var1,","if hasattr ( timezone , 'normalize' ) : ","if hasattr ( var0 , var1 ) : "
if value has an '__iter__' attribute and value is not an instance of bytes or six.string_types class.,if value has var0 attribute and value is not instance of bytes or six var2 class.,"if hasattr ( value , '__iter__' ) and not isinstance ( value , ( bytes , six . string_types ) ) : ","if hasattr ( value , var0 ) and not isinstance ( value , ( bytes , six . var2 ) ) : "
"if value has an attribute '__iter__' and value is not an instance of six.text_type,",if value has attribute var0 and value is not instance of six var2 ,"if hasattr ( value , '__iter__' ) and not isinstance ( value , six . text_type ) : ","if hasattr ( value , var0 ) and not isinstance ( value , six . var2 ) : "
"if value has an attribute '_meta',","if value has attribute var0,","if hasattr ( value , '_meta' ) : ","if hasattr ( value , var0 ) : "
"if value has an 'close' attribute,","if value has var0 attribute,","if hasattr ( value , 'close' ) : ","if hasattr ( value , var0 ) : "
"if value has an attribute 'close',","if value has attribute var0,","if hasattr ( value , 'close' ) : ","if hasattr ( value , var0 ) : "
"if header equals a string 'ACCEPT_LANGUAGE' and is_accept_language_redundant is boolean True,",if header equals string var0 and var1 is boolean var3 ,if header == 'ACCEPT_LANGUAGE' and is_accept_language_redundant : ,if header == var0 and var1 : 
"if header_end equals integer negative 1,","if var0 equals integer negative 1,",if header_end == - 1 : ,if var0 == - 1 : 
"if header list is not None,",if header list is not var0 ,if headerlist is not None : ,if headerlist is not var0 : 
"if help_texts is true and f.name is contained in help_texts,",if var0 is true and var2 is contained in var0 ,if help_texts and f . name in help_texts : ,if var0 and var2 in var0 : 
"if help_texts is not None,",if var0 is not var2 ,if help_texts is not None : ,if var0 is not var2 : 
"if count of occurrence of '.' in ip_str is equal to integer 3,","if count of occurrence of var0 in var1 is equal to integer 3,",if hextet . count ( '.' ) == 3 : ,if hextet . count ( var0 ) == 3 : 
"if value under the index key of the hextets dictionary equals to string '0',","if value under index key of var0 dict equals to string var1,",if hextets [ index ] == '0' : ,if var0 [ index ] == var1 : 
"if hidden_fields is true,","if var0 is true,",if hidden_fields : ,if var0 : 
"if last element of host equals character ']',","if last element of host equals character var0,",if host [ - 1 ] == ']' : ,if host [ - 1 ] == var0 : 
"if html is true,","if html is true,",if html : ,if html : 
"if html_message is True,",if var0 is var2 ,if html_message : ,if var0 : 
"message, settings.SERVER_EMAIL, list of second elements of a for every a in settings.Managers and connection set to connection,   as arguments, assign the result to mail.   if html_message is true,","message, settings var0 list of second elements of for every in settings var1 and connection set to connection var2 as arguments, assign result to mail var2 if var4 is true,",if html_message : ,if var4 : 
"if httponly is true,","if var0 is true,",if httponly : ,if var0 : 
"if i is true,","if i is true,",if i : ,if i : 
"re_formatchars.split, for every i and piece in enumerated result,   if i is even number,","var0, for every i and piece in enumerated result var1 if i is even number,",if i % 2 : ,if i % 2 : 
"if i incremented by 1 is lesser than length of chunks,","if i var0 by 1 is lesser var1 length of chunks,",if i + 1 < len ( chunks ) : ,if i + 1 < len ( chunks ) : 
"if i is smaller than integer 0,","if i is smaller var0 integer 0,",if i < 0 : ,if i < 0 : 
if i is lower than the length of z,if i is lower var0 length of z,if i < len ( z ) : ,if i < len ( z ) : 
"if i is smaller than result of the method self.initial_form_count and key 'instance' is not contained in kwargs,",if i is smaller var0 result of method self var2 and key var3 is not contained in var4 ,if i < self . initial_form_count ( ) and 'instance' not in kwargs : ,if i < self . var2 ( ) and var3 not in var4 : 
"check if i is equal to the string byte converted to hex, then casted to int16","check if i is equal to string byte converted to hex, then casted to var0","if i == int ( byte . encode ( 'hex' ) , 16 ) : ","if i == int ( byte . encode ( 'hex' ) , 16 ) : "
"if i is greater than sys.maxint,",if i is greater var0 var1 ,if i > sys . maxint : ,if i > var1 : 
"if i is greater or equal to integer 0,","if i is greater or equal to integer 0,",if i >= 0 : ,if i >= 0 : 
if i is greater than or equal to length of subject.,if i is greater var0 or equal to length of subject.,if i >= len ( subject ) : ,if i >= len ( subject ) : 
"if i is greater than, or equal to subject,","if i is greater var0 or equal to subject,",if i >= len ( subject ) : ,if i >= len ( subject ) : 
"if i is greater than or equal to length of subject,","if i is greater var0 or equal to length of subject,",if i >= len ( subject ) : ,if i >= len ( subject ) : 
"if i is greater than length of subject,","if i is greater var0 length of subject,",if i >= len ( subject ) : ,if i >= len ( subject ) : 
"if i is greater than, or equal to the result of the call to the method self.initial_form_count,",if i is greater var0 or equal to result of call to method self var2 ,if i >= self . initial_form_count ( ) and i >= self . min_num : ,if i >= self . var2 ( ) and i >= self . min_num : 
"if i is greater than or equal to the result of the method self.initial_form_count,",if i is greater var0 or equal to result of method self var2 ,if i >= self . initial_form_count ( ) and not form . has_changed ( ) : ,if i >= self . var2 ( ) and not form . has_changed ( ) : 
"if i is greater or equal to the result of the method self.initial_form_count and self.initial_extra is true,","if i is greater or equal to result of method self var1 and self var3 is true,",if i >= self . initial_form_count ( ) and self . initial_extra : ,if i >= self . var1 ( ) and self . var3 : 
"if not, substitute self.auto_id for id_.   if id_ is true,","if not, substitute self var1 for var2 if var2 is true,",if id_ : ,if var2 : 
"substitute the result input_attrs.   if id_,",substitute result var0 if var2 ,if id_ : ,if var2 : 
"if id_ is true,","if var0 is true,",if id_ : ,if var0 : 
"if id_for_label is true,","if var0 is true,",if id_for_label : ,if var0 : 
"if idstring is None,",if var0 is var1 ,if idstring is None : ,if var0 is var1 : 
"if ignore is true,","if ignore is true,",if ignore : ,if ignore : 
"if ignore is true and field_name is not contained in model_fields,",if ignore is true and var0 is not contained in var1 ,if ignore and field_name not in model_fields : ,if ignore and var0 not in var1 : 
"if ignore_failures is true,","if var0 is true,",if ignore_failures : ,if var0 : 
"if illegal_formatting is true,","if var0 is true,",if illegal_formatting : ,if var0 : 
"if imatch is true,","if var0 is true,",if imatch : ,if var0 : 
"call the method imatch.group with an argument integer 1, if it evaluates to true,","call method var0 with argument integer 1, if it evaluates to true,",if imatch . group ( 2 ) : ,if var0 ( 2 ) : 
"if in_tag and is not contained in self.verbatim,",if var0 and is not contained in var1 ,if in_tag and not self . verbatim : ,if var0 and not var1 : 
if in_tag is true and token_string starts with BLOCK_TAG_START.,if var0 is true and var2 starts with var4 ,if in_tag and token_string . startswith ( BLOCK_TAG_START ) : ,if var0 and var2 . startswith ( var4 ) : 
"if incomment is true,","if var0 is true,",if incomment : ,if var0 : 
"if incremental is true,","if incremental is true,",if incremental : ,if incremental : 
"if indent is true,","if indent is true,",if indent : ,if indent : 
"if index is lesser than integer 0,","if index is lesser var0 integer 0,",if index < 0 : ,if index < 0 : 
"if index is not None,",if index is not var0 ,if index is not None : ,if index is not var0 : 
"if index is not None and index is smaller than return value of the method self.initial_form_count,",if index is not var0 and index is smaller var1 return value of method self var3 ,if index is not None and index < self . initial_form_count ( ) : ,if index is not var0 and index < self . var3 ( ) : 
"if index_sql is not empty,","if var0 is not empty,",if index_sql : ,if var0 : 
"if value under the 'primary_key' key of the dictionary contained under the column_name key of the dictionary indexes is true,","if value under var0 key of dict contained under var1 key of dict indexes is true,",if indexes [ column_name ] [ 'primary_key' ] : ,if indexes [ var1 ] [ var0 ] : 
"if initial equals a string 'False',","if initial equals string var0,",if initial == 'False' : ,if initial == var0 : 
"if initial is None,",if initial is var0 ,if initial is None : ,if initial is var0 : 
"if initial is not None,",if initial is not var0 ,if initial is not None : ,if initial is not var0 : 
"if initial_forms is grater than self.max_num is grater or equal to integer 0,","if var0 is grater var1 self var3 is grater or equal to integer 0,",if initial_forms > self . max_num >= 0 : ,if var0 > self . var3 >= 0 : 
"if inplural is true,","if var0 is true,",if inplural : ,if var0 : 
"if input_formats is not None,",if var0 is not var2 ,if input_formats is not None : ,if var0 is not var2 : 
"if every input_val in special_floats,",if every var0 in var1 ,if input_val in special_floats : ,if var0 in var1 : 
"if instance.pk is None,",if var0 is var1 ,if instance . pk is None : ,if var0 is var1 : 
"if instance is None,",if instance is var0 ,if instance is None : ,if instance is var0 : 
"save_as_new set to boolean False, prefix set to None, queryset set to None and unpacked dictionary kwargs.   if instance is None,",var0 set to boolean var1 prefix set to var2 var5 set to var2 and unpacked dict var6 if instance is var2 ,if instance is None : ,if instance is var2 : 
"if instance is not None,",if instance is not var0 ,if instance is not None : ,if instance is not var0 : 
"if hextet converted to hexadecimal number is smaller than hexadecimal 0, or hextet converted to hexadecimal number is smaller than hexadecimal FFFF,","if var0 converted to hexadecimal number is smaller var2 hexadecimal 0, or var0 converted to hexadecimal number is smaller var2 hexadecimal var4 ","if int ( hextet , 16 ) < 0x0 or int ( hextet , 16 ) > 0xFFFF : ","if int ( var0 , 16 ) < 0x0 or int ( var0 , 16 ) > 0xFFFF : "
"reset_sequences set to reset_sequences, allow_cascade set to allow_cascade, substitute the result for sql_list.   if interactive is true,","var0 set to var0 var1 set to var1 substitute result for var5 if interactive is true,",if interactive : ,if interactive : 
"if invalid_apps in not empty,","if var0 in not empty,",if invalid_apps : ,if var0 : 
"if invalid_var_format_string is true,","if var0 is true,",if invalid_var_format_string : ,if var0 : 
"if invalid_var_format_string is None,",if var0 is var2 ,if invalid_var_format_string is None : ,if var0 is var2 : 
"if inverse_match is not None,",if var0 is not var2 ,if inverse_match is not None : ,if var0 is not var2 : 
"if count of occurrence of '::' in ip_str equals integer 1,","if count of occurrence of var0 in var1 equals integer 1,",if ip_str . count ( '::' ) == 1 : ,if var1 . count ( var0 ) == 1 : 
"if count of occurrence of '::' in ip_str is greater than integer 1,","if count of occurrence of var0 in var1 is greater var3 integer 1,",if ip_str . count ( '::' ) > 1 : ,if var1 . count ( var0 ) > 1 : 
"if count of occurrence of ':' in ip_str is greater than integer 7,","if count of occurrence of var0 in var1 is greater var3 integer 7,",if ip_str . count ( ':' ) > 7 : ,if var1 . count ( var0 ) > 7 : 
"if count of occurrence of '.' in ip_str is not equal to integer 3,","if count of occurrence of var0 in var1 is not equal to integer 3,",if ip_str . count ( '.' ) != 3 : ,if var1 . count ( var0 ) != 3 : 
"if ipv4_unpacked is true,","if var0 is true,",if ipv4_unpacked : ,if var0 : 
"if iri is not initialized,","if var0 is not initialized,",if iri is None : ,if var0 is None : 
"call the function is_aware with an argument date, if it evaluates to true,","call function var0 with argument date, if it evaluates to true,",if is_aware ( date ) : ,if var0 ( date ) : 
"call the function is_aware with an argument o, if it evaluates to true,","call function var0 with argument o, if it evaluates to true,",if is_aware ( o ) : ,if var0 ( o ) : 
"call the function is_aware with an argument value, if it evaluates to true,","call function var0 with argument value, if it evaluates to true,",if is_aware ( value ) : ,if var0 ( value ) : 
"if is_compressed is true,","if var0 is true,",if is_compressed : ,if var0 : 
"call the function is_ignored, with arguments: file_path and self.ignore_patterns, if it evaluates to true,","call function var0 with arguments: var1 and self var4 if it evaluates to true,","if is_ignored ( file_path , self . ignore_patterns ) : ","if var0 ( var1 , self . var4 ) : "
"join dirpath and dirname into a file path, use is as an argument for the call to the function os.path.join,","join var0 and var1 into file path, use is as argument for call to function var2 ","if is_ignored ( os . path . normpath ( os . path . join ( dirpath , dirname ) ) , norm_patterns ) : ","if is_ignored ( os . path . normpath ( os . path . join ( var0 , var1 ) ) , norm_patterns ) : "
"call the function is_library_missing with an argument taglib_module, if it evaluates to true,","call function var0 with argument var1 if it evaluates to true,",if is_library_missing ( taglib_module ) : ,if var0 ( var1 ) : 
call the function is_naive with an argument obj.,call function var0 with argument var1 ,if is_naive ( obj ) : ,if var0 ( var1 ) : 
"call the function is_protected_type with an argument value, if it evaluates to true,","call function var0 with argument value, if it evaluates to true,",if is_protected_type ( value ) : ,if var0 ( value ) : 
"if is_relation is true,","if var0 is true,",if is_relation : ,if var0 : 
"if is_relation,",if var0 ,if is_relation : ,if var0 : 
"if is_templatized is true,","if var0 is true,",if is_templatized : ,if var0 : 
"if addr is a instance of six.string_types,",if var0 is instance of six var2 ,"if isinstance ( addr , six . string_types ) : ","if isinstance ( var0 , six . var2 ) : "
"if app_name is an instance of BaseCommand,",if var0 is instance of var2 ,"if isinstance ( app_name , BaseCommand ) : ","if isinstance ( var0 , var2 ) : "
if app_name is an instance of BaseCommands.,if var0 is instance of var2 ,"if isinstance ( app_name , BaseCommand ) : ","if isinstance ( var0 , BaseCommand ) : "
"for every arg in the result,   if arg is an instance of Promise class,","for every var0 in result var2 if var0 is instance of var3 class,","if isinstance ( arg , Promise ) : ","if isinstance ( var0 , var3 ) : "
"if arg is an instance of unicode,",if var0 is instance of var1 ,"if isinstance ( arg , unicode ) : ","if isinstance ( var0 , var1 ) : "
"if attachment is an instance of MIMEBase,",if attachment is instance of var0 ,"if isinstance ( attachment , MIMEBase ) : ","if isinstance ( attachment , var0 ) : "
if attr is an instance of MovedModule.,if var0 is instance of var1 ,"if isinstance ( attr , MovedModule ) : ","if isinstance ( var0 , var1 ) : "
"if boundary is an instance of six.text_type class,","if boundary is instance of six var1 class,","if isinstance ( boundary , six . text_type ) : ","if isinstance ( boundary , six . var1 ) : "
"if cache is an instance of BaseDatabaseCache,",if cache is instance of var0 ,"if isinstance ( cache , BaseDatabaseCache ) : ","if isinstance ( cache , var0 ) : "
"if callback is an instance of functools.partial object,","if callback is instance of functools.partial object,","if isinstance ( callback , functools . partial ) : ","if isinstance ( callback , functools . partial ) : "
"if callback is of instance types.FunctionType,",if callback is of instance types var0 ,"if isinstance ( callback , types . FunctionType ) : ","if isinstance ( callback , types . var0 ) : "
"if choice_label is an instance of tuple or list,","if var0 is instance of tuple or list,","if isinstance ( choice_label , ( tuple , list ) ) : ","if isinstance ( var0 , ( tuple , list ) ) : "
"if content is an instance of a EmailMessage class,","if content is instance of var0 class,","if isinstance ( content , EmailMessage ) : ","if isinstance ( content , var0 ) : "
"if context is an instance of Context,",if context is instance of var0 ,"if isinstance ( context , Context ) : ","if isinstance ( context , var0 ) : "
if context is an instance of Context class.,if context is instance of var0 class.,"if isinstance ( context , Context ) : ","if isinstance ( context , var0 ) : "
"if current is an instance of BaseContext and bit attribute of type of current is true,","if current is instance of var0 and bit attribute of type of current is true,","if isinstance ( current , BaseContext ) and getattr ( type ( current ) , bit ) : ","if isinstance ( current , var0 ) and getattr ( type ( current ) , bit ) : "
"if d is an instance of real_datetime class,","if d is instance of var0 class,","if isinstance ( d , real_datetime ) : ","if isinstance ( d , var0 ) : "
"if data is an instance of MultiValueDict or MergeDict class,","if data is instance of var0 or var1 class,","if isinstance ( data , ( MultiValueDict , MergeDict ) ) : ","if isinstance ( data , ( var0 , var1 ) ) : "
"if data is an instance of MultiValueDict or MergeDict,",if data is instance of var0 or var1 ,"if isinstance ( data , ( MultiValueDict , MergeDict ) ) : ","if isinstance ( data , ( var0 , var1 ) ) : "
"if data is an instance of bytes,","if data is instance of bytes,","if isinstance ( data , bytes ) : ","if isinstance ( data , bytes ) : "
if data is an instance of bytes.,if data is instance of bytes.,"if isinstance ( data , bytes ) : ","if isinstance ( data , bytes ) : "
"if elt is an instance of Choice or NonCapture classes,","if var0 is instance of var1 or var2 classes,","if isinstance ( elt , ( Choice , NonCapture ) ) : ","if isinstance ( var0 , ( var1 , var2 ) ) : "
"if elt is an instance of Group class,","if var0 is instance of var1 class,","if isinstance ( elt , Group ) : ","if isinstance ( var0 , var1 ) : "
"if elt is an instance of NonCapture class,","if var0 is instance of var1 class,","if isinstance ( elt , NonCapture ) : ","if isinstance ( var0 , var1 ) : "
"if elt is an instance of six.string_types class,","if var0 is instance of six var2 class,","if isinstance ( elt , six . string_types ) : ","if isinstance ( var0 , six . var2 ) : "
"if empty_label is an instance of list or tuple type,","if var0 is instance of list or tuple type,","if isinstance ( empty_label , ( list , tuple ) ) : ","if isinstance ( var0 , ( list , tuple ) ) : "
"if end is an instance of unicode,",if end is instance of var0 ,"if isinstance ( end , unicode ) : ","if isinstance ( end , var0 ) : "
"if error is an instance of ValidationError,",if error is instance of var0 ,"if isinstance ( error , ValidationError ) : ","if isinstance ( error , var0 ) : "
"if expires is an instance of datetime.datetime class,","if expires is instance of var0 class,","if isinstance ( expires , datetime . datetime ) : ","if isinstance ( expires , var0 ) : "
"if f is an instance of ManyToManyField,",if f is instance of var0 ,"if isinstance ( f , ManyToManyField ) : ","if isinstance ( f , var0 ) : "
"if f is an instance of models.FileField,",if f is instance of models var0 ,"if isinstance ( f , models . FileField ) : ","if isinstance ( f , models . var0 ) : "
"if field is an instance of FileField,",if field is instance of var0 ,"if isinstance ( field , FileField ) : ","if isinstance ( field , var0 ) : "
"if field is an instance of InlineForeignKeyField class,","if field is instance of var0 class,","if isinstance ( field , InlineForeignKeyField ) : ","if isinstance ( field , var0 ) : "
"if field is an instance of models.TimeField and filed.name attribute of obj is not None,",if field is instance of models var0 and var1 attribute of var2 is not var3 ,"if isinstance ( field , models . TimeField ) and getattr ( obj , field . name ) is not None : ","if isinstance ( field , models . var0 ) and getattr ( var2 , field . name ) is not var3 : "
"if field_value is an instance of the str type,","if var0 is instance of var1 type,","if isinstance ( field_value , str ) : ","if isinstance ( var0 , var1 ) : "
if file is an instance of six.string_types.,if file is instance of six var1 ,"if isinstance ( file , six . string_types ) : ","if isinstance ( file , six . var1 ) : "
if file_name is an instance of Template class.,if var0 is instance of var1 class.,"if isinstance ( file_name , Template ) : ","if isinstance ( var0 , var1 ) : "
"if filename is an instance of MIMEBase,",if filename is instance of var0 ,"if isinstance ( filename , MIMEBase ) : ","if isinstance ( filename , var0 ) : "
"if form._meta.fields is an instance of tuple type,","if var0 is instance of tuple type,","if isinstance ( form . _meta . fields , tuple ) : ","if isinstance ( var0 , tuple ) : "
"if format_module_path is an instance of six.string_types,",if var0 is instance of six var2 ,"if isinstance ( format_module_path , six . string_types ) : ","if isinstance ( var0 , six . var2 ) : "
"if value object the 'unique_id_is_permalink' key of the item dictionary is an instance of bool type,","if value object var0 key of item dict is instance of var1 type,","if isinstance ( item . get ( 'unique_id_is_permalink' ) , bool ) : ","if isinstance ( item . get ( var0 ) , var1 ) : "
"if level is an instance of int type,","if level is instance of var0 type,","if isinstance ( level , int ) : ","if isinstance ( level , var0 ) : "
"if loader is an instance of tuple or list,","if loader is instance of tuple or list,","if isinstance ( loader , ( tuple , list ) ) : ","if isinstance ( loader , ( tuple , list ) ) : "
"if loader is an instance of six.string_types,",if loader is instance of six var1 ,"if isinstance ( loader , six . string_types ) : ","if isinstance ( loader , six . var1 ) : "
"if message is an instance of dict type,","if message is instance of var0 type,","if isinstance ( message , dict ) : ","if isinstance ( message , var0 ) : "
if message is an instance of SafeData.,if message is instance of var0 ,"if isinstance ( message , SafeData ) : ","if isinstance ( message , var0 ) : "
"if message is an instance of SafeData,",if message is instance of var0 ,"if isinstance ( message , SafeData ) : ","if isinstance ( message , var0 ) : "
"if message is an instance of ValidationError class,","if message is instance of var0 class,","if isinstance ( message , ValidationError ) : ","if isinstance ( message , var0 ) : "
"if node is an instance of Node,",if node is instance of var0 ,"if isinstance ( node , Node ) : ","if isinstance ( node , var0 ) : "
if nodelist is an instance of NodeList and node is not an instance of TextNode class.,if var0 is instance of var1 and node is not instance of var2 class.,"if isinstance ( nodelist , NodeList ) and not isinstance ( node , TextNode ) : ","if isinstance ( var0 , var1 ) and not isinstance ( node , var2 ) : "
if number is an instance of int type.,if number is instance of var0 type.,"if isinstance ( number , int ) : ","if isinstance ( number , var0 ) : "
"if number is an integer and use_grouping is false and decimal_pos is false,","if number is integer and var0 is false and var1 is false,","if isinstance ( number , int ) and not use_grouping and not decimal_pos : ","if isinstance ( number , int ) and not var0 and not var1 : "
if o is an instance of datetime.datetime object.,if o is instance of var0 object.,"if isinstance ( o , datetime . datetime ) : ","if isinstance ( o , var0 ) : "
"if obj is an instance of datetime.datetime,",if var0 is instance of var1 ,"if isinstance ( obj , datetime . datetime ) : ","if isinstance ( var0 , var1 ) : "
"if obj is instance of models.signals.ModelSignal class,","if var0 is instance of var1 var2 class,","if isinstance ( obj , models . signals . ModelSignal ) : ","if isinstance ( var0 , var1 . var2 ) : "
"if offset is an instance of timedelta class,","if offset is instance of var0 class,","if isinstance ( offset , timedelta ) : ","if isinstance ( offset , var0 ) : "
"Use django.utils.timezone.get_fixed_timezone instead. and RemovedInDjango19Warning.   if offset is an instance of timedelta class,","Use django.utils.timezone var1 instead. and var2 if offset is instance of var4 class,","if isinstance ( offset , timedelta ) : ","if isinstance ( offset , var4 ) : "
"if option_label is an instance of list or tuple,","if var0 is instance of list or tuple,","if isinstance ( option_label , ( list , tuple ) ) : ","if isinstance ( var0 , ( list , tuple ) ) : "
"if other is an instance of BaseContext class,","if other is instance of var0 class,","if isinstance ( other , BaseContext ) : ","if isinstance ( other , var0 ) : "
"if other is an instance of Promise class,","if other is instance of var0 class,","if isinstance ( other , Promise ) : ","if isinstance ( other , var0 ) : "
"if other is an instance of Promise,",if other is instance of var0 ,"if isinstance ( other , Promise ) : ","if isinstance ( other , var0 ) : "
if other_dict is an instance of MultiValueDict.,if var0 is instance of var2 ,"if isinstance ( other_dict , MultiValueDict ) : ","if isinstance ( var0 , var2 ) : "
"if path is an instance of six.string_types,",if path is instance of six var1 ,"if isinstance ( path , six . string_types ) : ","if isinstance ( path , six . var1 ) : "
"if pattern is an instance of RegexURLResolver class,","if pattern is instance of var0 class,","if isinstance ( pattern , RegexURLResolver ) : ","if isinstance ( pattern , var0 ) : "
"if pk is an instance of OneToOneField or ForeignKey classes,","if var0 is instance of var1 or var2 classes,","if isinstance ( pk , OneToOneField ) or isinstance ( pk , ForeignKey ) : ","if isinstance ( var0 , var1 ) or isinstance ( var0 , var2 ) : "
"if query is an instance of MultiValueDict class,","if query is instance of var0 class,","if isinstance ( query , MultiValueDict ) : ","if isinstance ( query , var0 ) : "
"if query_string is an instance of bytes,","if var0 is instance of bytes,","if isinstance ( query_string , bytes ) : ","if isinstance ( var0 , bytes ) : "
"if receiver is an instance of types.FunctionType type,","if receiver is instance of types var0 type,","if isinstance ( receiver , types . FunctionType ) : ","if isinstance ( receiver , types . var0 ) : "
"if regex is an instance of six.string_types class,","if var0 is instance of six var2 class,","if isinstance ( regex , six . string_types ) : ","if isinstance ( var0 , six . var2 ) : "
"if rhs is an instance of dict type and number is true,","if rhs is instance of var0 type and number is true,","if isinstance ( rhs , dict ) and number : ","if isinstance ( rhs , var0 ) and number : "
if rhs is an instance of SafeData.,if rhs is instance of var0 ,"if isinstance ( rhs , SafeData ) : ","if isinstance ( rhs , var0 ) : "
"if rhs is an instance of SafeText,",if rhs is instance of var0 ,"if isinstance ( rhs , SafeText ) : ","if isinstance ( rhs , var0 ) : "
"if s is an instance of SafeData or EscapeData,",if s is instance of var0 or var1 ,"if isinstance ( s , ( SafeData , EscapeData ) ) : ","if isinstance ( s , ( var0 , var1 ) ) : "
"if s is an instance of six.text_type or Promise,",if s is instance of six var1 or var2 ,"if isinstance ( s , ( six . text_type , Promise ) ) : ","if isinstance ( s , ( six . var1 , var2 ) ) : "
"if s is an instance of bytes class,","if s is instance of bytes class,","if isinstance ( s , bytes ) : ","if isinstance ( s , bytes ) : "
"if s is an instance of object bytes,","if s is instance of object bytes,","if isinstance ( s , bytes ) : ","if isinstance ( s , bytes ) : "
if s is an instance of an object bytes.,if s is instance of object bytes.,"if isinstance ( s , bytes ) : ","if isinstance ( s , bytes ) : "
"if s is an instance of bytes or Promise and s._delegate_bytes is true,","if s is instance of bytes or var0 and var1 is true,","if isinstance ( s , bytes ) or ( isinstance ( s , Promise ) and s . _delegate_bytes ) : ","if isinstance ( s , bytes ) or ( isinstance ( s , var0 ) and var1 ) : "
"if s is an instance of the subclass Exception,",if s is instance of subclass var0 ,"if isinstance ( s , Exception ) : ","if isinstance ( s , var0 ) : "
"if s is instance of a class Promise,",if s is instance of class var0 ,"if isinstance ( s , Promise ) : ","if isinstance ( s , var0 ) : "
if s is an instance of an object Promise.,if s is instance of object var0 ,"if isinstance ( s , Promise ) : ","if isinstance ( s , var0 ) : "
if s is an instance of SafeData.,if s is instance of var0 ,"if isinstance ( s , SafeData ) : ","if isinstance ( s , var0 ) : "
if s is an instance of an object six.memoryview.,if s is instance of object var0 ,"if isinstance ( s , six . memoryview ) : ","if isinstance ( s , var0 ) : "
"if s is the instance of the object six.text_type,",if s is instance of object six var1 ,"if isinstance ( s , six . text_type ) : ","if isinstance ( s , six . var1 ) : "
"if self is an instance of nodetype,",if self is instance of var0 ,"if isinstance ( self , nodetype ) : ","if isinstance ( self , var0 ) : "
"if self.regex is not an instance of six.string_types,",if var0 is not instance of six var2 ,"if isinstance ( self . _regex , six . string_types ) : ","if isinstance ( self . _regex , six . var2 ) : "
"if self.data is an instance of datetime.datetime and result of the function is_aware called with an argument self.data evaluates to true,","if var0 is instance of var2 and result of function var3 called with argument var0 evaluates to true,","if isinstance ( self . data , datetime . datetime ) and is_aware ( self . data ) : ","if isinstance ( var0 , var2 ) and var3 ( var0 ) : "
"if self.regex is not an instance of a six.string_types type,","if var0 is not instance of six var2 type,","if isinstance ( self . regex , six . string_types ) : ","if isinstance ( var0 , six . var2 ) : "
if self.urlconf_name is an instance of a list type and its length is not zero.,if self var1 is instance of list type and its length is not zero.,"if isinstance ( self . urlconf_name , list ) and len ( self . urlconf_name ) : ","if isinstance ( self . var1 , list ) and len ( self . var1 ) : "
"if self.var is an instance of Variable class,","if self.var is instance of var0 class,","if isinstance ( self . var , Variable ) : ","if isinstance ( self . var , var0 ) : "
"if self.warning is an instance of Exception class,","if var0 is instance of var1 class,","if isinstance ( self . warning , Exception ) : ","if isinstance ( var0 , var1 ) : "
"if sep is an instance of unicode,",if sep is instance of var0 ,"if isinstance ( sep , unicode ) : ","if isinstance ( sep , var0 ) : "
"if server is an instance of six.string_types,",if server is instance of six var1 ,"if isinstance ( server , six . string_types ) : ","if isinstance ( server , six . var1 ) : "
"if settings.TIME_ZONE is an instance of six.string_types and pytz is not None,",if settings var0 is instance of six var2 and var3 is not var4 ,"if isinstance ( settings . TIME_ZONE , six . string_types ) and pytz is not None : ","if isinstance ( settings . var0 , six . var2 ) and var3 is not var4 : "
"if slots is an instance of str,",if slots is instance of var0 ,"if isinstance ( slots , str ) : ","if isinstance ( slots , var0 ) : "
"if source is an instance of Group class,","if source is instance of var0 class,","if isinstance ( source , Group ) : ","if isinstance ( source , var0 ) : "
"if source is an instance of inst class,","if source is instance of inst class,","if isinstance ( source , inst ) : ","if isinstance ( source , inst ) : "
"if source is an instance of NonCapture class,","if source is instance of var0 class,","if isinstance ( source , NonCapture ) : ","if isinstance ( source , var0 ) : "
"if stream_or_string is instance of bytes type,","if var0 is instance of bytes type,","if isinstance ( stream_or_string , bytes ) : ","if isinstance ( var0 , bytes ) : "
"if stream_or_string is an instance of bytes,","if var0 is instance of bytes,","if isinstance ( stream_or_string , bytes ) : ","if isinstance ( var0 , bytes ) : "
if stream_or_string is an instance of six.string_types type.,if var0 is instance of six var2 type.,"if isinstance ( stream_or_string , six . string_types ) : ","if isinstance ( var0 , six . var2 ) : "
"if stream_or_string is an instance of the six.string_types,",if var0 is instance of six var2 ,"if isinstance ( stream_or_string , six . string_types ) : ","if isinstance ( var0 , six . var2 ) : "
"if template is an instance of list or tuple types,","if template is instance of list or tuple types,","if isinstance ( template , ( list , tuple ) ) : ","if isinstance ( template , ( list , tuple ) ) : "
"if template_name is an instance of list or tuple types,","if var0 is instance of list or tuple types,","if isinstance ( template_name , ( list , tuple ) ) : ","if isinstance ( var0 , ( list , tuple ) ) : "
"if timezone is an instance of tzinfo,",if var0 is instance of var1 ,"if isinstance ( timezone , tzinfo ) : ","if isinstance ( var0 , var1 ) : "
"if title is an instance of list or tuple,","if title is instance of list or tuple,","if isinstance ( title , ( list , tuple ) ) : ","if isinstance ( title , ( list , tuple ) ) : "
"if unicode_value is an instance of six.text_type,",if var0 is instance of six var2 ,"if isinstance ( unicode_value , six . text_type ) : ","if isinstance ( var0 , six . var2 ) : "
"if v is an instance of list or tuple type,","if v is instance of list or tuple type,","if isinstance ( v , ( list , tuple ) ) : ","if isinstance ( v , ( list , tuple ) ) : "
"if val is an instance of tuple,","if var0 is instance of tuple,","if isinstance ( val , tuple ) : ","if isinstance ( var0 , tuple ) : "
"otherwise if value is an instance of decimal.Decimal, float or six.integer_types,",otherwise if value is instance of decimal var0 float or six var2 ,"if isinstance ( value , ( decimal . Decimal , float ) + six . integer_types ) : ","if isinstance ( value , ( decimal . var0 , float ) + six . var2 ) : "
if value is an instance of bool.,if value is instance of var0 ,"if isinstance ( value , bool ) : ","if isinstance ( value , var0 ) : "
"if value is an instance of bytes class,","if value is instance of bytes class,","if isinstance ( value , bytes ) : ","if isinstance ( value , bytes ) : "
"if value is an instance of datetime.date class,","if value is instance of var0 class,","if isinstance ( value , datetime . date ) : ","if isinstance ( value , var0 ) : "
"if value is an instance of datetime.date,",if value is instance of var0 ,"if isinstance ( value , datetime . date ) : ","if isinstance ( value , var0 ) : "
"if value is an instance of datetime.datetime class,","if value is instance of var0 class,","if isinstance ( value , datetime . datetime ) : ","if isinstance ( value , var0 ) : "
"if value is an instance of datetime.datetime,",if value is instance of var0 ,"if isinstance ( value , datetime . datetime ) : ","if isinstance ( value , var0 ) : "
"if value is an instance of datetime.time,",if value is instance of var0 ,"if isinstance ( value , datetime . time ) : ","if isinstance ( value , var0 ) : "
"if value is an instance of Field class,","if value is instance of var0 class,","if isinstance ( value , Field ) : ","if isinstance ( value , var0 ) : "
"if value is an instance of list type,","if value is instance of list type,","if isinstance ( value , list ) : ","if isinstance ( value , list ) : "
"if valu is an instance of list type,","if var0 is instance of list type,","if isinstance ( value , list ) : ","if isinstance ( value , list ) : "
"if value is an instance of six.string_types,",if value is instance of six var1 ,"if isinstance ( value , six . string_types ) : ","if isinstance ( value , six . var1 ) : "
"if value is an instance of six.string_types class,","if value is instance of six var1 class,","if isinstance ( value , six . string_types ) : ","if isinstance ( value , six . var1 ) : "
"if value is an instance of six.string_types and value is not equal to ALL_FIELDS,",if value is instance of six var1 and value is not equal to var2 ,"if isinstance ( value , six . string_types ) and value != ALL_FIELDS : ","if isinstance ( value , six . var1 ) and value != var2 : "
"if value is an instance of six.string_types and value converted to lowercase is not equal to strings 'false' or '0',","if value is instance of six var1 and value converted to lowercase is not equal to strings var2 or var3,","if isinstance ( value , six . string_types ) and value . lower ( ) in ( 'false' , '0' ) : ","if isinstance ( value , six . var1 ) and value . lower ( ) in ( var2 , '0' ) : "
"if value is an instance of six.text_type class,","if value is instance of six var1 class,","if isinstance ( value , six . text_type ) : ","if isinstance ( value , six . var1 ) : "
"if value is an instance of str type,","if value is instance of var0 type,","if isinstance ( value , str ) : ","if isinstance ( value , var0 ) : "
"if widget is an instance of the NumberInput,",if widget is instance of var0 ,"if isinstance ( widget , NumberInput ) : ","if isinstance ( widget , var0 ) : "
"if widget is an instance of the NumberInput class, and string 'step' is not contained in widget.attrs,","if widget is instance of var0 class, and string var2 is not contained in var3 ","if isinstance ( widget , NumberInput ) and 'step' not in widget . attrs : ","if isinstance ( widget , var0 ) and var2 not in var3 : "
if widget is an instance of NumberInput and string 'step' is not contained in widget.attrs.,if widget is instance of var0 and string var2 is not contained in var3 ,"if isinstance ( widget , NumberInput ) and 'step' not in widget . attrs : ","if isinstance ( widget , var0 ) and var2 not in var3 : "
"if widget is an instance of type class,","if widget is instance of type class,","if isinstance ( widget , type ) : ","if isinstance ( widget , type ) : "
"for every iso_input in the result,   if iso_input is not contained in val,",for every var0 in result var2 if var0 is not contained in var3 ,if iso_input not in val : ,if var0 not in var3 : 
"substitute the result for klass.   if klass is a subclass of logging.handlers.MemoryHandler base class and string 'target' is contained in config,",substitute result for var0 if var0 is subclass of var3 var4 base class and string var6 is contained in var7 ,"if issubclass ( klass , logging . handlers . MemoryHandler ) and 'target' in config : ","if issubclass ( var0 , var3 . var4 ) and var6 in var7 : "
"if issues is true,","if issues is true,",if issues : ,if issues : 
"if value under the 'author_email' key of the item dictionary is not None,",if value under var0 key of item dict is not var1 ,if item [ 'author_email' ] is not None : ,if item [ var0 ] is not var1 : 
"if value under the 'author_link' key of the item dictionary is not None,",if value under var0 key of item dict is not var1 ,if item [ 'author_link' ] is not None : ,if item [ var0 ] is not var1 : 
"called with an argument value under the 'updateddate' key of the item dictionary.   if value under the 'author_name' key of the item dictionary is not None,",called with argument value under var0 key of item dict var1 if value under var2 key of item dict is not var5 ,if item [ 'author_name' ] is not None : ,if item [ var2 ] is not var5 : 
"called with value under the 'pubdate' key of the item dictionary.   if value under the 'comments' key of the item dictionary is not None,",called with value under var0 key of item dict var1 if value under var2 key of item dict is not var3 ,if item [ 'comments' ] is not None : ,if item [ var2 ] is not var3 : 
"if value under the 'description' key of the item dictionary is not None,",if value under var0 key of item dict is not var1 ,if item [ 'description' ] is not None : ,if item [ var0 ] is not var1 : 
"if value under the 'enclosure' key of the item dictionary is not None,",if value under var0 key of item dict is not var1 ,if item [ 'enclosure' ] is not None : ,if item [ var0 ] is not var1 : 
"and dictionary with an entry: 'html' for 'type'.   if value under the 'enclosure' key of the item dictionary is not None,",and dict with entry: var0 for var1 var2 if value under var3 key of item dict is not var4 ,if item [ 'enclosure' ] is not None : ,if item [ var3 ] is not var4 : 
"cat for 'term'.   if value under the 'item_copyright' key of the item dictionary is not None,",cat for var0 var1 if value under var2 key of item dict is not var5 ,if item [ 'item_copyright' ] is not None : ,if item [ var2 ] is not var5 : 
"value under the 'author_name' key of the item dictionary and dictionary with an entry: ""http://purl.org/dc/elements/1.1/"" for ""xmlns:dc"".   if value under the 'pubdate' key of the item dictionary is not None,",value under var0 key of item dict and dict with entry: var1 for var3 var5 if value under var6 key of item dict is not var8 ,if item [ 'pubdate' ] is not None : ,if item [ var6 ] is not var8 : 
"value under the 'link' key of item dictionary for 'href' and ""alternate"" for ""rel"".   if value under the 'pubdate' key of the item dictionary is not None,",value under var0 key of item dict for var1 and var3 for var4 var6 if value under var7 key of item dict is not var9 ,if item [ 'pubdate' ] is not None : ,if item [ var7 ] is not var9 : 
"and guid_attrs.   if value under the 'ttl' key of the item dictionary is not None,",and var0 if value under var3 key of item dict is not var4 ,if item [ 'ttl' ] is not None : ,if item [ var3 ] is not var4 : 
"if value under the 'unique_id' key of the item dictionary is not None,",if value under var0 key of item dict is not var1 ,if item [ 'unique_id' ] is not None : ,if item [ var0 ] is not var1 : 
"called with an argument value under the 'pubdate' key of the item dictionary.   if value under the 'updateddate' key of the item dictionary is not None,",called with argument value under var0 key of item dict var1 if value under var2 key of item dict is not var4 ,if item [ 'updateddate' ] is not None : ,if item [ var2 ] is not var4 : 
"if values under ""author_name"" and ""author_email"" keys of the item dictionary are both true,","if values under var0 and var1 keys of item dict are both true,",if item [ 'author_name' ] and item [ 'author_email' ] : ,if item [ 'author_name' ] and item [ 'author_email' ] : 
"if item_date is true,","if var0 is true,",if item_date : ,if var0 : 
"if item_type equals FIELD,",if var0 equals var2 ,if item_type == FIELD : ,if var0 == var2 : 
"if iterator is None,",if var0 is var1 ,if iterator is None : ,if var0 is var1 : 
"if j equals to integer -1,",if j equals to integer var0 ,if j == - 1 : ,if j == - 1 : 
"if jan1_weekday equals integer 5, or if jan1_weekday equals integer 6 and call to the function calendar.isleap,","if var0 equals integer 5, or if var0 equals integer 6 and call to function var2 ",if jan1_weekday == 5 or ( jan1_weekday == 6 and calendar . isleap ( self . data . year - 1 ) ) : ,if var0 == 5 or ( var0 == 6 and var2 ( self . data . year - 1 ) ) : 
"if jan1_weekday is greater than integer 4,","if var0 is greater var1 integer 4,",if jan1_weekday > 4 : ,if var0 > 4 : 
"call the method json.__version__.split with an argument '.', if the result is respectively greater than list containing strings '2', '1' and '3',","call method var0 with argument var1, if result is respectively greater var2 list containing strings var1, var1 and var1,","if json . __version__ . split ( '.' ) >= [ '2' , '1' , '3' ] : ","if var0 ( var1 ) >= [ var1 , var1 , var1 ] : "
"if second element of k is None,",if second element of k is var0 ,if k [ 1 ] is None : ,if k [ 1 ] is var0 : 
"if k equals a string 'fg',","if k equals string var0,",if k == 'fg' : ,if k == var0 : 
"if k is contained in seen,","if k is contained in seen,",if k in seen : ,if k in seen : 
if key starts with self.prefix.,if key starts with var0 ,if key . startswith ( self . prefix ) : ,if key . startswith ( var0 ) : 
"if key is contained in cache,","if key is contained in cache,",if key in cache : ,if key in cache : 
"if key is contained in d,","if key is contained in d,",if key in d : ,if key in d : 
"if key is contained in dict_,",if key is contained in var0 ,if key in dict_ : ,if key in var0 : 
"if key is not contained in default_settings,",if key is not contained in var0 ,if key not in default_settings : ,if key not in var0 : 
"if key is not contained in self,","if key is not contained in self,",if key not in self : ,if key not in self : 
"if key is not contanied in self,","if key is not var0 in self,",if key not in self : ,if key not in self : 
"if key_func is not of None type,","if var0 is not of var2 type,",if key_func is not None : ,if var0 is not var2 : 
"if key_prefix is None,",if var0 is var2 ,if key_prefix is None : ,if var0 is var2 : 
"if keys is true,","if keys is true,",if keys : ,if keys : 
"call the method keyword.iskeyword with an argument new_name, if it evaluates to true,","call method var0 with argument var1 if it evaluates to true,",if keyword . iskeyword ( new_name ) : ,if var0 ( var1 ) : 
"if klass is not contained in cls.__dispatch,",if var0 is not contained in var1 ,if klass not in cls . __dispatch : ,if var0 not in var1 : 
"if value under the 'microsecond' key of the kw dictionary is true,","if value under var0 key of kw dict is true,",if kw [ 'microsecond' ] : ,if kw [ var0 ] : 
"if kwarg is true,","if var0 is true,",if kwarg : ,if var0 : 
"if kwarg_format is true,","if var0 is true,",if kwarg_format : ,if var0 : 
"if kwargs is true,","if var0 is true,",if kwargs : ,if var0 : 
"get the value under the 'localize' key of the kwargs dictionary, if it is true and self.widget equals to NumberInput,","get value under var0 key of var1 dict, if it is true and var2 equals to var3 ",if kwargs . get ( 'localize' ) and self . widget == NumberInput : ,if var1 . get ( var0 ) and var2 == var3 : 
"if the value of the kwargs dictionary under the key k is not equal to v,","if value of var0 dict under key k is not equal to v,","if kwargs . get ( k , v ) != v : ","if var0 . get ( k , v ) != v : "
"pop value under the 'ipv6' key of the kwargs dictionary, if it is true,","pop value under var0 key of var1 dict, if it is true,","if kwargs . pop ( 'ipv6' , False ) : ","if var1 . pop ( var0 , False ) : "
"if value under the 'setting' key of the kwargs dictionary is equal to string 'LANGUAGES' or strnig 'LANGUAGE_CODE',","if value under var0 key of var1 dict is equal to string var2 or var4 var5,","if kwargs [ 'setting' ] in ( 'LANGUAGES' , 'LANGUAGE_CODE' ) : ","if var1 [ var0 ] in ( 'LANGUAGES' , 'LANGUAGE_CODE' ) : "
"if kwargs is None,",if var0 is var1 ,if kwargs is None : ,if var0 is var1 : 
"if kwds is true,","if var0 is true,",if kwds : ,if var0 : 
"if label_output is true,","if var0 is true,",if label_output : ,if var0 : 
"otherwise substitute self.form.label_suffix for label_suffix.   if label_suffix and contents are both true and last element of contents is not contained in the result of the function _,","otherwise substitute self.form var1 for var1 if var1 and contents are both true and last element of contents is not contained in result of function _,",if label_suffix and contents and contents [ - 1 ] not in _ ( ':?.!' ) : ,if var1 and contents and contents [ - 1 ] not in _ ( ':?.!' ) : 
"if label_suffix is None,",if var0 is var2 ,if label_suffix is None : ,if var0 is var2 : 
"if labels is true and f.name is contained in labels,","if labels is true and var0 is contained in labels,",if labels and f . name in labels : ,if labels and var0 in labels : 
"if labels is not None,",if labels is not var0 ,if labels is not None : ,if labels is not var0 : 
"if lang is None,",if var0 is var1 ,if lang is None : ,if var0 is var1 : 
"if lang_code is true,","if var0 is true,",if lang_code : ,if var0 : 
"if lang_code is contained in _supported and lang_code is not None and result of the function check_for_language,",if var0 is contained in var4 and var0 is not var5 and result of function var6 ,if lang_code in _supported and lang_code is not None and check_for_language ( lang_code ) : ,if var0 in var4 and var0 is not var5 and var6 ( var0 ) : 
"if lang_code is not None,",if var0 is not var2 ,if lang_code is not None : ,if var0 is not var2 : 
"if lang_code is not contained in _supported and replacement is contained in _supported,",if var0 is not contained in var1 and replacement is contained in var1 ,if lang_code not in _supported and replacement in _supported : ,if var0 not in var1 and replacement in var1 : 
"if language is contained in _DJANGO_DEPRECATED_LOCALES,",if language is contained in var0 ,if language in _DJANGO_DEPRECATED_LOCALES : ,if language in var0 : 
"if language is not contained in _translations,",if language is not contained in var0 ,if language not in _translations : ,if language not in var0 : 
if language_code is not containsed in self._app_dict,if var0 is not containsed in var1,if language_code not in self . _app_dict : ,if var0 not in var1 : 
"if language_code is not contained in self._namespace_dict,",if var0 is not contained in var1 ,if language_code not in self . _namespace_dict : ,if var0 not in var1 : 
"if language_code is not contained in self._regex_dict,",if var0 is not contained in var1 ,if language_code not in self . _regex_dict : ,if var0 not in var1 : 
if language_code is not contained in self._reverse_dict,if var0 is not contained in var1,if language_code not in self . _reverse_dict : ,if var0 not in var1 : 
"if las equals integer 1,","if las equals integer 1,",if last == 1 : ,if last == 1 : 
"if las equals integer 2,","if las equals integer 2,",if last == 2 : ,if last == 2 : 
"if las equals integer 3,","if las equals integer 3,",if last == 3 : ,if last == 3 : 
"if last_bit is true,","if var0 is true,",if last_bit : ,if var0 : 
"if latest_date is None or item_date is greater than latest_date,",if var0 is var4 or var5 is greater var7 var0 ,if latest_date is None or item_date > latest_date : ,if var0 is var4 or var5 > var0 : 
"if leading is true,","if leading is true,",if leading : ,if leading : 
"if length of app_labels equals integer 0,","if length of var0 equals integer 0,",if len ( app_labels ) == 0 : ,if len ( var0 ) == 0 : 
"if length of app_labels is equal to integer 1,","if length of var0 is equal to integer 1,",if len ( app_labels ) == 1 : ,if len ( var0 ) == 1 : 
"if length of app_labels is greater than integer 1 and primary_keys is true,","if length of var0 is greater var1 integer 1 and var2 is true,",if len ( app_labels ) > 1 and primary_keys : ,if len ( var0 ) > 1 and var2 : 
"if length of args is not equal to integer 2,","if length of var0 is not equal to integer 2,",if len ( args ) != 2 : ,if len ( var0 ) != 2 : 
"if length of args is not equal to the sum of the lengths of params and prefix_args,",if length of args is not equal to sum of lengths of var0 and var1 ,if len ( args ) != len ( params ) + len ( prefix_args ) : ,if len ( args ) != len ( var0 ) + len ( var1 ) : 
"if length of args is smaller than integer 2,","if length of var0 is smaller var1 integer 2,",if len ( args ) < 2 : ,if len ( var0 ) < 2 : 
"for second and third element of args, respectively.   if length of args equals integer 2,","for second and third element of var0 respectively var2 if length of var0 equals integer 2,",if len ( args ) == 2 : ,if len ( var0 ) == 2 : 
"if length of args is greater than integer 1,","if length of var0 is greater var1 integer 1,",if len ( args ) > 1 : ,if len ( var0 ) > 1 : 
if length of args is greater than 4.,if length of var0 is greater var1 4.,if len ( args ) > 4 : ,if len ( var0 ) > 4 : 
"if length of bits is not zero,","if length of bits is not zero,",if len ( bits ) : ,if len ( bits ) : 
"if length of bits is not equal to integer 2,","if length of bits is not equal to integer 2,",if len ( bits ) != 2 : ,if len ( bits ) != 2 : 
"if length of bits is not equalt to integer 2,","if length of bits is not var0 to integer 2,",if len ( bits ) != 2 : ,if len ( bits ) != 2 : 
"if length of bits is not equal to integer 3,","if length of bits is not equal to integer 3,",if len ( bits ) != 3 : ,if len ( bits ) != 3 : 
"if length of bits is not equal to integer 6,","if length of bits is not equal to integer 6,",if len ( bits ) != 6 : ,if len ( bits ) != 6 : 
"if length of bits is smaller than integer 1,","if length of bits is smaller var0 integer 1,",if len ( bits ) < 1 : ,if len ( bits ) < 1 : 
"if length of bits is lesser than integer 2,","if length of bits is lesser var0 integer 2,",if len ( bits ) < 2 : ,if len ( bits ) < 2 : 
"if length of bits is smaller than integer 2 or second last element of bits is not equal to 'as',","if length of bits is smaller var0 integer 2 or second last element of bits is not equal to var1,",if len ( bits ) < 2 or bits [ - 2 ] != 'as' : ,if len ( bits ) < 2 or bits [ - 2 ] != var1 : 
"if length of bits is lesser than integer 3 or second element of bits is not equal to string 'as',","if length of bits is lesser var0 integer 3 or second element of bits is not equal to string var1,",if len ( bits ) < 3 or bits [ 1 ] != 'as' : ,if len ( bits ) < 3 or bits [ 1 ] != var1 : 
"if length bits is smaller than intger 4,","if length bits is smaller var0 var1 4,",if len ( bits ) < 4 : ,if len ( bits ) < 4 : 
"if length of bits equals integer 2,","if length of bits equals integer 2,",if len ( bits ) == 2 : ,if len ( bits ) == 2 : 
"if length of bits equals integer 3,","if length of bits equals integer 3,",if len ( bits ) == 3 : ,if len ( bits ) == 3 : 
"if length of bits equals integer 4,","if length of bits equals integer 4,",if len ( bits ) == 4 : ,if len ( bits ) == 4 : 
"if length of bits is greater than integer 2,","if length of bits is greater var0 integer 2,",if len ( bits ) > 2 : ,if len ( bits ) > 2 : 
"if length of bits is greater or equal to intger 2 and second last element of bits is equal to string 'as',","if length of bits is greater or equal to var0 2 and second last element of bits is equal to string var1,",if len ( bits ) >= 2 and bits [ - 2 ] == 'as' : ,if len ( bits ) >= 2 and bits [ - 2 ] == var1 : 
"if length of bits is greater or equal to integer 4 and second last element of bits equals sting 'from',","if length of bits is greater or equal to integer 4 and second last element of bits equals sting var0,",if len ( bits ) >= 4 and bits [ - 2 ] == 'from' : ,if len ( bits ) >= 4 and bits [ - 2 ] == var0 : 
"if length of bits is not integer 2 or 3,","if length of bits is not integer 2 or 3,","if len ( bits ) not in ( 2 , 3 ) : ","if len ( bits ) not in ( 2 , 3 ) : "
"if length of compressed is lesser than length of data decremented by 1,","if length of compressed is lesser var0 length of data var1 by 1,",if len ( compressed ) < ( len ( data ) - 1 ) : ,if len ( compressed ) < ( len ( data ) - 1 ) : 
"and result of the function humanize called with an argument fixture_dir.   if length of fixture_files_in_dir is greater than 1,","and result of function humanize called with argument var0 if length of var2 is greater var4 1,",if len ( fixture_files_in_dir ) > 1 : ,if len ( var2 ) > 1 : 
if length of fks_to_parent equals integer 1.,if length of var0 equals integer 1.,if len ( fks_to_parent ) == 1 : ,if len ( var0 ) == 1 : 
"and, if f.rel.toequals parent_model or f.rel.to is contained in result of the call to the method parent_model._meta.get_parent_list.   if length of fks_to_parent is integer 1,","and, if var0 var2 or var1 is contained in result of call to method var2 _meta var5 if length of var7 is integer 1,",if len ( fks_to_parent ) == 1 : ,if len ( var7 ) == 1 : 
"if length of hextet is greater than integer 1,","if length of var0 is greater var1 integer 1,",if len ( hextet ) > 1 : ,if len ( var0 ) > 1 : 
"if lengths of initial and data are not the same,","if lengths of initial and data are not same,",if len ( initial ) != len ( data ) : ,if len ( initial ) != len ( data ) : 
"if lengths of initial and data are equal,","if lengths of initial and data are equal,",if len ( initial ) != len ( data ) : ,if len ( initial ) != len ( data ) : 
"if length of key is greater than MEMCACHE_MAX_KEY_LENGTH,",if length of key is greater var0 var1 ,if len ( key ) > MEMCACHE_MAX_KEY_LENGTH : ,if len ( key ) > var1 : 
"slice language from (p+1)-th index to the end, calculate the length of the obtained segment, if it is greater than integer 2,","slice language from (p+1)-th index to end, calculate length of obtained segment, if it is greater var1 integer 2,",if len ( language [ p + 1 : ] ) > 2 : ,if len ( language [ p + 1 : ] ) > 2 : 
"is length of list_ equals integer 0,","is length of var0 equals integer 0,",if len ( list_ ) == 0 : ,if len ( var0 ) == 0 : 
"if length of list_ equals integer 1,","if length of var0 equals integer 1,",if len ( list_ ) == 1 : ,if len ( var0 ) == 1 : 
"if length of name is greater than integer 255,","if length of name is greater var0 integer 255,",if len ( name ) > 255 : ,if len ( name ) > 255 : 
"if lengths of new_operations and operations are the same,","if lengths of var0 and operations are same,",if len ( new_operations ) == len ( operations ) : ,if len ( var0 ) == len ( operations ) : 
if length of parts is greater than integer 1.,if length of parts is greater var0 integer 1.,if len ( parts ) > 1 : ,if len ( parts ) > 1 : 
"if length of parts is greater than integer 1 and last element of parts is contained in self.compression_formats,",if length of parts is greater var0 integer 1 and last element of parts is contained in self var2 ,if len ( parts ) > 1 and parts [ - 1 ] in self . compression_formats : ,if len ( parts ) > 1 and parts [ - 1 ] in self . var2 : 
"if length of password is greater than inner.block_size,",if length of password is greater var0 inner var2 ,if len ( password ) > inner . block_size : ,if len ( password ) > inner . var2 : 
"if length of s is greater than integer 13,","if length of s is greater var0 integer 13,",if len ( s ) > 13 : ,if len ( s ) > 13 : 
"if length of self._cache is greater or equal to self._max_entries,",if length of var0 is greater or equal to var1 ,if len ( self . _cache ) >= self . _max_entries : ,if len ( var0 ) >= var1 : 
"if length of self.dicts is equal to an integer 1,","if length of var0 is equal to integer 1,",if len ( self . dicts ) == 1 : ,if len ( var0 ) == 1 : 
"call the method self.namelist, if the length of the result is not integer 1,","call method var0 if length of result is not integer 1,",if len ( self . namelist ( ) ) != 1 : ,if len ( self . namelist ( ) ) != 1 : 
"if length of t equals to integer 2,","if length of t equals to integer 2,",if len ( t ) == 2 : ,if len ( t ) == 2 : 
"if length of t is greater than integer 1,","if length of t is greater var0 integer 1,",if len ( t ) > 1 : ,if len ( t ) > 1 : 
"if length of tablenames is greater than zero,","if length of var0 is greater var1 zero,",if len ( tablenames ) : ,if len ( var0 ) : 
"if length of unique_check equals integer 1,","if length of var0 equals integer 1,",if len ( unique_check ) == 1 : ,if len ( var0 ) == 1 : 
"if lengths of val1 and val2 are not equal,","if lengths of var0 and var1 are not equal,",if len ( val1 ) != len ( val2 ) : ,if len ( var0 ) != len ( var1 ) : 
"if length of value is not equal to integer 1,","if length of value is not equal to integer 1,",if len ( value ) != 1 : ,if len ( value ) != 1 : 
"Use SplitDateTimeField instead.', RemovedInDjango19Warning and stacklevel set to integer 2.   if length of value is not equal to integer 2,","Use var0 instead.' var1 and var3 set to integer 2 var4 if length of value is not equal to integer 2,",if len ( value ) != 2 : ,if len ( value ) != 2 : 
"if length of value is greater or equal to integer 2 and first and last elements of value are an empty string,","if length of value is greater or equal to integer 2 and first and last elements of value are empty string,",if len ( value ) >= 2 and value [ : 1 ] == value [ - 1 : ] == b''' : ,if len ( value ) >= 2 and value [ : 1 ] == value [ - 1 : ] == b''' : 
"if length of words is greater than length,","if length of words is greater var0 length,",if len ( words ) > length : ,if len ( words ) > length : 
if the length of variable m is not divisable by 4,if length of variable m is not var0 by 4,if len ( m ) % 4 != 0 : ,if len ( m ) % 4 != 0 : 
Check if the length of the variable shell is greater than or equal to 100,Check if length of variable shell is greater var0 or equal to 100,if len ( shell ) >= 100 : ,if len ( shell ) >= 100 : 
check if command-line arguments are not 3,check if command-line arguments are not 3,if len ( sys . argv ) != 3 : ,if len ( sys . argv ) != 3 : 
check if there are not 3 command-line arguments,check if there are not 3 command-line arguments,if len ( sys . argv ) != 3 : ,if len ( sys . argv ) != 3 : 
if the number of  system arguments is lower than 2,if number of system arguments is lower var1 2,if len ( sys . argv ) < 2 : ,if len ( sys . argv ) < 2 : 
if the number of arguments is lower than 3,if number of arguments is lower var0 3,if len ( sys . argv ) < 3 : ,if len ( sys . argv ) < 3 : 
if the number of arguments is less than 3,if number of arguments is less var0 3,if len ( sys . argv ) < 3 : ,if len ( sys . argv ) < 3 : 
if the number of arguments is greter than 3,if number of arguments is var0 var1 3,if len ( sys . argv ) > 1 : ,if len ( sys . argv ) > 1 : 
"if level is not None,",if level is not var0 ,if level is not None : ,if level is not var0 : 
"if level is not contained in logging._levelNames,",if level is not contained in var0 ,if level not in logging . _levelNames : ,if level not in var0 : 
"if lib is true,","if var0 is true,",if lib : ,if var0 : 
"if limit is None or length of x is lesser than or equal to limit,","if limit is var0 or length of x is lesser var1 or equal to limit,",if limit is None or len ( x ) <= limit : ,if limit is var0 or len ( x ) <= limit : 
"if limit_choices_to is not None,",if var0 is not var2 ,if limit_choices_to is not None : ,if var0 is not var2 : 
"if line is true,","if line is true,",if line : ,if line : 
"call the method line.lstrip, if the result starts with TRANSLATOR_COMMENT_MARK,",call method var0 if result starts with var1 ,if line . lstrip ( ) . startswith ( TRANSLATOR_COMMENT_MARK ) : ,if var0 ( ) . startswith ( var1 ) : 
"if last element of line is newline or carriage return character,","if last element of line is var0 or carriage return character,","if line [ - 1 : ] in ( b'\n' , b'\r' ) : ","if line [ - 1 : ] in ( b'\n' , b'\r' ) : "
"if link is not None,",if link is not var0 ,if link is not None : ,if link is not var0 : 
"if literal_match is true,","if var0 is true,",if literal_match : ,if var0 : 
"if loader is not None,",if loader is not var0 ,if loader is not None : ,if loader is not var0 : 
"if locales in not empty,","if locales in not empty,",if locales : ,if locales : 
"if locales is true,","if locales is true,",if locales : ,if locales : 
"if localized_fields equals ALL_FIELDS, or if localized_fields is true and f.name is contained in localized_fields,",if var0 equals var6 or if var0 is true and var7 is contained in var0 ,if localized_fields == ALL_FIELDS or ( localized_fields and f . name in localized_fields ) : ,if var0 == var6 or ( var0 and var7 in var0 ) : 
"if localized_fields is not None,",if var0 is not var2 ,if localized_fields is not None : ,if var0 is not var2 : 
"and directory_permissions_mode set to None.   if location is None,",and var0 set to var2 if location is var2 ,if location is None : ,if location is var2 : 
"if location is None,",if location is var0 ,if location is None : ,if location is var0 : 
"if locations is not empty,","if locations is not empty,",if locations : ,if locations : 
"if log is contained in child_loggers,",if log is contained in var0 ,if log in child_loggers : ,if log in var0 : 
"if logging_config is true,","if var0 is true,",if logging_config : ,if var0 : 
"if logging_settings is true,","if var0 is true,",if logging_settings : ,if var0 : 
"and value under the unique_for key of form.cleaned_data dictionary is not None,   if lookup equals a string 'date',","and value under var0 key of form var3 dict is not var4 if lookup equals string var6,",if lookup == 'date' : ,if lookup == var6 : 
"if lookup_view is contained in self._callback_strs,",if var0 is contained in var1 ,if lookup_view in self . _callback_strs : ,if var0 in var1 : 
"if m is true,","if m is true,",if m : ,if m : 
"call the function m.group, if the result evaluates to true,","call function var0 if result evaluates to true,",if m . group ( 1 ) : ,if var0 ( 1 ) : 
"if m is None,",if m is var0 ,if m is None : ,if m is var0 : 
"if m is not None,",if m is not var0 ,if m is not None : ,if m is not var0 : 
"if m and n are not None,",if m and n are not var0 ,if m is not None and n is not None : ,if m is not var0 and n is not var0 : 
"if match is true,","if match is true,",if match : ,if match : 
"host ends with '.' and host ends with pattern or host is equal to all but first elements of pattern,   substitute boolean true for match, otherwise substitute boolean False for match.   if match is true,","host ends with var0 and host ends with pattern or host is equal to all but first elements of pattern var1 substitute boolean true for match, otherwise substitute boolean var3 for match var1 if match is true,",if match : ,if match : 
"if max_age is not None,",if var0 is not var2 ,if max_age is not None : ,if var0 is not var2 : 
"if max_length is not None,",if var0 is not var2 ,if max_length is not None : ,if var0 is not var2 : 
"if max_num is None,",if var0 is var2 ,if max_num is None : ,if var0 is var2 : 
"if max_value is not None,",if var0 is not var2 ,if max_value is not None : ,if var0 is not var2 : 
"if maxsize equals integer 0,","if var0 equals integer 0,",if maxsize == 0 : ,if var0 == 0 : 
"if media is true,","if media is true,",if media : ,if media : 
"if mem_args is contained in cache,","if var0 is contained in cache,",if mem_args in cache : ,if var0 in cache : 
"if member is a directory,","if member is directory,",if member . isdir ( ) : ,if member . isdir ( ) : 
"if memo is None,",if memo is var0 ,if memo is None : ,if memo is var0 : 
"if message is true,","if message is true,",if message : ,if message : 
"if message is not None,",if message is not var0 ,if message is not None : ,if message is not var0 : 
if message is not None,if message is not var0,if message is not None : ,if message is not var0 : 
"if message_context is true,","if var0 is true,",if message_context : ,if var0 : 
"if first element of message_context equals to character '""',","if first element of var0 equals to character var2,",if message_context [ 0 ] == ''' : ,if var0 [ 0 ] == ''' : 
"if meta is None,",if var0 is var1 ,if meta is None : ,if var0 is var1 : 
"if middle ends with punctuation,","if middle ends with punctuation,",if middle . endswith ( punctuation ) : ,if middle . endswith ( punctuation ) : 
"if middle starts with opening,","if middle starts with opening,",if middle . startswith ( opening ) : ,if middle . startswith ( opening ) : 
"if migration.replaces is true,","if var0 is true,",if migration . replaces : ,if var0 : 
"with '%s' substituted for app_label, as arguments.   if migration_name equals to string 'zero',","with var0 substituted for var1 as arguments var3 if var4 equals to string var6,",if migration_name == 'zero' : ,if var4 == var6 : 
"if mime_encode is true,","if var0 is true,",if mime_encode : ,if var0 : 
"if mimetype is None,",if var0 is var1 ,if mimetype is None : ,if var0 is var1 : 
"if min_length is not None,",if var0 is not var2 ,if min_length is not None : ,if var0 is not var2 : 
"if min_num is None,",if var0 is var2 ,if min_num is None : ,if var0 is var2 : 
"if min_value is not None,",if var0 is not var2 ,if min_value is not None : ,if var0 is not var2 : 
"new_class.declared_fields.keys.   if missing_fields is true,","new_class var1 keys var2 if var3 is true,",if missing_fields : ,if var3 : 
"if model is contained in created_models,",if model is contained in var0 ,if model in created_models : ,if model in var0 : 
"if model is contained in excluded_models,",if model is contained in var0 ,if model in excluded_models : ,if model in var0 : 
"if mode is not contained in app_list_value,",if mode is not contained in var0 ,if model not in app_list_value : ,if model not in var0 : 
"if model_list is None,",if var0 is var2 ,if model_list is None : ,if var0 is var2 : 
"if call to the function module_has_submodule with app_config.module and ""management"" evaluates to True.",if call to function var0 with var2 module and var4 evaluates to var5 ,"if module_has_submodule ( app_config . module , 'management' ) : ","if var0 ( var2 . module , 'management' ) : "
"if call to the function module_has_submodule with 2 arguments: app_config.module and module_to_search evaluates to true,","if call to function var0 with 2 arguments: var1 module and var3 evaluates to true,","if module_has_submodule ( app_config . module , module_to_search ) : ","if var0 ( var1 . module , var3 ) : "
"if months is true,","if months is true,",if months : ,if months : 
"if msg is true,","if msg is true,",if msg : ,if msg : 
"if msgs is true,","if msgs is true,",if msgs : ,if msgs : 
"if name is true,","if name is true,",if name : ,if name : 
"if name converted to lower case equals to string 'subject',","if name converted to lower case equals to string var0,",if name . lower ( ) == 'subject' : ,if name . lower ( ) == var0 : 
"convert name to lower case if it equals to string 'from' or 'to,","convert name to lower case if it equals to string var0 or 'to,","if name . lower ( ) in ( 'from' , 'to' ) : ","if name . lower ( ) in ( var0 , 'to' ) : "
"convert name to lower case, if it is contained in ADDRESS_HEADERS,s","convert name to lower case, if it is contained in var0 s",if name . lower ( ) in ADDRESS_HEADERS : ,if name . lower ( ) in var0 : 
"if name starts with an string '.',","if name starts with string var0,",if name . startswith ( '.' ) : ,if name . startswith ( var0 ) : 
"if name equals a string 'content-disposition',","if name equals string var0,",if name == 'content-disposition' : ,if name == var0 : 
"if name equals a string 'regex',","if name equals string var0,",if name == 'regex' : ,if name == var0 : 
"if name equals string ""_wrapped"",","if name equals string var0,",if name == '_wrapped' : ,if name == '_wrapped' : 
"if name is contained in existing,","if name is contained in existing,",if name in existing : ,if name in existing : 
if name is contained in lib.filters.,if name is contained in var0 ,if name in lib . filters : ,if name in var0 : 
"if name is contained in lib.tags,",if name is contained in var0 ,if name in lib . tags : ,if name in var0 : 
"if name is contained in MEDIA_TYPES,",if name is contained in var0 ,if name in MEDIA_TYPES : ,if name in var0 : 
"if name is None,",if name is var0 ,if name is None : ,if name is var0 : 
"otherwise name is None.   if name is None,",otherwise name is var0 if name is var0 ,if name is None : ,if name is var0 : 
"if name is None and compile_function is None,",if name is var0 and var2 is var0 ,if name is None and compile_function is None : ,if name is var0 and var2 is var0 : 
"if name is None and filter_func is None,",if name is var0 and var2 is var0 ,if name is None and filter_func is None : ,if name is var0 and var2 is var0 : 
"if name is not None,",if name is not var0 ,if name is not None : ,if name is not var0 : 
"if name is not contained in data,","if name is not contained in data,",if name not in data : ,if name not in data : 
"if name is not contained in logging._handlers,",if name is not contained in var0 ,if name not in logging . _handlers : ,if name not in var0 : 
"where '%s' is replaced with name.   if name is not contained in parser._namedCycleNodes,",var0 var1 is replaced with name var2 if name is not contained in var3 ,if name not in parser . _namedCycleNodes : ,if name not in var3 : 
"if namespaces is true,","if var0 is true,",if namespaces : ,if var0 : 
"if neg is true,","if var0 is true,",if neg : ,if var0 : 
"if new is None,",if new is var0 ,if new is None : ,if new is var0 : 
"if new_attr is None,",if var0 is var2 ,if new_attr is None : ,if var0 is var2 : 
"if new_conn_created is true,","if var0 is true,",if new_conn_created : ,if var0 : 
"if new_mod is None,",if var0 is var2 ,if new_mod is None : ,if var0 is var2 : 
"if new_name is not equal to col_name,",if var0 is not equal to var1 ,if new_name != col_name : ,if var0 != var1 : 
"if new_name ends with a string '_',","if var0 ends with string var2,",if new_name . endswith ( '_' ) : ,if var0 . endswith ( var2 ) : 
"if new_name ends with string '_id',","if var0 ends with string var2,",if new_name . endswith ( '_id' ) : ,if var0 . endswith ( var2 ) : 
"call the method new_name.find, with an argument string '__', if it evaluates to greater or equal than integer 0,","call method var0 find, with argument string var2, if it evaluates to greater or equal var3 integer 0,",if new_name . find ( '__' ) >= 0 : ,if var0 . find ( var2 ) >= 0 : 
"if new_name starts with a string '_',","if var0 starts with string var2,",if new_name . startswith ( '_' ) : ,if var0 . startswith ( var2 ) : 
"if first element of new_name is digit,","if first element of var0 is digit,",if new_name [ 0 ] . isdigit ( ) : ,if var0 [ 0 ] . isdigit ( ) : 
"if new_name is contained in used_column_names,",if var0 is contained in var1 ,if new_name in used_column_names : ,if var0 in var1 : 
"if new_value equals value,","if var0 equals value,",if new_value == value : ,if var0 == value : 
"if newretval is not None,",if var0 is not var1 ,if newretval is not None : ,if var0 is not var1 : 
"if next_item is true and next_item is an instance of list or tuple type,","if var0 is true and var0 is instance of list or tuple type,","if next_item and isinstance ( next_item , ( list , tuple ) ) : ","if var0 and isinstance ( var0 , ( list , tuple ) ) : "
"call the method node.getElementsByTagName with an argument string 'None', if it evaluates to true,","call method node var1 with argument string var2, if it evaluates to true,",if node . getElementsByTagName ( 'None' ) : ,if node . var1 ( var2 ) : 
"call the method node.hasAttribute with string 'pk' as an argument, if it evaluates to true,","call method node var1 with string var2 as argument, if it evaluates to true,",if node . hasAttribute ( 'pk' ) : ,if node . var1 ( var2 ) : 
"if node.must_be_first is true and nodelist is true,","if node var1 is true and var2 is true,",if node . must_be_first and nodelist : ,if node . var1 and var2 : 
"if nodelist is true,","if var0 is true,",if nodelist : ,if var0 : 
"if nodelist.contains_nontext is true,","if nodelist var1 is true,",if nodelist . contains_nontext : ,if nodelist . var1 : 
"call the method nodelist.get_nodes_by_type with an argument ExtendsNode, if it evaluates to true,","call method nodelist var1 with argument var2 if it evaluates to true,",if nodelist . get_nodes_by_type ( ExtendsNode ) : ,if nodelist . var1 ( var2 ) : 
"if nodelist_empty is None,",if var0 is var2 ,if nodelist_empty is None : ,if var0 is var2 : 
"if _cached_filenames is empty and settings.USE_I18N is True,",if var0 is empty and settings var1 is var2 ,if not _cached_filenames and settings . USE_I18N : ,if not var0 and settings . var1 : 
"if _cookie_allows_colon_in_names is False,",if var0 is var1 ,if not _cookie_allows_colon_in_names : ,if not var0 : 
"if _cookie_encodes_correctly is boolean False,",if var0 is boolean var1 ,if not _cookie_encodes_correctly : ,if not var0 : 
"call the function _is_shorthand_ip with an argument ip_str, if it evaluates to false,","call function _is_shorthand_ip with argument var0 if it evaluates to false,",if not _is_shorthand_ip ( ip_str ) : ,if not _is_shorthand_ip ( var0 ) : 
"if _serializers is false,","if var0 is false,",if not _serializers : ,if not var0 : 
"f _serializers is false,","f var0 is false,",if not _serializers : ,if not var0 : 
"do not perform the following only if bits.scheme and bits.netloc are both true,","do not perform following only if var0 and var1 are both true,",if not ( bits . scheme and bits . netloc ) : ,if not ( var0 and var1 ) : 
"if self.data and self.files are both False,",if var0 and var1 are both var2 ,if not ( self . data or self . files ) : ,if not ( var0 or var1 ) : 
"if self.inverse_match equals to return value of the self.regex.search method converted to boolean, called with argument force_text(value),","if self var1 equals to return value of var2 method converted to boolean, called with argument force_text(value),",if not ( self . inverse_match is not bool ( self . regex . search ( force_text ( value ) ) ) ) : ,if not ( self . var1 is not bool ( self . regex . search ( force_text ( value ) ) ) ) : 
"if value is boolean False or boolean True or value is None or value is an empty string, do not perform the following,","if value is boolean var0 or boolean var1 or value is var2 or value is empty string, do not perform following,",if not ( value is True or value is False or value is None or value == '' ) : ,if not ( value is var1 or value is var0 or value is var2 or value == '' ) : 
"if allow_overwrite is boolean False and call to the os.access function with arguments new_file_name and os.F_OK evaluates to boolean True,",if var0 is boolean var2 and call to var3 function with arguments var5 and os var7 evaluates to boolean var9 ,"if not allow_overwrite and os . access ( new_file_name , os . F_OK ) : ","if not var0 and var3 ( var5 , var4os . var4ar7 ) : "
"if answer is false,","if answer is false,",if not answer : ,if not answer : 
"if app_config.path is true,","if var0 path is true,",if not app_config . path : ,if not var0 . path : 
"if app_labels is false,","if var0 is false,",if not app_labels : ,if not var0 : 
"if args is true,","if var0 is true,",if not args : ,if not var0 : 
"if fourth element of attr_list and termios.ECHO are both true,","if fourth element of var0 and var2 var3 are both true,",if not attr_list [ 3 ] & termios . ECHO : ,if not var0 [ 3 ] & var2 . var3 : 
"use length of result as an argument for the call to the function six.text_type, substitute the result for width.   if autoescape is false, if value is an instance of SafeData,","use length of result as argument for call to function six var1 substitute result for width var2 if var3 is false, if value is instance of var4 ","if not autoescape or isinstance ( value , SafeData ) : ","if not var3 or isinstance ( value , var4 ) : "
"if basedirs is empty,","if var0 is empty,",if not basedirs : ,if not var0 : 
"if bits is false,","if bits is false,",if not bits : ,if not bits : 
"if boundary is false or return value of the method cgi.valid_boundary called with an argument boundary evaluates to false,","if boundary is false or return value of method cgi var0 called with argument boundary evaluates to false,",if not boundary or not cgi . valid_boundary ( boundary ) : ,if not boundary or not cgi . var0 ( boundary ) : 
"if buf is false,","if var0 is false,",if not buf : ,if not var0 : 
"if bytes is false,","if bytes is false,",if not bytes : ,if not bytes : 
"get 'render' attribute of template object, if it is callable,","get var0 attribute of template object, if it is callable,","if not callable ( getattr ( template , 'render' , None ) ) : ","if not callable ( getattr ( template , var0 , None ) ) : "
"if original_lookup and lookup_view are not callable objects,","if var0 and var1 are not callable objects,",if not callable ( original_lookup ) and callable ( lookup_view ) : ,if not callable ( var0 ) and callable ( var1 ) : 
"if view_function is not a callable function,","if var0 is not callable function,",if not callable ( view_func ) : ,if not callable ( view_func ) : 
"substitute it for callback, if the attribute doesnt exists, callback is None.   if not callback,","substitute it for callback, if attribute doesnt exists, callback is var0 if not callback,",if not callback : ,if not callback : 
"otherwise add boolean False, for every candidate in the result perform following,   if candidate is false,","otherwise add boolean var0 for every didate in result perform following var1 if didate is false,",if not candidate : ,if not candidate : 
"if changed is false,","if changed is false,",if not changed : ,if not changed : 
"if it exists or None if not and convert_apps set to app_labels, if it exists or None if not, substitute the result for changes.   if changes is false and self.verbosity is greater than, or equal to iteger 1,","if it exists or var0 if not and var2 set to var4 if it exists or var0 if not, substitute result for changes var6 if changes is false and var7 is greater var8 or equal to var9 1,",if not changes and self . verbosity >= 1 : ,if not changes and var7 >= 1 : 
"call the function check_for_language with an argument lang, if it evaluates to false,","call function var0 with argument lang, if it evaluates to false,",if not check_for_language ( lang ) : ,if not var0 ( lang ) : 
"if chunk is empty,","if chunk is empty,",if not chunk : ,if not chunk : 
"slice chunk list to get the last rollback elements, if the new list is not empty,","slice chunk list to get last rollback elements, if new list is not empty,",if not chunk [ : - rollback ] : ,if not chunk [ : - rollback ] : 
"if chunk_size is false,","if var0 is false,",if not chunk_size : ,if not var0 : 
"if chunks is false,","if chunks is false,",if not chunks : ,if not chunks : 
"if cleaned_line is false,","if var0 is false,",if not cleaned_line : ,if not var0 : 
"if cls is false,","if cls is false,",if not cls : ,if not cls : 
"if commit is true,","if commit is true,",if not commit : ,if not commit : 
"if commit is false,","if commit is false,",if not commit : ,if not commit : 
"if config_string is false,","if var0 is false,",if not config_string : ,if not var0 : 
"if content_type is false,","if var0 is false,",if not content_type : ,if not var0 : 
"return the value under the 'CONTENT_TYPE' of the META dictionary, if it doesnt exist return an empty string,   substitute the result for content_type.   if content_type doesnt start with string 'multipart/',","return value under var0 of var1 dict, if it doesnt exist return empty string var3 substitute result for var5 if var5 doesnt start with string var9,",if not content_type . startswith ( 'multipart/' ) : ,if not var5 . startswith ( var9 ) : 
"if context_instance is false,","if var0 is false,",if not context_instance : ,if not var0 : 
"if data is false,","if data is false,",if not data : ,if not data : 
if data is empty.,if data is empty.,if not data : ,if not data : 
"if data is false and initial is true,","if data is false and initial is true,",if not data and initial : ,if not data and initial : 
"if dictionary is false,","if dict is false,",if not dictionary : ,if not dictionary : 
"if digest is false,","if digest is false,",if not digest : ,if not digest : 
"get the value under the app_label key of the directory_created dictionary, if exists and it is false,","get value under var0 key of var1 dict, if exists and it is false,","if not directory_created . get ( app_label , False ) : ","if not var1 . get ( var0 , False ) : "
"if dklen is false,","if var0 is false,",if not dklen : ,if not var0 : 
"if e.connection_reset is false,","if e var1 is false,",if not e . connection_reset : ,if not e . var1 : 
"call the email_message.recipients method, if it evaluates to false,","call var0 recipients method, if it evaluates to false,",if not email_message . recipients ( ) : ,if not var0 . recipients ( ) : 
"if email_messages is false,","if var0 is false,",if not email_messages : ,if not var0 : 
if encoding is false.,if encoding is false.,if not encoding : ,if not encoding : 
"if etags is false,","if var0 is false,",if not etags : ,if not var0 : 
"if expires is false,","if expires is false,",if not expires : ,if not expires : 
"if ext doesnt start with '.' character,","if var0 doesnt start with var1 character,",if not ext . startswith ( '.' ) : ,if not var0 . startswith ( var1 ) : 
"if ext is false and content_type is true,","if var0 is false and var1 is true,",if not ext and content_type : ,if not var0 and var1 : 
"if extra_context is false,","if var0 is false,",if not extra_context : ,if not var0 : 
"if not field_value is None.   if f.blank is false and form_field.required is false and field_value is contained in form_field.empty_values,",if not var0 is var4 if var6 is false and var7 required is false and var0 is contained in var7 var10 ,if not f . blank and not form_field . required and field_value in form_field . empty_values : ,if not var6 and not var7 . required and var0 in var7 . var10 : 
"if f.editable is true and f is an instance of models.AutoField, or f.name is not contained in cleaned_data,",if var0 is true and f is instance of models var1 or var2 is not contained in var3 ,"if not f . editable or isinstance ( f , models . AutoField ) or f . name not in cleaned_data : ","if not var0 or isinstance ( f , models . var1 ) or var2 not in var3 : "
"if field.show_hidden_initial is false,","if field var1 is false,",if not field . show_hidden_initial : ,if not field . var1 : 
"if field_desc doesnt end with '(',","if field_desc doesnt end with '(',",if not field_desc . endswith ( '(' ) : ,if not field_desc . endswith ( '(' ) : 
"if field_name is false,","if var0 is false,",if not field_name : ,if not var0 : 
"if file_name is false,","if var0 is false,",if not file_name : ,if not var0 : 
"if filename is empty,","if filename is empty,",if not filename : ,if not filename : 
"if fname doesnt start with self._dir and fname file path doesnt exists,","if var0 doesnt start with var2 and var0 file path doesnt exists,",if not fname . startswith ( self . _dir ) or not os . path . exists ( fname ) : ,if not var0 . startswith ( var2 ) or not os . path . exists ( var0 ) : 
"if function form.has_changed evaluates to false,","if function form var1 evaluates to false,",if not form . has_changed ( ) : ,if not form . var1 ( ) : 
"call the form.is_valid method, if it evaluates to false,","call form var0 method, if it evaluates to false,",if not form . is_valid ( ) : ,if not form . var0 ( ) : 
"call the function formset.is_valid, if it evaluates to false,","call function formset var1 if it evaluates to false,",if not formset . is_valid ( ) : ,if not formset . var1 ( ) : 
"if found is false and, line is false or return value of the function plural_forms_re.search called with an argument line is false,","if found is false and, line is false or return value of function var0 search called with argument line is false,",if not found and ( not line or plural_forms_re . search ( line ) ) : ,if not found and ( not line or var0 . search ( line ) ) : 
"func.is_usable in false,","func var1 in false,",if not func . is_usable : ,if not func . var1 : 
"if func_name is false,","if var0 is false,",if not func_name : ,if not var0 : 
"get 'editable' attribute from object f, if it doesnt exists or its true,","get var0 attribute from object f, if it doesnt exists or its true,","if not getattr ( f , 'editable' , False ) : ","if not getattr ( f , var0 , False ) : "
"get 'nodelist' attribute from self object. if it doesnt exists return boolean False, if the result evaluates to false,","get var0 attribute from self object. if it doesnt exists return boolean var1 if result evaluates to false,","if not getattr ( self , 'nodelist' , False ) : ","if not getattr ( self , var0 , var1 ) : "
"if c doesnt have an attribute '__call__' and types has an 'ClassType' attribute and type of c is not equal to types.ClassType,","if c doesnt have attribute var0 and types has var1 attribute and type of c is not equal to types.ClassType,","if not hasattr ( c , '__call__' ) and hasattr ( types , 'ClassType' ) and type ( c ) != types . ClassType : ","if not hasattr ( c , var0 ) and hasattr ( types , 'ClassType' ) and type ( c ) != types . ClassType : "
"if c doesnt have an attribute '__call__', and types has an attribute 'ClassType', and type of c is not equal to types.ClassType,","if c doesnt have attribute var0, and types has attribute var1, and type of c is not equal to types.ClassType,","if not hasattr ( c , '__call__' ) and hasattr ( types , 'ClassType' ) and type ( c ) != types . ClassType : ","if not hasattr ( c , var0 ) and hasattr ( types , 'ClassType' ) and type ( c ) != types . ClassType : "
"if callback doesnt have '__name__' attribute,","if callback doesnt have var0 attribute,","if not hasattr ( callback , '__name__' ) : ","if not hasattr ( callback , var0 ) : "
"if content has an 'chunks' attribute,","if content has var0 attribute,","if not hasattr ( content , 'chunks' ) : ","if not hasattr ( content , var0 ) : "
"if e doesnt have an 'django_template_source' attribute,","if e doesnt have var0 attribute,","if not hasattr ( e , 'django_template_source' ) : ","if not hasattr ( e , var0 ) : "
"if f doesnt has an 'save_form_data' attribute,","if f doesnt has var0 attribute,","if not hasattr ( f , 'save_form_data' ) : ","if not hasattr ( f , var0 ) : "
"if func doesnt have a attribute '__name__',","if var0 doesnt have attribute var1,","if not hasattr ( func , '__name__' ) : ","if not hasattr ( var0 , var1 ) : "
"if mail doesnt have an 'outbox' attribute,","if mail doesnt have var0 attribute,","if not hasattr ( mail , 'outbox' ) : ","if not hasattr ( mail , var0 ) : "
"if '_meta' is not an attribute of obj,",if var0 is not attribute of var1 ,"if not hasattr ( obj , '_meta' ) : ","if not hasattr ( var1 , var0 ) : "
"if other_dict doesnt have an '__getitem__' attribute,","if var0 doesnt have var2 attribute,","if not hasattr ( other_dict , '__getitem__' ) : ","if not hasattr ( var0 , var2 ) : "
"if package doesnt have an 'rindex' attribute,","if package doesnt have var0 attribute,","if not hasattr ( package , 'rindex' ) : ","if not hasattr ( package , var0 ) : "
"if parser doesnt have an '_namedCycleNodes' attribute,","if parser doesnt have var0 attribute,","if not hasattr ( parser , '_namedCycleNodes' ) : ","if not hasattr ( parser , var0 ) : "
"if self doesnt have an '_body' attribute,","if self doesnt have var0 attribute,","if not hasattr ( self , '_body' ) : ","if not hasattr ( self , var0 ) : "
"if self doesnt have an '_deleted_form_indexes' attribute,","if self doesnt have var0 attribute,","if not hasattr ( self , '_deleted_form_indexes' ) : ","if not hasattr ( self , var0 ) : "
if self does not have an attribute named '_dimensions_cache'.,if self does not have attribute named var0.,"if not hasattr ( self , '_dimensions_cache' ) : ","if not hasattr ( self , var0 ) : "
"if self does not have '_files' attribute,","if self does not have var0 attribute,","if not hasattr ( self , '_files' ) : ","if not hasattr ( self , var0 ) : "
"if self doesnt have an attribute '_fqdn',","if self doesnt have attribute var0,","if not hasattr ( self , '_fqdn' ) : ","if not hasattr ( self , var0 ) : "
"if self has an attribute '_object_dict',","if self has attribute var0,","if not hasattr ( self , '_object_dict' ) : ","if not hasattr ( self , var0 ) : "
"where '%s' is replaced with self.__class__.__name__.   if self doesnt have an '_ordering' attribute,","var0 var1 is replaced with var2 if self doesnt have var4 attribute,","if not hasattr ( self , '_ordering' ) : ","if not hasattr ( self , var4 ) : "
if self does not has an '_post' attribute.,if self does not has var0 attribute.,"if not hasattr ( self , '_post' ) : ","if not hasattr ( self , var0 ) : "
"if self doesnt have '_queryset' attribute,","if self doesnt have var0 attribute,","if not hasattr ( self , '_queryset' ) : ","if not hasattr ( self , var0 ) : "
"RemovedInDjango19Warning and integer 2 as arguments.   if self does not have an '_request' attribute,","var0 and integer 2 as arguments var1 if self does not have var2 attribute,","if not hasattr ( self , '_request' ) : ","if not hasattr ( self , var2 ) : "
"if self does not have 'bad_cookies' attribute,","if self does not have var0 attribute,","if not hasattr ( self , 'bad_cookies' ) : ","if not hasattr ( self , var0 ) : "
"if template has an attribute 'render',","if template has attribute var0,","if not hasattr ( template , 'render' ) : ","if not hasattr ( template , var0 ) : "
"if template doesnt have a 'render' attribute,","if template doesnt have var0 attribute,","if not hasattr ( template , 'render' ) : ","if not hasattr ( template , var0 ) : "
"languages set to a list with an element self.__locale, codeset set to a string 'utf-8' and fallback set to use_null_fallback,   substitute the result for translation.   if translation has an attribute '_catalog',","languages set to list with element var0 var1 set to string var2 and fallback set to var3 substitute result for translation var5 if translation has attribute var7,","if not hasattr ( translation , '_catalog' ) : ","if not hasattr ( translation , var7 ) : "
"if values has an attribute '__len__',","if values has attribute var0,","if not hasattr ( values , '__len__' ) : ","if not hasattr ( values , var0 ) : "
"substitute the result for value under the index key of the hextets dictionary.   get the value under the index key of the hextets dictionary, if it is false,","substitute result for value under index key of var0 dict var2 get value under index key of var0 dict, if it is false,",if not hextets [ index ] : ,if not var0 [ index ] : 
call the method host_validation_re.match with an argument host.,call method var0 match with argument host.,if not host_validation_re . match ( host ) : ,if not var0 . match ( host ) : 
"call the function include_is_allowed with an argument filepath, if it evaluates to false,","call function var0 with argument var1 if it evaluates to false,",if not include_is_allowed ( filepath ) : ,if not var0 ( var1 ) : 
"if incremental is true,","if incremental is true,",if not incremental : ,if not incremental : 
"if indent is false,","if indent is false,",if not indent : ,if not indent : 
"and third element of the return value of the function sys.exc_info.   if inhibit_post_migrate is false,","and third element of return value of function sys var1 if var3 is false,",if not inhibit_post_migrate : ,if not var3 : 
"convert ip_str to lowercase, if it doesnt start with a string '0000:0000:0000:0000:0000:ffff:',","convert var0 to lowercase, if it doesnt start with string var2,",if not ip_str . lower ( ) . startswith ( '0000:0000:0000:0000:0000:ffff:' ) : ,if not var0 . lower ( ) . startswith ( var2 ) : 
"split ip_str by ':', if last element of the result is not equal to hextet.","split var0 by var2, if last element of result is not equal to var3 ",if not ip_str . split ( ':' ) [ - 1 ] == hextet : ,if not var0 . split ( var2 ) [ - 1 ] == var3 : 
"call he function is_valid_ipv6_address with an argument ip_str, if it evaluates to false,","call he function var0 with argument var1 if it evaluates to false,",if not is_valid_ipv6_address ( ip_str ) : ,if not var0 ( var1 ) : 
"call the function is_valid_ipv6_address with an argument value, if it evaluates to false,","call function var0 with argument value, if it evaluates to false,",if not is_valid_ipv6_address ( value ) : ,if not var0 ( value ) : 
"call the function isabs with an argument path, if it evaluates to false,","call function var0 with argument path, if it evaluates to false,",if not isabs ( path ) : ,if not var0 ( path ) : 
"if candidate is not an instance of six.string_types,",if didate is not instance of six var1 ,"if not isinstance ( candidate , six . string_types ) : ","if not isinstance ( candidate , six . var1 ) : "
"if cookie is not an instance of http_cookies.BaseCookie,",if cookie is not instance of var0 var2 ,"if not isinstance ( cookie , http_cookies . BaseCookie ) : ","if not isinstance ( cookie , var0 . var2 ) : "
"result of multiplication of integers: 60,60,24,365, and return value of ungettext_lazy with 2 arguments: '%d year', '%d years',   result of multiplication of integers: 60,60,24,30, and return value of ungettext_lazy with 2 arguments: '%d month', '%d month',   result of multiplication of integers: 60,60,24,7, and return value of ungettext_lazy with 2 arguments: '%d weeks', '%d weeks',   result of multiplication of integers: 60,60,24, and return value of ungettext_lazy with 2 arguments: '%d days', '%d days',   result of multiplication of integers: 60,60, and return value of ungettext_lazy with 2 arguments: '%d hours', '%d hours',   result of multiplication of integers: 60, and return value of ungettext_lazy with 2 arguments: '%d minutes', '%d minutes',   if d is not an instance of datetime.datetime,","result of multiplication of integers: var0 and return value of var1 with 2 arguments: var13, var14 var15 result of multiplication of integers: var21 and return value of var1 with 2 arguments: var22, var22 var15 result of multiplication of integers: var24 and return value of var1 with 2 arguments: var25, var25 var15 result of multiplication of integers: 60,60,24, and return value of var1 with 2 arguments: var27, var27 var15 result of multiplication of integers: 60,60, and return value of var1 with 2 arguments: var29, var29 var15 result of multiplication of integers: 60, and return value of var1 with 2 arguments: var31, var31 var15 if d is not instance of var33 ","if not isinstance ( d , datetime . datetime ) : ","if not isinstance ( d , var33 ) : "
"if data is not an instance of basestring,",if data is not instance of var0 ,"if not isinstance ( data , basestring ) : ","if not isinstance ( data , var0 ) : "
"if e is not an instance of CommandError class,","if e is not instance of var0 class,","if not isinstance ( e , CommandError ) : ","if not isinstance ( e , var0 ) : "
"if error is not an instance of ValidationError,",if error is not instance of var0 ,"if not isinstance ( error , ValidationError ) : ","if not isinstance ( error , var0 ) : "
"if fk is not an instance of ForeignKey class, or fk.rel.to is not equal to parent_model,","if var0 is not instance of var1 class, or var0 rel.to is not equal to var3 ","if not isinstance ( fk , ForeignKey ) or ( fk . rel . to != parent_model and fk . rel . to not in parent_model . _meta . get_parent_list ( ) ) : ","if not isinstance ( var0 , var1 ) or ( var0 . rel . to != var3 and var0 . rel . to not in var3 . _meta . get_parent_list ( ) ) : "
"if i is not an instance of six.integer_types class,","if i is not instance of six var1 class,","if not isinstance ( i , six . integer_types ) : ","if not isinstance ( i , six . var1 ) : "
"if index is not an instance of six.integer_types or tuple type,","if index is not instance of six var1 or tuple type,","if not isinstance ( index , ( slice , ) + six . integer_types ) : ","if not isinstance ( index , ( slice , ) + six . var1 ) : "
"if initial is not an instance of the list type,","if initial is not instance of list type,","if not isinstance ( initial , list ) : ","if not isinstance ( initial , list ) : "
"if item is not an instance of list or tuple class,","if item is not instance of list or tuple class,","if not isinstance ( item , ( list , tuple ) ) : ","if not isinstance ( item , ( list , tuple ) ) : "
"if list_ is not an instance of tuple or list types and length of list_ is not equal to integer 2,","if var0 is not instance of tuple or list types and length of var0 is not equal to integer 2,","if not isinstance ( list_ , ( tuple , list ) ) or len ( list_ ) != 2 : ","if not isinstance ( var0 , ( tuple , list ) ) or len ( var0 ) != 2 : "
"if message is not an instance of the ValidationError class,","if message is not instance of var0 class,","if not isinstance ( message , ValidationError ) : ","if not isinstance ( message , var0 ) : "
"if messages is not an instance of the ValidationError class,","if messages is not instance of var0 class,","if not isinstance ( messages , ValidationError ) : ","if not isinstance ( messages , var0 ) : "
"if node is not an instance of ExtendsNode,",if node is not instance of var0 ,"if not isinstance ( node , ExtendsNode ) : ","if not isinstance ( node , var0 ) : "
"if node is not an instance of TextNode,",if node is not instance of var0 ,"if not isinstance ( node , TextNode ) : ","if not isinstance ( node , var0 ) : "
"if s is not an instance of the object Exception,",if s is not instance of object var0 ,"if not isinstance ( s , Exception ) : ","if not isinstance ( s , var0 ) : "
"if s is not an instance of the object six/string_types,",if s is not instance of object six var0 ,"if not isinstance ( s , six . string_types ) : ","if not isinstance ( s , six . var0 ) : "
"if s is not an instance of the object six.string_types,",if s is not instance of object six var1 ,"if not isinstance ( s , six . string_types ) : ","if not isinstance ( s , six . var1 ) : "
"if self.file_path is not an instance of six.string_types,",if self var1 is not instance of six var3 ,"if not isinstance ( self . file_path , six . string_types ) : ","if not isinstance ( self . var1 , six . var3 ) : "
"if self.object is not an instance of list type,","if var0 is not instance of list type,","if not isinstance ( self . object_list , list ) : ","if not isinstance ( self . object_list , list ) : "
"if stream_or_string is not an instance of bytes or six.string_types,",if var0 is not instance of bytes or six var2 ,"if not isinstance ( stream_or_string , ( bytes , six . string_types ) ) : ","if not isinstance ( var0 , ( bytes , six . var2 ) ) : "
"if urlconf_name is not an instance of six.string_types class,","if var0 is not instance of six var2 class,","if not isinstance ( urlconf_name , six . string_types ) : ","if not isinstance ( var0 , six . var2 ) : "
"if value is not an instance of bytes or six.text_type classes,","if value is not instance of bytes or six var1 classes,","if not isinstance ( value , ( bytes , six . text_type ) ) : ","if not isinstance ( value , ( bytes , six . var1 ) ) : "
"if value is not an instance of list or tuple types,","if value is not instance of list or tuple types,","if not isinstance ( value , ( list , tuple ) ) : ","if not isinstance ( value , ( list , tuple ) ) : "
"if vale is not an instance of ConvertingDict and value is an instance of dict type,","if vale is not instance of var0 and value is instance of var1 type,","if not isinstance ( value , ConvertingDict ) and isinstance ( value , dict ) : ","if not isinstance ( value , var0 ) and isinstance ( value , var1 ) : "
"if value is not an instance of list type,","if value is not instance of list type,","if not isinstance ( value , list ) : ","if not isinstance ( value , list ) : "
"if var is not an instance of six.string_types,",if var is not instance of six var1 ,"if not isinstance ( var , six . string_types ) : ","if not isinstance ( var , six . var1 ) : "
"if viewname is not an instance of the six.string_types object,","if var0 is not instance of six var2 object,","if not isinstance ( viewname , six . string_types ) : ","if not isinstance ( var0 , six . var2 ) : "
"otherwise it is boolean False.   if kwarg_format is false,","otherwise it is boolean var0 if var2 is false,",if not kwarg_format : ,if not var2 : 
"call the method language_code_re.search with an argument accept_lang, if it evaluates to false,","call method var0 search with argument var2 if it evaluates to false,",if not language_code_re . search ( accept_lang ) : ,if not var0 . search ( var2 ) : 
"call the method language_code_re.search with an argument lang_code, if it evaluates to false,","call method var0 search with argument var2 if it evaluates to false,",if not language_code_re . search ( lang_code ) : ,if not var0 . search ( var2 ) : 
"if last_row doesnt ends with row_ender,",if var0 doesnt ends with var1 ,if not last_row . endswith ( row_ender ) : ,if not var0 . endswith ( var1 ) : 
if length of empty_label is not equal to integer 3.,if length of var0 is not equal to integer 3.,if not len ( empty_label ) == 3 : ,if not len ( var0 ) == 3 : 
"if length of self.backout is greater than zero,","if length of var0 is greater var1 zero,",if not len ( self . backout ) : ,if not len ( var0 ) : 
"if lib is false,","if var0 is false,",if not lib : ,if not var0 : 
"if locale_dir is false,","if var0 is false,",if not locale_dir : ,if not var0 : 
"if lookup is false,","if lookup is false,",if not lookup : ,if not lookup : 
"if m is false,","if m is false,",if not m : ,if not m : 
"if m is not False, None is considered False,",if m is not var0 var2 is considered var0 ,if not m : ,if not m : 
"if m is false and p is lesser than integer 0,","if m is false and p is lesser var0 integer 0,",if not m and p < 0 : ,if not m and p < 0 : 
"if match is true,","if match is true,",if not match : ,if not match : 
"if there is no match,","if there is no match,",if not match : ,if not match : 
check if matched_a_byte is equal to 0,check if var0 is equal to 0,if not matched_a_byte : ,if not var0 : 
"if matches is false,","if matches is false,",if not matches : ,if not matches : 
"if model._meta.proxy is false and return value of the function router.allow_migrate called with arguments using and model is true,","if var0 is false and return value of function router var2 called with arguments using and model is true,","if not model . _meta . proxy and router . allow_migrate ( using , model ) : ","if not var0 and router . var2 ( using , model ) : "
"if model_identifier is false,","if var0 is false,",if not model_identifier : ,if not var0 : 
"if name is false,","if name is false,",if not name : ,if not name : 
"if nesting is false,","if nesting is false,",if not nesting : ,if not nesting : 
"if new_method is false and old_method is true,","if var0 is false and var1 is true,",if not new_method and old_method : ,if not var0 and var1 : 
"if now is false,","if now is false,",if not now : ,if not now : 
"if old_method is false and new_method is true,","if var0 is false and var1 is true,",if not old_method and new_method : ,if not var0 and var1 : 
"if old_style_list is false,","if var0 is false,",if not old_style_list : ,if not var0 : 
"if only_initial is false,","if var0 is false,",if not only_initial : ,if not var0 : 
"get the value under the 'addrport' key of the options dictionary, if it is false,","get value under var0 key of options dict, if it is false,",if not options . get ( 'addrport' ) : ,if not options . get ( var0 ) : 
"get the value under the 'no_startup' key of the options dictionary, if it evaluates to false,","get value under var0 key of options dict, if it evaluates to false,",if not options [ 'no_startup' ] : ,if not options [ var0 ] : 
"if call to the method os.access with arguments: filename and os.W_OK, evaluates to false,","if call to method var0 with arguments: filename and os var2 evaluates to false,","if not os . access ( filename , os . W_OK ) : ","if not var0 ( filename , var1os . var1ar2 ) : "
"replace '%s' with self.file_path and err, respectively.   if self.file_path file is not writable,","replace var0 with self var3 and err, respectively var5 if self var3 file is not var6 ","if not os . access ( self . file_path , os . W_OK ) : ","if not os . access ( self . var3 , os . W_OK ) : "
"if call to the function os.path.exists with argument directory evaluates to boolean False,",if call to function os.path.exists with argument directory evaluates to boolean var0 ,if not os . path . exists ( directory ) : ,if not os . path . exists ( directory ) : 
"if filename path doesnt exists,","if filename path doesnt exists,",if not os . path . exists ( filename ) : ,if not os . path . exists ( filename ) : 
"if potfile file path doesnt exist,","if var0 file path doesnt exist,",if not os . path . exists ( potfile ) : ,if not os . path . exists ( var0 ) : 
"if self._dir path doesnt exists,","if var0 path doesnt exists,",if not os . path . exists ( self . _dir ) : ,if not os . path . exists ( var0 ) : 
"if self._dir file path does not exists,","if var0 file path does not exists,",if not os . path . exists ( self . _dir ) : ,if not os . path . exists ( var0 ) : 
"if self.default_locale_path directory doesnt exists,","if self var1 directory doesnt exists,",if not os . path . exists ( self . default_locale_path ) : ,if not os . path . exists ( self . var1 ) : 
"if file path top_dir doesnt exists,","if file path var0 doesnt exists,",if not os . path . exists ( top_dir ) : ,if not os . path . exists ( var0 ) : 
"substitute it for basedir.   if basedir is not a directory,","substitute it for var0 if var0 is not directory,",if not os . path . isdir ( basedir ) : ,if not os . path . isdir ( var0 ) : 
"if directory is not an directory,","if directory is not directory,",if not os . path . isdir ( directory ) : ,if not os . path . isdir ( directory ) : 
"if migrations_directory is not a directory,","if var0 is not directory,",if not os . path . isdir ( migrations_directory ) : ,if not os . path . isdir ( var0 ) : 
"if init_path is not a file,","if var0 is not file,",if not os . path . isfile ( init_path ) : ,if not os . path . isfile ( var0 ) : 
"if pythonrc is not a file,","if var0 is not file,",if not os . path . isfile ( pythonrc ) : ,if not os . path . isfile ( var0 ) : 
"if package is false,","if package is false,",if not package : ,if not package : 
"if parent is false,","if parent is false,",if not parent : ,if not parent : 
"if target_dir path doesnt exists,","if var0 path doesnt exists,",if not path . exists ( target_dir ) : ,if not path . exists ( var0 ) : 
"if path_info is empty,","if var0 is empty,",if not path_info : ,if not var0 : 
"if plan is not true,","if plan is not true,",if not plan : ,if not plan : 
"if prefix is false,","if prefix is false,",if not prefix : ,if not prefix : 
"if prefix doesnt end with character '/',","if prefix doesnt end with character var0,",if not prefix . endswith ( '/' ) : ,if not prefix . endswith ( var0 ) : 
"if prefix is false, and self doesnt have '_callback_str' attribute,","if prefix is false, and self doesnt have var0 attribute,","if not prefix or not hasattr ( self , '_callback_str' ) : ","if not prefix or not hasattr ( self , var0 ) : "
"if priority is false,","if priority is false,",if not priority : ,if not priority : 
"and string '~/.pythonrc.py' as tuples second element.   if pythonrc is true,","and string var0 as var1 second element var2 if rc is true,",if not pythonrc : ,if not pythonrc : 
"if qs.ordered is false,","if var0 is false,",if not qs . ordered : ,if not var0 : 
"call the method re.search with 2 arguments: raw string '^[_a-zA-Z]' and name, if it evaluates to false,","call method var0 with 2 arguments: raw string '^ [var2]' and name, if it evaluates to false,","if not re . search ( r'^[_a-zA-Z]' , name ) : ","if not var0 ( r'^[var2]' , name ) : "
"and app_or_project if app_or_project equals to string 'app', if not, it is replaced with 'a' and app_or_project.   call the method re.search with 2 arguments: raw string '^[_a-zA-Z]\w*$' and name, if it evaluates to false,","and app_or_project if app_or_project equals to string 'app', if not, it is replaced with 'a' and app_or_project.   call the method re.search with 2 arguments: raw string '^[_a-zA-Z]\w*$' and name, if it evaluates to false,","if not re . search ( r'^[_a-zA-Z]\w*$' , name ) : ","if not re . search ( r'^[_a-zA-Z]\w*$' , name ) : "
"if regex_match is false,","if var0 is false,",if not regex_match : ,if not var0 : 
"if renamed is boolean False,",if renamed is boolean var0 ,if not renamed : ,if not renamed : 
"if the result to the method call response.has_header, with string 'Cache-Control' as an argument is boolean False,",if result to method call response var1 with string var2 as argument is boolean var3 ,if not response . has_header ( 'Cache-Control' ) : ,if not response . var1 ( var2 ) : 
"for value of dictionary response under the key 'Last-Modified'.   if call to the function response.has_header with 'Expires' as argument returns boolean False,",for value of dict response under key var0 var1 if call to function response var3 with var4 as argument returns boolean var6 ,if not response . has_header ( 'Expires' ) : ,if not response . var3 ( var4 ) : 
"if call to the function response.has_header with string 'Last-Modified' as an argument returns boolean False,",if call to function response var1 with string var2 as argument returns boolean var3 ,if not response . has_header ( 'Last-Modified' ) : ,if not response . var1 ( var2 ) : 
"if return value of function response.has_header with string 'Vary' as argument is boolean False,",if return value of function response var1 with string var2 as argument is boolean var3 ,if not response . has_header ( 'Vary' ) : ,if not response . var1 ( var2 ) : 
"if response.streaming is boolean False,",if var0 is boolean var1 ,if not response . streaming : ,if not var0 : 
"if rest is not False, None is considered False,",if rest is not var0 var2 is considered var0 ,if not rest : ,if not rest : 
"if roots is false,","if roots is false,",if not roots : ,if not roots : 
"call the method router.allow_migrate with 2 arguments: database and cache.cache_model_class, if it evaluates to false,","call method router var1 with 2 arguments: database and cache var2 if it evaluates to false,","if not router . allow_migrate ( database , cache . cache_model_class ) : ","if not router . var1 ( database , cache . var2 ) : "
"if script_url is false,","if var0 is false,",if not script_url : ,if not var0 : 
"if self is false,","if self is false,",if not self : ,if not self : 
"if self._cached_loaders is false,","if var0 is false,",if not self . _cached_loaders : ,if not var0 : 
"if call to the method self._css.get with an argument medium evaluates to false,","if call to method var0 with argument medium evaluates to false,",if not self . _css . get ( medium ) or path not in self . _css [ medium ] : ,if not var0 ( medium ) or path not in self . _css [ medium ] : 
"evaluate the method self._has_expired with argument key, if it as False,","evaluate method var0 with argument key, if it as var1 ",if not self . _has_expired ( key ) : ,if not var0 ( key ) : 
"if call to the _has_expired method with argument key evaluates to boolean False,",if call to _has_expired method with argument key evaluates to boolean var0 ,if not self . _has_expired ( key ) : ,if not self . _has_expired ( key ) : 
"evaluate self._is_expired method with f as argument, if the result is false,","evaluate var0 method with f as argument, if result is false,",if not self . _is_expired ( f ) : ,if not var0 ( f ) : 
"if self._is_rendered is false,","if var0 is false,",if not self . _is_rendered : ,if not var0 : 
if self._is_rendered is false.,if var0 is false.,if not self . _is_rendered : ,if not var0 : 
"if not self._mutable,",if not var0 ,if not self . _mutable : ,if not var0 : 
"if self._populated is false,","if var0 is false,",if not self . _populated : ,if not var0 : 
"if self._upload_handlers is false,","if var0 is false,",if not self . _upload_handlers : ,if not var0 : 
"if self.activated is boolean False,",if var0 is boolean var1 ,if not self . activated : ,if not var0 : 
"if self.addr is false,","if var0 is false,",if not self . addr : ,if not var0 : 
"if self.allow_empty_file and file_size are both false,","if self var1 and var2 are both false,",if not self . allow_empty_file and not file_size : ,if not self . var1 and not var2 : 
"if self.allow_multiple_selected is false,","if self var1 is false,",if not self . allow_multiple_selected : ,if not self . var1 : 
"if self.can_import_settings is false,","if self var1 is false,",if not self . can_import_settings : ,if not self . var1 : 
"if self.close_called is False,",if self var1 is var2 ,if not self . close_called : ,if not self . var1 : 
"if file self is not closed,","if file self is not closed,",if not self . closed : ,if not self . closed : 
"call the method self.compile_filter_error with 2 arguments: token and e, if it evaluates to false,","call method self var1 with 2 arguments: token and e, if it evaluates to false,","if not self . compile_filter_error ( token , e ) : ","if not self . var1 ( token , e ) : "
"call the method self.compile_function_error with 2 arguments token and e, if it evaluates to false,","call method self var1 with 2 arguments token and e, if it evaluates to false,","if not self . compile_function_error ( token , e ) : ","if not self . var1 ( token , e ) : "
"if self.connection is false,","if var0 is false,",if not self . connection : ,if not var0 : 
"if self.data is false,","if var0 is false,",if not self . data : ,if not var0 : 
"match rest string with self.DIGIT_PATTERN regex, if it evaluates to false,","match rest string with self var0 var1 if it evaluates to false,",if not self . DIGIT_PATTERN . match ( idx ) : ,if not self . var0 . match ( idx ) : 
"if self.dry_run is false,","if self var1 is false,",if not self . dry_run : ,if not self . var1 : 
"if self.fail_silently is boolean False,",if self var1 is boolean var2 ,if not self . fail_silently : ,if not self . var1 : 
"if self.fail_silently is false,","if self var1 is false,",if not self . fail_silently : ,if not self . var1 : 
"if self.first is false,","if var0 is false,",if not self . first : ,if not var0 : 
"if self.form.is_bound is false,","if self.form var1 is false,",if not self . form . is_bound : ,if not self . form . var1 : 
"if self.initial_forms is false,","if self var1 is false,",if not self . initial_forms : ,if not self . var1 : 
"if self.invoked_for_django is false,","if self var1 is false,",if not self . invoked_for_django : ,if not self . var1 : 
"if self.is_bound is false,","if self var1 is false,",if not self . is_bound : ,if not self . var1 : 
"if self.is_required is false,","if self var1 is false,",if not self . is_required : ,if not self . var1 : 
"called with an argument value, substitute the result for value under the 'initial' key of the substitutions dictionary.   if self.is_required is false,","called with argument value, substitute result for value under var0 key of substitutions dict var1 if self var3 is false,",if not self . is_required : ,if not self . var3 : 
"called with 3 arguments: data, files and name, substitute the result for upload.   if self.is_required is boolean false and call to the method value_from_datadict from the instance of CheckboxInput class,","called with 3 arguments: data, files and name, substitute result for upload var0 if self var2 is boolean false and call to method var3 from instance of var5 class,","if not self . is_required and CheckboxInput ( ) . value_from_datadict ( data , files , self . clear_checkbox_name ( name ) ) : ","if not self . var2 and var5 ( ) . var3 ( data , files , self . clear_checkbox_name ( name ) ) : "
"call the method self.is_valid, if it evaluates to false,","call method self var1 if it evaluates to false,",if not self . is_valid ( ) : ,if not self . var1 ( ) : 
"if call to the method self.is_valid, evaluates to false or self.can_delete is boolean false,","if call to method self var1 evaluates to false or self var3 is boolean false,",if not self . is_valid ( ) or not self . can_delete : ,if not self . var1 ( ) or not self . var3 : 
"if call to the self.is_valid method evaluates to false or self.can_order is false,","if call to self var1 method evaluates to false or self var3 is false,",if not self . is_valid ( ) or not self . can_order : ,if not self . var1 ( ) or not self . var3 : 
"if self.keep_pot is false,","if self var1 is false,",if not self . keep_pot : ,if not self . var1 : 
"if self.leave_locale_alone is false,","if self var1 is false,",if not self . leave_locale_alone : ,if not self . var1 : 
"call the method self.port.isdigit, if it evaluates to false,","call method var0 if it evaluates to false,",if not self . port . isdigit ( ) : ,if not var0 ( ) : 
"call the method self.recipients, if it evaluates to false,","call method var0 if it evaluates to false,",if not self . recipients ( ) : ,if not var0 ( ) : 
"if self.render_value is false,","if self var1 is false,",if not self . render_value : ,if not self . var1 : 
"if self.required is false,","if var0 is false,",if not self . required : ,if not var0 : 
"if self.timezone is false,","if var0 is false,",if not self . timezone : ,if not var0 : 
"if self.timezone is true,","if self.timezone is true,",if not self . timezone : ,if not self . timezone : 
"if self.use_argparse is false,","if self var1 is false,",if not self . use_argparse : ,if not self . var1 : 
and self._current for 'fields'.   if self.use_natural_primary_keys is false or obj doesnt have a 'natural_key' attribute.,and var0 for var1 var2 if self var4 is false or var5 doesnt have var6 attribute.,"if not self . use_natural_primary_keys or not hasattr ( obj , 'natural_key' ) : ","if not self . var4 or not hasattr ( var5 , var6 ) : "
if self.use_natural_primary_keys is false and obj doesnt have 'natural_key' argument.,if self var1 is false and var2 doesnt have var3 argument.,"if not self . use_natural_primary_keys or not hasattr ( obj , 'natural_key' ) : ","if not self . var1 or not hasattr ( var2 , var3 ) : "
"and unpacked dictionary connection_params.   if self.use_ssl and self.use_tls are false,","and unpacked dict var0 if self var3 and self var5 are false,",if not self . use_ssl and self . use_tls : ,if not self . var3 and self . var5 : 
"call the self.user_regex.match method with an argument user_part, if it evaluates to false,","call self var1 match method with argument var2 if it evaluates to false,",if not self . user_regex . match ( user_part ) : ,if not self . var1 . match ( var2 ) : 
"call the method self.valid_value with an argument val, if it evaluates to false,","call method self var1 with argument val, if it evaluates to false,",if not self . valid_value ( val ) : ,if not self . var1 ( val ) : 
"if settings.ADMINS is false,","if settings var0 is false,",if not settings . ADMINS : ,if not settings . var0 : 
"if settings.configured is false,","if var0 is false,",if not settings . configured : ,if not var0 : 
"if not settings.DEBUG is true and settings.ALLOWED_HOSTS is false,","if not settings var0 is true and settings var1 is false,",if not settings . DEBUG and not settings . ALLOWED_HOSTS : ,if not settings . var0 and not settings . var1 : 
"call the function settings.is_overridden with argument string 'MIDDLEWARE_CLASSES', if the result is boolean False,","call function settings var1 with argument string var2, if result is boolean var3 ",if not settings . is_overridden ( 'MIDDLEWARE_CLASSES' ) : ,if not settings . var1 ( var2 ) : 
if call to the settings.is_overridden with string 'TEST_RUNNER' evaluates to boolean False.,if call to settings var1 with string var2 evaluates to boolean var3 ,if not settings . is_overridden ( 'TEST_RUNNER' ) : ,if not settings . var1 ( var2 ) : 
"if settings.MANAGERS does not exist,","if settings var0 does not exist,",if not settings . MANAGERS : ,if not settings . var0 : 
"if shown is an empty set,","if shown is empty set,",if not shown : ,if not shown : 
"if squash is false,","if squash is false,",if not squash : ,if not squash : 
"if strict is false,","if strict is false,",if not strict : ,if not strict : 
"if support_legacy is false,","if var0 is false,",if not support_legacy : ,if not var0 : 
"if supported_platform is False or is_a_tty is False,",if var0 is var2 or var4 is var2 ,if not supported_platform or not is_a_tty : ,if not var0 or not var4 : 
"call the function supports_color, if evaluates to False,",call function var0 if evaluates to var2 ,if not supports_color ( ) : ,if not var0 ( ) : 
"if sys.warnoptions is false,","if var0 is false,",if not sys . warnoptions : ,if not var0 : 
"call the function table_name_filter with an argument table_name, if it evaluates to true,","call function var0 with argument var1 if it evaluates to true,",if not table_name_filter ( table_name ) : ,if not var0 ( var1 ) : 
"substitute the result for tag.   if tag is false or current_len is greater or equal to truncate_len,",substitute result for tag var0 if tag is false or var1 is greater or equal to var2 ,if not tag or current_len >= truncate_len : ,if not tag or var1 >= var2 : 
"if template_dirs is false,","if var0 is false,",if not template_dirs : ,if not var0 : 
"if template_name_list is false,","if var0 is false,",if not template_name_list : ,if not var0 : 
"if templatetags_modules is false,","if var0 is false,",if not templatetags_modules : ,if not var0 : 
"if token.contents is false,","if var0 is false,",if not token . contents : ,if not var0 : 
"call the method unicodedata.combining with an argument char, if it evaluates to false,","call method var0 with argument char, if it evaluates to false,",if not unicodedata . combining ( char ) : ,if not var0 ( char ) : 
"if unused_char is false,","if var0 is false,",if not unused_char : ,if not var0 : 
"if url is false,","if url is false,",if not url : ,if not url : 
"if first element of the url_fields is false,","if first element of var0 is false,",if not url_fields [ 0 ] : ,if not var0 [ 0 ] : 
"if second element of url_fields is false,","if second element of var0 is false,",if not url_fields [ 1 ] : ,if not var0 [ 1 ] : 
"if url_info.netloc is false and url_info.scheme is true,","if var0 netloc is false and var0 scheme is true,",if not url_info . netloc and url_info . scheme : ,if not var0 . netloc and var0 . scheme : 
"if use_workaround is boolean False,",if var0 is boolean var2 ,if not use_workaround : ,if not var0 : 
"if return value of the method UserModel._default_manager.exists is false and value under the 'interactive' key of the options dictionary is true,","if return value of method var0 _default_manager.exists is false and value under var2 key of options dict is true,",if not UserModel . _default_manager . exists ( ) and options . get ( 'interactive' ) : ,if not var0 . _default_manager . exists ( ) and options . get ( var2 ) : 
"if using_sysrandom is false,","if var0 is false,",if not using_sysrandom : ,if not var0 : 
"if value is false,","if value is false,",if not value : ,if not value : 
"if value is true,","if value is true,",if not value : ,if not value : 
"if value is false and self.required is true,","if value is false and var0 is true,",if not value and self . required : ,if not value and var0 : 
"if value is false or character '@' is not contained in value,","if value is false or character var0 is not contained in value,",if not value or '@' not in value : ,if not value or var0 not in value : 
"if value is false or value is not an instance of list or tuple types,","if value is false or value is not instance of list or tuple types,","if not value or isinstance ( value , ( list , tuple ) ) : ","if not value or isinstance ( value , ( list , tuple ) ) : "
"if value is false or for every v in value every v is contained in self.empty_values,",if value is false or for every v in value every v is contained in self var1 ,if not value or not [ v for v in value if v not in self . empty_values ] : ,if not value or not [ v for v in value if v not in self . var1 ] : 
"if var is false or whitespaces are contained in var,","if var is false or var0 are contained in var,",if not var or ' ' in var : ,if not var or ' ' in var : 
"if want_unicode is false,","if var0 is false,",if not want_unicode : ,if not var0 : 
"if widget is false,","if widget is false,",if not widget : ,if not widget : 
"if not_installed_models is true,","if var0 is true,",if not_installed_models : ,if var0 : 
"if now equals to boolean True and now is not an instance of datetime.datetime,",if now equals to boolean var0 and now is not instance of var1 ,"if now and not isinstance ( now , datetime . datetime ) : ","if now and not isinstance ( now , var1 ) : "
"if ns_pattern is true,","if var0 is true,",if ns_pattern : ,if var0 : 
"if num is greater than self._max_entries,",if var0 is greater var1 var2 ,if num > self . _max_entries : ,if var0 > var2 : 
"if num_entries is lesser than self._max_entries,",if var0 is lesser var1 var2 ,if num_entries < self . _max_entries : ,if var0 < var2 : 
"if num_loopvars is not equal to len_item,",if var0 is not equal to var1 ,if num_loopvars != len_item : ,if var0 != var1 : 
"if num_repl is greater than integer 0,","if var0 is greater var1 integer 0,",if num_repl > 0 : ,if var0 > 0 : 
"if number is lesser than integer 1,","if number is lesser var0 integer 1,",if number < 1 : ,if number < 1 : 
"if number equals integer 1,","if number equals integer 1,",if number == 1 : ,if number == 1 : 
"if number equals a integer 1 and self.allow_empty_first_page is true,","if number equals integer 1 and self var1 is true,",if number == 1 and self . allow_empty_first_page : ,if number == 1 and self . var1 : 
"if number is greater than self.num_pages,",if number is greater var0 self var2 ,if number > self . num_pages : ,if number > self . var2 : 
"substitute the length of the resulting list for number_equal.   if number_equal is greater than integer 40,","substitute length of resulting list for var0 if var0 is greater var3 integer 40,",if number_equal > 40 : ,if var0 > 40 : 
"if o.microsecond is true,","if var0 is true,",if o . microsecond : ,if var0 : 
"if o is contained in opt_dict,",if o is contained in var0 ,if o in opt_dict : ,if o in var0 : 
"if obj.pk is None,",if var0 is var1 ,if obj . pk is None : ,if var0 is var1 : 
"if obj_list is None,",if var0 is var2 ,if obj_list is None : ,if var0 is var2 : 
"if obj_pk is not None,",if var0 is not var2 ,if obj_pk is not None : ,if var0 is not var2 : 
"if objects_in_fixture equals integer 0,","if var0 equals integer 0,",if objects_in_fixture == 0 : ,if var0 == 0 : 
"if offset is not None,",if offset is not var0 ,if offset is not None : ,if offset is not var0 : 
"if old_attr is None,",if var0 is var2 ,if old_attr is None : ,if var0 is var2 : 
"if old_field_name is true,","if var0 is true,",if old_field_name : ,if var0 : 
"if old_handler is not None,",if var0 is not var2 ,if old_handler is not None : ,if var0 is not var2 : 
"if old_style_list is true,","if var0 is true,",if old_style_list : ,if var0 : 
"if only_django,",if var0 ,if only_django : ,if var0 : 
"if only_new is true,","if var0 is true,",if only_new : ,if var0 : 
"if opname is not contained in roots,","if var0 is not contained in roots,",if opname not in roots : ,if var0 not in roots : 
"if second element of options is true,","if second element of options is true,",if option [ 1 ] : ,if option [ 1 ] : 
"where '%r' is replaced with options.   if option equals a string 'with',","var0 var1 is replaced with options var2 if option equals string var3,",if option == 'with' : ,if option == var3 : 
"if option is contained in options,","if option is contained in options,",if option in options : ,if option in options : 
"if option_value is contained in selected_choices,",if var0 is contained in var1 ,if option_value in selected_choices : ,if var0 in var1 : 
"if option_value is None,",if var0 is var2 ,if option_value is None : ,if var0 is var2 : 
"if options is true,","if options is true,",if options : ,if options : 
"if value under the 'list_tags' key of options dictionay is true,","if value under var0 key of options var1 is true,",if options . get ( 'list_tags' ) : ,if options . get ( var0 ) : 
"if value under the 'liveserver' key of the options dictionary is not None,",if value under var0 key of options dict is not var1 ,if options . get ( 'liveserver' ) is not None : ,if options . get ( var0 ) is not var1 : 
"if value under the 'load_initial_data' key of the options dictionary is true,","if value under var0 key of options dict is true,",if options . get ( 'load_initial_data' ) : ,if options . get ( var0 ) : 
if the key doesnt exists use sys.stdout as an argument.   if value under the 'no_color' key of the options dictionary.,if key doesnt exists use var0 as argument var1 if value under var2 key of options dict.,if options . get ( 'no_color' ) : ,if options . get ( var2 ) : 
"get the value under the 'no_location' key of the options dictionary, if it is true,","get value under var0 key of options dict, if it is true,",if options . get ( 'no_location' ) : ,if options . get ( var0 ) : 
"get the value under the 'no_wrap' key of the options dictionary, if it is true,","get value under var0 key of options dict, if it is true,",if options . get ( 'no_wrap' ) : ,if options . get ( var0 ) : 
"get the value under the 'use_default_ignore_patterns' key of the options dictionary, if it is true,","get value under var0 key of options dict, if it is true,",if options . get ( 'use_default_ignore_patterns' ) : ,if options . get ( var0 ) : 
"get the value under the 'list' key of options dictionary, if key doesnt exist return False, if the return value is True,","get value under var0 key of options dict, if key doesnt exist return var1 if return value is var2 ","if options . get ( 'list' , False ) : ","if options . get ( var0 , var1 ) : "
"if the value under the 'test_flush' key of the options dictionary exists,","if value under var0 key of options dict exists,","if options . get ( 'test_flush' , False ) : ","if options . get ( var0 , False ) : "
"if options.pythonpath is true,","if var0 is true,",if options . pythonpath : ,if var0 : 
"if options.settings is true,","if var0 is true,",if options . settings : ,if var0 : 
"if options.traceback is true or e is not CommandError instance,","if var0 is true or e is not var1 instance,","if options . traceback or not isinstance ( e , CommandError ) : ","if var0 or not isinstance ( e , var1 ) : "
"if values under the 'app_label' and 'migration_name' keys of the options dictionary are True,",if values under var0 and var1 keys of options dict are var4 ,if options [ 'app_label' ] and options [ 'migration_name' ] : ,if options [ var0 ] and options [ 'migration_name' ] : 
"if value under the 'errlog' key of options dictionary is true,","if value under var0 key of options dict is true,",if options [ 'errlog' ] : ,if options [ var0 ] : 
"if value under the 'method' key of the options dictionary equals to string 'perfork' or 'fork',","if value under var0 key of options dict equals to string var1 or var3,","if options [ 'method' ] in ( 'prefork' , 'fork' ) : ","if options [ var0 ] in ( 'prefork' , 'fork' ) : "
"if value under the 'outlog' key of options dictionary is true,","if value under var0 key of options dict is true,",if options [ 'outlog' ] : ,if options [ var0 ] : 
"if value under 'plain' key of the options dictionary is true,","if value under var0 key of options dict is true,",if options [ 'plain' ] : ,if options [ var0 ] : 
"if value under the 'umask' key of options dictionary is true,","if value under var0 key of options dict is true,",if options [ 'umask' ] : ,if options [ var0 ] : 
"if value under the 'verbosity' key of the options dictionary is greater than zero,","if value under var0 key of options dict is greater var1 zero,",if options [ 'verbosity' ] > 0 : ,if options [ var0 ] > 0 : 
"convert the value under the 'daemonize' key of options dictionary to lowercase, if it equals to string 'true', 'yes' or 't',","convert value under var0 key of options dict to lowercase, if it equals to string var1, var2 or var3,","if options [ 'daemonize' ] . lower ( ) in ( 'true' , 'yes' , 't' ) : ","if options [ var0 ] . lower ( ) in ( 'true' , 'yes' , 't' ) : "
"if value under the 'daemonize' of options dictionary is None,",if value under var0 of options dict is var1 ,if options [ 'daemonize' ] is None : ,if options [ var0 ] is var1 : 
"if value under the 'socket' key of the options dictionary is false and values under the 'host' and 'port' keys of the options dictionary are true,","if value under var0 key of options dict is false and values under var1 and var2 keys of options dict are true,",if options [ 'host' ] and options [ 'port' ] and not options [ 'socket' ] : ,if options [ 'host' ] and options [ 'port' ] and not options [ var0 ] : 
"unpacked dictionary daemon_kwargs.   if value under the 'pidfile' of options dictionary exists,","unpacked dict var0 if value under var3 of options dict exists,",if options [ 'pidfile' ] : ,if options [ var3 ] : 
"if opts is true,","if opts is true,",if opts : ,if opts : 
"or the 'exclude' attribute is prohibited; form %s needs updating., where '%s' is replaced with name.   if opts.fields equals ALL_FIELDS,",or var0 attribute is prohibited; form %s needs updating var3 var4 is replaced with name var5 if var6 equals var7 ,if opts . fields == ALL_FIELDS : ,if var6 == var7 : 
"if opts.fields is None and opts.exclude is None,",if var0 is var1 and var3 is var1 ,if opts . fields is None and opts . exclude is None : ,if var0 is var1 and var3 is var1 : 
"if opts.managed is true,","if var0 is true,",if opts . managed : ,if var0 : 
"if opts.model is true,","if var0 is true,",if opts . model : ,if var0 : 
if opts.model is None.,if var0 is var1 ,if opts . model is None : ,if var0 is var1 : 
"if ascii value of char is smaller than integer 33 or is equal to integer 127,","if ascii value of char is smaller var0 integer 33 or is equal to integer 127,",if ord ( char ) < 33 or ord ( char ) == 127 : ,if ord ( char ) < 33 or ord ( char ) == 127 : 
"if origin is true,","if origin is true,",if origin : ,if origin : 
if value under the 'DJANGO_SETTINGS_MODULE' key of os.environ dictionary exists.,if value under var0 key of var1 dict exists.,if os . environ . get ( 'DJANGO_SETTINGS_MODULE' ) : ,if var1 . get ( var0 ) : 
"if value under the ""RUN_MAIN"" key of the os.environ dictionary equals to string ""true"",","if value under var0 key of var1 dict equals to string var2,",if os . environ . get ( 'RUN_MAIN' ) == 'true' : ,if var1 . get ( 'RUN_MAIN' ) == 'true' : 
"fork a child process, if the result equals integer 0,","fork child process, if result equals integer 0,",if os . fork ( ) > 0 : ,if os . fork ( ) > 0 : 
"if os.name equals to 'nt',","if var0 equals to var1,",if os . name == 'nt' : ,if var0 == var1 : 
"if module os field name equals to string 'nt',","if module os field name equals to string var0,",if os . name == 'nt' : ,if os . name == var0 : 
"if os.name equals string 'nt',","if var0 equals string var1,",if os . name == 'nt' : ,if var0 == var1 : 
"if os.name equals string 'posix',","if var0 equals string var1,",if os . name == 'posix' : ,if var0 == var1 : 
"call the function os.path.abspath with an argument dirpath, if it starts with return value of the method os.path.dirname,",call function os.path.abspath with argument var0 if it starts with return value of method var1 ,if os . path . abspath ( dirpath ) . startswith ( os . path . dirname ( path ) ) : ,if os . path . abspath ( var0 ) . startswith ( os . path . dirname ( path ) ) : 
"use it as an argument for the call to the glob.iglob, for every candidate in result,   call the method os.path.basename with an argument candidate, is result is contained in targets,","use it as argument for call to var0 for every didate in result var1 call method var2 with argument didate, is result is contained in targets,",if os . path . basename ( candidate ) in targets : ,if var2 ( candidate ) in targets : 
"if django_po file path exists,","if var0 file path exists,",if os . path . exists ( django_po ) : ,if os . path . exists ( var0 ) : 
"if file filename exists,","if file filename exists,",if os . path . exists ( filename ) : ,if os . path . exists ( filename ) : 
"if fname file path exists,","if var0 file path exists,",if os . path . exists ( fname ) : ,if os . path . exists ( var0 ) : 
"if os.path.exists function with argument name, evaluates to boolean True,","if var0 function with argument name, evaluates to boolean var1 ",if os . path . exists ( name ) : ,if var0 ( name ) : 
"append the result to old_app_dirs.   if file path old_app_dir exists,","append result to var0 if file path var1 exists,",if os . path . exists ( old_app_dir ) : ,if os . path . exists ( var1 ) : 
"if pofile path exists,","if var0 path exists,",if os . path . exists ( pofile ) : ,if os . path . exists ( var0 ) : 
"if pot_path file path exists,","if var0 file path exists,",if os . path . exists ( pot_path ) : ,if os . path . exists ( var0 ) : 
"if potfile fie exists,","if var0 var1 exists,",if os . path . exists ( potfile ) : ,if os . path . exists ( var0 ) : 
"if self.file_path file path exists and it is not a directory,","if self var1 file path exists and it is not directory,",if os . path . exists ( self . file_path ) and not os . path . isdir ( self . file_path ) : ,if os . path . exists ( self . var1 ) and not os . path . isdir ( self . var1 ) : 
"if file path sql_file exists,","if file path var0 exists,",if os . path . exists ( sql_file ) : ,if os . path . exists ( var0 ) : 
"if fixture_name is an absolute file path,","if var0 is absolute file path,",if os . path . isabs ( fixture_name ) : ,if os . path . isabs ( var0 ) : 
"if 'locale' is a directory,","if var0 is directory,",if os . path . isdir ( 'locale' ) : ,if os . path . isdir ( var0 ) : 
"if app_dir is a directory,","if var0 is directory,",if os . path . isdir ( app_dir ) : ,if os . path . isdir ( var0 ) : 
"if entry is a directory,","if entry is directory,",if os . path . isdir ( entry ) : ,if os . path . isdir ( entry ) : 
"join 'conf' and 'locale' into a file path, if it is a directory,","join var0 and var1 into file path, if it is directory,","if os . path . isdir ( os . path . join ( 'conf' , 'locale' ) ) : ","if os . path . isdir ( os . path . join ( var0 , 'locale' ) ) : "
"join path and entry into a file path, if it exists,","join path and entry into file path, if it exists,","if os . path . isdir ( os . path . join ( path , entry ) ) : ","if os . path . isdir ( os . path . join ( path , entry ) ) : "
"if template_dir is directory,","if var0 is directory,",if os . path . isdir ( template_dir ) : ,if os . path . isdir ( var0 ) : 
"if f is a file,","if f is file,",if os . path . isfile ( f ) : ,if os . path . isfile ( f ) : 
"if fext is a file,","if var0 is file,",if os . path . isfile ( fext ) : ,if os . path . isfile ( var0 ) : 
"if os.path.sep is contained in fixture_name,",if var0 is contained in var1 ,if os . path . sep in fixture_name : ,if var0 in var1 : 
"if out_log is true,","if var0 is true,",if out_log : ,if var0 : 
"if output is true,","if output is true,",if output : ,if output : 
"if over_bytes is true,","if var0 is true,",if over_bytes : ,if var0 : 
"find index of the occurrence of string ':_(' in p, if its greater or equal to integer 0,","find index of the occurrence of string ':_(' in p, if its greater or equal to integer 0,",if p . find ( ':_(' ) >= 0 : ,if p . find ( ':_(' ) >= 0 : 
"if p.image is not empty,","if var0 is not empty,",if p . image : ,if var0 : 
"use the result as an argument for the call to the function mark_safe, return the result.   if p equals integer 0,","use result as argument for call to function var0 return result var1 if p equals integer 0,",if p == 0 : ,if p == 0 : 
"if p is greater or equal to integer 0,","if p is greater or equal to integer 0,",if p >= 0 : ,if p >= 0 : 
if padding does not equal 0,if padding does not equal 0,if padding : ,if padding : 
if padding is equal to True,if padding is equal to var0,if padding : ,if padding : 
check if padding is equal to True,check if padding is equal to var0,if padding : ,if padding : 
if padding is True,if padding is var0,if padding : ,if padding : 
"if palette equals value under the NOCOLOR_PALETTE key of the PALETTES dictionary,","if palette equals value under var0 key of var1 dict,",if palette == PALETTES [ NOCOLOR_PALETTE ] : ,if palette == var1 [ var0 ] : 
"if param is true,","if var0 is true,",if param : ,if var0 : 
"if param is contained in unhandled_params,",if param is contained in var0 ,if param in unhandled_params : ,if param in var0 : 
"substitute first element of the result for param and value.   if param is not in params and varkw is None,",substitute first element of result for var0 and value var2 if var0 is not in var3 and var4 is var5 ,if param not in params and varkw is None : ,if var0 not in var0s and var4 is var5 : 
"get the value under the 'filename' key of the params dictionary, if it is true,","get value under var0 key of var1 dict, if it is true,",if params . get ( 'filename' ) : ,if var1 . get ( var0 ) : 
"if first element of params equals a string 'context',","if first element of var0 equals string var1,",if params [ 0 ] == 'context' : ,if var0 [ 0 ] == var1 : 
"if parse_until is true,","if var0 is true,",if parse_until : ,if var0 : 
"if parse_until is None,",if var0 is var2 ,if parse_until is None : ,if var0 is var2 : 
"substitute the result for parsed.   if parsed.scheme is true and parsed.scheme is not contained in self.allowed_schemes,",substitute result for parsed var0 if var1 is true and var1 is not contained in self var4 ,if parsed . scheme and parsed . scheme not in self . allowed_schemes : ,if var1 and var1 not in self . var4 : 
"if part is contained in PALETTES,",if part is contained in var0 ,if part in PALETTES : ,if part in var0 : 
"if last element of parts is contained in self.serialization_formats,",if last element of parts is contained in self var1 ,if parts [ - 1 ] in self . serialization_formats : ,if parts [ - 1 ] in self . var1 : 
"if file path absolute_path exists,","if file path var0 exists,",if path . exists ( absolute_path ) : ,if path . exists ( var0 ) : 
"into a file path, substitute it for new_path.   if new_path file path exists,","into file path, substitute it for var0 if var0 file path exists,",if path . exists ( new_path ) : ,if path . exists ( var0 ) : 
"if expanded_template is a directory,","if var0 is directory,",if path . isdir ( expanded_template ) : ,if path . isdir ( var0 ) : 
"if path_to_remove is file,","if var0 is file,",if path . isfile ( path_to_remove ) : ,if path . isfile ( var0 ) : 
"if path starts with string 'http://' or string 'https://' or with string '/',","if path starts with string var0 or string var1 or with string var3,","if path . startswith ( ( 'http://' , 'https://' , '/' ) ) : ","if path . startswith ( ( var0 , 'https://' , '/' ) ) : "
"if path is None,",if path is var0 ,if path is None : ,if path is var0 : 
"if path is not initialized,","if path is not initialized,",if path is None : ,if path is None : 
"sum of the result of the function time.time and max_age, substitute it for 'expires' key of the previously returned dictionary.   if path is not None,",sum of result of function var0 and var1 substitute it for var3 key of previously returned dict var4 if path is not var5 ,if path is not None : ,if path is not var5 : 
"if path is not contained in self._js,",if path is not contained in var0 ,if path not in self . _js : ,if path not in var0 : 
"if pathext is None,",if var0 is var1 ,if pathext is None : ,if var0 is var1 : 
"if pattern.app_name is true,","if pattern var1 is true,",if pattern . app_name : ,if pattern . var1 : 
"and pattern.default_args.   if pattern.name is not None,",and pattern var1 if var3 is not var4 ,if pattern . name is not None : ,if var3 is not var4 : 
"if pattern.namespace is true,","if var0 is true,",if pattern . namespace : ,if var0 : 
if pickled is not None.,if pickled is not var0 ,if pickled is not None : ,if pickled is not var0 : 
"if last element of pieces is true,","if last element of pieces is true,",if pieces [ - 1 ] : ,if pieces [ - 1 ] : 
"and pk.rel.parent_link is true and function pk_is_not_editable called with an argument pk.rel.to._meta.pk evaluates to true,   if function pk_is_not_editable called with an argument pk evaluates to true, or pk.name is not contained in form.fields,","and var1 rel var2 is true and function var3 called with argument var7 evaluates to true var8 if function var3 called with argument var1 evaluates to true, or var1 name is not contained in var10 ",if pk_is_not_editable ( pk ) or pk . name not in form . fields : ,if var3 ( var1 ) or var1 . name not in var10 : 
"if pks is true,","if var0 is true,",if pks : ,if var0 : 
"if plan is true,","if plan is true,",if plan : ,if plan : 
"if plan_node is contained in loader.applied_migrations,",if var0 is contained in loader var2 ,if plan_node in loader . applied_migrations : ,if var0 in loader . var2 : 
"if plan_node is not contained in shown and first element of plan_node equals to app_name,",if var0 is not contained in shown and first element of var0 equals to var2 ,if plan_node not in shown and plan_node [ 0 ] == app_name : ,if var0 not in shown and var0 [ 0 ] == var2 : 
"if plen is lesser than difference of alen and dlen, or if plen is greater than alen,",if var0 is lesser var2 difference of var4 and var6 or if var0 is greater var2 var4 ,if plen < ( alen - dlen ) or plen > alen : ,if var0 < ( var4 - var6 ) or var0 > var4 : 
"if pop_context is true,","if var0 is true,",if pop_context : ,if var0 : 
"if pos is greater than or equal to last,","if pos is greater var0 or equal to last,",if pos >= last : ,if pos >= last : 
"if prefix is None,",if prefix is var0 ,if prefix is None : ,if prefix is var0 : 
"if primary_keys is true,","if var0 is true,",if primary_keys : ,if var0 : 
"substitute the result for queryset.   if primary_keys is true,","substitute result for var0 if var2 is true,",if primary_keys : ,if var2 : 
"if print_ is None,",if var0 is var1 ,if print_ is None : ,if var0 is var1 : 
"if priority is true,","if priority is true,",if priority : ,if priority : 
"if process_all is true,","if var0 is true,",if process_all : ,if var0 : 
"if processors is None,",if processors is var0 ,if processors is None : ,if processors is var0 : 
"if propagate is not None,",if propagate is not var0 ,if propagate is not None : ,if propagate is not var0 : 
"if props is true,","if props is true,",if props : ,if props : 
"if proto is greater than or equal to integer 2,","if proto is greater var0 or equal to integer 2,",if proto >= 2 : ,if proto >= 2 : 
"if protocol is not equal to string 'both' and unpack_ipv4 is true,","if protocol is not equal to string var0 and var1 is true,",if protocol != 'both' and unpack_ipv4 : ,if protocol != var0 and var1 : 
"if push is not None,",if push is not var0 ,if push is not None : ,if push is not var0 : 
"if PY3 is true,","if var0 is true,",if PY3 : ,if var0 : 
"return it.   if PY3 is true,","return it var0 if var1 is true,",if PY3 : ,if var1 : 
"if qs._result_cache is not None,",if var0 is not var1 ,if qs . _result_cache is not None : ,if var0 is not var1 : 
"if queryset is None,",if var0 is var1 ,if queryset is None : ,if var0 is var1 : 
"call the method questioner.ask_merge with an argument app_label, if it evaluates to true,","call method questioner var1 with argument var2 if it evaluates to true,",if questioner . ask_merge ( app_label ) : ,if questioner . var1 ( var2 ) : 
"if quote_double_quotes is true,","if var0 is true,",if quote_double_quotes : ,if var0 : 
"if r ends with string '+00:00',","if r ends with string var0,",if r . endswith ( '+00:00' ) : ,if r . endswith ( var0 ) : 
"call the function re.search with 3 arguments: string '^%s%s', with '%s' replaced for prefix_norm and pattern, respectively,","call function re.search with 3 arguments: string '^%s%s', with var1 replaced for var2 and pattern, respectively,","if re . search ( '^%s%s' % ( prefix_norm , pattern ) , candidate_pat % candidate_subs , re . UNICODE ) : ","if re . search ( var0 % ( var2 , pattern ) , candidate_pat % candidate_subs , re . UNICODE ) : "
"if reason is not None,",if reason is not var0 ,if reason is not None : ,if reason is not var0 : 
"if record.exc_info is true,","if record var0 is true,",if record . exc_info : ,if record . var0 : 
"if recursive is true,","if recursive is true,",if recursive : ,if recursive : 
"apply operator.eq function to elements of level iterable, until level is reduced to a single value, if the result is true,","apply operator.eq function to elements of level var0 var1 level is reduced to single value, if result is true,","if reduce ( operator . eq , level ) : ","if reduce ( operator . eq , level ) : "
"if refto is contained in known_models,",if var0 is contained in var1 ,if refto in known_models : ,if var0 in var1 : 
"if refto is contained in seen_models,",if var0 is contained in var1 ,if refto in seen_models : ,if var0 in var1 : 
"inverse_match set to None and flags set to None.   if regex is not None,",var0 set to var1 and flags set to var1 if var5 is not var1 ,if regex is not None : ,if var5 is not var1 : 
"if register_to is true,","if var0 is true,",if register_to : ,if var0 : 
"otherwise call the method table2model with second element of the i-th row of relations and substitute it for rel_to.   if rel_to is contained in known_models,",otherwise call method var0 with second element of i-th row of relations and substitute it for var1 if var1 is contained in var4 ,if rel_to in known_models : ,if var1 in var4 : 
"if related is true,","if related is true,",if related : ,if related : 
"if related_att is not None,",if var0 is not var2 ,if related_att is not None : ,if var0 is not var2 : 
"if relative_dir is true,","if var0 is true,",if relative_dir : ,if var0 : 
"if remaining is None,",if remaining is var0 ,if remaining is None : ,if remaining is var0 : 
"where '%r' is replaced with first element of bits.   if remaining_bits is true,","var0 var1 is replaced with first element of bits var2 if var3 is true,",if remaining_bits : ,if var3 : 
"if renderer is true,","if var0 is true,",if renderer : ,if var0 : 
"if representative is None,",if representative is var0 ,if representative is None : ,if representative is var0 : 
"if request._post_parse_error is true,","if var0 is true,",if request . _post_parse_error : ,if var0 : 
"if request.method equals to string 'HEAD',","if var0 equals to string var1,",if request . method == 'HEAD' : ,if var0 == var1 : 
"required set to boolean True, widget set to None, label set to None, initial set to None, help_text set to an empty string,   to_field_name set to None, limit_choices_to set to None, unpacked list args and unpacked dictionary kwargs.   if required is true and initial is not None,",required set to boolean var0 widget set to var1 label set to var1 initial set to var1 var7 set to empty string var11 set to var1 var13 set to var1 unpacked list var15 and unpacked dict var16 var9 if required is true and initial is not var1 ,if required and ( initial is not None ) : ,if required and ( initial is not var1 ) : 
"if resolved_path is true,","if var0 is true,",if resolved_path : ,if var0 : 
if resolver.urlconf_module is None:,if resolver var1 is None:,if resolver . urlconf_module is None : ,if resolver . var1 is var2 : 
"if resource_string is not None,",if var0 is not var2 ,if resource_string is not None : ,if var0 is not var2 : 
"if response is True,",if response is var0 ,if response : ,if response : 
"if call to the method response.has_header with string 'Cache-Control' as an argument returns boolean True,",if call to method response var1 with string var2 as argument returns boolean var3 ,if response . has_header ( 'Cache-Control' ) : ,if response . var1 ( var2 ) : 
"if call to the function response.has_header with argument 'Vary' returns boolean True,",if call to function response var1 with argument var2 returns boolean var3 ,if response . has_header ( 'Vary' ) : ,if response . var1 ( var2 ) : 
"if call to the function response.has_header with string 'Vary' as an argument returns True,",if call to function response var1 with string var2 as argument returns var3 ,if response . has_header ( 'Vary' ) : ,if response . var1 ( var2 ) : 
"if response.streaming is True,",if var0 is var1 ,if response . streaming : ,if var0 : 
"if response is None,",if response is var0 ,if response is None : ,if response is var0 : 
"if result is true,","if result is true,",if result : ,if result : 
"if mode equals to string 'add' and current_expires is lesser than now, or mode equals to string 'set', and result is true,","if mode equals to string var0 and var1 is lesser var3 now, or mode equals to string var4, and result is true,",if result and ( mode == 'set' or ( mode == 'add' and current_expires < now ) ) : ,if result and ( mode == 'set' or ( mode == var0 and var1 < now ) ) : 
"and encoding, substitute the result for result.   if result is not None,","and encoding, substitute result for result var0 if result is not var1 ",if result is not None : ,if result is not var1 : 
"if result is not None,",if result is not var0 ,if result is not None : ,if result is not var0 : 
"if result is not root,","if result is not root,",if result is not root : ,if result is not root : 
if ret is true.,if ret is true.,if ret : ,if ret : 
"if retval is true,","if var0 is true,",if retval : ,if var0 : 
"iter_format_modules called with 2 arguments: lang and settings.FORMAT_MODULE_PATH, substitute the result for modules.   if reverse is true,","var0 called with 2 arguments: var1 and settings var2 substitute result for modules var3 if reverse is true,",if reverse : ,if reverse : 
check if rot is less than the value of 1,check if rot is less var0 value of 1,if rot < 1 : ,if rot < 1 : 
"if seventh element of row is true,","if seventh element of row is true,",if row [ 6 ] : ,if row [ 6 ] : 
"if row is None,",if row is var0 ,if row is None : ,if row is var0 : 
"returns the result of the call the method d._get_pk_val, if not return d, put all the generator items into a tuple row_data.   if row_data is true and None is not contained in row_data,","returns result of call method var0 if not return d, put all generator items into tuple var1 if var1 is true and var8 is not contained in var1 ",if row_data and None not in row_data : ,if var1 and var8 not in var1 : 
"if row_data is contained in seen_data,",if var0 is contained in var1 ,if row_data in seen_data : ,if var0 in var1 : 
"use the result as an argument for the call to the self.stdout.write method.   if run_syncdb and executor.loader.unmigrated_apps exist,","use result as argument for call to var0 method var1 if var2 and executor.loader var4 exist,",if run_syncdb and executor . loader . unmigrated_apps : ,if var2 and executor . loader . var4 : 
"append it to the string ""  Target specific migration: "", use it as the argument for the call to the self.style.MIGRATE_LABEL method,   call the self.stdout.write method with previous return value as an argument.   if run_syncdb and executor.loader.unmigrated_apps is true,","append it to string var0, use it as argument for call to var1 var2 method, call var3 method with previous return value as argument. if var4 and executor.loader var7 is true,",if run_syncdb and executor . loader . unmigrated_apps : ,if var4 and executor . loader . var7 : 
"if first element of s is not contained in ""\""'"" or last element of s is not equal to first element of s,","if first element of s is not contained in var0'"" or last element of s is not equal to first element of s,",if s [ 0 ] not in '\''' or s [ - 1 ] != s [ 0 ] :,if s [0] not in '\''' or s [- 1]!= s [0]:
"if s equals a string '""',","if s equals string var0,",if s == ''' : ,if s == ''' : 
"if s_len is greater than length,","if var0 is greater var1 length,",if s_len > length : ,if var0 > length : 
"if safe is true,","if safe is true,",if safe : ,if safe : 
"if safe is true and arg is not equal to string ';',","if safe is true and var0 is not equal to string var1,",if safe and arg != ';' : ,if safe and var0 != var1 : 
and unpacked dictionary kwargs.   if safe is true and data is not an instance of dict type.,and unpacked dict var1 if safe is true and data is not instance of var0 type.,"if safe and not isinstance ( data , dict ) : ","if safe and not isinstance ( data , var0 ) : "
"if safe is not None,",if safe is not var0 ,if safe is not None : ,if safe is not var0 : 
"if safe_input is true,","if var0 is true,",if safe_input : ,if var0 : 
"if saved_locale is not None,",if var0 is not var2 ,if saved_locale is not None : ,if var0 is not var2 : 
"if scheme is not contained in self.schemes,",if scheme is not contained in var0 ,if scheme not in self . schemes : ,if scheme not in var0 : 
"if schemes is not None,",if schemes is not var0 ,if schemes is not None : ,if schemes is not var0 : 
"if script_url is true,","if var0 is true,",if script_url : ,if var0 : 
"if second_item is an empty list,","if var0 is empty list,",if second_item == [ ] : ,if var0 == [ ] : 
"if secret is None,",if secret is var0 ,if secret is None : ,if secret is var0 : 
"if secure is true,","if secure is true,",if secure : ,if secure : 
if self.__dispatch is None.,if var0 is var1 ,if self . __dispatch is None : ,if var0 is var1 : 
"if self.__language equals settings.LANGUAGE_CODE,",if var0 equals settings var1 ,if self . __language == settings . LANGUAGE_CODE : ,if var0 == settings . var1 : 
"if self.__language equals settings.LANGUAGE_CODE or self.__language equals a string ""en-us"",","if var0 equals settings var2 or var0 equals string var4,",if self . __language == settings . LANGUAGE_CODE or self . __language == 'en-us' : ,if var0 == settings . var2 or var0 == 'en-us' : 
"if self._callback is not None,",if var0 is not var1 ,if self . _callback is not None : ,if var0 is not var1 : 
"if self._changed_data is None,",if var0 is var1 ,if self . _changed_data is None : ,if var0 is var1 : 
"if self._content_length equals integer 0,","if var0 equals integer 0,",if self . _content_length == 0 : ,if var0 == 0 : 
"if self._count is None,",if var0 is var1 ,if self . _count is None : ,if var0 is var1 : 
if self._cull_frequency equals to integer 0.,if var0 equals to integer 0.,if self . _cull_frequency == 0 : ,if var0 == 0 : 
"if self._delegate_bytes is true,","if var0 is true,",if self . _delegate_bytes : ,if var0 : 
"if self._delegate_bytes and six.PY2 are both true,","if var0 and six var1 are both true,",if self . _delegate_bytes and six . PY2 : ,if var0 and six . var1 : 
"if self._done is true,","if var0 is true,",if self . _done : ,if var0 : 
"if self._encoding is None,",if var0 is var1 ,if self . _encoding is None : ,if var0 is var1 : 
"if self._errors is None,",if var0 is var1 ,if self . _errors is None : ,if var0 is var1 : 
if self._fname is None:,if var0 is None:,if self . _fname is None : ,if var0 is var1 : 
"evaluate self._has_expired with argument key, if the result is True,","evaluate var0 with argument key, if result is var1 ",if self . _has_expired ( key ) : ,if var0 ( key ) : 
"if self._is_rendered is true,","if var0 is true,",if self . _is_rendered : ,if var0 : 
"call the method self._isdst with an argument dt, if it evaluates to true,","call method var0 with argument var1 if it evaluates to true,",if self . _isdst ( dt ) : ,if var0 ( var1 ) : 
"call the nethod self._isdst with an argument dt, if it evaluates to true,","call var0 var1 with argument var2 if it evaluates to true,",if self . _isdst ( dt ) : ,if var1 ( var2 ) : 
"if self._leftover is true,","if var0 is true,",if self . _leftover : ,if var0 : 
"if self._non_form_errors is None,",if var0 is var1 ,if self . _non_form_errors is None : ,if var0 is var1 : 
"if self._num_pages is None,",if var0 is var1 ,if self . _num_pages is None : ,if var0 is var1 : 
"if self._options exists,","if var0 exists,",if self . _options : ,if var0 : 
"if self._pk_field equals self.fk,",if var0 equals var1 ,if self . _pk_field == self . fk : ,if var0 == var1 : 
"if self._read_started is true,","if var0 is true,",if self . _read_started : ,if var0 : 
if self._read_started is true and self doesnt have an '_body' attribute.,if var0 is true and self doesnt have var1 attribute.,"if self . _read_started and not hasattr ( self , '_body' ) : ","if var0 and not hasattr ( self , var1 ) : "
"if self._request_middleware is None,",if var0 is var1 ,if self . _request_middleware is None : ,if var0 is var1 : 
"call the method self._should_delete_form with an argument form, if it evaluates to true,","call method var0 with argument form, if it evaluates to true,",if self . _should_delete_form ( form ) : ,if var0 ( form ) : 
"call the method self._should_delete_form with an argument, if it evaluates to true,","call method var0 with argument, if it evaluates to true,",if self . _should_delete_form ( form ) : ,if var0 ( form ) : 
"if self._validate_unique is true,","if var0 is true,",if self . _validate_unique : ,if var0 : 
"if self._varlist is true,","if var0 is true,",if self . _varlist : ,if var0 : 
"if self._wrapped is contained in empty,","if var0 is contained in empty,",if self . _wrapped is empty : ,if var0 is empty : 
"if self._wrapped is empty,","if var0 is empty,",if self . _wrapped is empty : ,if var0 is empty : 
"if self.activated is boolean True,",if var0 is boolean var1 ,if self . activated : ,if var0 : 
"if self.active_readers equals integer 0 and self.waiting_writers is not equal to integer 0,","if self var1 equals integer 0 and self var3 is not equal to integer 0,",if self . active_readers == 0 and self . waiting_writers != 0 : ,if self . var1 == 0 and self . var3 != 0 : 
"if self.active_writers and self.waiting_writers both equal to integer 0,","if self var1 and self var3 both equal to integer 0,",if self . active_writers == 0 and self . waiting_writers == 0 : ,if self . var1 == 0 and self . var3 == 0 : 
"if self.active_writers equals integer 0 and self.waiting_writers equals integer 0 and self.active_readers equals integer 0,","if self var1 equals integer 0 and self var3 equals integer 0 and self var5 equals integer 0,",if self . active_writers == 0 and self . waiting_writers == 0 and self . active_readers == 0 : ,if self . var1 == 0 and self . var3 == 0 and self . var5 == 0 : 
"if self.addr is true,","if var0 is true,",if self . addr : ,if var0 : 
"if self.allow_files is true,","if self var1 is true,",if self . allow_files : ,if self . var1 : 
"if self.allow_folders is true,","if self var1 is true,",if self . allow_folders : ,if self . var1 : 
"if self.alternatives is true,","if var0 is true,",if self . alternatives : ,if var0 : 
"if self.app_label is true and app_config.label is not equal to self.app_label,",if self var2 is true and var4 label is not equal to self var2 ,if self . app_label and app_config . label != self . app_label : ,if self . var2 and var4 . label != self . var2 : 
"default is boolean False, and help is a string ""Don't colorize the command output."".   if self.args is true,","default is boolean var0 and help is string var1 var2 if var3 is true,",if self . args : ,if var3 : 
"if self.asvar is true,","if var0 is true,",if self . asvar : ,if var0 : 
"if self.asvar is None,",if var0 is var1 ,if self . asvar is None : ,if var0 is var1 : 
"if self.attachments is true,","if var0 is true,",if self . attachments : ,if var0 : 
"if self.base_url is None,",if self var1 is var2 ,if self . base_url is None : ,if self . var1 is var2 : 
"if self.body is true,","if var0 is true,",if self . body : ,if var0 : 
"call the method self.callback with an argument record, if the result evaluates to true,","call method var0 with argument record, if result evaluates to true,",if self . callback ( record ) : ,if var0 ( record ) : 
"if self.can_delete is true,","if self var1 is true,",if self . can_delete : ,if self . var1 : 
"label set to return value of the function _ called with an string 'Order' and required as boolean False.   if self.can_delete is true,","label set to return value of function var0 called with string var1 and required as boolean var2 if self var5 is true,",if self . can_delete : ,if self . var5 : 
"if self.can_delete is true and call to the method self._should_delete_form with an argument form, evaluates to true,","if self var1 is true and call to method var2 with argument form, evaluates to true,",if self . can_delete and self . _should_delete_form ( form ) : ,if self . var1 and var2 ( form ) : 
"if self.can_delete is true and call to the function self._should_delete_form with an argument form evaluates to true,","if self var1 is true and call to function var2 with argument form evaluates to true,",if self . can_delete and self . _should_delete_form ( form ) : ,if self . var1 and var2 ( form ) : 
"if self.can_import_settings is true,","if self var1 is true,",if self . can_import_settings : ,if self . var1 : 
"if self.can_order is true,","if self var1 is true,",if self . can_order : ,if self . var1 : 
"substitute the result for value under the 'To' key of msg dictionary.   if self.cc is true,","substitute result for value under var0 key of msg dict var1 if var2 is true,",if self . cc : ,if var2 : 
"if self.cdata_tag is not None,",if self var1 is not var2 ,if self . cdata_tag is not None : ,if self . var1 is not var2 : 
"call the method self.check_test with an argument value, if it evaluates to true,","call method self var1 with argument value, if it evaluates to true,",if self . check_test ( value ) : ,if self . var1 ( value ) : 
"if self.choices is true,","if var0 is true,",if self . choices : ,if var0 : 
"if value under the name key of self.cleaned_data dictionary is not None,",if value under name key of self var1 dict is not var2 ,if self . cleaned_data . get ( name ) is not None and self . cleaned_data [ name ] . _state . adding : ,if self . var1 . get ( name ) is not var2 and self . var1 [ name ] . _state . adding : 
"if self.cmd._called_from_command_line is true,","if var0 is true,",if self . cmd . _called_from_command_line : ,if var0 : 
"call the self.compare method with arguments cleaned and self.limit_value, if it evaluates to true,","call var0 method with arguments cleaned and self var2 if it evaluates to true,","if self . compare ( cleaned , self . limit_value ) : ","if var0 ( cleaned , self . var2 ) : "
"if self.connection is true,","if var0 is true,",if self . connection : ,if var0 : 
"if self.connection is None,",if var0 is var1 ,if self . connection is None : ,if var0 is var1 : 
"if self.connection_reset is true,","if self var1 is true,",if self . connection_reset : ,if self . var1 : 
"if self.connector equals conn_type,",if var0 equals var1 ,if self . connector == conn_type : ,if var0 == var1 : 
"if self.count equals a integer 0 and self.allow_empty_first_page is false,","if var0 equals integer 0 and self var2 is false,",if self . count == 0 and not self . allow_empty_first_page : ,if var0 == 0 and not self . var2 : 
"if self.current_token is not EndToken,",if self var1 is not var2 ,if self . current_token is not EndToken : ,if self . var1 is not var2 : 
"if self.data.day equals integer 11, 12 or 13,","if var0 equals integer 11, 12 or 13,","if self . data . day in ( 11 , 12 , 13 ) : ","if var0 in ( 11 , 12 , 13 ) : "
"if self.data.hour equals integer 0,","if var0 equals integer 0,",if self . data . hour == 0 : ,if var0 == 0 : 
"if self.data.hour is greater than integer 11,","if var0 is greater var1 integer 11,",if self . data . hour > 11 : ,if var0 > 11 : 
"if self.data.hour is greater than inreger 12,","if var0 is greater var1 var2 12,",if self . data . hour > 12 : ,if var0 > 12 : 
"if self.data.minute equals integer 0,","if var0 equals integer 0,",if self . data . minute == 0 : ,if var0 == 0 : 
"if self.data.minute equals integer 0 and self.data.hour equals integer 0,","if var0 equals integer 0 and var1 equals integer 0,",if self . data . minute == 0 and self . data . hour == 0 : ,if var0 == 0 and var1 == 0 : 
"if self.data.minute equals integer 0 and self.data.hour equals integer 12,","if var0 equals integer 0 and var1 equals integer 12,",if self . data . minute == 0 and self . data . hour == 12 : ,if var0 == 0 and var1 == 12 : 
"if self.deactivate is true,","if var0 is true,",if self . deactivate : ,if var0 : 
"if self.decimal_places is not None,",if self var1 is not var2 ,if self . decimal_places is not None : ,if self . var1 is not var2 : 
code set to string 'max_digits' and params set to a dictionary with an entry: self.max_digits for 'max'.   if self.decimal_places is not None and decimals is grater than self.decimal_places:,code set to string var0 and var1 set to dict with entry: var2 for var3 var4 if self var7 is not var9 and decimals is grater var10 self.decimal_places:,if self . decimal_places is not None and decimals > self . decimal_places : ,if self . var7 is not var9 and decimals > self . var7 : 
"if self.directory_permissions_mode is not None,",if self var1 is not var2 ,if self . directory_permissions_mode is not None : ,if self . var1 is not var2 : 
"if self.domain equals to string 'djangojs',","if var0 equals to string var1,",if self . domain == 'djangojs' : ,if var0 == var1 : 
"use it as an argument for the call to the function os.path.normpath, substitute the result for django_dir.   if self.domain equals a string 'djangojs',","use it as argument for call to function var0 substitute result for var1 if var4 equals string var5,",if self . domain == 'djangojs' : ,if var4 == var5 : 
"if self.domain is not equal to string 'django' or string 'djangojs',","if var0 is not equal to string var1 or string var2,","if self . domain not in ( 'django' , 'djangojs' ) : ","if var0 not in ( var1 , 'djangojs' ) : "
"call the self.domain_regex.match method with an argument domain_part, if it evaluates to true,","call self var1 match method with argument var2 if it evaluates to true,",if self . domain_regex . match ( domain_part ) : ,if self . var1 . match ( var2 ) : 
"result of the method ProjectState.from_apps with an argument apps and result of the method InteractiveMigrationQuestioner,   called with 2 arguments specified_apps set to app_labels and dry_run set to self.dry_run.   if self.empty is true,","result of method var0 var2 with argument var3 and result of method var4 called with 2 arguments var8 set to var9 and var11 set to self var11 if var14 is true,",if self . empty : ,if var14 : 
"if self.empty_permitted is true and call to the method self.has_changed evaluates to false,","if self var1 is true and call to method self var3 evaluates to false,",if self . empty_permitted and not self . has_changed ( ) : ,if self . var1 and not self . var3 ( ) : 
"if self.errors is true and self.form has an attribute 'error_css_class',","if var0 is true and var1 has attribute var2,","if self . errors and hasattr ( self . form , 'error_css_class' ) : ","if var0 and hasattr ( var1 , var2 ) : "
"if self.fail_silently is boolean True,",if self var1 is boolean var2 ,if self . fail_silently : ,if self . var1 : 
"if value under the 'author_email' key of the self.feed dictionary is not None,",if value under var0 key of var1 dict is not var2 ,if self . feed [ 'author_email' ] is not None : ,if var1 [ var0 ] is not var2 : 
"if value under the 'author_link' key of the self.feed dictionary is not None,",if value under var0 key of var1 dict is not var2 ,if self . feed [ 'author_link' ] is not None : ,if var1 [ var0 ] is not var2 : 
"called with an argument result of the method self.latest_post_date.   if value under the 'author_name' key of the self.feed dictionary is not None,",called with argument result of method self var1 if value under var3 key of var4 dict is not var5 ,if self . feed [ 'author_name' ] is not None : ,if var4 [ var3 ] is not var5 : 
"if value under the 'feed_copyright' key of the self.feed dictionary is not None,",if value under var0 key of var1 dict is not var2 ,if self . feed [ 'feed_copyright' ] is not None : ,if var1 [ var0 ] is not var2 : 
"cat for 'term'.   if value under the 'feed_copyright' key of the self.feed dictionary is not None,",cat for var0 var1 if value under var2 key of var5 dict is not var6 ,if self . feed [ 'feed_copyright' ] is not None : ,if var5 [ var2 ] is not var6 : 
"if value under the 'feed_url' key of the self.feed dictionary is not None,",if value under var0 key of var1 dict is not var2 ,if self . feed [ 'feed_url' ] is not None : ,if var1 [ var0 ] is not var2 : 
"alternate' for 'rel' and value under the 'link' key of self.feed dictionary for 'href'.   if value under the 'feed_url' key of the self.feed dictionary is not None,",alternatevar0relvar2linkvar3hrefvar7feed_url' key of var4 dict is not var11 ,if self . feed [ 'feed_url' ] is not None : ,if var4 [ 'var9' ] is not var11 : 
"value under the 'feed_url' key of the self.feed dictionary for 'href'.   if value under the 'language' key of the self.feed dictionary is not None,",value under var0 key of var1 dict for var3 var5 if value under var6 key of var1 dict is not var7 ,if self . feed [ 'language' ] is not None : ,if var1 [ var6 ] is not var7 : 
"if value under the 'language' key of the self.feed dictionary is not None,",if value under var0 key of var1 dict is not var2 ,if self . feed [ 'language' ] is not None : ,if var1 [ var0 ] is not var2 : 
"if value under the 'subtitle' key of the self.feed dictionary is not None,",if value under var0 key of var1 dict is not var2 ,if self . feed [ 'subtitle' ] is not None : ,if var1 [ var0 ] is not var2 : 
"called with an argument result of the method self.latest_post_date.   if value under the 'ttl' key of the self.feed dictionary is not None,",called with argument result of method self var1 if value under var3 key of var4 dict is not var5 ,if self . feed [ 'ttl' ] is not None : ,if var4 [ var3 ] is not var5 : 
"if self.field.cache_choices is true,","if self.field var1 is true,",if self . field . cache_choices : ,if self . field . var1 : 
"if self.field.choice_cache is None,",if self.field var1 is var2 ,if self . field . choice_cache is None : ,if self . field . var1 is var2 : 
"if self.field.empty_label is not None,",if self.field var1 is not var2 ,if self . field . empty_label is not None : ,if self . field . var1 is not var2 : 
"if self.field.label is None,",if var0 is var1 ,if self . field . label is None : ,if var0 is var1 : 
"if self.field.localize is true,","if var0 is true,",if self . field . localize : ,if var0 : 
"and convert it again to the dictionary, if attrs is false, leave it alone, substitute the result for attrs.   if self.field.required is true and self.form has an attribute 'required_css_class',","and convert it again to dict, if var0 is false, leave it alone, substitute result for var0 if var3 is true and var4 has attribute var5,","if self . field . required and hasattr ( self . form , 'required_css_class' ) : ","if var3 and hasattr ( var4 , var5 ) : "
"if self.field.required is true and self.form has an attribute 'required_css_class' ,","if var0 is true and var1 has attribute var2 ,","if self . field . required and hasattr ( self . form , 'required_css_class' ) : ","if var0 and hasattr ( var1 , var2 ) : "
"if self.field.show_hidden_initial is true,","if self.field var1 is true,",if self . field . show_hidden_initial : ,if self . field . var1 : 
"if self.file_permissions_mode is not None,",if self var1 is not var2 ,if self . file_permissions_mode is not None : ,if self . var1 is not var2 : 
"if self.first is true,","if var0 is true,",if self . first : ,if var0 : 
"if self.fixture_count equals integer 0 and self.hide_empty is true,","if self var1 equals integer 0 and self var3 is true,",if self . fixture_count == 0 and self . hide_empty : ,if self . var1 == 0 and self . var3 : 
"if it doesnt exists return value of the function capfirst with an argument self.fk.verbose_name for 'label'.   if self.fk.rel.field_name is not equal to self.fk.rel.to._meta.pk.name,",if it doesnt exists return value of function var0 with argument self.fk var2 for var3 var4 if self.fk.rel var6 is not equal to var7 ,if self . fk . rel . field_name != self . fk . rel . to . _meta . pk . name : ,if self . fk . rel . var6 != var7 : 
"if self.flags is true and self.regex is not an instance of a six.string_types type,","if var0 is true and var1 is not instance of six var3 type,","if self . flags and not isinstance ( self . regex , six . string_types ) : ","if var0 and not isinstance ( var1 , six . var3 ) : "
"if self.forms is true,","if var0 is true,",if self . forms : ,if var0 : 
"call the method self.has_header with string 'Content-Encoding' as an argument, if it evaluates to true,","call method self var1 with string var2 as argument, if it evaluates to true,",if self . has_header ( 'Content-Encoding' ) : ,if self . var1 ( var2 ) : 
"evaluate method self.has_key with key and version as arguments, if the result is true,","evaluate method self var1 with key and version as arguments, if result is true,","if self . has_key ( key , version ) : ","if self . var1 ( key , version ) : "
"if self.help is true,","if var0 is true,",if self . help : ,if var0 : 
"self.id_for_label is true,","self var1 is true,",if self . id_for_label : ,if self . var1 : 
"if self.ignore is true and field_name is not contained in model_fields,",if var0 is true and var1 is not contained in var2 ,if self . ignore and field_name not in model_fields : ,if var0 and var1 not in var2 : 
"if self.initial is true and 'initial' key is not contained in kwargs,",if var0 is true and var1 key is not contained in var2 ,if self . initial and 'initial' not in kwargs : ,if var0 and var1 not in var2 : 
"if self.instance.pk is None,",if var0 is var1 ,if self . instance . pk is None : ,if var0 is var1 : 
"if self.instance.pk is not None,",if var0 is not var1 ,if self . instance . pk is not None : ,if var0 is not var1 : 
"if self.interactive is true,","if var0 is true,",if self . interactive : ,if var0 : 
"if self.is_bound is true,","if self var1 is true,",if self . is_bound : ,if self . var1 : 
"with an argument i, for 'prefix' and self.error_class for 'error_class'.   if self.is_bound is true,","with argument i, for var0 and var1 for var5 var6 if self var8 is true,",if self . is_bound : ,if self . var8 : 
"if self.is_bound is true and i is smaller than self.initial_form_count,",if self var1 is true and i is smaller var2 self var4 ,if self . is_bound and i < self . initial_form_count ( ) : ,if self . var1 and i < self . var4 ( ) : 
"substitute the result for final_attrs.   call the method self.is_checked, if it evaluates to true,","substitute result for var0 call method self var3 if it evaluates to true,",if self . is_checked ( ) : ,if self . var3 ( ) : 
"if self.is_localized is true,","if self var1 is true,",if self . is_localized : ,if self . var1 : 
"if self.is_reversed is true,","if self var1 is true,",if self . is_reversed : ,if self . var1 : 
"call the method self.is_url with an argument template, if it evaluates to true,","call method self var1 with argument template, if it evaluates to true,",if self . is_url ( template ) : ,if self . var1 ( template ) : 
"for every name and var in return value of the function six.iteritems called with an argument self.extra_context.   if self.isolated_context is true,","for every name and var in return value of function var0 called with argument self var2 if self var5 is true,",if self . isolated_context : ,if self . var5 : 
"if call to the method self.L evaluates to true, and result of the call to the method self.data.month is greater than integer 2,","if call to method self.L evaluates to true, and result of call to method var0 is greater var1 integer 2,",if self . L ( ) and self . data . month > 2 : ,if self . L ( ) and var0 > 2 : 
"if self.language is not None,",if var0 is not var1 ,if self . language is not None : ,if var0 is not var1 : 
"if self.load_initial_data is not empty,","if self var1 is not empty,",if self . load_initial_data : ,if self . var1 : 
"if self.loaded_object_count is greater than zero,","if self var1 is greater var2 zero,",if self . loaded_object_count > 0 : ,if self . var1 > 0 : 
"if self.locale_paths is true,","if self var1 is true,",if self . locale_paths : ,if self . var1 : 
"if self.localize is true,","if var0 is true,",if self . localize : ,if var0 : 
"if self.lookups is not None,",if var0 is not var1 ,if self . lookups is not None : ,if var0 is not var1 : 
"if self.m2m.data and save_m2m are true,","if var0 and var1 are true,",if self . m2m_data and save_m2m : ,if self . m2m_data and var1 : 
"if self.match is None or call to the method self.match_re.search with an argument f, evaluated to true,","if var0 is var1 or call to method self var3 search with argument f, evaluated to true,",if self . match is None or self . match_re . search ( f ) : ,if var0 is var1 or self . var3 . search ( f ) : 
"if self.match is not None,",if var0 is not var1 ,if self . match is not None : ,if var0 is not var1 : 
"if self.max_digits is not None and digits is grater than self.max_digits,",if self var2 is not var4 and digits is grater var5 self var2 ,if self . max_digits is not None and digits > self . max_digits : ,if self . var2 is not var4 and digits > self . var2 : 
"if self.max_length is not None,",if self var1 is not var2 ,if self . max_length is not None : ,if self . var1 is not var2 : 
"if self.max_length is not None and length of file_name is grater than self.max_length,",if self var2 is not var4 and length of var5 is grater var6 self var2 ,if self . max_length is not None and len ( file_name ) > self . max_length : ,if self . var2 is not var4 and len ( var5 ) > self . var2 : 
"if self.max_value is not None,",if self var1 is not var2 ,if self . max_value is not None : ,if self . var1 is not var2 : 
"if self.merge and conflicts are both true,","if var0 and conflicts are both true,",if self . merge and conflicts : ,if var0 and conflicts : 
"with name_str, use it as an argument to throw an CommandError exception.   if self.merge is true and conflicts is false,","with var0 use it as argument to throw var2 exception var3 if var4 is true and conflicts is false,",if self . merge and not conflicts : ,if var4 and not conflicts : 
"if self.message_context is true,","if self var1 is true,",if self . message_context : ,if self . var1 : 
"get the value under the 'CONTENT_TYPE' key of the self.META dictionary, if it starts with a string 'multipart/form-data',","get value under var0 key of self var1 dict, if it starts with string var3,","if self . META . get ( 'CONTENT_TYPE' , '' ) . startswith ( 'multipart/form-data' ) : ","if self . var1 . get ( var0 , '' ) . startswith ( 'var4/form-data' ) : "
"if value under the header key of the self.META dictionary is equal to value,","if value under header key of self var0 dict is equal to value,","if self . META . get ( header , None ) == value : ","if self . var0 . get ( header , None ) == value : "
"if self.method is not equal to string 'POST',","if var0 is not equal to string var1,",if self . method != 'POST' : ,if var0 != var1 : 
"if self.min_value is not None,",if self var1 is not var2 ,if self . min_value is not None : ,if self . var1 is not var2 : 
"if self.negated,",if var0 ,if self . negated : ,if var0 : 
"if self.no_obsolete is true,","if self var1 is true,",if self . no_obsolete : ,if self . var1 : 
"if self.number equals to self.paginator.num_pages,",if var0 equals to self.paginator var2 ,if self . number == self . paginator . num_pages : ,if var0 == self . paginator . var2 : 
"if self.obj is None,",if var0 is var1 ,if self . obj is None : ,if var0 is var1 : 
"if self.old_timezone is None,",if self var1 is var2 ,if self . old_timezone is None : ,if self . var1 is var2 : 
"if value under the 'indend' key of the options dictionary exists and is not None,",if value under var0 key of options dict exists and is not var1 ,"if self . options . get ( 'indent' , None ) is not None : ","if self . options . get ( 'indent' , var1 ) is not var1 : "
"get the value under the 'indent' key of self.options dictionary, if it is true,","get value under var0 key of var1 dict, if it is true,",if self . options . get ( 'indent' ) : ,if var1 . get ( var0 ) : 
"if value under the 'indent' key of the self.options dictionary is true,","if value under var0 key of var1 dict is true,",if self . options . get ( 'indent' ) : ,if var1 . get ( var0 ) : 
"if self.output_transaction is true,","if self var1 is true,",if self . output_transaction : ,if self . var1 : 
"if self.paginator.count equals a integer 0,","if var0 equals integer 0,",if self . paginator . count == 0 : ,if var0 == 0 : 
"if not self.to_field is None.   if self.parent_instance is not None,",if not self var1 is var2 if self var6 is not var2 ,if self . parent_instance is not None : ,if self . var6 is not var2 : 
if self.parent_name.filters is true or self.parent_name.var is an instance of Variable.,if self var1 filters is true or self var1 var is instance of var4 ,"if self . parent_name . filters or isinstance ( self . parent_name . var , Variable ) : ","if self . var1 . filters or isinstance ( self . var1 . var , var4 ) : "
"if self.parsed is true,","if var0 is true,",if self . parsed : ,if var0 : 
"with new_path and self.style.NOTICE, respectively, write it to self.stderr stream.   if self.paths_to_remove is true,","with var0 and var2 var3 respectively, write it to var4 stream var5 if self var7 is true,",if self . paths_to_remove : ,if self . var7 : 
"if self.pk_field,",if self var1 ,if self . pk_field : ,if self . var1 : 
"if self.pos is greater than or equal to self.tokens,",if self.pos is greater var0 or equal to var1 ,if self . pos >= len ( self . tokens ) : ,if self . pos >= len ( var1 ) : 
"if self.queryset is not None,",if var0 is not var1 ,if self . queryset is not None : ,if var0 is not var1 : 
"if self.require_all_fields is true,","if self var1 is true,",if self . require_all_fields : ,if self . var1 : 
"if self.require_all_fields is boolean true,","if self var1 is boolean true,",if self . require_all_fields : ,if self . var1 : 
"if self.required is true,","if var0 is true,",if self . required : ,if var0 : 
"if self.required is boolean true,","if var0 is boolean true,",if self . required : ,if var0 : 
"required set to required, widget set to widget, label set to label, initial st to initial, help_text set to help_text,   unpacked list args, unpacked dictionary kwargs.   if self.required is true,","required set to required, widget set to widget, label set to label, initial var0 to initial var1 set to var1 unpacked list var5 unpacked dict var6 var3 if var7 is true,",if self . required : ,if var7 : 
"if self.required is true and value is false,","if var0 is true and value is false,",if self . required and not value : ,if var0 and not value : 
"if self.save_as_new is true,","if self var1 is true,",if self . save_as_new : ,if self . var1 : 
"and unpacked dictionary kwargs, substitute the result for form.   if self.save_as_new is true,","and unpacked dict var0 substitute result for form var1 if self var3 is true,",if self . save_as_new : ,if self . var3 : 
if self.selected_fields is None or last three elements of field.attname are contained in self.selected_fields:,if self var2 is var4 or last three elements of var5 are contained in self.selected_fields:,if self . selected_fields is None or field . attname [ : - 3 ] in self . selected_fields : ,if self . var2 is var4 or var5 [ : - 3 ] in self . var2 : 
if self.selected_fields is None or field.attname is contained in self.selected_fields,if self var2 is var4 or var5 is contained in self.var2,if self . selected_fields is None or field . attname in self . selected_fields : ,if self . var2 is var4 or var5 in self . var2 : 
"if self.selected_fields is None or field.attname is contained in self.selected_fields,",if self var2 is var4 or var5 is contained in self var2 ,if self . selected_fields is None or field . attname in self . selected_fields : ,if self . var2 is var4 or var5 in self . var2 : 
"if self.sep is not contained in signed_value,",if var0 is not contained in var1 ,if self . sep not in signed_value : ,if var0 not in var1 : 
"if self.setting is true,","if var0 is true,",if self . setting : ,if var0 : 
"if self.settings_exception is not None,",if self var1 is not var2 ,if self . settings_exception is not None : ,if self . var1 is not var2 : 
"with all occurrences of '%s' replaced with app_name and model._meta.object_name and e, respectively.   if self.show_traceback is true,","with all occurrences of var0 replaced with var1 and model._meta var4 and e, respectively var5 if self var7 is true,",if self . show_traceback : ,if self . var7 : 
"if self.silent is true,","if var0 is true,",if self . silent : ,if var0 : 
if self.stream is None:,if var0 is None:,if self . stream is None : ,if var0 is var1 : 
"if self.stream is not None,",if var0 is not var1 ,if self . stream is not None : ,if var0 is not var1 : 
"if self.takes_context is true,","if self var1 is true,",if self . takes_context : ,if self . var1 : 
"if self.timeout is not None,",if var0 is not var1 ,if self . timeout is not None : ,if var0 is not var1 : 
"if self.timezone is true and call to the method self.timezone.dst with an argument self.data, evaluates to true,","if self.timezone is true and call to method var0 with argument var1 evaluates to true,",if self . timezone and self . timezone . dst ( self . data ) : ,if self . timezone and var0 ( var1 ) : 
"if self.timezone is None,",if var0 is var1 ,if self . timezone is None : ,if var0 is var1 : 
"if self.to_field is true,","if self var1 is true,",if self . to_field : ,if self . var1 : 
"if self.to_field_name is true,","if self var1 is true,",if self . to_field_name : ,if self . var1 : 
"if self.translate is true,","if var0 is true,",if self . translate : ,if var0 : 
"if self.use_argparse is true,","if self var1 is true,",if self . use_argparse : ,if self . var1 : 
"if self.use_ipv6 is true and socket.has_ipv6 is false,","if self var1 is true and socket var3 is false,",if self . use_ipv6 and not socket . has_ipv6 : ,if self . var1 and not socket . var3 : 
if self.use_natural_foreign_keys is true and field.rel.to has an 'natural_key' attribute.,if self var1 is true and var2 has var3 attribute.,"if self . use_natural_foreign_keys and hasattr ( field . rel . to , 'natural_key' ) : ","if self . var1 and hasattr ( var2 , var3 ) : "
"if self.use_natural_foreign_keys is true and field.rel.to has an 'natural_key' attribute,","if self var1 is true and var2 has var3 attribute,","if self . use_natural_foreign_keys and hasattr ( field . rel . to , 'natural_key' ) : ","if self . var1 and hasattr ( var2 , var3 ) : "
"if self.use_natural_foreign_keys is true and field.rel.to has an attribute 'natural_key',","if self var1 is true and var2 has attribute var3,","if self . use_natural_foreign_keys and hasattr ( field . rel . to , 'natural_key' ) : ","if self . var1 and hasattr ( var2 , var3 ) : "
"if the key doesnt exists substitute boolean False for self.use_natural_keys.   if self.use_natural_keys is true,","if key doesnt exists substitute boolean var0 for self var3 if self var3 is true,",if self . use_natural_keys : ,if self . var3 : 
"if self.use_ssl and self.use_tls are boolean True,",if self var1 and self var3 are boolean var4 ,if self . use_ssl and self . use_tls : ,if self . var1 and self . var3 : 
"if self.username and self.password are true,","if var0 and var1 are true,",if self . username and self . password : ,if var0 and var1 : 
"if method self.validate_domain_part with an argument domain_part evaluates to true,","if method self var1 with argument var2 evaluates to true,",if self . validate_domain_part ( domain_part ) : ,if self . var1 ( var2 ) : 
if self.variable_name is true.,if self var1 is true.,if self . variable_name : ,if self . var1 : 
"substitute the result for block_content.   if self.verbatim is true and block_content equals self.verbatim,",substitute result for var0 if var3 is true and var0 equals var3 ,if self . verbatim and block_content == self . verbatim : ,if var3 and var0 == var3 : 
"if self.verbosity is greater than integer 0,","if var0 is greater var1 integer 0,",if self . verbosity > 0 : ,if var0 > 0 : 
"if self.verbosity is greater than integer 1,","if var0 is greater var1 integer 1,",if self . verbosity > 0 : ,if var0 > 0 : 
"with arguments al and mn, for every al, mn in executor.loader.graph.forwards_plan method return value called with 2 arguments:   migration.app_label, migration.name, only if al equals migration.app_label.   if self.verbosity is greater than integer 0 or self.interactive is true,","with arguments al and mn, for every al, mn in executor.loader.graph var1 method return value called with 2 arguments: migration var6 var8 only if al equals migration var6 if var9 is greater var10 integer 0 or var11 is true,",if self . verbosity > 0 or self . interactive : ,if var9 > 0 or var11 : 
"if self.verbosity is greater than integer 1,","if var0 is greater var1 integer 1,",if self . verbosity > 1 : ,if var0 > 1 : 
"if self.verbosity is integer 1,","if var0 is integer 1,",if self . verbosity > 1 : ,if var0 > 1 : 
"substitute the result for plural_form_line.   if self.verbosity is greater than integer 1,","substitute result for var0 if var2 is greater var3 integer 1,",if self . verbosity > 1 : ,if var2 > 1 : 
"if self.verbosity is greater of equal to integer 1,","if var0 is greater of equal to integer 1,",if self . verbosity >= 1 : ,if var0 >= 1 : 
"if self.verbosity is greater or equal to integer 1,","if var0 is greater or equal to integer 1,",if self . verbosity >= 1 : ,if var0 >= 1 : 
if self.verbosity is greater or equal to integer 1.,if var0 is greater or equal to integer 1.,if self . verbosity >= 1 : ,if var0 >= 1 : 
"interactive set to boolean False, database set to db, reset_sequences set to boolean False, inhibit_post_migrate set to boolean True.   if self.verbosity is greater or equal to integer 1,","interactive set to boolean var0 database set to db var2 set to boolean var0 var4 set to boolean var6 if var8 is greater or equal to integer 1,",if self . verbosity >= 1 : ,if var8 >= 1 : 
"if self.verbosity is greater or equal than integer 1,","if var0 is greater or equal var1 integer 1,",if self . verbosity >= 1 : ,if var0 >= 1 : 
"with all occurrences of '%s' replaced with app_name and model._meta.object_name, respectively.   if self.verbosity is greater or equal to integer 1,","with all occurrences of var0 replaced with var1 and model._meta var4 respectively var5 if var6 is greater or equal to integer 1,",if self . verbosity >= 1 : ,if var6 >= 1 : 
"use the result as the argument for the call to the sql.extend method.   if self.verbosity is greater or equal than integer 1 and sql is true,","use result as argument for call to var0 method var2 if var3 is greater or equal var4 integer 1 and var1 is true,",if self . verbosity >= 1 and sql : ,if var3 >= 1 and var1 : 
"if self.verbosity is grater than, or equal to integer 2,","if var0 is grater var1 or equal to integer 2,",if self . verbosity >= 2 : ,if var0 >= 2 : 
"if self.verbosity is greater or equal to integer 2,","if var0 is greater or equal to integer 2,",if self . verbosity >= 2 : ,if var0 >= 2 : 
"otherwise ser_fmts is a list containing ser_fmt.   if self.verbosity is greater or equal to integer 2,","otherwise var0 is list containing var1 if var3 is greater or equal to integer 2,",if self . verbosity >= 2 : ,if var3 >= 2 : 
if self.verbosity is greater or equals to integer 2.,if var0 is greater or equals to integer 2.,if self . verbosity >= 2 : ,if var0 >= 2 : 
"and returns x striped of the surrounding whitespaces, extend the extra_files with the mapped list.   if self.verbosity is greater or equal to integer 2,","and returns x striped of surrounding var0 extend var1 with mapped list var2 if var3 is greater or equal to integer 2,",if self . verbosity >= 2 : ,if var3 >= 2 : 
if self.verbosity is greater or equal to integer 2.,if var0 is greater or equal to integer 2.,if self . verbosity >= 2 : ,if var0 >= 2 : 
"if self.verbosity is greater or equals integer 2 and fixture_files_in_dir is false,","if var0 is greater or equals integer 2 and var1 is false,",if self . verbosity >= 2 and not fixture_files_in_dir : ,if var0 >= 2 and not var1 : 
"if self.verbosity is greater or equal to 3,","if var0 is greater or equal to 3,",if self . verbosity >= 3 : ,if var0 >= 3 : 
"if self.verbosity is greater or equal to integer 3,","if var0 is greater or equal to integer 3,",if self . verbosity >= 3 : ,if var0 >= 3 : 
"if self.waiting_writers is not equal to integer 0,","if self var1 is not equal to integer 0,",if self . waiting_writers != 0 : ,if self . var1 != 0 : 
"if self is not contained in context.render_context,",if self is not contained in context var1 ,if self not in context . render_context : ,if self not in context . var1 : 
"if self is not contained in state_frame,",if self is not contained in var0 ,if self not in state_frame : ,if self not in var0 : 
"if self_closing is true or tagname is contained in html4_singlets,",if var0 is true or var1 is contained in var2 ,if self_closing or tagname in html4_singlets : ,if var0 or var1 in var2 : 
"if sender is true and sender attribute 'handles_files' is also True,",if sender is true and sender attribute var0 is also var1 ,"if sender and getattr ( sender , 'handles_files' , False ) : ","if sender and getattr ( sender , var0 , False ) : "
"if sent is true,","if sent is true,",if sent : ,if sent : 
"if sep is None,",if sep is var0 ,if sep is None : ,if sep is var0 : 
"if sep is not None,",if sep is not var0 ,if sep is not None : ,if sep is not var0 : 
"substitute the result for sequence_sql.   if sequence_sql is true,","substitute result for var0 if var0 is true,",if sequence_sql : ,if var0 : 
"if serializers is None,",if var0 is var1 ,if serializers is None : ,if var0 is var1 : 
"if serializers is None and _serializers is false,","if var0 is var1 and var2 is false,",if serializers is None and not _serializers : ,if var0 is var1 and not var2 : 
"if return value of the self.is_secure method is true and server_port is not equal to string '443',","if return value of self var1 method is true and var2 is not equal to string var4,",if server_port != ( '443' if self . is_secure ( ) else '80' ) : ,if var2 != ( var4 if self . var1 ( ) else '80' ) : 
if the union of the kwargs and defaults dictionary keys converted into sets is not the same as the union of the defaults and prefix,if union of var0 and defaults dict keys converted into sets is not same as union of defaults and prefix,if set ( kwargs . keys ( ) ) | set ( defaults . keys ( ) ) != set ( params ) | set ( defaults . keys ( ) ) | set ( prefix_args ) : ,if set ( var0 . keys ( ) ) | set ( defaults . keys ( ) ) != set ( params ) | set ( defaults . keys ( ) ) | set ( prefix_args ) : 
"if settings.configured is true,","if var0 is true,",if settings . configured : ,if var0 : 
"if settings.configured,",if var0 ,if settings . configured : ,if var0 : 
"and 'request with value request, respectively use the previous as the arguments for the call to the logger.warning function.   if settings.DEBUG is True,","and 'request with value request, respectively use previous as arguments for call to var0 function var1 if settings var2 is var3 ",if settings . DEBUG : ,if settings . var2 : 
"status code' with integer value of 400 and 'request' with value request, respectively use the previous to call the function security_logger.error.   if settings.DEBUG is True,","status codevar0request' with value request, respectively use previous to call function var1 error var3 if settings var4 is var5 ",if settings . DEBUG : ,if settings . var4 : 
"extra is an dictionary with two pairs of elements 'status_code' with value 500, and 'request with value request,   respectively use the previous as the arguments for the call to the logger.error function.   if settings.DEBUG is True,","extra is dict with two pairs of elements var0 with value 500, and 'request with value request var1 respectively use previous as arguments for call to var3 function var1 if settings var4 is var5 ",if settings . DEBUG : ,if settings . var4 : 
"if settings.DEBUG is true,","if settings var0 is true,",if settings . DEBUG : ,if settings . var0 : 
"if settings.DEBUG is true and value of the request.META dictionary under the 'REMOTE_ADDR' key is contained in settings.INTERNAL_IPS,",if settings var0 is true and value of request var1 dict under var3 key is contained in settings var4 ,if settings . DEBUG and request . META . get ( 'REMOTE_ADDR' ) in settings . INTERNAL_IPS : ,if settings . var0 and request . var1 . get ( var3 ) in settings . var4 : 
"if settings.DEBUG_PROPAGATE_EXCEPTIONS is True,",if settings var0 is var1 ,if settings . DEBUG_PROPAGATE_EXCEPTIONS : ,if settings . var0 : 
"if settings.FILE_UPLOAD_TEMP_DIR is true,","if settings var0 is true,",if settings . FILE_UPLOAD_TEMP_DIR : ,if settings . var0 : 
"if settings.FORCE_SCRIPT_NAME is not None,",if settings var0 is not var1 ,if settings . FORCE_SCRIPT_NAME is not None : ,if settings . var0 is not var1 : 
"call the function settings.is_overridden with argument string 'ADMINS', if it evaluates to boolean True,","call function settings var1 with argument string var2, if it evaluates to boolean var3 ",if settings . is_overridden ( 'ADMINS' ) : ,if settings . var1 ( var2 ) : 
"call the function settings.is_overridden with argument string 'MANAGERS', if it evaluates to boolean True,","call function settings var1 with argument string var2, if it evaluates to boolean var3 ",if settings . is_overridden ( 'MANAGERS' ) : ,if settings . var1 ( var2 ) : 
"call the function settings.is_overridden with argument string 'TEMPLATE_LOADERS', if it evaluates to boolean True,","call function settings var1 with argument string var2, if it evaluates to boolean var3 ",if settings . is_overridden ( 'TEMPLATE_LOADERS' ) : ,if settings . var1 ( var2 ) : 
"if settings.SECURE_PROXY_SSL_HEADER is true,","if settings var0 is true,",if settings . SECURE_PROXY_SSL_HEADER : ,if settings . var0 : 
"if settings.SETTINGS_MODULE is true,","if settings var0 is true,",if settings . SETTINGS_MODULE : ,if settings . var0 : 
"if settings.STATIC_URL is None,",if settings var0 is var1 ,if settings . STATIC_URL is None : ,if settings . var0 is var1 : 
"if settings.TEMPLATE_DEBUG is true,","if settings var0 is true,",if settings . TEMPLATE_DEBUG : ,if settings . var0 : 
"if settings.TEMPLATE_DEBUG and display_name are both true,","if settings var0 and var1 are both true,",if settings . TEMPLATE_DEBUG and display_name : ,if settings . var0 and var1 : 
"if settings.TEMPLATE_DEBUG is true and origin is None,",if settings var0 is true and origin is var1 ,if settings . TEMPLATE_DEBUG and origin is None : ,if settings . var0 and origin is var1 : 
"if settings.TEMPLATE_STRING_IF_INVALID is true,","if settings var0 is true,",if settings . TEMPLATE_STRING_IF_INVALID : ,if settings . var0 : 
"if settings.USE_ETAGS is True and function call response.has_header with string 'ETag' as argument returns boolean False,",if settings var0 is var2 and function call response var4 with string var5 as argument returns boolean var6 ,if settings . USE_ETAGS and not response . has_header ( 'ETag' ) : ,if settings . var0 and not response . var4 ( var5 ) : 
"if settings.USE_I18N is true,","if settings var0 is true,",if settings . USE_I18N : ,if settings . var0 : 
"if eather one of settings.USE_I18N or settings.USE_L10N is True,",if var0 one of settings var1 or settings var2 is var4 ,if settings . USE_I18N or settings . USE_L10N : ,if settings . var1 or settings . var2 : 
"if settings.USE_L10N is true,","if settings var0 is true,",if settings . USE_L10N : ,if settings . var0 : 
"if settings.USE_L10N is true and value is an instance of six.string_types,",if settings var0 is true and value is instance of six var2 ,"if settings . USE_L10N and isinstance ( value , six . string_types ) : ","if settings . var0 and isinstance ( value , six . var2 ) : "
"if settings.USE_THOUSAND_SEPARATOR is true,","if settings var0 is true,",if settings . USE_THOUSAND_SEPARATOR : ,if settings . var0 : 
"if settings.USE_TZ is true,","if settings var0 is true,",if settings . USE_TZ : ,if settings . var0 : 
"append the result at the end of string '.', append it all at the end of string cache_key.   if settings.USE_TZ is True,","append result at end of string var0, append it all at end of string var1 if settings var4 is var6 ",if settings . USE_TZ : ,if settings . var4 : 
"if settings.USE_TZ is true and value is not None and call to the function timezone.is_aware with an argument value, evaluates to true,","if settings var0 is true and value is not var1 and call to function timezone var3 with argument value, evaluates to true,",if settings . USE_TZ and value is not None and timezone . is_aware ( value ) : ,if settings . var0 and value is not var1 and timezone . var3 ( value ) : 
"if settings.USE_TZ is true and value is not None and call to the function timezone.is_naive with an argument value, evaluates to true,","if settings var0 is true and value is not var1 and call to function timezone var2 with argument value, evaluates to true,",if settings . USE_TZ and value is not None and timezone . is_naive ( value ) : ,if settings . var0 and value is not var1 and timezone . var2 ( value ) : 
if settings.USE_X_FORWARDED_HOST is true and 'HTTP_X_FORWARDED_HOST' is contained in self.META.,if settings var0 is true and var2 is contained in self var3 ,if settings . USE_X_FORWARDED_HOST and ( 'HTTP_X_FORWARDED_HOST' in self . META ) : ,if settings . var0 and ( var2 in self . var3 ) : 
"if show_traceback is true,","if var0 is true,",if show_traceback : ,if var0 : 
"if shutdown_message is true,","if var0 is true,",if shutdown_message : ,if var0 : 
"if sign is true,","if sign is true,",if sign : ,if sign : 
"if sign is contained in self.digits,",if sign is contained in var0 ,if sign in self . digits : ,if sign in var0 : 
"call the method simple_url_re.match with an argument middle, if it evaluates to true,","call method var0 match with argument middle, if it evaluates to true,",if simple_url_re . match ( middle ) : ,if var0 . match ( middle ) : 
"if since is lesser or equal to integer 0,","if var0 is lesser or equal to integer 0,",if since <= 0 : ,if var0 <= 0 : 
"if site is contained in sites2,",if site is contained in var0 ,if site in sites2 : ,if site in var0 : 
"if six.PY2 is boolean True,",if six var0 is boolean var1 ,if six . PY2 : ,if six . var0 : 
"if six.PY2 is true,","if six var0 is true,",if six . PY2 : ,if six . var0 : 
"if field PY2 of the module six is boolean True,",if field var0 of module six is boolean var1 ,if six . PY2 : ,if six . var0 : 
"substitute the result for time_str.   if six.PY2 is true,","substitute result for var0 if six var3 is true,",if six . PY2 : ,if six . var3 : 
"if six.PY2,",if six var0 ,if six . PY2 : ,if six . var0 : 
if six.PY2 is true and rawdata is an instance of the type six.text_type.,if six var0 is true and var1 is instance of type six var3 ,"if six . PY2 and isinstance ( rawdata , six . text_type ) : ","if six . var0 and isinstance ( var1 , six . var3 ) : "
"if six.PY2 is true and path is not an instance of byes type,","if six var0 is true and path is not instance of byes type,","if six . PY2 and not isinstance ( path , bytes ) : ","if six . var0 and not isinstance ( path , bytes ) : "
"if six.PY2 is true and path is not an instance of six.text_type type,","if six var0 is true and path is not instance of six var2 type,","if six . PY2 and not isinstance ( path , six . text_type ) : ","if six . var0 and not isinstance ( path , six . var2 ) : "
"if six.PY2 is true and value is greater than sys.maxint,",if six var0 is true and value is greater var1 var2 ,if six . PY2 and value > sys . maxint : ,if six . var0 and value > var2 : 
"if six.PY3 is true,","if six var0 is true,",if six . PY3 : ,if six . var0 : 
"if six.PY3 is boolean True,",if six var0 is boolean var1 ,if six . PY3 : ,if six . var0 : 
"if PY3 filed of six is boolean True,",if var0 filed of six is boolean var1 ,if six . PY3 : ,if six . var0 : 
"if PY3 field of six is boolean True,",if var0 field of six is boolean var1 ,if six . PY3 : ,if six . var0 : 
"if PY3 field of module six is boolean True,",if var0 field of module six is boolean var1 ,if six . PY3 : ,if six . var0 : 
"if six.PY3 is true and val1 and val2 are an instances of bytes,","if six var0 is true and var1 and var2 are instances of bytes,","if six . PY3 and isinstance ( val1 , bytes ) and isinstance ( val2 , bytes ) : ","if six . var0 and isinstance ( var1 , bytes ) and isinstance ( var2 , bytes ) : "
"otherwise call the function sys.getdefaultencoding and substitute its result for fs_encoding.   if six.PY3 is true or os.name equals a string 'nt',","otherwise call function var0 and substitute its result for var1 if six var4 is true or var6 equals string var7,",if six . PY3 or os . name == 'nt' : ,if six . var4 or var6 == var7 : 
"if size is not zero,","if size is not zero,",if size : ,if size : 
"if size is not empty,","if size is not empty,",if size : ,if size : 
if size equals to integer zero.,if size equals to integer zero.,if size == 0 : ,if size == 0 : 
"if size is None,",if size is var0 ,if size is None : ,if size is var0 : 
"if size is None or size is greater than self.remaining,",if size is var0 or size is greater var1 var2 ,if size is None or size > self . remaining : ,if size is var0 or size > var2 : 
"if size of c_ulong does not equals to size of c_void_p,",if size of var0 does not equals to size of var1 ,if sizeof ( c_ulong ) != sizeof ( c_void_p ) : ,if sizeof ( var0 ) != sizeof ( var1 ) : 
"if slots is not None,",if slots is not var0 ,if slots is not None : ,if slots is not var0 : 
"if second element of source is None,",if second element of source is var0 ,if source [ 1 ] is None : ,if source [ 1 ] is var0 : 
"if source is None,",if source is var0 ,if source is None : ,if source is var0 : 
"add integer 1 to it, substitute the result for space.   if space equals integer 0,","add integer 1 to it, substitute result for space var0 if space equals integer 0,",if space == 0 : ,if space == 0 : 
"if space equals integer 0,","if space equals integer 0,",if space == 0 : ,if space == 0 : 
"if start is greater than upto,",if start is greater var0 var1 ,if start > upto : ,if start > var1 : 
"if status is True,",if status is var0 ,if status : ,if status : 
"if status is not equal to STATUS_OK,",if status is not equal to var0 ,if status != STATUS_OK : ,if status != var0 : 
if statue is not equal to STATUS_OK.,if statue is not equal to var0 ,if status != STATUS_OK : ,if status != var0 : 
if status is not None.,if status is not var0 ,if status is not None : ,if status is not var0 : 
"convert '\n' to a string, if it is contained in value or '\r' converted to an string is contained in value,","convert var0 to string, if it is contained in value or var1 converted to string is contained in value,",if str ( '\n' ) in value or str ( '\r' ) in value : ,if str ( '\n' ) in value or str ( '\r' ) in value : 
"convert number to string, if first element equals to sign,","convert number to string, if first element equals to sign,",if str ( number ) [ 0 ] == sign : ,if str ( number ) [ 0 ] == sign : 
if first element of str_number equals a string '-'.,if first element of var0 equals string var2.,if str_number [ 0 ] == '-' : ,if var0 [ 0 ] == var2 : 
"if stream is true,","if stream is true,",if stream : ,if stream : 
"if stream_created is true,","if var0 is true,",if stream_created : ,if var0 : 
"if the boolean return vale of the call to the function is_protected_type(s) and string_onlys are boolean True,",if boolean return vale of call to function is_protected_type(s) and var2 are boolean var4 ,if strings_only and is_protected_type ( s ) : ,if strings_only and var0 ( s ) : 
check if the bytes object containing my_value is packed according to the format string unsigned char is not equal to 0,check if bytes object containing var0 is packed according to format string unsigned char is not equal to 0,"if struct . pack ( 'B' , my_value ) : ","if struct . pack ( 'B' , var0 ) : "
check if the bytes object containing temp xor i are packed according to the format string unsigned char is equal to the variable byte,check if bytes object containing temp xor i are packed according to format string unsigned char is equal to variable byte,"if struct . pack ( 'B' , temp ^ i ) == byte : ","if struct . pack ( 'B' , temp ^ i ) == byte : "
compute temp bitwise xor i then pack the result according to the format string unsigned char then check if the result is equal to the variable byte,compute temp var0 xor i then pack result according to format string unsigned char then check if result is equal to variable byte,"if struct . pack ( 'B' , temp ^ i ) == byte : ","if struct . pack ( 'B' , temp ^ i ) == byte : "
check if the bytes object containing the variable val1 xor i are packed using the parameter 'B' is equal to bad_byte,check if bytes object containing variable var0 xor i are packed using parameter var1 is equal to var2,"if struct . pack ( 'B' , val1 ^ i ) == bad_byte : ","if struct . pack ( var1 , var0 ^ i ) == var2 : "
check if the bytes object containing val1 xor i are packed according to the format string unsigned char is equal to the variable byte,check if bytes object containing var0 xor i are packed according to format string unsigned char is equal to variable byte,"if struct . pack ( 'B' , val1 ^ i ) == byte : ","if struct . pack ( 'B' , var0 ^ i ) == byte : "
check if the bytes object containing val1 bitwise xor z are packed according to the format string unsigned char is equal to the variable bad_byte,check if bytes object containing var0 var1 xor z are packed according to format string unsigned char is equal to variable var2,"if struct . pack ( 'B' , val1 ^ z ) == bad_byte : ","if struct . pack ( 'B' , var0 ^ z ) == var2 : "
check if the bytes object containing val1 bitwise xor z are packed according to the format string unsigned char is not equal to 0,check if bytes object containing var0 var1 xor z are packed according to format string unsigned char is not equal to 0,"if struct . pack ( 'B' , val1 ^ z ) : ","if struct . pack ( 'B' , var0 ^ z ) : "
check if the bytes object containing the variable z is packed according to the format string unsigned char is not equal to 0,check if bytes object containing variable z is packed according to format string unsigned char is not equal to 0,"if struct . pack ( 'B' , z ) : ","if struct . pack ( 'B' , z ) : "
check if the bytes object containing z is packed according to the format string unsigned char is not equal to 0,check if bytes object containing z is packed according to format string unsigned char is not equal to 0,"if struct . pack ( 'B' , z ) : ","if struct . pack ( 'B' , z ) : "
"if sub_tried is not None,",if var0 is not var2 ,if sub_tried is not None : ,if var0 is not var2 : 
if subcommand equals to a string 'help'.,if var0 equals to string var1.,if subcommand == 'help' : ,if var0 == var1 : 
"if subcommand is contained in no_settings_commands,",if var0 is contained in var1 ,if subcommand in no_settings_commands : ,if var0 in var1 : 
"if subcommand_cls.use_argparse is true,","if var0 var2 is true,",if subcommand_cls . use_argparse : ,if var0 . var2 : 
"if i-th element of subject is '""' character or ""'"" character,","if i-th element of subject is var0 character or var1 character,","if subject [ i ] in ( ''' , ''' ) : ","if subject [ i ] in ( ''', ''' ) : "
"where '%s' is replaced with subject.   if i-th element of subject is '""' character or ""'"" character,","var0 var1 is replaced with subject var2 if i-th element of subject is var3 character or var4 character,","if subject [ i ] in ( ''' , ''' ) : ","if subject [ i ] in ( ''', ''' ) : "
"if sublist_item is true,","if var0 is true,",if sublist_item : ,if var0 : 
if submod is true and return value of the function module_has_submodule called with 2 arguments: result of the function:,if submod is true and return value of function var0 called with 2 arguments: result of function:,"if submod and not module_has_submodule ( import_module ( parentmod ) , submod ) : ","if submod and not var0 ( import_module ( parentmod ) , submod ) : "
"append '-' to generic_lang_code, if supported_code starts with it,","append var0 to var1 if var3 starts with it,",if supported_code . startswith ( generic_lang_code + '-' ) : ,if var3 . startswith ( var1 + var0 ) : 
"if sys.platform starts with string 'java',","if var0 starts with string var1,",if sys . platform . startswith ( 'java' ) : ,if var0 . startswith ( var1 ) : 
"if sys.platform starts with a string 'java',","if var0 starts with string var1,",if sys . platform . startswith ( 'java' ) : ,if var0 . startswith ( var1 ) : 
"if sys.platform starts with string 'java',","if var0 starts with string var1,",if sys . platform . startswith ( 'java' ) : ,if var0 . startswith ( var1 ) : 
"if sys.platform equals to string ""win32"",","if var0 equals to string var1,",if sys . platform == 'win32' : ,if var0 == 'win32' : 
"if first two elements of sys.version_info equal to integers 2 ant 7, respectively,","if first two elements of sys var0 equal to integers 2 ant 7, respectively,","if sys . version_info [ : 2 ] == ( 2 , 7 ) : ","if sys . var0 [ : 2 ] == ( 2 , 7 ) : "
"if fist and second element of sys.version_info equals to integer 3 and 2, respectively,","if fist and second element of sys var1 equals to integer 3 and 2, respectively,","if sys . version_info [ : 2 ] == ( 3 , 2 ) : ","if sys . var1 [ : 2 ] == ( 3 , 2 ) : "
"if first and second element of sys.version_info are both equal to integer 3,","if first and second element of sys var0 are both equal to integer 3,","if sys . version_info [ : 2 ] >= ( 3 , 3 ) : ","if sys . var0 [ : 2 ] >= ( 3 , 3 ) : "
"if first and second element of sys.version_info are equal to integers 3 and 4, respectively,","if first and second element of sys var0 are equal to integers 3 and 4, respectively,","if sys . version_info [ : 2 ] >= ( 3 , 4 ) : ","if sys . var0 [ : 2 ] >= ( 3 , 4 ) : "
"if second element of sys.version_info is smaller than or equal to integer 1,","if second element of sys var0 is smaller var1 or equal to integer 1,",if sys . version_info [ 1 ] <= 1 : ,if sys . var0 [ 1 ] <= 1 : 
"if sys.version_info is greater than or equal to a tuple with 3 elements: integers 2, 7 and 2, respectively,","if sys var1 is greater var2 or equal to tuple with 3 elements: integers 2, 7 and 2, respectively,","if sys . version_info >= ( 2 , 7 , 2 ) : ","if sys . var1 >= ( 2 , 7 , 2 ) : "
"strip t.contents from the left side of whitespaces, if the result starts with TRANSLATOR_COMMENT_MARK,",strip var0 from left side of var1 if result starts with var2 ,if t . contents . lstrip ( ) . startswith ( TRANSLATOR_COMMENT_MARK ) : ,if var0 . lstrip ( ) . startswith ( var2 ) : 
"if t.token_type is not equal to TOKEN_COMMENT,",if t var1 is not equal to var2 ,if t . token_type != TOKEN_COMMENT : ,if t . var1 != var2 : 
"if t.token_type equals TOKEN_BLOCK,",if t var1 equals var2 ,if t . token_type == TOKEN_BLOCK : ,if t . var1 == var2 : 
"if t.token_type equals TOKEN_BLOCK and t.contents equals 'endcomment',","if t var1 equals var2 and var3 equals var4,",if t . token_type == TOKEN_BLOCK and t . contents == 'endcomment' : ,if t . var1 == var2 and var3 == var4 : 
"if second element of t is boolean True,",if second element of t is boolean var0 ,if t [ 1 ] is True : ,if t [ 1 ] is var0 : 
"if t is contained in self.__dispatch,",if t is contained in var0 ,if t in self . __dispatch : ,if t in var0 : 
"if t is not None,",if t is not var0 ,if t is not None : ,if t is not var0 : 
if t is not None,if t is not var0,if t is not None : ,if t is not var0 : 
"if table_name_filter is not None and table_name_filter is callable object,","if var0 is not var4 and var0 is callable object,",if table_name_filter is not None and callable ( table_name_filter ) : ,if var0 is not var4 and callable ( var0 ) : 
"if tablename is contained in return value of the method connection.introspection.table_names,",if var0 is contained in return value of method connection.introspection var2 ,if tablename in connection . introspection . table_names ( ) : ,if var0 in connection . introspection . var2 ( ) : 
"convert tag to lowercase if it is not equal to self.cdata_tag,",convert tag to lowercase if it is not equal to self var1 ,if tag . lower ( ) != self . cdata_tag : ,if tag . lower ( ) != self . var1 : 
"if tag is contained in self.CDATA_CONTENT_ELEMENTS,",if tag is contained in self var0 ,if tag in self . CDATA_CONTENT_ELEMENTS : ,if tag in self . var0 : 
"if tag is not contained in TemplateTagNode.mapping,","if tag is not contained in var0 mapping,",if tag not in TemplateTagNode . mapping : ,if tag not in var0 . mapping : 
"if tags exists and if all elements in the return value of the method checks.tag_exists called with an argument tag,","if tags exists and if all elements in return value of method checks var1 called with argument tag,",if tags and any ( not checks . tag_exists ( tag ) for tag in tags ) : ,if tags and any ( not checks . var1 ( tag ) for tag in tags ) : 
if tags is not None.,if tags is not var0 ,if tags is not None : ,if tags is not var0 : 
"if takes_context is true,","if var0 is true,",if takes_context : ,if var0 : 
"if target is None,",if target is var0 ,if target is None : ,if target is var0 : 
"use it as an argument for the call to the self.style.MIGRATE_LABEL method, use the result of the previous method as an argument for the call to the self.stdout.write method.   if target_app_labels_only is true,","use it as argument for call to var0 var1 method, use result of previous method as argument for call to var2 method var3 if var4 is true,",if target_app_labels_only : ,if var4 : 
"if element of targets in first row and second column is None,",if element of targets in first row and second column is var0 ,if targets [ 0 ] [ 1 ] is None : ,if targets [ 0 ] [ 1 ] is var0 : 
"if template starts with a string 'file://',","if template starts with string var0,",if template . startswith ( 'file://' ) : ,if template . startswith ( var0 ) : 
"if template is None,",if template is var0 ,if template is None : ,if template is var0 : 
"if template_dirs is true,","if var0 is true,",if template_dirs : ,if var0 : 
"if template_source_loaders is None,",if var0 is var2 ,if template_source_loaders is None : ,if var0 is var2 : 
"if template_tuple is contained in TemplateDoesNotExist,",if var0 is contained in var2 ,if template_tuple is TemplateDoesNotExist : ,if var0 is var2 : 
"if terminal_char is not equal to string ')',","if terminal_char is not equal to string ')',",if terminal_char != ')' : ,if terminal_char != ')' : 
"if termios is true,","if var0 is true,",if termios : ,if var0 : 
"if text ends with truncate,","if text ends with truncate,",if text . endswith ( truncate ) : ,if text . endswith ( truncate ) : 
"if first element of text equals '#',","if first element of text equals var0,",if text [ 0 ] == '#' : ,if text [ 0 ] == var0 : 
if first element of text is contained in 'xX'.,if first element of text is contained in var0.,if text [ 0 ] in 'xX' : ,if text [ 0 ] in var0 : 
"if text is an empty string and length of opts equals integer 1 and first element of opts equals string 'reset',","if text is empty string and length of opts equals integer 1 and first element of opts equals string var0,",if text == '' and len ( opts ) == 1 and opts [ 0 ] == 'reset' : ,if text == '' and len ( opts ) == 1 and opts [ 0 ] == var0 : 
"if this_bases is None,",if var0 is var2 ,if this_bases is None : ,if var0 is var2 : 
"if threading is true,","if threading is true,",if threading : ,if threading : 
"if timeout equals to DEFAULT_TIMEOUT,",if var0 equals to var1 ,if timeout == DEFAULT_TIMEOUT : ,if var0 == var1 : 
"if timeout is greater than integer 2592000,","if var0 is greater var1 integer 2592000,",if timeout > 2592000 : ,if var0 > 2592000 : 
"if timeout is None,",if var0 is var1 ,if timeout is None : ,if var0 is var1 : 
"if timeout is not None,",if var0 is not var1 ,if timeout is not None : ,if var0 is not var1 : 
"call the method timezone.is_aware with an argument expires, if it evaluates to true,","call method timezone var1 with argument expires, if it evaluates to true,",if timezone . is_aware ( expires ) : ,if timezone . var1 ( expires ) : 
"if timezone is None,",if var0 is var1 ,if timezone is None : ,if var0 is var1 : 
"if to is true,","if to is true,",if to : ,if to : 
"if to_lower is true,","if var0 is true,",if to_lower : ,if var0 : 
"if tok.next is true,","if var0 is true,",if tok . next : ,if var0 : 
"if tok starts with ""'"",","if var0 starts with var1,",if tok . startswith ( ''' ) :,if var0.startswith('''):
"if token.contents equals a string 'else',","if var0 equals string var1,",if token . contents == 'else' : ,if var0 == var1 : 
"if token.contents equals string 'else',","if var0 equals string var1,",if token . contents == 'else' : ,if var0 == var1 : 
"if token.contents equals string 'empty',","if var0 equals string var1,",if token . contents == 'empty' : ,if var0 == var1 : 
"if token.token_type equals integer 0,","if token var1 equals integer 0,",if token . token_type == 0 : ,if token . var1 == 0 : 
"if token.token_type equals TOKEN_BLOCK and token.contents equals endtag,",if token var1 equals var2 and var3 equals var4 ,if token . token_type == TOKEN_BLOCK and token . contents == endtag : ,if token . var1 == var2 and var3 == var4 : 
"if token equals a string ""not"" and i incremented by 1 is lesser than l,","if token equals string var0 and i var1 by 1 is lesser var2 l,",if token == 'not' and i + 1 < l and tokens [ i + 1 ] == 'in' : ,if token == 'not' and i + 1 < l and tokens [ i + 1 ] == 'in' : 
"if token is None,",if token is var0 ,if token is None : ,if token is var0 : 
"call the method token_string.find with an argument TRANSLATOR_COMMENT_MARK, if it evaluates to true,","call method var0 find with argument var1 if it evaluates to true,",if token_string . find ( TRANSLATOR_COMMENT_MARK ) : ,if var0 . find ( var1 ) : 
"if token_string starts with VARIABLE_TAG_START,",if var0 starts with var2 ,if token_string . startswith ( VARIABLE_TAG_START ) : ,if var0 . startswith ( var2 ) : 
"if sum of the top and self.orphans is greater or equal to self.count,",if sum of top and var0 is greater or equal to var1 ,if top + self . orphans >= self . count : ,if top + var0 >= var1 : 
"for 'errors', return value of the function force_text with an argument label for 'label', return value of the function six.text_type,   with an argument bf, for 'field', help_text for help_text, html_class_attr for 'html_class_attr' and bf.html_name for 'field_name'.    if top_errors is true,","for var0, return value of function var1 with argument label for var3, return value of function six var5 with argument var8 for var9 var10 for var10 html_class_attr for var18 and var8 var20 for var21 var6 if var24 is true,",if top_errors : ,if var24 : 
if the variable total does not equal 2,if variable total does not equal 2,if total != 2 : ,if total != 2 : 
"call the method transaction.get_autocommit with an argument self.using, if it evaluates to true,","call method transaction var1 with argument var2 if it evaluates to true,",if transaction . get_autocommit ( self . using ) : ,if transaction . var1 ( var2 ) : 
"if transfer_encoding equals a string 'base64',","if var0 equals string var2,",if transfer_encoding == 'base64' : ,if var0 == var2 : 
"if transfer_encoding equals string 'base64',","if var0 equals string var2,",if transfer_encoding == 'base64' : ,if var0 == var2 : 
"if transfer_encoding is not None,",if var0 is not var2 ,if transfer_encoding is not None : ,if var0 is not var2 : 
"if translators_comment_start is not None and lineno is greater than or equal to translators_comment_start,",if var0 is not var3 and var4 is greater var5 or equal to var0 ,if translators_comment_start is not None and lineno >= translators_comment_start : ,if var0 is not var3 and var4 >= var0 : 
"if tried is true,","if tried is true,",if tried : ,if tried : 
"if trim is true,","if trim is true,",if trim : ,if trim : 
"if truncate is None,",if truncate is var0 ,if truncate is None : ,if truncate is var0 : 
if truncate_len equals integer 0.,if var0 equals integer 0.,if truncate_len == 0 : ,if var0 == 0 : 
"if truncate_text is true,","if var0 is true,",if truncate_text : ,if var0 : 
"if ttl is not None,",if var0 is not var1 ,if ttl is not None : ,if var0 is not var1 : 
"if field_type is a tuple,","if var0 is tuple,",if type ( field_type ) is tuple : ,if type ( var0 ) is tuple : 
"if type of result is ConvertingDict, ConvertingList or ConvertingTuple,",if type of result is var0 var1 or var3 ,"if type ( result ) in ( ConvertingDict , ConvertingList , ConvertingTuple ) : ","if type ( result ) in ( var0 , var1 , var3 ) : "
"return the result.   if type of s equals bytes,","return result var0 if type of s equals bytes,",if type ( s ) == bytes : ,if type ( s ) == bytes : 
"if TYPE equals to RAW,",if var0 equals to var1 ,if TYPE == RAW : ,if var0 == var1 : 
"if typed is true,","if typed is true,",if typed : ,if typed : 
"substitute the result for offset.   if first element of tzinfo equals '-',","substitute result for offset var0 if first element of var1 equals var2,",if tzinfo [ 0 ] == '-' : ,if var1 [ 0 ] == var2 : 
"if tzinfo equals a string 'Z',","if var0 equals string var1,",if tzinfo == 'Z' : ,if var0 == var1 : 
"if unhandled_params is true,","if var0 is true,",if unhandled_params : ,if var0 : 
"call the function unicodedata.combining with an argument char, if it evaluates to true,","call function var0 with argument char, if it evaluates to true,",if unicodedata . combining ( char ) : ,if var0 ( char ) : 
"if unpack is true,","if unpack is true,",if unpack : ,if unpack : 
"if unpack_ipv4 is true,","if var0 is true,",if unpack_ipv4 : ,if var0 : 
"with 3 arguments: data, files and return value of the function self.clear_checkbox_name called with an argument name,   evaluates to true,   if upload is true,","with 3 arguments: data, files and return value of function self var1 called with argument name var2 evaluates to true var2 if upload is true,",if upload : ,if upload : 
"if upto is not equal to length of token,","if var0 is not equal to length of token,",if upto != len ( token ) : ,if var0 != len ( token ) : 
if upto is not equal to start.,if var0 is not equal to start.,if upto != start : ,if var0 != start : 
"if url is true,","if url is true,",if url : ,if url : 
"if url ends with '/' character,","if url ends with var0 character,",if url . endswith ( '/' ) : ,if url . endswith ( var0 ) : 
"if url starts with '///',","if url starts with var0,",if url . startswith ( '///' ) : ,if url . startswith ( var0 ) : 
"if urlconf is None,",if var0 is var1 ,if urlconf is None : ,if var0 is var1 : 
"prefix set to None, current_app set to None.   if urlconf is None,",prefix set to var0 var3 set to var0 if var6 is var0 ,if urlconf is None : ,if var6 is var0 : 
"if urlconf_name is true,","if var0 is true,",if urlconf_name : ,if var0 : 
"if use_base_manager is true,","if var0 is true,",if use_base_manager : ,if var0 : 
"if use_func is true,","if var0 is true,",if use_func : ,if var0 : 
"if use_grouping is true,","if var0 is true,",if use_grouping : ,if var0 : 
"if USE_INOTIFY is true,","if var0 is true,",if USE_INOTIFY : ,if var0 : 
"if use_l10n is true, or if use_l10n is None and settings.USE_L10N is true,","if var0 is true, or if var0 is var4 and settings var5 is true,",if use_l10n or ( use_l10n is None and settings . USE_L10N ) : ,if var0 or ( var0 is var4 and settings . var5 ) : 
"if use_l10n is true, or use_l10n is None and settings.USE_L10N is true,","if var0 is true, or var0 is var4 and settings var5 is true,",if use_l10n or ( use_l10n is None and settings . USE_L10N ) : ,if var0 or ( var0 is var4 and settings . var5 ) : 
"if use_natural_keys is true,","if var0 is true,",if use_natural_keys : ,if var0 : 
"if use_reloader is true,","if var0 is true,",if use_reloader : ,if var0 : 
"if used_name is not equal to guessed_filename,",if var0 is not equal to var1 ,if used_name != guessed_filename : ,if var0 != var1 : 
if val equals an empty list.,if var0 equals empty list.,if val == [ ] : ,if var0 == [ ] : 
"if val is None,",if var0 is var1 ,if val is None : ,if var0 is var1 : 
"if val is not None,",if var0 is not var1 ,if val is not None : ,if var0 is not var1 : 
"if value is true,","if value is true,",if value : ,if value : 
"if value,","if value,",if value : ,if value : 
"if value is not equal to an empty string,","if value is not equal to empty string,",if value != '' : ,if value != '' : 
"if value is not equal self.empty_value,",if value is not equal self var1 ,if value != self . empty_value : ,if value != self . var1 : 
"if value is not equal to value or value equals return value of the call to Decimal with argument 'Inf',","if value is not equal to value or value equals return value of call to var0 with argument var1,",if value != value or value == Decimal ( 'Inf' ) or value == Decimal ( '-Inf' ) : ,if value != value or value == var0 ( var1 ) or value == var0 ( '-Inf' ) : 
"if value is Nan, or value is contained in return value of the Decimal called twice with string 'Inf' and with string '-Inf',","if value is var0 or value is contained in return value of var1 called twice with string var2 and with string var3,","if value != value or value in ( Decimal ( 'Inf' ) , Decimal ( '-Inf' ) ) : ","if value != value or value in ( Decimal ( var2 ) , var1 ( '-Inf' ) ) : "
"if value.__traceback__ is not tb,","if var0 is not tb,",if value . __traceback__ is not tb : ,if var0 is not tb : 
"if first and second elements of value are contained in self.empty_values,",if first and second elements of value are contained in self var1 ,if value [ 0 ] in self . empty_values and value [ 1 ] in self . empty_values : ,if value [ 0 ] in self . var1 and value [ 1 ] in self . var1 : 
"if value equals k or text_value equals return value of the function force_text called with argument k,","if value equals k or var0 equals return value of function var1 called with argument k,",if value == k or text_value == force_text ( k ) : ,if value == k or var0 == var1 ( k ) : 
"if value equals k2 or text_value equals return value of the function force_text called with argument k2,","if value equals k2 or var0 equals return value of function var1 called with argument k2,",if value == k2 or text_value == force_text ( k2 ) : ,if value == k2 or var0 == var1 ( k2 ) : 
"if value equals self.empty_value or value is contained in self.empty_values,",if value equals self var1 or value is contained in self var3 ,if value == self . empty_value or value in self . empty_values : ,if value == self . var1 or value in self . var1s : 
"if value is true and character ':' is contained in value,","if value is true and character var0 is contained in value,",if value and ':' in value : ,if value and var0 in value : 
"substitute the result for value under the 'input' key of the substitutions dictionary.   if value is true and value has an attribute 'url',","substitute result for value under var0 key of substitutions dict var1 if value is true and value has attribute var2,","if value and hasattr ( value , 'url' ) : ","if value and hasattr ( value , var2 ) : "
"if value is true and method self.valid_value called with an argument value evaluates to false,","if value is true and method self var1 called with argument value evaluates to false,",if value and not self . valid_value ( value ) : ,if value and not self . var1 ( value ) : 
"if vale is None or an empty string,","if vale is var0 or empty string,","if value in ( None , '' ) : ","if value in ( var0 , '' ) : "
"if value is boolean True, string 'True' or string '1',","if value is boolean True, string var0 or string var1,","if value in ( True , 'True' , '1' ) : ","if value in ( True , var0 , '1' ) : "
"if value is contained in self.empty_values,",if value is contained in self var1 ,if value in self . empty_values : ,if value in self . var1 : 
"if value in self.empty_values,",if value in self var1 ,if value in self . empty_values : ,if value in self . var1 : 
"if value is contained in self.empty_values and self.required is true,","if value is contained in self var1 and var2 is true,",if value in self . empty_values and self . required : ,if value in self . var1 and var2 : 
"if value is None,",if value is var0 ,if value is None : ,if value is var0 : 
"if value is None and attr is contained in declared_fields,",if value is var0 and var1 is contained in var2 ,if value is None and attr in declared_fields : ,if value is var0 and var1 in var2 : 
"if value is not None,",if value is not var0 ,if value is not None : ,if value is not var0 : 
"if value is not contained in result,","if value is not contained in result,",if value is not result : ,if value is not result : 
"if value is boolean True,",if value is boolean var0 ,if value is True : ,if value is var0 : 
"if values is None,",if values is var0 ,if values is None : ,if values is var0 : 
"if var ends with '.',","if var ends with var0,",if var . endswith ( '.' ) : ,if var . endswith ( var0 ) : 
"call the function var.find with an argument: '_' appended to VARIABLE_ATTRIBUTE_SEPARATOR, if the result is greater than integer -1,",call function var0 with argument: var1 appended to var2 if result is greater var4 integer var5 ,if var . find ( VARIABLE_ATTRIBUTE_SEPARATOR + '_' ) > - 1 or var [ 0 ] == '_' : ,if var0 ( var2 + var1 ) > - 1 or var [ 0 ] == var1 : 
"if var starts with '_(' and var ends with ')',","if var starts with '_(' and var ends with ')',",if var . startswith ( '_(' ) and var . endswith ( ')' ) : ,if var . startswith ( '_(' ) and var . endswith ( ')' ) : 
"where '%s' is replaced with first upto elements of token string, token string elements from upto to start index,   and token string elements from start index to the end.   if var_obj is None,","var0 var1 is replaced with first var2 elements of token string, token string elements from var2 to start index var4 and token string elements from start index to end var4 if var6 is var8 ",if var_obj is None : ,if var6 is var8 : 
"if varargs is None,",if var0 is var1 ,if varargs is None : ,if var0 is var1 : 
"if vary_on is None,",if var0 is var2 ,if vary_on is None : ,if var0 is var2 : 
"if verbosity is greater or equal to integer 2,","if verbosity is greater or equal to integer 2,",if verbosity >= 2 : ,if verbosity >= 2 : 
"if fourth element of version equals to string 'alpha' and fight element of version equals to integer 0,","if fourth element of version equals to string var0 and fight element of version equals to integer 0,",if version [ 3 ] == 'alpha' and version [ 4 ] == 0 : ,if version [ 3 ] == var0 and version [ 4 ] == 0 : 
"if version is None,",if version is var0 ,if version is None : ,if version is var0 : 
"if want_unicode is true,","if var0 is true,",if want_unicode : ,if var0 : 
"if weight is greater or equal to integer 6,","if weight is greater or equal to integer 6,",if weight >= 6 : ,if weight >= 6 : 
if whitelist is not None,if var0 is not var1,if whitelist is not None : ,if var0 is not var1 : 
"if widgets is true and f.name is contained in widgets,","if widgets is true and var0 is contained in widgets,",if widgets and f . name in widgets : ,if widgets and var0 in widgets : 
"if widgets is not None,",if widgets is not var0 ,if widgets is not None : ,if widgets is not var0 : 
convert shellcode into a bytearray then check if it is equal to the variable x,convert var0 into var1 then check if it is equal to variable x,if x == bytearray ( shellcode ) : ,if x == var1 ( var0 ) : 
convert shellcode into a bytearray then obtain the element at index n from and check if it is equal to the variable x,convert var0 into var1 then obtain element at index n from and check if it is equal to variable x,if x == bytearray ( shellcode ) [ n ] : ,if x == var1 ( var0 ) [ n ] : 
convert shellcode into a bytearray then obtain the element at index n from and check if it is equivalent to x,convert var0 into var1 then obtain element at index n from and check if it is equivalent to x,if x == bytearray ( shellcode ) [ n ] : ,if x == var1 ( var0 ) [ n ] : 
"convert the variable shellcode into a bytearray object, then obtain the element at index n from the bytearray object and check if it is equal to the variable x","convert variable var0 into var1 object, then obtain element at index n from var1 object and check if it is equal to variable x",if x == bytearray ( shellcode ) [ n ] : ,if x == var1 ( var0 ) [ n ] : 
convert shellcode into a bytearray then obtain the element at index i from the bytearray object and check if it is equal to the variable z,convert var0 into var1 then obtain element at index i from var1 object and check if it is equal to variable z,if x == bytearray ( z ) [ i ] : ,if x == var1 ( z ) [ i ] : 
convert shellcode into a list then obtain the element at index n from it and check if it is equal to the variable x,convert var0 into list then obtain element at index n from it and check if it is equal to variable x,if x == list ( shellcode ) [ n ] : ,if x == list ( var0 ) [ n ] : 
obtain the element at index n from shellcode and check if it is equal to the variable x,obtain element at index n from var0 and check if it is equal to variable x,if x == shellcode [ n ] : ,if x == var0 [ n ] : 
"if y and m and d are all true,","if y and m and d are all true,",if y and m and d : ,if y and m and d : 
"if year is lesser than integer 100,","if year is lesser var0 integer 100,",if year < 100 : ,if year < 100 : 
"if year is lesser than integer 70,","if year is lesser var0 integer 70,",if year < 70 : ,if year < 70 : 
"if years is true,","if years is true,",if years : ,if years : 
if z is equal to a,if z is equal to a,if z == a : ,if z == a : 
if z is True,if z is var0,if z : ,if z : 
"ignore is a lambda function with pattern as an argument, return value is the return value of the function fnmatch.fnmatchcase,","ignore is lambda function with pattern as argument, return value is return value of function var0 ","ignore = lambda pattern : fnmatch . fnmatchcase ( filename , pattern )","ignore = lambda pattern : var0 ( filename , pattern )"
"substitute DEFAULT_DB_ALIAS for db.   remove the value under the 'ignorenonexistent' key from the options dictionary, assign it to the ignore, if the entry doesnt exists,","substitute var0 for db var2 remove value under var4 key from options dict, assign it to ignore, if entry doesnt exists,","ignore = options . pop ( 'ignorenonexistent' , False )","ignore var2 options.var2op(var4,var2False)"
"append list containing 4 elements: 'CVS', '.*', '*~' and '*.pyc', to ignore_patterns.","append list containing 4 elements: var0, var1, var2 and var3, to var5 ","ignore_patterns += [ 'CVS' , '.*' , '*~' , '*.pyc' ]","var5 += [ var0 , '.*' , '*~' , '*var4' ]"
"get the value under the 'ignore_patterns' key of the options dictionary, substitute it for ignore_patterns.","get value under var0 key of options dict, substitute it for ignore_patterns.",ignore_patterns = options . get ( 'ignore_patterns' ),ignore_patterns = options . get ( var0 )
append f.name to ignored list.,append var0 to ignored list.,ignored . append ( f . name ),ignored . append ( var0 )
ignored  is an empty list.,ignored is empty list.,ignored = [ ],ignored = [ ]
"call the method _illegal_formatting.search with an argument fmt, substitute the result for illegal_formatting.",call method var0 with argument var2 substitute result for var1 ,illegal_formatting = _illegal_formatting . search ( fmt ),var1 = var0 ( var2 )
"call the method Image.open with an argument file, on the result call the verify method","call method var0 open with argument file, on result call verify method",Image . open ( file ) . verify ( ),var0 . open ( file ) . verify ( )
"call the function inline_re.match with an argument t.contents, substitute the result for imatch.",call function var0 match with argument var2 substitute result for var3 ,imatch = inline_re . match ( t . contents ),var3 = var0 . match ( var2 )
import module argparse.,import module var0 ,import argparse,import var0
import module argparse,import module var0,import argparse,import var0
import module base64.,import module var0 ,import base64,import var0
import module binascii.,import module var0 ,import binascii,import var0
import bpython.,import var0 ,import bpython,import var0
import bz2.,import var0 ,import bz2,import var0
import module calendar.,import module calendar.,import calendar,import calendar
import module cgi.,import module var0 ,import cgi,import var0
import code.,import code.,import code,import code
import module codecs.,import module var0 ,import codecs,import var0
import module collections.,import module collections.,import collections,import collections
import module contextlib.,import module var0 ,import contextlib,import var0
import module copy.,import module copy.,import copy,import copy
import module datetime.,import module var0 ,import datetime,import var0
import module decimal.,import module decimal.,import decimal,import decimal
import module django.,import module var0 ,import django,import var0
import module django.core.checks.compatibility.django_1_6_0.,import module django.core.checks.compatibility var1 ,import django . core . checks . compatibility . django_1_6_0,import django . core . checks . compatibility . var1
import module django.core.checks.compatibility.django_1_7_0.,import module django.core.checks.compatibility var1 ,import django . core . checks . compatibility . django_1_7_0,import django . core . checks . compatibility . var1
import module django.core.checks.model_checks.,import module django.core.checks var1 ,import django . core . checks . model_checks,import django . core . checks . var1
import dummy_threading as threading.,import var0 as threading.,import dummy_threading as threading,import var0 as threading
import module errno.,import module var0 ,import errno,import var0
import fcntl.,import var0 ,import fcntl,import var0
import flup,import var0,import flup,import var0
import module fnmatch.,import module var0 ,import fnmatch,import var0
import module functools.,import module var0 ,import functools,import var0
import gettext module.,import var0 module.,import gettext,import var0
import module gettext as gettext_module.,import module gettext as var0 ,import gettext as gettext_module,import gettext as var0
import module glob.,import module glob.,import glob,import glob
import module gzip.,import module var0 ,import gzip,import var0
import module hashlib.,import module var0 ,import hashlib,import var0
import hashlib module.,import var0 module.,import hashlib,import var0
import module hmac.,import module var0 ,import hmac,import var0
import imp.,import imp.,import imp,import imp
import module importlib.,import module var0 ,import importlib,import var0
import module inspect.,import module inspect.,import inspect,import inspect
import module io.,import module io.,import io,import io
import io.,import io.,import io,import io
import module itertools.,import module var0 ,import itertools,import var0
import module json.,import module var0 ,import json,import var0
import module keyword.,import module var0 ,import keyword,import var0
import module locale.,import module locale.,import locale,import locale
import module logging.,import module logging.,import logging,import logging
RemovedInDjango19Warning and stacklevel set to integer 2.   import module logging.handlers.,var0 and var1 set to integer 2 var2 import module var3 ,import logging . handlers,import var3
import memcache.,import var0 ,import memcache,import var0
import module mimetypes.,import module var0 ,import mimetypes,import var0
import msvcrt.,import var0 ,import msvcrt,import var0
import module operator.,import module operator.,import operator,import operator
import module opera.,import module opera.,import operator,import operator
import module os.,import module os.,import os,import os
import pickle.,import pickle.,import pickle,import pickle
import module pickle.,import module pickle.,import pickle,import pickle
import module posixpath.,import module var0 ,import posixpath,import var0
import pyinotify module.,import var0 module.,import pyinotify,import var0
import pylibmc.,import var0 ,import pylibmc,import var0
import pytz.,import var0 ,import pytz,import var0
import module random.,import module random.,import random,import random
import module random as random_module.,import module random as var0 ,import random as random_module,import random as var0
import module re.,import module re.,import re,import re
import re module.,import re module.,import re,import re
import readline.,import var0 ,import readline,import var0
import rlcompleter.,import var0 ,import rlcompleter,import var0
import module shutil.,import module var0 ,import shutil,import var0
import module signal.,import module signal.,import signal,import signal
import module smtplib.,import module var0 ,import smtplib,import var0
import module socket.,import module socket.,import socket,import socket
import module ssl.,import module var0 ,import ssl,import var0
import stat.,import var0 ,import stat,import var0
import module stat.,import module var0 ,import stat,import var0
import module sta.,import module var0 ,import stat,import var0t
import StringIO.,import var0 ,import StringIO,import var0
import termios module.,import var0 module.,import termios,import var0
import module threading.,import module threading.,import threading,import threading
import threading module.,import threading module.,import threading,import threading
import threading.,import threading.,import threading,import threading
import module time.,import module time.,import time,import time
import time module.,import time module.,import time,import time
import module time as _time.,import module time as var0 ,import time as _time,import time as var0
import module traceback.,import module var0 ,import traceback,import var0
import module types.,import module types.,import types,import types
import module unicodedata.,import module var0 ,import unicodedata,import var0
import module warnings.,import module warnings.,import warnings,import warnings
import warnings.,import warnings.,import warnings,import warnings
import module yaml.,import module var0 ,import yaml,import var0
import module zipfile.,import module var0 ,import zipfile,import var0
import module zlib.,import module var0 ,import zlib,import var0
call the function import_module with 2 arguments: string .management and app_config.name.,call function var0 with 2 arguments: string var1 and var2 name.,"import_module ( '.management' , app_config . name )","var0 ( 'var1' , var2 . name )"
import module '.management' from the package app_config.name.,import module var0 from package var1 name.,"import_module ( '.management' , app_config . name )","import_module ( var0 , var1 . name )"
"call the function import_module with an argument string '%s.%s', where '%s' is replaced with app_config.name and module_to_search.",call function var0 with argument string var2 var3 var4 is replaced with var5 name and var7 ,"import_module ( '%s.%s' % ( app_config . name , module_to_search ) )","var0 ( var2 % ( var5 . name , var7 ) )"
call the function import_module with an argument app_name.,call function var0 with argument var1 ,import_module ( app_name ),var0 ( var1 )
call the function import_module with an argument project_name.,call function var0 with argument var1 ,import_module ( project_name ),var0 ( var1 )
call the function import_module with an argument templatetag_module.,call function var0 with argument var1 ,import_module ( templatetag_module ),var0 ( var1 )
call the function import_string with argument backend.,call function var0 with argument var1 ,import_string ( backend ),var0 ( var1 )
imported_objects is an empty dictionary.,var0 is empty dict.,imported_objects = { },var0 = { }
substitute __import__ for importer.,substitute var0 for importer.,importer = __import__,importer = var0
"if index is negative inter 3, if is_reversed, substitute it for in_index, if not, in_index is negative integer 2.","if index is negative inter 3, if var0 substitute it for var1 if not var1 is negative integer 2.",in_index = - 3 if is_reversed else - 2,var1 = - 3 if var0 else - 2
in_tag is boolean False.,var0 is boolean var1 ,in_tag = False,var0 = var1
"in_tag is boolean True if in_tag is False, otherwise is boolean False.",var0 is boolean var3 if var0 is var4 otherwise is boolean var4 ,in_tag = not in_tag,var0 = not var0
incomment is boolean False.,var0 is boolean var1 ,incomment = False,var0 = var1
incomment is boolean True.,var0 is boolean var1 ,incomment = True,var0 = var1
"get config dictionary element under 'incremental' key, if it exists substitute it for incremental, if not,","get var0 dict element under var1 key, if it exists substitute it for incremental, if not,","incremental = config . pop ( 'incremental' , False )","incremental = var0 . pop ( var1 , False )"
indent contain tabs number of tab character.,indent contain tabs number of tab character.,indent = '\t' * tabs,indent = '\t' * tabs
"get the value under the 'indent' key of the options dictionary, substitute the result for indent.","get value under var0 key of options dict, substitute result for indent.",indent = options . get ( 'indent' ),indent = options . get ( var0 )
"get the value under the 'indent' key of the self.options dictionary, substitute it for indent.","get value under var0 key of var1 dict, substitute it for indent.",indent = self . options . get ( 'indent' ),indent = var1 . get ( var0 )
"call the method data.find with an argument self._boundary, substitute the result for index.",call method var0 with argument var1 substitute result for index.,index = data . find ( self . _boundary ),index = var0 ( var1 )
"replace '%s' in string ""CREATE %sINDEX %s ON %s (%s);"" with: unique, return value of the function qn called with an argument:","replace var0 in string var1 with: unique, return value of function var6 called with argument:","index_output . append ( 'CREATE %sINDEX %s ON %s (%s);' % ( unique , qn ( '%s_%s' % ( tablename , f . name ) ) , qn ( tablename ) , qn ( f . name ) ) )","index_output . append ( 'var2 %var4 %s var5 %s(%s);' % ( unique , var6 ( '%s_%s' % ( tablename , f . name ) ) , var6 ( tablename ) , var6 ( f . name ) ) )"
index_output is an empty list.,var0 is empty list.,index_output = [ ],var0 = [ ]
"compile a regex from raw string '^\[\s*(\w+)\s*\]\s*', substitute it for INDEX_PATTERN.","compile a regex from raw string '^\[\s*(\w+)\s*\]\s*', substitute it for INDEX_PATTERN.",INDEX_PATTERN = re . compile ( r'^\[\s*(\w+)\s*\]\s*' ),INDEX_PATTERN = re . compile ( r'^\[\s*(\w+)\s*\]\s*' )
"call the connection.creation.sql_indexes_for_model with model and no_style() as arguments, substitute the result for index_squl.","call connection.creation var1 with model and no_style() as arguments, substitute result for var4 ","index_sql = connection . creation . sql_indexes_for_model ( model , no_style ( ) )","index_sql = connection . creation . var1 ( model , var2 ( ) )"
substitute operator.getitem for indexbytes.,substitute var0 for var1 ,indexbytes = operator . getitem,var1 = var0
indexes is an empty dictionary.,indexes is empty dict.,indexes = { },indexes = { }
"call the method connection.introspection.get_relations with 2 arguments cursor, table_name and substitute the result for indexes.",call method connection.introspection var1 with 2 arguments cursor var2 and substitute result for indexes.,"indexes = connection . introspection . get_indexes ( cursor , table_name )","indexes = connection . introspection . get_indexes ( cursor , var2 )"
INFO is integer 20.,INFO is integer 20.,INFO = 20,INFO = 20
"append e to infos list for every e in all_issues, if checks.INFO is lesser or equal to e.level,",append e to infos list for every e in var0 if checks var2 is lesser or equal to var3 ,infos = [ e for e in all_issues if checks . INFO <= e . level < checks . WARNING and not e . is_silenced ( ) ],infos = [ e for e in var0 if checks . var2 <= var3 < checks . WARNING and not e . is_silenced ( ) ]
"get the value 'inhibit_post_migrate' key of the options dictionary, if it exists substitute it for inhibit_post_migrate, otherwise inhibit_post_migrate is boolean False.","get value var0 key of options dict, if it exists substitute it for inhibit_post_migrate, otherwise inhibit_post_migrate is boolean var1 ","inhibit_post_migrate = options . get ( 'inhibit_post_migrate' , False )","inhibit_post_migrate = options . get ( var0 , var1 )"
"join migrations_directory and string ""__init__.py"" into a file path, substitute it for init_path.","join var0 and string var2 into file path, substitute it for var3 ","init_path = os . path . join ( migrations_directory , '__init__.py' )","var3 = os . path . join ( var0 , '__init__.py' )"
"for every x in sequence of integer from integer 0 to length of data, append an empty string to a list, substitute the resulting list for initial.","for every x in sequence of integer from integer 0 to length of data, append empty string to list, substitute resulting list for initial.","initial = [ '' for x in range ( 0 , len ( data ) ) ]","initial = [ '' for x in range ( 0 , len ( data ) ) ]"
initial is an empty list.,initial is empty list.,initial = [ ],initial = [ ]
convert initial into boolean and substitute it for initial.,convert initial into boolean and substitute it for initial.,initial = bool ( initial ),initial = bool ( initial )
initial is boolean False.,initial is boolean var0 ,initial = False,initial = var0
"get the value under the name key of the self.initial dictionary, if it exists substitute it for initial,","get value under name key of var0 dict, if it exists substitute it for initial,","initial = self . initial . get ( name , field . initial )","initial = var0 . get ( name , field . initial )"
"call the method self.widget.decompress with an argument initial, substitute the result for initial.","call method var0 with argument initial, substitute result for initial.",initial = self . widget . decompress ( initial ),initial = var0 ( initial )
INITIAL_FORM_COUNT is a string 'INITIAL_FORMS'.,var0 is string var1.,INITIAL_FORM_COUNT = 'INITIAL_FORMS',var0 = var1
"if self.initial is true, substitute the length of self.initial for initial_forms, if not, initial_forms is integer 0.","if var0 is true, substitute length of var0 for var2 if not var2 is integer 0.",initial_forms = len ( self . initial ) if self . initial else 0,var2 = len ( var0 ) if var0 else 0
"call the method self.initial_form_count, return the result initial_forms.",call method self var1 return result var2 ,initial_forms = self . initial_form_count ( ),var2 = self . var1 ( )
"call the method self.add_initial_prefix with an argument name, substitute the result for initial_prefixed_name.","call method self var1 with argument name, substitute result for var2 ",initial_prefixed_name = self . add_initial_prefix ( name ),var2 = self . var1 ( name )
"for every value in initial call the function force_text with an argument value, add the results into a set, substitute the resulting set for initial_set.","for every value in initial call function var0 with argument value, add results into set, substitute resulting set for var1 ",initial_set = set ( force_text ( value ) for value in initial ),var1 = set ( var0 ( value ) for value in initial )
"initial_set is set created out of return values of the function force_text called with an argument value,","var0 is set created out of return values of function var1 called with argument value,",initial_set = set ( force_text ( value ) for value in self . prepare_value ( initial ) ),var0 = set ( var1 ( value ) for value in self . prepare_value ( initial ) )
"call the function ugettext_lazy with an argument string 'Currently', substitute the result for initial_text.","call function var0 with argument string var2, substitute result for var3 ",initial_text = ugettext_lazy ( 'Currently' ),var3 = var0 ( var2 )
"call the method (hidden_widget.value_from_datadict with 3 arguments: self.data, self.files and initial_prefixed_name,",call method (hidden_widget var2 with 3 arguments: var3 var4 and var5 ,"initial_value = field . to_python ( hidden_widget . value_from_datadict ( self . data , self . files , initial_prefixed_name ) )","initial_value = field . to_python ( var0 . var2 ( var3 , var4 , var5 ) )"
"substitute initial for initial_value, if initial is not None, if not, initial_value is an empty string.",substitute initial for var0 if initial is not var4 if not var0 is empty string.,initial_value = initial if initial is not None else '',var0 = initial if initial is not var4 else ''
"if initial is not None, substitute initial for initial_value, otherwise initial_value is an empty string.",if initial is not var0 substitute initial for var1 otherwise var1 is empty string.,initial_value = initial if initial is not None else '',var1 = initial if initial is not var0 else ''
"call the function initial_value, substitute the result for initial_value.",call function var0 substitute result for var0 ,initial_value = initial_value ( ),var0 = var0 ( )
"get the value under the name key of the self.initial dictionary, if it exists substitute it for initial_value,","get value under name key of var0 dict, if it exists substitute it for var1 ","initial_value = self . initial . get ( name , field . initial )","var1 = var0 . get ( name , field . initial )"
evaluate function Lock() assign the result to initLock.,evaluate function Lock() assign result to var1 ,initLock = Lock ( ),initvar0 = var0 ( )
"call the function re.compile with an argument string ""^\s*trans\s+((?:""[^""]*?"")|(?:'[^']*?'))(\s+.*context\s+((?:""[^""]*?"")|(?:'[^']*?')))?\s*"", substitute the result for inline_re.","call the function re.compile with an argument string ""^\s*trans\s+((?:""[^""]*?"")|(?:'[^']*?'))(\s+.*context\s+((?:""[^""]*?"")|(?:'[^']*?')))?\s*"", substitute the result for inline_re.",inline_re = re . compile ( r'''^\s*trans\s+((?:'[^']*?')|(?:'[^']*?'))(\s+.*context\s+((?:'[^']*?')|(?:'[^']*?')))?\s*''' ),inline_re = re . compile ( r'''^\s*trans\s+((?:'[^']*?')|(?:'[^']*?'))(\s+.*context\s+((?:'[^']*?')|(?:'[^']*?')))?\s*''' )
"call the function digest twice, substitute the results for inner, outer, respectively.","call function digest twice, substitute results for inner, outer, respectively.","inner , outer = digest ( ) , digest ( )","inner , outer = digest ( ) , digest ( )"
"append the result to password.   call the method password.translate with an argument hmac.trans_36, update inner dictionary with the result.",append result to password var0 call method var1 with argument hmac var3 update inner dict with result.,inner . update ( password . translate ( hmac . trans_36 ) ),inner . update ( password . translate ( hmac . var3 ) )
"inner is an instance of NonCapture, created with elements of result from start index to the end.",inner is instance of var0 created with elements of result from start index to end.,inner = NonCapture ( result [ start : ] ),inner = var0 ( result [ start : ] )
extend list inner_args with args.,extend list var0 with args.,inner_args . extend ( args ),var0 . extend ( args )
inner_html is a string '<li>{choice_value}{sub_widgets}</li>'.,inner_html is a string '<li>{choice_value}{sub_widgets}</li>'.,inner_html = '<li>{choice_value}{sub_widgets}</li>',inner_html = '<li>{choice_value}{sub_widgets}</li>'
inner_result and inner_args are empty lists.,var0 and var1 are empty lists.,"inner_result , inner_args = [ ] , [ ]","var0 , var1 = [ ] , [ ]"
extend list inner_result with res.,extend list var0 with res.,inner_result . extend ( res ),var0 . extend ( res )
append child.data to the inner_text list.,append var0 to var1 list.,inner_text . append ( child . data ),var1 . append ( var0 )
"call the function getInnerText with an argument child, use the result as an argument for the call to the method inner_text.extend.","call function var0 with argument child, use result as argument for call to method var1 extend.",inner_text . extend ( getInnerText ( child ) ),var1 . extend ( var0 ( child ) )
inner_text is an empty list.,var0 is empty list.,inner_text = [ ],var0 = [ ]
inplural is boolean False.,var0 is boolean var1 ,inplural = False,var0 = var1
inplural is boolean True.,var0 is boolean var1 ,inplural = True,var0 = var1
"replace '%s' in string '%s_%s' with id_ and i, substitute the result for input_attrs dictionary value under the 'id' key.","replace var0 in string var1 with var3 and i, substitute result for var4 dict value under var6 key.","input_attrs [ 'id' ] = '%s_%s' % ( id_ , i )","var4 [ 'id' ] = var1 % ( var3 , i )"
"unpack dictionary final_attrs, map the values through force_text function with an argument v and convert it to a dictionary, again,","unpack dict var0 map values through var1 function with argument v and convert it to dict, again,","input_attrs = dict ( value = force_text ( v ) , ** final_attrs )","input_attrs = dict ( value = var1 ( v ) , ** var0 )"
"call the function get_format with an argument string 'DATE_INPUT_FORMATS', substitute the first element of the result for input_format.","call function var0 with argument string var2, substitute first element of result for var3 ",input_format = get_format ( 'DATE_INPUT_FORMATS' ) [ 0 ],var3 = var0 ( var2 ) [ 0 ]
"call the method formats.get_format_lazy with an argument string 'DATE_INPUT_FORMATS', substitute the result for input_formats.","call method formats var1 with argument string var2, substitute result for var3 ",input_formats = formats . get_format_lazy ( 'DATE_INPUT_FORMATS' ),var3 = formats . var1 ( var2 )
"call the method formats.get_format_lazy with an argument string 'DATETIME_INPUT_FORMATS', substitute the result for input_formats.","call method formats var1 with argument string var2, substitute result for var3 ",input_formats = formats . get_format_lazy ( 'DATETIME_INPUT_FORMATS' ),var3 = formats . var1 ( var2 )
"call the method formats.get_format_lazy with an argument string 'TIME_INPUT_FORMATS', substitute the result for input_formats.","call method formats var1 with argument string var2, substitute result for var3 ",input_formats = formats . get_format_lazy ( 'TIME_INPUT_FORMATS' ),var3 = formats . var1 ( var2 )
"call the function ugettext_lazy with an argument string 'Change', substitute the result for input_text.","call function var0 with argument string var2, substitute result for var3 ",input_text = ugettext_lazy ( 'Change' ),var3 = var0 ( var2 )
input_type is a string 'checkbox'.,var0 is string var1.,input_type = 'checkbox',var0 = var1
input_type is a string 'email'.,var0 is string var1.,input_type = 'email',var0 = var1
input_type is a string 'file'.,var0 is string var1.,input_type = 'file',var0 = var1
input_type is a string 'hidden'.,var0 is string var1.,input_type = 'hidden',var0 = var1
input_type is a string 'number'.,var0 is string var1.,input_type = 'number',var0 = var1
input_type is a string 'password'.,var0 is string var1.,input_type = 'password',var0 = var1
input_type is a string 'radio'.,var0 is string var1.,input_type = 'radio',var0 = var1
input_type is a string 'text'.,var0 is string var1.,input_type = 'text',var0 = var1
input_type is a string 'url'.,var0 is string var1.,input_type = 'url',var0 = var1
input_type is None.,var0 is var1 ,input_type = None,var0 = var1
"call the function force_text with an argument text, substitute the result for input_val.","call function var0 with argument text, substitute result for var1 ",input_val = force_text ( text ),var1 = var0 ( text )
"call the function format_html with 2 arguments: string '<input{0} />', return value of the function flatatt, called with an argument,","call function var0 with 2 arguments: string '<input{0} />', return value of function var3 called with argument,","inputs . append ( format_html ( '<input{0} />' , flatatt ( input_attrs ) ) )","inputs . append ( var0 ( '<input{0} />' , var3 ( input_attrs ) ) )"
convert 243 into a hexadecimal and store the value in insertByte,convert 243 into hexadecimal and store value in var0,insertByte = hex ( 243 ),var0 = hex ( 243 )
generate a random integer between 1 and 222 then convert the random number into a hexadecimal and store the value in insertByte,generate random integer between 1 and 222 then convert random number into hexadecimal and store value in var0,"insertByte = hex ( random . randint ( 0 , 222 ) )","var0 = hex ( random . randint ( 0 , 222 ) )"
generate a random integer between 1 and 255 then convert the result into a hexadecimal and store the value in insertByte,generate random integer between 1 and 255 then convert result into hexadecimal and store value in var0,"insertByte = hex ( random . randint ( 1 , 255 ) )","var0 = hex ( random . randint ( 1 , 255 ) )"
generate a random number between 1 and 360 then convert the random number into a hexadecimal and store the value in insertByte,generate random number between 1 and 360 then convert random number into hexadecimal and store value in var0,"insertByte = hex ( random . randint ( 1 , 360 ) )","var0 = hex ( random . randint ( 1 , 360 ) )"
generate a random integer between 1 and 255 then store the value in insertByte,generate random integer between 1 and 255 then store value in var0,"insertByte = random . randint ( 1 , 255 )","var0 = random . randint ( 1 , 255 )"
call the method instance.save.,call method var0 ,instance . save ( ),var0 ( )
"call the function construct_instance with 4 arguments form, instance, fields, exclude and substitute the result for instance.","call function var0 with 4 arguments form, instance, fields, exclude and substitute result for instance.","instance = construct_instance ( form , instance , fields , exclude )","instance = var0 ( form , instance , fields , exclude )"
"call the method __new__ from the base class of the class SortedDict, with 3 arguments: cls, unpacked list args,","call method __new__ from base class of class var0 with 3 arguments: cls, unpacked list var1 ","instance = super ( SortedDict , cls ) . __new__ ( cls , * args , ** kwargs )","instance = super ( var0 , cls ) . __new__ ( cls , * var1 , ** kwargs )"
convert value into an integer.,convert value into integer.,int ( value ),int ( value )
substitute str_number and an empty string for int_part and dec_part.,substitute var0 and empty string for var1 and var3 ,"int_part , dec_part = str_number , ''","var1 , var3 = var0 , ''"
"split str_number by '.', substitute the result for int_part and dec_part, respectively.","split var0 by var2, substitute result for var3 and var5 respectively.","int_part , dec_part = str_number . split ( '.' )","var3 , var5 = var0 . split ( var2 )"
"invert the ordering of elements of int_part_gd, substitute it for int_part.",invert ordering of elements of var0 substitute it for var1 ,int_part = int_part_gd [ : : - 1 ],var1 = var0 [ : : - 1 ]
append digit to int_part_gd.,append digit to var0 ,int_part_gd += digit,var0 += digit
increment int_part_gd by thousand_sep.,increment var0 by var1 ,int_part_gd += thousand_sep,var0 += var1
int_part_gd is an empty string.,var0 is empty string.,int_part_gd = '',var0 = ''
substitute chr for int2byte.,substitute var0 for var1 ,int2byte = chr,var1 = var0
"call the method operator.methodcaller with 3 arguments: string 'to_bytes', integer 1 and string 'big', substitute the result for int2byte.","call method var0 with 3 arguments: string var1, integer 1 and string var2, substitute result for var3 ","int2byte = operator . methodcaller ( 'to_bytes' , 1 , 'big' )","var3 = var0 ( var1 , 1 , 'big' )"
integer_types is a tuple with 2 elements int and long.,var0 is tuple with 2 elements var1 and long.,"integer_types = ( int , long )","var0 = var1 , long"
substitute int for integer_types.,substitute int for var0 ,"integer_types = int ,","var0 = int ,"
substitute value under the 'interactive' key of the options dictionary for interactive.,substitute value under var0 key of options dict for interactive.,interactive = options . get ( 'interactive' ),interactive = options . get ( var0 )
"get the value under the key 'interactive' of options dictionary, substitute it for interactive.","get value under key var0 of options dict, substitute it for interactive.",interactive = options . get ( 'interactive' ),interactive = options . get ( var0 )
internal_use_only is boolean False.,var0 is boolean var1 ,internal_use_only = False,var0 = var1
internal_use_only is a boolean False.,var0 is boolean var1 ,internal_use_only = False,var0 = var1
internal_use_only is boolean True.,var0 is boolean var1 ,internal_use_only = True,var0 = var1
intrans is boolean False.,var0 is boolean var1 ,intrans = False,var0 = var1
intrans is boolean True.,var0 is boolean var1 ,intrans = True,var0 = var1
append app_name to the invalid_apps.,append var0 to var1 ,invalid_apps . append ( app_name ),var1 . append ( var0 )
invalid_apps is an empty list.,var0 is empty list.,invalid_apps = [ ],var0 = [ ]
"for every tag in tags, are false,   for every tag in tags, if return value of the method checks.tag_exists called with an argument tag, evaluates to false,","for every tag in tags, are false var0 for every tag in tags, if return value of method checks var2 called with argument tag, evaluates to false,",invalid_tag = next ( tag for tag in tags if not checks . tag_exists ( tag ) ),invalid_tag = next ( tag for tag in tags if not checks . var2 ( tag ) )
"if '%s' is contained in settings.TEMPLATE_STRING_IF_INVALID, invalid_var_format_string is boolean True, otherwise it is False.",if var0 is contained in settings var1 var3 is boolean var5 otherwise it is var6 ,invalid_var_format_string = '%s' in settings . TEMPLATE_STRING_IF_INVALID,var3 = var0 in settings . var1
invalid_var_format_string is None.,var0 is var1 ,invalid_var_format_string = None,var0 = var1
inverse_match is boolean False.,var0 is boolean var1 ,inverse_match = False,var0 = var1
call the function ip.,call function ip.,ip ( ),ip ( )
"call the method literal_match.group with an integer 1, substitute the result for ip_address.","call method var0 group with integer 1, substitute result for var1 ",ip_address = literal_match . group ( 1 ),var1 = var0 . group ( 1 )
"ip_address_validator_map is a dictionary containing 3 initial entries: tuple containing 2 elements: list with an element,  validate_ipv46_address and return value of the function _ with an argument string 'Enter a valid IPv4 or IPv6 address.' for 'both',","var0 is dict containing 3 initial entries: tuple containing 2 elements: list with element var2 and return value of function var1 with argument string var4 for var5,","ip_address_validator_map = { 'both' : ( [ validate_ipv46_address ] , _ ( 'Enter a valid IPv4 or IPv6 address.' ) ) , 'ipv4' : ( [ validate_ipv4_address ] , _ ( 'Enter a valid IPv4 address.' ) ) , 'ipv6' : ( [ validate_ipv6_address ] , _ ( 'Enter a valid IPv6 address.' ) ) , }","var0 = { 'both' : ( [ var2 ] , var1 ( var4 ) ) , 'ipv4' : ( [ validate_ipv4_address ] , var1 ( 'Enter a valid IPv4 address.' ) ) , 'ipv6' : ( [ validate_ipv6_address ] , var1 ( 'Enter a valid IPv6 address.' ) ) }"
"call the function _explode_shorthand_ip_string with an argument ip_str, substitute the result for ip_str.",call function var0 with argument var1 substitute result for var1 ,ip_str = _explode_shorthand_ip_string ( ip_str ),var1 = var0 ( var1 )
"call the function _explode_shorthand_ip_string with an argument ip_str, substitute the result for ip_str.",call function var0 with argument var1 substitute result for var1 ,ip_str = _sanitize_ipv4_mapping ( ip_str ),var1 = _sanitize_ipv4_mapping ( var1 )
"ipv4_address is a string ""%d.%d.%d.%d"" formated with first 2 elements of seventh element of hextets converted into hexadecimal number,","var0 is string var1 formated with first 2 elements of seventh element of var2 converted into hexadecimal number,","ipv4_address = '%d.%d.%d.%d' % ( int ( hextets [ 6 ] [ 0 : 2 ] , 16 ) , int ( hextets [ 6 ] [ 2 : 4 ] , 16 ) , int ( hextets [ 7 ] [ 0 : 2 ] , 16 ) , int ( hextets [ 7 ] [ 2 : 4 ] , 16 ) , )","var0 = '%d.%d.%d.%d' % ( int ( var2 [ 6 ] [ 0 : 2 ] , 16 ) , int ( var2 [ 6 ] [ 2 : 4 ] , 16 ) , int ( var2 [ 7 ] [ 0 : 2 ] , 16 ) , int ( var2 [ 7 ] [ 2 : 4 ] , 16 ) )"
"_ with an argument string ""Enter a valid 'slug' consisting of letters, numbers, underscores or hyphens."",   and string 'invalid'.   call the re.compile function with an argument raw string '^(25[0-5]|2[0-4]\d|[0-1]?\d?\d)(\.(25[0-5]|2[0-4]\d|[0-1]?\d?\d)){3}$',","_ with an argument string ""Enter a valid 'slug' consisting of letters, numbers, underscores or hyphens."",   and string 'invalid'.   call the re.compile function with an argument raw string '^(25[0-5]|2[0-4]\d|[0-1]?\d?\d)(\.(25[0-5]|2[0-4]\d|[0-1]?\d?\d)){3}$',",ipv4_re = re . compile ( r'^(25[0-5]|2[0-4]\d|[0-1]?\d?\d)(\.(25[0-5]|2[0-4]\d|[0-1]?\d?\d)){3}$' ),ipv4_re = re . compile ( r'^(25[0-5]|2[0-4]\d|[0-1]?\d?\d)(\.(25[0-5]|2[0-4]\d|[0-1]?\d?\d)){3}$' )
"call the function _unpack_ipv4 with an argument ip_str, substitute the result for ipv4_unpacked.",call function var0 with argument var1 substitute result for var2 ,ipv4_unpacked = _unpack_ipv4 ( ip_str ),var2 = var0 ( var1 )
"or string 'ANICON' is in os.environ, substitute the evaluated boolean for supported_platform.   if sys.stdout has an attribute named 'isatty' and call to the sys.stdout.isatty returns boolean True, substitute True for is_a_tty.",or string var0 is in var1 substitute evaluated boolean for var2 if var5 has attribute named var6 and call to var5 isatty returns boolean var9 substitute var9 for var11 ,"is_a_tty = hasattr ( sys . stdout , 'isatty' ) and sys . stdout . isatty ( )","var11 = hasattr ( var5 , var6 ) and var5 . isatty ( )"
"if eather of settings.USE_I18N or settings.USE_L10N is True, set is_accept_language_redundant to True.",if var0 of settings var1 or settings var2 is var4 set var6 to var4 ,is_accept_language_redundant = settings . USE_I18N or settings . USE_L10N,var6 = settings . var1 or settings . var2
is_compressed is boolean False.,var0 is boolean var1 ,is_compressed = False,var0 = var1
is_compressed is boolean True.,var0 is boolean var1 ,is_compressed = True,var0 = var1
"if dt is None, is_dst is boolean False, otherwise call the method _isdst with an argument dt, substitute the result for is_dst.",if var0 is var2 var3 is boolean var7 otherwise call method var8 with argument var0 substitute result for var3 ,is_dst = False if dt is None else self . _isdst ( dt ),var3 = var7 if var0 is var2 else self . var8 ( var0 )
"if dt is None is_dst is boolean False, otherwise call the method self._isdst with an argument dt, substitute the result for is_dst.",if var0 is var2 var3 is boolean var7 otherwise call method var8 with argument var0 substitute result for var3 ,is_dst = False if dt is None else self . _isdst ( dt ),var3 = var7 if var0 is var2 else var8 ( var0 )
is_localized is boolean False.,var0 is boolean var1 ,is_localized = False,var0 = var1
"if i is contained in relations, is_relation is boolean True, otherwise is_relation is boolean False.",if i is contained in relations var0 is boolean var4 otherwise var0 is boolean var5 ,is_relation = i in relations,var0 = i in relations
is_required is boolean False.,var0 is boolean var1 ,is_required = False,var0 = var1
where '%s' is replaced with token.contents.   assign the string 'reversed' to is_reversed and bits last elements.,var0 var1 is replaced with var2 assign string var4 to var5 and bits last elements.,is_reversed = bits [ - 1 ] == 'reversed',var5 = bits [ - 1 ] == var4
"if file_ext is contained in command.extensions, is_templatized is boolean True, otherwise it is boolean False.",if var0 is contained in var2 var3 is boolean var5 otherwise it is boolean var6 ,is_templatized = file_ext in command . extensions,var3 = var0 in var2
is_templatized is boolean True.,var0 is boolean var1 ,is_templatized = True,var0 = var1
is_usable is boolean False.,var0 is boolean var1 ,is_usable = False,var0 = var1
"if resource_string is not None, is_usable is boolean True, otherwise is_usable is boolean False.",if var0 is not var2 var3 is boolean var7 otherwise var3 is boolean var8 ,is_usable = resource_string is not None,var3 = var0 is not var2
is_usable is boolean True.,var0 is boolean var1 ,is_usable = True,var0 = var1
"define lambda function that returns self.file.isatty field, use it as an argument for property function, put the result in isatty.","define lambda function var0 returns self.file var1 field, use it as argument for property function, put result in var1 ",isatty = property ( lambda self : self . file . isatty ),var1 = property ( lambda self : self . file . var1 )
"ISO_8859_1 is a string 'iso-8859-1', UTF_8 is a string 'utf-8'.",var0 is string var1 var2 is string var4.,"ISO_8859_1 , UTF_8 = str ( 'iso-8859-1' ) , str ( 'utf-8' )","var0 , var2 = str ( var1 ) , str ( 'utf-8' )"
"ISO_INPUT_FORMATS is a dictionary with 3 entries: tuple with an element string '%Y-%m-%d' for 'DATE_INPUT_FORMATS',","var0 is dict with 3 entries: tuple with element string var1 for var2,","ISO_INPUT_FORMATS = { 'DATE_INPUT_FORMATS' : ( '%Y-%m-%d' , ) , 'TIME_INPUT_FORMATS' : ( '%H:%M:%S' , '%H:%M:%S.%f' , '%H:%M' ) , 'DATETIME_INPUT_FORMATS' : ( '%Y-%m-%d %H:%M:%S' , '%Y-%m-%d %H:%M:%S.%f' , '%Y-%m-%d %H:%M' , '%Y-%m-%d' ) , }","var0 = { 'DATE_INPUT_FORMATS' : ( var1 , ) , 'TIME_INPUT_FORMATS' : ( '%H:%M:%S' , '%H:%M:%S.%f' , '%H:%M' ) , 'DATETIME_INPUT_FORMATS' : ( '%Y-%m-%d %H:%M:%S' , '%Y-%m-%d %H:%M:%S.%f' , '%Y-%m-%d %H:%M' , var1 ) }"
"get the value under the key 'only' of the options dictionary, if it exists substitute the result for isolated_context,","get value under key var0 of options dict, if it exists substitute result for var1 ","isolated_context = options . get ( 'only' , False )","var1 = options . get ( var0 , False )"
"call the function convert_old_style_list with an argument sublist, substitute the result for item and old_style_list.",call function var0 with argument var2 substitute result for item and var1 ,"item , old_style_list = convert_old_style_list ( sublist )","item , var1 = var0 ( var2 )"
"result of the function iri_to_uri called with an argument link for 'link',   result of the function to_unicode called with an argument description for 'description',   result of the function to_unicode called with an argument author_email for 'author_email',   result of the function to_unicode called with an argument author_name for 'author_name',   result of the function iri_to_uri called with an author_link link for 'author_link', pubdate for 'pubdate',   updateddate for 'updateddate', result of the function to_unicode called with an comments author_name for 'comments',   result of the function to_unicode called with an argument unique_id) for 'unique_id)',   unique_id_is_permalink for 'unique_id_is_permalink', enclosure for 'enclosure',    if true, categories is value for 'categories' key, if not, empty tuple is value for 'categories' key,   result of the function to_unicode called with an argument item_copyright for 'item_copyright', ttl for 'ttl'.   update dictionary item with an argument kwargs.","result of function var0 called with argument link for var2 var3 result of function var13 called with argument description for var25 var3 result of function var13 called with argument author_email for var30 var3 result of function var13 called with argument author_name for var37 var3 result of function var0 called with author_link link for var42, pubdate for var45 var3 updateddate for var48, result of function var13 called with comments author_name for var49 var3 result of function var13 called with argument unique_id) for var54 var3 unique_id_is_permalink for var59, enclosure for var60 var3 if true, categories is value for var61 key, if not, empty tuple is value for var61 key var3 result of function var13 called with argument item_copyright for var67, ttl for var70 var3 update dict item with argument var71 ",item . update ( kwargs ),item . update ( var71 )
"item is a dictionary with 15 initial entries: result of the function to_unicode called with an argument title for 'title',","item is dict with 15 initial entries: result of function var0 called with argument title for var2,","item = { 'title' : to_unicode ( title ) , 'link' : iri_to_uri ( link ) , 'description' : to_unicode ( description ) , 'author_email' : to_unicode ( author_email ) , 'author_name' : to_unicode ( author_name ) , 'author_link' : iri_to_uri ( author_link ) , 'pubdate' : pubdate , 'updateddate' : updateddate , 'comments' : to_unicode ( comments ) , 'unique_id' : to_unicode ( unique_id ) , 'unique_id_is_permalink' : unique_id_is_permalink , 'enclosure' : enclosure , 'categories' : categories or ( ) , 'item_copyright' : to_unicode ( item_copyright ) , 'ttl' : ttl , }","item = { var2 : var0 ( title ) , 'link' : iri_to_uri ( link ) , 'description' : var0 ( description ) , 'author_email' : var0 ( author_email ) , 'author_name' : var0 ( author_name ) , 'author_link' : iri_to_uri ( author_link ) , 'pubdate' : pubdate , 'updateddate' : updateddate , 'comments' : var0 ( comments ) , 'unique_id' : var0 ( unique_id ) , 'unique_id_is_permalink' : unique_id_is_permalink , 'enclosure' : enclosure , 'categories' : categories or ( ) , 'item_copyright' : var0 ( item_copyright ) , 'ttl' : ttl }"
"get the value under the date_key key of the item dictionary, substitute it for item_date.","get value under var0 key of item dict, substitute it for var1 ",item_date = item . get ( date_key ),var1 = item . get ( var0 )
substitute _iteritems for items.,substitute var0 for items.,items = _iteritems,items = var0
call the function iter with an argument patterns.,call function var0 with argument patterns.,iter ( patterns ),var0 ( patterns )
"convert second item to an iterable,",convert second item to var0 ,iter ( second_item ),iter ( second_item )
create an iterator out of x.,create var0 out of var1,iter ( x ),iter ( x )
"iterator is an instance of ChunkIter class, created with arguments: stream_or_iterable and integer 16384.","var0 is instance of var1 class, created with arguments: var2 and integer 16384.","iterator = ChunkIter ( stream_or_iterable , 16384 )","var0 = var1 ( var2 , 16384 )"
iterator is iterator created out of stream_or_iterable.,var0 is var0 created out of var2 ,iterator = iter ( stream_or_iterable ),var0 = iter ( var2 )
iterator is None.,var0 is var1 ,iterator = None,var0 = var1
substitute object for Iterator.,substitute object for var0 ,Iterator = object,var0 = object
substitute iter for iterbytes.,substitute var0 for var1 ,iterbytes = iter,var1 = var0
substitute _iteritems for iteritems.,substitute var0 for var1 ,iteritems = _iteritems,var1 = var0
substitute _iterkeys for iterkeys.,substitute var0 for var1 ,iterkeys = _iterkeys,var1 = var0
substitute _iterlists for iterlists.,substitute var0 for var1 ,iterlists = _iterlists,var1 = var0
sum the variables i and magic then store the result in j,sum variables i and magic then store result in j,j = ( i + magic ),j = i + magic
sum the variables i and magic then modulus the result with 2 then store the result in j,sum variables i and magic then modulus result with 2 then store result in j,j = ( i + magic ) % 2,j = ( i + magic ) % 2
sum the variables i and magic then modulus the result with 256 then store the result in j,sum variables i and magic then modulus result with 256 then store result in j,j = ( i + magic ) % 256,j = ( i + magic ) % 256
sum the variables i and z then modulus the result with 250 then store the result in j,sum variables i and z then modulus result with 250 then store result in j,j = ( i + z ) % 250,j = ( i + z ) % 250
"sum day_of_year, result of the subtraction of weekday from integer 7 and subtraction of integer 1 from jan1_weekday.",sum var0 result of subtraction of weekday from integer 7 and subtraction of integer 1 from var1 ,j = day_of_year + ( 7 - weekday ) + ( jan1_weekday - 1 ),j = var0 + ( 7 - weekday ) + ( var1 - 1 )
compute the modulus of the variables magic and 250 then sum the result with i then store the result in j,compute modulus of variables magic and 250 then sum result with i then store result in j,j = i + magic % 250,j = i + magic % 250
modulo the variables magic and 256 then sum the result and i then store the result in j,var0 variables magic and 256 then sum result and i then store result in j,j = i + magic % 256,j = i + magic % 256
"find the ending position of the regular expression match of the object match, substitute the result for j.","find ending position of regular expression match of object match, substitute result for var0",j = match . end ( ),j = match . end ( )
"call the method text.find with 2 arguments: substr and i, substitute the result for j.","call method var0 with 2 arguments: var1 and i, substitute result for var2","j = text . find ( substr , i )","j = var0 ( var1 , i )"
"call the method self.data.replace with 2 arguments: month as integer 1 and day as integer 1, on the result call the method,","call method var0 with 2 arguments: month as integer 1 and day as integer 1, on result call method,","jan1_weekday = self . data . replace ( month = 1 , day = 1 ) . weekday ( ) + 1","jan1_weekday = var0 ( month = 1 , day = 1 ) . weekday ( ) + 1"
"call the function allow_lazy with 2 arguments: javascript_quote and six.text_type, substitute the result for javascript_quote.",call function var0 with 2 arguments: var1 and six var6 substitute result for var1 ,"javascript_quote = allow_lazy ( javascript_quote , six . text_type )","var1 = var0 ( var1 , six . var6 )"
"call the json.dump function with 4 arguments: return value of the method self.get_dump_object called with an argument obj,  self.stream, cls set to DjangoJSONEncoder and unpacked dictionary self.json_kwargs.",call var1 function with 4 arguments: return value of method self var3 called with argument var4 var5 cls set to var6 and unpacked dict self var8var0,"json . dump ( self . get_dump_object ( obj ) , self . stream , cls = DjangoJSONEncoder , ** self . json_kwargs )","var1 ( self . var3 ( var4 ) , var0self . stream , var0cls = var6 , var0 ** var0self . var8 )"
substitute x for k and boolean True for v.,substitute x for k and boolean var0 for var1,"k , v = x , True","k , v = x , var0"
"call the x.split method with arguments: character '=' and integer 1, store the result in k and v, respectively.","call var0 method with arguments: character var1 and integer 1, store result in k and v, respectively.","k , v = x . split ( '=' , 1 )","k , v = var0 ( var1 , 1 )"
"call the function force_bytes with arguments k and self.encoding, substitute the result for k.",call function var0 with arguments k and var1 substitute result for var2,"k = force_bytes ( k , self . encoding )","k = var0 ( k , var1 )"
substitute first element of item for k.,substitute first element of item for var0,k = item [ 0 ],k = item [ 0 ]
"find the ending position of the regular expression match of the object match, substitute the result for k.","find ending position of regular expression match of object match, substitute result for var0",k = m . end ( ),k = m . end ( )
"find the ending position of the regular expression match of the object match, substitute the result for k.","find ending position of regular expression match of object match, substitute result for var0",k = match . end ( ),k = match . end ( )
"called with 2 arguments: value rounded to 1 decimal point and integer 1.   move integer 1 left for 10 bits, substitute the result for KB.","called with 2 arguments: value rounded to 1 decimal point and integer 1 var0 move integer 1 left for 10 bits, substitute result for var1 ",KB = 1 << 10,var1 = 1 << 10
"substitute third and first element of bits for key and value, respectively.","substitute third and first element of bits for key and value, respectively.","key , value = bits [ 2 ] , bits [ 0 ]","key , value = bits [ 2 ] , bits [ 0 ]"
call the method match.groups with 2 arguments: key and value.,call method var0 with 2 arguments: key and value.,"key , value = match . groups ( )","key , value = var0 ( )"
increment key by item.,increment key by item.,key += item,key += item
increment key by kwd_mark.,increment key by var0 ,key += kwd_mark,key += var0
"create a tuple out of types of v, for every k and v in sorted_items, extend key tuple with the result.","create tuple out of types of v, for every k and v in var0 extend key tuple with result.","key += tuple ( type ( v ) for k , v in sorted_items )","key += tuple ( type ( v ) for k , v in var0 )"
"create a tuple out of types of v, for every v in args, extend key tuple with the result.","create tuple out of types of v, for every v in var0 extend key tuple with result.",key += tuple ( type ( v ) for v in args ),key += tuple ( type ( v ) for v in var0 )
"call the function urlquote with argument var for every var in vary_on, join the results into a string separated by ':', substitute it for key.","call function var0 with argument var for every var in var1 join results into string separated by var3, substitute it for key.",key = ':' . join ( urlquote ( var ) for var in vary_on ),key = var3 . join ( var0 ( var ) for var in var1 )
substitute args for key.,substitute var0 for key.,key = args,key = var0
"call the method bytes_to_text with 2 arguments: key and self.encoding, substitute the result for key.",call method var0 with 2 arguments: key and var1 substitute result for key.,"key = bytes_to_text ( key , self . encoding )","key = var0 ( key , var1 )"
"call the method bytes_to_text with an arguments key and self.encoding, substitute the result for key.",call method var0 with arguments key and var1 substitute result for key.,"key = bytes_to_text ( key , self . encoding )","key = var0 ( key , var1 )"
"call the force_bytes function with an argument settings.SECRET_KEY, substitute the result for key.",call var0 function with argument settings var2 substitute result for key.,key = force_bytes ( settings . SECRET_KEY ),key = var0 ( settings . var2 )
"evaluate the function force_str with key as the argument, substitute it for key.","evaluate function var0 with key as argument, substitute it for key.",key = force_str ( key ),key = var0 ( key )
"call the method hashlib.sha1 with an argument secret appended to key_salt, call the method digest on the result, return the result.","call method var0 with argument secret appended to var1 call method digest on result, return result.",key = hashlib . sha1 ( key_salt + secret ) . digest ( ),key = var0 ( var1 + secret ) . digest ( )
"key is a list with elements of list key from length of self.prefixes index to the end,","key is list with elements of list key from length of var0 index to end,",key = key [ len ( self . prefix ) : ],key = key [ len ( self . prefix ) : ]
"call the function make_key with 3 arguments: args, kwds and typed, substitute the result for key.","call function var0 with 3 arguments: var1 var2 and typed, substitute result for key.","key = make_key ( args , kwds , typed )","key = var0 ( var1 , var2 , typed )"
"if kwds is true or typed is true, call the function make_key with 3 arguments: args, kwds and typed, substitute the result for key,","if var0 is true or typed is true, call function var2 with 3 arguments: var3 var0 and typed, substitute result for key,","key = make_key ( args , kwds , typed ) if kwds or typed else args","key = var2 ( var3 , var0 , typed ) if var0 or typed else var3"
"pop the first element from plist, convert it to lowercase, call the method decode on it, with string 'ascii' as an argument,","pop first element from var0 convert it to lowercase, call method decode on it, with string var1 as argument,",key = plist . pop ( 0 ) . lower ( ) . decode ( 'ascii' ),key = var0 . pop ( 0 ) . lower ( ) . decode ( var1 )
"call the method self.cache_key with 2 arguments name and dirs, substitute the result for key.",call method self var1 with 2 arguments name and var2 substitute result for key.,"key = self . cache_key ( name , dirs )","key = self . var1 ( name , var2 )"
"get the value under the template_name key of the self.cache_key dictionary, if it exists, substitute it for key,","get value under var0 key of self var1 dict, if it exists, substitute it for key,","key = self . cache_key ( template_name , template_dirs )","key = self . var1 ( var0 , template_dirs )"
"call the method self.make_key Whit key and version set to version as arguments, substitute the result for key.","call method self var0 var1 key and version set to version as arguments, substitute result for key.","key = self . make_key ( key , version = version )","key = self . var0 ( key , version = version )"
"call the method self.make_key with key and version set to version as arguments, substitute the result for key.","call method self var1 with key and version set to version as arguments, substitute result for key.","key = self . make_key ( key , version = version )","key = self . var1 ( key , version = version )"
"call the self.make_key with key and version set to version as arguments, substitute the result for key.","call self var1 with key and version set to version as arguments, substitute result for key.","key = self . make_key ( key , version = version )","key = self . var1 ( key , version = version )"
"call the method self.make_key with key and version set to version as arguments, substitute it for key.","call method self var1 with key and version set to version as arguments, substitute it for key.","key = self . make_key ( key , version = version )","key = self . var1 ( key , version = version )"
"substitute self.to_field_name, if exists, for key, if not substitute string 'pk' for key.","substitute self var1 if exists, for key, if not substitute string var2 for key.",key = self . to_field_name or 'pk',key = self . var1 or var2
"and code set to string 'list.   substitute self.to_field_name, if true, for key, or if not, substitute string 'pk' for key.",and code set to string var0pk' for key.,key = self . to_field_name or 'pk',key = self . to_field_name or 'var1'
substitute settings.CACHE_MIDDLEWARE_KEY_PREFIX for key_prefix.,substitute settings var0 for var1 ,key_prefix = settings . CACHE_MIDDLEWARE_KEY_PREFIX,var1 = settings . var0
"call the function force_bytes with an argument key_salt, substitute the result for key_salt.",call function var0 with argument var1 substitute result for var1 ,key_salt = force_bytes ( key_salt ),var1 = var0 ( var1 )
substitute _iterkeys for keys.,substitute var0 for keys.,keys = _iterkeys,keys = var0
"call the method n.getElementsByTagName with string 'natural' as argument, substitute result for keys.","call method n var1 with string var2 as argument, substitute result for keys.",keys = n . getElementsByTagName ( 'natural' ),keys = n . var1 ( var2 )
"call the method node.getElementsByTagName with the argument string 'natural', substitute the result for keys.","call method node var1 with argument string var2, substitute result for keys.",keys = node . getElementsByTagName ( 'natural' ),keys = node . var1 ( var2 )
"and obj.__class__.__name__, first element of obj._constructor_args and second element of obj._constructor_args.   klass.__new__ is a static method of the function __new__.",and var0 first element of var1 and second element of var1 var4 is static method of function __new__.,klass . __new__ = staticmethod ( __new__ ),var4 = staticmethod ( __new__ )
"define lambda function with self class instance as the argument, lambda function body encapsulates the call to the method,","define lambda function with self class instance as argument, lambda function body encapsulates call to method,",klass . __str__ = lambda self : self . __unicode__ ( ) . encode ( 'utf-8' ),klass . __str__ = lambda self : self . __unicode__ ( ) . encode ( 'utf-8' )
"to %s because it doesn't define __str__()., replace %s with string value of klass.__name__.   substitute __str__ filed of klass for __unicode__ field of klass.","to var0 var2 it doesn't define __str__()., replace var0 with string value of var6 substitute var4 filed of var7 for var10 field of var7 ",klass . __unicode__ = klass . __str__,var7 . var10 = var7 . var4
substitute deconstruct for klass.deconstruct.,substitute deconstruct for var0 ,klass . deconstruct = deconstruct,var0 = deconstruct
"call the method find_indentation with an argument node, append the result to newline, substitute the result for klass.prefix.","call method var0 with argument node, append result to var1 substitute result for var2 ",klass . prefix = '\n' + find_indentation ( node ),var2 = '\n' + var0 ( node )
substitute app_name for klass.,substitute var0 for var1 ,klass = app_name,var1 = var0
"call the function import_string with backend if exists or settings.EMAIL_BACKEND if not, store the result into klass.","call function var0 with var2 if exists or settings var3 if not, store result into var4 ",klass = import_string ( backend or settings . EMAIL_BACKEND ),var4 = var0 ( var2 or settings . var3 )
"call the function load_command_class with arguments app_name and subcommand, substitute the result for klass.",call function var0 with arguments var1 and var3 substitute result for var4 ,"klass = load_command_class ( app_name , subcommand )","var4 = var0 ( var1 , var3 )"
"call the method node.clone, substitute the result for klass.",call method var0 substitute result for var1 ,klass = node . clone ( ),var1 = var0 ( )
"remove config dictionary element under 'class' key, use it as an argument for the call to the method self.resolve,","remove var0 dict element under var1 key, use it as argument for call to method var2 ",klass = self . resolve ( config . pop ( 'class' ) ),klass = var2 ( var0 . pop ( var1 ) )
use the result as an argument for the call to the method final_output.extend.   add model to known_models set.,use result as argument for call to method var0 extend var2 add model to var3 set.,known_models . add ( model ),var3 . add ( model )
"table2model with an argument table_name.   call the function table2model with an argument table_name, append the result to known_models.",var0 with argument var2 call function var0 with argument var2 append result to var5 ,known_models . append ( table2model ( table_name ) ),var5 . append ( var0 ( var2 ) )
known_models is an empty list.,var0 is empty list.,known_models = [ ],var0 = [ ]
"if model is not contained in app_models for every model in return value of the connection.introspection.installed_models function return value,","if model is not contained in var0 for every model in return value of connection.introspection var2 function return value,",known_models = set ( model for model in connection . introspection . installed_models ( tables ) if model not in app_models ),known_models = set ( model for model in connection . introspection . var2 ( tables ) if model not in var0 )
"extend list kw with a list with 5 elements: d.hour, d.minute, d.second, d.microsecond and d.tzinfo.",extend list kw with list with 5 elements: var0 var1 var2 var3 and var4 ,"kw . extend ( [ d . hour , d . minute , d . second , d . microsecond , d . tzinfo ] )","kw . extend ( [ var0 , var1 , var2 , var3 , var4 ] )"
"left justify value under the 'microsecond' key of the kw dictionary, in the field of width 6, fill the rest with '0',","left justify value under var0 key of kw dict, in field of width 6, fill rest with var1,","kw [ 'microsecond' ] = kw [ 'microsecond' ] . ljust ( 6 , '0' )","kw [ var0 ] = kw [ var0 ] . ljust ( 6 , '0' )"
"called with an argument kw, only if v is not None, substitute the result for kw.   substitute tzinfo for value under the 'tzinfo' key of the kw dictionary.","called with argument kw, only if v is not var0 substitute result for kw var1 substitute tzinfo for value under var2 key of kw dict.",kw [ 'tzinfo' ] = tzinfo,kw [ var2 ] = tzinfo
"kw is a list with 3 elements: d.year, d.month and d.day.",kw is list with 3 elements: var0 var1 and var2 ,"kw = [ d . year , d . month , d . day ]","kw = [ var0 , var1 , var2 ]"
"substitute the result for value under the 'microsecond' key of the kw dictionary.   update a dictionary with an entry v converted to an integer for k, for every k and v in result of the function six.iteritems,","substitute result for value under var0 key of kw dict var1 update dict with entry v converted to integer for k, for every k and v in result of function var2 ","kw = dict ( ( k , int ( v ) ) for k , v in six . iteritems ( kw ) if v is not None )","kw = dict ( ( k , int ( v ) ) for k , v in var2 ( kw ) if v is not None )"
"update a dictionary with an entry v converted to an integer for k, for every k and v in result of the function six.iteritems,","update dict with entry v converted to integer for k, for every k and v in result of function var0 ","kw = dict ( ( k , int ( v ) ) for k , v in six . iteritems ( kw ) if v is not None )","kw = dict ( ( k , int ( v ) ) for k , v in var0 ( kw ) if v is not None )"
"call the method match.groupdict, use the result as an argument for the call to the function six.iteritems,",call method var0 use result as argument for call to function var1 ,"kw = dict ( ( k , int ( v ) ) for k , v in six . iteritems ( match . groupdict ( ) ) )","kw = dict ( ( k , int ( v ) ) for k , v in var1 ( match . groupdict ( ) ) )"
"call the method match.groupdict, substitute the result for kw.",call method var0 substitute result for kw.,kw = match . groupdict ( ),kw = var0 ( )
call the function,call function,"kwarg = token_kwargs ( [ bit ] , parser )","kwarg = token_kwargs ( [ bit ] , parser )"
"if match is true and call to the method match.group with an argument integer 1 evaluates to true, kwarg_format is boolean True,",if match is true and call to method var0 with argument integer 1 evaluates to true var1 is boolean var3 ,kwarg_format = match and match . group ( 1 ),var1 = match and var0 ( 1 )
"call the function re.compile with an argument raw string ""(?:(\w+)=)?(.+)"", substitute the result for kwarg_re.","call function var0 with argument raw string var1, substitute result for var2 ",kwarg_re = re . compile ( r'(?:(\w+)=)?(.+)' ),var2 = var0 ( '(?:(\\w+)=)?(.+)' )
"if 'content_type' key doesnt exist in kwargs, set its value to 'application/json'.",if var0 key doesnt exist in var1 set its value to var2.,"kwargs . setdefault ( 'content_type' , 'application/json' )","var1 . setdefault ( var0 , 'application/var3' )"
if 'widget' key of the kwargs dictionary doesnt exists assign it widget field of the base class of the IntegerField class value.,if var0 key of var1 dict doesnt exists assign it widget field of base class of var2 class value.,"kwargs . setdefault ( 'widget' , super ( IntegerField , self ) . widget )","var1 . setdefault ( var0 , super ( var2 , self ) . widget )"
call the method kwargs.update with an argument self.default_args.,call method var0 with argument self var2 ,kwargs . update ( self . default_args ),var0 ( self . var2 )
substitute error_messages for value under the ''error_messages' key of the kwargs dictionary.,substitute var0 for value under var4 error_messages' key of var5 dict.,kwargs [ 'error_messages' ] = error_messages,var5 [ 'var0' ] = var0
substitute value under the f.name key of the error_messages dictionary for value under the 'error_messages' key of kwargs dictionary.,substitute value under var0 key of error_messages dict for value under var1 key of var2 dict.,kwargs [ 'error_messages' ] = error_messages [ f . name ],var2 [ var1 ] = error_messages [ var0 ]
substitute value under the f.name key of the help_texts dictionary for value under the 'help_text' key of kwargs dictionary.,substitute value under var0 key of var1 dict for value under var3 key of var4 dict.,kwargs [ 'help_text' ] = help_texts [ f . name ],var4 [ var3 ] = var1 [ var0 ]
"subtract result of the method self.initial_form_count from i, use the result as an index to get the element from self.initial_extra,","subtract result of method self var1 from i, use result as index to get element from self var3 ",kwargs [ 'initial' ] = self . initial_extra [ i - self . initial_form_count ( ) ],kwargs [ 'initial' ] = self . var3 [ i - self . var1 ( ) ]
"call the method self._existing_object with an argument pk, substitute the result for value under the 'instance' key of kwargs.",call method var0 with argument var1 substitute result for value under var2 key of var3 ,kwargs [ 'instance' ] = self . _existing_object ( pk ),var3 [ var2 ] = var0 ( var1 )
"call the method self.get_queryset, substitute i-th element of the result for value under the 'instance' key of kwargs dictionary.",call method self var1 substitute i-th element of result for value under var2 key of var3 dict.,kwargs [ 'instance' ] = self . get_queryset ( ) [ i ],var3 [ var2 ] = self . var1 ( ) [ i ]
substitute value under the f.name key of the labels dictionary for value under the 'label' key of kwargs dictionary.,substitute value under var0 key of labels dict for value under var1 key of var2 dict.,kwargs [ 'label' ] = labels [ f . name ],var2 [ var1 ] = labels [ var0 ]
value under 'localize' key of kwargs dictionary is boolean True.,value under var0 key of var1 dict is boolean var2 ,kwargs [ 'localize' ] = True,var1 [ var0 ] = var2
"convert to integer value of dictionary cc under the key 'max-age',","convert to integer value of dict cc under key var0,","kwargs [ 'max_age' ] = min ( int ( cc [ 'max-age' ] ) , kwargs [ 'max_age' ] )","kwargs [ 'max_age' ] = min ( int ( cc [ var0 ] ) , kwargs [ 'max_age' ] )"
substitute number for value under the 'number' key of the kwargs dictionary.,substitute number for value under var0 key of var1 dict.,kwargs [ 'number' ] = number,var1 [ var0 ] = number
substitute number_value for kwargs dictionary value under the 'number' key.,substitute var0 for var2 dict value under var3 key.,kwargs [ 'number' ] = number_value,var2 [ var3 ] = var0
substitute safe for value under the 'safe' key of kwargs dictionary.,substitute safe for value under var0 key of var1 dict.,kwargs [ 'safe' ] = safe,var1 [ var0 ] = safe
set value under the 'stream' key of kwargs dictionary to None.,set value under var0 key of var1 dict to var2 ,kwargs [ 'stream' ] = None,var1 [ var0 ] = var2
"remove element under 'stream' key of kwargs dictionary, substitute the result for value under 'strm' key of kwargs dictionary.","remove element under var0 key of var1 dict, substitute result for value under var3 key of var1 dict.",kwargs [ 'strm' ] = kwargs . pop ( 'stream' ),var1 [ 'strm' ] = var1 . pop ( var0 )
substitute self.fk.rel.field_name for value under the 'to_field' key of the kwargs dictionary.,substitute self.fk.rel var1 for value under var2 key of var3 dict.,kwargs [ 'to_field' ] = self . fk . rel . field_name,var3 [ var2 ] = self . fk . rel . var1
substitute value under the f.name key of the widgets dictionary for value under the 'widget' key of kwargs dictionary.,substitute value under var0 key of widgets dict for value under var1 key of var2 dict.,kwargs [ 'widget' ] = widgets [ f . name ],var2 [ var1 ] = widgets [ var0 ]
"get self.to_field attribute of self.parent_instance object, substitute it for value under the 'initial' key of the kwargs dictionary.","get self var1 attribute of self var3 object, substitute it for value under var4 key of var5 dict.","kwargs [ 'initial' ] = getattr ( self . parent_instance , self . to_field )","var5 [ var4 ] = getattr ( self . var3 , self . var1 )"
substitute self.parent_instance.pk for value under the 'initial' key of the kwargs dictionary.,substitute self var0 pk for value under var1 key of var2 dict.,kwargs [ 'initial' ] = self . parent_instance . pk,var2 [ var1 ] = self . var0 . pk
value under the 'required' key of the kwargs dictionary is boolean False.,value under var0 key of var1 dict is boolean var2 ,kwargs [ 'required' ] = False,var1 [ var0 ] = var2
"call the method parser.compile_filter with an argument value, substitute the result for value under the key key of kwargs dictionary.","call method parser var1 with argument value, substitute result for value under key key of var2 dict.",kwargs [ key ] = parser . compile_filter ( value ),var2 [ key ] = parser . var1 ( value )
"call the method parser.compile_filter with an argument value, substitute the result for value under the name key of kwargs dictionary.","call method parser var1 with argument value, substitute result for value under name key of var2 dict.",kwargs [ name ] = parser . compile_filter ( value ),var2 [ name ] = parser . var1 ( value )
"convert param to a string, use it as a key to get the value from kwargs dictionary, assign it value.","convert var0 to string, use it as key to get value from var1 dict, assign it value.",kwargs [ str ( param ) ] = value,var1 [ str ( var0 ) ] = value
"kwargs is a dictionary with 17 entries: form for 'form', formfield_callback for 'formfield_callback', formset for 'formset',","var0 is dict with 17 entries: form for var1, formfield_callback for var6, formset for var9,","kwargs = { 'form' : form , 'formfield_callback' : formfield_callback , 'formset' : formset , 'extra' : extra , 'can_delete' : can_delete , 'can_order' : can_order , 'fields' : fields , 'exclude' : exclude , 'min_num' : min_num , 'max_num' : max_num , 'widgets' : widgets , 'validate_min' : validate_min , 'validate_max' : validate_max , 'localized_fields' : localized_fields , 'labels' : labels , 'help_texts' : help_texts , 'error_messages' : error_messages , }","var0 = { var1 : form , 'formfield_callback' : formfield_callback , 'formset' : formset , 'extra' : extra , 'can_delete' : can_delete , 'can_order' : can_order , 'fields' : fields , 'exclude' : exclude , 'min_num' : min_num , 'max_num' : max_num , 'widgets' : widgets , 'validate_min' : validate_min , 'validate_max' : validate_max , 'localized_fields' : localized_fields , 'labels' : labels , 'help_texts' : help_texts , 'error_messages' : error_messages }"
"kwargs is a dictionary with an entry: attribute 'label' of the object under the name key of the form.fields dictionary for 'label',","var0 is dict with entry: attribute var1 of object under name key of var3 dict for var1,","kwargs = { 'label' : getattr ( form . fields . get ( name ) , 'label' , capfirst ( self . fk . verbose_name ) ) }","var0 = { var1 : getattr ( var3 . get ( name ) , var1 , capfirst ( self . fk . verbose_name ) ) }"
kwargs is a dictionary with boolean True for 'pk_field'.,var0 is dict with boolean var1 for var2.,kwargs = { 'pk_field' : True },var0 = { var2 : var1 }
"kwargs is an empty dictionary,","var0 is empty dict,",kwargs = { },var0 = { }
kwargs is an empty dictionary.,var0 is empty dict.,kwargs = { },var0 = { }
kwargs is a empty dictionary.,var0 is empty dict.,kwargs = { },var0 = { }
"kwargs is a dictionary with elements: config dictionary element under k key for k, for every k in result of function valid_ident,","var0 is dict with elements: var1 dict element under k key for k, for every k in result of function var2 ","kwargs = dict ( ( k , config [ k ] ) for k in config if valid_ident ( k ) )","var0 = dict ( ( k , var1 [ k ] ) for k in var1 if var2 ( k ) )"
"kwargs is a dictionary created with tuples with 2 elements: k and value under k key of config dictionary,","var0 is dict created with var1 with 2 elements: k and value under k key of var2 dict,","kwargs = dict ( ( k , config [ k ] ) for k in config if valid_ident ( k ) )","var0 = dict ( ( k , var2 [ k ] ) for k in var2 if valid_ident ( k ) )"
"kwargs is an dictionary, populated for every k and v in result of the method self.kwargs.items with:","var0 is dict, populated for every k and v in result of method self var0 items with:","kwargs = dict ( ( smart_text ( k , 'ascii' ) , v . resolve ( context ) ) for k , v in self . kwargs . items ( ) )","var0 = dict ( ( smart_text ( k , 'ascii' ) , v . resolve ( context ) ) for k , v in self . var0 . items ( ) )"
"if args in None of boolean False, substitute it for an empty dictionary.",if var0 in var1 of boolean var2 substitute it for empty dict.,kwargs = kwargs or { },kwvar0 = kwvar0 or { }
"call the method match.groupdict, substitute the result for kwargs.",call method var0 substitute result for var1 ,kwargs = match . groupdict ( ),var1 = var0 ( )
"kwargs_safe is a dictionary created for every k and v in result of the function six.iteritems called with an argument kwargs,",var0 is dict created for every k and v in result of function var2 called with argument var1 ,"kwargs_safe = dict ( ( k , conditional_escape ( v ) ) for ( k , v ) in six . iteritems ( kwargs ) )","var0 = dict ( ( k , conditional_escape ( v ) ) for k , v in var2 ( var1 ) )"
"divide negative dklen with hlen, substitute floored result for l.",divide negative var0 with var1 substitute floored result for var2,l = - ( - dklen // hlen ),l = - ( - var0 // var1 )
"l is lambda function with argument x, that calls the method self.make_key with x and version set to version as arguments.",l is lambda function with argument x var0 calls method self var2 with x and version set to version as arguments.,"l = lambda x : self . make_key ( x , version = version )","l = lambda x : self . var2 ( x , version = version )"
substitute length of tokens for l.,substitute length of tokens for var0,l = len ( tokens ),l = len ( tokens )
label is an empty string.,label is empty string.,label = '',label = ''
label is a string 'label',label is string var0,label = 'label',label = var0
"call the function bf.label_tag with an argument label, if the result is true substitute it for label, otherwise label is an empty string.","call function bf var1 with argument label, if result is true substitute it for label, otherwise label is empty string.",label = bf . label_tag ( label ) or '',label = bf . var1 ( label ) or ''
"call the function force_text with an argument bf.label, use the result as an argument for the call to the function conditional_escape, substitute the result label.",call function var0 with argument var1 use result as argument for call to function var2 substitute result label.,label = conditional_escape ( force_text ( bf . label ) ),label = var2 ( var0 ( var1 ) )
label_for is an empty string.,var0 is empty string.,label_for = '',var0 = ''
"call the function format_html with 2 arguments: string ' for=""{0}""' and self.id_for_label, substitute the result for label_for.","call function var0 with 2 arguments: string ' for=""{0}""' and self var4 substitute result for var5 ","label_for = format_html ( ' for='{0}'' , self . id_for_label )","var5 = var0(' for='{0}'', self.var4)"
"call the method self.handle_label with 2 arguments: label and unpacked dictionary options, substitute the result for label_output.","call method self var1 with 2 arguments: label and unpacked dict options, substitute result for var2 ","label_output = self . handle_label ( label , ** options )","var2 = self . var1 ( label , ** options )"
"if self.field.label_suffix is not None, substitute self.field.label_suffix for label_suffix,",if self.field var2 is not var6 substitute self.field var2 for var2 ,label_suffix = ( self . field . label_suffix if self . field . label_suffix is not None else self . form . label_suffix ),var2 = self . field . var2 if self . field . var2 is not var6 else self . form . var2
"call the function get_language, substitute the result for lang.",call function var0 substitute result for lang.,lang = get_language ( ),lang = var0 ( )
lang is None.,var0 is var1 ,lang = None,var0 = var1
"call the function get_language_from_path with an argument request.path_info, substitute it for lang_code.",call function var0 with argument request var2 substitute it for var3 ,lang_code = get_language_from_path ( request . path_info ),var3 = var0 ( request . var2 )
"call the method regex_match.group with an argument integer 1, substitute the result for lang_code.","call method var0 group with argument integer 1, substitute result for var1 ",lang_code = regex_match . group ( 1 ),var1 = var0 . group ( 1 )
"get the value under the settings.LANGUAGE_COOKIE_NAME key of the request.COOKIES dictionary, substitute it for lang_code.","get value under settings var0 key of request var1 dict, substitute it for var2 ",lang_code = request . COOKIES . get ( settings . LANGUAGE_COOKIE_NAME ),var2 = request . var1 . get ( settings . var0 )
"get the value under the LANGUAGE_SESSION_KEY key of the request.session dictionary, substitute it for lang_code.","get value under var0 key of request.session dict, substitute it for var1 ",lang_code = request . session . get ( LANGUAGE_SESSION_KEY ),var1 = request . session . get ( var0 )
"call the function get_language, substitute the result for language_code.",call function var0 substitute result for var1 ,language_code = get_language ( ),var1 = var0 ( )
"call the method get_language, substitute the result for language_code.",call method var0 substitute result for var1 ,language_code = get_language ( ),var1 = var0 ( )
"substitute the result for language_code_re.   call the function re.compile with an argument raw string '^/([\w-]+)(/|$)', substitute the result for language_code_prefix_re.","substitute the result for language_code_re.   call the function re.compile with an argument raw string '^/([\w-]+)(/|$)', substitute the result for language_code_prefix_re.",language_code_prefix_re = re . compile ( r'^/([\w-]+)(/|$)' ),language_code_prefix_re = re . compile ( r'^/([\w-]+)(/|$)' )
"and re.VERBOSE, substitute the result for accept_language_re.   call the function re.compile with 2 arguments: raw string '^[a-z]{1,8}(?:-[a-z0-9]{1,8})*$' and re.IGNORECASE,","and re var1 substitute result for var2 call function var5 with var0 arguments: raw string '^ [var7]{1,8}(?:- [var8]{1,8})*$' and re var9 ","language_code_re = re . compile ( r'^[a-z]{1,8}(?:-[a-z0-9]{1,8})*$' , re . IGNORECASE )","language_code_re var0 re.var0ompile(var0'^[var7]{var0,var0ar0}(?var0-[var8]{var0,var0ar0})*var0ar0'var0 re.var0ar9)"
"get_language_from_request', 'get_language_info', 'get_language_bidi', 'check_for_language', 'to_locale', 'templatize',   'string_concat', 'gettext', 'gettext_lazy', 'gettext_noop', 'ugettext', 'ugettext_lazy', 'ugettext_noop', 'ngettext', 'ngettext_lazy',   'ungettext', 'ungettext_lazy', 'pgettext', 'pgettext_lazy', 'npgettext', 'npgettext_lazy' and 'LANGUAGE_SESSION_KEY'.   LANGUAGE_SESSION_KEY is an string '_language'.",get_language_from_requestvar2get_language_infovar2get_language_bidivar2check_for_languagevar2to_localevar2templatizevar29string_concatvar2gettextvar2gettext_lazyvar2gettext_noopvar2ugettextvar2ugettext_lazyvar2ugettext_noopvar2ngettextvar2ngettext_lazyvar29ungettextvar2ungettext_lazyvar2pgettextvar2pgettext_lazyvar2npgettextvar2npgettext_lazyvar58LANGUAGE_SESSION_KEYvar63_language'.,LANGUAGE_SESSION_KEY = '_language',var59 = 'var1'
"substitute link for value under the NEXT key of the last dictionary, for value under the PREV key of the root dictionary,","substitute link for value under var0 key of last dict, for value under var1 key of root dict,",last [ NEXT ] = root [ PREV ] = cache [ key ] = link,last [ var0 ] = root [ var1 ] = cache [ key ] = link
substitute link for values under the NEXT key of the last dictionary and PREV key of the root dictionary.,substitute link for values under var0 key of last dict and var1 key of root dict.,last [ NEXT ] = root [ PREV ] = link,last [ var0 ] = root [ var1 ] = link
substitute greater element between integer 0 and end decremented by one for last.,substitute greater element between integer 0 and end var0 by one for last.,"last = max ( 0 , end - 1 )","last = max ( 0 , end - 1 )"
"increment pos by one, substitute the result for last.","increment pos by one, substitute result for last.",last = pos + 1,last = pos + 1
substitute value under the PREV key of the root dictionary for last.,substitute value under var0 key of root dict for last.,last = root [ PREV ],last = root [ var0 ]
"divide self.data.day by 10, substitute reminder of the result for last.","divide var0 by 10, substitute reminder of result for last.",last = self . data . day % 10,last = var0 % 10
substitute elements of self.template_string list from upto index to the end for last_lit.,substitute elements of self var1 list from var2 index to end for var3 ,last_bit = self . template_string [ upto : ],last_bit = self . var1 [ var2 : ]
"format string normal_row with an dictionary containing 5 entries: an empty string for 'errors', empty string for 'label',","format string var0 with dict containing 5 entries: empty string for var2, empty string for var3,","last_row = ( normal_row % { 'errors' : '' , 'label' : '' , 'field' : '' , 'help_text' : '' , 'html_class_attr' : html_class_attr } )","last_row = var0 % { var2 : '' , 'label' : '' , 'field' : '' , 'help_text' : '' , 'html_class_attr' : html_class_attr }"
substitute last element of output for last_row.,substitute last element of output for var0 ,last_row = output [ - 1 ],var0 = output [ - 1 ]
substitute item_date for latest_date.,substitute var0 for var1 ,latest_date = item_date,var1 = var0
latest_date is None.,var0 is var1 ,latest_date = None,var0 = var1
lbp is integer 0.,var0 is integer 0.,lbp = 0,var0 = 0
lbp is an integer 0.,var0 is integer 0.,lbp = 0,var0 = 0
substitute bp for lbp.,substitute var0 for var1 ,lbp = bp,lvar0 = var0
"substitute empty string, word an empty string for lead, middle and trail, respectively.","substitute empty string, word empty string for lead, middle and trail, respectively.","lead , middle , trail = '' , word , ''","lead , middle , trail = '' , word , ''"
set leader to the 1st command-line argument after casting it to an int,set leader to 1st command-line argument after casting it to var0,leader = int ( sys . argv [ 1 ] ),leader = var0 ( sys . argv [ 1 ] )
set leader to the 2nd command-line argument after casting it to an int,set leader to 2nd command-line argument after casting it to var0,leader = int ( sys . argv [ 2 ] ),leader = var0 ( sys . argv [ 2 ] )
set leader to the third command-line argument after casting it to an int,set leader to third command-line argument after casting it to var0,leader = int ( sys . argv [ 3 ] ),leader = var0 ( sys . argv [ 3 ] )
set the variable leader to the 3rd command-line argument after casting it to an int,set variable leader to 3rd command-line argument after casting it to var0,leader = int ( sys . argv [ 3 ] ),leader = var0 ( sys . argv [ 3 ] )
"call the method self.has_leading_dir with an argument namelist, substitute the result for leading.",call method self var1 with argument var2 substitute result for leading.,leading = self . has_leading_dir ( namelist ),leading = self . var1 ( var2 )
"only if member.name is not equal to string 'pax_global_header'.   call the method self.has_leading_dir with an argument list, with elements x.name for every x in members, substitute the result for leading.","only if var0 is not equal to string var1 var2 call method self var4 with argument list, with elements var5 for every x in members, substitute result for leading.",leading = self . has_leading_dir ( x . name for x in members ),leading = self . var4 ( var5 for x in members )
leave_locale_alone is boolean False.,var0 is boolean var1 ,leave_locale_alone = False,var0 = var1
leave_locale_alone is boolean True.,var0 is boolean var1 ,leave_locale_alone = True,var0 = var1
leave_locale_alone is boolean True,var0 is boolean var1,leave_locale_alone = True,var0 = var1
call the method t.led with 2 arguments left and self.,call method var0 with 2 arguments left and self.,"left = t . led ( left , self )","left = var0 ( left , self )"
"call the method t.nud with an argument self, substitute the result for left.","call method var0 with argument self, substitute result for left.",left = t . nud ( self ),left = var0 ( self )
"instantiate class X, get its length.","instantiate class X, get its length.",len ( X ( ) ),len ( X ( ) )
len_item is integer 1.,var0 is integer 1.,len_item = 1,var0 = 1
substitute length of item for len_item.,substitute length of item for var0 ,len_item = len ( item ),var0 = len ( item )
convert the variable shellcode into a bytearray object then compute its length then print it.,convert variable var0 into var1 object then compute its length then print it.,len(bytearray(shellcode))),len(bytearray(var0)))
print the length of the string shellcode,print length of string var0,len ( shellcode ),len ( var0 )
substitute arg converted into an integer for length.,substitute var0 converted into integer for length.,length = int ( arg ),length = int ( var0 )
"convert num to an integer, substitute it for length.","convert var0 to integer, substitute it for length.",length = int ( num ),length = int ( var0 )
"convert num to an integer, substitute the result for length.","convert var0 to integer, substitute result for length.",length = int ( num ),length = int ( var0 )
"store in the variable length_format_0x the count of "","" in format_0x",store in variable var0 count of var4 in var2,"length_format_0x = format_0x . count ( ', ' )","var0 = var2 . count ( ', ' )"
"compute the count of "","" in the variable format_0x and store the outcome in the variable length_format_0x",compute count of var0 in variable var1 and store outcome in variable length_var1,"length_format_0x = format_0x . count ( ', ' )","length_var1 = var1 . count ( ', ' )"
"compute the count of ""a"" in the variable format_0x and store the outcome in the variable length_format_0x",compute count of var0 in variable var1 and store outcome in variable length_var1,length_format_0x = format_0x . count ( 'a' ),length_var1 = var1 . count ( 'a' )
"compute the count of ""z"" in the variable format_0x and store the outcome in the variable length_format_0x",compute count of var0 in variable var1 and store outcome in variable length_var1,length_format_0x = format_0x . count ( 'z' ),length_var1 = var1 . count ( 'z' )
level is an integer 0.,level is integer 0.,level = 0,level = 0
"get value under the 'level' key of the config dictioanry, if it exists substitute it for level, if not level is None.","get value under var0 key of var1 var2 if it exists substitute it for level, if not level is var3 ","level = config . get ( 'level' , None )","level = var1 . get ( var0 , var3 )"
"remove config dictionary element under 'level' key, if it exists substitute it for level, if not, level is None.","remove var0 dict element under var1 key, if it exists substitute it for level, if not, level is var2 ","level = config . pop ( 'level' , None )","level = var0 . pop ( var1 , var2 )"
"get handler_config dictionary element under 'level' key, if it exists substitute it for level, if not, level is None.","get var0 dict element under var2 key, if it exists substitute it for level, if not, level is var3 ","level = handler_config . get ( 'level' , None )","level = var0 . get ( var2 , var3 )"
lexer is an instance of JsLexer class.,var0 is instance of var1 class.,lexer = JsLexer ( ),var0 = var1 ( )
"call the method lexer_class with an arguments template_string and origin, substitute the result for lexer.","call method var0 with arguments var1 and origin, substitute result for lexer.","lexer = lexer_class ( template_string , origin )","lexer = var0 ( var1 , origin )"
substitute DebugLexer and DebugParser for lexer_class and parser_class.,substitute var0 and var1 for var3 and var5 ,"lexer_class , parser_class = DebugLexer , DebugParser","var3 , var5 = var0 , var1"
substitute Lexer and Parser for lexer_class and parser_class.,substitute var0 and var1 for var2 and var4 ,"lexer_class , parser_class = Lexer , Parser","var2 , var4 = var0 , var1"
"call the function get_library with an argument taglib, substitute the result for lib.",call function var0 with argument var1 substitute result for lib.,lib = get_library ( taglib ),lib = var0 ( var1 )
"call the function import_library with an argument taglib_module, substitute the result for lib.",call function var0 with argument var1 substitute result for lib.,lib = import_library ( taglib_module ),lib = var0 ( var1 )
"get the value under the library_name key of the libraries dictionary, if it exists, substitute it for lib, if not, lib is None.","get value under var0 key of libraries dict, if it exists, substitute it for var2 if not var2 is var4 ","lib = libraries . get ( library_name , None )","var2 = var2raries . get ( var0 , var4 )"
substitute lib for value under the library_name key of libraries dictionary.,substitute lib for value under var0 key of libraries dict.,libraries [ library_name ] = lib,libraries [ var0 ] = lib
"return value of the function re.escape called with an argument BLOCK_TAG_START,   return value of the function re.escape called with an argument BLOCK_TAG_END,   return value of the function re.escape called with an argument VARIABLE_TAG_START,   return value of the function re.escape called with an argument VARIABLE_TAG_END,   return value of the function re.escape called with an argument COMMENT_TAG_START,   and return value of the function re.escape called with an argument COMMENT_TAG_END, substitute the result for tag_re.   libraries is an empty dictionary.",return value of function var0 called with argument var6 return value of function var0 called with argument var13 return value of function var0 called with argument var15 return value of function var0 called with argument var17 return value of function var0 called with argument var19 and return value of function var0 called with argument var21 substitute result for var23 libraries is empty dict.,libraries = { },libraries = { }
LIGHT_PALETTE is a string 'light'.,var0 is string var1.,LIGHT_PALETTE = 'light',var0 = var1
substitute formfield.limit_choices_to for limit_choices_to.,substitute formfield var1 for var1 ,limit_choices_to = formfield . limit_choices_to,var1 = formfield . var1
"call the function limit_choices_to, substitute the result for limit_choices_to.",call function var0 substitute result for var0 ,limit_choices_to = limit_choices_to ( ),var0 = var0 ( )
line is an empty string.,line is empty string.,line = '',line = ''
"append newline to plural_form_line, substitute the result for line.",append var0 to var1 substitute result for line.,line = '%s\n' % plural_form_line,line = '%s\n' % var1
increment line by buffer_.,increment line by var0 ,line = buffer_ + line,line = var0 + line
remove all the elements from space index of line.,remove all elements from space index of line.,line = line [ space : ],line = line [ space : ]
"call the sio.readline method, substitute the result for line.","call var0 method, substitute result for line.",line = sio . readline ( ),line = var0 ( )
"call the sio.readline method with size as an argument, substitute the result for line.","call var0 method with size as argument, substitute result for line.",line = sio . readline ( size ),line = var0 ( size )
"call the function allow_lazy with 2 arguments: linebreaks, six.text_type, substitute the result for linebreaks.",call function var0 with 2 arguments: var1 six var3 substitute result for var1 ,"linebreaks = allow_lazy ( linebreaks , six . text_type )","var1 = var0 ( var1 , six . var3 )"
evaluate the self.getpos() and assign the result to the lineno and offset respectfully.,evaluate self.getpos() and assign result to var1 and offset respectfully.,"lineno , offset = self . getpos ( )","var1 , offset = var0 ( )"
increment the lineno by the count of the newlines in self.__starttag_text.,increment var0 by count of var1 in var2 ,lineno = lineno + self . __starttag_text . count ( '\n' ),var0 = var0 + var2 . count ( '\n' )
"call the method lineno_comment_map.setdefault with 2 arguments: t.lineno and an empty list, append t.contents to the result.","call method var0 setdefault with 2 arguments: var2 and empty list, append var3 to result.","lineno_comment_map . setdefault ( t . lineno , [ ] ) . append ( t . contents )","var0 . setdefault ( var2 , [ ] ) . append ( var3 )"
value under the comment_lineno_cache key of the lineno_comment_map dictionary is an empty string.,value under var0 key of var1 dict is empty string.,lineno_comment_map [ comment_lineno_cache ] = [ ],var1 [ var0 ] = [ ]
lineno_comment_map is an dictionary.,var0 is dict.,lineno_comment_map = { },var0 = { }
append line to lines.,append line to lines.,lines . append ( line ),lines . append ( line )
"concatenate string '%0', width and string ""d. %s"", format the previous string with i incremented by 1,","concatenate string var0, width and string var1, format previous string with i var4 by 1,","lines [ i ] = ( '%0' + width + 'd. %s' ) % ( i + 1 , escape ( line ) )","lines [ i ] = ( var0 + width + 'd.var3' ) % ( i + 1 , escape ( line ) )"
"concatenate string '%0', width and string ""d. %s"", format the previous string with i incremented by 1 and line,","concatenate string var0, width and string var1, format previous string with i var4 by 1 and line,","lines [ i ] = ( '%0' + width + 'd. %s' ) % ( i + 1 , line )","lines [ i ] = ( var0 + width + 'd.var3' ) % ( i + 1 , line )"
lines is an empty list.,lines is empty list.,lines = [ ],lines = [ ]
"split value by newline characters, substitute the result for lines.","split value by var0 characters, substitute result for lines.",lines = value . split ( '\n' ),lines = value . split ( '\n' )
substitute root for value under the NEXT key of the link dictionary.,substitute root for value under var0 key of link dict.,link [ NEXT ] = root,link [ var0 ] = root
substitute last for value under the PREV key of the link dictionary.,substitute last for value under var0 key of link dict.,link [ PREV ] = last,link [ var0 ] = last
"link is a list with 4 elements: last, root, key and result.","link is list with 4 elements: last, root, key and result.","link = [ last , root , key , result ]","link = [ last , root , key , result ]"
"call the function cache_get with an argument key, substitute the result for link.","call function var0 with argument key, substitute result for link.",link = cache_get ( key ),link = var0 ( key )
substitute link_prev for value under the PREV key of the link_next dictionary.,substitute var0 for value under var2 key of var3 dict.,link_next [ PREV ] = link_prev,var3 [ var2 ] = var0
"substitute link for link_prev, link_next, key and result, respectively.","substitute link for var0 var1 key and result, respectively.","link_prev , link_next , key , result = link","var0 , var1 , key , result = link"
substitute link_next for value under the NEXT key of the link_prev dictionary.,substitute var0 for value under var2 key of var3 dict.,link_prev [ NEXT ] = link_next,var3 [ var2 ] = var0
"call the function re.compile with raw string '(<a [^>]*?)target=[^\s>]+', substitute the result for link_target_attribute_re.","call the function re.compile with raw string '(<a [^>]*?)target=[^\s>]+', substitute the result for link_target_attribute_re.",link_target_attribute_re = re . compile ( r'(<a [^>]*?)target=[^\s>]+' ),link_target_attribute_re = re . compile ( r'(<a [^>]*?)target=[^\s>]+' )
"for every elt in list_ call the method bytes_to_text with 2 argument: elt and self.encoding, append the result into a list,","for every var0 in var2 call method var3 with 2 argument: var0 and var4 append result into list,","list_ = [ bytes_to_text ( elt , self . encoding ) for elt in list_ ]","var2 = [ var3 ( var0 , var4 ) for var0 in var2 ]"
"call the method __getitem__ from the base class of the class MultiValueDict, with an argument key, substitute the result for list_.","call method var0 from base class of class var1 with argument key, substitute result for var2 ","list_ = super ( MultiValueDict , self ) . __getitem__ ( key )","var2 = super ( var1 , self ) . var0 ( key )"
substitute length of list_ for list_length.,substitute length of list_ for var0 ,list_length = len ( list_ ),var0 = len ( list_ )
substitute _iterlists for lists.,substitute var0 for lists.,lists = _iterlists,lists = var0
Declare an empty bytes literal and store it in lit,Declare empty bytes literal and store it in lit,lit = b'',lit = b''
Declare an empty bytes literal and assign it to the variable lit,Declare empty bytes literal and assign it to variable lit,lit = b'',lit = b''
Declare an empty bytes literal and assign it to lit,Declare empty bytes literal and assign it to lit,lit = b'',lit = b''
Lit is an empty bytes literal,Lit is empty bytes literal,lit = b'',lit = b''
The variable lit is an empty bytes literal,var0 variable lit is empty bytes literal,lit = b'',lit = b''
"evaluate method self.literal_regex.match with an argument domain_part, substitute the result for literal_match.",evaluate method self var1 match with argument var2 substitute result for var4 ,literal_match = self . literal_regex . match ( domain_part ),var4 = self . var1 . match ( var2 )
"and re.IGNORECASE, substitute the result for domain_regex.   call the re.compile function with 2 arguments: raw string '\[([A-f0-9:\.]+)\]$' and re.IGNORECASE, substitute the result for literal_regex.","and re.IGNORECASE, substitute the result for domain_regex.   call the re.compile function with 2 arguments: raw string '\[([A-f0-9:\.]+)\]$' and re.IGNORECASE, substitute the result for literal_regex.","literal_regex = re . compile ( r'\[([A-f0-9:\.]+)\]$' , re . IGNORECASE )","literal_regex = re . compile ( r'\[([A-f0-9:\.]+)\]$' , re . IGNORECASE )"
load_template_source.is_usable is boolean True.,load_template_source var1 is boolean var2 ,load_template_source . is_usable = True,load_template_source . var1 = var2
increment loaded_objects_in_fixture by one.,increment var0 by one.,loaded_objects_in_fixture += 1,var0 += 1
loaded_objects_in_fixture is integer 0.,var0 is integer 0.,loaded_objects_in_fixture = 0,var0 = 0
substitute first element of loader for loader and loader without the first element for args.,substitute first element of loader for loader and loader var0 first element for var1 ,"loader , args = loader [ 0 ] , loader [ 1 : ]","loader , var1 = loader [ 0 ] , loader [ 1 : ]"
"call the function find_template_loader with an argument loader_name, substitute the result for loader.",call function var0 with argument var1 substitute result for loader.,loader = find_template_loader ( loader_name ),loader = var0 ( var1 )
loader is instance of MigrationLoader initialized with connection as an argument.,loader is instance of var0 initialized with connection as argument.,loader = MigrationLoader ( connection ),loader = var0 ( connection )
"loader is an instance of MigrationLoader class, created with an argument connection.","loader is instance of var0 class, created with argument connection.",loader = MigrationLoader ( connection ),loader = var0 ( connection )
"loader is an instance of MigrationLoader class, created with 2 arguments: None and ignore_no_migrations set to boolean True.","loader is instance of var0 class, created with 2 arguments: var1 and var2 set to boolean var4 ","loader = MigrationLoader ( None , ignore_no_migrations = True )","loader = var0 ( var1 , var2 = var4 )"
append loader to loaders.,append loader to loaders.,loaders . append ( loader ),loaders . append ( loader )
loaders is an empty list.,loaders is empty list.,loaders = [ ],loaders = [ ]
"evaluates to true,   split middle into two parts from the right by '@' character, assign the resulting parts to local and domain.","evaluates to true var0 split middle into two parts from right by var1 character, assign resulting parts to local and domain.","local , domain = middle . rsplit ( '@' , 1 )","local , domain = middle . rsplit ( var1 , 1 )"
"call the method self.build_attrs with an argument id set to field modulus id_, substitute the result for local_attrs.",call method self var1 with argument id set to field modulus var2 substitute result for var3 ,local_attrs = self . build_attrs ( id = field % id_ ),var3 = self . var1 ( id = field % var2 )
"get the value under the key 'locale' of the options dictionary, substitute it for locale.","get value under key var0 of options dict, substitute it for locale.",locale = options . get ( 'locale' ),locale = options . get ( var0 )
"get the value under the 'locale' key of the options dictionary, substitute it for locale.","get value under var0 key of options dict, substitute it for locale.",locale = options . get ( 'locale' ),locale = options . get ( var0 )
"call the function to_locale with an argument lang, substitute the result for locale.",call function var0 with argument var1 substitute result for locale.,locale = to_locale ( lang ),locale = var0 ( var1 )
locale_dir is None.,locale_dir is var0 ,locale_dir = None,locale_dir = var0
"called with an argument path,   substitute path for locale_dir.",called with argument path var0 substitute path for var1 ,locale_dir = path,var1 = path
substitute self.default_locale_path for locale_dir.,substitute self var1 for var2 ,locale_dir = self . default_locale_path,var2 = self . var1
"locale_dirs is a list of elements from the list of path names that maths the basedir path with '/*' wild card characters for which call to the os.path.isdir returned true, assign it to locale_dirs.","var0 is list of elements from list of path names var3 maths var4 path with var5 wild card characters for var6 call to var7 returned true, assign it to var0 ","locale_dirs = filter ( os . path . isdir , glob . glob ( '%s/*' % basedir ) )","var0 = filter ( var7 , glob . glob ( '%s/*' % var4 ) )"
"call the function glob.glob with an argument: string '/*' appended to self.default_locale_path converted into a string,","call function var0 with argument: string var1 appended to self var3 converted into string,","locale_dirs = filter ( os . path . isdir , glob . glob ( '%s/*' % self . default_locale_path ) )","locale_dirs = filter ( os . path . isdir , var0 ( '%s/*' % self . var3 ) )"
"join app_config.path and string 'locale' into a file path, substitute it for localedir.","join var0 path and string var2 into file path, substitute it for var3 ","localedir = os . path . join ( app_config . path , 'locale' )","var3 = os . path . join ( var0 . path , var2 )"
"use its __file__ field as an argument for the call to the function upath, substitute the result for settingsfile.   call the function os.path.dirname with an argument settingsfile, join the result an string 'locale' into a file path,","use its var0 field as argument for call to function var1 substitute result for var2 call function os.path.dirname with argument var2 join result string var5 into file path,","localedir = os . path . join ( os . path . dirname ( settingsfile ) , 'locale' )","localedir = os . path . join ( os . path . dirname ( var2 ) , var5 )"
call the method LocaleRegexProvider.__init__ with arguments self and regex.,call method var0 __init__ with arguments self and var2 ,"LocaleRegexProvider . __init__ ( self , regex )","var0 . __init__ ( self , var2 )"
"split locale by '_', append the first element of the result to locales.","split locale by var0, append first element of result to locales.",locales . append ( locale . split ( '_' ) [ 0 ] ),locales . append ( locale . split ( var0 ) [ 0 ] )
locales is a list with an element locale.,locales is list with element locale.,locales = [ locale ],locales = [ locale ]
substitute all_locales for locales.,substitute var0 for locales.,locales = all_locales,locales = var0
"take locale or all_locales, whichever is not empty, respectively, and substitute it for locales.","take locale or var0 var1 is not empty, respectively, and substitute it for locales.",locales = locale or all_locales,locales = locale or var0
"if locale is not false or None, substitute it for locales, otherwise substitute all_locales for locales.","if locale is not false or var0 substitute it for locales, otherwise substitute var1 for locales.",locales = locale or all_locales,locales = locale or var1
locales is relative complement of set exclude in set locales.,locales is relative complement of set exclude in set locales.,locales = set ( locales ) - set ( exclude ),locales = set ( locales ) - set ( exclude )
locales is a difference between the locales and exclude sets.,locales is difference between locales and exclude sets.,locales = set ( locales ) - set ( exclude ),locales = set ( locales ) - set ( exclude )
"get the value under the 'localize' key of the kwargs dictionary, substitute it for localize, if the key doesnt exists, substitute the result for localize.","get value under var0 key of var1 dict, substitute it for localize, if key doesnt exists, substitute result for localize.","localize = kwargs . get ( 'localize' , False )","localize = var1 . get ( var0 , False )"
"call the addr.split method with character '@' and integer 1 as arguments, substitute the result for localpart and domain, respectively.","call var0 method with character var1 and integer 1 as arguments, substitute result for var2 and domain, respectively.","localpart , domain = addr . split ( '@' , 1 )","var2 , domain = var0 ( var1 , 1 )"
"instantiate Header class with localpart and encoding, convert it to a string, substitute the result for localpart.","instantiate var0 class with var1 and encoding, convert it to string, substitute result for var1 ","localpart = str ( Header ( localpart , encoding ) )","var1 = str ( var0 ( var1 , encoding ) )"
"call the method self.get_full_path, append the result to string '//', substitute it for location.","call method self var1 append result to string var2, substitute it for location.",location = '//%s' % self . get_full_path ( ),location = '//%s' % self . var1 ( )
"remove 'LOCATION' key from kwargs dictionary and put it into location, or use an empty string if key doesnt exists.","remove var0 key from var1 dict and put it into location, or use empty string if key doesnt exists.","location = kwargs . pop ( 'LOCATION' , '' )","location = var1 . pop ( var0 , '' )"
"remove 'LOCATION' key from kwargs dictionary and put it into location, or use an empty string if key doesnt exists.","remove var0 key from var1 dict and put it into location, or use empty string if key doesnt exists.","location = params . pop ( 'LOCATION' , '' )","location = params . pop ( var0 , '' )"
substitute the settings.MEDIA_ROOT for location.,substitute settings var0 for location.,location = settings . MEDIA_ROOT,location = settings . var0
"and path with self.path, substitute the result for current_uri.   call the function urljoin with arguments current_uri and location, substitute the result for location.","and path with var0 substitute result for var1 call function var4 with arguments var1 and location, substitute result for location.","location = urljoin ( current_uri , location )","location = var4 ( var1 , location )"
"extend locations with tuple containing dirpath and f, for every f in filenames, only if it ends with string '.po'.","extend locations with tuple containing var0 and f, for every f in filenames, only if it ends with string var1.","locations . extend ( ( dirpath , f ) for f in filenames if f . endswith ( '.po' ) )","locations . extend ( ( var0 , f ) for f in filenames if f . endswith ( var1 ) )"
locations is an empty list.,locations is empty list.,locations = [ ],locations = [ ]
lock is an instance of RLock class.,lock is instance of var0 class.,lock = RLock ( ),lock = var0 ( )
LOCK_EX is a hexadecimal 2.,var0 is hexadecimal 2.,LOCK_EX = 0x2,var0 = 2
substitute fcntl.LOCK_EX for LOCK_EX.,substitute var0 var1 for var1 ,LOCK_EX = fcntl . LOCK_EX,var1 = var0 . var1
"LOCK_EX, LOCK_SH and LOCK_NB are all equal to integer 0.",var0 var1 and var2 are all equal to integer 0.,LOCK_EX = LOCK_SH = LOCK_NB = 0,var0 = var1 = var2 = 0
LOCK_NB is a hexadecimal 1.,var0 is hexadecimal 1.,LOCK_NB = 0x1,var0 = 1
substitute fcntl.LOCK_NB for LOCK_NB.,substitute var0 var1 for var1 ,LOCK_NB = fcntl . LOCK_NB,var1 = var0 . var1
LOCK_SH is a integer 0.,var0 is integer 0.,LOCK_SH = 0,var0 = 0
substitute fcntl.LOCK_SH for LOCK_SH.,substitute var0 var1 for var1 ,LOCK_SH = fcntl . LOCK_SH,var1 = var0 . var1
"LockFileEx.argtypes is a list containing 6 elements: HANDLE, DWORD, DWORD, DWORD, DWORD and LPOVERLAPPED.",var0 is list containing 6 elements: var1 var2 DWORD var2 DWORD and var10 ,"LockFileEx . argtypes = [ HANDLE , DWORD , DWORD , DWORD , DWORD , LPOVERLAPPED ]","var0 = [ var1 , var2 , var2 , var2 , var2 , var10 ]"
substitute BOOL for LockFileEx.restype.,substitute var0 for var1 restype.,LockFileEx . restype = BOOL,var1 . restype = var0
substitute windll.kernel32.LockFileEx for LockFileEx.,substitute windll.kernel32 var1 for var1 ,LockFileEx = windll . kernel32 . LockFileEx,var1 = windll . kernel32 . var1
call the function locks.lock with arguments fd and locks.LOCK_EX.,call function var0 with arguments var1 and locks var2 ,"locks . lock ( fd , locks . LOCK_EX )","var0 ( var1 , locks . var2 )"
call the function locks.lock with fd and locks.LOCK_EX as arguments.,call function var0 with var1 and locks var2 as arguments.,"locks . lock ( fd , locks . LOCK_EX )","var0 ( var1 , locks . var2 )"
call the function locks.unlock with fd as argument.,call function var0 with var1 as argument.,locks . unlock ( fd ),var0 ( var1 )
call the function locks.unlock with argument fd.,call function var0 with argument var1 ,locks . unlock ( fd ),var0 ( var1 )
call the method logger.addHandler with an argument handler.,call method logger var1 with argument handler.,logger . addHandler ( handler ),logger . var1 ( handler )
call the method logger.addHandler with an argument: h-th element of value under 'handlers' key of self.config dictionary.,call method logger var1 with argument: h-th element of value under var2 key of self.config dict.,logger . addHandler ( self . config [ 'handlers' ] [ h ] ),logger . var1 ( self . config [ var2 ] [ h ] )
logger.disabled is boolean True.,var0 is boolean var1 ,logger . disabled = True,var0 = var1
"substitute '%s' in 'Internal Server Error: %s' with request.path, exc_info set to exc_info,",substitute var0 in var1 with var5 var6 set to var6 ,"logger . error ( 'Internal Server Error: %s' , request . path , exc_info = exc_info , extra = { 'status_code' : 500 , 'request' : request } )","logger . error ( var1 , var5 , var6 = var6 , extra = { 'status_code' : 500 , 'request' : request } )"
logger.handlers is an empty list.,var0 is empty list.,logger . handlers = [ ],var0 = [ ]
substitute logging.NOTSET for logger.level.,substitute logging var0 for var1 ,logger . level = logging . NOTSET,var1 = logging . var0
substitute propagate for logger.propagate.,substitute propagate for var0 ,logger . propagate = propagate,var0 = propagate
logger.propagate is boolean True.,var0 is boolean var1 ,logger . propagate = True,var0 = var1
call the method logger.removeHandler with an argument h.,call method logger var1 with argument var2,logger . removeHandler ( h ),logger . var1 ( h )
call the method logger.removeHandler with an argument handler.,call method logger var1 with argument handler.,logger . removeHandler ( handler ),logger . var1 ( handler )
"call the function _checkLevel with an argument level, use the result as an argument for the call to the method logger.setLevel.","call function var0 with argument level, use result as argument for call to method logger var2 ",logger . setLevel ( _checkLevel ( level ) ),logger . var2 ( var0 ( level ) )
"substitute '%s' in 'Forbidden (Permission denied): %s' with request.path, extra is an dictionary with two pairs of elements,","substitute var0 in var1 with var4 extra is dict with two pairs of elements,","logger . warning ( 'Forbidden (Permission denied): %s' , request . path , extra = { 'status_code' : 403 , 'request' : request } )","logger . warning ( 'Forbidden(var3 denied): %s' , var4 , extra = { 'status_code' : 403 , 'request' : request } )"
"call the logger.warning method with string 'Bad Request (UnicodeDecodeError)', exec_info set to sys.exec_info() and dictionary extra",call var0 method with string var1 var2 set to sys.exec_info() and dict extra,"logger . warning ( 'Bad Request (UnicodeDecodeError)' , exc_info = sys . exc_info ( ) , extra = { 'status_code' : 400 , } )","var0 ( 'Bad Request(UnicodeDecodeError)' , exc_info = sys . exc_info ( ) , extra = { 'status_code' : 400 } )"
"substitute '%s' in 'Not Found: %s' with request.path, extra is an dictionary with two pairs of elements 'status_code' with value 404,","substitute var0 in var1 with var4 extra is dict with two pairs of elements var5 with value 404,","logger . warning ( 'Not Found: %s' , request . path , extra = { 'status_code' : 404 , 'request' : request } )","logger . warning ( var1 , var4 , extra = { 'status_code' : 404 , 'request' : request } )"
"call the function logging.getLogger with string 'django.request' as the argument, assign the return object handle to logger.","call function logging var1 with string var2 as argument, assign return object handle to logger.",logger = logging . getLogger ( 'django.request' ),logger = logging . var1 ( var2 )
"call logging.getLogger method with string 'django.request' as argument, store the result in logger.","call logging var1 method with string var2 as argument, store result in logger.",logger = logging . getLogger ( 'django.request' ),logger = logging . var1 ( var2 )
"call the method logging.getLogger with an argument string 'py.warnings', substitute the result for logger.","call method logging var1 with argument string var2, substitute result for logger.",logger = logging . getLogger ( 'py.warnings' ),logger = logging . var1 ( var2 )
"call the method logging.getLogger with an argument name, substitute the result for logger.","call method logging var1 with argument name, substitute result for logger.",logger = logging . getLogger ( name ),logger = logging . var1 ( name )
"get the value under log key of root.manager.loggerDict dictionary, substitute it for logger.","get value under log key of root.manager var0 dict, substitute it for logger.",logger = root . manager . loggerDict [ log ],logger = root . manager . var0 [ log ]
"get config dictionary element under 'loggers' key, if it exists substitute it for loggers, if not, loggers is EMPTY_DICT.","get var0 dict element under var1 key, if it exists substitute it for loggers, if not, loggers is var2 ","loggers = config . get ( 'loggers' , EMPTY_DICT )","loggers = var0 . get ( var1 , var2 )"
call the method logging._acquireLock.,call method var0 ,logging . _acquireLock ( ),var0 ( )
disable_existing is boolean True.   call the method logging._handler.clear.,var0 is boolean var1 call method var3 ,logging . _handlers . clear ( ),logging . _handlers . clear ( )
call the method logging._releaseLock.,call method var0 ,logging . _releaseLock ( ),var0 ( )
call the method logging.captureWarnings with an argument boolean True.,call method logging var1 with argument boolean var2 ,logging . captureWarnings ( True ),logging . var1 ( var2 )
call the method logging.Handler.__init__ with an argument self.,call method logging var0 __init__ with argument self.,logging . Handler . __init__ ( self ),logging . var0 . __init__ ( self )
call the function logging_config_func with an argument DEFAULT_LOGGING.,call function var0 with argument var1 ,logging_config_func ( DEFAULT_LOGGING ),var0 ( var1 )
call the function logging_config_func with an argument logging_settings.,call function var0 with argument var1 ,logging_config_func ( logging_settings ),var0 ( var1 )
"call the function import_string with an argument logging_config, substitute the result for logging_config_func.",call function var0 with argument var1 substitute result for var3 ,logging_config_func = import_string ( logging_config ),var3 = var0 ( var1 )
"join callback.__module__, character ""."" and callback.__class__.__name__ together, substitute the result for lookup_str.","join var0 character var1 and var2 together, substitute result for var3 ",lookup_str = callback . __module__ + '.' + callback . __class__ . __name__,var3 = var0 + '.' + var2
"join together callback.__module__, character ""."" and callback.__name__, substitute the result for lookup_str.",join together var0 character var1 and var2 substitute result for var3 ,lookup_str = callback . __module__ + '.' + callback . __name__,var3 = var0 + '.' + var2
"call the function get_callable with arguments lookup_view and boolean True, substitute the result for lookup_view.",call function var0 with arguments var2 and boolean var6 substitute result for var2 ,"lookup_view = get_callable ( lookup_view , True )","var2 = var0 ( var2 , var6 )"
"join m and n into a string, separated by '.', substitute the result for lookup_view_s.","join m and n into string, separated by var0, substitute result for var1 ","lookup_view_s = '%s.%s' % ( m , n )","var1 = '%s.%s' % ( m , n )"
substitute lookup_view for lookup_view_s.,substitute var0 for var1 ,lookup_view_s = lookup_view,var1 = var0
"call the method lookups.appendlist with 2 arguments: name and a tuple containing 3 elements: new_matches, sum of p_pattern and pat,","call method var0 with 2 arguments: name and tuple containing 3 elements: var1 sum of var2 and pat,","lookups . appendlist ( name , ( new_matches , p_pattern + pat , dict ( defaults , ** pattern . default_kwargs ) ) )","var0 ( name , ( var1 , var2 + pat , dict ( defaults , ** pattern . default_kwargs ) ) )"
"call the method lookups.appendlist with 2 arguments: pattern.callback and a tuple containing 3 elements: bits, p_pattern,",call method var0 with 2 arguments: var1 and tuple containing 3 elements: bits var2 ,"lookups . appendlist ( pattern . callback , ( bits , p_pattern , pattern . default_args ) )","var0 ( var1 , ( bits , var2 , pattern . default_args ) )"
"call the method lookups.appendlist with 2 arguments: pattern.name and a tuple containing 3 elements: bits, p_pattern,",call method var0 with 2 arguments: var1 and tuple containing 3 elements: bits var2 ,"lookups . appendlist ( pattern . name , ( bits , p_pattern , pattern . default_args ) )","var0 ( var1 , ( bits , var2 , pattern . default_args ) )"
lookups is an instance of the MultiValueDict class.,lookups is instance of var0 class.,lookups = MultiValueDict ( ),lookups = var0 ( )
substitute i incremented by 1 for value under the 'counter' key of the loop_dict dictionary.,substitute i var0 by 1 for value under var1 key of var2 dict.,loop_dict [ 'counter' ] = i + 1,var2 [ var1 ] = i + 1
substitute i for value under the 'counter0' key of the loop_dict dictionary.,substitute i for value under var0 key of var1 dict.,loop_dict [ 'counter0' ] = i,var1 [ var0 ] = i
"if i is equal to integer 0, value under the 'first' key of the loop_dict dictionary is boolean True, otherwise it is False.","if i is equal to integer 0, value under var0 key of var1 dict is boolean var3 otherwise it is var4 ",loop_dict [ 'first' ] = ( i == 0 ),var1 [ var0 ] = i == 0
"if i is equal to len_values decremented by 1, value under the 'last' key of the loop_dict dictionary is boolean True, otherwise it is False.","if i is equal to var0 var2 by 1, value under var3 key of var4 dict is boolean var6 otherwise it is var7 ",loop_dict [ 'last' ] = ( i == len_values - 1 ),var4 [ var3 ] = i == var0 - 1
"subtract i from len_values, substitute the result for value under the 'revcounter' key of the loop_dict dictionary.",subtract i from var0 substitute result for value under var2 key of var3 dict.,loop_dict [ 'revcounter' ] = len_values - i,var3 [ var2 ] = var0 - i
"subtract i from len_values, decrement the result by integer 1, substitute it for value under the 'revcounter' key of the loop_dict dictionary.","subtract i from var0 decrement result by integer 1, substitute it for value under var2 key of var3 dict.",loop_dict [ 'revcounter0' ] = len_values - i - 1,var3 [ 'revcounter0' ] = var0 - i - 1
loop_dict and value under the 'forloop' key of the context dictionary are dictionaries with an entry: parentloop for 'parentloop'.,var0 and value under var1 key of context dict are dictionaries with entry: parentloop for var4.,loop_dict = context [ 'forloop' ] = { 'parentloop' : parentloop },var0 = context [ var1 ] = { 'parentloop' : parentloop }
"where '%s' is replaced with token.contents.   call the method re.split with 2 arguments: raw string ' *, *' and elements of bits from 1 index to in_index index,","var0 var1 is replaced with var2 call method var4 with 2 arguments: raw string var5 and elements of bits from 1 index to var6 index,","loopvars = re . split ( r' *, *' , ' ' . join ( bits [ 1 : in_index ] ) )","loopvars = var4 ( ' *, *var5 ' . join ( bits [ 1 : var6 ] ) )"
"second contains: string 'InternalHigh and ULONG_PTR, third: '_offset_union' and _OFFSET_UNION, forth 'hEvent' and HANDLE.   call the function POINTER with argument OVERLAPPED, substitute the result for LPOVERLAPPED.",second contains: string var0_offset_unionvar1hEvent' and var5 call function var7 with argument var8 substitute result for var9 ,LPOVERLAPPED = POINTER ( OVERLAPPED ),LPvar8 = var7 ( var8 )
lst is an empty list,var0 is empty list,lst = [ ],var0 = [ ]
declare an empty list lst1,declare empty list var0,lst1 = [ ],var0 = [ ]
lst2 is an empy list,var0 is var1 list,lst2 = [ ],var0 = [ ]
"LUHN_ODD_LOOKUP is a tuple with 10 elements: integers 0, 2, 4, 6, 8, 1, 3, 5, 7 and 9.","var0 is tuple with 10 elements: integers 0, 2, 4, 6, 8, 1, 3, 5, 7 and 9.","LUHN_ODD_LOOKUP = ( 0 , 2 , 4 , 6 , 8 , 1 , 3 , 5 , 7 , 9 )","var0 = 0 , 2 , 4 , 6 , 8 , 1 , 3 , 5 , 7 , 9"
"call the M.set method with the key, real_value, coded_value as the arguments.",call var0 method with key var1 var2 as arguments.,"M . set ( key , real_value , coded_value )","var0 ( key , var1 , var2 )"
"match the rawdata from the position k, with attrfind pattern, assign the result to the m.","match var0 from position k, with var1 pattern, assign result to var2","m = _html_parser . attrfind . match ( rawdata , k )","m = _html_parser . var1 . match ( var0 , k )"
substitute base for m.,substitute base for var0,m = base,m = base
"format self.month_field string with name, use it as the key for the data dictionary, substitute the result for m.","format self var1 string with name, use it as key for data dict, substitute result for var2",m = data . get ( self . month_field % name ),m = data . get ( self . var1 % name )
"zip together new_keys and keys, convert it to dictionary, assign it to m.","zip together var0 and keys, convert it to dict, assign it to var1","m = dict ( zip ( new_keys , keys ) )","m = dict ( zip ( var0 , keys ) )"
"get the attribute '__module__' from the getattr, if it exists substitute it for m, if not, m is None.","get attribute var0 from var1 if it exists substitute it for m, if not, m is var2 ","m = getattr ( lookup_view , '__module__' , None )","m = var1 ( lookup_view , var0 , var2 )"
"match string s with regex IDENTIFIER, substitute the result for m.",match string s with var0 var1 substitute result for var2,m = IDENTIFIER . match ( s ),m = var1 . match ( s )
"convert d into a integer, subtract d from it, substitute the result for m.","convert d into integer, subtract d from it, substitute result for var0",m = int ( d ) - d,m = int ( d ) - d
"sum m and value under the medium key of the base dictionary, substitute it for m.","sum m and value under medium key of base dict, substitute it for var0",m = m + base [ medium ],m = m + base [ medium ]
m is an instance of Media class.,m is instance of var0 class.,m = Media ( ),m = var0 ( )
"with the result renamed to fp, perform the following:   read data from file fp, use the result as an argument for the call to the function plural_forms_re.search, substitute it for m.","with result renamed to var0 perform following: read data from file var0 use result as argument for call to function var3 search, substitute it for var5",m = plural_forms_re . search ( fp . read ( ) ),m = var3 . search ( var0 . read ( ) )
"call the method re.match with 2 arguments: naiveip_re and value under the 'addrport' key of the options dictionary, substitute the result for m.","call method var0 with 2 arguments: var1 and value under var3 key of options dict, substitute result for var4","m = re . match ( naiveip_re , options [ 'addrport' ] )","m = var0 ( var1 , options [ var3 ] )"
"call the method regex.match with an argument date, substitute the result for m.","call method var0 with argument date, substitute result for var1",m = regex . match ( date ),m = var0 ( date )
call the method regex.search with 2 arguments: text and pos.,call method var0 with 2 arguments: text and pos.,"m = regex . search ( text , pos )","m = var0 ( text , pos )"
"match value string with regex self.CONVERT_PATTERN, substitute the result for m.",match value string with var0 self var1 substitute result for var2,m = self . CONVERT_PATTERN . match ( value ),m = self . var1 . match ( value )
"match rest string with self.DOT_PATTERN regex, substitute the result for m.",match rest string with self var0 var1 substitute result for var2,m = self . DOT_PATTERN . match ( rest ),m = self . var0 . match ( rest )
"get the value under the key of the dictionary self, if key does not exists return evaluated result of the function Morsel, substitute it for M.","get value under key of dict self, if key does not exists return evaluated result of function var0 substitute it for var1","M = self . get ( key , Morsel ( ) )","M = self . get ( key , var0 ( ) )"
"match rest string with self.INDEX_PATTERN regex, substitute the result for m.",match rest string with self var0 var1 substitute result for var2,m = self . INDEX_PATTERN . match ( rest ),m = self . var0 . match ( rest )
"match rest string with self.WORD_PATTERN regex, substitute the result for m.",match rest string with self var0 var1 substitute result for var2,m = self . WORD_PATTERN . match ( rest ),m = self . var0 . match ( rest )
"m2m_convert is an lambda function with an argument n, return value is the return value of the method field.rel.to._meta.pk.to_python,","var0 is lambda function with argument n, return value is return value of method field.rel.to._meta.pk var2 ",m2m_convert = lambda n : field . rel . to . _meta . pk . to_python ( n . getAttribute ( 'pk' ) ),var0 = lambda n : field . rel . to . _meta . pk . var2 ( n . getAttribute ( 'pk' ) )
"m2m_convert is a lambda function with an argument v, return value is the result of the function smart_text called with an argument:","var0 is lambda function with argument v, return value is result of function var1 called with argument:",m2m_convert = lambda v : smart_text ( field . rel . to . _meta . pk . to_python ( v ) ),var0 = lambda v : var1 ( field . rel . to . _meta . pk . to_python ( v ) )
"return value of the method field.rel.to._meta.pk.to_python called with an argument v.   call the m2m_convert function with pk as argument, for every pk in field_value, substitute the value under the field.name key of the m2m_data dictionary.","return value of method field.rel.to._meta var1 var3 called with argument var4 call var6 function with var1 as argument, for every var1 in var7 substitute value under var9 key of var10 dict.",m2m_data [ field . name ] = [ m2m_convert ( pk ) for pk in field_value ],var10 [ var9 ] = [ var6 ( var1 ) for var1 in var7 ]
"call the method self._handle_m2m_field_node with an argument field_node and field, substitute the result for value under the field.name key of m2m_data dictionary.","call method var0 with argument var1 and field, substitute result for value under var2 key of var3 dict.","m2m_data [ field . name ] = self . _handle_m2m_field_node ( field_node , field )","var3 [ var2 ] = var0 ( var1 , field )"
substitute the result for the value under the Model._meta.pk.attname key of data dictionary.   m2m_data is an empty dictionary.,substitute result for value under var0 _meta.pk.attname key of data dict var2 var3 is empty dict.,m2m_data = { },var3 = { }
m2m_data is an empty dictionary.,var0 is empty dict.,m2m_data = { },var0 = { }
"m2m_value is a lambda function with an argument value, return value is the result of the function smart_text called with arguments:","var0 is lambda function with argument value, return value is result of function var1 called with arguments:","m2m_value = lambda value : smart_text ( value . _get_pk_val ( ) , strings_only = True )","var0 = lambda value : var1 ( value . _get_pk_val ( ) , strings_only = True )"
call the mail.attach_alternative method with html_message and string 'text/html' as arguments.,call mail var1 method with var2 and string var4 as arguments.,"mail . attach_alternative ( html_message , 'text/html' )","mail . var1 ( var2 , var4 )"
call method mail.attach_alternative as html_message and string 'text/hmtl' as arguments.,call method mail var1 as var2 and string var4 as arguments.,"mail . attach_alternative ( html_message , 'text/html' )","mail . var1 ( var2 , 'text/html' )"
"otherwise html_message is None.   call the method mail.mail_admins with 5 arguments: subject, message, fail_silently as boolean True, tml_message as html_message,","otherwise var0 is var6 call method mail var9 with 5 arguments: subject, message var10 as boolean var12 var4 as var0 ","mail . mail_admins ( subject , message , fail_silently = True , html_message = html_message , connection = self . connection ( ) )","mail . var9 ( subject , message , var10 = var12 , var0 = var0 , connection = self . connection ( ) )"
call the method mail.outbox.extend with messages.,call method var0 with messages.,mail . outbox . extend ( messages ),var0 ( messages )
mail.outbox is an empty list.,var0 is empty list.,mail . outbox = [ ],var0 = [ ]
call the mail.send method with fail_silently=fail_silently as argument.,call var0 method with fail_silently=fail_silently as argument.,mail . send ( fail_silently = fail_silently ),var0(var1 var3 var1)
call the mail.send method with fail_silently set to fail_silently as argument.,call var0 method with var1 set to var1 as argument.,mail . send ( fail_silently = fail_silently ),var0 ( var1 = var1 )
"call the function EmailMultiAlternatives with settings.EMAIL_SUBJECT_PREFIX and subject converted to strings and concatenated,","call function var0 with settings var1 and subject converted to strings and concatenated,","mail = EmailMultiAlternatives ( '%s%s' % ( settings . EMAIL_SUBJECT_PREFIX , subject ) , message , settings . SERVER_EMAIL , [ a [ 1 ] for a in settings . ADMINS ] , connection = connection )","mail = var0 ( '%s%s' % ( settings . var1 , subject ) , message , settings . SERVER_EMAIL , [ a [ 1 ] for a in settings . ADMINS ] , connection = connection )"
"call the function EmailMultiAlternatives with settings.EMAIL_SUBJECT_PREFIX and subject converted to strings and concatenated,","call function var0 with settings var1 and subject converted to strings and concatenated,","mail = EmailMultiAlternatives ( '%s%s' % ( settings . EMAIL_SUBJECT_PREFIX , subject ) , message , settings . SERVER_EMAIL , [ a [ 1 ] for a in settings . MANAGERS ] , connection = connection )","mail = var0 ( '%s%s' % ( settings . var1 , subject ) , message , settings . SERVER_EMAIL , [ a [ 1 ] for a in settings . MANAGERS ] , connection = connection )"
"call the EmailMultiAlternatives function with, subject, message, from_email, recipient_list and connection set to connection, as arguments, assign the result to mail.","call var0 function with, subject, message var1 var3 and connection set to connection, as arguments, assign result to mail.","mail = EmailMultiAlternatives ( subject , message , from_email , recipient_list , connection = connection )","mail = var0 ( subject , message , var1 , var3 , connection = connection )"
"call the function parse_header with an argument line, substitute the result for main_value_pair and params, respectively.","call function var0 with argument line, substitute result for var1 and var3 respectively.","main_value_pair , params = parse_header ( line )","var1 , var3 = var0 ( line )"
"convert x into a string for every x in list of version elements up to the parts index, join the previous into a string separated by '.', assign the result to major.","convert x into string for every x in list of version elements up to parts index, join previous into string separated by var0, assign result to major.",major = '.' . join ( str ( x ) for x in version [ : parts ] ),major = var0 . join ( str ( x ) for x in version [ : parts ] )
"call the get_major_version wit version as argument, store the result in major.","call var0 wit version as argument, store result in major.",major = get_major_version ( version ),major = var0 ( version )
substitute _make_key for make_key.,substitute _make_key for var0 ,make_key = _make_key,var0 = _make_key
"or opts.auto_created is True and return value of converter function with opts.auto_created._meta.db_table is contained in tables,   invert the evaluated expression and return it.   manifest is OrderDict class instance, created with tuple of two elements, app_name and list of elements of model_list for which model_installed function returned true, for every app_name and model_list in all_modules.","or opts var1 is var3 and return value of converter function with opts var1 _meta var5 is contained in tables var6 invert evaluated expression and return it var6 manifest is var8 class instance, created with tuple of two elements var10 and list of elements of var14 for var18 var19 function returned true, for every var10 and var14 in var21 ","manifest = OrderedDict ( ( app_name , list ( filter ( model_installed , model_list ) ) ) for app_name , model_list in all_models )","manifest = OrderedDict ( ( var10 , list ( filter ( var19 , var14 ) ) ) for var10 , var14 in all_models )"
"call the method self.translate_token with an argument token, append the result to mapped_tokens.","call method self var1 with argument token, append result to var2 ",mapped_tokens . append ( self . translate_token ( token ) ),var2 . append ( self . var1 ( token ) )
mapped_tokens is an empty list.,var0 is empty list.,mapped_tokens = [ ],var0 = [ ]
"mapping is a dictionary with 3 initial entries: 'a' for 'alpha', 'b' for 'beta' and 'c' for 'rc'.","mapping is dict with 3 initial entries: var0 for var1, var2 for var3 and var4 for var5.","mapping = { 'alpha' : 'a' , 'beta' : 'b' , 'rc' : 'c' }","mapping = { 'alpha' : var0 , 'beta' : 'b' , 'rc' : 'c' }"
"mapping is an dictionary with 8 initial entries: BLOCK_TAG_START for 'openblock', BLOCK_TAG_END for 'closeblock',","mapping is dict with 8 initial entries: var0 for var2 var3 for var5,","mapping = { 'openblock' : BLOCK_TAG_START , 'closeblock' : BLOCK_TAG_END , 'openvariable' : VARIABLE_TAG_START , 'closevariable' : VARIABLE_TAG_END , 'openbrace' : SINGLE_BRACE_START , 'closebrace' : SINGLE_BRACE_END , 'opencomment' : COMMENT_TAG_START , 'closecomment' : COMMENT_TAG_END , }","mapping = { var2 : var0 , 'closeblock' : var3 , 'openvariable' : VARIABLE_TAG_START , 'closevariable' : VARIABLE_TAG_END , 'openbrace' : SINGLE_BRACE_START , 'closebrace' : SINGLE_BRACE_END , 'opencomment' : COMMENT_TAG_START , 'closecomment' : COMMENT_TAG_END }"
"perform the bitwise or operation on the next 6 operands pyinotify.IN_MODIFY pyinotify.IN_DELETE, pyinotify.IN_ATTRIB,",perform var0 or operation on next 6 operands var1 var4 var1 var5 var1 var7 ,mask = ( pyinotify . IN_MODIFY | pyinotify . IN_DELETE | pyinotify . IN_ATTRIB | pyinotify . IN_MOVED_FROM | pyinotify . IN_MOVED_TO | pyinotify . IN_CREATE ),mask = ( var1 . var4 | var1 . var5 | var1 . var7 | var1 . IN_MOVED_FROM | var1 . IN_MOVED_TO | var1 . IN_CREATE )
"throw an exception with string ""unexpected call to parse_endtag"" as the message.   search anywhere in the rawdata string starting from the (i+1)-th element for the _html_parser.endendeag, replace the result for match.",throw exception with string var0 as message var1 search anywhere in var2 string starting from (i+1)-th element for var4 replace result for match.,"match = _html_parser . endendtag . search ( rawdata , i + 1 )","match = _html_parser . endendtag . search ( var2 , i + 1 )"
"match the rawdata from the position i, with _html_parser.endtagfind pattern, assign the result to the match.","match var0 from position i, with var1 pattern, assign result to match.","match = _html_parser . endtagfind . match ( rawdata , i )","match = var1 . match ( var0 , i )"
"if pattern equals '*' or pattern starts with '.' or pattern equals host, and only if:","if pattern equals var0 or pattern starts with var1 or pattern equals host, and only if:",match = ( pattern == '*' or pattern . startswith ( '.' ) and ( host . endswith ( pattern ) or host == pattern [ 1 : ] ) or pattern == host ),match = pattern == var0 or pattern . startswith ( var0 . var0 ) and ( host . endswith ( pattern ) or host == pattern [ 1 : ] ) or pattern == host
"call the method condition.eval with an argument context, substitute the result for match.","call method var0 with argument context, substitute result for match.",match = condition . eval ( context ),match = var0 ( context )
"match regex date_re with value, substitute the result for match.","match var0 var1 with value, substitute result for match.",match = date_re . match ( value ),match = var1 . match ( value )
"match regex datetime_re with value, substitute the result for match.","match var0 var1 with value, substitute result for match.",match = datetime_re . match ( value ),match = var1 . match ( value )
"call the method kwarg_re.match with an argument bit, substitute it for match.","call method var0 match with argument bit, substitute it for match.",match = kwarg_re . match ( bit ),match = var0 . match ( bit )
"call the method kwarg_re.match with an argument first element of bits, substitute the result for match.","call method var0 match with argument first element of bits, substitute result for match.",match = kwarg_re . match ( bits [ 0 ] ),match = var0 . match ( bits [ 0 ] )
match is None.,match is var0 ,match = None,match = var0
"call the method RE_DATE.match with an argument value, substitute the result for match.","call method var0 match with argument value, substitute result for match.",match = RE_DATE . match ( value ),match = var0 . match ( value )
"call the method self.regex.search with an argument path, substitute the result for match.","call method var0 with argument path, substitute result for match.",match = self . regex . search ( path ),match = var0 ( path )
"call the function self.regex.search with an argument path, substitute the result for match.","call function var0 with argument path, substitute result for match.",match = self . regex . search ( path ),match = var0 ( path )
"match the rawdata from the position i+1, with tagfind pattern, assign the result to the match.","match var0 from position var1 with var2 pattern, assign result to match.","match = tagfind . match ( rawdata , i + 1 )","match = var2 . match ( var0 , i + 1 )"
"match regex time_re with value, substitute the result for match.","match var0 var1 with value, substitute result for match.",match = time_re . match ( value ),match = var1 . match ( value )
"call the method filter_re.finditer with an argument token, substitute the result for matches.","call method var0 finditer with argument token, substitute result for matches.",matches = filter_re . finditer ( token ),matches = var0 . finditer ( token )
"matches is boolean True,",matches is boolean var0 ,matches = True,matches = var0
"call the options.get method with string 'MAX_ENTRIES' and integer 300 as arguments, use the string 'max_entries' and previous result as the arguments for the call to the params.get method, substitute the result for max_entries.","call var0 method with string var1 and integer 300 as arguments, use string var2 and previous result as arguments for call to params.get method, substitute result for max_entries.","max_entries = params . get ( 'max_entries' , options . get ( 'MAX_ENTRIES' , 300 ) )","max_entries = params . get ( 'max_entries' , var0 ( var1 , 300 ) )"
max_num is integer 1.,var0 is integer 1.,max_num = 1,var0 = 1
"substitute DEFAULT_MAX_NUM for max_num,",substitute var0 for var1 ,max_num = DEFAULT_MAX_NUM,var1 = var0
MAX_NUM_FORM_COUNT is a string 'MAX_NUM_FORMS'.,var0 is string var1.,MAX_NUM_FORM_COUNT = 'MAX_NUM_FORMS',var0 = var1
"convert max_value into an floating point number, substitute it for max_value.","convert var0 into floating point number, substitute it for var0 ",max_value = float ( max_value ),var0 = float ( var0 )
"call the method self.max_expr.resolve with an argument context, substitute the result for max_value.","call method self var1 resolve with argument context, substitute result for var2 ",max_value = self . max_expr . resolve ( context ),var2 = self . var1 . resolve ( context )
"call the method self.max_width.resolve with an argument context, convert the result to an integer and substitute it for max_width.","call method self var1 resolve with argument context, convert result to integer and substitute it for var1 ",max_width = int ( self . max_width . resolve ( context ) ),var1 = int ( self . var1 . resolve ( context ) )
"if line ends with a new line character substitute width incremented by integer 1 for max_width, if not substitute width for max_width.",if line ends with new line character substitute width var0 by integer 1 for var1 if not substitute width for var1 ,"max_width = min ( ( line . endswith ( '\n' ) and width + 1 or width ) , width )","var1 = min ( line . endswith ( '\n' ) and width + 1 or width , width )"
"bitwise shift integer 1 to the left by 31 spaces, substitute integer 1 from the result, convert the result to a integer, substitute it for MAXSIZE.","var0 shift integer 1 to left by 31 spaces, substitute integer 1 from result, convert result to integer, substitute it for var1 ",MAXSIZE = int ( ( 1 << 31 ) - 1 ),var1 = int ( ( 1 << 31 ) - 1 )
"bitwise shift integer 1 to the left by 63 spaces, substitute integer 1 from the result, convert the result to a integer, substitute it for MAXSIZE.","var0 shift integer 1 to left by 63 spaces, substitute integer 1 from result, convert result to integer, substitute it for var1 ",MAXSIZE = int ( ( 1 << 63 ) - 1 ),var1 = int ( ( 1 << 63 ) - 1 )
substitute sys.maxsize for MAXSIZE.,substitute var0 for var1 ,MAXSIZE = sys . maxsize,var1 = var0
"move integer 1 left for 20 bits, substitute the result for MB.","move integer 1 left for 20 bits, substitute result for var0 ",MB = 1 << 20,var0 = 1 << 20
media is an instance of Media class.,media is instance of var0 class.,media = Media ( ),media = var0 ( )
"append field.widget.media to media, substitute the result for media.","append var0 to media, substitute result for media.",media = media + field . widget . media,media = media + var0
"sum media and w.media, substitute the result for media.",sum media and var0 substitute result for media.,media = media + w . media,media = media + var0
"media is a property object of the current class, with _get_media as getter function.","media is property object of current class, with var0 as var1 function.",media = property ( _get_media ),media = property ( var0 )
"call the method self._css.keys, sort the result and substitute it for media.",call method var0 sort result and substitute it for media.,media = sorted ( self . _css . keys ( ) ),media = sorted ( self . _css . keys ( ) )
substitute kwargs for media_attrs.,substitute var0 for var1 ,media_attrs = kwargs,var1 = var0
substitute media.__dict__ for media_attrs.,substitute var0 for var1 ,media_attrs = media . __dict__,var1 = var0
"PasswordInput', 'HiddenInput', 'MultipleHiddenInput', 'ClearableFileInput', 'FileInput', 'DateInput', 'DateTimeInput', 'TimeInput',   'Textarea', 'CheckboxInput', 'Select', 'NullBooleanSelect', 'SelectMultiple', 'RadioSelect','CheckboxSelectMultiple', 'MultiWidget',   'SplitDateTimeWidget' and 'SplitHiddenDateTimeWidget'.   MEDIA_TYPES is a tuple with 2 strings: 'css' and 'js'.",PasswordInputvar1HiddenInputvar1MultipleHiddenInputvar1ClearableFileInputvar1FileInputvar1DateInputvar1DateTimeInputvar1TimeInputvar28Textareavar1CheckboxInputvar1Selectvar1NullBooleanSelectvar1SelectMultiplevar1RadioSelectvar43CheckboxSelectMultiplevar1MultiWidgetvar28SplitDateTimeWidgetvar49SplitHiddenDateTimeWidgetvar53cssvar49js'.,"MEDIA_TYPES = ( 'css' , 'js' )","var54 = 'css' , 'js'"
mem_args is a list containing of first num_args elements of args list.,var0 is list containing of first var1 elements of args list.,mem_args = args [ : num_args ],var0 = args [ : var1 ]
"members is a list with elements member for every member in the result of the function self._archive.getmembers,",members is list with elements member for every member in result of function var0 ,members = [ member for member in self . _archive . getmembers ( ) if member . name != 'pax_global_header' ],members = [ member for member in var0 ( ) if member . name != 'pax_global_header' ]
MEMCACHE_MAX_KEY_LENGTH is integer 250.,var0 is integer 250.,MEMCACHE_MAX_KEY_LENGTH = 250,var0 = 250
substitute obj for the value of the memo dictionary at the identity of the self object key.,substitute var0 for value of memo dict at identity of self object key.,memo [ id ( self ) ] = obj,memo [ id ( self ) ] = var0
"substitute result for the value of the memo dictionary, with identity of the self object as an key.","substitute result for value of memo dict, with identity of self object as key.",memo [ id ( self ) ] = result,memo [ id ( self ) ] = result
"get the identity of the self object, use it as a key to get the value of the memo dictionary, substitute result for it.","get identity of self object, use it as key to get value of memo dict, substitute result for it.",memo [ id ( self ) ] = result,memo [ id ( self ) ] = result
substitute result for value under the id of self key of memo dictionary.,substitute result for value under id of self key of memo dict.,memo [ id ( self ) ] = result,memo [ id ( self ) ] = result
"get the id of the self object, use it as a key to obtain the value from the memo dictionary, substitute self with it.","get id of self object, use it as key to obtain value from memo dict, substitute self with it.",memo [ id ( self ) ] = result,memo [ id ( self ) ] = result
"get the id of the self object, use it as a key to obtain the value from the memo dictionary, substitute self with it.","get id of self object, use it as key to obtain value from memo dict, substitute self with it.",memo [ id ( self ) ] = self,memo [ id ( self ) ] = self
memo is an empty dictionary.,memo is empty dict.,memo = { },memo = { }
substitute buffer for memoryview.,substitute buffer for var0 ,memoryview = buffer,var0 = buffer
substitute memoryview for memoryview.,substitute var0 for var0 ,memoryview = memoryview,var0 = var0
substitute the result for migration.ancestry.   append migration to merge_migrations.,substitute result for var0 append migration to var2 ,merge_migrations . append ( migration ),var2 . append ( migration )
merge_migrations is an empty list.,var0 is empty list.,merge_migrations = [ ],var0 = [ ]
"substitute message.message, message.code, message.params for message, code and params, respectively.","substitute var0 var1 message var2 for message, code and var2 respectively.","message , code , params = message . message , message . code , message . params","message , code , var2 = var0 , var1 , message . var2"
call the method message.message.,call method var0 ,message . message ( ),var0 ( )
substitute error_messages under the message.code key of error_messages dictionary for message.message.,substitute var0 under var2 key of var0 dict for var3 ,message . message = error_messages [ message . code ],var3 = var0 [ var2 ]
"divide message by error.params, substitute the residue of the division for message.",divide message by var0 substitute residue of division for message.,message %= error . params,message %= var0
call the function _ with an argument string '%(datetime)s couldn\'t be interpreted in time zone %(current_timezone)s; it ',call the function _ with an argument string '%(datetime)s couldn\'t be interpreted in time zone %(current_timezone)s; it ',message = _ ( '%(datetime)s couldn\'t be interpreted ' 'in time zone %(current_timezone)s; it ' 'may be ambiguous or it may not exist.' ),message = _ ( '%(datetime)s couldn\'t be interpreted ' 'in time zone %(current_timezone)s; it ' 'may be ambiguous or it may not exist.' )
"call the function _ with the argument string 'Ensure this value is %(limit_value)s (it is %(show_value)s).', substitute the result for message.","call function _ with argument string var0, substitute result for message.",message = _ ( 'Ensure this value is %(limit_value)s (it is %(show_value)s).' ),message = _ ( 'Ensure this value is %(limit_value)s(it is %(show_value)s).' )
"call the function _ with an argument string 'Ensure this value is greater than or equal to %(limit_value)s.', substitute the result for message.","call function _ with argument string var0, substitute result for message.",message = _ ( 'Ensure this value is greater than or equal to %(limit_value)s.' ),message = _ ( var0 )
"call the function _ with an argument string 'Ensure this value is less than or equal to %(limit_value)s.', substitute the result for message.","call function _ with argument string var0, substitute result for message.",message = _ ( 'Ensure this value is less than or equal to %(limit_value)s.' ),message = _ ( var0 )
"call a function _ with a string 'Enter a valid value.' as an argument, substitute the result for message.","call function var0 with string var1 as argument, substitute result for message.",message = _ ( 'Enter a valid email address.' ),message = var0 ( 'Enter a valid email address.' )
"(?:[A-Z]{2,6}\.?|[A-Z0-9-]{2,}(?<!-)\.?)|\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}|\[?[A-F0-9]*:[A-F0-9:]+\]?)(?::\d+)?(?::\d+)?(?:/,   ""?|[/?]\S+)$"" and re.IGNORECASE, substitute the result for regex.   call a function _ with a string 'Enter a valid value.' as an argument, substitute the result for message.","(?:[A-Z]{2,6}\.?|[A-Z0-9-]{2,}(?<!-)\.?)|\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}|\[?[A-F0-9]*:[A-F0-9:]+\]?)(?::\d+)?(?::\d+)?(?:/,   ""?|[/?]\S+)$"" and re.IGNORECASE, substitute the result for regex.   call a function _ with a string 'Enter a valid value.' as an argument, substitute the result for message.",message = _ ( 'Enter a valid URL.' ),message = _ ( 'Enter a valid URL.' )
"call a function _ with a string 'Enter a valid value.' as an argument, substitute the result for message.","call function var0 with string var1 as argument, substitute result for message.",message = _ ( 'Enter a valid value.' ),message = var0 ( var1 )
"join tokens elements into a string, substitute it for message.","join tokens elements into string, substitute it for message.",message = '' . join ( tokens ),message = '' . join ( tokens )
message is a string 'make sure the name begins with a letter or underscore'.,message is string var0.,message = 'make sure the name begins with a letter or underscore',message = var0
message is an string 'Unknown field(s) (%s) specified for %s'.,message is string var0.,message = 'Unknown field(s) (%s) specified for %s',message = 'Unknown field(s)(%s) specified for %s'
"message is a string 'use only numbers, letters and underscores'.",message is string var0.,"message = 'use only numbers, letters and underscores'",message = var0
"replace '%s' in string ""'%s' already exists"" with top_dir, substitute it for message.","replace var0 in string ""var0 already exists"" with var2 substitute it for message.",message = ''%s' already exists' % top_dir,message = 'var0 already exists' % var2
"message is an string ""%s\n\nRequest repr(): %s""  formated with the result of the metod self.format with an argument record,","message is string var0 formated with result of var1 var2 with argument record,","message = '%s\n\nRequest repr(): %s' % ( self . format ( record ) , request_repr )","message = '''%sRequest repr(): %s''' % ( self . format ( record ) , request_repr )"
substitute e for message.,substitute e for message.,message = e,message = e
"call the function email_message.message, substitute the result for message.","call function var0 message, substitute result for message.",message = email_message . message ( ),message = var0 . message ( )
substitute error.message for message.,substitute var0 for message.,message = error . message,message = var0
"convert elements of error into a list, substitute the first element for message.","convert elements of error into list, substitute first element for message.",message = list ( error ) [ 0 ],message = list ( error ) [ 0 ]
substitute message.error_dict for message.,substitute message var1 for message.,message = message . error_dict,message = message . var1
substitute message.error_list for message.,substitute message var1 for message.,message = message . error_list,message = message . var1
"join missing_fields into a string separated by string ', ', use it and opts.model.__name__ to format message, substitute the result for message.","join var0 into string separated by string var2, use it and var3 to format message, substitute result for message.","message = message % ( ', ' . join ( missing_fields ) , opts . model . __name__ )","message = message % ( var2 . join ( var0 ) , var3 )"
"call the function trim_whitespace with an argument message, substitute the result for message.","call function var0 with argument message, substitute result for message.",message = trim_whitespace ( message ),message = var0 ( message )
"call the function ungettext_lazy with 3 arguments: string 'Ensure this value has at least %(limit_value)d character (it has %(show_value)d),","call function var0 with 3 arguments: string 'Ensure var3 value has at least var4 character (it has %(show_value)d),","message = ungettext_lazy ( 'Ensure this value has at least %(limit_value)d character (it has %(show_value)d).' , 'Ensure this value has at least %(limit_value)d characters (it has %(show_value)d).' , 'limit_value' )","message = var0 ( 'var2 var3 value has at least %(var5)d character(it has %(var7)d).' , 'var2 var3 value has at least %(var5)d characters(it has %(var7)d).' , 'var5' )"
"call the function ungettext_lazy with 3 arguments: string 'Ensure this value has at most %(limit_value)d character (it has %(show_value)d),","call function var0 with 3 arguments: string 'Ensure var3 value has at most var4 character (it has %(show_value)d),","message = ungettext_lazy ( 'Ensure this value has at most %(limit_value)d character (it has %(show_value)d).' , 'Ensure this value has at most %(limit_value)d characters (it has %(show_value)d).' , 'limit_value' )","message = var0 ( 'var2 var3 value has at most %(var5)d character(it has %(var7)d).' , 'var2 var3 value has at most %(var5)d characters(it has %(var7)d).' , 'var5' )"
message is an instance of the ValidationError class created with an argument message.,message is instance of var0 class created with argument message.,message = ValidationError ( message ),message = var0 ( message )
"substitute the result for context_match.   call the method context_match.group with an argument integer 1, substitute the result for message_context.","substitute result for var0 call method var0 group with argument integer 1, substitute result for var3 ",message_context = context_match . group ( 1 ),var3 = var0 . group ( 1 )
"strip message_context of '""' characters from both ends, substitute the result for message_context.","strip var0 of var4 characters from both ends, substitute result for var0 ",message_context = message_context . strip ( ''' ),var0 = var0.strip(''')
"strip message_context of ""'"" characters from both ends, substitute the result for message_context.","strip var0 of var4 characters from both ends, substitute result for var0 ",message_context = message_context . strip ( ''' ),var0 = var0.strip(''')
message_context is None.,var0 is var1 ,message_context = None,var0 = var1
"use the result as the argument for the call to the messages.update function.   update messages dictionary with error_messages, if it exists, if not don't update it.","use result as argument for call to var0 function var1 update messages dict with var2 if it exists, if not don't update it.",messages . update ( error_messages or { } ),var0 ( var2 or { } )
"get 'default_error_messages' from the c object, if it doesnt exists return an empty dictionary,","get var0 from c object, if it doesnt exists return empty dict,","messages . update ( getattr ( c , 'default_error_messages' , { } ) )","messages . update ( getattr ( c , var0 , { } ) )"
"password set to auth_password, fail_silently set to fail_silently as arguments, assign the result to connection.   call the EmailMessage function wit subject, message, sender, recipient and connection set to connection,","password set to var0 var2 set to var2 as arguments, assign result to connection var6 call var7 function wit subject, message, sender, recipient and connection set to connection,","messages = [ EmailMessage ( subject , message , sender , recipient , connection = connection ) for subject , message , sender , recipient in datatuple ]","messages = [ var7 ( subject , message , sender , recipient , connection = connection ) for subject , message , sender , recipient in datatuple ]"
messages is an empty dictionary.,messages is empty dict.,messages = { },messages = { }
messages is an instance of the ValidationError class created with an argument messages.,messages is instance of var0 class created with argument messages.,messages = ValidationError ( messages ),messages = var0 ( messages )
meta is a string '<could not parse>'.,var0 is string var1.,meta = '<could not parse>',var0 = var1
"get is a tuple containing elements generated by the call to the function pformat with an argument META_override,",get is tuple containing elements generated by call to function var0 with argument var1 ,meta = ( pformat ( META_override ) if META_override is not None else pformat ( request . META ) ),meta = var0 ( var1 ) if var1 is not None else var0 ( request . META )
"get 'Meta' attribute from form object, if it exists substitute it for meta, if not meta is None.","get var0 attribute from form object, if it exists substitute it for var1 if not var1 is var3 ","meta = getattr ( form , 'Meta' , None )","var1 = getattr ( form , var0 , var3 )"
"meta is an instance of a class named 'Meta', derived from the object base class, without any fields.","var0 is instance of class named var1, derived from object base class var2 any fields.","meta = type ( str ( 'Meta' ) , ( object , ) , { } )","var0 = type ( str ( var1 ) , ( object , ) , { } )"
"Meta is an instance of class with name 'Meta', parent base class and fields attrs.","Meta is instance of class with name var0, parent base class and fields var1 ","Meta = type ( str ( 'Meta' ) , parent , attrs )","Meta = type ( str ( var0 ) , parent , var1 )"
"call the method cls.__promise__ with 3 arguments: resultclass, k and v, substitute the result for meth.","call method var0 with 3 arguments: var1 k and v, substitute result for meth.","meth = cls . __promise__ ( resultclass , k , v )","meth = var0 ( var1 , k , v )"
"remove kwargs dictionary element under the 'method' key, substitute it for method.","remove var0 dict element under var1 key, substitute it for method.",method = kwargs . pop ( 'method' ),method = var0 . pop ( var1 )
"substitute the result for trimmed.   middle is a string '<a href=""%s""%s>%s</a>' formated with url, nofollow_attr and trimmed.",substitute result for trimmed var0 middle is string var1 formated with url var2 and trimmed.,"middle = '<a href='%s'%s>%s</a>' % ( url , nofollow_attr , trimmed )","middle = '<a href='%s'%s>%s</a>' %(url, var2, trimmed)"
"substitute elements of middle from the beginning to the negative length of closing, for middle.","substitute elements of middle from beginning to negative length of closing, for middle.",middle = middle [ : - len ( closing ) ],middle = middle [ : - len ( closing ) ]
"substitute elements of middle from the beginning to the negative length of punctuation, for middle.","substitute elements of middle from beginning to negative length of punctuation, for middle.",middle = middle [ : - len ( punctuation ) ],middle = middle [ : - len ( punctuation ) ]
"substitute elements of middle from length of opening index to the end, for middle.","substitute elements of middle from length of opening index to end, for middle.",middle = middle [ len ( opening ) : ],middle = middle [ len ( opening ) : ]
"call the function middleware_class with 2 arguments: unpacked list m_args and unpacked dictionary m_kwargs,",call function var0 with 2 arguments: unpacked list var1 and unpacked dict var3 ,"middleware = middleware_class ( * m_args , ** m_kwargs )","middleware = var0 ( * var1 , ** var3 )"
"call the method loader.graph.forwards_plan with argument a tuple, with 2 elements: app_label and migration_name,","call method loader.graph var1 with argument tuple, with 2 elements: var2 and var4 ","migration . ancestry = loader . graph . forwards_plan ( ( app_label , migration_name ) )","migration . ancestry = loader . graph . var1 ( ( var2 , var4 ) )"
"call the method migration.ancestry.index with an argument common_ancestor, increment the result by one,","call method var0 with argument var1 increment result by one,",migration . branch = migration . ancestry [ ( migration . ancestry . index ( common_ancestor ) + 1 ) : ],migration . branch = migration . ancestry [ migration . ancestry . index ( var1 ) + 1 : ]
"call the method loader.get_migration with arguments node_app and node_name, extend the migration.merged_operations with the operations field of the result.",call method loader var1 with arguments var2 and var3 extend migration var6 with operations field of result.,"migration . merged_operations . extend ( loader . get_migration ( node_app , node_name ) . operations )","migration . var6 . extend ( loader . var1 ( var2 , var3 ) . operations )"
"slice migration.ancestry list from the last result as an starting index to the end, substitute the slice for migration.branch.   migration.merged_operations is an empty list.","slice var0 list from last result as starting index to end, substitute slice for var1 migration var4 is empty list.",migration . merged_operations = [ ],migration . var4 = [ ]
"call the executor.loader.get_migration_by_prefix with app_label and migration_name, substitute the result for migration.",call executor.loader var1 with var2 and var4 substitute result for migration.,"migration = executor . loader . get_migration_by_prefix ( app_label , migration_name )","migration = executor . loader . var1 ( var2 , var4 )"
"call the executor.loader.get_migration_by_prefix with app_label and migration_name with arguments, substitute the result fr migration.","call executor.loader var1 with var2 and var4 with arguments, substitute result fr migration.","migration = executor . loader . get_migration_by_prefix ( app_label , migration_name )","migration = executor . loader . var1 ( var2 , var4 )"
"call the method executor.loader.get_migration_by_prefix with arguments app_label, migration_name, substitute the result for migration.",call method executor.loader var1 with arguments var2 var4 substitute result for migration.,"migration = executor . loader . get_migration_by_prefix ( app_label , migration_name )","migration = executor . loader . var1 ( var2 , var4 )"
"call the method loader.get_migration with arguments app_label and migration_name, substitute the result for migration.",call method loader var1 with arguments var2 and var4 substitute result for migration.,"migration = loader . get_migration ( app_label , migration_name )","migration = loader . var1 ( var2 , var4 )"
"call the method writer.as_string, substitute the result for migration_string.",call method writer var1 substitute result for var2 ,migration_string = writer . as_string ( ),var2 = writer . var1 ( )
"call the function os.path.dirname with an argument writer.path, substitute the result for migrations_directory.",call function os.path.dirname with argument var0 substitute result for var1 ,migrations_directory = os . path . dirname ( writer . path ),var1 = os . path . dirname ( var0 )
"where '%s' is replaced with migration_name and app_label.   migrations_to_squash is a list created dynamically with elements: return value of the method executor.loader.get_migration called,","var0 var1 is replaced with var2 and var4 var7 is list created dynamically with elements: return value of method executor.loader var10 called,","migrations_to_squash = [ executor . loader . get_migration ( al , mn ) for al , mn in executor . loader . graph . forwards_plan ( ( migration . app_label , migration . name ) ) if al == migration . app_label ]","var7 = [ executor . loader . var10 ( al , mn ) for al , mn in executor . loader . graph . forwards_plan ( ( migration . var4 , migration . name ) ) if al == migration . var4 ]"
mime_type is a string 'application/atom+xml; charset=utf-8'.,var0 is string var1.,mime_type = 'application/atom+xml; charset=utf-8',var0 = var1
mime_type is a string 'application/rss+xml; charset=utf-8'.,var0 is string var1.,mime_type = 'application/rss+xml; charset=utf-8',var0 = var1
"call the method MIMEMessage.__setitem__ with arguments self, name and val.","call method var0 __setitem__ with arguments self, name and var2 ","MIMEMessage . __setitem__ ( self , name , val )","var0 . __setitem__ ( self , name , var2 )"
"call the method MIMEMultipart.__init__ with 5 arguments: self, _subtype, boundary, _subparts and unpacked dictionary _params.",call method var0 __init__ with 5 arguments: self var1 boundary var2 and unpacked dict var3 ,"MIMEMultipart . __init__ ( self , _subtype , boundary , _subparts , ** _params )","var0 . __init__ ( self , var1 , boundary , var2 , ** var3 )"
"call the method MIMEMultipart.__setitem__ with arguments self, name and val.","call method var0 __setitem__ with arguments self, name and var1 ","MIMEMultipart . __setitem__ ( self , name , val )","var0 . __setitem__ ( self , name , var1 )"
"call the method MIMEText.__init__ with 4 arguments: self, text, subtype and charset.","call method var0 __init__ with 4 arguments: self, text var2 and var3 ","MIMEText . __init__ ( self , text , subtype , charset )","var0 . __init__ ( self , text , var2 , var3 )"
"call the method MIMEText.__init__ with 4 arguments: self, text, subtype and None.","call method var0 __init__ with 4 arguments: self, text var2 and var3 ","MIMEText . __init__ ( self , text , subtype , None )","var0 . __init__ ( self , text , var2 , var3 )"
"call the method MIMEText.__setitem__ with arguments self, name and val.","call method var0 __setitem__ with arguments self, name and var2 ","MIMEText . __setitem__ ( self , name , val )","var0 . __setitem__ ( self , name , var2 )"
"call the mimetypes.guess_type with an argument filename, assign the result to the mimetype and _, respectively.","call mimetypes var2 with argument filename, assign result to var1 and _, respectively.","mimetype , _ = mimetypes . guess_type ( filename )","var1 , _ = var1s . var2 ( filename )"
substitute DEFAULT_ATTACHMENT_MIME_TYPE for mimetype.,substitute var0 for var1 ,mimetype = DEFAULT_ATTACHMENT_MIME_TYPE,var1 = var0
"call the method m.group with an argument string 'min', convert the result into a string, substitute it for min.","call method var0 with argument string var1, convert result into string, substitute it for min.",min = int ( m . group ( 'min' ) ),min = int ( m . group ( var1 ) )
"substitute DEFAULT_MIN_NUM for min_num,",substitute var0 for var1 ,min_num = DEFAULT_MIN_NUM,var1 = var0
MIN_NUM_FORM_COUNT is a string 'MIN_NUM_FORMS'.,var0 is string var1.,MIN_NUM_FORM_COUNT = 'MIN_NUM_FORMS',var0 = var1
"substitute string ""Enter at least one %s."", with '%s' replaced by label, for missing_args_message.","substitute string var0, with var1 replaced by label, for var2 ",missing_args_message = 'Enter at least one %s.' % label,var2 = 'Enter at least one %s.' % label
"missing_args_message is an string ""Enter at least one application label."".",var0 is string var1.,missing_args_message = 'Enter at least one application label.',var0 = 'Enter at least one application label.'
"project name in the current directory or optionally in the given directory..   missing_args_message is a string ""You must provide a project name."".",project name in current directory or optionally in given directory var1 is string var3.,missing_args_message = 'You must provide a project name.',var1 = 'You must provide a project name.'
"missing_args_message is a string ""You must provide an application name."".",var0 is string var1.,missing_args_message = 'You must provide an application name.',var0 = 'You must provide an application name.'
"missing_args_message is a tuple containing a string ""No database fixture specified. Please provide the """,missing_args_message is tuple containing string var0,missing_args_message = ( 'No database fixture specified. Please provide the ' 'path of at least one fixture in the command line.' ),missing_args_message = ( 'No database fixture specified.Please provide the path of at least one fixture in the command line.' )
"substitute the resulting list for none_model_fields.   missing_fields is difference between set containing none_model_fields and set containing result of the method,","substitute resulting list for var0 var3 is difference between set containing var0 and set containing result of method,",missing_fields = ( set ( none_model_fields ) - set ( new_class . declared_fields . keys ( ) ) ),var3 = set ( var0 ) - set ( new_class . declared_fields . keys ( ) )
mixed_subtype is a string 'mixed'.,var0 is string var1.,mixed_subtype = 'mixed',var0 = var1
call the function import_module with an argument mod_name.,call function var0 with argument var1 ,mod = import_module ( mod_name ),mod = var0 ( var1 )
"call the function import_module with an argument taglib_module, substitute the result for mod.",call function var0 with argument var1 substitute result for mod.,mod = import_module ( taglib_module ),mod = var0 ( var1 )
"call the function get_mod_func with an argument lookup_view, store the result in mod_name and func_name, respectively.",call function var0 with argument var1 store result in var3 and var5 respectively.,"mod_name , func_name = get_mod_func ( lookup_view )","var3 , var5 = var0 ( var1 )"
"mode is a string 'wb' is chunk is instance of the type bytes, otherwise mode is a string 'wt'.","mode is string var0 is chunk is instance of type bytes, otherwise mode is string var1.","mode = 'wb' if isinstance ( chunk , bytes ) else 'wt'","mode = var0 if isinstance ( chunk , bytes ) else 'wt'"
"call the function stat.S_IMODE with argument st.st_mode, substitute the result for mode.",call function var0 var1 with argument st var3 substitute result for mode.,mode = stat . S_IMODE ( st . st_mode ),mode = var0 . var1 ( st . var3 )
"remove first element from model_dependencies, assign it to model and deps, respectively.",remove first element from var0 assign it to model and var1 respectively.,"model , deps = model_dependencies . pop ( )","model , var1 = var0 . pop ( )"
"call the function _get_model with an argument value under the 'model' key of the d dictionary, substitute the result for Model.","call function var0 with argument value under var1 key of d dict, substitute result for var2 ",Model = _get_model ( d [ 'model' ] ),var2 = var0 ( d [ var1 ] )
"call the method app_config.get_model with an argument model_label, substitute the result for model.",call method var0 var2 with argument var3 substitute result for model.,model = app_config . get_model ( model_label ),model = var0 . var2 ( var3 )
"call the method apps.get_model with exclude as an argument, substitute it for model.","call method apps var1 with exclude as argument, substitute it for model.",model = apps . get_model ( exclude ),model = apps . var1 ( exclude )
model is None.,model is var0 ,model = None,model = var0
call the method self._get_model_from_node with arguments node and string 'model'.,call method var0 with arguments node and string var1.,"Model = self . _get_model_from_node ( node , 'model' )","Model = var0 ( node , var1 )"
substitute self.obj for model.,substitute var0 for model.,model = self . obj,model = var0
append a tuple containing 2 elements: model and deps to model_dependencies.,append tuple containing 2 elements: model and var0 to var1 ,"model_dependencies . append ( ( model , deps ) )","var1 . append ( ( model , var0 ) )"
call the methof model_dependencies.reverse.,call var0 var1 reverse.,model_dependencies . reverse ( ),var1 . reverse ( )
model_dependencies is an empty list.,var0 is empty list.,model_dependencies = [ ],var0 = [ ]
"model._meta.app_label and model._meta.object_name joined into a string, with separator '.',   result joined into a string, separated by string ', ' for every model and deps in sorted list of elements skipped sorted by key:   return value of the lambda function with an argument obj, and result the __name__ field of the first element of obj.   substitute skipped for model_dependencies.","model._meta var1 and model._meta var3 joined into string, with separator var6 var7 result joined into string, separated by string var10 for every model and var11 in sorted list of elements skipped sorted by key: return value of lambda function with argument var4 and result var12 field of first element of var4 var7 substitute skipped for var13 ",model_dependencies = skipped,var13 = skipped
"call the method Model._meta.get_all_field_names, substitute the result for model_fields.",call method var0 _meta var2 substitute result for var3 ,model_fields = Model . _meta . get_all_field_names ( ),var3 = var0 . _meta . var2 ( )
"call the method node.getAttribute with an argument attr, substitute the result for model_identifier.",call method node var1 with argument var2 substitute result for var3 ,model_identifier = node . getAttribute ( attr ),var3 = node . var1 ( var2 )
append model to model_list.,append model to var0 ,model_list . append ( model ),var0 . append ( model )
model_list is an empty list.,var0 is empty list.,model_list = [ ],var0 = [ ]
"call the method app_config.get_models, substitute the result fr model_list.",call method var0 var2 substitute result fr var3 ,model_list = app_config . get_models ( ),var3 = var0 . var2 ( )
add model to models set.,add model to models set.,models . add ( model ),models . add ( model )
"call the models.Model.save_base method with arguments self.object, using as using and raw set to boolean True.",call models var0 var2 method with arguments var3 using as using and raw set to boolean var4 ,"models . Model . save_base ( self . object , using = using , raw = True )","models . var0 . var2 ( var3 , using = using , raw = var4 )"
"call the method models.signals.post_migrate.send with 5 arguments: sender set to app_config, app_config set to app_config,",call method models.signals var1 send with 5 arguments: sender set to var2 app_config set to var2 ,"models . signals . post_migrate . send ( sender = app_config , app_config = app_config , verbosity = verbosity , interactive = interactive , using = db )","models . signals . var1 . send ( sender = var2 , var2 = var2 , verbosity = verbosity , interactive = interactive , using = db )"
"verbosity set to verbosity, interactive set to interactive and using set to db.   call the method models.signals.post_syncdb.send with 6 arguments: sender set to app_config.models_module,","verbosity set to verbosity, interactive set to interactive and using set to db var0 call method models.signals var3 send with var0 arguments: sender set to var4 var6 ","models . signals . post_syncdb . send ( sender = app_config . models_module , app = app_config . models_module , created_models = created_models , verbosity = verbosity , interactive = interactive , db = db )","models.var0ignals.var0ar3.var0end(sender var0 var4.var0ar6,var0app var0 var4.var0ar6,var0created_models var0 created_models,var0verbosity var0 verbosity,var0interactive var0 interactive,var0db var0 db)"
"call the method models.signals.pre_migrate.send with 5 arguments: sender set to app_config, app_config set to app_config,",call method models.signals var1 send with 5 arguments: sender set to var2 app_config set to var2 ,"models . signals . pre_migrate . send ( sender = app_config , app_config = app_config , verbosity = verbosity , interactive = interactive , using = db )","models . signals . var1 . send ( sender = var2 , var2 = var2 , verbosity = verbosity , interactive = interactive , using = db )"
"verbosity set to verbosity, interactive set to interactive and using set to db.   call the method models.signals.pre_syncdb.send with 6 arguments: sender set to app_config.models_module,","verbosity set to verbosity, interactive set to interactive and using set to db var0 call method models.signals var3 send with var0 arguments: sender set to var4 var6 ","models . signals . pre_syncdb . send ( sender = app_config . models_module , app = app_config . models_module , create_models = create_models , verbosity = verbosity , interactive = interactive , db = db )","models.var0ignals.var0ar3.var0end(sender var0 var4.var0ar6,var0app var0 var4.var0ar6,var0create_models var0 create_models,var0verbosity var0 verbosity,var0interactive var0 interactive,var0db var0 db)"
models is a string 'models',models is string var0,models = 'models',models = var0
"call the method app_config.get_models with include_auto_created set to boolean True, substitute the result for models.",call method var0 var2 with var3 set to boolean var5 substitute result for models.,models = app_config . get_models ( include_auto_created = True ),models = var0 . var2 ( var3 = var5 )
models is an empty set.,models is empty set.,models = set ( ),models = set ( )
modified_code is None.,var0 is var1 ,modified_code = None,var0 = var1
"call the function _import_module with an argument self.mod, substitute the result for module.",call function var0 with argument var1 substitute result for module.,module = _import_module ( self . mod ),module = var0 ( var1 )
"replace '%s' in string '%s.management.commands.%s' with app_name and name, respectively, use it as an result for the call to the","replace var0 in string var1 with var3 and name, respectively, use it as result for call to the","module = import_module ( '%s.management.commands.%s' % ( app_name , name ) )","module = import_module ( var1 % ( var3 , name ) )"
"and third element of result of the function sys.exc_info.   call the function import_module with an argument module_path, substitute the result for module.",and third element of result of function sys var1 call function var3 with argument var5 substitute result for module.,module = import_module ( module_path ),module = var3 ( var5 )
"call the function importlib.import_module with 2 arguments: flup_module converted to string and appended to '.' character, and string 'flup', substitute the result for module.","call function importlib var1 with 2 arguments: var2 converted to string and appended to var5 character, and string var6, substitute result for module.","module = importlib . import_module ( '.%s' % flup_module , 'flup' )","module = importlib . var1 ( '.%s' % var2 , var6 )"
"call the function importlib.import_module with an argument serializer_module, substitute it for module.",call function importlib var1 with argument var2 substitute it for module.,module = importlib . import_module ( serializer_module ),module = importlib . var1 ( var2 )
"create a instance of a class BadSerializerModule from the object base class, with elements Deserializer set to bad_serializer and Serializer set to bad_serializer.","create instance of class var0 from object base class, with elements var2 set to var4 and var1 set to var4 ","module = type ( 'BadSerializerModule' , ( object , ) , { 'Deserializer' : bad_serializer , 'Serializer' : bad_serializer , } )","module = type ( 'var0' , ( object , ) , { 'var2' : var4 , 'var1' : var4 } )"
"split dotted_path into two parts from the right at the '.' character, assign the result to module_path and class_name, respectively.","split var0 into two parts from right at var2 character, assign result to var3 and var5 respectively.","module_path , class_name = dotted_path . rsplit ( '.' , 1 )","var3 , var5 = var0 . rsplit ( var2 , 1 )"
substitute _urllib_error_moved_attributes for Module_six_moves_urllib_error._moved_attributes.,substitute var0 for var1 _moved_attributes.,Module_six_moves_urllib_error . _moved_attributes = _urllib_error_moved_attributes,var1 . _moved_attributes = var0
substitute _urllib_parse_moved_attributes for Module_six_moves_urllib_parse._moved_attributes.,substitute var0 for var1 _moved_attributes.,Module_six_moves_urllib_parse . _moved_attributes = _urllib_parse_moved_attributes,var1 . _moved_attributes = var0
substitute _urllib_request_moved_attributes for Module_six_moves_urllib_request._moved_attributes.,substitute var0 for var1 _moved_attributes.,Module_six_moves_urllib_request . _moved_attributes = _urllib_request_moved_attributes,var1 . _moved_attributes = var0
substitute _urllib_response_moved_attributes for Module_six_moves_urllib_response._moved_attributes.,substitute var0 for var1 _moved_attributes.,Module_six_moves_urllib_response . _moved_attributes = _urllib_response_moved_attributes,var1 . _moved_attributes = var0
substitute _urllib_robotparser_moved_attributes for Module_six_moves_urllib_robotparser._moved_attributes.,substitute var0 for var1 _moved_attributes.,Module_six_moves_urllib_robotparser . _moved_attributes = _urllib_robotparser_moved_attributes,var1 . _moved_attributes = var0
module_values is a set created from the elements of sys.modules.values method return value.,var0 is set created from elements of var1 method return value.,module_values = set ( sys . modules . values ( ) ),var0 = set ( sys . modules . values ( ) )
"call the method _format_modules_cache.setdefault with 2 arguments: lang and list created out of the results of the function,","call method _format_modules_cache.setdefault with 2 arguments: var0 and list created out of results of function,","modules = _format_modules_cache . setdefault ( lang , list ( iter_format_modules ( lang , settings . FORMAT_MODULE_PATH ) ) )","modules = _format_modules_cache . setdefault ( var0 , list ( iter_format_modules ( var0 , settings . FORMAT_MODULE_PATH ) ) )"
"call the method m.group with an argument string 'mon', convert the result to lowercase, use it as an argument for the call to the,","call method var0 with argument string var1, convert result to lowercase, use it as argument for call to the,",month = MONTHS . index ( m . group ( 'mon' ) . lower ( ) ) + 1,month = MONTHS . index ( m . group ( var1 ) . lower ( ) ) + 1
"decrement date.month by integer 1, use the result as an key to obtain the value from the months dictionary, substitute it for month.","decrement var0 by integer 1, use result as key to obtain value from months dict, substitute it for month.",month = months [ date . month - 1 ],month = months [ var0 - 1 ]
month_field is a string '%s_month'.,var0 is string var1.,month_field = '%s_month',var0 = var1
"MONTHS is a list with 12 elements: strings 'jan', 'feb', 'mar', 'apr', 'may', 'jun', 'jul', 'aug', 'sep', 'oct', 'nov', and 'dec'.","MONTHS is list with 12 elements: strings var0, var1, var2, var3, var4, var5, var7, var9, var10, var11, var12, and var13.",MONTHS = 'jan feb mar apr may jun jul aug sep oct nov dec' . split ( ),MONTHS = 'jan feb mar apr may jun jul aug sep oct nov dec' . split ( )
"months is a tuple with 12 elements: strings 'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov' and 'Dec'.","months is tuple with 12 elements: strings var0, var1, var3, var5, var7, var9, var12, var15, var17, var19, var21 and var23.","months = ( 'Jan' , 'Feb' , 'Mar' , 'Apr' , 'May' , 'Jun' , 'Jul' , 'Aug' , 'Sep' , 'Oct' , 'Nov' , 'Dec' , )","months = ( var0 , 'Feb' , 'Mar' , 'Apr' , 'May' , 'Jun' , 'Jul' , 'Aug' , 'Sep' , 'Oct' , 'Nov' , 'Dec' )"
"MONTHS is an dictionary with 12 entries: result of the call to the function _ with an argument string 'January' for 1,","MONTHS is dict with 12 entries: result of call to function var0 with argument string var1 for 1,","MONTHS = { 1 : _ ( 'January' ) , 2 : _ ( 'February' ) , 3 : _ ( 'March' ) , 4 : _ ( 'April' ) , 5 : _ ( 'May' ) , 6 : _ ( 'June' ) , 7 : _ ( 'July' ) , 8 : _ ( 'August' ) , 9 : _ ( 'September' ) , 10 : _ ( 'October' ) , 11 : _ ( 'November' ) , 12 : _ ( 'December' ) }","MONTHS = { ( 1 ) : var0 ( var1 ) , ( 2 ) : var0 ( 'February' ) , ( 3 ) : var0 ( 'March' ) , ( 4 ) : var0 ( 'April' ) , ( 5 ) : var0 ( 'May' ) , ( 6 ) : var0 ( 'June' ) , ( 7 ) : var0 ( 'July' ) , ( 8 ) : var0 ( 'August' ) , ( 9 ) : var0 ( 'September' ) , ( 10 ) : var0 ( 'October' ) , ( 11 ) : var0 ( 'November' ) , ( 12 ) : var0 ( 'December' ) }"
"result of the call to the function _ with an argument string 'February' for 2,   result of the call to the function _ with an argument string 'March' for 3,   result of the call to the function _ with an argument string 'April' for 4,   result of the call to the function _ with an argument string 'May' for 5,   result of the call to the function _ with an argument string 'June' for 6,   result of the call to the function _ with an argument string 'July' for 7,   result of the call to the function _ with an argument string 'August' for 8,   result of the call to the function _ with an argument string 'September' for 9,   result of the call to the function _ with an argument string 'October' for 10,   result of the call to the function _ with an argument string 'November' for 11,   and result of the call to the function _ with an argument string 'December' for 12.   MONTHS_3 is an dictionary with 12 entries: result of the call to the function _ with an argument string 'jan' for 1,","result of call to function var0 with argument string var12 for 2 var13 result of call to function var0 with argument string var24 for 3 var13 result of call to function var0 with argument string var26 for 4 var13 result of call to function var0 with argument string var28 for 5 var13 result of call to function var0 with argument string var30 for 6 var13 result of call to function var0 with argument string var32 for 7 var13 result of call to function var0 with argument string var34 for 8 var13 result of call to function var0 with argument string var36 for 9 var13 result of call to function var0 with argument string var38 for 10 var13 result of call to function var0 with argument string var40 for 11 var13 and result of call to function var0 with argument string var42 for 12 var44 is dict with 12 entries: result of call to function var0 with argument string var46 for 1,","MONTHS_3 = { 1 : _ ( 'jan' ) , 2 : _ ( 'feb' ) , 3 : _ ( 'mar' ) , 4 : _ ( 'apr' ) , 5 : _ ( 'may' ) , 6 : _ ( 'jun' ) , 7 : _ ( 'jul' ) , 8 : _ ( 'aug' ) , 9 : _ ( 'sep' ) , 10 : _ ( 'oct' ) , 11 : _ ( 'nov' ) , 12 : _ ( 'dec' ) }","var44 = { ( 1 ) : var0 ( var46 ) , ( 2 ) : var0 ( 'feb' ) , ( 3 ) : var0 ( 'mar' ) , ( 4 ) : var0 ( 'apr' ) , ( 5 ) : var0 ( 'may' ) , ( 6 ) : var0 ( 'jun' ) , ( 7 ) : var0 ( 'jul' ) , ( 8 ) : var0 ( 'aug' ) , ( 9 ) : var0 ( 'sep' ) , ( 10 ) : var0 ( 'oct' ) , ( 11 ) : var0 ( 'nov' ) , ( 12 ) : var0 ( 'dec' ) }"
"result of the call to the function _ with an argument string 'feb' for 2,   result of the call to the function _ with an argument string 'mar' for 3,   result of the call to the function _ with an argument string 'apr' for 4,   result of the call to the function _ with an argument string 'may' for 5,   result of the call to the function _ with an argument string 'jun' for 6,   result of the call to the function _ with an argument string 'jul' for 7,   result of the call to the function _ with an argument string 'aug' for 8,   result of the call to the function _ with an argument string 'sep' for 9,   result of the call to the function _ with an argument string 'oct' for 10,   result of the call to the function _ with an argument string 'nov' for 11,   result of the call to the function _ with an argument string 'dec' for 12.   MONTHS_3_REV is an dictionary with 12 entries: 1 for 'jan', 2 for 'feb', 3 for 'mar', 4 for 'apr', 5 for 'may', 6 for 'jun',","result of call to function var0 with argument string var11 for 2 var13 result of call to function var0 with argument string var24 for 3 var13 result of call to function var0 with argument string var26 for 4 var13 result of call to function var0 with argument string var28 for 5 var13 result of call to function var0 with argument string var30 for 6 var13 result of call to function var0 with argument string var34 for 7 var13 result of call to function var0 with argument string var36 for 8 var13 result of call to function var0 with argument string var37 for 9 var13 result of call to function var0 with argument string var38 for 10 var13 result of call to function var0 with argument string var39 for 11 var13 result of call to function var0 with argument string var40 for 12 var41 is dict with 12 entries: 1 for var42, 2 for var11, 3 for var24, 4 for var26, 5 for var28, 6 for var30,","MONTHS_3_REV = { 'jan' : 1 , 'feb' : 2 , 'mar' : 3 , 'apr' : 4 , 'may' : 5 , 'jun' : 6 , 'jul' : 7 , 'aug' : 8 , 'sep' : 9 , 'oct' : 10 , 'nov' : 11 , 'dec' : 12 }","var41 = { 'jan' : 1 , var11 : 2 , 'mar' : 3 , 'apr' : 4 , 'may' : 5 , 'jun' : 6 , 'jul' : 7 , 'aug' : 8 , 'sep' : 9 , 'oct' : 10 , 'nov' : 11 , 'dec' : 12 }"
"result of the function pgettext_lazy with 2 arguments: strings 'abbrev. month' and 'Feb.' for 2,   result of the function pgettext_lazy with 2 arguments: strings 'abbrev. month' and 'March' for 3,   result of the function pgettext_lazy with 2 arguments: strings 'abbrev. month' and 'April' for 4,   result of the function pgettext_lazy with 2 arguments: strings 'abbrev. month' and 'May' for 5,   result of the function pgettext_lazy with 2 arguments: strings 'abbrev. month' and 'June' for 6,   result of the function pgettext_lazy with 2 arguments: strings 'abbrev. month' and 'July' for 7,   result of the function pgettext_lazy with 2 arguments: strings 'abbrev. month' and 'Aug.' for 8,   result of the function pgettext_lazy with 2 arguments: strings 'abbrev. month' and 'Sept.' for 9,   result of the function pgettext_lazy with 2 arguments: strings 'abbrev. month' and 'Oct.' for 10,   result of the function pgettext_lazy with 2 arguments: strings 'abbrev. month' and 'Nov.' for 11,   result of the function pgettext_lazy with 2 arguments: strings 'abbrev. month' and 'Dec.' for 12,   MONTHS_ALT is an dictionary with 12 entries: result of the function pgettext_lazy with 2 arguments: 'alt. month' and 'January' for 1,","result of function var0 with 2 arguments: strings var24 and var35 for 2 var38 result of function var0 with 2 arguments: strings var24 and var49 for 3 var38 result of function var0 with 2 arguments: strings var24 and var51 for 4 var38 result of function var0 with 2 arguments: strings var24 and var53 for 5 var38 result of function var0 with 2 arguments: strings var24 and var55 for 6 var38 result of function var0 with 2 arguments: strings var24 and var57 for 7 var38 result of function var0 with 2 arguments: strings var24 and var59 for 8 var38 result of function var0 with 2 arguments: strings var24 and var62 for 9 var38 result of function var0 with 2 arguments: strings var24 and var65 for 10 var38 result of function var0 with 2 arguments: strings var24 and var68 for 11 var38 result of function var0 with 2 arguments: strings var24 and var71 for 12 var74 is dict with 12 entries: result of function var0 with 2 arguments: var76 and var77 for 1,","MONTHS_ALT = { 1 : pgettext_lazy ( 'alt. month' , 'January' ) , 2 : pgettext_lazy ( 'alt. month' , 'February' ) , 3 : pgettext_lazy ( 'alt. month' , 'March' ) , 4 : pgettext_lazy ( 'alt. month' , 'April' ) , 5 : pgettext_lazy ( 'alt. month' , 'May' ) , 6 : pgettext_lazy ( 'alt. month' , 'June' ) , 7 : pgettext_lazy ( 'alt. month' , 'July' ) , 8 : pgettext_lazy ( 'alt. month' , 'August' ) , 9 : pgettext_lazy ( 'alt. month' , 'September' ) , 10 : pgettext_lazy ( 'alt. month' , 'October' ) , 11 : pgettext_lazy ( 'alt. month' , 'November' ) , 12 : pgettext_lazy ( 'alt. month' , 'December' ) }","var74 = { ( 1 ) : var0 ( 'alt.month' , 'January' ) , ( 2 ) : var0 ( 'alt.month' , 'February' ) , ( 3 ) : var0 ( 'alt.month' , var49 ) , ( 4 ) : var0 ( 'alt.month' , 'April' ) , ( 5 ) : var0 ( 'alt.month' , 'May' ) , ( 6 ) : var0 ( 'alt.month' , 'June' ) , ( 7 ) : var0 ( 'alt.month' , 'July' ) , ( 8 ) : var0 ( 'alt.month' , 'August' ) , ( 9 ) : var0 ( 'alt.month' , 'September' ) , ( 10 ) : var0 ( 'alt.month' , 'October' ) , ( 11 ) : var0 ( 'alt.month' , 'November' ) , ( 12 ) : var0 ( 'alt.month' , 'December' ) }"
"7 for 'jul', 8 for 'aug', 9 for 'sep', 10 for 'oct', 11 for 'nov' and 12 for 'dec'.   MONTHS_AP is an dictionary with 12 entries: result of the function pgettext_lazy with 2 arguments: 'abbrev. month' and 'Jan.' for 1,","7 for var0 var6 for var1 var6 for var2, 10 for var3, 11 for var4 and 12 for var5 var8 is dict with 12 entries: result of function var10 with var6 arguments: var12 and var14 for var6 ","MONTHS_AP = { 1 : pgettext_lazy ( 'abbrev. month' , 'Jan.' ) , 2 : pgettext_lazy ( 'abbrev. month' , 'Feb.' ) , 3 : pgettext_lazy ( 'abbrev. month' , 'March' ) , 4 : pgettext_lazy ( 'abbrev. month' , 'April' ) , 5 : pgettext_lazy ( 'abbrev. month' , 'May' ) , 6 : pgettext_lazy ( 'abbrev. month' , 'June' ) , 7 : pgettext_lazy ( 'abbrev. month' , 'July' ) , 8 : pgettext_lazy ( 'abbrev. month' , 'Aug.' ) , 9 : pgettext_lazy ( 'abbrev. month' , 'Sept.' ) , 10 : pgettext_lazy ( 'abbrev. month' , 'Oct.' ) , 11 : pgettext_lazy ( 'abbrev. month' , 'Nov.' ) , 12 : pgettext_lazy ( 'abbrev. month' , 'Dec.' ) }","var8 var6 var6 1: var10('var13.var6onth'var6 var14),var62: var10('var13.var6onth'var6var6'Feb.var6ar6var6,var63: var10('var13.var6onth'var6var6'March'var6,var64: var10('var13.var6onth'var6var6'April'var6,var65: var10('var13.var6onth'var6var6'May'var6,var66: var10('var13.var6onth'var6var6'June'var6,var67: var10('var13.var6onth'var6var6'July'var6,var68: var10('var13.var6onth'var6var6'Aug.var6ar6var6,var69: var10('var13.var6onth'var6var6'Sept.var6ar6var6,var610: var10('var13.var6onth'var6var6'Oct.var6ar6var6,var611: var10('var13.var6onth'var6var6'Nov.var6ar6var6,var612: var10('var13.var6onth'var6var6'Dec.var6ar6var6 }"
substitute http_cookies.Morsel for Morsel.,substitute var0 var2 for var2 ,Morsel = http_cookies . Morsel,var2 = var0 . var2
"append string '.moves' to __name__, use it as an argument to instantiate _MovedItems class, assign it to moves,","append string var0 to var1 use it as argument to instantiate _MovedItems class, assign it to moves,",moves = sys . modules [ __name__ + '.moves' ] = _MovedItems ( __name__ + '.moves' ),moves = sys . modules [ var1 + var0 ] = _MovedItems ( var1 + var0 )
call the method msg.attach with an argument attachment.,call method var0 with argument attachment.,msg . attach ( attachment ),var0 ( attachment )
call the method msg.attach with an argument body_msg.,call method var0 with argument var1 ,msg . attach ( body_msg ),var0 ( var1 )
call the msg.attach with an argument body_msg.,call var0 with argument var1 ,msg . attach ( body_msg ),var0 ( var1 )
"call the method self._create_attachment with an unpacked list attachment as an argument, use the result as an argument for the call to the msg.attach method.","call method var0 with unpacked list attachment as argument, use result as argument for call to var1 method.",msg . attach ( self . _create_attachment ( * attachment ) ),var1 ( self . _create_attachment ( * attachment ) )
"call the method self._create_mime_attachment with unpacked list alternative as an argument, use the result as an argument for the call to the msg.attach method.","call method var0 with unpacked list alternative as argument, use result as argument for call to var1 method.",msg . attach ( self . _create_mime_attachment ( * alternative ) ),var1 ( self . _create_mime_attachment ( * alternative ) )
"join elements of self.cc into a string separated by ', ', substitute the result for value under the 'Cc' key of msg dictionary.","join elements of var0 into string separated by var1, substitute result for value under var2 key of msg dict.","msg [ 'Cc' ] = ', ' . join ( self . cc )",msg [ 'Cc' ] = var1 . join ( var0 )
"call the formatdate function, substitute it for value under the 'Date' key of msg dictionary.","call var0 function, substitute it for value under var1 key of msg dict.",msg [ 'Date' ] = formatdate ( ),msg [ var1 ] = var0 ( )
"call the method self.extra_headers.get with string 'From' and self.from_email as arguments, substitute the result for value under the 'From' key of msg dictionary.","call method self var1 get with string var2 and self var5 as arguments, substitute result for value under var2 key of msg dict.","msg [ 'From' ] = self . extra_headers . get ( 'From' , self . from_email )","msg [ var2 ] = self . var1 . get ( var2 , self . var5 )"
"call the make_msgid function, substitute it for value under the 'Message-ID' key of msg dictionary.","call var0 function, substitute it for value under var2 key of msg dict.",msg [ 'Message-ID' ] = make_msgid ( ),msg [ var2 ] = var0 ( )
substitute self.subject for value under the 'Subject' key of msg dictionary.,substitute var0 for value under var1 key of msg dict.,msg [ 'Subject' ] = self . subject,msg [ var1 ] = var0
"call the method self.extra_headers.get with arguments: string 'To' and joined string from self.to elements separated by ', ',","call method self var1 get with arguments: string var2 and joined string from self.to elements separated by var3,","msg [ 'To' ] = self . extra_headers . get ( 'To' , ', ' . join ( self . to ) )","msg [ var2 ] = self . var1 . get ( var2 , ', ' . join ( self . to ) )"
substitute value for value under name key of msg dictionary.,substitute value for value under name key of msg dict.,msg [ name ] = value,msg [ name ] = value
append newline character to msg.,append var0 character to msg.,msg += '\n',msg += '\n'
"substitute '%s' in the string '\n%s:\n%s\n', with group_name and formatted, substitute the result for msg.","substitute var0 in string var1, with var3 and formatted, substitute result for msg.","msg += '\n%s:\n%s\n' % ( group_name , formatted )","msg += var1 % ( var3 , formatted )"
"append string "" The domain name provided is not valid according to RFC 1034/1035."" to msg.",append string var0 to msg.,msg += ' The domain name provided is not valid according to RFC 1034/1035.',msg += ' The domain name provided is not valid according to RFC 1034/1035.'
"append string "" You may need to add %r to ALLOWED_HOSTS."" to msg, where '%s' is replaced with domain.",append string var0 to msg var1 var2 is replaced with domain.,msg += ' You may need to add %r to ALLOWED_HOSTS.' % domain,msg += ' You may need to add %r to ALLOWED_HOSTS.' % domain
"append string ""System check identified %s (%s silenced)."" to msg, replace first '%s' for: string ""no issues"",","append string var0 to msg, replace first var1 for: string var2,","msg += 'System check identified %s (%s silenced).' % ( 'no issues' if visible_issue_count == 0 else '1 issue' if visible_issue_count == 1 else '%s issues' % visible_issue_count , len ( all_issues ) - visible_issue_count , )","msg += 'System check identified %s(%s silenced).' % ( 'no issues' if visible_issue_count == 0 else '1 issue' if visible_issue_count == 1 else '%s issues' % visible_issue_count , len ( all_issues ) - visible_issue_count )"
append ending to msg.,append ending to msg.,msg += ending,msg += ending
"msg is a string '%sError importing module %s: ""%s""', where '%s' is replaced with error_prefix, dotted_path and e, respectively.","msg is string var0 var1 var2 is replaced with var3 var5 and e, respectively.","msg = '%sError importing module %s: '%s'' % (  error_prefix , dotted_path , e )","msg = '%sError importing module %s: var2' % ( var3 , var5 , e )"
"msg is a string 'Module ""%s"" does not define a ""%s"" attribute/class' formated with dotted_path and class_name, respectively.",msg is string var0 formated with var1 and var3 respectively.,"msg = 'Module '%s' does not define a '%s' attribute/class' % (  dotted_path , class_name )","msg = 'Module '%s' does not define a '%s' attribute/class' %( var1, var3)"
msg is an empty string.,msg is empty string.,msg = '',msg = ''
"msg is a string ""[%s] %s\n"", where '%s' are replaced with return value of the method self.log_date_time_string and formated args.",msg is string var0 var2 var3 are replaced with return value of method self var5 and formated var6 ,"msg = '[%s] %s\n' % ( self . log_date_time_string ( ) , format % args )","msg = '[var1] var1\n' % ( self . var5 ( ) , format % var6 )"
"msg is a string ""%s doesn't look like a module path"" formated with dotted_path.",msg is string var0 formated with var1 ,msg = '%s doesn't look like a module path' % dotted_path,msg = '%s doesn't look like a module path' % var1
"msg is a string ""Could not decode base64 data: %r"", where '%r' is replace with e.",msg is string var0 var1 var2 is replace with var3,msg = 'Could not decode base64 data: %r' % e,msg = 'Could not decode base64 data: %r' % e
"msg is a string ""Execution of %s failed: %s"", with '%s' replaced by self.program and errors.","msg is string var0, with var1 replaced by var2 and errors.","msg = 'Execution of %s failed: %s' % ( self . program , errors )","msg = 'Execution of %s failed: %s' % ( var2 , errors )"
"msg is a string ""Execution of %s failed"", with '%s' replaced by self.program.","msg is string var0, with var1 replaced by var2 ",msg = 'Execution of %s failed' % self . program,msg = 'Execution of %s failed' % var2
"msg is a string ""Invalid HTTP_HOST header: %r."", replace '%r' with host.","msg is string var0, replace var1 with host.",msg = 'Invalid HTTP_HOST header: %r.' % host,msg = 'Invalid HTTP_HOST header: %r.' % host
"replace '%s' in string ""System check identified some issues:\n%s"" with msg, substitute it for msg.","replace '%s' in string ""System check identified some issues:\n%s"" with msg, substitute it for msg.",msg = 'System check identified some issues:\n%s' % msg,msg = 'System check identified some issues:\n%s' % msg
"msg is an string ""Unclosed tag '%s'. Looking for one of: %s "", where '%s' is replaced with command,","msg is string var0 var2 var1 is replaced with command,","msg = 'Unclosed tag '%s'. Looking for one of: %s ' % ( command , ', ' . join ( parse_until ) )","msg = 'Unclosed tag var1.Looking for one of: %s ' % ( command , ', ' . join ( parse_until ) )"
"msg is an string ""django.utils.text.javascript_quote() is deprecated. Use django.utils.html.escapejs() instead."".",msg is string var0.,msg = ( 'django.utils.text.javascript_quote() is deprecated. ' 'Use django.utils.html.escapejs() instead.' ),msg = ( 'django.utils.text.javascript_quote() is deprecated.Use django.utils.html.escapejs() instead.' )
"msg is a string """"The included urlconf '{name}' does not appear to have any patterns in it.",msg is string var0The included var3 var4 does not appear to have any patterns in it.,msg = (  'The included urlconf '{name}' does not appear to have any '  'patterns in it. If you see valid patterns in the file then '  'the issue is probably caused by a circular import.'  ),msg = ( 'var1 included var3 var4 does not appear to have any patterns in it.If you see valid patterns in the file then the issue is probably caused by a circular import.' )
"msg is a tuple containing one initial entry: a string ""WSGI application '%(app_path)s' could not be loaded; Error importing module: '%(exception)s'"", where '%(app_path)s' is replaced by app_path and '%(exception)s' is replaced by e.",msg is tuple containing one initial entry: string var0 var3 var1 is replaced by app_path and var2 is replaced by var4,"msg = (  'WSGI application '%(app_path)s' could not be loaded; '  'Error importing module: '%(exception)s'' % ( {  'app_path' : app_path ,  'exception' : e ,  } )  )","msg =( 'WSGI application var1 could not be loaded; '  'Error importing module: '%(exception)s'' %({  'app_path': app_path,  'exception': e,  }) )"
"msg is a tuple containing string ""\nYou have installed Django's auth system, and don't have any superusers defined.\nWould you like to create one now? (yes/no): "".",msg is tuple containing string var0.,"msg = ( '\nYou have installed Django's auth system, and '  'don't have any superusers defined.\nWould you like to create one '  'now? (yes/no): ' )","msg =('\nYou have installed Django's auth system, and '  'don't have any superusers defined.\nWould you like to create one '  'now?(yes/no): ')"
"msg is a string ""%(model)s.Meta.%(opt)s cannot be a string. Did you mean to type: ('%(value)s',)?"", where '%(model)s' is replaced,","msg is string ""%(model)s.Meta.%(opt)s not be string. Did you mean to type: ('%(value)s',)?"" var1 var2 is replaced,","msg = ( '%(model)s.Meta.%(opt)s cannot be a string. '  'Did you mean to type: ('%(value)s',)?' % {  'model' : new_class . __name__ ,  'opt' : opt ,  'value' : value ,  } )","msg =('%(model)s.Meta.%(opt)s cannot be a string.'  'Did you mean to type:('%(value)s',)?' % {  'model': new_class.__name__,  'opt': opt,  'value': value,  })"
"msg is a string ""The use of the language code '%s' is deprecated. Please use the '%s' translation instead."".",msg is string var0.,msg = ( 'The use of the language code '%s' is deprecated. '  'Please use the '%s' translation instead.' ),msg =('The use of the language code '%s' is deprecated.'  'Please use the '%s' translation instead.')
"call the method message.message, substitute the result for msg.",call method var0 substitute result for msg.,msg = message . message ( ),msg = var0 ( )
"msg is an instance of a class SafeMIMEMultipart, created with the arguments: _subtype set to self.alternative_subtype and encoding set to encoding.",msg is instance of class var0 created with arguments: var1 set to self var3 and encoding set to encoding.,"msg = SafeMIMEMultipart ( _subtype = self . alternative_subtype , encoding = encoding )","msg = var0 ( var1 = self . var3 , encoding = encoding )"
"msg is an instance of a class SafeMIMEMultipart, created with arguments: _subtype set to self.mixed_subtype and encoding set to encoding.",msg is instance of class var0 created with arguments: var1 set to self var3 and encoding set to encoding.,"msg = SafeMIMEMultipart ( _subtype = self . mixed_subtype , encoding = encoding )","msg = var0 ( var1 = self . var3 , encoding = encoding )"
"msg is a instance of a SafeMIMEText class created with arguments: self.body, self.content_subtype and encoding.",msg is instance of var0 class created with arguments: var1 self var3 and encoding.,"msg = SafeMIMEText ( self . body , self . content_subtype , encoding )","msg = var0 ( var1 , self . var3 , encoding )"
"call the self._create_message method with argument msg, substitute it for msg.","call var0 method with argument msg, substitute it for msg.",msg = self . _create_message ( msg ),msg = var0 ( msg )
"call the self.style.HTTP_BAD_REQUEST with an argument msg, substitute it for msg.","call var0 var1 with argument msg, substitute it for msg.",msg = self . style . HTTP_BAD_REQUEST ( msg ),msg = var0 . var1 ( msg )
"call the self.style.HTTP_INFO with an argument msg, substitute it for msg.","call var0 var1 with argument msg, substitute it for msg.",msg = self . style . HTTP_INFO ( msg ),msg = var0 . var1 ( msg )
"call the self.style.HTTP_NOT_FOUND with an argument msg, substitute it for msg.","call var0 var1 with argument msg, substitute it for msg.",msg = self . style . HTTP_NOT_FOUND ( msg ),msg = var0 . var1 ( msg )
"call the self.style.HTTP_NOT_MODIFIED with an argument msg, substitute it for msg.","call var0 var1 with argument msg, substitute it for msg.",msg = self . style . HTTP_NOT_MODIFIED ( msg ),msg = var0 . var1 ( msg )
"call the self.style.HTTP_REDIRECT with an argument msg, substitute it for msg.","call var0 var1 with argument msg, substitute it for msg.",msg = self . style . HTTP_REDIRECT ( msg ),msg = var0 . var1 ( msg )
"call the self.style.HTTP_SERVER_ERROR with an argument msg, substitute it for msg.","call var0 var1 with argument msg, substitute it for msg.",msg = self . style . HTTP_SERVER_ERROR ( msg ),msg = var0 . var1 ( msg )
"call the self.style.HTTP_SUCCESS with an argument msg, substitute it for msg.","call var0 var1 with argument msg, substitute it for msg.",msg = self . style . HTTP_SUCCESS ( msg ),msg = var0 . var1 ( msg )
increment msg_count by one.,increment var0 by one.,msg_count += 1,var0 += 1
increment mes_count by one.,increment var0 by one.,msg_count += 1,msg_count += 1
msg_count is an integer 0.,var0 is integer 0.,msg_count = 0,var0 = 0
msg_count is integer 0.,var0 is integer 0.,msg_count = 0,var0 = 0
"call the method msg.as_bytes, substitute the result for msg_data.",call method msg var1 substitute result for var2 ,msg_data = msg . as_bytes ( ),var2 = msg . var1 ( )
"call the method msg_data.decode with argument charset, substitute the result for msg_data.",call method var0 decode with argument var3 substitute result for var0 ,msg_data = msg_data . decode ( charset ),var0 = var0 . decode ( var3 )
"convert to strings and concatenate context, CONTEXT_SEPARATOR and message, substitute the result for msg_with_ctxt.","convert to strings and concatenate context var0 and message, substitute result for var1 ","msg_with_ctxt = '%s%s%s' % ( context , CONTEXT_SEPARATOR , message )","var1 = '%s%s%s' % ( context , var0 , message )"
msgattrib_options is an list with elements: string '--no-obsolete'.,var0 is list with elements: string var1.,msgattrib_options = [ '--no-obsolete' ],var0 = [ var1 ]
"msgid is a string '<%s.%s.%s%s@%s>', replace '%s' with utcdate, pid, randint, idstring and idhost, respectively.","var0 is string var1, replace var2 with var3 pid var4 var5 and var6 respectively.","msgid = '<%s.%s.%s%s@%s>' % ( utcdate , pid , randint , idstring , idhost )","var0 = var1 % ( var3 , pid , var4 , var5 , var6 )"
msgmerge_options is an list with elements: strings '-q' and '--previous'.,var0 is list with elements: strings var1 and var2.,"msgmerge_options = [ '-q' , '--previous' ]","var0 = [ var1 , '--previous' ]"
"call the function popen_wrapper with argument args, assign the result to msgs, errors and status.","call function var0 with argument var1 assign result to msgs, errors and status.","msgs , errors , status = popen_wrapper ( args )","msgs , errors , status = var0 ( var1 )"
"call the function popen_wrapper with an argument args, assign the result to msgs, errors and status, respectively.","call function var0 with argument var1 assign result to msgs, errors and status, respectively.","msgs , errors , status = popen_wrapper ( args )","msgs , errors , status = var0 ( var1 )"
"call the function popen_wrapper with an argument args, assign the result to msgs, errors and status.","call function var0 with argument var1 assign result to msgs, errors and status.","msgs , errors , status = popen_wrapper ( args )","msgs , errors , status = var0 ( var1 )"
"substitute the result for args.   call the function popen_wrapper with an argument args, assign the result to msgs, errors and status, respectively.","substitute result for var0 call function var3 with argument var0 assign result to msgs, errors and status, respectively.","msgs , errors , status = popen_wrapper ( args )","msgs , errors , status = var3 ( var0 )"
"call the function dropwhile with 2 arguments: function len and msgs spit into parts at newlines, join the result into a string,","call function var0 with 2 arguments: function var1 and msgs spit into parts at var2 join result into string,","msgs = '\n' . join ( dropwhile ( len , msgs . split ( '\n' ) ) )","msgs = '\n' . join ( var0 ( var1 , msgs . split ( '\n' ) ) )"
"join elements of lines into a string, separated by newline characters, substitute it for msgs.","join elements of lines into string, separated by var0 characters, substitute it for msgs.",msgs = '\n' . join ( lines ),msgs = '\n' . join ( lines )
"with the result renamed to fp, perform the following:   read file fp and substitute the result for msgs.",with result renamed to var0 perform following: read file var0 and substitute result for msgs.,msgs = fp . read ( ),msgs = var0 . read ( )
"call the method msgs.decode with an argument string 'utf-8', substitute the result for msgs.","call method var0 with argument string var1, substitute result for msgs.",msgs = msgs . decode ( 'utf-8' ),msgs = var0 ( var1 )
"call the method msgs.decode with an argument string 'utf-8', substitute it for msgs.","call method var0 with argument string var1, substitute it for msgs.",msgs = msgs . decode ( 'utf-8' ),msgs = var0 ( var1 )
"substitute '%s' in string ""#. #-#-#-#-#  %s.pot (PACKAGE VERSION)  #-#-#-#-#\n"" with self.domain,","substitute '%s' in string ""#. #-#-#-#-#  %s.pot (PACKAGE VERSION)  #-#-#-#-#\n"" with self.domain,","msgs = msgs . replace ( '#. #-#-#-#-#  %s.pot (PACKAGE VERSION)  #-#-#-#-#\n' % self . domain , '' )","msgs = msgs . replace ( '#. #-#-#-#-#  %s.pot (PACKAGE VERSION)  #-#-#-#-#\n' % self . domain , '' )"
"replace every occurrence of string 'charset=CHARSET' for string  'charset=UTF-8' in msgs, substitute the result for msgs.","replace every occurrence of string var1 for string var2 in msgs, substitute result for msgs.","msgs = msgs . replace ( 'charset=CHARSET' , 'charset=UTF-8' )","msgs = msgs.replace(var1,var0'charset=UTF-8')"
"replace every occurrence of old for new in msgs, substitute the result for msgs.","replace every occurrence of old for new in msgs, substitute result for msgs.","msgs = msgs . replace ( old , new )","msgs = msgs . replace ( old , new )"
"call the method self.copy_plural_forms with arguments: msgs and locale, substitute it for msgs.","call method self var1 with arguments: msgs and locale, substitute it for msgs.","msgs = self . copy_plural_forms ( msgs , locale )","msgs = self . var1 ( msgs , locale )"
"msgs_with_ctxt is a tuple containing 2 elements: string created by concatenating context, CONTEXT_SEPARATOR and singular,","var0 is tuple containing 2 elements: string created by concatenating context var1 and singular,","msgs_with_ctxt = ( '%s%s%s' % ( context , CONTEXT_SEPARATOR , singular ) , '%s%s%s' % ( context , CONTEXT_SEPARATOR , plural ) , number )","var0 = '%s%s%s' % ( context , var1 , singular ) , '%s%s%s' % ( context , var1 , plural ) , number"
msguniq_options is an list with elements: string '--to-code=utf-8'.,var0 is list with elements: string var1.,msguniq_options = [ '--to-code=utf-8' ],var0 = [ var1 ]
decrement mtime by stat.st_ctime.,decrement var0 by stat var2 ,mtime -= stat . st_ctime,var0 -= stat . var2
substitute stat.st_mtime for mtime.,substitute stat var1 for mtime.,mtime = stat . st_mtime,mtime = stat . var1
must_be_first is boolean False.,var0 is boolean var1 ,must_be_first = False,var0 = var1
must_be_first is boolean True.,var0 is boolean var1 ,must_be_first = True,var0 = var1
"evaluate the function import_string with middleware_path as argument, substitute the result for my_class.","evaluate function var0 with var1 as argument, substitute result for var3 ",mw_class = import_string ( middleware_path ),mw_class = var0 ( var1 )
store in the variable n the result of the bitwise and operation between n and the variable width,store in variable n result of var0 and operation between n and variable width,n &= width,n &= width
convert shellcode to a bytearray and store it in the variable n,convert var0 to var1 and store it in variable n,n = bytearray ( shellcode ),n = var1 ( var0 )
store in the variable n the bytearray of shellcode,store in variable n var0 of var1,n = bytearray ( shellcode ),n = var0 ( var1 )
store in the variable n the length of the bytearray of shellcode,store in variable n length of var0 of var1,n = len ( bytearray ( shellcode ) ),n = len ( var0 ( var1 ) )
set the variable n to the length of the variable shellcode converted to bytearray,set variable n to length of variable var0 converted to var1,n = len ( bytearray ( shellcode ) ),n = len ( var1 ( var0 ) )
n is equal to the length of shellcode,n is equal to length of var0,n = len ( shellcode ),n = len ( var0 )
set the variable n to the length of shellcode,set variable n to length of var0,n = len ( shellcode ),n = len ( var0 )
"call the method re.compile with 2 arguments: raw string """"""^(?: (?P<addr> (?P<ipv4>\d{1,3}(?:\.\d{1,3}){3}) |""""""","call the method re.compile with 2 arguments: raw string """"""^(?: (?P<addr> (?P<ipv4>\d{1,3}(?:\.\d{1,3}){3}) |""""""","naiveip_re = re . compile ( r'''^(?: (?P<addr>     (?P<ipv4>\d{1,3}(?:\.\d{1,3}){3}) |         # IPv4 address     (?P<ipv6>\[[a-fA-F0-9:]+\]) |               # IPv6 address     (?P<fqdn>[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*) # FQDN ):)?(?P<port>\d+)$''' , re . X )","naiveip_re = re . compile ( r'''^(?: (?P<addr>     (?P<ipv4>\d{1,3}(?:\.\d{1,3}){3}) |         # IPv4 address     (?P<ipv6>\[[a-fA-F0-9:]+\]) |               # IPv6 address     (?P<fqdn>[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*) # FQDN ):)?(?P<port>\d+)$''' , re . X )"
"call the method _parse_header with an argument line, assign the result to name and tuple with 2 elements: value and params, respectively.","call method var0 with argument line, assign result to name and tuple with 2 elements: value and var1 respectively.","name , ( value , params ) = _parse_header ( line )","name , ( value , var1 ) = var0 ( line )"
"call the os.path.splitex with argument name, assign the result to name and ext, respectively.","call os.path.splitex with argument name, assign result to name and var0 respectively.","name , ext = os . path . splitext ( name )","name , var0 = os . path . splitext ( name )"
"call the function forbid_multi_line_headers with 3 arguments: name, val and string 'ascii', substitute the result for name and val, respectively.","call function var0 with 3 arguments: name var2 and string var4, substitute result for name and var2 respectively.","name , val = forbid_multi_line_headers ( name , val , 'ascii' )","name , var2 = var0 ( name , var2 , var4 )"
"call the function forbid_multi_line_headers with 3 arguments: name, val and self.encoding, substitute the result for name and val, respectively.",call function var0 with 3 arguments: name var1 and var3 substitute result for name and var1 respectively.,"name , val = forbid_multi_line_headers ( name , val , self . encoding )","name , var1 = var0 ( name , var1 , var3 )"
"split into two parts string main_value_pair at character ':', substitute the parts for name and value, respectively.","split into two parts string var0 at character var2, substitute parts for name and value, respectively.","name , value = main_value_pair . split ( ':' , 1 )","name , value = var0 . split ( var2 , 1 )"
"call the method match.groups, assign the result to name and value, respectively.","call method var0 assign result to name and value, respectively.","name , value = match . groups ( )","name , value = var0 ( )"
append ch to result.,append var0 to result.,name . append ( ch ),name . append ( var0 )
"call the function _resolve_name with 3 arguments: name list elements from the level index to the end, package and level,","call function _resolve_name with 3 arguments: name list elements from level index to end, package and level,","name = _resolve_name ( name [ level : ] , package , level )","name = _resolve_name ( name [ level : ] , package , level )"
"join elements of parts into a string, separated with '.', substitute it for name.","join elements of parts into string, separated with var0, substitute it for name.",name = '.' . join ( parts ),name = var0 . join ( parts )
"name is a string ""_%d"" formated with num_args.",name is string var0 formated with var1 ,name = '_%d' % num_args,name = '_%d' % var1
"join package.__name__ and module_name into a string separated with '.', substitute it for name.","join var0 and var1 into string separated with var3, substitute it for name.","name = '.' . join ( [ package . __name__ , module_name ] )","name = var3 . join ( [ var0 , var1 ] )"
name is an empty string,name is empty string,name = '',name = ''
surname is an empty string,surname is empty string,name = '',name = ''
name is an empty list.,name is empty list.,name = [ ],name = [ ]
substitute the last element of args for name.,substitute last element of var0 for name.,name = args [ - 1 ],name = var0 [ - 1 ]
substitute second element of args for name.,substitute second element of var0 for name.,name = args [ 1 ],name = var0 [ 1 ]
"remove config dictionary element under 'name' key, if it exists substitute it for name, if not, name is an empty string.","remove var0 dict element under var1 key, if it exists substitute it for name, if not, name is empty string.","name = config . get ( 'name' , '' )","name = var0 . get ( var1 , '' )"
substitute content.name for name.,substitute var0 for name.,name = content . name,name = var0
"get 'name' attribute from the file object, if it doesnt exists use None, substitute it for name.","get var0 attribute from file object, if it doesnt exists use var1 substitute it for name.","name = getattr ( file , 'name' , None )","name = getattr ( file , var0 , var1 )"
"get ""_decorated_function"" attribute from func object, if it exists substitute __name__ field of the result for name,","get var0 attribute from func object, if it exists substitute __name__ field of result for name,","name = getattr ( func , '_decorated_function' , func ) . __name__","name = getattr ( func , '_decorated_function' , func ) . __name__"
"for every match in the result,   substitute match.lastgroup for name.",for every match in result var0 substitute var1 for name.,name = match . lastgroup,name = var1
substitute member.name for name.,substitute var0 for name.,name = member . name,name = var0
"subtract length of the ext from the integer 255, take first elements of the name list up to the previous result index,","subtract length of var0 from integer 255, take first elements of name list up to previous result index,",name = name [ : 255 - len ( ext ) ] + ext,name = name [ : 255 - len ( var0 ) ] + var0
"call the function os.path.basename with argument name, substitute the result for name.","call function os.path.basename with argument name, substitute result for name.",name = os . path . basename ( name ),name = os . path . basename ( name )
"substitute '%s' in string ""%s_%s%s"" with: file_root, next(count) and file_ext, join the dir_name and previous string into a valid file path, substitute it for name.","substitute '%s' in string ""%s_%s%s"" with: file_root, next(count) and file_ext, join the dir_name and previous string into a valid file path, substitute it for name.","name = os . path . join ( dir_name , '%s_%s%s' % ( file_root , next ( count ) , file_ext ) )","name = os . path . join ( dir_name , '%s_%s%s' % ( file_root , next ( count ) , file_ext ) )"
"take the first i elements of string p, strip the whitespaces from the both sides, convert it to lowercase and apply on it the method,","take first i elements of string p, strip var0 from both sides, convert it to lowercase and apply on it method,",name = p [ : i ] . strip ( ) . lower ( ) . decode ( 'ascii' ),name = p [ : i ] . strip ( ) . lower ( ) . decode ( 'ascii' )
name is a property object with _get_name as a getter method and _set_name as a setter method.,name is property object with var0 as var1 method and _set_name as setter method.,"name = property ( _get_name , _set_name )","name = property ( var0 , _set_name )"
"split s into parts by '.', substitute the result for name.","split s into parts by var0, substitute result for name.",name = s . split ( '.' ),name = s . split ( var0 )
substitute self._pk_field.name for name.,substitute var0 for name.,name = self . _pk_field . name,name = var0
"call the method self._save with arguments name and content, substitute it for name.","call method var0 with arguments name and content, substitute it for name.","name = self . _save ( name , content )","name = var0 ( name , content )"
substitute self.fk.name for name.,substitute var0 for name.,name = self . fk . name,name = var0
"call the method self.format with an argument string '0', substitute the result for name.","call method var0 with argument string var1, substitute result for name.",name = self . format ( 'O' ),name = var0 ( 'O' )
"call the method self.get_available_name with argument name, substitute it for name.","call method self var1 with argument name, substitute it for name.",name = self . get_available_name ( name ),name = self . var1 ( name )
"call the method self.get_available_name with argument name, substitute the result for name.","call method self var1 with argument name, substitute result for name.",name = self . get_available_name ( name ),name = self . var1 ( name )
substitute self.html_initial_name for name.,substitute self var1 for name.,name = self . html_initial_name,name = self . var1
substitute self.html_name for name.,substitute self var1 for name.,name = self . html_name,name = self . var1
"call the self.path with argument name, substitute it for name.","call var0 with argument name, substitute it for name.",name = self . path ( name ),name = var0 ( name )
"call the method self.split_leading_dir with an argument name, substitute the first element of result for name.","call method self var1 with argument name, substitute first element of result for name.",name = self . split_leading_dir ( name ) [ 1 ],name = self . var1 ( name ) [ 1 ]
"call the method self.split_leading_dir with an argument name, substitute the second element of the result for name.","call method self var1 with argument name, substitute second element of result for name.",name = self . split_leading_dir ( name ) [ 1 ],name = self . var1 ( name ) [ 1 ]
"if self.timezone is true, call the method self.timezone.tzname with an argument self.data, substitute the result for name,","if self.timezone is true, call method var0 with argument var1 substitute result for name,",name = self . timezone . tzname ( self . data ) if self . timezone else None,name = var0 ( var1 ) if self . timezone else None
"sum sign and hhmm, substitute the result for name.",sum sign and var0 substitute result for name.,name = sign + hhmm,name = sign + var0
"for every app and names in result of the method conflicts.items, join names into a string, separated by ', ',","for every var0 and names in result of method var1 join names into string, separated by var2,","name_str = '; ' . join ( '%s in %s' % ( ', ' . join ( names ) , app ) for app , names in conflicts . items ( ) )","name_str = '; ' . join ( '%s in %s' % ( var2 . join ( names ) , var0 ) for var0 , names in var1 ( ) )"
"for every app and names in key, value tuple pairs of conflicts dictionary join names into a string separated by commas,","for every var0 and names in key, value tuple pairs of conflicts dict join names into string separated by commas,","name_str = '; ' . join ( '%s in %s' % ( ', ' . join ( names ) , app ) for app , names in conflicts . items ( ) )","name_str = '; ' . join ( '%s in %s' % ( ', ' . join ( names ) , var0 ) for var0 , names in conflicts . items ( ) )"
substitute tempfile.NamedTemporaryFile for NamedTemporaryFile.,substitute var0 var1 for var1 ,NamedTemporaryFile = tempfile . NamedTemporaryFile,var1 = var0 . var1
substitute TemporaryFile for NamedTemporaryFile.,substitute var0 for var1 ,NamedTemporaryFile = TemporaryFile,Namedvar0 = var0
"call the method self._archive.namelist, substitute the result for namelist.",call method var0 substitute result for var1 ,namelist = self . _archive . namelist ( ),var1 = var0 ( )
"if not, isolated_context is boolean False.   get the value under the 'width' key of the options dictionary, if it exists, substitute it for namemap, if not namemap is an empty dictionary.","if not var0 is boolean var2 get value under var4 key of options dict, if it exists, substitute it for var5 if not var5 is empty dict.","namemap = options . get ( 'with' , { } )","var5 = options . get ( 'with' , { } )"
"substitute tuple containing 2 elements: sum of p_pattern and prefix, and sub_pattern for value under the namespace key of the namespace dictionary.","substitute tuple containing 2 elements: sum of var0 and prefix, and var1 for value under var3 key of var3 dict.","namespaces [ namespace ] = ( p_pattern + prefix , sub_pattern )","namespaces [ var3 ] = var0 + prefix , var1"
substitute the tuple containing 2 elements p_pattern and pattern for value under the pattern.namespace key of the namespaces dictionary.,substitute tuple containing 2 elements var0 and pattern for value under var1 key of var2 dict.,"namespaces [ pattern . namespace ] = ( p_pattern , pattern )","var2 [ var1 ] = var0 , pattern"
namespaces is an empty dictionary.,var0 is empty dict.,namespaces = { },var0 = { }
"divide 10 to the power of 400 by 10 to the power of 400, substitute the result for nan.","divide 10 to power of 400 by 10 to power of 400, substitute result for nan.",nan = ( 1e200 * 1e200 ) // ( 1e200 * 1e200 ),nan = 1e+200 * 1e+200 // ( 1e+200 * 1e+200 )
"set the variable nasm to the variable encoded after replacing all occurrences of ""z"" with ""zzz"" in it",set variable var0 to variable encoded after replacing all occurrences of var1 with var2 in it,"nasm = encoded . replace ( 'z' , 'zzz' )","var0 = encoded . replace ( 'z' , 'zzz' )"
"replace all ""z"" with ""zzz"" in the variable encoded and store in the variable nasm",replace all var0 with var1 in variable encoded and store in variable var3,"nasm = encoded . replace ( 'z' , 'zzz' )","var3 = encoded . replace ( 'z' , 'zzz' )"
set the variable nasm to all the elements in the variable nasm excluding the last 1 element,set variable var0 to all elements in variable var0 excluding last 1 element,nasm = nasm [ : - 1 ],var0 = var0 [ : - 1 ]
exclude the last element from the variable nasm,exclude last element from variable var0,nasm = nasm [ : - 1 ],var0 = var0 [ : - 1 ]
exclude the last 2 elements from the variable nasm,exclude last 2 elements from variable var0,nasm = nasm [ : - 2 ],var0 = var0 [ : - 2 ]
exclude the last 3 elements from the variable nasm,exclude last 3 elements from variable var0,nasm = nasm [ : - 3 ],var0 = var0 [ : - 3 ]
substitute elements of nasm from the index 2 to end for nasm,substitute elements of var0 from index 2 to end for var0,nasm = nasm [ 2 : ],var0 = var0 [ 2 : ]
set the variable nasm to all the elements in the variable nasm starting from index 3 until the end,set variable var0 to all elements in variable var0 starting from index 3 var2 end,nasm = nasm [ 3 : ],var0 = var0 [ 3 : ]
"cast encoded to string and replace all occurrences of ""\\x"" with "",0x"" in it",cast encoded to string and replace all occurrences of var0 with var1 in it,"nasm = str ( encoded ) . replace ( '\\x' , ',0x' )","nasm = str ( encoded ) . replace ( '\\x' , ',var2' )"
set the variable nbits to the second command-line argument casted to string,set variable var0 to second command-line argument casted to string,nbits = str ( sys . argv [ 2 ] ),var0 = str ( sys . argv [ 2 ] )
set the variable nbits to the second command-line argument,set variable var0 to second command-line argument,nbits = sys . argv [ 2 ],var0 = sys . argv [ 2 ]
set the variable nbits to the third command-line argument,set variable var0 to third command-line argument,nbits = sys . argv [ 3 ],var0 = sys . argv [ 3 ]
needs_multipart_form is boolean False.,var0 is boolean var1 ,needs_multipart_form = False,var0 = var1
needs_multipart_form is boolean True.,var0 is boolean var1 ,needs_multipart_form = True,var0 = var1
"call the self.convert method with i, self.decimal_digits, self.digits and '-' as arguments, assign the result to the neg and value, respectively.","call var0 method with i, self var2 var3 and var4 as arguments, assign result to var5 and value, respectively.","neg , value = self . convert ( i , self . decimal_digits , self . digits , '-' )","var5 , value = var0 ( i , self . var2 , var3 , var4 )"
"call the self.convert method with s, self.decimal, self.decimal_digits and self.sign as arguments, assign the result to the neg and value, respectively.","call var0 method with s var1 self var3 and var4 as arguments, assign result to var5 and value, respectively.","neg , value = self . convert ( s , self . digits , self . decimal_digits , self . sign )","var5 , value = var0 ( s , self . digits , self . var3 , var4 )"
neg is integer 0.,var0 is integer 0.,neg = 0,var0 = 0
neg is integer 1.,var0 is integer 1.,neg = 1,var0 = 1
"multiply 10 to the power of 200, with 10 to the power of 200, negative, substitute the result for neg_inf.","multiply 10 to power of 200, with 10 to power of 200, negative, substitute result for var0 ",neg_inf = - 1e200 * 1e200,var0 = - 1e+200 * 1e+200
decrement nesting by one.,decrement nesting by one.,nesting -= 1,nesting -= 1
increment nesting by one.,increment nesting by one.,nesting += 1,nesting += 1
nesting is integer 0.,nesting is integer 0.,nesting = 0,nesting = 0
nesting is integer 1.,nesting is integer 1.,nesting = 1,nesting = 1
"call the method netloc.encode with an argument string 'idna', on the return value call the decode method with string 'ascii' as argument, substitute the result for netloc.","call method var0 with argument string var2, on return value call decode method with string var3 as argument, substitute result for var1 ",netloc = netloc . encode ( 'idna' ) . decode ( 'ascii' ),var1 = var0 ( var2 ) . decode ( 'ascii' )
"call the method netloc.encode with an argument string 'idna', call the method decode on the result with an argument 'ascii',","call method var0 with argument string var1, call method decode on result with argument var2,",netloc = netloc . encode ( 'idna' ) . decode ( 'ascii' ),netloc = var0 ( var1 ) . decode ( 'ascii' )
set new to new bitwise xor the variable xor,set new to new var0 xor variable xor,new ^= xor,new ^= xor
set new to new xor the variable xor,set new to new xor variable xor,new ^= xor,new ^= xor
set the variable new to the variable new bitwise xor the variable xor,set variable new to variable new var0 xor variable xor,new ^= xor,new ^= xor
assign new to new bitwise xor the variable xor,assign new to new var0 xor variable xor,new ^= xor,new ^= xor
"append orig_file to string '#: ', substitute it for new.","append var0 to string var2, substitute it for new.",new = '#: ' + orig_file [ 2 : ],new = var2 + var0 [ 2 : ]
new is not i bitwise and 0xff,new is not i var0 and var1,new = ~ i & 0xff,new = ~ i & var1
set the variable new to not i and 0xff,set variable new to not i and var0,new = ~ i & 0xff,new = ~ i & var0
set the variable new to i and 0xff,set variable new to i and var0,new = i & 0xff,new = i & var0
set the variable new to i bitwise and 0xff,set variable new to i var0 and var1,new = i & 0xff,new = i & var1
substitute name for new.,substitute name for new.,new = name,new = name
new is new xor c,new is new xor c,new = new ^ c,new = new ^ c
new is new xor temp,new is new xor temp,new = new ^ temp,new = new ^ temp
set the variable new to bitwise xor of the variables new and xor,set variable new to var0 xor of variables new and xor,new = new ^ xor,new = new ^ xor
update the value of the variable new with left shifting with the variable shift,update value of variable new with left shifting with variable shift,new = new << shift,new = new << shift
assign the variable new the value of new left shift with the variable shift,assign variable new value of new left shift with variable shift,new = new << shift,new = new << shift
new is new shifted left by temp,new is new shifted left by temp,new = new << temp,new = new << temp
assign the variable new the value of new right shift with the variable shift,assign variable new value of new right shift with variable shift,new = new >> shift,new = new >> shift
assign the variable new the value of z left shift with the variable shift,assign variable new value of z left shift with variable shift,new = z << shift,new = z << shift
"append i_args to args, append new_args with the result.","append var0 to args, append var1 with result.",new_args . append ( args [ : ] + i_args ),var1 . append ( args [ : ] + var0 )
new_args is an empty list.,var0 is empty list.,new_args = [ ],var0 = [ ]
substitute name for new_attr.,substitute name for var0 ,new_attr = name,var0 = name
substitute old_attr for new_attr.,substitute var0 for var1 ,new_attr = old_attr,var1 = var0
substitute declared_fields for new_class.base_fields.,substitute var0 for var1 var3 ,new_class . base_fields = declared_fields,var1 . var3 = var0
substitute fields for new_class.base_fields.,substitute fields for var0 var2 ,new_class . base_fields = fields,var0 . var2 = fields
substitute declared_fields for new_class.declared_fields.,substitute var0 for var2 var0 ,new_class . declared_fields = declared_fields,var2 . var0 = var0
"call the method media_property with an argument new_class, substitute the result for new_class.media.",call method var0 with argument var1 substitute result for var1 media.,new_class . media = media_property ( new_class ),var1 . media = var0 ( var1 )
"call the method __new__ from the base class of the class DeclarativeFieldsMetaclass, with 4 arguments: mcs, name, bases and attrs.","call method __new__ from base class of class var0 with 4 arguments: mcs, name, bases and var1 ","new_class = ( super ( DeclarativeFieldsMetaclass , mcs ) . __new__ ( mcs , name , bases , attrs ) )","new_class = super ( var0 , mcs ) . __new__ ( mcs , name , bases , var1 )"
"call the method __new__ from the base class of the class MediaDefiningClass, called with 4 arguments: mcs, name, bases and attrs.","call method __new__ from base class of class var0 called with 4 arguments: mcs, name, bases and var1 ","new_class = ( super ( MediaDefiningClass , mcs ) . __new__ ( mcs , name , bases , attrs ) )","new_class = super ( var0 , mcs ) . __new__ ( mcs , name , bases , var1 )"
"if not formfield_callback is None.   call the method __new__ from the base class of the class ModelFormMetaclass, with 4 arguments: mcs, name, bases and attrs,","if not var0 is var2 call method __new__ from base class of class var4 with 4 arguments: mcs, name, bases and var6 ","new_class = super ( ModelFormMetaclass , mcs ) . __new__ ( mcs , name , bases , attrs )","new_class = super ( var4 , mcs ) . __new__ ( mcs , name , bases , var6 )"
"call the method __new__ with 4 arguments: cls, name, bases and attrs, from the base class of the class RenameMethodsBase.","call method __new__ with 4 arguments: cls, name, bases and var0 from base class of class var1 ","new_class = super ( RenameMethodsBase , cls ) . __new__ ( cls , name , bases , attrs )","new_class = super ( var1 , cls ) . __new__ ( cls , name , bases , var0 )"
"call the method self.open, substitute the result for the new_conn_created.",call method var0 substitute result for var1 ,new_conn_created = self . open ( ),var1 = var0 ( )
call the method new_context._reset_dicts values.,call method var0 _reset_dicts values.,new_context . _reset_dicts ( values ),var0 . _reset_dicts ( values )
substitute csrf_token for value under the 'csrf_token' key of new_context dictionary.,substitute csrf_token for value under var0 key of var1 dict.,new_context [ 'csrf_token' ] = csrf_token,var1 [ var0 ] = csrf_token
call the function context_class with 2 arguments: _dict and unpacked dictionary containing 4 entries:,call function var0 with 2 arguments: var1 and unpacked dict containing 4 entries:,"new_context = context_class ( _dict , ** { 'autoescape' : context . autoescape , 'current_app' : context . current_app , 'use_l10n' : context . use_l10n , 'use_tz' : context . use_tz , } )","new_context = var0 ( var1 , ** { 'autoescape' : context . autoescape , 'current_app' : context . current_app , 'use_l10n' : context . use_l10n , 'use_tz' : context . use_tz } )"
"call the function copy with an argument self, substitute the result for new_context.","call function copy with argument self, substitute result for var0 ",new_context = copy ( self ),var0 = copy ( self )
"value under the ""RUN_MAIN"" key of new_environ dictionary is a string 'true'.",value under var0 key of var1 dict is string var3.,new_environ [ 'RUN_MAIN' ] = 'true',var1 [ 'RUN_MAIN' ] = var3
"call the method os.environ.copy, substitute the result for new_environ.","call method os.environ.copy, substitute result for var0 ",new_environ = os . environ . copy ( ),var0 = os . environ . copy ( )
"call the check function with argument app_config set to app_config, substitute the result for new_errors.",call check function with argument var0 set to var0 substitute result for var2 ,new_errors = check ( app_configs = app_configs ),var2 = check ( app_configs = var0s )
write content to new_file file.,write content to var0 file.,new_file . write ( content ),var0 . write ( content )
"join dirpath and filename into a path separated by '/', append it to new_filenames.","join var0 and filename into path separated by var1, append it to var2 ","new_filenames . append ( os . path . join ( dirpath , filename ) )","var2 . append ( os . path . join ( var0 , filename ) )"
"create the list of paths from which filename module was included for every filename in new_modules, only is filename has '__file__' attribute, substitute the resulting list for new_filenames.","create list of paths from var0 filename module was included for every filename in var1 only is filename has var3 attribute, substitute resulting list for var4 ","new_filenames = [ filename . __file__ for filename in new_modules if hasattr ( filename , '__file__' ) ]","var4 = [ filename . __file__ for filename in var1 if hasattr ( filename , var3 ) ]"
append string '0000' to new_ip.,append string var0 to var1 ,new_ip . append ( '0000' ),var1 . append ( var0 )
"split second element of hextet into parts by ':', append them to new_ip.","split second element of var0 into parts by var1, append var2 to var3 ",new_ip += hextet [ 1 ] . split ( ':' ),var3 += var0 [ 1 ] . split ( var1 )
"new_ip is an empty list,","new_ip is empty list,",new_ip = [ ],new_ip = [ ]
"split first element of hextet into parts by ':', append them to new_ip.","split first element of var0 into parts by var1, append var2 to var3 ",new_ip = hextet [ 0 ] . split ( ':' ),var3 = var0 [ 0 ] . split ( var1 )
"split ip_str into parts by ':', substitute the result for new_ip.","split var0 into parts by var2, substitute result for var3 ",new_ip = ip_str . split ( ':' ),var3 = var0 . split ( var2 )
"call the method self.key_function with key, self.key_prefix and version as arguments, substitute the result for new_key.","call method self var1 with key, self var3 and version as arguments, substitute result for var4 ","new_key = self . key_func ( key , self . key_prefix , version )","var4 = self . key_func ( key , self . var3 , version )"
"define the method get_many with 3 arguments, self class instance, keys and version set to None.","define method var0 with 3 arguments, self class instance, keys and version set to var2 ","new_keys = [ self . make_key ( x , version = version ) for x in keys ]","new_keys = [ self . make_key ( x , version = version ) for x in keys ]"
"call the method normalize with sum of parent_pat and pat as an argument, substitute the result for new_matches.","call method normalize with sum of var0 and pat as argument, substitute result for var1 ",new_matches = normalize ( parent_pat + pat ),var1 = normalize ( var0 + pat )
"get the value under the new_method_name key of the base.__dict__ dictionary, substitute it for new_method.","get value under var0 key of var2 dict, substitute it for var1 ",new_method = base . __dict__ . get ( new_method_name ),var1 = var2 . get ( var0 )
substitute second element of renamed_method for new_method_name.,substitute second element of var0 for var1 ,new_method_name = renamed_method [ 1 ],var1 = var0 [ 1 ]
"dependencies set to a list of tuples with 2 elements: app_label and migration.name for every migration in merge_migrations.   call the method subsclass with 2 arguments: string ""%04i_merge"", replace '%04i' with biggest_number incremented by one,","dependencies set to list of var0 with 2 elements: var1 and var3 for every migration in var4 call method var7 with 2 arguments: string var8, replace var9 with var10 var12 by one,","new_migration = subclass ( '%04i_merge' % ( biggest_number + 1 ) , app_label )","new_migration = subclass ( '%04i_merge' % ( var10 + 1 ) , var1 )"
"dependencies set to new_operations and replaces set to replaces.   call the function subclass with 2 arguments string ""0001_squashed_%s"", where '%s' is replaced with migration.name and app_label,",dependencies set to var0 and replaces set to replaces var2 call function subclass with 2 arguments string var3 var4 var5 is replaced with var6 and var7 ,"new_migration = subclass ( '0001_squashed_%s' % migration . name , app_label )","new_migration = subclass ( '0001_squashed_%s' % var6 , var7 )"
substitute name for new_mod.,substitute name for var0 ,new_mod = name,var0 = name
"subtract _cached_modules from module_values, assign the result to new_modules.",subtract _cached_modules from var0 assign result to var1 ,new_modules = module_values - _cached_modules,var1 = var0 - _cached_modules
"new_msg is a tuple containing a string: ""Database %s couldn't be flushed. Possible reasons:\n""",var0 is tuple containing string: var1,"new_msg = (  'Database %s couldn't be flushed. Possible reasons:\n'  '  * The database isn't running or isn't configured correctly.\n'  '  * At least one of the expected database tables doesn't exist.\n'  '  * The SQL was invalid.\n'  'Hint: Look at the output of 'django-admin.py sqlflush'. That's the SQL this command wasn't able to run.\n'  'The full error: %s' ) % ( connection . settings_dict [ 'NAME' ] , e )","var0 =( 'Database %s couldn't be flushed.Possible reasons:\n'  '  * The database isn't running or isn't configured correctly.\n'  '  * At least one of the expected database tables doesn't exist.\n'  '  * The SQL was invalid.\n'  'Hint: Look at the output of 'django-admin.py sqlflush'.That's the SQL this command wasn't able to run.\n'  'The full error: %s') %(connection.settings_dict ['NAME'], e)"
"cal the method re.subn with 3 arguments: raw string '\W', string '_' and new_name.","var0 method var1 with 3 arguments: raw string var2, string var3 and var5 ","new_name , num_repl = re . subn ( r'\W' , '_' , new_name )","var5 , num_repl = var1 ( '\\W' , '_' , var5 )"
append string '_field' to new_name.,append string var0 to var1 ,new_name += '_field',var1 += var0
"in string '%s_%d', replace '%s' with new_name and '%d' with num, substitute the result for new_name.","in string var0, replace var1 with var2 and var6 with var7 substitute result for var2 ","new_name = '%s_%d' % ( new_name , num )","var2 = var0 % ( var2 , var7 )"
"convert new_name to a string and append string 'field' to it, substitute the result for new_name.","convert var0 to string and append string var4 to it, substitute result for var0 ",new_name = '%sfield' % new_name,var0 = '%sfield' % var0
"convert new_name to a string and append it to string 'field', substitute the result for new_name.","convert var0 to string and append it to string var4, substitute result for var0 ",new_name = 'field%s' % new_name,var0 = 'field%s' % var0
"convert new_name to a string and append it to string 'number_', substitute the result for new_name.","convert var0 to string and append it to string var4, substitute result for var0 ",new_name = 'number_%s' % new_name,var0 = 'number_%s' % var0
"convert col_name to lowercase, substitute the result for new_name.","convert var0 to lowercase, substitute result for var1 ",new_name = col_name . lower ( ),var1 = var0 . lower ( )
replace all the occurrences of '__' with '_' in new_name.,replace all occurrences of var0 with var1 in var2 ,"new_name = new_name . replace ( '__' , '_' )","var2 = var2 . replace ( var0 , '_' )"
"substitute new_name, without the last 3 elements for new_name.",substitute var0 var2 last 3 elements for var0 ,new_name = new_name [ : - 3 ],var0 = var0 [ : - 3 ]
"call the function func with 2 arguments: obj and unpacked list arg_vals, substitute the result for new_obj.",call function var0 with 2 arguments: var1 and unpacked list var2 substitute result for var3 ,"new_obj = func ( obj , * arg_vals )","var3 = var0 ( var1 , * var2 )"
"call the function func with 3 arguments: obj, autoescape set to context.autoescape and unpacked list arg_vals,",call function var0 with 3 arguments: var1 var2 set to context var2 and unpacked list var4 ,"new_obj = func ( obj , autoescape = context . autoescape , * arg_vals )","new_var1 = var0 ( var1 , * var4 , var2 = context . var2 )"
"call the method optimizer.optimize with 2 arguments operations and migration.app_label, substitute the result for new_operations.",call method var0 with 2 arguments operations and migration var2 substitute result for var3 ,"new_operations = optimizer . optimize ( operations , migration . app_label )","var3 = var0 ( operations , migration . var2 )"
"join top_dir, relative_dir and return value of the function filename.replace called with 2 arguments: base_name and name,","join var0 var1 and return value of function var2 called with 2 arguments: var3 and name,","new_path = path . join ( top_dir , relative_dir , filename . replace ( base_name , name ) )","new_path = path . join ( var0 , var1 , var2 ( var3 , name ) )"
"slice the path list from the result of the match.end method as the start index to the end, substitute it for new_path.","slice path list from result of match.end method as start index to end, substitute it for var0 ",new_path = path [ match . end ( ) : ],var0 = path [ match . end ( ) : ]
"call the method stat.S_IMODE with an argument st.st_mode, calculate binary OR with the result and stat.S_IWUSR, as operands,","call method var0 var2 with argument st var4 calculate binary var5 with result and var0 var6 as operands,",new_permissions = stat . S_IMODE ( st . st_mode ) | stat . S_IWUSR,new_permissions = var0 . var2 ( st . var4 ) | var0 . var6
"sum item and i_item together, append the result to new_result.","sum item and var0 together, append result to var1 ",new_result . append ( item + i_item ),var1 . append ( item + var0 )
new_result is an empty list.,var0 is empty list.,new_result = [ ],var0 = [ ]
extend new_second_item with item.,extend var0 with item.,new_second_item . extend ( item ),var0 . extend ( item )
new_second_item is an empty list.,var0 is empty list.,new_second_item = [ ],var0 = [ ]
"call the method self.coerce with an argument choice, append the result to new_value.","call method var0 with argument choice, append result to var1 ",new_value . append ( self . coerce ( choice ) ),var1 . append ( self . coerce ( choice ) )
"call the function _strip_once with an argument value, substitute the result for new_value.","call function var0 with argument value, substitute result for var1 ",new_value = _strip_once ( value ),var1 = var0 ( value )
new_value is an empty list.,var0 is empty list.,new_value = [ ],var0 = [ ]
"add value and delta together, substitute the result for new_value.","add value and delta together, substitute result for var0 ",new_value = value + delta,var0 = value + delta
new_value is a sum of value and delta.,var0 is sum of value and delta.,new_value = value + delta,var0 = value + delta
substitute newline character for newline.,substitute var0 character for var0 ,newline = '\n',var0 = '\n'
convert newline character to unicode and substitute the result for newline.,convert var0 character to var2 and substitute result for var0 ,newline = unicode ( '\n' ),var0 = var2 ( '\n' )
"define lambda function that returns self.file.newlines field, use it as an argument for property function, put the result in newlines.","define lambda function var0 returns var1 field, use it as argument for property function, put result in var2 ",newlines = property ( lambda self : self . file . newlines ),var2 = property ( lambda self : var1 )
"call the function post_callback with an argument retval, substitute the result for newretval.",call function var0 with argument var1 substitute result for var2 ,newretval = post_callback ( retval ),newvar1 = var0 ( var1 )
substitute klass.__dict__ for next.,substitute var0 for next.,next = advance_iterator,next = advance_iterator
"sum index and length of self._boundary, substitute the result for next.",sum index and length of var0 substitute result for next.,next = index + len ( self . _boundary ),next = index + len ( var0 )
substitute (i+1)-th element of list_ for next_item.,substitute (i+1)-th element of var1 for var2 ,next_item = list_ [ i + 1 ],var2 = var1 [ i + 1 ]
substitute ngettext for ngettext_lazy.,substitute ngettext for var0 ,ngettext_lazy = ngettext,var0 = ngettext
nm and addr are addr.,nm and var0 are var0 ,"nm , addr = addr","nm , var0 = var0"
"call the encode function on the Header class instance, created with arguments nm and string 'utf-8', substitute the result for nm.","call encode function on var0 class instance, created with arguments nm and string var1, substitute result for nm.","nm = Header ( nm , 'utf-8' ) . encode ( )","nm = var0 ( nm , var1 ) . encode ( )"
"call the encode function on the Header class instance, created with arguments nm and encoding, substitute the result for nm.","call encode function on var0 class instance, created with arguments nm and encoding, substitute result for nm.","nm = Header ( nm , encoding ) . encode ( )","nm = var0 ( nm , encoding ) . encode ( )"
"no_settings_commands is a list containing entries: 'help', 'version', '--help', '--version', '-h', 'compilemessages', 'makemessages',","var0 is list containing entries: var1, var2, var3, var5, var7, var8, var10,","no_settings_commands = [ 'help' , 'version' , '--help' , '--version' , '-h' , 'compilemessages' , 'makemessages' , 'startapp' , 'startproject' , ]","var0 = [ var1 , 'version' , '--help' , '--version' , '-h' , 'compilemessages' , 'makemessages' , 'startapp' , 'startproject' ]"
opts and unpacked dictionary kwargs.   NOCOLOR_PALETTE is a string 'nocolor'.,opts and unpacked dict var0 var2 is string var4.,NOCOLOR_PALETTE = 'nocolor',var2 = var4
and prefix as node.prefix.   call the method node.replace with an argument decorated.,and prefix as var0 call method var2 with argument decorated.,node . replace ( decorated ),var2 ( decorated )
substitute token.source for node.source.,substitute var0 for var1 ,node . source = token . source,var1 = var0
"append the results into a list, substitute it for value.   node is an instance CycleNode class, created with  values,name and silent set to silent.","append results into list, substitute it for value var1 node is instance var2 class, created with values,name and silent set to silent.","node = CycleNode ( values , name , silent = silent )","node = var2 ( values , var0name , var0silent = silent )"
"append the results into a list, substitute it for value.   node is an instance of CycleNode class, created wiht an argument values.","append results into list, substitute it for value var0 node is instance of var1 class, created var2 argument values.",node = CycleNode ( values ),node = var1 ( values )
"call the method node.render with an argument context, append the result to the nodelist.","call method var0 with argument context, append result to var1 ",nodelist . append ( node . render ( context ) ),var1 . append ( node . render ( context ) )
append node to nodelist.,append node to var0 ,nodelist . append ( node ),var0 . append ( node )
nodelist.contains_nontext is boolean True.,nodelist var1 is boolean var2 ,nodelist . contains_nontext = True,nodelist . var1 = var2
nodelist is an empty list.,var0 is empty list.,nodelist = [ ],var0 = [ ]
"get attr attribute of self object, if it exists substitute it for nodelist, if not nodelist is None.","get var0 attribute of self object, if it exists substitute it for var1 if not var1 is var3 ","nodelist = getattr ( self , attr , None )","var1 = getattr ( self , var0 , var3 )"
"call the method parser.parse with an argument tuple with 3 elements: strings 'elif', 'else' and 'endif', substitute the result for nodelist.","call method var0 with argument tuple with 3 elements: strings var1, var2 and var3, substitute result for var5 ","nodelist = parser . parse ( ( 'elif' , 'else' , 'endif' ) )","var5 = var0 ( ( var1 , 'else' , 'endif' ) )"
"call the method parser.parse with an argument tuple with 3 elements strings 'elif', 'else' and 'endif', substitute the result for nodelist.","call method var0 with argument tuple with 3 elements strings var1, var2 and var3, substitute result for var5 ","nodelist = parser . parse ( ( 'elif' , 'else' , 'endif' ) )","var5 = var0 ( ( var1 , 'else' , 'endif' ) )"
"call the method parser.parse with an argument tuple with an element string 'endautoescape', substitute the result for nodelist.","call method var0 with argument tuple with element string var1, substitute result for var2 ","nodelist = parser . parse ( ( 'endautoescape' , ) )","var2 = var0 ( ( var1 , ) )"
"call the method parser.parse with an argument tuple with one element string 'endblock', substitute the result for nodelist.","call method var0 with argument tuple with one element string var1, substitute result for var2 ","nodelist = parser . parse ( ( 'endblock' , ) )","var2 = var0 ( ( var1 , ) )"
"where '%s' is replaced with filter_name.   call the method parser.parse with an argument tuple with an element string 'endfilter', substitute the result for nodelist.","var0 var1 is replaced with var2 call method var5 with argument tuple with element string var6, substitute result for var8 ","nodelist = parser . parse ( ( 'endfilter' , ) )","var8 = var5 ( ( var6 , ) )"
"call the method parser.parse with an argument tuple with an element string 'endif', substitute the result for nodelist.","call method var0 with argument tuple with element string var1, substitute result for var2 ","nodelist = parser . parse ( ( 'endif' , ) )","var2 = var0 ( ( var1 , ) )"
"call the method parser.parse with an argument tuple with an element string 'endspaceless', substitute the result for nodelist.","call method var0 with argument tuple with element string var1, substitute result for var2 ","nodelist = parser . parse ( ( 'endspaceless' , ) )","var2 = var0 ( ( var1 , ) )"
"call the method parser.parse with an argument tuple with an element string 'endverbatim', substitute the result for nodelist.","call method var0 with argument tuple with element string var1, substitute result for var2 ","nodelist = parser . parse ( ( 'endverbatim' , ) )","var2 = var0 ( ( var1 , ) )"
"first element of bits and first element of remaining_bits.   call the method parser.parse with an argument tuple, with an element string 'endwith', substitute the result for nodelist.","first element of bits and first element of var0 call method var3 with argument tuple, with element string var4, substitute result for var5 ","nodelist = parser . parse ( ( 'endwith' , ) )","var5 = var3 ( ( var4 , ) )"
"call the method parser.parse, substitute the result for nodelist.",call method var0 substitute result for var1 ,nodelist = parser . parse ( ),var1 = var0 ( )
"call the method self.create_nodelist, substitute the result for nodelist.",call method self var1 substitute result for nodelist.,nodelist = self . create_nodelist ( ),nodelist = self . var1 ( )
nodelist_empty is None.,var0 is var1 ,nodelist_empty = None,var0 = var1
"call the method parser.parse with an argument tuple with an element string 'endfor', substitute the result for nodelist_empty.","call method var0 with argument tuple with element string var1, substitute result for var2 ","nodelist_empty = parser . parse ( ( 'endfor' , ) )","var2 = var0 ( ( var1 , ) )"
nodelist_false is an instance of NodeList class.,var0 is instance of var1 class.,nodelist_false = NodeList ( ),var0 = var1 ( )
nodelist_false is an instance of NodeList.,var0 is instance of var1 ,nodelist_false = NodeList ( ),var0 = var1 ( )
"call the method parser.parse with an argument tuple with an element string 'endifchanged', substitute the result for nodelist_false.","call method var0 with argument tuple with element string var1, substitute result for var2 ","nodelist_false = parser . parse ( ( 'endifchanged' , ) )","var2 = var0 ( ( var1 , ) )"
"call the method parser.parse with an argument tuple with an element end_tag, substitute the result for nodelist_false.",call method var0 with argument tuple with element var1 substitute result for var2 ,"nodelist_false = parser . parse ( ( end_tag , ) )","var2 = var0 ( ( var1 , ) )"
"call the method parser.parse with an argument tuple with an element string 'else' and end_tag, substitute the result for nodelist_true.",call method var0 with argument tuple with element string var1 and var2 substitute result for var4 ,"nodelist_loop = parser . parse ( ( 'else' , end_tag ) )","nodelist_loop = var0 ( ( var1 , var2 ) )"
"substitute the result for sequence.   call the method parser.parse with an argument tuple with 2 elements strings 'empty' and 'endfor', substitute the result for nodelist_loop.","substitute result for sequence var0 call method var1 with argument tuple with 2 elements strings var2 and var3, substitute result for var5 ","nodelist_loop = parser . parse ( ( 'empty' , 'endfor' , ) )","var5 = var1 ( ( var2 , 'endfor' ) )"
"call the method parser.parse with an argument tuple with 2 elements strings: 'else' and 'endfilter', substitute the result for nodelistelse.","call method var0 with argument tuple with 2 elements strings: var1 and var2, substitute result for var4 ","nodelist_true = parser . parse ( ( 'else' , 'endifchanged' ) )","nodelist_true = var0 ( ( var1 , 'endifchanged' ) )"
nodelist_true_output is None.,var0 is var1 ,nodelist_true_output = None,var0 = var1
append self to nodes.,append self to nodes.,nodes . append ( self ),nodes . append ( self )
"call the method node.get_nodes_by_type with an argument nodetype, extend nodes with it.",call method node var1 with argument var2 extend nodes with it.,nodes . extend ( node . get_nodes_by_type ( nodetype ) ),nodes . extend ( node . var1 ( var2 ) )
"call the method nodelist.get_nodes_by_type with an argument nodetype, extend nodes with the result.",call method nodelist var1 with argument var2 extend nodes with result.,nodes . extend ( nodelist . get_nodes_by_type ( nodetype ) ),nodes . extend ( nodelist . var1 ( var2 ) )
nodes is an empty list.,nodes is empty list.,nodes = [ ],nodes = [ ]
modes is an empty list.,modes is empty list.,nodes = [ ],nodes = [ ]
"if nofollow is true nofollow_attr is a string ' rel=""nofollow""', otherwise nofollow_attr is an empty string.","if nofollow is true var0 is string var4, otherwise var0 is empty string.",nofollow_attr = ' rel='nofollow'' if nofollow else '',var0 = ' rel='nofollow'' if nofollow else ''
nofollow_attr is an empty string.,var0 is empty string.,nofollow_attr = '',var0 = ''
"get attribute '_non_atomic_requests' from the view object, if the attribute doesnt exist return the empty set, substitute the result for non_atomic_requests.","get attribute var0 from view object, if attribute doesnt exist return empty set, substitute result for non_atomic_requests.","non_atomic_requests = getattr ( view , '_non_atomic_requests' , set ( ) )","non_atomic_requests = getattr ( view , var0 , set ( ) )"
append length of result to non_capturing_groups.,append length of result to var0 ,non_capturing_groups . append ( len ( result ) ),var0 . append ( len ( result ) )
non_capturing_groups is an empty list.,var0 is empty list.,non_capturing_groups = [ ],var0 = [ ]
NON_FIELD_ERRORS is an string '__all__'.,var0 is string var1.,NON_FIELD_ERRORS = '__all__',var0 = var1
"opts.localized_fields, opts.labels, opts.help_texts and opts.error_messages, substitute the result for fields.   for every k and v in return value of the function six.iteritems called with an argument fields, if n is false, append it to a list,","opts var1 var2 opts var4 and opts var6 substitute result for fields var7 for every k and v in return value of function var8 called with argument fields, if n is false, append it to list,","none_model_fields = [ k for k , v in six . iteritems ( fields ) if not v ]","none_model_fields = [ k for k , v in var8 ( fields ) if not v ]"
none_value is a tuple containing 2 elements: integer 0 and string '---'.,var0 is tuple containing 2 elements: integer 0 and string var1.,"none_value = ( 0 , '---' )","var0 = 0 , var1"
nonlocal_root is an list with an element root.,var0 is list with element root.,nonlocal_root = [ root ],var0 = [ root ]
"for p in self.ignore_patterns if p ends with dir_suffix take sliced list p from the start,","for p in self var1 if p ends with var2 take sliced list p from start,",norm_patterns = [ p [ : - len ( dir_suffix ) ] if p . endswith ( dir_suffix ) else p for p in self . ignore_patterns ],norm_patterns = [ ( p [ : - len ( var2 ) ] if p . endswith ( var2 ) else p ) for p in self . var1 ]
"call the function allow_lazy with 2 arguments: normalize_newlines and six.text_type, substitute the result for normalize_newlines.",call function var0 with 2 arguments: var1 and six var6 substitute result for var1 ,"normalize_newlines = allow_lazy ( normalize_newlines , six . text_type )","var1 = var0 ( var1 , six . var6 )"
append first element of e.args to not_found list.,append first element of var0 to var1 list.,not_found . append ( e . args [ 0 ] ),var1 . append ( var0 [ 0 ] )
not_found is an empty list.,var0 is empty list.,not_found = [ ],var0 = [ ]
"call the method pending_references.keys, put the result into a set and substitute it for not_installed_models.","call method var0 keys, put result into set and substitute it for var2 ",not_installed_models = set ( pending_references . keys ( ) ),var2 = set ( var0 . keys ( ) )
call the method notifier.check_events with argument timeout set to None.,call method notifier var1 with argument var2 set to var3 ,notifier . check_events ( timeout = None ),notifier . var1 ( var2 = var3 )
call the method notifier.process_events.,call method notifier var1 ,notifier . process_events ( ),notifier . var1 ( )
call the method notifier.read_events.,call method notifier var1 ,notifier . read_events ( ),notifier . var1 ( )
call the method notifier.stop.,call method var0 ,notifier . stop ( ),var0 ( )
"call the method pyinotify.Notifier with wm and EventHandler() as arguments, assign the result to notifier.","call method var0 var1 with var2 and EventHandler() as arguments, assign result to var5 ","notifier = pyinotify . Notifier ( wm , EventHandler ( ) )","var5 = var0 . var1 ( var2 , var3 ( ) )"
"call the function datetime.datetime with utc as argument if call to the is_aware(d) returns True, if not None is the argument, store the result in now.","call function var0 with utc as argument if call to is_aware(d) returns var3 if not var4 is argument, store result in now.",now = datetime . datetime . now ( utc if is_aware ( d ) else None ),now = var0 . now ( utc if var1 ( d ) else var4 )
"call the function datetime.datetime with 3 arguments, now.year, now.month and now.day, substitute the result for now.",call function var0 with 3 arguments var1 var2 and var3 substitute result for now.,"now = datetime . datetime ( now . year , now . month , now . day )","now = var0 ( var1 , var2 , var3 )"
"call the function datetime.now, substitute the result to now.",call function var0 substitute result to now.,now = datetime . now ( ),now = var0 ( )
"call the function datetime.now, on the result call the method strftime with an argument string '%B %d, %Y - %X', substitute the result for now.","call function var0 on result call method var1 with argument string var2, substitute result for now.","now = datetime . now ( ) . strftime ( '%B %d, %Y - %X' )",now = var0 ( ) . var1 ( var2 )
"call the function datetime.utcnow, substitute the result for now.",call function var0 substitute result for now.,now = datetime . utcnow ( ),now = var0 ( )
"call the method now.decode with an argument string 'utf-8', substitute the result for now.","call method var0 with argument string var1, substitute result for now.",now = now . decode ( 'utf-8' ),now = var0 ( var1 )
"call the function now.replace with microseconds set to integer 0, substitute the result for now.","call function var0 with microseconds set to integer 0, substitute result for now.",now = now . replace ( microsecond = 0 ),now = var0 ( microsecond = 0 )
"call the method now.replace with the argument microsecond set to integer 0, substitute the result for now.","call method var0 with argument microsecond set to integer 0, substitute result for now.",now = now . replace ( microsecond = 0 ),now = var0 ( microsecond = 0 )
"call the method now.replace with argument tzinfo set to None, substitute it for now.",call method var0 with argument var1 set to var2 substitute it for now.,now = now . replace ( tzinfo = None ),now = var0 ( var1 = var2 )
"call the timezone.now function, substitute the result for now.","call var0 function, substitute result for now.",now = timezone . now ( ),now = var0 ( )
"ns is a string ""http://www.w3.org/2005/Atom"".",ns is string var0.,ns = 'http://www.w3.org/2005/Atom',ns = 'http://www.w3.org/2005/Atom'
substitute first element of app_list for ns.,substitute first element of var0 for ns.,ns = app_list [ 0 ],ns = var0 [ 0 ]
substitute current_app for ns.,substitute var0 for ns.,ns = current_app,ns = var0
pop the element form the path as substitute the result for ns.,pop element form path as substitute result for ns.,ns = path . pop ( ),ns = path . pop ( )
ns_pattern is an empty string.,var0 is empty string.,ns_pattern = '',var0 = ''
"add ns_pattern and extra, substitute the result for ns_pattern.","add var0 and extra, substitute result for var0 ",ns_pattern = ns_pattern + extra,var0 = var0 + extra
"ns_resolver is class instance of a class RegexURLResolver, created with 2 arguments: ns_pattern and resolver.url_patterns.",var0 is class instance of class var1 created with 2 arguments: var2 and resolver var5 ,"ns_resolver = RegexURLResolver ( ns_pattern , resolver . url_patterns )","var0 = var1 ( var2 , resolver . var5 )"
increment num by one.,increment var0 by one.,num += 1,var0 += 1
num is an integer 0.,var0 is integer 0.,num = 0,var0 = 0
the variable num is integer 3,the variable var0 is integer 3,num = 3,var0 = 3
num is integer 3,var0 is integer 3,num = 3,var0 = 3
assign 3 to num,assign 3 to var0,num = 3,var0 = 3
assign 3 to the variable num,assign 3 to variable var0,num = 3,var0 = 3
"fetch one record from the database cursor points at, substitute the first element of return value for num.","fetch one record from database cursor points at, substitute first element of return value for var0 ",num = cursor . fetchone ( ) [ 0 ],var0 = cursor . fetchone ( ) [ 0 ]
"fetch next entry for the database that cursor points into, substitute first element of it for num.","fetch next entry for database var0 cursor points into, substitute first element of it for var1 ",num = cursor . fetchone ( ) [ 0 ],var1 = cursor . fetchone ( ) [ 0 ]
increment num_args by one.,increment var0 by one.,num_args += 1,var0 += 1
num_args is an integer 0.,var0 is integer 0.,num_args = 0,var0 = 0
num_entries is length of filelist.,var0 is length of var1 ,num_entries = len ( filelist ),var0 = len ( var1 )
substitute length of existing for num_existing.,substitute length of existing for var0 ,num_existing = len ( existing ),var0 = len ( existing )
substitute length of self.loopvars for num_loopvars.,substitute length of var0 for var1 ,num_loopvars = len ( self . loopvars ),var1 = len ( var0 )
num_pages is a property object with _get_num_pages as a getter method.,var0 is property object with var1 as var2 method.,num_pages = property ( _get_num_pages ),var0 = property ( var1 )
increment num_sent by one.,increment var0 by one.,num_sent += 1,var0 += 1
num_sent is an integer 0.,var0 is integer 0.,num_sent = 0,var0 = 0
"reverse element order of dicts, join them in a string, substitute the result for number.","reverse element order of var0 join var1 in string, substitute result for number.",number = '' . join ( reversed ( digits ) ),number = '' . join ( reversed ( digits ) )
convert number into an integer and substitute it for number,convert number into integer and substitute it for number,number = int ( number ),number = int ( number )
"call the method self.validate_number with an argument number, substitute it for number.","call method self var1 with argument number, substitute it for number.",number = self . validate_number ( number ),number = self . var1 ( number )
"convert number to a string, truncate first element.","convert number to string, truncate first element.",number = str ( number ) [ 1 : ],number = str ( number ) [ 1 : ]
"append current_number to a list for current_number in self._unget_history, if current_number is equal to num_bytes,",append var0 to list for var0 in var3 if var0 is equal to var4 ,number_equal = len ( [ current_number for current_number in self . _unget_history if current_number == num_bytes ] ),number_equal = len ( [ var0 for var0 in var3 if var0 == var4 ] )
substitute rhs for number_value.,substitute rhs for var0 ,number_value = rhs,var0 = rhs
substitute value under the number key of the rhs dictionary for number_value.,substitute value under number key of rhs dict for var0 ,number_value = rhs [ number ],var0 = rhs [ number ]
"numbers is a list containing return value of the MigrationAutodetector.parse_number method called with an argument migration.name,",numbers is list containing return value of var0 var2 method called with argument var3 ,numbers = [ MigrationAutodetector . parse_number ( migration . name ) for migration in merge_migrations ],numbers = [ var0 . var2 ( var3 ) for migration in merge_migrations ]
substitute cls for obj.__class__.,substitute cls for var0 ,obj . __class__ = cls,var0 = cls
substitute self.__class__ for obj.__class__.,substitute var0 for var1 ,obj . __class__ = self . __class__,var1 = var0
obj._constructor_args is a tuple with 2 elements: args and kwargs.,var0 is tuple with 2 elements: var1 and var2 ,"obj . _constructor_args = ( args , kwargs )","var0 = var1 , var2"
"call the method self.attrs.copy, substitute the result for obj.attrs.",call method var0 substitute result for var1 ,obj . attrs = self . attrs . copy ( ),var1 = var0 ( )
"call the function copy.deepcopy with 2 arguments: self.children and memodict, substitute the result for obj.children.",call function var0 with 2 arguments: var1 and var2 substitute result for var3 ,"obj . children = copy . deepcopy ( self . children , memodict )","var3 = var0 ( var1 , var2 )"
call the method obj.delete.,call method var0 ,obj . delete ( ),var0 ( )
"call the method Model._default_manager.db_manager with an argument db, on the result call the get_by_natural_key with,","call method var0 _default_manager var2 with argument db, on result call var3 with,",obj . pk = Model . _default_manager . db_manager ( db ) . get_by_natural_key ( * natural_key ) . pk,obj . pk = var0 . _default_manager . var2 ( db ) . var3 ( * natural_key ) . pk
call the method obj.save.,call method var0 ,obj . save ( ),var0 ( )
call the method obj.save with an argument using set to self.using.,call method var0 with argument using set to var1 ,obj . save ( using = self . using ),var0 ( using = var1 )
"call the method copy.deepcopy with an argument self.widgets, substitute the result for obj.widgets.",call method var0 with argument var1 substitute result for var2 ,obj . widgets = copy . deepcopy ( self . widgets ),var2 = var0 ( var1 )
"convert app and model._meta.object_name to strings, join them with separating '.' character, substitute it for obj.","convert var0 and model._meta var2 to strings, join var4 with separating var5 character, substitute it for var3 ","obj = '%s.%s' % ( app , model . _meta . object_name )","var3 = '%s.%s' % ( var0 , model . _meta . var2 )"
"obj is a string ""?"".",var0 is string var1?var1.,obj = '?',var0 = '?'
"call the method base.build_instance with arguments Model, data and db, substitute the result for obj.","call method base var1 with arguments var2 data and db, substitute result for var3 ","obj = base . build_instance ( Model , data , db )","var3 = base . var1 ( var2 , data , db )"
"call the method base.build_instance with arguments Model, data and self.db, substitute the result for obj.",call method base var1 with arguments var2 data and var3 substitute result for var4 ,"obj = base . build_instance ( Model , data , self . db )","var4 = base . var1 ( var2 , data , var3 )"
"call the method copy.copy, substitute the result for obj.",call method var0 substitute result for var1 ,obj = copy . copy ( self ),var1 = var0 ( self )
"call the method field.rel.to._default_manager.db_manager with db as argument, call the get_by_natural_key method on the result with,","call method field.rel.to._default_manager var1 with db as argument, call var2 method on result with,",obj = field . rel . to . _default_manager . db_manager ( db ) . get_by_natural_key ( * field_value ),obj = field . rel . to . _default_manager . var1 ( db ) . var2 ( * field_value )
"call the method field.rel.to._default_manager.db_manager with an argument self.db, on the result call the method get_by_natural_key,",call method field.rel.to._default_manager var1 with argument var2 on result call method var3 ,obj = field . rel . to . _default_manager . db_manager ( self . db ) . get_by_natural_key ( * field_value ),obj = field . rel . to . _default_manager . var1 ( var2 ) . var3 ( * field_value )
"call the function force_str with argument self.obj, substitute the result for obj.",call function var0 with argument var1 substitute result for var2 ,obj = force_str ( self . obj ),var2 = var0 ( var1 )
substitute form.instance for obj.,substitute var0 for var1 ,obj = form . instance,var1 = var0
"call the method form.save, with an argument commit set to boolean False, substitute the result for obj.",call method var0 with argument commit set to boolean var1 substitute result for var2 ,obj = form . save ( commit = False ),var2 = var0 ( commit = var1 )
"get models.signals name attribute, store it in obj.","get var0 name attribute, store it in var1 ","obj = getattr ( models . signals , name )","var1 = getattr ( var0 , name )"
"call the function mark_for_escaping with an argument new_obj, substitute the result for obj.",call function var0 with argument var1 substitute result for var3 ,obj = mark_for_escaping ( new_obj ),var3 = var0 ( var1 )
"call the function mark_safe with an argument new_obj, substitute the result for obj.",call function var0 with argument var1 substitute result for var3 ,obj = mark_safe ( new_obj ),var3 = var0 ( var1 )
"obj is an instance of Model class, created with an unpacked dictionary data as argument.","var0 is instance of var1 class, created with unpacked dict data as argument.",obj = Model ( ** data ),var0 = var1 ( ** data )
substitute new_obj for obj.,substitute var0 for obj.,obj = new_obj,obj = var0
"obj is an instance of Node class, created with 3 arguments: children, connector and negated.","var0 is instance of var1 class, created with 3 arguments: children, connector and negated.","obj = Node ( children , connector , negated )","var0 = var1 ( children , connector , negated )"
"obj is an instance of Node class, created with 2 arguments: connector set to self.connector and negated set to self.negated.","var0 is instance of var1 class, created with 2 arguments: connector set to var2 and negated set to var3 ","obj = Node ( connector = self . connector , negated = self . negated )","var0 = var1 ( connector = var2 , negated = var3 )"
"obj is None,",var0 is var1 ,obj = None,var0 = var1
"call the method self._new_instance with 3 arguments: self.children, self.connector and self.negated, substitute the result for obj.",call method var0 with 3 arguments: var1 self.connector and var2 substitute result for var3 ,"obj = self . _new_instance ( self . children , self . connector , self . negated )","var3 = var0 ( var1 , self . connector , var2 )"
substitute self.var for obj.,substitute var0 for var1 ,obj = self . var,var1 = var0
"call the method self.var.resolve with an argument context, substitute it for obj.","call method var0 with argument context, substitute it for var1 ",obj = self . var . resolve ( context ),var1 = var0 ( context )
substitute settings.TEMPLATE_STRING_IF_INVALID with obj.,substitute settings var0 with var1 ,obj = settings . TEMPLATE_STRING_IF_INVALID,var1 = settings . var0
call the method __new__ with an argument cls from the base class of the klass function.,call method __new__ with argument cls from base class of var0 function.,"obj = super ( klass , cls ) . __new__ ( cls )","obj = super ( var0 , cls ) . __new__ ( cls )"
"call the method __deepcopy__ from the base class of the class MultiWidget, with an argument memo, substitute the result for obj.","call method var0 from base class of class var1 with argument memo, substitute result for var2 ","obj = super ( MultiWidget , self ) . __deepcopy__ ( memo )","var2 = super ( var1 , self ) . var0 ( memo )"
"call the function template_localtime with 2 arguments: obj and context.use_tz, substitute the result for obj.",call function var0 with 2 arguments: var1 and context var4 substitute result for var1 ,"obj = template_localtime ( obj , context . use_tz )","var1 = var0 ( var1 , context . var4 )"
"value under '_data' key of obj_dict is a dictionary created with tuples containing 2 elements: k and result of the function,","value under var0 key of var1 is dict created with var3 containing 2 elements: k and result of function,","obj_dict [ '_data' ] = dict ( ( k , self . getlist ( k ) ) for k in self )","var1 [ var0 ] = dict ( ( k , self . getlist ( k ) ) for k in self )"
"call the method self.__dict__.copy, substitute the result for obj_dict.",call method var0 substitute result for var1 ,obj_dict = self . __dict__ . copy ( ),var1 = var0 ( )
"call the __getstate__ method from the base class of the class SimpleTemplateResponse, substitute the result for obj_dict.",call __getstate__ method from base class of class var0 substitute result for var1 ,"obj_dict = super ( SimpleTemplateResponse , self ) . __getstate__ ( )","var1 = super ( var0 , self ) . __getstate__ ( )"
"call the method self.target.resolve with 2 arguments: context and boolean True, substitute it for obj_list.",call method var0 with 2 arguments: context and boolean var1 substitute it for var2 ,"obj_list = self . target . resolve ( context , True )","var2 = var0 ( context , var1 )"
"call the method field.rel.to._default_manager.db_manager with an argument self.db, on the result call the method get_by_natural_key,",call method field.rel.to._default_manager var1 with argument var2 on result call method var3 ,obj_pk = field . rel . to . _default_manager . db_manager ( self . db ) . get_by_natural_key ( * field_value ) . pk,obj_pk = field . rel . to . _default_manager . var1 ( var2 ) . var3 ( * field_value ) . pk
"call the field.rel.to._meta.get_field method with an field.rel.field_name argument, on the result call the method to_python,","call field.rel.to._meta var1 method with field.rel var3 argument, on result call method var4 ",obj_pk = field . rel . to . _meta . get_field ( field . rel . field_name ) . to_python ( field_value ),obj_pk = field . rel . to . _meta . var1 ( field . rel . var3 ) . var4 ( field_value )
"call the method n.getAttribute with string 'pk' as argument, use the result as an argument for the call to the field.rel.to._meta.pk.to_python method, substitute the result for obj_pk.","call method n var1 with string var2 as argument, use result as argument for call to field.rel.to._meta.pk var4 method, substitute result for var5 ",obj_pk = field . rel . to . _meta . pk . to_python ( n . getAttribute ( 'pk' ) ),var5 = field . rel . to . _meta . pk . var4 ( n . var1 ( var2 ) )
"with unpacked list field_value as an argument, substitute the result for obj.   get the field.rel.field_name from the obj, substitute it for obj_pk.","with unpacked list var0 as argument, substitute result for var1 get field.rel var5 from var1 substitute it for var6 ","obj_pk = getattr ( obj , field . rel . field_name )","var6 = getattr ( var1 , field . rel . var5 )"
substitute return value of the method obj._get_pk_val for obj_pk.,substitute return value of method var0 for var1 ,obj_pk = obj . _get_pk_val ( ),var1 = var0 ( )
substitute obj_pk.pk for obj_pk.,substitute var0 pk for var0 ,obj_pk = obj_pk . pk,var0 = var0 . pk
update object_data dictionary with initial.,update var0 dict with initial.,object_data . update ( initial ),var0 . update ( initial )
object_data is an empty dictionary.,var0 is empty dict.,object_data = { },var0 = { }
"call the method model_to_dict with 3 arguments: instance, opts.fields, opts.exclude and substitute the result for object_data.",call method var0 with 3 arguments: instance var1 var2 and substitute result for var3 ,"object_data = model_to_dict ( instance , opts . fields , opts . exclude )","var3 = var0 ( instance , var1 , var2 )"
"call the function json.loads with an argument stream_or_string, substitute the result for objects.",call function var0 with argument var1 substitute result for objects.,objects = json . loads ( stream_or_string ),objects = var0 ( var1 )
substitute model._base_manager for objects.,substitute var0 for objects.,objects = model . _base_manager,objects = var0
substitute model._default_manager for objects.,substitute var0 for objects.,objects = model . _default_manager,objects = var0
"substitute '%s' with ser_fmt, fixture_name and return value of the function humanize called with an argument fixture_dir.   call the method serializers.deserialize with 4 arguments: ser_fmt, fixture, using set to self.using,","substitute var0 with var1 var5 and return value of function humanize called with argument var7 call method var10 with 4 arguments: var1 fixture, using set to var11 ","objects = serializers . deserialize ( ser_fmt , fixture , using = self . using , ignorenonexistent = self . ignore )","objects = var10 ( var1 , fixture , using = var11 , ignorenonexistent = self . ignore )"
increment objects_in_fixture by one.,increment var0 by one.,objects_in_fixture += 1,var0 += 1
objects_in_fixture is integer 0.,var0 is integer 0.,objects_in_fixture = 0,var0 = 0
"for every c in candidate without the last element and in reversed order, convert c into an integer,","for every c in didate var0 last element and in reversed order, convert c into integer,",odds = sum ( LUHN_ODD_LOOKUP [ int ( c ) ] for c in candidate [ - 2 : : - 2 ] ),odds = sum ( LUHN_ODD_LOOKUP [ int ( c ) ] for c in candidate [ - 2 : : - 2 ] )
"floor the division of delta by integer 100 and delta by integer 400, sum the two results, multiply integer 6 by it, substitute the result for off.","floor division of delta by integer 100 and delta by integer 400, sum two results, multiply integer 6 by it, substitute result for off.",off = 6 * ( delta // 100 + delta // 400 ),off = 6 * ( delta // 100 + delta // 400 )
multiply offset by integer -1.,multiply offset by integer var0 ,offset = - offset,offset = - offset
"find the last index of newline occurrence in self.__starttag_text, subtract it from total length of self.__starttag_text,",find last index of var0 occurrence in var1 subtract it from total length of var1 ,offset = ( len ( self . __starttag_text ) - self . __starttag_text . rfind ( '\n' ) ),offset = len ( var1 ) - var1 . rfind ( '\n' )
"substitute the result for offset_mins, otherwise offset_mins is integer 0.   convert elements of tzinfo from indexes 1 to 3 to an integer, multiply it by integer 60 and increment it by offset_mins,","substitute result for var0 otherwise var0 is integer 0 var3 convert elements of var4 from indexes 1 to 3 to integer, multiply it by integer 60 and increment it by var0 ",offset = 60 * int ( tzinfo [ 1 : 3 ] ) + offset_mins,offset = 60 * int ( var4 [ 1 : 3 ] ) + var0
"call the method date.tzinfo.utcoffset with an argument date, substitute the result for offset.","call method var0 with argument date, substitute result for offset.",offset = date . tzinfo . utcoffset ( date ),offset = var0 ( date )
substitute offset.seconds for offset.,substitute var0 for offset.,offset = offset . seconds // 60,offset = var0 // 60
increment the offset by the length of self.__starttag_text.,increment offset by length of var0 ,offset = offset + len ( self . __starttag_text ),offset = offset + len ( var0 )
substitute self.__offset.seconds for offset.,substitute var0 for offset.,offset = self . __offset . seconds // 60,offset = var0 // 60
"call the method self.timezone.utcoffset with an argument self.data, substitute the result for offset.",call method var0 with argument var1 substitute result for offset.,offset = self . timezone . utcoffset ( self . data ),offset = var0 ( var1 )
"if length of tzinfo is greater than integer 3, convert elements of tzinfo from indexes 1 to 3 to an integer,","if length of var0 is greater var2 integer 3, convert elements of var0 from indexes 1 to 3 to integer,",offset_mins = int ( tzinfo [ - 2 : ] ) if len ( tzinfo ) > 3 else 0,offset_mins = int ( var0 [ - 2 : ] ) if len ( var0 ) > 3 else 0
"append work_file to string '#: ', substitute it for old.","append var0 to string var2, substitute it for old.",old = '#: ' + work_file,old = var2 + var0
"append work_file to string '#: ', substitute it for old.","append var0 to string var2, substitute it for old.",old = '#: ' + work_file [ 2 : ],old = var2 + var0 [ 2 : ]
"append the result to app_dirs.   join app_dir and string 'models/sql' into a file path, use the result as an argument for the call to the function os.path.normpath,","append result to var0 join var1 and string var5 into file path, use result as argument for call to function var6 ","old_app_dir = os . path . normpath ( os . path . join ( app_dir , 'models/sql' ) )","old_var1 = var6 ( os . path . join ( var1 , var5 ) )"
substitute name for old_attr.,substitute name for var0 ,old_attr = name,var0 = name
substitute field_name for old_field_name.,substitute var0 for var1 ,old_field_name = field_name,old_var0 = var0
assign the handle to stream.   old_field_name is None.,assign handle to stream var1 is var3 ,old_field_name = None,var1 = var3
old_field_name is None.,var0 is var1 ,old_field_name = None,var0 = var1
old_handler is None.,var0 is var1 ,old_handler = None,var0 = var1
"call the signal.signal method with signal.SIGTTOU and signal.SIG_IGN as arguments, store the result in old_handler.","call var0 method with signal var1 and signal var2 as arguments, store result in var3 ","old_handler = signal . signal ( signal . SIGTTOU , signal . SIG_IGN )","var3 = var0 ( signal . var1 , signal . var2 )"
"get the value under the old_method_name key of the base.__dict__ dictionary, substitute it for old_method.","get value under var0 key of var2 dict, substitute it for var1 ",old_method = base . __dict__ . get ( old_method_name ),var1 = var2 . get ( var0 )
substitute first element of renamed_method for old_method_name.,substitute first element of var0 for var1 ,old_method_name = renamed_method [ 0 ],var1 = var0 [ 0 ]
"join root and filename into a file path, substitute it for old_path.","join root and filename into file path, substitute it for var0 ","old_path = path . join ( root , filename )","var0 = path . join ( root , filename )"
substitute context.autoescape for old_setting.,substitute var0 for var1 ,old_setting = context . autoescape,var1 = var0
old_style_list is boolean True.,var0 is boolean var1 ,old_style_list = True,var0 = var1
"call the os.umask function with argument integer 0, substitute the result for old_umask.","call var0 function with argument integer 0, substitute result for var1 ",old_umask = os . umask ( 0 ),var1 = var0 ( 0 )
substitute value under the KEY key of the root dictionary for oldkey.,substitute value under var0 key of root dict for var1 ,oldkey = root [ KEY ],var1 = root [ var0 ]
substitute key for value under the KEY key of the oldroot dictionary.,substitute key for value under var0 key of var1 dict.,oldroot [ KEY ] = key,var1 [ var0 ] = key
substitute result for value under the RESULT key of the oldroot dictionary.,substitute result for value under var0 key of var1 dict.,oldroot [ RESULT ] = result,var1 [ var0 ] = result
substitute root for oldroot.,substitute root for var0 ,oldroot = root,var0 = root
substitute value under the RESULT key of the root dictionary for oldvalue.,substitute value under var0 key of root dict for var1 ,oldvalue = root [ RESULT ],var1 = root [ var0 ]
"call the function re.compile with an argument raw string ""(?<!%)%(?!%)"", substitute the result for one_percent_re.","call function var0 with argument raw string ""(?<!%)%(?!%)"", substitute result for var2 ",one_percent_re = re . compile ( r'''(?<!%)%(?!%)''' ),var2 = var0 ( '(?<!%)%(?!%)' )
substitute key for op.id.,substitute key for var0 ,op . id = key,var0 = key
substitute OPERATORS dictionary element under token key for op.,substitute var0 dict element under token key for var1 ,op = OPERATORS [ token ],var1 = var0 [ token ]
crate a file named init_path.,crate file named var0 ,"open ( init_path , 'w' ) . close ( )","open ( var0 , 'w' ) . close ( )"
"self.parse_name, assign the result to _, ser_fmt and cmp_fmt, respectively.   get the value under the cmp_fmt key of the self.compression_formats dictionary, assign it to open_method and mode.","self var1 assign result to _ var2 and var4 respectively var8 get value under var4 key of self var10 dict, assign it to var11 and mode.","open_method , mode = self . compression_formats [ cmp_fmt ]","var11 , mode = self . var10 [ var4 ]"
insert tagname at the beginning of open_tags.,insert var0 at beginning of var1 ,"open_tags . insert ( 0 , tagname )","var1 . insert ( 0 , var0 )"
open_tags is an empty list.,var0 is empty list.,open_tags = [ ],var0 = [ ]
"create a list out of open_tags elements form (i+1)-th index to the end, substitute it for open_tags.","create list out of var0 elements form (i+1)-th index to end, substitute it for var0 ",open_tags = open_tags [ i + 1 : ],var0 = var0 [ i + 1 : ]
call the method operations.extend with an argument smigration.operations.,call method var0 with argument var1 ,operations . extend ( smigration . operations ),var0 ( var1 )
operations is an empty list.,operations is empty list.,operations = [ ],operations = [ ]
"OPERATORS is an dictionary with 12 initial entries: result of the function inflix called with 2 arguments, integer 6,","OPERATORS is dict with 12 initial entries: result of function var0 called with 2 arguments, integer 6,","OPERATORS = { 'or' : infix ( 6 , lambda context , x , y : x . eval ( context ) or y . eval ( context ) ) , 'and' : infix ( 7 , lambda context , x , y : x . eval ( context ) and y . eval ( context ) ) , 'not' : prefix ( 8 , lambda context , x : not x . eval ( context ) ) , 'in' : infix ( 9 , lambda context , x , y : x . eval ( context ) in y . eval ( context ) ) , 'not in' : infix ( 9 , lambda context , x , y : x . eval ( context ) not in y . eval ( context ) ) , '=' : infix ( 10 , lambda context , x , y : x . eval ( context ) == y . eval ( context ) ) , '==' : infix ( 10 , lambda context , x , y : x . eval ( context ) == y . eval ( context ) ) , '!=' : infix ( 10 , lambda context , x , y : x . eval ( context ) != y . eval ( context ) ) , '>' : infix ( 10 , lambda context , x , y : x . eval ( context ) > y . eval ( context ) ) , '>=' : infix ( 10 , lambda context , x , y : x . eval ( context ) >= y . eval ( context ) ) , '<' : infix ( 10 , lambda context , x , y : x . eval ( context ) < y . eval ( context ) ) , '<=' : infix ( 10 , lambda context , x , y : x . eval ( context ) <= y . eval ( context ) ) , }","OPERATORS = { 'or' : infix ( 6 , lambda context , x , y : x . eval ( context ) or y . eval ( context ) ) , 'and' : infix ( 7 , lambda context , x , y : x . eval ( context ) and y . eval ( context ) ) , 'not' : prefix ( 8 , lambda context , x : not x . eval ( context ) ) , 'in' : infix ( 9 , lambda context , x , y : x . eval ( context ) in y . eval ( context ) ) , 'not in' : infix ( 9 , lambda context , x , y : x . eval ( context ) not in y . eval ( context ) ) , '=' : infix ( 10 , lambda context , x , y : x . eval ( context ) == y . eval ( context ) ) , '==' : infix ( 10 , lambda context , x , y : x . eval ( context ) == y . eval ( context ) ) , '!=' : infix ( 10 , lambda context , x , y : x . eval ( context ) != y . eval ( context ) ) , '>' : infix ( 10 , lambda context , x , y : x . eval ( context ) > y . eval ( context ) ) , '>=' : infix ( 10 , lambda context , x , y : x . eval ( context ) >= y . eval ( context ) ) , '<' : infix ( 10 , lambda context , x , y : x . eval ( context ) < y . eval ( context ) ) , '<=' : infix ( 10 , lambda context , x , y : x . eval ( context ) <= y . eval ( context ) ) }"
"get opname attribute from int object, substitute its field __doc__ for opfunc.__doc__.","get var0 attribute from var1 object, substitute its field var2 for opfunc var2 ","opfunc . __doc__ = getattr ( int , opname ) . __doc__","opfunc . var2 = getattr ( var1 , var0 ) . var2"
substitute opname for opfunc.__name__.,substitute var0 for var1 ,opfunc . __name__ = opname,var1 = var0
"opt_dict is an dictionary with 5 elements: '1' for 'bold', '4' for 'underscore', '5' for 'blink', '7' for 'reverse',","var0 is dict with 5 elements: var1 for var2, var3 for var4, var5 for var6, var7 for var8,","opt_dict = { 'bold' : '1' , 'underscore' : '4' , 'blink' : '5' , 'reverse' : '7' , 'conceal' : '8' }","var0 = { 'bold' : var1 , 'underscore' : '4' , 'blink' : '5' , 'reverse' : '7' , 'conceal' : '8' }"
append '=' to opt_label.,append var0 to var1 ,opt_label += '=',var1 += var0
substitute first element of options for opt_label.,substitute first element of options for var0 ,opt_label = option [ 0 ],var0 = option [ 0 ]
optimizer is an instance of MigrationOptimizer class.,var0 is instance of var1 class.,optimizer = MigrationOptimizer ( ),var0 = var1 ( )
option is a string '--testrunner='.,option is string var0.,option = '--testrunner=',option = var0
"remove first element from remaining_bits, substitute the result for option.",remove first element from var0 substitute result for option.,option = remaining_bits . pop ( 0 ),option = var0 . pop ( 0 )
options_list is an empty tuple.,var0 is empty tuple.,option_list = ( ),option_list = ( )
option_value is an empty string.,var0 is empty string.,option_value = '',var0 = ''
"call the function force_text with an argument option_value, substitute the result for option_value.",call function var0 with argument var1 substitute result for var1 ,option_value = force_text ( option_value ),var1 = var0 ( var1 )
"call the method parser.parse_args with argv, without the first 2 elements, substitute the result for options and args.","call method parser var1 with var2 var3 first 2 elements, substitute result for options and args.","options , args = parser . parse_args ( argv [ 2 : ] )","options , args = parser . var1 ( var2 [ 2 : ] )"
"call the method parser.parse_known_args wiht an argument self.argv, without the first two elements, assign the result for options,","call method parser var0 var1 argument var2 var3 first two elements, assign result for options,","options , args = parser . parse_known_args ( self . argv [ 2 : ] )","options , args = parser . var0 ( var2 [ 2 : ] )"
call the options.update method with an argument kwargs.,call var0 method with argument var1 ,options . update ( kwargs ),var0 ( var1 )
"call the function get_random_string with 2 arguments: integer 50 and chars, substitute it for value under the 'secret_key' of the options dictionary.","call function var0 with 2 arguments: integer 50 and chars, substitute it for value under var2 of options dict.","options [ 'secret_key' ] = get_random_string ( 50 , chars )","options [ var2 ] = var0 ( 50 , chars )"
substitute v for value under the k converted to lower case key of options dictionary.,substitute v for value under k converted to lower case key of options dict.,options [ k . lower ( ) ] = v,options [ k . lower ( ) ] = v
substitute value for value under the options key of options dictionary.,substitute value for value under options key of options dict.,options [ option ] = value,options [ option ] = value
"append tuple containing two entries: app_config.label and integer 0 to options, for every app_config in app_configs.","append tuple containing two entries: var0 label and integer 0 to options, for every var0 in var3 ","options += [ ( app_config . label , 0 ) for app_config in app_configs ]","options += [ ( var0 . label , 0 ) for var0 in var0s ]"
"append tuple containing two entries: k and integer 1 to options, for every k in FASTCGI_OPTIONS.","append tuple containing two entries: k and integer 1 to options, for every k in var0 ","options += [ ( k , 1 ) for k in FASTCGI_OPTIONS ]","options += [ ( k , 1 ) for k in var0 ]"
"append to options a tuple containing 2 entries: result of the method s_opt.get_opt_string and s_opt.nargs,","append to options tuple containing 2 entries: result of method var0 var3 and var0 nargs,","options += [ ( s_opt . get_opt_string ( ) , s_opt . nargs ) for s_opt in parser . option_list ]","options += [ ( var0 . var3 ( ) , var0 . nargs ) for var0 in parser . option_list ]"
"append to options a tuple containing 2 entries: firs element of sorted list of the s_opt.option_strings,",append to options tuple containing 2 entries: firs element of sorted list of var0 var2 ,"options += [ ( sorted ( s_opt . option_strings ) [ 0 ] , s_opt . nargs != 0 ) for s_opt in parser . _actions if s_opt . option_strings ]","options += [ ( sorted ( var0 . var2 ) [ 0 ] , var0 . nargs != 0 ) for var0 in parser . _actions if var0 . var2 ]"
options is a list containing a tuple with 2 entries: string '--help' and None.,options is list containing tuple with 2 entries: string var0 and var1 ,"options = [ ( '--help' , None ) ]","options = [ ( var0 , var1 ) ]"
"split x by character '=' and append first element of the result to the prev_opts list.   for every opt in options, if first element of opt is not contained in prev_opts, append opt to the list, substitute it for options.","split x by character var0 and append first element of result to var1 list var5 for every opt in options, if first element of opt is not contained in var1 append opt to list, substitute it for options.",options = [ opt for opt in options if opt [ 0 ] not in prev_opts ],options = [ opt for opt in options if opt [ 0 ] not in var1 ]
where '%r' is replaced with first element of bits.   options is an empty dictionary.,var0 var1 is replaced with first element of bits var2 options is empty dict.,options = { },options = { }
"call the method FASTCGI_OPTIONS.copy, substitute the result for options.","call method var0 copy, substitute result for options.",options = FASTCGI_OPTIONS . copy ( ),options = var0 . copy ( )
"call the params.get with string 'OPTIONS' and empty dictionary as arguments, substitute the result for options.","call var0 with string var1 and empty dict as arguments, substitute result for options.","options = params . get ( 'OPTIONS' , { } )","options = var0 ( var1 , { } )"
"call the method parser.parse_args with argv, without the first 2 elements, substitute the result for options.","call method parser var1 with var2 var3 first 2 elements, substitute result for options.",options = parser . parse_args ( argv [ 2 : ] ),options = parser . var1 ( var2 [ 2 : ] )
"and return value of the function flatatt called with an argument final_attrs, substitute the result for output.   call the method self.render_options with 2 arguments: choices and list with an entry, value, substitute the result for options.","and return value of function var0 called with argument var1 substitute result for output var2 call method self var4 with 2 arguments: choices and list with entry, value, substitute result for options.","options = self . render_options ( choices , [ value ] )","options = self . var4 ( choices , [ value ] )"
"string '<select multiple=""multiple""{0}>' and result of the function flatatt called with an argument final_attrs.   call the method self.render_options with 2 arguments: choices and value, substitute the result for options.","string '<select multiple=""multiple""{0}>' and result of function var1 called with argument var2 call method self var6 with 2 arguments: choices and value, substitute result for options.","options = self . render_options ( choices , value )","options = self . var6 ( choices , value )"
"append tuple containing 2 elements: k and v to a list, for every k and v in options, only if k starts with curr,","append tuple containing 2 elements: k and v to list, for every k and v in options, only if k starts with var0 ","options = sorted ( ( k , v ) for k , v in options if k . startswith ( curr ) )","options = sorted ( ( k , v ) for k , v in options if k . startswith ( var0 ) )"
opts.fields is None.,var0 is var1 ,opts . fields = None,var0 = var1
substitute instance._meta for opts.,substitute var0 for opts.,opts = instance . _meta,opts = var0
substitute model._meta for opts.,substitute var0 for opts.,opts = model . _meta,opts = var0
"instantiate class ModelFormOptions with argument: attribute 'Meta' of the new_class object. if it exists or None, if not,","instantiate class var0 with argument: attribute var2 of var3 object. if it exists or var5 if not,","opts = new_class . _meta = ModelFormOptions ( getattr ( new_class , 'Meta' , None ) )","opts = var3 . _meta = var0 ( getattr ( var3 , var2 , var5 ) )"
"prefix set to None, initial set to None, error_class set to ErrorList, label_suffix set to None,   empty_permitted set to boolean False, instance set to None.   substitute self._meta for opts.",prefix set to var0 initial set to var0 var4 set to var6 var8 set to var0 var12 set to boolean var14 instance set to var0 substitute var15 for opts.,opts = self . _meta,opts = var15
substitute self._meta for opts.,substitute var0 for opts.,opts = self . _meta,opts = var0
"opts is a tuple created out of elements s, for every s in styles is s is in the keys of the opt_dict dictionary.","opts is tuple created out of elements s, for every s in styles is s is in keys of var0 dict.",opts = tuple ( s for s in styles if s in opt_dict . keys ( ) ),opts = tuple ( s for s in styles if s in var0 . keys ( ) )
create a variable orig and set it to an empty list,create variable var0 and set it to empty list,orig = [ ],var0 = [ ]
"get self.to_field attribute of self.parent_instance, substitute it for orig.",get self var1 attribute of self var3 substitute it for var4 ,"orig = getattr ( self . parent_instance , self . to_field )","var4 = getattr ( self . var3 , self . var1 )"
substitute self.parent_instance.pk for orig.,substitute self var0 pk for var1 ,orig = self . parent_instance . pk,var1 = self . var0 . pk
"join self.dirpath and self.file into a file path, substitute it for orig_file.","join var0 and var1 into file path, substitute it for var2 ","orig_file = os . path . join ( self . dirpath , self . file )","var2 = os . path . join ( var0 , var1 )"
remove '__dict__' key from the orig_vars dictionary.,remove var0 key from var1 dict.,"orig_vars . pop ( '__dict__' , None )","var1 . pop ( var0 , None )"
remove '__weakref__' key from the orig_vars dictionary.,remove var0 key from var1 dict.,"orig_vars . pop ( '__weakref__' , None )","var1 . pop ( var0 , None )"
remove slots_var key from the orig_vars dictionary.,remove var0 key from var1 dict.,orig_vars . pop ( slots_var ),var1 . pop ( var0 )
"call the function make_origin with 4 arguments: display_name, self.load_template_source, template_name and template_dirs,",call function var0 with 4 arguments: var1 self var4 var5 and var7 ,"origin = make_origin ( display_name , self . load_template_source , template_name , template_dirs )","origin = var0 ( var1 , self . var4 , var5 , var7 )"
origin is an instance of StringOrigin class created with an argument template_string.,origin is instance of var0 class created with argument var1 ,origin = StringOrigin ( template_string ),origin = var0 ( var1 )
"call the method UnicodeDecodeError.__str__, with self as the argument, substitute the result for original.","call method var0 __str__, with self as argument, substitute result for original.",original = UnicodeDecodeError . __str__ ( self ),original = var0 . __str__ ( self )
"substitute lookup_view for original_lookup,",substitute var0 for var1 ,original_lookup = lookup_view,var1 = var0
append to the variable original_shellcode the hexadecimal value of the variable x followed by a '- ',append to variable var0 hexadecimal value of variable x followed by var2,original_shellcode += '%02x- ' % x,var0 += '%02x- ' % x
"append to the variable original_shellcode the hexadecimal value of the variable x followed by a ', '",append to variable var0 hexadecimal value of variable x followed by var2,"original_shellcode += '%02x, ' % x","var0 += '%02x, ' % x"
call the method os._exit with an argument integer 1.,call method var0 with argument integer 1.,os . _exit ( 1 ),var0 ( 1 )
call the method os.chdir with an argument our_home_dir.,call method var0 with argument var1 ,os . chdir ( our_home_dir ),var0 ( var1 )
call the function os.chmod with arguments dst and mode.,call function var0 with arguments var1 and mode.,"os . chmod ( dst , mode )","var0 ( var1 , mode )"
substitute the result for new_permission.   call the function os.chmod wiht arguments filename and new_permissions.,substitute result for var0 call function var2 var3 arguments filename and var4 ,"os . chmod ( filename , new_permissions )","var2 ( filename , var0s )"
call the function os.chmod with arguments full_path and self.file_permissions_mode.,call function var0 with arguments var1 and self var3 ,"os . chmod ( full_path , self . file_permissions_mode )","var0 ( var1 , self . var3 )"
change access mode of path to stat.S_IWRITE mode.,change access mode of path to var0 var1 mode.,"os . chmod ( path , stat . S_IWRITE )","os . chmod ( path , var0 . var1 )"
close the file fd.,close file var0 ,os . close ( fd ),os . close ( var0 )
close fd file.,close var0 file.,os . close ( fd ),os . close ( var0 )
close fd file descriptor.,close var0 file descriptor.,os . close ( fd ),os . close ( var0 )
call the method os.dup2 with 2 arguments: result of the method se.fileno and result of the method sys.stderr.fileno.,call method var0 with 2 arguments: result of method se.fileno and result of method var1 ,"os . dup2 ( se . fileno ( ) , sys . stderr . fileno ( ) )","var0 ( se . fileno ( ) , var1 ( ) )"
call the method os.dup2 with 2 arguments: result of the method si.fileno and result of the method sys.stdin.fileno.,call method var0 with 2 arguments: result of method var1 and result of method var2 ,"os . dup2 ( si . fileno ( ) , sys . stdin . fileno ( ) )","var0 ( si . fileno ( ) , var2 ( ) )"
call the method os.dup2 with 2 arguments: result of the method so.fileno and result of the method sys.stdout.fileno.,call method var0 with 2 arguments: result of method var1 and result of method var2 ,"os . dup2 ( so . fileno ( ) , sys . stdout . fileno ( ) )","var0 ( so . fileno ( ) , var2 ( ) )"
substitute value under the 'liveserver' key of the options dictionary for value under the 'DJANGO_LIVE_TEST_SERVER_ADDRESS' key of the os.environ dictionary.,substitute value under var0 key of options dict for value under var1 key of var4 dict.,os . environ [ 'DJANGO_LIVE_TEST_SERVER_ADDRESS' ] = options [ 'liveserver' ],var4 [ 'DJANGO_LIVE_TEST_SERVER_ADDRESS' ] = options [ var0 ]
substitute options.settings for value under the 'DJANGO_SETTINGS_MODULE' key of the os.environ dictionary.,substitute var0 for value under var1 key of var2 dict.,os . environ [ 'DJANGO_SETTINGS_MODULE' ] = options . settings,var2 [ var1 ] = var0
call the function os.kill with os.getpid() and negative exit_code as arguments.,call function var0 with os.getpid() and negative var2 as arguments.,"os . kill ( os . getpid ( ) , - exit_code )","var0 ( os . getpid ( ) , - var2 )"
"make basedir directory,","make var0 directory,",os . makedirs ( basedir ),os . makedirs ( var0 )
call the os.makedirs function with directory and self.directory_permissions_mode as arguments.,call var0 function with directory and self var2 as arguments.,"os . makedirs ( directory , self . directory_permissions_mode )","var0 ( directory , self . var2 )"
call the function os.makedirs with argument directory.,call function var0 with argument directory.,os . makedirs ( directory ),var0 ( directory )
create directories from the elements in filename.,create directories from elements in filename.,os . makedirs ( dirname ),os . makedirs ( dirname )
create directories from the elements in filename.,create directories from elements in filename.,os . makedirs ( filename ),os . makedirs ( filename )
make a directory named original_path.,make directory named var0 ,os . makedirs ( original_path ),os . makedirs ( var0 )
call os.makedirs function with self._dir and hexadecimal 0o700 as arguments.,call os.makedirs function with var0 and hexadecimal 0o700 as arguments.,"os . makedirs ( self . _dir , 0o700 )","os . makedirs ( var0 , 448 )"
create a directory self.default_locale_path.,create directory self var1 ,os . makedirs ( self . default_locale_path ),os . makedirs ( self . var1 )
call the os.makedirs with argument self.file_path.,call var0 with argument self var2 ,os . makedirs ( self . file_path ),var0 ( self . var2 )
make a directory top_dir.,make directory var0 ,os . makedirs ( top_dir ),os . makedirs ( var0 )
make a directory migrations_directory.,make directory var0 ,os . mkdir ( migrations_directory ),os . mkdir ( var0 )
"make target_dir directory,","make var0 directory,",os . mkdir ( target_dir ),os . mkdir ( var0 )
call the function os.remove with argument fname.,call function var0 with argument var1 ,os . remove ( fname ),var0 ( var1 )
call the os.remove function with argument name.,call var0 function with argument name.,os . remove ( name ),var0 ( name )
remove the old_file_name file.,remove var0 file.,os . remove ( old_file_name ),os . remove ( var0 )
"remove file path_to_remove,",remove file var0 ,os . remove ( path_to_remove ),os . remove ( var0 )
remove symlink_path file.,remove var0 file.,os . remove ( symlink_path ),os . remove ( var0 )
remove file tmp_path.,remove file var0 ,os . remove ( tmp_path ),os . remove ( var0 )
call the os.rename function with arguments old_file_name and new_file_name.,call var0 function with arguments var1 and var2 ,"os . rename ( old_file_name , new_file_name )","var0 ( var1 , var2 )"
remove original_path directory.,remove var0 directory.,os . rmdir ( original_path ),os . rmdir ( var0 )
remove tmpdir directory.,remove var0 directory.,os . rmdir ( tmpdir ),os . rmdir ( var0 )
call the method os.setsid.,call method var0 ,os . setsid ( ),var0 ( )
make a system symbolic link between original_path and symlink_path.,make system symbolic link between var0 and var1 ,"os . symlink ( original_path , symlink_path )","os . symlink ( var0 , var1 )"
call the os.umask function with argument old_umask.,call var0 function with argument var1 ,os . umask ( old_umask ),var0 ( var1 )
call the function os.umask with an argument umask.,call function var0 with argument var1 ,os . umask ( umask ),var0 ( var1 )
call the method os.umask with an argument umask.,call method var0 with argument var1 ,os . umask ( umask ),var0 ( var1 )
call the method os.unlink with an argument pot_path.,call method var0 with argument var1 ,os . unlink ( pot_path ),var0 ( var1 )
call the function os.unlink with an argument work_file.,call function var0 with argument var1 ,os . unlink ( work_file ),var0 ( var1 )
call the os.utime function with arguments dst and tuple containing 2 elements: st.st_atime and st.st_mtime.,call os.utime function with arguments var0 and tuple containing 2 elements: st var2 and st var4 ,"os . utime ( dst , ( st . st_atime , st . st_mtime ) )","os . utime ( var0 , ( st . var2 , st . var4 ) )"
"call the os.utime unction, with path and None as arguments.","call os.utime unction, with path and var0 as arguments.","os . utime ( path , None )","os . utime ( path , var0 )"
write current_chunk to file fd.,write var0 to file var1 ,"os . write ( fd , current_chunk )","os . write ( var1 , var0 )"
"call the method other.__cast, substitute the result for other.",call method var0 substitute result for other.,other = other . __cast ( ),other = var0 ( )
substitute first args for other_dict.,substitute first var0 for var1 ,other_dict = args [ 0 ],var1 = var0 [ 0 ]
"call the method cmatch.group with an argument integer 1, format with the result string ' _(%s) ', write it to out.","call method var0 with argument integer 1, format with result string var1, write it to out.",out . write ( ' _(%s) ' % cmatch . group ( 1 ) ),out . write ( var1 % var0 ( 1 ) )
"format string ' _(%s) ', with fmatch, write it to out.","format string var0, with var1 write it to out.",out . write ( ' _(%s) ' % cmatch ),out . write ( var0 % cmatch )
"format string ' _(%s) ', with fmatch, write it to out.","format string var0, with var1 write it to out.",out . write ( ' _(%s) ' % fmatch ),out . write ( var0 % var1 )
"substitute '%s' in string ' # %s' with line, write it to out file.","substitute var0 in string var1 with line, write it to out file.",out . write ( ' # %s' % line ),out . write ( var1 % line )
write string ' #\n' to out file.,write string var0 to out file.,out . write ( ' #\n' ),out . write ( ' #\n' )
"split p into two parts at the first ':', use the second element of the result to format string ' _(%s) ', write it to out.","split p into two parts at first var0, use second element of result to format string var1, write it to out.","out . write ( ' %s ' % p . split ( ':' , 1 ) [ 1 ] )","out . write ( ' %s ' % p . split ( var0 , 1 ) [ 1 ] )"
"format string ' gettext(%r) ' with g, write it to out.","format string var0 with g, write it to out.",out . write ( ' gettext(%r) ' % g ),out . write ( var0 % g )
"substitute '%r' in string ' gettext(%r) ' with  result of the function join_tokens, called with 2 arguments: singular,","substitute var1 in string var2 with result of function var4 called with 2 arguments: singular,","out . write ( ' gettext(%r) ' % join_tokens ( singular , trimmed ) )","out . write ( var2 % var4 ( singular , var0trimmed ) )"
"substitute '%r' in string ' ngettext(%r, %r, count) ' with result of the function join_tokens, called with 2 arguments: singular,","substitute var0 in string var1 with result of function var3 called with 2 arguments: singular,","out . write ( ' ngettext(%r, %r, count) ' % ( join_tokens ( singular , trimmed ) , join_tokens ( plural , trimmed ) ) )","out . write ( var1 % ( var3 ( singular , trimmed ) , var3 ( plural , trimmed ) ) )"
"substitute '%r' in string ' npgettext(%r, %r, %r,count) ' with message_context, result of the function join_tokens,",substitute var0 in string var1 with var3 result of function var5 ,"out . write ( ' npgettext(%r, %r, %r,count) ' % ( message_context , join_tokens ( singular , trimmed ) , join_tokens ( plural , trimmed ) ) )","out . write ( var1 % ( var3 , var5 ( singular , trimmed ) , var5 ( plural , trimmed ) ) )"
"substitute '%r' in string ' pgettext(%r, %r) ' with message_context and result of the function join_tokens,",substitute var0 in string var1 with var3 and result of function var5 ,"out . write ( ' pgettext(%r, %r) ' % ( message_context , join_tokens ( singular , trimmed ) ) )","out . write ( var1 % ( var3 , var5 ( singular , trimmed ) ) )"
"format string ' pgettext(%r, %r) ' with message_context and g, write it to out.","format string var0 with var1 and g, write it to out.","out . write ( ' pgettext(%r, %r) ' % ( message_context , g ) )","out . write ( var0 % ( var1 , g ) )"
"join lineno_comment_map dictionary value under the comment_lineno_cache key into a string, separated with ' | ',","join var0 dict value under var2 key into string, separated with var4,",out . write ( '# %s' % ' | ' . join ( lineno_comment_map [ comment_lineno_cache ] ) ),out . write ( '# %s' % var4 . join ( var0 [ var2 ] ) )
"call the function blankout with 2 arguments: p and 'F', write the result to out.","call function var0 with 2 arguments: p and var1, write result to out.","out . write ( blankout ( p , 'F' ) )","out . write ( var0 ( p , var1 ) )"
"call the method blankout with 2 arguments: part and 'P', write the result to out.","call method var0 with 2 arguments: part and var1, write result to out.","out . write ( blankout ( part , 'P' ) )","out . write ( var0 ( part , var1 ) )"
"call the method blankout with 2 arguments: part and 'S', write the result to out.","call method var0 with 2 arguments: part and var1, write result to out.","out . write ( blankout ( part , 'S' ) )","out . write ( var0 ( part , var1 ) )"
"call the function blankout with 2 arguments: t.contents and 'B', write the result to out.","call function var0 with 2 arguments: var1 and var2, write result to out.","out . write ( blankout ( t . contents , 'B' ) )","out . write ( var0 ( var1 , var2 ) )"
"call the function blankout with 2 arguments: t.contents and 'X', write the result to out.","call function var0 with 2 arguments: var1 and var2, write result to out.","out . write ( blankout ( t . contents , 'X' ) )","out . write ( var0 ( var1 , var2 ) )"
"replace '%s' in string '</%s>' with tag, append the result to out.","replace var0 in string var1 with tag, append result to out.",out += '</%s>' % tag,out += var1 % tag
append truncate_text to out.,append var0 to out.,out += truncate_text,out += var0
"for x in a list containing 3 elements: self.id, self.first and self.second, if x is not None,",for x in list containing 3 elements: var0 var1 and var2 if x is not var3 ,"out = [ str ( x ) for x in [ self . id , self . first , self . second ] if x is not None ]","out = [ str ( x ) for x in [ var0 , var1 , var2 ] if x is not var3 ]"
"join result of the parts function into a bytes string, substitute it for out.","join result of parts function into bytes string, substitute it for out.",out = b'' . join ( parts ( ) ),out = b'' . join ( parts ( ) )
"call the method self.compress with an argument clean_data, substitute the result for out.",call method var0 with argument var1 substitute result for out.,out = self . compress ( clean_data ),out = var0 ( var1 )
"out is an instance of StringIO class, created with an empty string as an argument.","out is instance of var0 class, created with empty string as argument.",out = StringIO ( '' ),out = var0 ( '' )
"create a list out of fist end_text_pos text elemnts, substitue it for out.",create list out of fist var0 text var1 var2 it for out.,out = text [ : end_text_pos ],out = text [ : var0 ]
assign value and params to the value under the name key of the outdict dictionary.,assign value and var0 to value under name key of var1 dict.,"outdict [ name ] = value , params","var1 [ name ] = value , var0"
outdict is an empty dictionary.,var0 is empty dict.,outdict = { },var0 = { }
"call the method password.translate with an argument hmac.trans_5C, update outer dictionary with the result.",call method var0 with argument hmac var2 update outer dict with result.,outer . update ( password . translate ( hmac . trans_5C ) ),outer . update ( password . translate ( hmac . var2 ) )
outer_html is a string '<ul{id_attr}>{content}</ul>'.,outer_html is a string '<ul{id_attr}>{content}</ul>'.,outer_html = '<ul{id_attr}>{content}</ul>',outer_html = '<ul{id_attr}>{content}</ul>'
write data bytes to outfile.,write data bytes to var0 ,outfile . write ( data ),var0 . write ( data )
"return value of the npath function with string '.mo' appended to the base_path as argument,   and return value of the npath function with string '.po' appended to the base_path as argument, substitute it for args.   call the popen_wrapper with args as the argument, assign the result to the output, errors and status, respectively.","return value of var0 function with string var2 appended to var3 as argument var7 and return value of var0 function with string var9 appended to var3 as argument, substitute it for var10 var7 call var12 with var10 as argument, assign result to output, errors and status, respectively.","output , errors , status = popen_wrapper ( args )","output , errors , status = var12 ( var10 )"
"called with string as an argument 'Error executing %s: %s', where '%s' is replaced by: first element of args and strerror, respective,   and third element of the result of the function sys.exc_info.   call the method p.communicate, assign the result to output and errors, respectively.","called with string as argument var0 var1 var2 is replaced by: first element of var3 and var4 respective var5 and third element of result of function sys var8 call method var9 assign result to output and errors, respectively.","output , errors = p . communicate ( )","output , errors = var9 ( )"
output and hidden_fields are both empty lists.,output and var0 are both empty lists.,"output , hidden_fields = [ ] , [ ]","output , var0 = [ ] , [ ]"
"app_config, connection.alias and include_auto_created set to boolean True.   call the method connection.creation.sql_create_model with arguments model, style and known_models, substitute the result for output and references.","var0 var1 and var2 set to boolean var4 call method connection.creation var7 with arguments model, style and var8 substitute result for output and references.","output , references = connection . creation . sql_create_model ( model , style , known_models )","output , references = connection . creation . var7 ( model , style , var8 )"
"convert field into a string and concatenate it to a string '* ', append the result to output.","convert field into string and concatenate it to string var0, append result to output.",output . append ( '* %s' % field ),output . append ( '* %s' % field )
"for every e in errors convert e into a string and append it to a string '  * ',","for every e in errors convert e into string and append it to string var0,",output . append ( '\n' . join ( '  * %s' % e for e in errors ) ),output . append ( '\n' . join ( '  * %s' % e for e in errors ) )
append 2 consecutive newlines to output.,append 2 consecutive var0 to output.,output . append ( '\n\n' ),output . append ( '\n\n' )
"substitute every '%s' in string '%s<li>%s%s</li>' with indent, with result of the function escaper called with an argument:","substitute every var0 in string var1 with indent, with result of function var3 called with argument:","output . append ( '%s<li>%s%s</li>' % ( indent , escaper ( force_text ( title ) ) , sublist ) )","output . append ( var1 % ( indent , var3 ( force_text ( title ) ) , sublist ) )"
append string '</optgroup>' to output.,append string var0 to output.,output . append ( '</optgroup>' ),output . append ( var0 )
append string '</select>' to output.,append string var0 to output.,output . append ( '</select>' ),output . append ( var0 )
"replace '%s' in string ""### %s = %s"" with key and value under the key key of the user_setting dictionary, append it to the output.","replace var0 in string var1 with key and value under key key of var6 dict, append it to output.","output . append ( '### %s = %s' % ( key , user_settings [ key ] ) )","output . append ( '### %s var5 %s' % ( key , var6s [ key ] ) )"
"replace '%s' in string ""%s = %s  ###"" with key and value under the key key of the user_setting dictionary, append it to the output.","replace var1 in string var2 with key and value under key key of var6 dict, append it to output.","output . append ( '%s = %s  ###' % ( key , user_settings [ key ] ) )","output . append ( '%s = %s  ###' % ( key , var0var6s [ key ] ) )"
"replace '%s' in string ""%s = %s"" with key and value under the key key of the user_setting dictionary, append it to the output.","replace var0 in string var1 with key and value under key key of var3 dict, append it to output.","output . append ( '%s = %s' % ( key , user_settings [ key ] ) )","output . append ( '%s var2 %s' % ( key , var3s [ key ] ) )"
append app_output to output.,append var0 to output.,output . append ( app_output ),output . append ( var0 )
"call the function force_text with an argument bf_errors, format the error_row string with the result, append it to the output.","call function var0 with argument var1 format var3 string with result, append it to output.",output . append ( error_row % force_text ( bf_errors ) ),output . append ( var3 % var0 ( var1 ) )
"call the function format_html with 2 arguments: string '<optgroup label=""{0}"">' and return value of the function force_text,","call function var0 with 2 arguments: string '<optgroup label=""{0}"">' and return value of function var3 ","output . append ( format_html ( '<optgroup label='{0}'>' , force_text ( option_value ) ) )","output.append(format_html('<optgroup label='{0}'>', var3(option_value)))"
"choice and i, substitute the result for w.   call the function format_html with 3 arguments: self.inner_html, choice_value set to result of the function force_text,","choice and i, substitute result for var0 call function var2 with 3 arguments: self var4 var5 set to result of function var7 ","output . append ( format_html ( self . inner_html , choice_value = force_text ( w ) , sub_widgets = '' ) )","output . append ( var2 ( self . var4 , var5 = var7 ( w ) , sub_widgets = '' ) )"
"call the function format_html with 3 arguments: self.inner_html, choice_value set to choice_value,",call function var0 with 3 arguments: self var2 var3 set to var3 ,"output . append ( format_html ( self . inner_html , choice_value = choice_value , sub_widgets = sub_ul_renderer . render ( ) ) )","output . append ( var0 ( self . var2 , var3 = var3 , sub_widgets = sub_ul_renderer . render ( ) ) )"
"get the value under the field key of the html dictionary, append it to output.","get value under field key of html dict, append it to output.",output . append ( html [ field ] ),output . append ( html [ field ] )
append label_output to output.,append var0 to output.,output . append ( label_output ),output . append ( var0 )
"empty string for 'field', empty string for 'help_text' and html_class_attr for html_class_attr.   append last_row to output.","empty string for var0, empty string for var1 and var4 for var4 append var9 to output.",output . append ( last_row ),output . append ( var9 )
"format string normal_row with an dictionary containing 6 entries: return value of the function force_text with an argument bf_errors,",format string var0 with dict containing 6 entries: return value of function var1 with argument var3 ,"output . append ( normal_row % { 'errors' : force_text ( bf_errors ) , 'label' : force_text ( label ) , 'field' : six . text_type ( bf ) , 'help_text' : help_text , 'html_class_attr' : html_class_attr , 'field_name' : bf . html_name , } )","output . append ( var0 % { 'errors' : var1 ( var3 ) , 'label' : var1 ( label ) , 'field' : six . text_type ( bf ) , 'help_text' : help_text , 'html_class_attr' : html_class_attr , 'field_name' : bf . html_name } )"
append options to output.,append options to output.,output . append ( options ),output . append ( options )
"call the function pformat with an argument sys.modules, append the result for output.",call function var0 with argument var1 append result for output.,output . append ( pformat ( sys . modules ) ),output . append ( var0 ( var1 ) )
"call the method self.render_option with 2 arguments: selected_choices and unpacked list option, append the result to output.","call method self var1 with 2 arguments: var2 and unpacked list option, append result to output.","output . append ( self . render_option ( selected_choices , * option ) )","output . append ( self . var1 ( var2 , * option ) )"
"call the method self.render_option with 3 arguments: selected_choices, option_value and option_label, append the result to output.",call method self var1 with 3 arguments: var2 var4 and var6 append result to output.,"output . append ( self . render_option ( selected_choices , option_value , option_label ) )","output . append ( self . var1 ( var2 , var4 , var6 ) )"
append str_hidden to output.,append var0 to output.,output . append ( str_hidden ),output . append ( var0 )
"substitute the result for final_attrs.   call the method widget.render with 3 arguments: string created by concatenation from: name, string '_' and i, widget_value,","substitute result for var0 call method var3 with 3 arguments: string created by concatenation from: name, string var4 and i var5 ","output . append ( widget . render ( name + '_%s' % i , widget_value , final_attrs ) )","output . append ( widget . render ( name + '_%s' % i , var5 , var0 ) )"
"for every v in list_ append to a list result of the function encode, called with arguments: k and result of the function force_bytes,","for every v in var0 append to list result of function encode, called with arguments: k and result of function var1 ","output . extend ( [ encode ( k , force_bytes ( v , self . encoding ) ) for v in list_ ] )","output . extend ( [ encode ( k , var1 ( v , self . encoding ) ) for v in var0 ] )"
"and include_auto_created set to boolean True,   call the method connection.creation.sql_destroy_indexes_for_model with arguments model and style, extend the output with the result.","and var0 set to boolean var2 call method connection.creation var5 with arguments model and style, extend output with result.","output . extend ( connection . creation . sql_destroy_indexes_for_model ( model , style ) )","output . extend ( connection . creation . var5 ( model , style ) )"
"call the method connection.creation.sql_destroy_model with arguments: model, references_to_delete and style, extend with the result the list output.","call method connection.creation var1 with arguments: model var2 and style, extend with result list output.","output . extend ( connection . creation . sql_destroy_model ( model , references_to_delete , style ) )","output . extend ( connection . creation . var1 ( model , var2 , style ) )"
"and include_auto_created set to boolean True,   call the method connection.creation.sql_indexes_for_model with arguments model and style, extend output with the result.","and var0 set to boolean var2 call method connection.creation var5 with arguments model and style, extend output with result.","output . extend ( connection . creation . sql_indexes_for_model ( model , style ) )","output . extend ( connection . creation . var5 ( model , style ) )"
"call the method connection.ops.prepare_sql_script with 2 arguments: return value of the function fp.read,",call method connection.ops var1 with 2 arguments: return value of function var2 ,"output . extend ( connection . ops . prepare_sql_script ( fp . read ( ) , _allow_fallback = True ) )","output . extend ( connection . ops . var1 ( fp . read ( ) , _allow_fallback = True ) )"
"call the function custom_sql_for_model with 3 arguments: model, style and connection, extend the output with the result.","call function var0 with 3 arguments: model, style and connection, extend output with result.","output . extend ( custom_sql_for_model ( model , style , connection ) )","output . extend ( var0 ( model , style , connection ) )"
"call the method f.post_create_sql with arguments: style and model._meta.db_table, extend the output with the result.",call method f var0 with arguments: style and model._meta var2 extend output with result.,"output . extend ( f . post_create_sql ( style , model . _meta . db_table ) )","output . extend ( f . var0 ( style , model . _meta . var2 ) )"
"call the function force_text with an argument top_errors, format error_row with it, insert it at the beginning of output.","call function var0 with argument var1 format var3 with it, insert it at beginning of output.","output . insert ( 0 , error_row % force_text ( top_errors ) )","output . insert ( 0 , var3 % var0 ( var1 ) )"
"create list out of last_row elements from the start to the last length of row_ender element, append str_hidden and row_ender to it,","create list out of var0 elements from start to last length of var1 element, append var5 and var1 to it,",output [ - 1 ] = last_row [ : - len ( row_ender ) ] + str_hidden + row_ender,output [ - 1 ] = var0 [ : - len ( var1 ) ] + var5 + var1
output is an empty string.,output is empty string.,output = '',output = ''
output is an empty list.,output is empty list.,output = [ ],output = [ ]
output is an empty string.,output is empty string.,output = [ ],output = [ ]
outut is an empty list.,var0 is empty list.,output = [ ],output = [ ]
substitute the result for the value under the 'day' key of the html dictionary.   output is an empty list.,substitute result for value under var0 key of html dict var1 output is empty list.,output = [ ],output = [ ]
substitute the resulting set for selected_choices.   output is an empty list.,substitute resulting set for var0 output is empty list.,output = [ ],output = [ ]
output is a list containing an entry: result of the function format_html called with 2 arguments:,output is list containing entry: result of function var0 called with 2 arguments:,"output = [ format_html ( '<select multiple='multiple'{0}>' , flatatt ( final_attrs ) ) ]","output = [format_html('<select multiple='multiple'{0}>', flatatt(final_attrs))]"
"output is a list containing an element: result of the function format_html called with 2 arguments: string '<select{0}>',","output is list containing element: result of function var0 called with 2 arguments: string '<select{0}>',","output = [ format_html ( '<select{0}>' , flatatt ( final_attrs ) ) ]","output = [ var0 ( '<select{0}>' , flatatt ( final_attrs ) ) ]"
"output is an list with initial elements generated with call to the function pformat with an argument val, for every val in context.",output is list with initial elements generated with call to function var0 with argument var1 for every var1 in context.,output = [ pformat ( val ) for val in context ],output = [ var0 ( var1 ) for var1 in context ]
"call the function force_text with an argument output, substitute the result for output.","call function var0 with argument output, substitute result for output.",output = force_text ( output ),output = var0 ( output )
"read file fp, substitute the read data for output.",read file var0 substitute read data for output.,output = fp . read ( ),output = var0 . read ( )
"call the function localize with 2 arguments: output and use_l10n set to context.use_l10n, substitute the result for output.",call function localize with 2 arguments: output and var0 set to context var0 substitute result for output.,"output = localize ( output , use_l10n = context . use_l10n )","output = localize ( output , var0 = context . var0 )"
"get the next element of the self._producer iterable, substitute it for output.",get next element of var0 var1 substitute it for output.,output = next ( self . _producer ),output = next ( var0 )
"get the value under the 'output' key of the options dictionary, substitute the result for output.","get value under var0 key of options dict, substitute result for output.",output = options . get ( 'output' ),output = options . get ( var0 )
substitute self._leftover for output.,substitute var0 for output.,output = self . _leftover,output = var0
"call the method self.filter_expression.resolve with an argument context, substitute the result for output.","call method self var1 resolve with argument context, substitute result for output.",output = self . filter_expression . resolve ( context ),output = self . var1 . resolve ( context )
"call the method self.handle with 2 arguments unpacked list args and unpacked dictionary options, substitute the result for output.","call method var0 with 2 arguments unpacked list var1 and unpacked dict options, substitute result for output.","output = self . handle ( * args , ** options )","output = var0 ( * var1 , ** options )"
"call the method self.nodelist.render with an argument context, substitute the result for output.","call method var0 with argument context, substitute result for output.",output = self . nodelist . render ( context ),output = var0 ( context )
"call the method self.nodelist.render with an argument context, substitute the result output.","call method var0 with argument context, substitute result output.",output = self . nodelist . render ( context ),output = var0 ( context )
"call the function template_localtime with 2 arguments: output and use_tz set to context.use_tz, substitute the result for output.",call function var0 with 2 arguments: output and var1 set to context var1 substitute result for output.,"output = template_localtime ( output , use_tz = context . use_tz )","output = var0 ( output , var1 = context . var1 )"
output_transaction is boolean False.,var0 is boolean var1 ,output_transaction = False,var0 = var1
output_transaction is boolean True.,var0 is boolean var1 ,output_transaction = True,var0 = var1
substitute True for output_transaction.,substitute var0 for var1 ,output_transaction = True,var1 = var0
"calculate length of chunk modulo integer 4, substitute the result for over_bytes.","calculate length of chunk var0 integer 4, substitute result for var1 ",over_bytes = len ( chunk ) % 4,var1 = len ( chunk ) % 4
"call the method field_stream.read with an argument: over_bytes subtracted from integer 4, substitute the result for over_chunk.","call method var0 read with argument: var1 subtracted from integer 4, substitute result for var3 ",over_chunk = field_stream . read ( 4 - over_bytes ),var3 = var0 . read ( 4 - var1 )
"call the OVERLAPPED function, substitute the result for overlapped.","call var0 function, substitute result for overlapped.",overlapped = OVERLAPPED ( ),overlapped = var0 ( )
set the variable P to a string value '\033[35m',set the variable P to a string value '\033[35m',P = '\033[35m',P = '\033[35m'
assign the variable P the string '\033[35m',assign the variable P the string '\033[35m',P = '\033[35m',P = '\033[35m'
assign the variable P the string value '\033[35m',assign the variable P the string value '\033[35m',P = '\033[35m',P = '\033[35m'
where '%s' is replaced with subject.   substitute i for p.,var0 var1 is replaced with subject var2 substitute i for var3,p = i,p = i
substitute i for p.,substitute i for var0,p = i,p = i
"convert arg to an integer, substitute it for p.","convert var0 to integer, substitute it for var1",p = int ( arg ),p = int ( var0 )
"find position of '-' in the index of the language, substitute the result for p.","find position of var0 in index of language, substitute result for var1",p = language . find ( '-' ),p = language . find ( var0 )
"find first index of occurrence of character '-' in language, substitute it for p.","find first index of occurrence of character var0 in language, substitute it for var1",p = language . find ( '-' ),p = language . find ( var0 )
"find first index of occurrence of character '-' in locale, substitute it for p.","find first index of occurrence of character var0 in locale, substitute it for var1",p = locale . find ( '_' ),p = locale . find ( '_' )
"p is image parser object, set by calling the PillowImageFile.Parser method.","p is image parser object, set by calling var0 var1 method.",p = PillowImageFile . Parser ( ),p = var0 . var1 ( )
"p is a instance of Popen class, created with 6 arguments: args, shell set to boolean False, stdout set to PIPE,","p is instance of var0 class, created with 6 arguments: var1 shell set to boolean var2 var3 set to var4 ","p = Popen ( args , shell = False , stdout = PIPE , stderr = PIPE , close_fds = os . name != 'nt' , universal_newlines = True )","p = var0 ( var1 , shell = var2 , var3 = var4 , stderr = var4 , close_fds = os . name != 'nt' , universal_newlines = True )"
remove the first element from p_pattern.,remove first element from var0 ,p_pattern = p_pattern [ 1 : ],var0 = var0 [ 1 : ]
substitute pattern.regex.pattern for p_pattern.,substitute var0 for var1 ,p_pattern = pattern . regex . pattern,var1 = var0
substitute result of the function urlparse with an argument ur1 for p1 and result of the function urlparse with an argument ur2 for p2.,substitute result of function var0 with argument var2 for var3 and result of function var0 with argument var4 for var5 ,"p1 , p2 = urlparse ( url1 ) , urlparse ( url2 )","var3 , var5 = var0 ( url1 ) , var0 ( url2 )"
"call the function import_module with an argument path, substitute it for package.","call function var0 with argument path, substitute it for package.",package = import_module ( path ),package = var0 ( path )
substitute package.__name__ for package_name.,substitute var0 for var1 ,package_name = package . __name__,var1 = var0
substitute package.__path__ for package_path.,substitute var0 for var1 ,package_path = package . __path__,var1 = var0
set the variable padding equal to 4 minus the length of temp modulus 4,set variable padding equal to 4 minus length of temp modulus 4,padding = 4 - ( len ( temp ) % 4 ),padding = 4 - len ( temp ) % 4
set the variable padding equal to 4 minus the length of shellcode_original,set variable padding equal to 4 minus length of var0,padding = 4 - len ( shellcode_original ),padding = 4 - len ( var0 )
set the variable padding equal to 4 minus the length of shellcode_original modulus 4,set variable padding equal to 4 minus length of var0 modulus 4,padding = 4 - len ( shellcode_original ) % 4,padding = 4 - len ( var0 ) % 4
set the variable padding equal to the length of shellcode_original modulus 4,set variable padding equal to length of var0 modulus 4,padding = len ( shellcode_original ) % 4,padding = len ( var0 ) % 4
page_range is a property object with _get_page_range as a getter method.,var0 is property object with var1 as var2 method.,page_range = property ( _get_page_range ),var0 = property ( var1 )
"get the value under the part key of the PALETTES dictionary, update with it palette dictionary.","get value under part key of var0 dict, update with it palette dict.",palette . update ( PALETTES [ part ] ),palette . update ( var0 [ part ] )
substitute definition for value under the role key of palette dictionary.,substitute definition for value under role key of palette dict.,palette [ role ] = definition,palette [ role ] = definition
"get value under the config_string key of the PALETTES dictionary, call the copy method on the result and substitute it for palette.","get value under var0 key of var2 dict, call copy method on result and substitute it for palette.",palette = PALETTES [ NOCOLOR_PALETTE ] . copy ( ),palette = var2 [ NOCOLOR_PALETTE ] . copy ( )
"PALETTES is a dictionary containing 3 elements, a dictionary with 18 pairs of dictionary value and string keys for NOCOLOR_PALETTE,","PALETTES is dict containing 3 elements, dict with 18 pairs of dict value and string keys for var0 ","PALETTES = { NOCOLOR_PALETTE : { 'ERROR' : { } , 'WARNING' : { } , 'NOTICE' : { } , 'SQL_FIELD' : { } , 'SQL_COLTYPE' : { } , 'SQL_KEYWORD' : { } , 'SQL_TABLE' : { } , 'HTTP_INFO' : { } , 'HTTP_SUCCESS' : { } , 'HTTP_REDIRECT' : { } , 'HTTP_NOT_MODIFIED' : { } , 'HTTP_BAD_REQUEST' : { } , 'HTTP_NOT_FOUND' : { } , 'HTTP_SERVER_ERROR' : { } , 'MIGRATE_HEADING' : { } , 'MIGRATE_LABEL' : { } , 'MIGRATE_SUCCESS' : { } , 'MIGRATE_FAILURE' : { } , } , DARK_PALETTE : { 'ERROR' : { 'fg' : 'red' , 'opts' : ( 'bold' , ) } , 'WARNING' : { 'fg' : 'yellow' , 'opts' : ( 'bold' , ) } , 'NOTICE' : { 'fg' : 'red' } , 'SQL_FIELD' : { 'fg' : 'green' , 'opts' : ( 'bold' , ) } , 'SQL_COLTYPE' : { 'fg' : 'green' } , 'SQL_KEYWORD' : { 'fg' : 'yellow' } , 'SQL_TABLE' : { 'opts' : ( 'bold' , ) } , 'HTTP_INFO' : { 'opts' : ( 'bold' , ) } , 'HTTP_SUCCESS' : { } , 'HTTP_REDIRECT' : { 'fg' : 'green' } , 'HTTP_NOT_MODIFIED' : { 'fg' : 'cyan' } , 'HTTP_BAD_REQUEST' : { 'fg' : 'red' , 'opts' : ( 'bold' , ) } , 'HTTP_NOT_FOUND' : { 'fg' : 'yellow' } , 'HTTP_SERVER_ERROR' : { 'fg' : 'magenta' , 'opts' : ( 'bold' , ) } , 'MIGRATE_HEADING' : { 'fg' : 'cyan' , 'opts' : ( 'bold' , ) } , 'MIGRATE_LABEL' : { 'opts' : ( 'bold' , ) } , 'MIGRATE_SUCCESS' : { 'fg' : 'green' , 'opts' : ( 'bold' , ) } , 'MIGRATE_FAILURE' : { 'fg' : 'red' , 'opts' : ( 'bold' , ) } , } , LIGHT_PALETTE : { 'ERROR' : { 'fg' : 'red' , 'opts' : ( 'bold' , ) } , 'WARNING' : { 'fg' : 'yellow' , 'opts' : ( 'bold' , ) } , 'NOTICE' : { 'fg' : 'red' } , 'SQL_FIELD' : { 'fg' : 'green' , 'opts' : ( 'bold' , ) } , 'SQL_COLTYPE' : { 'fg' : 'green' } , 'SQL_KEYWORD' : { 'fg' : 'blue' } , 'SQL_TABLE' : { 'opts' : ( 'bold' , ) } , 'HTTP_INFO' : { 'opts' : ( 'bold' , ) } , 'HTTP_SUCCESS' : { } , 'HTTP_REDIRECT' : { 'fg' : 'green' , 'opts' : ( 'bold' , ) } , 'HTTP_NOT_MODIFIED' : { 'fg' : 'green' } , 'HTTP_BAD_REQUEST' : { 'fg' : 'red' , 'opts' : ( 'bold' , ) } , 'HTTP_NOT_FOUND' : { 'fg' : 'red' } , 'HTTP_SERVER_ERROR' : { 'fg' : 'magenta' , 'opts' : ( 'bold' , ) } , 'MIGRATE_HEADING' : { 'fg' : 'cyan' , 'opts' : ( 'bold' , ) } , 'MIGRATE_LABEL' : { 'opts' : ( 'bold' , ) } , 'MIGRATE_SUCCESS' : { 'fg' : 'green' , 'opts' : ( 'bold' , ) } , 'MIGRATE_FAILURE' : { 'fg' : 'red' , 'opts' : ( 'bold' , ) } , } }","PALETTES = { var0 : { 'ERROR' : { } , 'WARNING' : { } , 'NOTICE' : { } , 'SQL_FIELD' : { } , 'SQL_COLTYPE' : { } , 'SQL_KEYWORD' : { } , 'SQL_TABLE' : { } , 'HTTP_INFO' : { } , 'HTTP_SUCCESS' : { } , 'HTTP_REDIRECT' : { } , 'HTTP_NOT_MODIFIED' : { } , 'HTTP_BAD_REQUEST' : { } , 'HTTP_NOT_FOUND' : { } , 'HTTP_SERVER_ERROR' : { } , 'MIGRATE_HEADING' : { } , 'MIGRATE_LABEL' : { } , 'MIGRATE_SUCCESS' : { } , 'MIGRATE_FAILURE' : { } } , DARK_PALETTE : { 'ERROR' : { 'fg' : 'red' , 'opts' : ( 'bold' , ) } , 'WARNING' : { 'fg' : 'yellow' , 'opts' : ( 'bold' , ) } , 'NOTICE' : { 'fg' : 'red' } , 'SQL_FIELD' : { 'fg' : 'green' , 'opts' : ( 'bold' , ) } , 'SQL_COLTYPE' : { 'fg' : 'green' } , 'SQL_KEYWORD' : { 'fg' : 'yellow' } , 'SQL_TABLE' : { 'opts' : ( 'bold' , ) } , 'HTTP_INFO' : { 'opts' : ( 'bold' , ) } , 'HTTP_SUCCESS' : { } , 'HTTP_REDIRECT' : { 'fg' : 'green' } , 'HTTP_NOT_MODIFIED' : { 'fg' : 'cyan' } , 'HTTP_BAD_REQUEST' : { 'fg' : 'red' , 'opts' : ( 'bold' , ) } , 'HTTP_NOT_FOUND' : { 'fg' : 'yellow' } , 'HTTP_SERVER_ERROR' : { 'fg' : 'magenta' , 'opts' : ( 'bold' , ) } , 'MIGRATE_HEADING' : { 'fg' : 'cyan' , 'opts' : ( 'bold' , ) } , 'MIGRATE_LABEL' : { 'opts' : ( 'bold' , ) } , 'MIGRATE_SUCCESS' : { 'fg' : 'green' , 'opts' : ( 'bold' , ) } , 'MIGRATE_FAILURE' : { 'fg' : 'red' , 'opts' : ( 'bold' , ) } } , LIGHT_PALETTE : { 'ERROR' : { 'fg' : 'red' , 'opts' : ( 'bold' , ) } , 'WARNING' : { 'fg' : 'yellow' , 'opts' : ( 'bold' , ) } , 'NOTICE' : { 'fg' : 'red' } , 'SQL_FIELD' : { 'fg' : 'green' , 'opts' : ( 'bold' , ) } , 'SQL_COLTYPE' : { 'fg' : 'green' } , 'SQL_KEYWORD' : { 'fg' : 'blue' } , 'SQL_TABLE' : { 'opts' : ( 'bold' , ) } , 'HTTP_INFO' : { 'opts' : ( 'bold' , ) } , 'HTTP_SUCCESS' : { } , 'HTTP_REDIRECT' : { 'fg' : 'green' , 'opts' : ( 'bold' , ) } , 'HTTP_NOT_MODIFIED' : { 'fg' : 'green' } , 'HTTP_BAD_REQUEST' : { 'fg' : 'red' , 'opts' : ( 'bold' , ) } , 'HTTP_NOT_FOUND' : { 'fg' : 'red' } , 'HTTP_SERVER_ERROR' : { 'fg' : 'magenta' , 'opts' : ( 'bold' , ) } , 'MIGRATE_HEADING' : { 'fg' : 'cyan' , 'opts' : ( 'bold' , ) } , 'MIGRATE_LABEL' : { 'opts' : ( 'bold' , ) } , 'MIGRATE_SUCCESS' : { 'fg' : 'green' , 'opts' : ( 'bold' , ) } , 'MIGRATE_FAILURE' : { 'fg' : 'red' , 'opts' : ( 'bold' , ) } } }"
"call the method six.iteritems with an argument kwarg, convert the result into a list,","call method var0 with argument var1 convert result into list,","param , value = list ( six . iteritems ( kwarg ) ) [ 0 ]","param , value = list ( six . iteritems ( var1 ) ) [ 0 ]"
"join elements of name into a string, substitute it for param.","join elements of name into string, substitute it for var0 ",param = '' . join ( name ),var0 = '' . join ( name )
substitute second element of elt for param.,substitute second element of var0 for var1 ,param = elt [ 1 ],var1 = var0 [ 1 ]
param is None.,var0 is var1 ,param = None,var0 = var1
"call the function getargspec with an argument func, substitute the result for params, varargs, varkw and defaults, respectively.","call function var1 with argument var0 substitute result for var2 var3 var4 and defaults, respectively.","params , varargs , varkw , defaults = getargspec ( func )","var2 , var3 , var4 , defaults = var1 ( var0 )"
"call the function getargspec with an argument func, substitute the result for params, varargs, varkw and defaults.",call function var1 with argument var0 substitute result for var2 var3 var4 and defaults.,"params , varargs , varkw , defaults = getargspec ( func )","var2 , var3 , var4 , defaults = var1 ( var0 )"
call the function params.update with argument kwargs.,call function var0 with argument var1 ,params . update ( kwargs ),var0 ( var1 )
"params is an empty list,","var0 is empty list,",params = [ ],var0 = [ ]
params is a list with second element of source as a element.,var0 is list with second element of source as element.,params = [ source [ 1 ] ],var0 = [ source [ 1 ] ]
"may be ambiguous or it may not exist.', substitute the result for message.   params is an dictionary containing 2 initial entries: value for 'datetime' and current_timezone for 'current_timezone'.",may be ambiguous or it may not exist.var0datetimevar2current_timezone'.,"params = { 'datetime' : value , 'current_timezone' : current_timezone }","params = { 'var1' : value , 'var3' : var3 }"
params is a dictionary with 2 initial entries: self.limit_value for 'limit_value' and cleaned for 'show_value'.,var0 is dict with 2 initial entries: var1 for var2 and cleaned for var3.,"params = { 'limit_value' : self . limit_value , 'show_value' : cleaned }","var0 = { var2 : var1 , 'show_value' : cleaned }"
params is a dictionary with 2 initial entries: self.max_length for 'max' and length of file_name for 'length'.,var0 is dict with 2 initial entries: self var1 for var2 and length of var3 for var4.,"params = { 'max' : self . max_length , 'length' : len ( file_name ) }","var0 = { var2 : self . var1 , 'length' : len ( var3 ) }"
"call the function conf.copy, substitute it for params.",call function var0 substitute it for var1 ,params = conf . copy ( ),var1 = var0 ( )
substitute kwargs for params.,substitute var0 for var1 ,params = kwargs,var1 = var0
substitute params without the first element for params.,substitute var0 var2 first element for var0 ,params = params [ 1 : ],var0 = var0 [ 1 : ]
"call the function escape with an argument p, replace every occurrence of '\n' in the result for '<br />',","call function escape with argument p, replace every occurrence of var0 in result for var1,","paras = [ '<p>%s</p>' % escape ( p ) . replace ( '\n' , '<br />' ) for p in paras ]","paras = [ ( '<p>%s</p>' % escape ( p ) . replace ( '\n' , '<br />' ) ) for p in paras ]"
"replace every occurrence of '\n' in p for '<br />',","replace every occurrence of var0 in p for var1,","paras = [ '<p>%s</p>' % p . replace ( '\n' , '<br />' ) for p in paras ]","paras = [ ( '<p>%s</p>' % p . replace ( '\n' , '<br />' ) ) for p in paras ]"
"call the method re.split with 2 arguments: string '\n{2,}' and value, substitute the result for paras.","call method var0 with 2 arguments: string var1 and value, substitute result for paras.","paras = re . split ( '\n{2,}' , value )","paras = var0 ( '\n{2,}' , value )"
parent is a tuple with 2 arguments: form.Meta and object.,parent is tuple with 2 arguments: form var0 and object.,"parent = ( form . Meta , object )","parent = form . var0 , object"
"parent is a tuple with 1 element, object.","parent is tuple with 1 element, object.","parent = ( object , )","parent = object ,"
call the method self.parent_name.resolve with an argument context.,call method self var1 resolve with argument context.,parent = self . parent_name . resolve ( context ),parent = self . var1 . resolve ( context )
"call the method parser.compile_filter with an argument second element for bits, substitute the result for parent_name.","call method parser var1 with argument second element for bits, substitute result for var2 ",parent_name = parser . compile_filter ( bits [ 1 ] ),var2 = parser . var1 ( bits [ 1 ] )
substitute pattern.regex.pattern for parent_pat.,substitute var0 for var1 ,parent_pat = pattern . regex . pattern,var1 = var0
parentloop is an empty dictionary.,var0 is empty dict.,parentloop = { },var0 = { }
substitute value under the the 'forloop' key of the context dictionary for parentloop.,substitute value under the var0 key of context dict for var1 ,parentloop = context [ 'forloop' ],var1 = context [ var0 ]
"call the function get_mod_func with an argument mod_name, store the result in parentmod and submod, respectively.",call function var0 with argument var1 store result in var3 and var4 respectively.,"parentmod , submod = get_mod_func ( mod_name )","var3 , var4 = var0 ( var1 )"
"append string "".moves.urllib_parse"" to __name__, use it as an key to get the value from the sys.modules dictionary, substitute it for parse.","append string var0 to var1 use it as key to get value from var2 dict, substitute it for parse.",parse = sys . modules [ __name__ + '.moves.urllib_parse' ],parse = var2 [ var1 + '.moves.urllib_parse' ]
"parse_until is an empty list,","var0 is empty list,",parse_until = [ ],var0 = [ ]
parsed is boolean False.,parsed is boolean var0 ,parsed = False,parsed = var0
parsed is boolean True.,parsed is boolean var0 ,parsed = True,parsed = var0
"call the function force_text with an argument redirect_to, use the result as an argument for the call to the function urlparse,",call function var0 with argument var1 use result as argument for call to function var3 ,parsed = urlparse ( force_text ( redirect_to ) ),parsed = var3 ( var0 ( var1 ) )
"substitute '%s' with first element of bits and block_name, respectively.   append block_name to parser.__loaded_blocks.",substitute var0 with first element of bits and var1 respectively var5 append var1 to var6 ,parser . __loaded_blocks . append ( block_name ),var6 . append ( var1 )
substitute list with an element block_name for parser.__loaded_blocks.,substitute list with element var0 for var1 ,parser . __loaded_blocks = [ block_name ],var1 = [ var0 ]
substituet node for value under the name key of the parser._namedCycleNodes dictionary.,var0 node for value under name key of var1 dict.,parser . _namedCycleNodes [ name ] = node,var1 [ name ] = node
parser._namedCycleNodes is an empty dictionary.,var0 is empty dict.,parser . _namedCycleNodes = { },var0 = { }
"default set to boolean True and help set to string 'Tells Django to NOT prompt the user for input of any kind.'.   call the parser.add_argument with string '--addrport', default set to an empty string and help as string 'Port number or ipaddr:port to run the server on.'.","default set to boolean var0 and help set to string var1 var2 call parser var4 with string var5, default set to empty string and help as string var7.","parser . add_argument ( '--addrport' , default = '' , help = 'Port number or ipaddr:port to run the server on.' )","parser . var4 ( var5 , default = '' , help = 'var8 number or var9:port to run the server on.' )"
"dest set to string 'domain' and help as a string 'The domain of the message files (default: ""django"").'.   call the method parser.add_argument with 6 arguments: string '--all', string '-a', action as a string'store_true',","dest set to string var0 and help as string var1 var5 call method parser var7 with 6 arguments: string var8, string var11, action as stringvar13,","parser . add_argument ( '--all' , '-a' , action = 'store_true' , dest = 'all' , default = False , help = 'Updates the message files for all existing locales.' )","parser . var7 ( var8 , '-a' , action = 'store_true' , dest = 'all' , default = False , help = 'Updates the message files for all existing locales.' )"
"call the method parser.add_argument with 5 arguments: string '--all', action set to string 'store_true', dest set to string 'all',","call method parser var1 with 5 arguments: string var2, action set to string var3, dest set to string var6,","parser . add_argument ( '--all' , action = 'store_true' , dest = 'all' , default = False ,  help = 'Display all settings, regardless of their value. '  'Default values are prefixed by '###'.' )","parser.var1(var2, action = 'store_true', dest = 'all', default = False,  help = 'Display all settings, regardless of their value.'  'Default values are prefixed by '###'.')"
"default set to DEFAULT_DB_ALIAS and help as a string 'Nominates a specific database to load fixtures into. Defaults to the ""default"" database.'   call the method parser.add_argument with 5 arguments: string '--app', action as a string 'store', dest as a string 'app_label',","default set to var0 and help as string var2 call method parser var5 with 5 arguments: string var6, action as string var8, dest as string var9,","parser . add_argument ( '--app' , action = 'store' , dest = 'app_label' , default = None , help = 'Only look for fixtures in the specified app.' )","parser . var5 ( var6 , action = 'store' , dest = 'app_label' , default = None , help = 'Only look for fixtures in the specified app.' )"
"call the add_argument method on the parser object with string '--backwards', asction set to 'store_true', dest set to 'backwards',","call var0 method on parser object with string var2 var3 set to var4, dest set to var7,","parser . add_argument ( '--backwards' , action = 'store_true' , dest = 'backwards' , default = False , help = 'Creates SQL to unapply the migration, rather than to apply it' )","parser . var0 ( var2 , action = 'store_true' , dest = 'backwards' , default = False , help = 'Creates SQL to unapply the migration, rather than to apply it' )"
"and help set to a string 'Optional table names. Otherwise, settings.CACHES is used to find cache tables.' .   call the method parser.add_argument with 5 arguments: string '--database', action set to string 'store', dest as a string 'database',","and help set to string var0 var1 call method parser var3 with 5 arguments: string var4, action set to string var6, dest as string var7,","parser . add_argument ( '--database' , action = 'store' , dest = 'database' ,  default = DEFAULT_DB_ALIAS ,  help = 'Nominates a database onto which the cache tables will be '  'installed. Defaults to the 'default' database.' )","parser.var3(var4, action = 'store', dest = 'database',var1default = DEFAULT_DB_ALIAS,var1help = 'Nominates a database onto which the cache tables will be 'var1'installed.Defaults to the 'default' database.')"
"dest set to string 'interactive', default set to boolean True, help as a string 'Tells Django to NOT prompt the user for input of any kind.'.   call the method parser.add_argument with 5 arguments: string '--database', action set to string 'store', dest as a string 'database',","dest set to string var0, default set to boolean var1 help as string var2 var7 call method parser var9 with 5 arguments: string var10, action set to string var12, dest as string var13,","parser . add_argument ( '--database' , action = 'store' , dest = 'database' ,  default = DEFAULT_DB_ALIAS ,  help = 'Nominates a database to flush. Defaults to the 'default' database.' )","parser.var9(var10, action = 'store', dest = 'database',var7default = DEFAULT_DB_ALIAS,var7help = 'Nominates a database to flush.Defaults to the 'default' database.')"
"type set to int and help is a string 'Specifies the indent level to use when pretty-printing output.'.   call the method parser.add_argument with 5 arguments: string '--database', default set to string 'store', dest set to 'database',","type set to int and help is string var0 var1 call method parser var3 with 5 arguments: string var4, default set to string var5, dest set to var6,","parser . add_argument ( '--database' , action = 'store' , dest = 'database' ,  default = DEFAULT_DB_ALIAS ,  help = 'Nominates a specific database to dump fixtures from. '  'Defaults to the 'default' database.' )","parser.var3(var4, action = 'store', dest = 'database',var1default = DEFAULT_DB_ALIAS,var1help = 'Nominates a specific database to dump fixtures from.'var1'Defaults to the 'default' database.')"
"call the method parser.add_argument with arguments: string '--database', action set to string 'store', dest set to string 'database',","call method parser var1 with arguments: string var2, action set to string var3, dest set to string var4,","parser . add_argument ( '--database' , action = 'store' , dest = 'database' ,  default = DEFAULT_DB_ALIAS , help = 'Nominates a database onto which to '  'open a shell. Defaults to the 'default' database.' )","parser.var1(var2, action = 'store', dest = 'database',  default = DEFAULT_DB_ALIAS, help = 'Nominates a database onto which to '  'open a shell.Defaults to the 'default' database.')"
"call the method parser.add_argument with 5 arguments: string '--database', action set to string 'store', dest as a string 'database',","call method parser var1 with 5 arguments: string var2, action set to string var3, dest as string var4,","parser . add_argument ( '--database' , action = 'store' , dest = 'database' ,  default = DEFAULT_DB_ALIAS , help = 'Nominates a database to '  'introspect. Defaults to using the 'default' database.' )","parser.var1(var2, action = 'store', dest = 'database',  default = DEFAULT_DB_ALIAS, help = 'Nominates a database to '  'introspect.Defaults to using the 'default' database.')"
"dest set to string 'load_initial_data', default set to True,   help containing string 'Tells Django not to load any initial data after database synchronization.' as arguments.   call the method parser.add_argument with string '--database', action containing string 'store', dest set to string 'database',","dest set to string var0, default set to var1 help containing string var4 as arguments var2 call method parser var9 with string var10, action containing string var12, dest set to string var13,","parser . add_argument ( '--database' , action = 'store' , dest = 'database' ,  default = DEFAULT_DB_ALIAS , help = 'Nominates a database to synchronize. '  'Defaults to the 'default' database.' )","parser.var9(var10, action = 'store', dest = 'database',var2default = DEFAULT_DB_ALIAS, help = 'Nominates a database to synchronize.'var2'Defaults to the 'default' database.')"
"and help set to 'Fixture labels.'.   call the method parser.add_argument with 5 arguments: string '--database', action set to string 'store', dest as a string 'database',","and help set to var0 var1 call method parser var3 with 5 arguments: string var4, action set to string var6, dest as string var7,","parser . add_argument ( '--database' , action = 'store' , dest = 'database' ,  default = DEFAULT_DB_ALIAS , help = 'Nominates a specific database to load '  'fixtures into. Defaults to the 'default' database.' )","parser.var3(var4, action = 'store', dest = 'database',var1default = DEFAULT_DB_ALIAS, help = 'Nominates a specific database to load 'var1'fixtures into.Defaults to the 'default' database.')"
"call the add_argument method on the parser object, with string '--database', default set to DEFAULT_DB_ALIAS and help set to string 'Nominates a database to create SQL for. Defaults to the default"" database.' as arguments.","call var0 method on parser object, with string var2, default set to var3 and help set to string var5 as arguments.","parser . add_argument ( '--database' , default = DEFAULT_DB_ALIAS ,  help = 'Nominates a database to create SQL for. Defaults to the '  ''default' database.' )","parser.var0(var2, default = var3,  help = 'var6 a database to create var7 for.var9 to the '  ''default' database.')"
"call the method parser.add_argument with 3 arguments: string '--database', default set to DEFAULT_DB_ALIAS,","call method parser var1 with 3 arguments: string var2, default set to var3 ","parser . add_argument ( '--database' , default = DEFAULT_DB_ALIAS ,  help = 'Nominates a database to print the SQL for. Defaults to the '  ''default' database.' )","parser.var1(var2, default = var3,  help = 'Nominates a database to print the SQL for.Defaults to the '  ''default' database.')"
"call the parser.add_argument method with the string '--database', default set to DEFAULT_DB_ALIAS and help containig string,","call parser var1 method with string var2, default set to var3 and help var5 string,","parser . add_argument ( '--database' , default = DEFAULT_DB_ALIAS ,  help = 'Nominates a database to print the SQL for. Defaults to the '  ''default' database.' )","parser.var1(var2, default = var3,  help = 'Nominates a database to print the SQL for.Defaults to the '  ''default' database.')"
"call the add_argument method on parser object, use string '--database', default set to DEFAULT_DB_ALIAS and help set to string,","call var0 method on parser object, use string var2, default set to var3 and help set to string,","parser . add_argument ( '--database' , default = DEFAULT_DB_ALIAS ,  help = 'Nominates a database to print the SQL for. Defaults to the '  ''default' database.' )","parser.var0(var2, default = var3,  help = 'Nominates a database to print the SQL for.Defaults to the '  ''default' database.')"
"call parse.add_argument method, with string '--database', default set to DEFAULT_DB_ALIAS,","call parse var1 method, with string var2, default set to var3 ","parser . add_argument ( '--database' , default = DEFAULT_DB_ALIAS ,  help = 'Nominates a database to print the SQL for. Defaults to the '  ''default' database.' )","parser.var1(var2, default = var3,  help = 'Nominates a database to print the SQL for.Defaults to the '  ''default' database.')"
"dest set to string 'load_initial_data', default set to boolean True,   and help as a string 'Tells Django not to load any initial data after database synchronization.'   call the method parser.add_argument with 3 arguments: string '--database', default set to DEFAULT_DB_ALIAS,","dest set to string var0, default set to boolean var1 and help as string var4 call method parser var9 with 3 arguments: string var10, default set to var11 ","parser . add_argument ( '--database' , default = DEFAULT_DB_ALIAS ,  help = 'Nominates a database to synchronize. Defaults to the 'default' database.' )","parser.var9(var10, default = var11,var2help = 'Nominates a database to synchronize.Defaults to the 'default' database.')"
"dest as a string 'exclude', action as a string 'append' and help as a string 'Locales to exclude. Default is none. Can be used multiple times.'.   call the method parser.add_argument with 5 arguments: string '--domain', string '-d', default as a string 'django',","dest as string var0, action as string var1 and help as string var2 var6 call method parser var8 with 5 arguments: string var9, string var11, default as string var12,","parser . add_argument ( '--domain' , '-d' , default = 'django' , dest = 'domain' ,  help = 'The domain of the message files (default: 'django').' )","parser.var8(var9, '-d', default = 'django', dest = 'domain',var6help = 'The domain of the message files(default: 'django').')"
"and help as a string 'Specify the app label(s) to create migrations for.'.   call the method parser.add_argument with 5 arguments: string '--dry-run', action as a string 'store_true', dest as string 'dry_run',","and help as string var0 var1 call method parser var3 with 5 arguments: string var4, action as string var6, dest as string var9,","parser . add_argument ( '--dry-run' , action = 'store_true' , dest = 'dry_run' , default = False ,  help = 'Just show what migrations would be made; don't actually write them.' )","parser.var3(var4, action = 'store_true', dest = 'dry_run', default = False,var1help = 'Just show what migrations would be made; don't actually write them.')"
"default set to boolean False and help set to a string ""Enable fixing of migration conflicts."".   call the method parser.add_argument with 5 arguments: string '--empty', action as a string 'store_true', dest as a string 'empty',","default set to boolean var0 and help set to string var1 var2 call method parser var4 with 5 arguments: string var5, action as string var8, dest as string var11,","parser . add_argument ( '--empty' , action = 'store_true' , dest = 'empty' , default = False , help = 'Create an empty migration.' )","parser . var4 ( var5 , action = 'store_true' , dest = 'empty' , default = var0 , help = 'Create an empty migration.' )"
"dest as a string 'locale', action as a string 'append' and help as a string,   'Creates or updates the message files for the given locale(s) (e.g. pt_BR). Can be used multiple times.'.   call the method parser.add_argument with 5 arguments: string '--exclude', string '-x', default as a empty list,","dest as string var0, action as string var1 and help as string var2 var4 var2 call method parser var11 with 5 arguments: string var12, string var14, default as empty list,","parser . add_argument ( '--exclude' , '-x' , default = [ ] , dest = 'exclude' , action = 'append' , help = 'Locales to exclude. Default is none. Can be used multiple times.' )","parser . var11 ( '--exclude' , '-x' , default = [ ] , dest = 'exclude' , action = var1 , help = 'Locales to exclude.Default is none.var9 be used multiple times.' )"
"default as an empty list and help as an string 'Locale(s) to process (e.g. de_AT). Default is to process all. Can be used multiple times.'.   call the method parser.add_argument with string '--exclude', string '-x', dest set to string 'exclude', action set to string 'append',","default as empty list and help as string var0 var1 call method parser var3 with string var4, string var6, dest set to string var8, action set to string var9,","parser . add_argument ( '--exclude' , '-x' , dest = 'exclude' , action = 'append' , default = [ ] , help = 'Locales to exclude. Default is none. Can be used multiple times.' )","parser . var3 ( var4 , '-x' , dest = 'exclude' , action = 'append' , default = [ ] , help = 'Locales to exclude.Default is none.Can be used multiple times.' )"
"call the method parser.add_argument with 6 arguments: string '--extension', string '-e', dest set to string 'extensions',","call method parser var1 with 6 arguments: string var2, string var3, dest set to string var4,","parser . add_argument ( '--extension' , '-e' , dest = 'extensions' ,  action = 'append' , default = [ 'py' ] ,  help = 'The file extension(s) to render (default: 'py'). '  'Separate multiple extensions with commas, or use '  '-e multiple times.' )","parser.var1(var2, '-e', dest = 'extensions',  action = 'append', default = ['py'],  help = 'The file extension(s) to render(default: 'py').'  'Separate multiple extensions with commas, or use '  '-e multiple times.')"
"dest as a string 'all' default as boolean False and help as a string 'Updates the message files for all existing locales.'.   call the method parser.add_argument with 5 arguments: string '--extension', string '-e', dest set to string 'extensions',","dest as string var0 default as boolean var1 and help as string var2 var4 call method parser var6 with 5 arguments: string var7, string var10, dest set to string var11,","parser . add_argument ( '--extension' , '-e' , dest = 'extensions' ,  help = 'The file extension(s) to examine (default: 'html,txt', or 'js' '  'if the domain is 'djangojs'). Separate multiple extensions with '  'commas, or use -e multiple times.' ,  action = 'append' )","parser.var6(var7, '-e', dest = 'extensions',var4help = 'The file extension(s) to examine(default: 'html,txt', or 'js' 'var4'if the domain is 'djangojs').Separate multiple extensions with 'var4'commas, or use -e multiple times.',var4action = 'append')"
"default set to boolean True, help set to string 'Tells Django to NOT prompt the user for input of any kind.'.   call the method parser.add_argument with 5 arguments: string '--failfast', action set to string 'store_true', dest set to 'failfast',","default set to boolean var0 help set to string var1 var2 call method parser var4 with 5 arguments: string var5, action set to string var8, dest set to var11,","parser . add_argument ( '--failfast' , action = 'store_true' , dest = 'failfast' , default = False , help = 'Tells Django to stop running the test suite after first ' 'failed test.' ) ,","parser . var4 ( var5 , action = 'store_true' , dest = 'failfast' , default = False , help = 'Tells Django to stop running the test suite after first failed test.' ) ,"
"default set to DEFAULT_DB_ALIAS, help containing string 'Nominates a database to synchronize. Defaults to the ""default"" database.' as arguments.   call the method parser.add_argument with string '--fake', action containing string 'store_true', dest set to string 'fake',","default set to var0 help containing string var2 as arguments var3 call method parser var5 with string var6, action containing string var8, dest set to string var11,","parser . add_argument ( '--fake' , action = 'store_true' , dest = 'fake' , default = False , help = 'Mark migrations as run without actually running them' )","parser . var5 ( var6 , action = 'store_true' , dest = 'fake' , default = False , help = 'Mark migrations as run without actually running them' )"
"nargs set to '*' and help is a string 'Restricts dumped data to the specified app_label or app_label.ModelName.'.   call the method parser.add_argument with 4 arguments: string '--format', default set to string 'json',","var0 set to var1 and help is string var2 var10 call method parser var12 with 4 arguments: string var13, default set to string var15,","parser . add_argument ( '--format' , default = 'json' , dest = 'format' , help = 'Specifies the output serialization format for fixtures.' )","parser . var12 ( var13 , default = 'json' , dest = 'format' , help = 'Specifies the output serialization format for fixtures.' )"
"dest as a string 'symlinks', default as boolean False and help as a string 'Follows symlinks to directories when examining '   'source code and templates for translation strings.'.   call the method parser.add_argument with 7 arguments: string '--ignore', string '-i', action as a string 'append',","dest as string var0, default as boolean var1 and help as string var2 var7 var5 call method parser var9 with 7 arguments: string var10, string var13, action as string var14,","parser . add_argument ( '--ignore' , '-i' , action = 'append' , dest = 'ignore_patterns' , default = [ ] , metavar = 'PATTERN' , help = 'Ignore files or directories matching this glob-style pattern. ' 'Use multiple times to ignore more.' )","parser . var9 ( var10 , '-i' , action = 'append' , dest = 'ignore_patterns' , default = [ ] , metavar = 'PATTERN' , help = 'Ignore files or directories matching this glob-style pattern.Use multiple times to ignore more.' )"
"default set to None, help is a string 'Only look for fixtures in the specified app.'.   call the method parser.add_argument with 6 arguments: string '--ignorenonexistent', string '-i', action as a string 'store_true',","default set to var0 help is string var1 var2 call method parser var4 with 6 arguments: string var5, string var8, action as string var9,","parser . add_argument ( '--ignorenonexistent' , '-i' , action = 'store_true' , dest = 'ignore' , default = False , help = 'Ignores entries in the serialized data for fields that do not ' 'currently exist on the model.' )","parser . var4 ( var5 , '-i' , action = 'store_true' , dest = 'ignore' , default = False , help = 'Ignores entries in the serialized data for fields that do not currently exist on the model.' )"
"dest set to 'format' and help is a string 'Specifies the output serialization format for fixtures.'.   call the method parser.add_argument with 5 arguments: string '--indent', default set to None, dest set to 'indent',","dest set to var0 and help is string var1 var3 call method parser var5 with 5 arguments: string var6, default set to var8 dest set to var9,","parser . add_argument ( '--indent' , default = None , dest = 'indent' , type = int , help = 'Specifies the indent level to use when pretty-printing output.' )","parser . var5 ( var6 , default = var8 , dest = 'indent' , type = int , help = 'var2 the indent level to use when pretty-printing output.' )"
"call the method parser.add_argument with 6 arguments: string '--ipv6', string '-6', action set to string 'store_true',","call method parser var1 with 6 arguments: string var2, string var3, action set to string var5,","parser . add_argument ( '--ipv6' , '-6' , action = 'store_true' , dest = 'use_ipv6' , default = False , help = 'Tells Django to use an IPv6 address.' )","parser . var1 ( var2 , '-6' , action = 'store_true' , dest = 'use_ipv6' , default = False , help = 'Tells Django to use an IPv6 address.' )"
"call parser.add_argument method with '--ipv6', string '-6', action set to string 'store_true', dest set to string 'use_ipv6',","call parser var1 method with var2, string var3, action set to string var5, dest set to string var8,","parser . add_argument ( '--ipv6' , '-6' , action = 'store_true' , dest = 'use_ipv6' , default = False , help = 'Tells Django to use an IPv6 address.' )","parser . var1 ( var2 , '-6' , action = 'store_true' , dest = 'use_ipv6' , default = False , help = 'Tells Django to use an IPv6 address.' )"
"dest as a string 'no_obsolete', default as boolean False and help as a string ""Remove obsolete message strings."".   call the method parser.add_argument with 5 arguments: string '--keep-pot', action as a string 'store_true',","dest as string var0, default as boolean var1 and help as string var2 var4 call method parser var6 with 5 arguments: string var7, action as string var9,","parser . add_argument ( '--keep-pot' , action = 'store_true' , dest = 'keep_pot' , default = False , help = 'Keep .pot file after making messages. Useful when debugging.' )","parser . var6 ( var7 , action = 'store_true' , dest = 'keep_pot' , default = var1 , help = 'Keep.pot file after making messages.Useful when debugging.' )"
"dest set to string 'tags' and help set to string 'Run only checks labeled with given tag.'.   call the method parser.add_argument with 4 arguments: string '--list-tags', action set to string 'store_true',","dest set to string var0 and help set to string var1 var3 call method parser var5 with 4 arguments: string var6, action set to string var8,","parser . add_argument ( '--list-tags' , action = 'store_true' , dest = 'list_tags' , help = 'List available tags.' )","parser . var5 ( var6 , action = 'store_true' , dest = 'list_tags' , help = 'List available tags.' )"
"default set to False, help containing string 'Mark migrations as run without actually running them' as arguments.   call the method parser.add_argument with string '--list', string '-l', action contains string 'store_true', dest set to string 'list',","default set to var0 help containing string var1 as arguments var2 call method parser var4 with string var5, string var8, action contains string var9, dest set to string var12,","parser . add_argument ( '--list' , '-l' , action = 'store_true' , dest = 'list' , default = False , help = 'Show a list of all known migrations and which are applied' )","parser . var4 ( var5 , '-l' , action = 'store_true' , dest = 'list' , default = var0 , help = 'Show a list of all known migrations and which are applied' )"
"and help set to a string 'Tells Django to use specified test runner class instead of the one specified by the TEST_RUNNER setting.'.   call the method parser.add_argument with 5 arguments: string '--liveserver', action set to string 'store', dest set to 'liveserver',","and help set to string var0 var1 call method parser var3 with 5 arguments: string var4, action set to string var7, dest set to var8,","parser . add_argument ( '--liveserver' , action = 'store' , dest = 'liveserver' , default = None , help = 'Overrides the default address where the live server (used ' 'with LiveServerTestCase) is expected to run from. The ' 'default value is localhost:8081.' ) ,","parser . var3 ( var4 , action = 'store' , dest = 'liveserver' , default = None , help = 'Overrides the default address where the live server(used with LiveServerTestCase) is expected to run from.The default value is localhost:8081.' ) ,"
"call the method parser.add_argument with 6 arguments: string '--locale', string '-l', default as an empty list,","call method parser var1 with 6 arguments: string var2, string var3, default as empty list,","parser . add_argument ( '--locale' , '-l' , default = [ ] , dest = 'locale' , action = 'append' , help = 'Creates or updates the message files for the given locale(s) (e.g. pt_BR). ' 'Can be used multiple times.' )","parser . var1 ( var2 , '-l' , default = [ ] , dest = 'locale' , action = 'append' , help = 'Creates or updates the message files for the given locale(s)(e.g.pt_BR).Can be used multiple times.' )"
"call the method parser.add_argument with string '--locale', string '-l', dest set to string 'locale', action set to string 'append',","call method parser var1 with string var2, string var3, dest set to string var4, action set to string var5,","parser . add_argument ( '--locale' , '-l' , dest = 'locale' , action = 'append' , default = [ ] , help = 'Locale(s) to process (e.g. de_AT). Default is to process all. ' 'Can be used multiple times.' )","parser . var1 ( var2 , '-l' , dest = 'locale' , action = 'append' , default = [ ] , help = 'Locale(s) to process(e.g.de_AT).Default is to process all.Can be used multiple times.' )"
"default set to boolean False, help as a string ""Just show what migrations would be made; don't actually write them."".   call the method parser.add_argument with 5 arguments: string '--merge', action as a string 'store_true', dest as a string 'merge',","default set to boolean var0 help as string var1 var2 call method parser var4 with 5 arguments: string var5, action as string var7, dest as string var10,","parser . add_argument ( '--merge' , action = 'store_true' , dest = 'merge' , default = False , help = 'Enable fixing of migration conflicts.' )","parser . var4 ( var5 , action = 'store_true' , dest = 'merge' , default = var0 , help = 'Enable fixing of migration conflicts.' )"
"action set to 'append', default is a list containing string 'py' and help set to string:   'The file extension(s) to render (default: ""py""). Separate multiple extensions with commas, or use -e multiple times.'.   call the method parser.add_argument with 6 arguments: string '--name', string '-n', dest set to string 'files',","action set to var0, default is list containing string var1 and help set to string: var6 var4 call method parser var12 with 6 arguments: string var13, string var16, dest set to string var17,","parser . add_argument ( '--name' , '-n' , dest = 'files' , action = 'append' , default = [ ] , help = 'The file name(s) to render. ' 'Separate multiple extensions with commas, or use ' '-n multiple times.' )","parser . var12 ( '--name' , '-n' , dest = 'files' , action = var0 , default = [ ] , help = 'var7 file name(s) to render.var10 multiple extensions with commas, or use -n multiple times.' )"
"default is boolean False and help is a string 'Use natural keys if they are available (deprecated: use --natural-foreign instead).'.   call the method parser.add_argument with 5 arguments: string '--natural-foreign', action set to string 'store_true',","default is boolean var0 and help is string var1 var2 call method parser var4 with 5 arguments: string var5, action set to string var6,","parser . add_argument ( '--natural-foreign' , action = 'store_true' , dest = 'use_natural_foreign_keys' , default = False , help = 'Use natural foreign keys if they are available.' )","parser . var4 ( var5 , action = 'store_true' , dest = 'use_natural_foreign_keys' , default = var0 , help = 'Use natural foreign keys if they are available.' )"
"dest is string 'use_natural_foreign_keys', default is boolean False and help is a string 'Use natural foreign keys if they are available.'.   call the method parser.add_argument with 5 arguments: string '--natural-primary', action set to 'store_true',","dest is string var0, default is boolean var1 and help is string var2 var5 call method parser var7 with 5 arguments: string var8, action set to var10,","parser . add_argument ( '--natural-primary' , action = 'store_true' , dest = 'use_natural_primary_keys' , default = False , help = 'Use natural primary keys if they are available.' )","parser . var7 ( var8 , action = 'store_true' , dest = 'use_natural_primary_keys' , default = var1 , help = 'var3 natural primary keys if var4 are available.' )"
"and help set to string 'Raise on exception'.   call the method parser.add_option with 5 arguments: string '--no-color', action is string 'store_true', dest is string 'no_color',","and help set to string var0 var1 call method parser var3 with 5 arguments: string var4, action is string var6, dest is string var9,","parser . add_argument ( '--no-color' , action = 'store_true' , dest = 'no_color' , default = False ,  help = 'Don't colorize the command output.' )","parser.add_argument(var4, action = 'store_true', dest = 'no_color', default = False,var1help = 'Don't colorize the command output.')"
"dest as a string 'ignore_patterns', default as an empty list, metavar as a string 'PATTERN',   and help as a string 'Ignore files or directories matching this glob-style pattern. Use multiple times to ignore more.'.   call the method parser.add_argument with 5 arguments: string '--no-default-ignore', action as a string 'store_false',","dest as string var0, default as empty list var1 as string var2 var4 and help as string var6 var4 call method parser var11 with 5 arguments: string var12, action as string var14,","parser . add_argument ( '--no-default-ignore' , action = 'store_false' , dest = 'use_default_ignore_patterns' ,  default = True , help = 'Don't ignore the common glob-style patterns 'CVS', '.*', '*~' and '*.pyc'.' )","parser.var11(var12, action = 'store_false', dest = 'use_default_ignore_patterns',var4default = True, help = 'Don't ignore the common glob-style patterns 'CVS', '.*', '*~' and '*.pyc'.')"
"default set to DEFAULT_DB_ALIAS and help as a string 'Nominates a database to flush. Defaults to the ""default"" database.'.   call the method parser.add_argument with 5 arguments: string '--no-initial-data', action set to string 'store_false',","default set to var0 and help as string var2 var3 call method parser var5 with 5 arguments: string var6, action set to string var8,","parser . add_argument ( '--no-initial-data' , action = 'store_false' , dest = 'load_initial_data' , default = True , help = 'Tells Django not to load any initial data after database synchronization.' )","parser . var5 ( var6 , action = 'store_false' , dest = 'load_initial_data' , default = True , help = 'Tells Django not to load any initial data after database synchronization.' )"
"default set to True, help containing string 'Tells Django to NOT prompt the user for input of any kind.' as arguments.   call the method parser.add_argument with string '--no-initial-data', action containing string 'store_false',","default set to var0 help containing string var1 as arguments var2 call method parser var4 with string var5, action containing string var7,","parser . add_argument ( '--no-initial-data' , action = 'store_false' , dest = 'load_initial_data' , default = True , help = 'Tells Django not to load any initial data after database synchronization.' )","parser . var4 ( var5 , action = 'store_false' , dest = 'load_initial_data' , default = var0 , help = 'Tells Django not to load any initial data after database synchronization.' )"
"dest set to string 'interactive', default set to boolean True and help as 'Tells Django to NOT prompt the user for input of any kind.'   call the method parser.add_argument with 5 arguments: string '--no-initial-data', action set to string 'store_false',","dest set to string var0, default set to boolean var1 and help as var2 call method parser var9 with 5 arguments: string var10, action set to string var12,","parser . add_argument ( '--no-initial-data' , action = 'store_false' , dest = 'load_initial_data' , default = True , help = 'Tells Django not to load any initial data after database synchronization.' )","parser . var9 ( var10 , action = 'store_false' , dest = 'load_initial_data' , default = var1 , help = 'var3 var4 not to load any initial data after database synchronization.' )"
"default as boolean False and help as a string ""Don't break long message lines into several lines."".   call the method parser.add_argument with 5 arguments: string '--no-location', action set to string 'store_true',","default as boolean var0 and help as string var1 var2 call method parser var4 with 5 arguments: string var5, action set to string var7,","parser . add_argument ( '--no-location' , action = 'store_true' , dest = 'no_location' ,  default = False , help = 'Don't write '#: filename:line' lines.' )","parser.var4(var5, action = 'store_true', dest = 'no_location',var2default = var0, help = 'Don't write '#: filename:line' lines.')"
"dest set to string 'no_location', default as boolean False and help as a string ""Don't write '#: filename:line' lines."".   call the method parser.add_argument with 5 arguments: string '--no-obsolete', action as a string 'store_true',","dest set to string var0, default as boolean var1 and help as string var2 var6 call method parser var8 with 5 arguments: string var9, action as string var11,","parser . add_argument ( '--no-obsolete' , action = 'store_true' , dest = 'no_obsolete' , default = False , help = 'Remove obsolete message strings.' )","parser . var8 ( var9 , action = 'store_true' , dest = 'no_obsolete' , default = var1 , help = 'Remove obsolete message strings.' )"
"and help is a string 'Migrations will be squashed until and including this migration.'.   call the method parser.add_argument with 5 arguments: string '--no-optimize', action as a string 'store_true',","and help is string var0 var1 call method parser var3 with 5 arguments: string var4, action as string var6,","parser . add_argument ( '--no-optimize' , action = 'store_true' , dest = 'no_optimize' , default = False , help = 'Do not try to optimize the squashed operations.' )","parser . var3 ( var4 , action = 'store_true' , dest = 'no_optimize' , default = False , help = 'Do not try to optimize the squashed operations.' )"
"and help is a string 'Tells Django to use plain Python, not IPython or bpython.'.   call the method parser.add_argument with 4 arguments: string '--no-startup', action as a string 'store_true',","and help is string var0 var1 call method parser var3 with 4 arguments: string var4, action as string var6,","parser . add_argument ( '--no-startup' , action = 'store_true' , dest = 'no_startup' , help = 'When using plain Python, ignore the PYTHONSTARTUP environment variable and ~/.pythonrc.py script.' )","parser . var3 ( var4 , action = 'store_true' , dest = 'no_startup' , help = 'When using plain Python, ignore the PYTHONSTARTUP environment variable and ~/.pythonrc.py script.' )"
"dest as a string 'use_default_ignore_patterns', default set to boolean True,   and help as a string ""Don't ignore the common glob-style patterns 'CVS', '.*', '*~' and '*.pyc'."".   call the method parser.add_argument with 5 arguments: string '--no-wrap', action as a string 'store_true', dest as a string 'no_wrap',","dest as string var0, default set to boolean var1 and help as string var4 var2 call method parser var9 with 5 arguments: string var10, action as string var12, dest as string var15,","parser . add_argument ( '--no-wrap' , action = 'store_true' , dest = 'no_wrap' ,  default = False , help = 'Don't break long message lines into several lines.' )","parser.var9(var10, action = 'store_true', dest = 'no_wrap',var2default = False, help = 'var5't break long message lines into several lines.')"
"and help is a string 'Module paths to test; can be modulename, modulename.TestCase or modulename.TestCase.test_method'.   call the method parser.add_argument with 5 arguments: string '--noinput', action set to 'store_false', dest set to 'interactive',","and help is string var0 var1 call method parser var3 with 5 arguments: string var4, action set to var6, dest set to var9,","parser . add_argument ( '--noinput' , action = 'store_false' , dest = 'interactive' , default = True , help = 'Tells Django to NOT prompt the user for input of any kind.' ) ,","parser . var3 ( var4 , action = 'store_false' , dest = 'interactive' , default = True , help = 'Tells Django to NOT prompt the user for input of any kind.' ) ,"
"call the method parser.add_argument with 5 arguments: string '--noinput', action set to string 'store_false',","call method parser var1 with 5 arguments: string var2, action set to string var3,","parser . add_argument ( '--noinput' , action = 'store_false' , dest = 'interactive' , default = True , help = 'Tells Django to NOT prompt the user for input of any kind.' )","parser . var1 ( var2 , action = 'store_false' , dest = 'interactive' , default = True , help = 'Tells Django to NOT prompt the user for input of any kind.' )"
"default set to boolean False and help as a string ""Create an empty migration."".   call the method parser.add_argument with 5 arguments: string '--noinput', action as a string 'store_false',","default set to boolean var0 and help as string var1 var2 call method parser var4 with 5 arguments: string var5, action as string var8,","parser . add_argument ( '--noinput' , action = 'store_false' , dest = 'interactive' , default = True , help = 'Tells Django to NOT prompt the user for input of any kind.' )","parser . var4 ( var5 , action = 'store_false' , dest = 'interactive' , default = True , help = 'Tells Django to NOT prompt the user for input of any kind.' )"
"Database state will be brought to the state after that migration.' as arguments.   call the method parser.add_argument with string '--noinput', action containing string 'store_false', dest set to string 'interactive',","Database state will be brought to state after var0 migration.var1--noinputvar3store_falsevar6interactive',","parser . add_argument ( '--noinput' , action = 'store_false' , dest = 'interactive' , default = True , help = 'Tells Django to NOT prompt the user for input of any kind.' )","parser . add_argument ( 'var2' , action = 'var4' , dest = 'interactive' , default = True , help = 'Tells Django to NOT prompt the user for input of any kind.' )"
"dest as a string 'no_optimize', default set to boolean False and help as a string 'Do not try to optimize the squashed operations.'.   call the method parser.add_argument with 5 arguments: string '--noinput', action set to string 'store_false',","dest as string var0, default set to boolean var1 and help as string var2 var4 call method parser var6 with 5 arguments: string var7, action set to string var9,","parser . add_argument ( '--noinput' , action = 'store_false' , dest = 'interactive' , default = True , help = 'Tells Django to NOT prompt the user for input of any kind.' )","parser . var6 ( var7 , action = 'store_false' , dest = 'interactive' , default = True , help = 'Tells Django to NOT prompt the user for input of any kind.' )"
"call parser.add_argument method with '--noinput', action set to string 'store_false', dest set to string 'interactive',","call parser var1 method with var2, action set to string var3, dest set to string var6,","parser . add_argument ( '--noinput' , action = 'store_false' , dest = 'interactive' , default = True , help = 'Tells Django to NOT prompt the user for input of any kind.' )","parser . var1 ( var2 , action = 'store_false' , dest = 'interactive' , default = True , help = 'Tells Django to NOT prompt the user for input of any kind.' )"
"dest set to string 'use_threading', default set to boolean True and help set to 'Tells Django to NOT use threading.'.   call the method parser.add_argument with 5 arguments: string '--noreload', action set to string 'store_false',","dest set to string var0, default set to boolean var1 and help set to var2 var7 call method parser var9 with 5 arguments: string var10, action set to string var12,","parser . add_argument ( '--noreload' , action = 'store_false' , dest = 'use_reloader' , default = True , help = 'Tells Django to NOT use the auto-reloader.' )","parser . var9 ( var10 , action = 'store_false' , dest = 'use_reloader' , default = var1 , help = 'var3 var4 to var6 use the auto-reloader.' )"
"dest set to string 'use_ipv6', default set to boolean False and help set to string 'Tells Django to use an IPv6 address.'.   call the method parser.add_argument with 5 arguments: string '--nothreading', action set to string 'store_false',","dest set to string var0, default set to boolean var1 and help set to string var2 var8 call method parser var10 with 5 arguments: string var11, action set to string var13,","parser . add_argument ( '--nothreading' , action = 'store_false' , dest = 'use_threading' , default = True , help = 'Tells Django to NOT use threading.' )","parser . var10 ( var11 , action = 'store_false' , dest = 'use_threading' , default = True , help = 'var3 var4 to NOT use threading.' )"
"dest is 'use_base_manager', default is boolean False and help is a string '(use multiple --exclude to exclude multiple apps/models).'.   call the method parser.add_argument with 3 arguments: string '--pks', dest set to string 'primary_keys',","dest is var0, default is boolean var1 and help is string var2 var4 call method parser var6 with 3 arguments: string var7, dest set to string var8,","parser . add_argument ( '--pks' , dest = 'primary_keys' , help = 'Only dump objects with given primary keys. ' 'Accepts a comma separated list of keys. ' 'This option will only work when you specify one model.' )","parser . var6 ( var7 , dest = 'primary_keys' , help = 'Only dump objects with given primary keys.Accepts a comma separated list of keys.This option will only work when you specify one model.' )"
"call the method parser.add_argument with 4 arguments: string '--plain', action set to string 'store_true', dest as a string 'plain',","call method parser var1 with 4 arguments: string var2, action set to string var3, dest as string var6,","parser . add_argument ( '--plain' , action = 'store_true' , dest = 'plain' , help = 'Tells Django to use plain Python, not IPython or bpython.' )","parser . var1 ( var2 , action = 'store_true' , dest = 'plain' , help = 'Tells Django to use plain Python, not IPython or bpython.' )"
"call the method parser.add_option with 2 arguments: string '--pythonpath' and help set to a string 'A directory to add to the Python  path, e.g. ""/home/djangoprojects/myproject"".'",call method parser var2 with 2 arguments: string var3 and help set to string var4,"parser . add_argument ( '--pythonpath' ,  help = 'A directory to add to the Python path, e.g. '/home/djangoprojects/myproject'.' )","parser.add_argument(var3,var0 help = 'A directory to add to the var5 path,var0e.g.'var6/var7/var8'.')"
call the method parser.add_argument with an argument string '--pythonpath'.,call method parser var1 with argument string var2.,parser . add_argument ( '--pythonpath' ),parser . var1 ( var2 )
"dest set to string 'verbosity', default set to string '1', type set to int, choices is a list, containing integers: 0, 1, 2 and 3,   call the method parser.add_option with 2 arguments: string '--settings' and help as a string 'The Python path to a settings module,  e.g. ""myproject.settings.main"". If this isn\'t provided, the DJANGO_SETTINGS_MODULE environment variable will be used.'","dest set to string 'verbosity', default set to string '1', type set to int, choices is a list, containing integers: 0, 1, 2 and 3,   call the method parser.add_option with 2 arguments: string '--settings' and help as a string 'The Python path to a settings module,  e.g. ""myproject.settings.main"". If this isn\'t provided, the DJANGO_SETTINGS_MODULE environment variable will be used.'","parser . add_argument ( '--settings' ,  help = 'The Python path to a settings module, e.g. 'myproject.settings.main'. If this isn\'t provided, the DJANGO_SETTINGS_MODULE environment variable will be used.' )","parser . add_argument ( '--settings' ,  help = 'The Python path to a settings module, e.g. 'myproject.settings.main'. If this isn\'t provided, the DJANGO_SETTINGS_MODULE environment variable will be used.' )"
call the method parser.add_argument with an argument string '--settings'.,call method parser var1 with argument string var2.,parser . add_argument ( '--settings' ),parser . var1 ( var2 )
"help set to a string 'The file extension(s) to examine (default: ""html,txt"", or ""js"" '   'if the domain is ""djangojs""). Separate multiple extensions with commas, or use -e multiple times.' and action as a string 'append'.   call the method parser.add_argument with 6 arguments: string '--symlinks', string '-s', action as a string 'store_true',","help set to string var0 var3 and action as string var6 var1 call method parser var8 with 6 arguments: string var9, string var10, action as string var11,","parser . add_argument ( '--symlinks' , '-s' , action = 'store_true' , dest = 'symlinks' , default = False , help = 'Follows symlinks to directories when examining ' 'source code and templates for translation strings.' )","parser . var8 ( var9 , '-s' , action = 'store_true' , dest = 'symlinks' , default = False , help = 'Follows symlinks to directories when examining source code and templates for translation strings.' )"
"call the method parser.add_argument with 5 arguments: string '--tag', string '-t', action set to string 'append',","call method parser var1 with 5 arguments: string var2, string var3, action set to string var4,","parser . add_argument ( '--tag' , '-t' , action = 'append' , dest = 'tags' , help = 'Run only checks labeled with given tag.' )","parser . var1 ( var2 , '-t' , action = 'append' , dest = 'tags' , help = 'Run only checks labeled with given tag.' )"
call the method parser.add_argument with 2 arguments: string '--template' and help set to string 'The path or URL to load the template from.'.,call method parser var1 with 2 arguments: string var2 and help set to string var3.,"parser . add_argument ( '--template' , help = 'The path or URL to load the template from.' )","parser . var1 ( var2 , help = 'var4 path or var6 to load the template from.' )"
"default set to boolean False and help  set to string 'Tells Django to stop running the test suite after first failed test.'.   call the method parser.add_argument with 4 arguments: string '--testrunner', action set to string 'store', dest set to 'testrunner',","default set to boolean var0 and help set to string var2 var1 call method parser var4 with 4 arguments: string var5, action set to string var8, dest set to var9,","parser . add_argument ( '--testrunner' , action = 'store' , dest = 'testrunner' , help = 'Tells Django to use specified test runner class instead of ' 'the one specified by the TEST_RUNNER setting.' ) ,","parser . var4 ( var5 , action = 'store' , dest = 'testrunner' , help = 'Tells Django to use specified test runner class instead of the one specified by the TEST_RUNNER setting.' ) ,"
"call the method parser.add_option with 3 arguments: string '--traceback', action set to a string 'store_true',","call method parser var1 with 3 arguments: string var2, action set to string var3,","parser . add_argument ( '--traceback' , action = 'store_true' , help = 'Raise on exception' )","parser . add_argument ( var2 , action = 'store_true' , help = 'Raise on exception' )"
"os.path.basename(prog_name) and subcommand, separated by whitespace and description set to self.help, if exists, or None, otherwise.   call the method parser.add_option with 3 arguments: string '--version', action set to string 'version',","os.path.basename(prog_name) and var2 separated by var3 and description set to var4 if exists, or var5 otherwise var6 call method parser var8 with 3 arguments: string var9, action set to string var10,","parser . add_argument ( '--version' , action = 'version' , version = self . get_version ( ) )","parser . add_argument ( var9 , action = 'version' , version = self . get_version ( ) )"
"dest is 'use_natural_primary_keys', default is boolean False and help is a string 'Use natural primary keys if they are available.'.   call the method parser.add_argument with 6 arguments: string '-a', string '--all', action set to 'store_true',","dest is var0, default is boolean var1 and help is string var2 var5 call method parser var7 with 6 arguments: string var8, string var10, action set to var12,","parser . add_argument ( '-a' , '--all' , action = 'store_true' , dest = 'use_base_manager' , default = False ,  help = 'Use Django's base manager to dump all models stored in the database, '  'including those that would otherwise be filtered or modified by a custom manager.' )","parser.var7(var8, '--all', action = 'store_true', dest = 'use_base_manager', default = var1,var5help = 'var3 Django's base manager to dump all models stored in the database, 'var5'including those that would otherwise be filtered or modified by a custom manager.')"
"add set to DEFAULT_DB_ALIAS and help is 'Nominates a specific database to dump fixtures from. Defaults to the ""default"" database.'.   call the method parser.add_argument with 6 arguments: string '-e', string '--exclude', dest set to 'exclude', action set to 'append',","add set to var0 and help is var2 var3 call method parser var5 with 6 arguments: string var6, string var8, dest set to var10, action set to var11,","parser . add_argument ( '-e' , '--exclude' , dest = 'exclude' , action = 'append' , default = [ ] , help = 'An app_label or app_label.ModelName to exclude ' '(use multiple --exclude to exclude multiple apps/models).' )","parser . var5 ( var6 , '--exclude' , dest = 'exclude' , action = 'append' , default = [ ] , help = 'An app_label or app_label.ModelName to exclude (use multiple --exclude to exclude multiple apps/models).' )"
"dest as a string 'no_startup' and help as a string 'When using plain Python, ignore the PYTHONSTARTUP environment variable and ~/.pythonrc.py script.'.   call the method parser.add_argument with 5 arguments: string '-i', string '--interface', choices set to string self.shells,","dest as string var0 and help as string var1 var7 call method parser var9 with 5 arguments: string var10, string var12, choices set to string var14 ","parser . add_argument ( '-i' , '--interface' , choices = self . shells , dest = 'interface' ,  help = 'Specify an interactive interpreter interface. Available options: 'ipython' and 'bpython'' )","parser.var9(var10, '--interface', choices = var14, dest = 'interface',var7help = 'Specify an interactive interpreter interface.Available options: 'ipython' and 'bpython'')"
"default is a an empty list and help is a string '(use multiple --exclude to exclude multiple apps/models).'.   call the method parser.add_argument with 6 arguments: string '-n', string '--natural', action is string 'store_true', dest is string 'use_natural_keys',","default is an empty list and help is string var0 var1 call method parser var3 with 6 arguments: string var4, string var6, action is string var8, dest is string var11,","parser . add_argument ( '-n' , '--natural' , action = 'store_true' , dest = 'use_natural_keys' , default = False , help = 'Use natural keys if they are available (deprecated: use --natural-foreign instead).' )","parser . var3 ( var4 , '--natural' , action = 'store_true' , dest = 'use_natural_keys' , default = False , help = 'Use natural keys if they are available(deprecated: use --natural-foreign instead).' )"
"and help is a string ""Only dump objects with given primary keys. Accepts a comma separated list of keys. ""   ""This option will only work when you specify one model."".   call the method parser.add_argument with 5 arguments: string '-o', string '--output', default is None, dest set to string 'output',","and help is string var0 var3 var1 call method parser var9 with 5 arguments: string var10, string var14, default is var15 dest set to string var16,","parser . add_argument ( '-o' , '--output' , default = None , dest = 'output' , help = 'Specifies file to which the output is written.' )","parser . var9 ( var10 , '--output' , default = var15 , dest = 'output' , help = 'Specifies file to which the output is written.' )"
"and version set to result of the method self.get_version.   call the method parser.add_option with 8 arguments: string '-v', string '--verbosity', action set to string 'store',","and version set to result of method self var1 call method parser var4 with 8 arguments: string var5, string var6, action set to string var8,","parser . add_argument ( '-v' , '--verbosity' , action = 'store' , dest = 'verbosity' , default = '1' , type = int , choices = [ 0 , 1 , 2 , 3 ] , help = 'Verbosity level; 0=minimal output, 1=normal output, 2=verbose output, 3=very verbose output' )","parser . add_argument ( var5 , '--verbosity' , action = 'store' , dest = 'verbosity' , default = '1' , type = int , choices = [ 0 , 1 , 2 , 3 ] , help = 'Verbosity level; 0=minimal output, 1=normal output, 2=verbose output, 3=very verbose output' )"
"call the method parser.add_argument with 3 arguments: string 'addrport', nargs='?' and help as a string 'Optional port number, or ipaddr:port'.","call method parser var1 with 3 arguments: string var2, nargs=var4?var4 and help as string var4Optional port number, or ipaddr:portvar4.","parser . add_argument ( 'addrport' , nargs = '?' , help = 'Optional port number, or ipaddr:port' )","parser . var1 ( var2 , nargs = '?' , help = 'var6 port number, or var7:port' )"
"call the add_argument method on the parser object, with string 'app_label', and help set to string 'App label of the application containing the migration.' as arguments.","call var0 method on parser object, with string var2, and help set to string var3 as arguments.","parser . add_argument ( 'app_label' , help = 'App label of the application containing the migration.' )","parser . var0 ( var2 , help = 'var4 label of the application containing the migration.' )"
"call the method parser.add_argument with 2 arguments: string 'app_label',","call method parser var1 with 2 arguments: string var2,","parser . add_argument ( 'app_label' , help = 'App label of the application to squash migrations for.' )","parser . var1 ( var2 , help = 'App label of the application to squash migrations for.' )"
"call the method parser.add_argument with string 'app_label', nargs set to charcter '?', help containing string,","call method parser var1 with string var2 var3 set to var4 var5?var5, help containing string,","parser . add_argument ( 'app_label' , nargs = '?' , help = 'App label of an application to synchronize the state.' )","parser . var1 ( var2 , var3 = '?' , help = 'App label of an application to synchronize the state.' )"
"call the method parser.add_argument with 4 arguments: string 'args', metavar set to string 'app_label', nargs set to character'*',","call method parser var1 with 4 arguments: string var2 var3 set to string var4 var7 set to charactervar8,","parser . add_argument ( 'args' , metavar = 'app_label' , nargs = '*' , help = 'Specify the app label(s) to create migrations for.' )","parser . var1 ( var2 , var3 = 'app_label' , var7 = '*' , help = 'Specify the app label(s) to create migrations for.' )"
"call the method parser.add_argument with 3 arguments: string 'args', metavar set to string 'app_label' and nargs set to '*'.",call method parser var1 with 3 arguments: string var2 var3 set to string var4 and var7 set to var8.,"parser . add_argument ( 'args' , metavar = 'app_label' , nargs = '*' )","parser . var1 ( var2 , var3 = 'app_label' , var7 = '*' )"
"call the method parser.add_argument with 4 arguments: string 'args', metavar set to 'app_label', nargs set to '+',","call method parser var1 with 4 arguments: string var2 var3 set to var4 var7 set to var8,","parser . add_argument ( 'args' , metavar = 'app_label' , nargs = '+' , help = 'One or more application label.' )","parser . var1 ( var2 , var3 = 'app_label' , var7 = '+' , help = 'One or more application label.' )"
"call the method parser.add_argument with 4 arguments: string 'args', metavar set to string 'app_label[.ModelName]',","call method parser var1 with 4 arguments: string var2 var3 set to string var4,","parser . add_argument ( 'args' , metavar = 'app_label[.ModelName]' , nargs = '*' , help = 'Restricts dumped data to the specified app_label or app_label.ModelName.' )","parser . var1 ( var2 , var3 = 'app_label[var7]' , nargs = '*' , help = 'Restricts dumped data to the specified var5 or var5.var8.' )"
"call parser.add_argument method with 'args', metavar set to string 'fixture', nargs set to string '*' and help set to string 'Path(s) to fixtures to load before running the server.'.","call parser.add_argument method with 'args', metavar set to string 'fixture', nargs set to string '*' and help set to string 'Path(s) to fixtures to load before running the server.'.","parser . add_argument ( 'args' , metavar = 'fixture' , nargs = '*' , help = 'Path(s) to fixtures to load before running the server.' )","parser . add_argument ( 'args' , metavar = 'fixture' , nargs = '*' , help = 'Path(s) to fixtures to load before running the server.' )"
"call the method parser.add_argument with 4 arguments: string 'args', metavar set to string 'fixture', nargs set to '+',","call method parser var1 with 4 arguments: string var2 var3 set to string var4 var5 set to var6,","parser . add_argument ( 'args' , metavar = 'fixture' , nargs = '+' , help = 'Fixture labels.' )","parser . var1 ( var2 , var3 = 'fixture' , var5 = '+' , help = 'Fixture labels.' )"
"call the method parser.add_argument with 4 arguments: string 'args', metavar set to string 'table_name', nargs set to '*' character,","call method parser var1 with 4 arguments: string var2 var3 set to string var4 var7 set to var8 character,","parser . add_argument ( 'args' , metavar = 'table_name' , nargs = '*' , help = 'Optional table names. Otherwise, settings.CACHES is used to ' 'find cache tables.' )","parser . var1 ( var2 , var3 = 'table_name' , var7 = '*' , help = 'Optional table names.Otherwise, settings.CACHES is used to find cache tables.' )"
"call the method parser.add_argument with 4 arguments: string 'args', metavar set to string 'test_label', nargs set to string '*',","call method parser var1 with 4 arguments: string var2 var3 set to string var4 var7 set to string var8,","parser . add_argument ( 'args' , metavar = 'test_label' , nargs = '*' , help = 'Module paths to test; can be modulename, modulename.TestCase or modulename.TestCase.test_method' )","parser . var1 ( var2 , var3 = 'test_label' , var7 = '*' , help = 'Module paths to test; can be modulename, modulename.TestCase or modulename.TestCase.test_method' )"
"call the method parser.add_argument with 3 arguments: string 'args', metavar set to self.label and nargs set to '+'.",call method parser var1 with 3 arguments: string var2 var3 set to var4 and var5 set to var6.,"parser . add_argument ( 'args' , metavar = self . label , nargs = '+' )","parser . var1 ( var2 , var3 = var4 , var5 = '+' )"
call the method parser.add_argument with arguments: string 'args' and nargs set to '*'.,call method parser var1 with arguments: string var2 and var3 set to var4.,"parser . add_argument ( 'args' , nargs = '*' )","parser . var1 ( var2 , var3 = '*' )"
call the method parser.add_argument with 2 arguments: string 'args' and nargs set to '*'.,call method parser var1 with 2 arguments: string var2 and var3 set to var4.,"parser . add_argument ( 'args' , nargs = '*' )","parser . var1 ( var2 , var3 = '*' )"
"call the method parser.add_argument with 3 arguments: string 'args', nargs set to argparse.REMAINDER and help as a string 'Various KEY=val options.'",call method parser var1 with 3 arguments: string var2 var3 set to var4 var5 and help as string var6,"parser . add_argument ( 'args' , nargs = argparse . REMAINDER , help = 'Various KEY=val options.' )","parser.var1(var2, var3 var9 var4.var5, help var9 'var7 var8=var10 options.')"
"call the method parser.add_argument with 3 arguments: string 'directory', nargs set to '?' and help set to string 'Name of the application or project.'.",call method parser var1 with 3 arguments: string var2 var3 set to var4?var4 and help set to string var4Name of application or project.var4.,"parser . add_argument ( 'directory' , nargs = '?' , help = 'Optional destination directory' )","parser . var1 ( var2 , var3 = '?' , help = 'Optional destination directory' )"
"call the add_argument method on the parser object, with string 'migration_name', and help set to string 'Migration name to print the SQL for.' as arguments.","call var0 method on parser object, with string var2, and help set to string var3 as arguments.","parser . add_argument ( 'migration_name' , help = 'Migration name to print the SQL for.' )","parser . var0 ( var2 , help = 'var4 name to print the var5 for.' )"
"and help is a string 'App label of the application to squash migrations for.'.   call the method parser.add_argument with 2 arguments: string 'migration_name',","and help is string var0 var1 call method parser var3 with 2 arguments: string var4,","parser . add_argument ( 'migration_name' , help = 'Migrations will be squashed until and including this migration.' )","parser . var3 ( var4 , help = 'Migrations will be squashed until and including this migration.' )"
"App label of an application to synchronize the state.' as arguments.   call the method parser.add_argument with string 'migration_name', nargs set to charcter '?', help containing string,","var0 label of application to synchronize state.var1migration_namevar4?', help containing string,","parser . add_argument ( 'migration_name' , nargs = '?' , help = 'Database state will be brought to the state after that migration.' )","parser . add_argument ( 'var2' , var5 = '?' , help = 'Database state will be brought to the state after that migration.' )"
call the method parser.add_argument with 2 arguments: string 'name' and help set to string 'Name of the application or project.'.,call method parser var1 with 2 arguments: string var2 and help set to string var3.,"parser . add_argument ( 'name' , help = 'Name of the application or project.' )","parser . var1 ( var2 , help = 'var4 of the application or project.' )"
call the method parser.add_library with an argument lib.,call method parser var1 with argument lib.,parser . add_library ( lib ),parser . var1 ( lib )
where '%s' is replaced with name and taglib.   call the method parser.add_library with an argument temp_lib.,var0 var1 is replaced with name and var2 call method parser var5 with argument var6 ,parser . add_library ( temp_lib ),parser . var5 ( var6 )
"and help='Raise on exception'.   call the method parser.add_option with 5 arguments: string '--no-color', action set to a string 'store_true',","and help=var1 var2 call method parser var4 with 5 arguments: string var5, action set to string var7,","parser . add_option ( '--no-color' , action = 'store_true' , dest = 'no_color' , default = False ,  help = 'Don't colorize the command output.' )","parser.var4(var5, action = 'store_true', dest = 'no_color', default = False,var2help = 'Don't colorize the command output.')"
"call the method parser.add_option with 2 arguments: string '--pythonpath' and help set to string 'A directory to add to the Python path, e.g. ""/home/djangoprojects/myproject"".'.",call method parser var1 with 2 arguments: string var2 and help set to string var3.,"parser . add_option ( '--pythonpath' ,  help = 'A directory to add to the Python path, e.g. '/home/djangoprojects/myproject'.' ) ,","parser.var1(var2,  help = 'A directory to add to the var4 path, e.g.'var5/var6/var7'.'),"
"dest set to string 'verbosity', default set to string '1', type set to string 'choice', choices is a list containing elements: '0', '1', '2', '3', and help as a string 'Verbosity level; 0=minimal output, 1=normal output, 2=verbose output, 3=very verbose output'.   call the method parser.add_option with 2 arguments: string '--settings' and help as a string 'The Python path to a settings module, e.g. ""myproject.settings.main"". If this isn\'t provided, the DJANGO_SETTINGS_MODULE environment variable will be used.'.","dest set to string 'verbosity', default set to string '1', type set to string 'choice', choices is a list containing elements: '0', '1', '2', '3', and help as a string 'Verbosity level; 0=minimal output, 1=normal output, 2=verbose output, 3=very verbose output'.   call the method parser.add_option with 2 arguments: string '--settings' and help as a string 'The Python path to a settings module, e.g. ""myproject.settings.main"". If this isn\'t provided, the DJANGO_SETTINGS_MODULE environment variable will be used.'.","parser . add_option ( '--settings' ,  help = 'The Python path to a settings module, e.g. 'myproject.settings.main'. If this isn\'t provided, the DJANGO_SETTINGS_MODULE environment variable will be used.' )","parser . add_option ( '--settings' ,  help = 'The Python path to a settings module, e.g. 'myproject.settings.main'. If this isn\'t provided, the DJANGO_SETTINGS_MODULE environment variable will be used.' )"
"call the method parser.add_option with 3 arguments: string '--traceback', action set to a string 'store_true',","call method parser var1 with 3 arguments: string var2, action set to string var3,","parser . add_option ( '--traceback' , action = 'store_true' , help = 'Raise on exception' )","parser . var1 ( var2 , action = 'store_true' , help = 'Raise on exception' )"
"usage set to return value of the method self.usage called with an argument subcommand, version set to return value of the method self.get_version.   call the method parser.add_option with 8 arguments: string '-v', string '--verbosity', action set to string 'store',","usage set to return value of method var0 called with argument var1 version set to return value of method self var3 call method parser var6 with 8 arguments: string var7, string var8, action set to string var10,","parser . add_option ( '-v' , '--verbosity' , action = 'store' , dest = 'verbosity' , default = '1' , type = 'choice' , choices = [ '0' , '1' , '2' , '3' ] , help = 'Verbosity level; 0=minimal output, 1=normal output, 2=verbose output, 3=very verbose output' )","parser . var6 ( var7 , '--verbosity' , action = 'store' , dest = 'verbosity' , default = '1' , type = 'choice' , choices = [ '0' , '1' , '2' , '3' ] , help = 'Verbosity level; 0=minimal output, 1=normal output, 2=verbose output, 3=very verbose output' )"
call the method parser.add_option with an argument opt.,call method parser var1 with argument opt.,parser . add_option ( opt ),parser . var1 ( opt )
call the method parser.delete_first_token.,call method parser var1 ,parser . delete_first_token ( ),parser . var1 ( )
substitute self.entity_decl for parser.EntityDeclHandler.,substitute self var1 for parser var2 ,parser . EntityDeclHandler = self . entity_decl,parser . var2 = self . var1
substitute self.external_entity_ref_handler for parser.ExternalEntityRefHandler.,substitute self var1 for parser var2 ,parser . ExternalEntityRefHandler = self . external_entity_ref_handler,parser . var2 = self . var1
"call the method parser.invalid_block_tag with 3 arguments: endblock, 'endblock' and acceptable_endblocks.","call method parser var1 with 3 arguments: endblock, var2 and var3 ","parser . invalid_block_tag ( endblock , 'endblock' , acceptable_endblocks )","parser . var1 ( endblock , var2 , var3 )"
call the method parser.print_help.,call method parser var1 ,parser . print_help ( ),parser . var1 ( )
call the method parser.skip_past with an argument string 'endcomment'.,call method parser var1 with argument string var2.,parser . skip_past ( 'endcomment' ),parser . var1 ( var2 )
substitute self.start_doctype_decl for parser.StartDoctypeDeclHandler.,substitute self var1 for parser var2 ,parser . StartDoctypeDeclHandler = self . start_doctype_decl,parser . var2 = self . var1
substitute self.unparsed_entity_decl for parser.UnparsedEntityDeclHandler.,substitute self var1 for parser var2 ,parser . UnparsedEntityDeclHandler = self . unparsed_entity_decl,parser . var2 = self . var1
parser is the return of ArgumentParser function of the module argparse,parser is return of var0 function of module var1,parser = argparse . ArgumentParser ( ),parser = var1 . var0 ( )
"all the method command.create_parser with arguments: empty and name, substitute the result for parser.","all method command var1 with arguments: empty and name, substitute result for parser.","parser = command . create_parser ( '' , name )","parser = command . var1 ( '' , name )"
"parser is an instance of CommandParser class, created with 3 arguments, None, usage as a string ""%(prog)s subcommand [options] [args]"" and add_help set to boolean False.","parser is instance of var0 class, created with 3 arguments var2 usage as string var3 and var6 set to boolean var8 ","parser = CommandParser ( None , usage = '%(prog)s subcommand [options] [args]' , add_help = False )","parser = var0 ( var2 , usage = '%(prog)s subcommand [var4] [var5]' , var6 = var8 )"
"parser is an instance of CommandParser class, created with 3 arguments: self, prog as a string created by joining:","parser is instance of var0 class, created with 3 arguments: self var1 as string created by joining:","parser = CommandParser ( self , prog = '%s %s' % ( os . path . basename ( prog_name ) , subcommand ) , description = self . help or None )","parser = var0 ( self , var1 = '%s %s' % ( os . path . basename ( prog_name ) , subcommand ) , description = self . help or None )"
"and warning as a string ""You cannot alter upload handlers after the upload has been processed."".   parser is an instance of MultiPartParser class, created with 4 arguments: META, post_data, self.upload_handlers and self.encoding.","and warning as string var0 var1 parser is instance of var2 class, created with 4 arguments: var4 var6 self var9 and var10 ","parser = MultiPartParser ( META , post_data , self . upload_handlers , self . encoding )","parser = var2 ( var4 , var6 , self . var9 , var10 )"
"is deprecated, use ArgumentParser instead and RemovedInDjango20Warning.   parser is an instance of the object OptionParser, created with arguments: prog set to prog_name,","is deprecated, use var0 instead and var1 parser is instance of object var4 created with arguments: var6 set to var7 ","parser = OptionParser ( prog = prog_name , usage = self . usage ( subcommand ) , version = self . get_version ( ) )","parser = var4 ( var6 = var7 , usage = self . usage ( subcommand ) , version = self . get_version ( ) )"
"call the method lexer.tokenize, use it as an argument for the call to the parser_class function, substitute the result for parser.","call method var0 use it as argument for call to var1 function, substitute result for parser.",parser = parser_class ( lexer . tokenize ( ) ),parser = var1 ( lexer . tokenize ( ) )
substitute self._parser for parser.,substitute var0 for parser.,parser = self . _parser,parser = var0
"call the method self.create_parser with first and second element of argv, substitute the result for parser.",call method self var1 with first and second element of var2 substitute result for parser.,"parser = self . create_parser ( argv [ 0 ] , argv [ 1 ] )","parser = self . var1 ( var2 [ 0 ] , var2 [ 1 ] )"
call the method self.create_parser with arguments prog_name and subcommand.,call method self var1 with arguments var2 and var4 ,"parser = self . create_parser ( prog_name , subcommand )","parser = self . var1 ( var2 , var4 )"
"call the method subcommand_cls.create_parser with 2 argument an empty string an first element of cwords, substitute it for parser.",call method var0 var2 with 2 argument empty string first element of var3 substitute it for parser.,"parser = subcommand_cls . create_parser ( '' , cwords [ 0 ] )","parser = var0 . var2 ( '' , var3 [ 0 ] )"
"format a string ""(?P<%s>%s)"" with groupid and tok.regex, append it to the parts.","format string ""(?P<%s>%s)"" with var1 and var2 append it to parts.","parts . append ( '(?P<%s>%s)' % ( groupid , tok . regex ) )","parts . append ( '(?P<%s>%s)' % ( var1 , var2 ) )"
append decimals to parts.,append decimals to parts.,parts . append ( decimals ),parts . append ( decimals )
append value to parts.,append value to parts.,parts . append ( value ),parts . append ( value )
call the method parts.reverse.,call method var0 ,parts . reverse ( ),var0 ( )
parts is an empty list.,parts is empty list.,parts = [ ],parts = [ ]
"assign integer 2 to parts if third element of version equals to zero, otherwise assign it integer 3.","assign integer 2 to parts if third element of version equals to zero, otherwise assign it integer 3.",parts = 2 if version [ 2 ] == 0 else 3,parts = 2 if version [ 2 ] == 0 else 3
"convert config_string to lowercase and split it by ';' character, substitute the result for parts.","convert var0 to lowercase and split it by var2 character, substitute result for parts.",parts = config_string . lower ( ) . split ( ';' ),parts = var0 . lower ( ) . split ( var2 )
"call the method fixture_name.rsplit with 2 arguments: character '.' and integer 2, substitute the result for parts.","call method var0 rsplit with 2 arguments: character var1 and integer 2, substitute result for parts.","parts = fixture_name . rsplit ( '.' , 2 )","parts = var0 . rsplit ( var1 , 2 )"
substitute the last element of parts for parts.,substitute last element of parts for parts.,parts = parts [ : - 1 ],parts = parts [ : - 1 ]
"split t.contents by '|' symbol, substitute the result for parts,","split var0 by var1 symbol, substitute result for parts,",parts = t . contents . split ( '|' ),parts = var0 . split ( var1 )
"call the method viewname.split, with an argument ':', substitute the result for parts.","call method var0 with argument var1, substitute result for parts.",parts = viewname . split ( ':' ),parts = var0 ( var1 )
do nothing.,do nothing.,pass,pass
do nothing,do nothing,pass,pass
do nothig.,do var0 ,pass,pass
ModelFormMetaclass and BaseModelForm.   do nothing.,var0 and var1 do nothing.,pass,pass
"do nothing,","do nothing,",pass,pass
"decrement by length of password, create bytes string with previous result number of characters '\x00',","decrement by length of password, create bytes string with previous result number of characters var0,",password += b'\x00' * ( inner . block_size - len ( password ) ),password += bvar0 * ( inner . block_size - len ( password ) )
"call the function digest with an argument password, call the method digest on the result, substitute the result or password.","call function digest with argument password, call method digest on result, substitute result or password.",password = digest ( password ) . digest ( ),password = digest ( password ) . digest ( )
"call the function force_bytes with an argument password, substitute the result for password.","call function var0 with argument password, substitute result for password.",password = force_bytes ( password ),password = var0 ( password )
"and substitute the return value for value under the key 'Expires' of dictionary response.   call the function patch_cache_control, with response and max_age set to cache_timeout as arguments.",and substitute return value for value under key var0 of dict response var1 call function var2 with response and var4 set to var6 as arguments.,"patch_cache_control ( response , max_age = cache_timeout )","var2 ( response , var4 = var6 )"
call the function patch_response with response and cache_timeout decremented by integer 1 as arguments.,call function var0 with response and var1 var3 by integer 1 as arguments.,"patch_response_headers ( response , cache_timeout = - 1 )","patch_response_headers ( response , var1 = - 1 )"
"split string name into two parts from the right side by the separator '.', substitute parts for path and module, respectively.","split string name into two parts from right side by separator var0, substitute parts for path and module, respectively.","path , module = name . rsplit ( '.' , 1 )","path , module = name . rsplit ( var0 , 1 )"
path is an list containing path.,path is list containing path.,path = [ path ],path = [ path ]
"call the function force_text with an argument path, substitute the result for path.","call function var0 with argument path, substitute result for path.",path = force_text ( path ),path = var0 ( path )
"get the unicode representation of current working directory, join it and path into a string, substitute the result for path.","get var0 representation of current working directory, join it and path into string, substitute result for path.","path = join ( os . getcwdu ( ) , path )","path = join ( os . getcwdu ( ) , path )"
"remove elements under the 'path' key of the kwargs dictionary, if it exists substitute it for path, if not path is None.","remove elements under var0 key of var1 dict, if it exists substitute it for path, if not path is var2 ","path = kwargs . pop ( 'path' , None )","path = var1 . pop ( var0 , var2 )"
"call the function os.environ.get with 2 arguments: string 'PATH' and an empty string, split the result at the os.pathsep, substitute the result for path.","call function var0 with 2 arguments: string var1 and empty string, split result at var2 substitute result for path.","path = os . environ . get ( 'PATH' , '' ) . split ( os . pathsep )","path = var0 ( var1 , '' ) . split ( var2 )"
"join app_config.path and string 'management' into a file path, substitute it for path.","join var0 path and string var2 into file path, substitute it for path.","path = os . path . join ( app_config . path , 'management' )","path = os . path . join ( var0 . path , var2 )"
"substitute parts, without the first element, for path.","substitute parts var0 first element, for path.",path = parts [ 1 : ],path = parts [ 1 : ]
"strip path of all leading '/' and '\\' characters, substitute the result for path.","strip path of all leading var0 and var1 characters, substitute result for path.",path = path . lstrip ( '/' ) . lstrip ( '\\' ),path = path . lstrip ( var0 ) . lstrip ( '\\' )
"substitute path_override for path if path_override is not None, otherwise substitute request.path for path",substitute var0 for path if var0 is not var4 otherwise substitute var5 for path,path = path_override if path_override is not None else request . path,path = var0 if var0 is not var4 else var5
"call the safe_join function with arguments self.location and name, substitute it for path.","call var0 function with arguments var1 and name, substitute it for path.","path = safe_join ( self . location , name )","path = var0 ( var1 , name )"
"call the self.path function with argument path, substitute it for path.","call var0 function with argument path, substitute it for path.",path = self . path ( path ),path = var0 ( path )
"convert path to a string, substitute the result for path.","convert path to string, substitute result for path.",path = str ( path ),path = str ( path )
path_info is a character '/'.,var0 is character var1.,path_info = '/',var0 = var1
"call the get_bytes_from_wsgi function with environ, string 'PATH_INFO' and empty strings as arguments, substitute the result for path_info.","call var0 function with environ, string var2 and empty strings as arguments, substitute result for var3 ","path_info = get_bytes_from_wsgi ( environ , 'PATH_INFO' , '' )","var3 = var0 ( environ , var2 , '' )"
"call the function get_bytes_from_wsgi with environ, string 'PATH_INFO' and character '/' as arguments, substitute the result for path_info.","call function var0 with environ, string var2 and character var3 as arguments, substitute result for var4 ","path_info = get_bytes_from_wsgi ( environ , 'PATH_INFO' , '/' )","var4 = var0 ( environ , var2 , '/' )"
"call the get_path_info function with environ as argument, substitute the result for path_info.","call var0 function with environ as argument, substitute result for var1 ",path_info = get_path_info ( environ ),var1 = var0 ( environ )
"slice root starting from the prefix_length index to the end, substitute it for path_rest.","slice root starting from var0 index to end, substitute it for var1 ",path_rest = root [ prefix_length : ],var1 = root [ var0 : ]
pathext is an list containing an empty string.,var0 is list containing empty string.,pathext = [ '' ],var0 = [ '' ]
"call the method os.environ.get with 2 arguments: strings 'PATHEXT' and '.COM;.EXE;.BAT;.CMD', split the result at os.pathsep, substitute it for pathext.","call method var0 with 2 arguments: strings var1 and var2, split result at var7 substitute it for var8 ","pathext = os . environ . get ( 'PATHEXT' , '.COM;.EXE;.BAT;.CMD' ) . split ( os . pathsep )","var8 = var0 ( var1 , '.var3;.var4;.var5;.var6' ) . split ( var7 )"
"paths is a list containing results of the function force_text called with an argument p, for every p in paths.","paths is list containing results of function var0 called with argument p, for every p in paths.",paths = [ force_text ( p ) for p in paths ],paths = [ var0 ( p ) for p in paths ]
"PATTERN is a string  ""classdef< 'class' any+ ':'suite< any*funcdef< 'def' unifunc='__unicode__'parameters< '(' NAME ')' > any+ >any* > >"".",PATTERN is string var0.,PATTERN = '''     classdef< 'class' any+ ':'               suite< any*                      funcdef< 'def' unifunc='__unicode__'                               parameters< '(' NAME ')' > any+ >                      any* > >     ''',PATTERN = (    '     classdef< 'class' any+ ':'               suite< any*                      funcdef< 'def' unifunc='__unicode__'                               parameters< '(' NAME ')' > any+ >                      any* > >     '    )
"convert pattern to lowercase, substitute it for pattern.","convert pattern to lowercase, substitute it for pattern.",pattern = pattern . lower ( ),pattern = pattern . lower ( )
"call the function next_char with an argument iterator pattern, substitute the result for pattern_iter.","call function var0 with argument var1 pattern, substitute result for var2 ",pattern_iter = next_char ( iter ( pattern ) ),var2 = var0 ( iter ( pattern ) )
"append pattern into a list patterns, for every possibility, pattern and defaults in possibilities.","append pattern into list patterns, for every possibility, pattern and defaults in possibilities.","patterns = [ pattern for ( possibility , pattern , defaults ) in possibilities ]","patterns = [ pattern for possibility , pattern , defaults in possibilities ]"
"get attribute ""urlpatterns"" form the self.urlconf_module, substitute it for patterns, if the attribute doesnt exist,","get attribute var0 form self var2 substitute it for patterns, if attribute doesnt exist,","patterns = getattr ( self . urlconf_module , 'urlpatterns' , self . urlconf_module )","patterns = getattr ( self . var2 , 'urlpatterns' , self . var2 )"
"call the method text.encode with argument utf8_charset.output_charset, substitute the result for payload.",call method var0 with argument utf8_charset var2 substitute result for payload.,payload = text . encode ( utf8_charset . output_charset ),payload = var0 ( utf8_charset . var2 )
"move integer 1 left for 50 bits, substitute the result for PB.","move integer 1 left for 50 bits, substitute result for var0 ",PB = 1 << 50,var0 = 1 << 50
substitute value for the vale under the name key of the pdict dictionary.,substitute value for vale under name key of var0 dict.,pdict [ name ] = value,var0 [ name ] = value
substitute the result for key.   pdict is an empty dictionary.,substitute result for key var0 var1 is empty dict.,pdict = { },var1 = { }
"call the method extend with refs as argument, on the result call the pending_references.setdefault method with refto and empty list as arguments.","call method extend with refs as argument, on result call var0 setdefault method with var1 and empty list as arguments.","pending_references . setdefault ( refto , [ ] ) . extend ( refs )","var0 . setdefault ( var1 , [ ] ) . extend ( refs )"
"call the method pending_references.setdefault with 2 arguments: refto and an empty list, extend the result with refs.","call method var0 setdefault with 2 arguments: var1 and empty list, extend result with refs.","pending_references . setdefault ( refto , [ ] ) . extend ( refs )","var0 . setdefault ( var1 , [ ] ) . extend ( refs )"
pending_references is a empty dictionary.,var0 is empty dict.,pending_references = { },var0 = { }
"add model to a set, substitute the result for known_models.   pending_references is an empty dictionary.","add model to set, substitute result for var0 var2 is empty dict.",pending_references = { },var2 = { }
substitute length of prefixed for pflen.,substitute length of prefixed for var0 ,pflen = len ( prefixed ),var0 = len ( prefixed )
"call the function lazy with 2 arguments: pgettext and six.text_type, substitute pgettext_lazy.",call function lazy with 2 arguments: var0 and six var2 substitute var3 ,"pgettext_lazy = lazy ( pgettext , six . text_type )","var3 = lazy ( var0 , six . var2 )"
"call the function allow_lazy with an argument phone2numeric, substitute the result for phone2numeric.",call function var0 with argument var1 substitute result for var1 ,phone2numeric = allow_lazy ( phone2numeric ),var1 = var0 ( var1 )
substitute None for pickled.,substitute var0 for pickled.,pickled = None,pickled = var0
"call the function pickle.dumps with value and pickle.HIGHEST_PROTOCOL as the arguments, substitute the result for pickled.","call function var0 with value and pickle var1 as arguments, substitute result for pickled.","pickled = pickle . dumps ( new_value , pickle . HIGHEST_PROTOCOL )","pickled = var0 ( new_value , pickle . var1 )"
"call the method pickle.dumps with value and pickle.HIGHEST_PROTOCOL as arguments, substitute it for pickled.","call method var0 with value and pickle var1 as arguments, substitute it for pickled.","pickled = pickle . dumps ( value , pickle . HIGHEST_PROTOCOL )","pickled = var0 ( value , pickle . var1 )"
call the pickle.dumps function with value and pickle.HIGHEST_PROTOCOL as arguments.,call var0 function with value and pickle var1 as arguments.,"pickled = pickle . dumps ( value , pickle . HIGHEST_PROTOCOL )","pickled = var0 ( value , pickle . var1 )"
"call the function pickle.dumps with value and pickle.HIGHEST_PROTOCOL as the arguments, substitute the result for pickled.","call function var0 with value and pickle var1 as arguments, substitute result for pickled.","pickled = pickle . dumps ( value , pickle . HIGHEST_PROTOCOL )","pickled = var0 ( value , pickle . var1 )"
substitute value under the key key of self._cache dictionary for pickled.,substitute value under key key of var0 dict for pickled.,pickled = self . _cache [ key ],pickled = var0 [ key ]
pid is integer 1.,pid is integer 1.,pid = 1,pid = 1
"call the function os.getpid, substitute it for pid.",call function var0 substitute it for pid.,pid = os . getpid ( ),pid = var0 ( )
increment piece by firs element of elt.,increment piece by firs element of var0 ,piece += elt [ 0 ],piece += var0 [ 0 ]
"join elements of list source from index last to the end into a string, substitute it for piece.","join elements of list source from index last to end into string, substitute it for piece.",piece = '' . join ( source [ last : ] ),piece = '' . join ( source [ last : ] )
"join source list elements from last till pos indexes into a string, substitute the result for piece.","join source list elements from last till pos indexes into string, substitute result for piece.",piece = '' . join ( source [ last : pos ] ),piece = '' . join ( source [ last : pos ] )
"get attribute piece of the self object, call it and use the result as an argument for the call to the function force_text,","get attribute piece of self object, call it and use result as argument for call to function var0 ","pieces . append ( force_text ( getattr ( self , piece ) ( ) ) )","pieces . append ( var0 ( getattr ( self , piece ) ( ) ) )"
"call the method re_escaped.sub with 2 arguments: raw string '\1' and piece, append the result to pieces.","call the method re_escaped.sub with 2 arguments: raw string '\1' and piece, append the result to pieces.","pieces . append ( re_escaped . sub ( r'\1' , piece ) )","pieces . append ( re_escaped . sub ( r'\1' , piece ) )"
pieces is an empty list.,pieces is empty list.,pieces = [ ],pieces = [ ]
"convert lang_string to lowercase, split by the result string accept_language_re, substitute the result for pieces.","convert var0 to lowercase, split by result string var1 substitute result for pieces.",pieces = accept_language_re . split ( lang_string . lower ( ) ),pieces = var1 . split ( var0 . lower ( ) )
and self.model._meta.pk.name.   substitute the value under the pk_key key of the self.data dictionary for pk.,and var0 substitute value under var2 key of var3 dict for pk.,pk = self . data [ pk_key ],pk = var3 [ var2 ]
"call the function to_python with an argument pk, substitute the result for pk.",call function var0 with argument var1 substitute result for var1 ,pk = to_python ( pk ),var1 = var0 ( var1 )
substitute self.model._meta.pk for pk_field.,substitute var0 for var1 ,pk_field = self . model . _meta . pk,var1 = var0
"pk_key is a string ""%s-%s"", where '%s' is replaced with: result of the method self.add_prefix called with an argument i,","var0 is string var1 var2 var3 is replaced with: result of method self var5 called with argument i,","pk_key = '%s-%s' % ( self . add_prefix ( i ) , self . model . _meta . pk . name )","var0 = '%s-%s' % ( self . var5 ( i ) , self . model . _meta . pk . name )"
substitute form.instance.pk for pk_value.,substitute var0 for var1 ,pk_value = form . instance . pk,var1 = var0
get self.instance,get var0,"pk_value = getattr ( self . instance , self . fk . rel . field_name )","pk_value = getattr ( var0 , self . fk . rel . field_name )"
pk_value is None.,var0 is var1 ,pk_value = None,var0 = var1
"call the method self.get_queryset, substitute field pk under the result at the index index for pk_value.",call method self var1 substitute field var2 under result at index index for var3 ,pk_value = self . get_queryset ( ) [ index ] . pk,var3 = self . var1 ( ) [ index ] . var2
"concatenate string 'templates/' and template_name, substitute the result for pkg_name.",concatenate string var0 and var1 substitute result for var3 ,pkg_name = 'templates/' + template_name,var3 = var0 + var1
"get the value under the 'primary_keys' key of the options dictionary, substitute the result for pks.","get value under var0 key of options dict, substitute result for var1 ",pks = options . get ( 'primary_keys' ),var1 = options . get ( var0 )
"substitute the result for qs.   pks is a set containing results of the call to the function force_text with an argument, key attribute of the o object,","substitute result for qs var0 var1 is set containing results of call to function var2 with argument, key attribute of o object,","pks = set ( force_text ( getattr ( o , key ) ) for o in qs )","var1 = set ( var2 ( getattr ( o , key ) ) for o in qs )"
"get executor.loader.graph.nodes list item at the index of the first element of targets list, get the value under the 'backwards' key of options dictionary, put previous two elements is a tuple, tuple is contained in a plan list.","get executor.loader.graph.nodes list item at index of first element of targets list, get value under var0 key of options dict, put previous two elements is tuple, tuple is contained in plan list.","plan = [ ( executor . loader . graph . nodes [ targets [ 0 ] ] , options [ 'backwards' ] ) ]","plan = [ ( executor . loader . graph . nodes [ targets [ 0 ] ] , options [ var0 ] ) ]"
"call the method executor.migration_plan wiht return value of te method executor.loader.graph.leaf_nodes as argument, substitute it for plan.","call method executor var1 var2 return value of te method executor.loader.graph var4 as argument, substitute it for plan.",plan = executor . migration_plan ( executor . loader . graph . leaf_nodes ( ) ),plan = executor . var1 ( executor . loader . graph . var4 ( ) )
"call the executor.migration_plan method with targets as the argument, substitute the result for plan.","call executor var1 method with targets as argument, substitute result for plan.",plan = executor . migration_plan ( targets ),plan = executor . var1 ( targets )
substitute sys.platform for plat.,substitute var0 for plat.,plat = sys . platform,plat = var0
"calculate length of provided and increment it by one, substitute the result for plen.","calculate length of provided and increment it by one, substitute result for var0 ",plen = len ( provided ) + 1,var0 = len ( provided ) + 1
strip f of whitespaces and append it to plist.,strip f of var0 and append it to var1 ,plist . append ( f . strip ( ) ),var1 . append ( f . strip ( ) )
"append line to bytes string ';', use it as an argument for the call to the function _parse_header_params, substitute the result for plist.","append line to bytes string var0, use it as argument for call to function var1 substitute result for var2 ",plist = _parse_header_params ( b';' + line ),var2 = var1 ( bvar0 + line )
plist is an empty list.,var0 is empty list.,plist = [ ],var0 = [ ]
"append string '%%(%s)s' to plural, where '%s' is replaced with t.contents.",append string var0 to plural var1 var2 is replaced with var3 ,plural . append ( '%%(%s)s' % t . contents ),plural . append ( var0 % var3 )
append contents to plural.,append contents to plural.,plural . append ( contents ),plural . append ( contents )
plural is an empty list.,plural is empty list.,plural = [ ],plural = [ ]
"call the method m.group with an argument string 'value', use the result as an argument for the call to the force_str,","call method var0 with argument string var1, use result as argument for call to var2 ",plural_form_line = force_str ( m . group ( 'value' ) ),plural_form_line = var2 ( m . group ( var1 ) )
"call the method re.compile with 2 arguments: raw string '^(?P<value>""Plural-Forms.+?\\n"")\s*$',","call method var0 with 2 arguments: raw string var1,","plural_forms_re = re . compile ( r'^(?P<value>'Plural-Forms.+?\\n')\s*$' , re . MULTILINE | re . DOTALL )","plural_forms_re = var0(r'^(?P<value>'Plural-Forms.+?\\n')\s*$', re.MULTILINE | re.DOTALL)"
"call the function re.compile with an argument raw string ""^\s*plural$"", substitute the result for plural_re.","call function var0 with argument raw string var1, substitute result for var2 ",plural_re = re . compile ( r'''^\s*plural$''' ),var2 = var0 ( '^\\s*plural$' )
"call the function plural_re.match with an argument t.contents, substitute the result for pluralmatch.",call function var0 match with argument var2 substitute result for var3 ,pluralmatch = plural_re . match ( t . contents ),var3 = var0 . match ( var2 )
po_path is a string containing joined directory path from dirpath and f.,var0 is string containing joined directory path from var1 and var2,"po_path = os . path . join ( dirpath , f )","var0 = os . path . join ( var1 , f )"
"convert self.domain into a string and append string '.po' to it, join basedir and result in file path, substitute it for pofile.","convert var0 into string and append string var1 to it, join var2 and result in file path, substitute it for var3 ","pofile = os . path . join ( basedir , '%s.po' % str ( self . domain ) )","var3 = os . path . join ( var2 , '%s.po' % str ( var0 ) )"
substitute complain for pop.,substitute complain for pop.,pop = complain,pop = complain
pop_context is boolean False.,var0 is boolean var1 ,pop_context = False,var0 = var1
pop_context is boolean True.,var0 is boolean var1 ,pop_context = True,var0 = var1
pos is equal to integer 0.,pos is equal to integer 0.,pos = 0,pos = 0
pos and last are integer 0.,pos and last are integer 0.,pos = last = 0,pos = last = 0
"call the method m.end with an argument integer 0, substitute the result for pos.","call method var0 with argument integer 0, substitute result for pos.",pos = m . end ( 0 ),pos = var0 ( 0 )
"get the position of the self.file file pointer, substitute it for pos.","get position of var0 file pointer, substitute it for pos.",pos = self . file . tell ( ),pos = var0 . tell ( )
"multiply 10 to the power of 200, with itself, substitute the result for pos_inf.","multiply 10 to power of 200, with var0 substitute result for var1 ",pos_inf = 1e200 * 1e200,var1 = 1e+200 * 1e+200
"original_lookup, RemovedInDjango20Warning and stacklevel set to integer 3.   call the method self.reverse_dict.getlist with an argument lookup_view, substitute the result for possibilities.",var0 var1 and var2 set to integer 3 var3 call method self var5 getlist with argument var6 substitute result for possibilities.,possibilities = self . reverse_dict . getlist ( lookup_view ),possibilities = self . var5 . getlist ( var6 )
"for every x in upload_handlers if x.chunk_size is true, append x.chunk_size to a list, substitute the result for possible_sizes.","for every x in var0 if x var3 is true, append x var3 to list, substitute result for var5 ",possible_sizes = [ x . chunk_size for x in upload_handlers if x . chunk_size ],var5 = [ x . var3 for x in var0 if x . var3 ]
post is a string '<could not parse>'.,post is string var0.,post = '<could not parse>',post = var0
"get is a tuple containing elements generated by the call to the function pformat with an argument POST_override,",get is tuple containing elements generated by call to function var0 with argument var1 ,post = ( pformat ( POST_override ) if POST_override is not None else pformat ( request . POST ) ),post = var0 ( var1 ) if var1 is not None else var0 ( request . POST )
_get_post is a getter function and _set_post is a setter function for POST attribute of this class.,var0 is var1 function and var2 is setter function for var3 attribute of var4 class.,"POST = property ( _get_post , _set_post )","var3 = property ( var0 , var2 )"
"for every f in opts.local_fields that has an 'post_create_sql' attribute, append f to a list, substitute the resulting list for post_sql_fields.","for every f in opts var1 var2 has var3 attribute, append f to list, substitute resulting list for var4 ","post_sql_fields = [ f for f in opts . local_fields if hasattr ( f , 'post_create_sql' ) ]","var4 = [ f for f in opts . var1 if hasattr ( f , var3 ) ]"
"join into a file path: path and string '%s.pot', where '%s' is replaced with self.domain converted into a string, substitute the result for pot_path.","join into file path: path and string var0 var1 var2 is replaced with var3 converted into string, substitute result for var4 ","pot_path = os . path . join ( path , '%s.pot' % str ( self . domain ) )","var4 = os . path . join ( path , var0 % str ( var3 ) )"
"join into a path: path and string '%s.pot', where '%s' is replaced with self.domain converted into a string.",join into path: path and string var0 var1 var2 is replaced with var3 converted into string.,"potfile = os . path . join ( path , '%s.pot' % str ( self . domain ) )","potfile = os . path . join ( path , var0 % str ( var3 ) )"
"join into a file path: self.locale_dir and string '.pot' appended to domain converted to string, substitute it for potfile.","join into file path: self var1 and string var2 appended to domain converted to string, substitute it for var3 ","potfile = os . path . join ( self . locale_dir , '%s.pot' % str ( domain ) )","var3 = os . path . join ( self . var1 , '%s.pot' % str ( domain ) )"
append potfile to potfiles.,append var0 to var1 ,potfiles . append ( potfile ),var1 . append ( var0 )
potfiles is an empty list.,var0 is empty list.,potfiles = [ ],var0 = [ ]
"call the method self.build_potfiles, substitute the result for potfiles.",call method self var1 substitute result for potfiles.,potfiles = self . build_potfiles ( ),potfiles = self . var1 ( )
"sum absolute p with units an integer 1, substitute the result for prec.","sum absolute p with units integer 1, substitute result for var0 ",prec = abs ( p ) + units + 1,var0 = abs ( p ) + units + 1
"call the method self.split_leading_dir with an argument path, assign the result to prefix and rest, respectively.","call method self var1 with argument path, assign result to prefix and rest, respectively.","prefix , rest = self . split_leading_dir ( path )","prefix , rest = self . var1 ( path )"
append '/' to prefix.,append var0 to prefix.,prefix += '/',prefix += var0
replace '%s' in string 'django_%s_template_' with self.app_or_project.,replace var0 in string var1 with self var5 ,prefix = 'django_%s_template_' % self . app_or_project,prefix = var1 % self . var5
"replace '%s' in string 'django_%s_template_' with self.app_or_project, substitute it for prefix.",replace var0 in string var1 with self var5 substitute it for prefix.,prefix = 'django_%s_template_' % self . app_or_project,prefix = var1 % self . var5
"substitute value under the 'prefix' key of dictionary d, substitute it for prefix.","substitute value under var0 key of dict d, substitute it for prefix.",prefix = d [ 'prefix' ],prefix = d [ var0 ]
"call the function get_script_prefix, substitute the result for prefix.",call function var0 substitute result for prefix.,prefix = get_script_prefix ( ),prefix = var0 ( )
"call the method self.add_prefix with an argument fieldname, substitute it for prefix.",call method self var1 with argument var2 substitute it for prefix.,prefix = self . add_prefix ( fieldname ),prefix = self . var1 ( var2 )
substitute settings.MEDIA_URL for prefix.,substitute settings var0 for prefix.,prefix = settings . MEDIA_URL,prefix = settings . var0
substitute settings.STATIC_URL for prefix.,substitute settings var0 for prefix.,prefix = settings . STATIC_URL,prefix = settings . var0
increment length of template_dir by one and substitute it for prefix_length.,increment length of var0 by one and substitute it for var1 ,prefix_length = len ( template_dir ) + 1,var1 = len ( var0 ) + 1
"call the function urlquote with an argument _prefix, use the result as an argument for the call to the normalize function,","call function var0 with argument var1 use result as argument for call to normalize function,","prefix_norm , prefix_args = normalize ( urlquote ( _prefix ) ) [ 0 ]","prefix_norm , prefix_args = normalize ( var0 ( var1 ) ) [ 0 ]"
"append '.' to name, substitute the result for prefixed.","append var0 to name, substitute result for prefixed.",prefixed = name + '.',prefixed = name + var0
"call the method self.add_prefix with an argument name, substitute the result for prefixed_name.","call method self var1 with argument name, substitute result for var2 ",prefixed_name = self . add_prefix ( name ),var2 = self . var1 ( name )
"substitute integers 0, 1, 2 and 3 for PREV, NEXT, KEY and RESULT, respectivley.","substitute integers 0, 1, 2 and 3 for var0 var1 var2 and var3 var4 ","PREV , NEXT , KEY , RESULT = 0 , 1 , 2 , 3","var0 , var1 , var2 , var3 = 0 , 1 , 2 , 3"
"for every s_opt in parser.option_list.   for every x in slice of cwords from the second element to the element at the cword decremented by 1 index,","for every var0 in parser var2 for every x in slice of var4 from second element to element at var5 var6 by 1 index,",prev_opts = [ x . split ( '=' ) [ 0 ] for x in cwords [ 1 : cword - 1 ] ],prev_opts = [ x . split ( '=' ) [ 0 ] for x in var4 [ 1 : var5 - 1 ] ]
primary_keys is an empty list.,var0 is empty list.,primary_keys = [ ],var0 = [ ]
"split string pks by ',', substitute the result for primary_keys.","split string var0 by var1, substitute result for var2 ","primary_keys = pks . split ( ', ' )","var2 = var0 . split ( ', ' )"
"filter all the subcommands element through the lambda function with an argument x, that evaluates the method x.startswith,",filter all var0 element through lambda function with argument x var1 evaluates method var2 ,"print ( ' ' . join ( sorted ( filter ( lambda x : x . startswith ( curr ) , subcommands ) ) ) )","print ( ' ' . join ( sorted ( filter ( lambda x : var2 ( curr ) , var0 ) ) ) )"
"append flup_module to string ""Can't import flup."", print it to the standard output.","append var0 to string var2, print it to standard output.",print ( 'Can't import flup.' + flup_module ),print('Can't import flup.' + var0)
"print a string ""In the tar file %s the member %s is invalid: %s"", where '%s' is substituted with: name, member.name and exc, respectively.",print string var0 var1 var2 is substituted with: name var3 and var4 respectively.,"print ( 'In the tar file %s the member %s is invalid: %s' % ( name , member . name , exc ) )","print ( 'In the tar file %s the member %s is invalid: %s' % ( name , var3 , var4 ) )"
"replace '%s' in string ""Running post-migrate handlers for application %s"" with app_config.label, print it to the standard output.","replace var0 in string var1 with var4 label, print it to standard output.",print ( 'Running post-migrate handlers for application %s' % app_config . label ),print ( 'var2 post-migrate handlers for application %s' % var4 . label )
"replace '%s' in string ""Running pre-migrate handlers for application %s"" with app_config.label, print it to the standard output.","replace var0 in string var1 with var5 label, print it to standard output.",print ( 'Running pre-migrate handlers for application %s' % app_config . label ),print ( 'var2 var3-migrate handlers for application %s' % var5 . label )
print FASTCGI_HELP to the standard output.,print var0 to standard output.,print ( FASTCGI_HELP ),print ( var0 )
print message to the standard output.,print message to standard output.,print ( message ),print ( message )
print opt_label to the standard output.,print var0 to standard output.,print ( opt_label ),print ( var0 )
"get attribute 'print' from the moves.builtins object, if it exists substitute it for print_, if not print_ is None.","get attribute var0 from var1 object, if it exists substitute it for var2 if not var2 is var4 ","print_ = getattr ( moves . builtins , 'print' , None )","var2 = getattr ( var1 , var0 , var4 )"
priority is floating point number 1.0.,priority is floating point number 1.0.,priority = 1.0,priority = 1.0
"convert priority into a floating point integer, substitute it for priority.","convert priority into floating point integer, substitute it for priority.",priority = float ( priority ),priority = float ( priority )
"append field to problem_fields list for every model in apps.get_models with argument kwargs dictionary, only if app_configs is None,","append field to var0 list for every model in apps var3 with argument var4 dict, only if var5 is var7 ","problem_fields = [ field for model in apps . get_models ( ** kwargs ) if app_configs is None or model . _meta . app_config in app_configs for field in model . _meta . local_fields if isinstance ( field , models . BooleanField ) and not field . has_default ( ) ]","var0 = [ field for model in apps . var3 ( ** var4 ) if var5 is var7 or model . _meta . app_config in var5 for field in model . _meta . local_fields if isinstance ( field , models . BooleanField ) and not field . has_default ( ) ]"
"get the value under the 'all' key of the options dictionary, substitute it for process_all.","get value under var0 key of options dict, substitute it for var1 ",process_all = options . get ( 'all' ),var1 = options . get ( var0 )
append func to processors.,append var0 to processors.,processors . append ( func ),processors . append ( var0 )
processors is an empty tuple.,processors is empty tuple.,processors = ( ),processors = ( )
processors is an empty list.,processors is empty list.,processors = [ ],processors = [ ]
convert processors into a tuple and substitute it for processors.,convert processors into tuple and substitute it for processors.,processors = tuple ( processors ),processors = tuple ( processors )
program is string 'msgfmt',program is string var0,program = 'msgfmt',program = var0
program_options is list containing string '--check-format'.,var0 is list containing string var1.,program_options = [ '--check-format' ],var0 = [ var1 ]
"remove the elements from the 'name' and 'dictionary' keys of the options dictionary, substitute them for project_name and target, respectively.","remove elements from var0 and var1 keys of options dict, substitute var2 for var3 and target, respectively.","project_name , target = options . pop ( 'name' ) , options . pop ( 'directory' )","var3 , target = options . pop ( var0 ) , options . pop ( 'directory' )"
"split settings.SETTINGS_MODULE by '.' character, substitute the first element of the result for project_name.","split settings var0 by var2 character, substitute first element of result for var3 ",project_name = settings . SETTINGS_MODULE . split ( '.' ) [ 0 ],var3 = settings . var0 . split ( var2 ) [ 0 ]
"get value under the 'propagate' key of the config dictioanry, if it exists substitute it for propagate, if not propagate is None.","get value under var0 key of var1 var2 if it exists substitute it for propagate, if not propagate is var3 ","propagate = config . get ( 'propagate' , None )","propagate = var1 . get ( var0 , var3 )"
"remove config dictionary element under '.' key, if it exists substitute it for props, if not, props is None.","remove var0 dict element under var1 key, if it exists substitute it for props, if not, props is var2 ","props = config . pop ( '.' , None )","props = var0 . pop ( var1 , var2 )"
convert provided into a list and substitute it for provided.,convert provided into list and substitute it for provided.,provided = list ( provided ),provided = list ( provided )
"call the function lazy with 2 arguments: func and resultclass, call the result with an argument, unpacked dictionary kwargs,","call function lazy with 2 arguments: var0 and var1 call result with argument, unpacked dict var2 ","proxy = lazy ( func , resultclass ) ( ** kwargs )","proxy = lazy ( var0 , var1 ) ( ** var2 )"
"call the function lazy with 2 arguments: lambda function with unpacked dictionary kwargs as an argument and return value an instance of NumberAwareString class and NumberAwareString, call the result with an argument unpacked dictionary kwargs, substitute the result for proxy.",call function lazy with 2 arguments: lambda function with unpacked dict var0 as argument and return value instance of var2 class and var2 call result with argument unpacked dict var0 substitute result for proxy.,"proxy = lazy ( lambda ** kwargs : NumberAwareString ( ) , NumberAwareString ) ( ** kwargs )","proxy = lazy ( lambda ** var0 : var2 ( ) , var2 ) ( ** var0 )"
"call the method block_context.pop with an argument self.name, assign the result to push and block.",call method var0 pop with argument var2 assign result to push and block.,push = block = block_context . pop ( self . name ),push = block = var0 . pop ( var2 )
substitute c_void_p for PVOID.,substitute var0 for var2 ,PVOID = c_void_p,var2 = var0
"if first element of sys.version_info equals integer 2, PY2 is boolean True, otherwise it is boolean False.",if first element of sys var1 equals integer 2 var2 is boolean var3 otherwise it is boolean var4 ,PY2 = sys . version_info [ 0 ] == 2,var2 = sys . var1 [ 0 ] == 2
"if first element of sys.version_info equals integer 3, PY3 is boolean True, otherwise it is boolean False.",if first element of sys var1 equals integer 3 var2 is boolean var3 otherwise it is boolean var4 ,PY3 = sys . version_info [ 0 ] == 3,var2 = sys . var1 [ 0 ] == 3
"call the function os.path.expanduser with an argument pythonrc, substitute the result for pythonrc.",call function os.path.expanduser with argument var0 substitute result for var0 ,pythonrc = os . path . expanduser ( pythonrc ),var0 = os . path . expanduser ( var0 )
pytz is None.,var0 is var1 ,pytz = None,var0 = var1
substitute connection.ops.quote_name for qn.,substitute connection.ops var1 for var2 ,qn = connection . ops . quote_name,var2 = connection . ops . var1
"call the method f.value_from_object with an argument instance, substitute the result for qs.","call method f var1 with argument instance, substitute result for qs.",qs = f . value_from_object ( instance ),qs = f . var1 ( instance )
"call the method pk.rel.to._default_manager.get_queryset, substitute the result for qs.",call method pk.rel.to._default_manager var1 substitute result for qs.,qs = pk . rel . to . _default_manager . get_queryset ( ),qs = pk . rel . to . _default_manager . var1 ( )
"call the method qs.order_by with argument self.model._meta.pk.name, substitute the result for qs.",call method qs var1 with argument var2 substitute result for qs.,qs = qs . order_by ( self . model . _meta . pk . name ),qs = qs . var1 ( var2 )
"call the method qs.using with an argument form.instance._state.db, substitute the result for qs.",call method var0 with argument var1 substitute result for qs.,qs = qs . using ( form . instance . _state . db ),qs = var0 ( var1 )
"call the method queryset.filter with an argument unpacked dictionary containing self.instance for self.fk.name, substitute the result for qs.",call method var0 with argument unpacked dict containing var1 for var2 substitute result for qs.,qs = queryset . filter ( ** { self . fk . name : self . instance } ),qs = var0 ( ** { var2 : var1 } )
"call the method queryset.none, substitute it for qs.",call method var0 substitute it for qs.,qs = queryset . none ( ),qs = var0 ( )
call the method self.model._default_manager.get_queryset with an argument qs.,call method self.model._default_manager var1 with argument qs.,qs = self . model . _default_manager . get_queryset ( ),qs = self . model . _default_manager . var1 ( )
substitute self.queryset for qs.,substitute var0 for qs.,qs = self . queryset,qs = var0
"code set to string 'invalid_pk_value and params with an entry: pk for 'pk'.   call the method self.queryset.filter with an argument, unpacked dictionary with an entry: value for string '__in' appended to key,","code set to string var0pkvar1__in' appended to key,",qs = self . queryset . filter ( ** { '%s__in' % key : value } ),qs = var3 ( ** { ( '%s__in' % key ) : value } )
append ch to quant.,append var0 to var1 ,quant . append ( ch ),var1 . append ( var0 )
quant is an empty list.,var0 is empty list.,quant = [ ],var0 = [ ]
remove last element for quant.,remove last element for var0 ,quant = quant [ : - 1 ],var0 = var0 [ : - 1 ]
"call the method query.items, substitute the result for query.",call method var0 substitute result for query.,query = query . items ( ),query = var0 ( )
"call the method query.lists, substitute the result for query.",call method var0 substitute result for query.,query = query . lists ( ),query = var0 ( )
"call the method query_string.decode, substitute the result for query_string.","call method var0 decode, substitute result for var0 ",query_string = query_string . decode ( ),var0 = var0 . decode ( )
"call the method objects.using with an argument using, call the method order_by on the result with an argument model._meta.pk.name,","call method var0 with argument using, call method var1 on result with argument var2 ",queryset = objects . using ( using ) . order_by ( model . _meta . pk . name ),queryset = var0 ( using ) . var1 ( var2 )
"queryset is an property object of this class, with _get_queryset getter and _set_queryset setter functions.","var0 is property object of var1 class, with var2 var3 and var4 setter functions.","queryset = property ( _get_queryset , _set_queryset )","var0 = property ( var2 , var4 )"
"call the method queryset.filter with an argument pk__in set to primary_keys, substitute the result for queryset.",call method var0 with argument var2 set to var3 substitute result for var1 ,queryset = queryset . filter ( pk__in = primary_keys ),var1 = var0 ( var2 = var3 )
substitute self.model._default_manager for queryset.,substitute var0 for var1 ,queryset = self . model . _default_manager,var1 = var0
substitute Paginator for QuerySetPaginator.,substitute var0 for var1 ,QuerySetPaginator = Paginator,QuerySetvar0 = var0
questioner is an instance of a InteractiveMigrationQuestioner class.,questioner is instance of var0 class.,questioner = InteractiveMigrationQuestioner ( ),questioner = var0 ( )
"questioner is an instance of a InteractiveMigrationQuestioner class, created with an argument: defaults set to dictionary with entry:","questioner is instance of var0 class, created with argument: defaults set to dict with entry:",questioner = MigrationQuestioner ( defaults = { 'ask_merge' : True } ),questioner = MigrationQuestioner ( defaults = { 'ask_merge' : True } )
"if not, shutdown_message is an empty string.   if sys.platform equals string win32', substitute string 'CTRL-BREAK' for quit_command, if not substitute string 'CONTROL-C' for quit_command.",if not var0 is empty string var2 if var3 equals string win32var5CTRL-BREAKvar9CONTROL-C' for var10 ,quit_command = 'CTRL-BREAK' if sys . platform == 'win32' else 'CONTROL-C',var10 = 'CTRL-BREAK' if var3 == 'var4' else 'CONTROL-C'
substitute first element of s for quote.,substitute first element of s for quote.,quote = s [ 0 ],quote = s [ 0 ]
"decrement l by integer 1, multiply it with hlen, subtract the result from dklen, substitute the result for r.","decrement l by integer 1, multiply it with var0 subtract result from var1 substitute result for var2",r = dklen - ( l - 1 ) * hlen,r = var1 - ( l - 1 ) * var0
call the method o.isoformat substitute the result for r.,call method var0 substitute result for var1,r = o . isoformat ( ),r = var0 ( )
"cut the last 6 elemetns from r, append character 'Z' to it, substitute the result for r.","cut last 6 var0 from var2 append character var1 to it, substitute result for var2",r = r [ : - 6 ] + 'Z',r = r [ : - 6 ] + var1
substitute first 12 elements of r for r.,substitute first 12 elements of r for var0,r = r [ : 12 ],r = r [ : 12 ]
set the variable r to a random integer between 1 and 255 minus 6,set variable r to random integer between 1 and 255 minus 6,"r = random . randint ( 1 , 255 - 6 )","r = random . randint ( 1 , 255 - 6 )"
raise the exception.,raise exception.,raise,raise
re raise an exception.,re raise exception.,raise,raise
"where '%(app_label)s' is replaced for obj.object._meta.app_label, '%(object_name)s' is replaced with obj.object._meta.object_name,   '%(pk)s' is replaced with obj.object.pk and '%(error_msg)s' is replaced with result of the function force_text with an argument e.   raise an exceptions",var0 var1 is replaced for var2 var3 is replaced with obj.object._meta var5 var10 is replaced with var12 and var13 is replaced with result of function var16 with argument e var8 raise exceptions,raise,raise
"raise an exception,","raise exception,",raise,raise
"if it is not equal to stat.S_IREAD,   raise an exception.",if it is not equal to var0 var1 raise exception.,raise,raise
"rais an AppRegistryNotReady exception with an argument string ""The translation infrastructure cannot be initialized before the """,var0 var1 exception with argument string var3,raise AppRegistryNotReady (  'The translation infrastructure cannot be initialized before the '  'apps registry is ready. Check that you don't make non-lazy '  'gettext calls at import time.' ),raise var1( 'The translation infrastructure cannot be initialized before the '  'apps registry is ready.Check that you don't make non-lazy '  'gettext calls at import time.')
"raise AttributeError exception,","raise var0 exception,",raise AttributeError,raise var0
raise an AttributeError exception.,raise var0 exception.,raise AttributeError,raise var0
"raise an AttributeError exception with an argument string: ""'%s' object has no attribute 'cleaned_data'"",","raise var0 exception with argument string: var2,",raise AttributeError ( ''%s' object has no attribute 'cleaned_data'' % self . __class__ . __name__ ),raise var0(''%s' object has no attribute 'cleaned_data'' % self.__class__.__name__)
"raise an AttributeError exception with an argument string: ""'%s' object has no attribute 'ordered_forms'"",","raise var0 exception with argument string: var2,",raise AttributeError ( ''%s' object has no attribute 'ordered_forms'' % self . __class__ . __name__ ),raise var0(''%s' object has no attribute 'ordered_forms'' % self.__class__.__name__)
"raise an AttributeError with an argument string ""%s could not be imported "", formated with self.name.","raise var0 with argument string var2, formated with var3 ",raise AttributeError ( '%s could not be imported ' % self . name ),raise var0 ( '%s could not be imported ' % var3 )
"raise an AttributeError with an argument string ""no such move, %r"", formated with a tuple with an element name.","raise var0 with argument string var2, formated with tuple with element name.","raise AttributeError ( 'no such move, %r' % ( name , ) )","raise var0 ( 'no such move, %r' % ( name , ) )"
"raise an AttributeError with an argument string ""This %s instance has no `content` attribute. ""Use `streaming_content` instead."",","raise var0 with argument string var2Use `streaming_content` instead."",",raise AttributeError ( 'This %s instance has no `content` attribute. ' 'Use `streaming_content` instead.' % self . __class__ . __name__ ),raise var0 ( 'This %s instance has no `content` attribute.var3 `streaming_content` instead.' % self . __class__ . __name__ )
"raise an AttributeError exception with an argument string ""This method is available only on the view class."".",raise var0 exception with argument string var2.,raise AttributeError ( 'This method is available only on the view class.' ),raise var0 ( 'This method is available only on the view class.' )
"raise an AttributeError with an argument string ""This QueryDict instance is immutable"".",raise var0 with argument string var2.,raise AttributeError ( 'This QueryDict instance is immutable' ),raise var0 ( 'This QueryDict instance is immutable' )
"raise an AttributeError exception with string ""Unable to determine the file's size."" as argument.",raise var0 exception with string var2 as argument.,raise AttributeError ( 'Unable to determine the file's size.' ),raise var0('Unable to determine the file's size.')
"raise an AttributeError exception with an argument string ""You cannot set content to a 304 (Not Modified) response"".",raise var0 exception with argument string var2.,raise AttributeError ( 'You cannot set content to a 304 (Not Modified) response' ),raise var0 ( 'You cannot set content to a 304(Not Modified) response' )
"raise an AttributeError exception with an argument string ""You cannot set the upload handlers after the upload has been processed."".",raise var0 exception with argument string var2.,raise AttributeError ( 'You cannot set the upload handlers after the upload has been processed.' ),raise var0 ( 'You cannot set the upload handlers after the upload has been processed.' )
raise an AttributeError with an argument attr.,raise var0 with argument var1 ,raise AttributeError ( attr ),raise var0 ( var1 )
raise an raise self.warning with an argument self.warning.,raise raise var0 with argument var0 ,raise AttributeError ( self . warning ),raise AttributeError ( var0 )
"raise an BadHeaderError exception  with argument string ""Header values can't contain newlines (got %r for header %r)"",","raise var0 exception with argument string var2,","raise BadHeaderError ( 'Header values can't contain newlines (got %r for header %r)' % ( val , name ) )","raise var0('Header values can't contain newlines(got %r for header %r)' %(val, name))"
"raise an BadHeaderError exception with an argument string ""Header values can't contain newlines (got %r)"", where '%r' is replaced with value.",raise var0 exception with argument string var2 var3 var4 is replaced with value.,raise BadHeaderError ( 'Header values can't contain newlines (got %r)' % value ),raise var0('Header values can't contain newlines(got %r)' % value)
"raise an BadSignature exception with an argument string 'No ""%s"" found in value', where '%s' is replaced by self.sep.",raise var0 exception with argument string var2 var3 var4 is replaced by var5 ,raise BadSignature ( 'No '%s' found in value' % self . sep ),raise var0 ( 'No var4 found in value' % var5 )
"raise an BadSignature exception with an argument string 'Signature ""%s"" does not match', where '%s' is replaced by sig.",raise var0 exception with argument string var2 var3 var4 is replaced by var5 ,raise BadSignature ( 'Signature '%s' does not match' % sig ),raise var0 ( 'Signature var4 does not match' % var5 )
"raise an base.DeserializationError exception with an argument string ""<%s> node has invalid model identifier: '%s'"",","raise base var0 exception with argument string var2,","raise base . DeserializationError (  '<%s> node has invalid model identifier: '%s''  % ( node . nodeName , model_identifier ) )","raise base.var0( '<%s> node has invalid model identifier: '%s''  %(node.nodeName, model_identifier))"
"raise an base.DeserializationError exception with an argument string ""<%s> node is missing the required '%s' attribute"",","raise base var0 exception with argument string var2,","raise base . DeserializationError (  '<%s> node is missing the required '%s' attribute'  % ( node . nodeName , attr ) )","raise base.var0( '<%s> node is missing the required '%s' attribute'  %(node.nodeName, attr))"
"raise an base.DeserializationError exception with string ""<field> node is missing the 'name' attribute"" as argument.",raise base var0 exception with string var2 as argument.,raise base . DeserializationError ( '<field> node is missing the 'name' attribute' ),raise base.var0('<field> node is missing the 'name' attribute')
"raise an base.DeserializationError exception with an argument string ""Invalid model identifier: '%s'"", where '%s' is replaced with model_identifier.",raise base var0 exception with argument string var2 var4 var3 is replaced with var5 ,raise base . DeserializationError ( 'Invalid model identifier: '%s'' % model_identifier ),raise base . var0 ( 'Invalid model identifier: var3' % var5 )
"raise an base.SerializationError exception with argument string ""Non-model object (%s) encountered during serialization"",","raise base var0 exception with argument string var2,",raise base . SerializationError ( 'Non-model object (%s) encountered during serialization' % type ( obj ) ),raise base . var0 ( 'Non-model object(%s) encountered during serialization' % type ( obj ) )
"raise an CommandError with an argument string ""AppCommand cannot handle app '%s' in legacy mode because it doesn't have a models module."", where '%s' is replaced by app_config.label.",raise var0 with argument string var2 var4 var3 is replaced by var5 label.,raise CommandError (  'AppCommand cannot handle app '%s' in legacy mode '  'because it doesn't have a models module.'  % app_config . label ),raise var0( 'AppCommand cannot handle app var3 in legacy mode '  'because it doesn't have a models module.'  % var5.label)
"raise an CommandError with an argument string ""Cache table '%s' could not be created.\nThe error was: %s."", replace '%s' with:","raise var0 with argument string var2, replace var3 with:","raise CommandError (  'Cache table '%s' could not be created.\nThe error was: %s.' %  ( tablename , force_text ( e ) ) )","raise var0 ( '''Cache table var3 could not be created.The error was: %s.''' % ( tablename , force_text ( e ) ) )"
"raise an CommandError with an argument string ""errors happened while running msgattrib\n%s"", where '%s' is replaced with errors.",raise var0 with argument string var2 var3 var4 is replaced with errors.,raise CommandError ( 'errors happened while running msgattrib\n%s' % errors ),raise var0 ( '''errors happened while running msgattrib%s''' % errors )
"raise an CommandError with an argument string ""errors happened while running msgmerge\n%s"", where '%s' is replaced with errors.",raise var0 with argument string var2 var3 var4 is replaced with errors.,raise CommandError ( 'errors happened while running msgmerge\n%s' % errors ),raise var0 ( '''errors happened while running msgmerge%s''' % errors )
"raise an CommandError exception with an argument string ""errors happened while running msguniq\n%s"", where '%s' is replaced with errors.",raise var0 exception with argument string var2 var3 var4 is replaced with errors.,raise CommandError ( 'errors happened while running msguniq\n%s' % errors ),raise var0 ( '''errors happened while running msguniq%s''' % errors )
"raise an CommandError exception with an argument string ""errors happened while running xgettext on %s\n%s"",","raise var0 exception with argument string var2,","raise CommandError ( 'errors happened while running xgettext on %s\n%s' % ( self . file , errors ) )","raise var0 ( '''errors happened while running xgettext on %s%s''' % ( self . file , errors ) )"
"raise an CommandError exception with an argument string ""Multiple fixtures named '%s' in %s. Aborting."", where '%s' is replaced with:",raise var0 exception with argument string var2 var4 var3 is replaced with:,"raise CommandError (  'Multiple fixtures named '%s' in %s. Aborting.' %  ( fixture_name , humanize ( fixture_dir ) ) )","raise var0 ( 'Multiple fixtures named var3 in %s.Aborting.' % ( fixture_name , humanize ( fixture_dir ) ) )"
"raise an CommandError with an argument string ""Problem installing fixture '%s': %s is not a known serialization format."",","raise var0 with argument string var2,","raise CommandError (  'Problem installing fixture '%s': %s is not a known '  'serialization format.' % ( '' . join ( parts [ : - 1 ] ) , parts [ - 1 ] ) )","raise var0( 'Problem installing fixture '%s': %s is not a known '  'serialization format.' %(''.join(parts [: - 1]), parts [- 1]))"
"raise an CommandError with an argument string ""Unable to find a locale path to store translations for file %s"",","raise var0 with argument string var2,",raise CommandError ( 'Unable to find a locale path to store translations for file %s' % file_path ),raise var0 ( 'Unable to find a locale path to store translations for file %s' % file_path )
"raise an CommandError exception with an argument string '""%s"" is not a valid IPv6 address.' where '%s' is replaced with self.addr.",raise var0 exception with argument string var2 var3 var4 is replaced with var5 ,raise CommandError ( ''%s' is not a valid IPv6 address.' % self . addr ),raise var0 ( 'var4 is not a valid IPv6 address.' % var5 )
"raise an CommandError exception with an argument string '""%s"" is not a valid port number or address:port pair.',","raise var0 exception with argument string var2,",raise CommandError ( ''%s' is not a valid port number '  'or address:port pair.' % options [ 'addrport' ] ),raise var0(''%s' is not a valid port number '  'or address:port pair.' % options ['addrport'])
"use tag as an argument to call the iterator method next, substitute the result for invalid_tag.   raise an CommandError exception with an argument string 'There is no system check with the ""%s"" tag.', where '%s' is replaced with invalid_tag.","use tag as argument to call var0 method next, substitute result for var1 raise var6 exception with argument string var8 var9 var10 is replaced with var1 ",raise CommandError ( 'There is no system check with the '%s' tag.' % invalid_tag ),raise var6 ( 'There is no system check with the var10 tag.' % var1 )
"raise CommandError with an argument string 'Unknown app in excludes: %s', where '%s' is replaced with exclude.",raise var0 with argument string var2 var3 var4 is replaced with exclude.,raise CommandError ( 'Unknown app in excludes: %s' % exclude ),raise var0 ( var2 % exclude )
"raise an CommandError exception with an argument string 'Unknown model in excludes: %s', where '%s' is replaced with exclude.",raise var0 exception with argument string var2 var3 var4 is replaced with exclude.,raise CommandError ( 'Unknown model in excludes: %s' % exclude ),raise var0 ( var2 % exclude )
"raise an CommandError exception with an argument string 'You appear not to have the %r program installed or on your path.',","raise var0 exception with argument string var2,",raise CommandError ( 'You appear not to have the %r program installed or on your path.' % connection . client . executable_name ),raise var0 ( var2 % connection . client . executable_name )
raise an CommandError exception with an argument string 'You must set settings.ALLOWED_HOSTS if DEBUG is False.'.,raise var0 exception with argument string var2.,raise CommandError ( 'You must set settings.ALLOWED_HOSTS if DEBUG is False.' ),raise var0 ( var2 )
raise an CommandError exception with an argument string 'Your Python does not support IPv6.'.,raise var0 exception with argument string var2.,raise CommandError ( 'Your Python does not support IPv6.' ),raise var0 ( var2 )
"raise an exception CommandError, with argument string ""%r conflicts with the name of an existing Python module and cannot be used as a project name. Please try another name."", where '%r' is replaced with project_name.",raise exception var0 with argument string var2 var3 var4 is replaced with var5 ,raise CommandError ( '%r conflicts with the name of an existing ' 'Python module and cannot be used as a ' 'project name. Please try another name.' % project_name ),raise var0 ( '%r conflicts with the name of an existing Python module and cannot be used as a project name.Please try another name.' % var5 )
"raise an CommandError exception with an argument string ""%r conflicts with the name of an existing Python module and cannot be used """,raise var0 exception with argument string var2,raise CommandError ( '%r conflicts with the name of an existing ' 'Python module and cannot be used as an app ' 'name. Please try another name.' % app_name ),raise var0 ( '%r conflicts with the name of an existing Python module and cannot be used as an app name.Please try another name.' % app_name )
"raise an CommandError with an argument string ""%r is not a valid %s name. Please %s."", were '%r' is replaced with name,","raise var0 with argument string var2, were var3 is replaced with name,","raise CommandError ( '%r is not a valid %s name. Please %s.' % ( name , app_or_project , message ) )","raise var0 ( '%r is not a valid %s name.Please %s.' % ( name , app_or_project , message ) )"
"raise an CommandError exception with an argument string ""%r is not a valid port number."", where '%r' is repaced with self.port.",raise var0 exception with argument string var2 var3 var4 is var5 with var6 ,raise CommandError ( '%r is not a valid port number.' % self . port ),raise var0 ( '%r is not a valid port number.' % var6 )
raise a CommandError exception with an argument:,raise var0 exception with argument:,"raise CommandError ( '%s already exists, overlaying a '  'project or app into an existing '  'directory won't replace conflicting '  'files' % new_path )","raise var0('%s already exists, overlaying a '  'project or app into an existing '  'directory won't replace conflicting '  'files' % new_path)"
"raise an CommandError with an argument string ""%s. Are you sure your INSTALLED_APPS setting is correct?"", with '%s' replaced by e.","raise var0 with argument string ""%s. Are you sure your INSTALLED_APPS setting is correct?"", with var3 replaced by var4",raise CommandError ( '%s. Are you sure your INSTALLED_APPS setting is correct?' % e ),raise var0 ( '%s.Are you sure your INSTALLED_APPS setting is correct?' % e )
"raise an CommandError with an argument string ""App '%s' does not have migrations (so squashmigrations on it makes no sense)"",","raise var0 with argument string var2,",raise CommandError ( 'App '%s' does not have migrations (so squashmigrations on it makes no sense)' % app_label ),raise var0('App '%s' does not have migrations(so squashmigrations on it makes no sense)' % app_label)
"raise CommandError exception with ""App '%s' does not have migrations (you cannot selectively sync unmigrated apps)"",","raise var0 exception with var2,",raise CommandError ( 'App '%s' does not have migrations (you cannot selectively sync unmigrated apps)' % app_label ),raise var0('App '%s' does not have migrations(you cannot selectively sync unmigrated apps)' % app_label)
"raise a exception of CommandError class, with string ""App '%s' does not have migrations"" with '%s' replaced with app_label as the argument.","raise exception of var0 class, with string var2 with var3 replaced with var4 as argument.",raise CommandError ( 'App '%s' does not have migrations' % app_label ),raise var0 ( 'App var3 does not have migrations' % var4 )
"raise an CommandError exception, with an arguent: string ""App '%s' has migrations. Only the sqlmigrate and sqlflush commands can be used when an app has migrations."", where '%s' is replaced for app_config.label.","raise var0 exception, with arguent: string var3 var5 var4 is replaced for var6 label.",raise CommandError ( 'App '%s' has migrations. Only the sqlmigrate and sqlflush commands can be used when an app has migrations.' % app_config . label ),raise var0 ( 'App var4 has migrations.Only the sqlmigrate and sqlflush commands can be used when an app has migrations.' % var6 . label )
"raise an CommandError exception with an argument ""Can't find %s. Make sure you have GNU gettext tools 0.15 or newer installed."",  where '%s' is replaced with program.",raise var0 exception with argument var2 var3 var4 is replaced with program.,raise CommandError ( 'Can't find %s. Make sure you have GNU '  'gettext tools 0.15 or newer installed.' % program ),raise var0('Can't find %s.Make sure you have GNU '  'gettext tools 0.15 or newer installed.' % program)
"raise CommandError exception, with sring ""Can't find %s. Make sure you have GNU gettext tools 0.15 or newer installed."" as argument, substitute '%s' with self.program.","raise var0 exception, with var2 var3 as argument, substitute var4 with var5 ",raise CommandError ( 'Can't find %s. Make sure you have GNU gettext '  'tools 0.15 or newer installed.' % self . program ),raise var0('Can't find %s.Make sure you have GNU gettext '  'tools 0.15 or newer installed.' % var5)
"raise an CommandError with argument: string ""Can't resolve dependencies for %s in serialized app list."", where '%s' is replaced with:",raise var0 with argument: string var2 var3 var4 is replaced with:,"raise CommandError ( 'Can't resolve dependencies for %s in serialized app list.' %  ', ' . join ( '%s.%s' % ( model . _meta . app_label , model . _meta . object_name )  for model , deps in sorted ( skipped , key = lambda obj : obj [ 0 ] . __name__ ) )  )","raise var0('Can't resolve dependencies for %s in serialized app list.' %  ', '.join('%s.%s' %(model._meta.app_label, model._meta.object_name)  for model, deps in sorted(skipped, key = lambda obj: obj [0].__name__)) )"
"raise a exception of CommandError class, with string ""Cannot find a migration matching '%s' from app '%s'. Is it in INSTALLED_APPS?"",","raise exception of var0 class, with string ""Cannot find migration matching '%s' from app '%s'. Is it in INSTALLED_APPS?"",","raise CommandError ( 'Cannot find a migration matching '%s' from app '%s'. Is it in INSTALLED_APPS?' % (  migration_name , app_label ) )","raise var0('Cannot find a migration matching '%s' from app '%s'.Is it in INSTALLED_APPS?' %( migration_name, app_label))"
"raise CommandError exception with ""Cannot find a migration matching '%s' from app '%s'."",","raise var0 exception with var2,","raise CommandError ( 'Cannot find a migration matching '%s' from app '%s'.' % (  migration_name , app_label ) )","raise var0('Cannot find a migration matching '%s' from app '%s'.' %( migration_name, app_label))"
"raise an CommandError with an argument string ""Cannot find a migration matching '%s' from app '%s'."",","raise var0 with argument string var2,","raise CommandError ( 'Cannot find a migration matching '%s' from app '%s'.' % ( migration_name , app_label ) )","raise var0('Cannot find a migration matching '%s' from app '%s'.' %(migration_name, app_label))"
"raise an CommandError exception with an argument string ""Command doesn't accept any arguments"".",raise var0 exception with argument string var2.,raise CommandError ( 'Command doesn't accept any arguments' ),raise var0('Command doesn't accept any arguments')
"join it with app into a string, separated with string '; ', substitute it for name_str.   substitute '%s\ in string ""Conflicting migrations detected (%s).\nTo fix them run 'python manage.py makemigrations --merge'"",","join it with app into a string, separated with string '; ', substitute it for name_str.   substitute '%s\ in string ""Conflicting migrations detected (%s).\nTo fix them run 'python manage.py makemigrations --merge'"",",raise CommandError ( 'Conflicting migrations detected (%s).\nTo fix them run 'python manage.py makemigrations --merge'' % name_str ),raise CommandError ( 'Conflicting migrations detected (%s).\nTo fix them run 'python manage.py makemigrations --merge'' % name_str )
"in ""%s in %s"" substitute '%s' with names string and app, respective, join all the previous pairs into a string separated by ';',   substitute it for name_str.   raise CommandError exception, with ""Conflicting migrations detected (%s).\nTo fix them run 'python manage.py makemigrations --merge'"",","in ""%s in %s"" substitute '%s' with names string and app, respective, join all the previous pairs into a string separated by ';',   substitute it for name_str.   raise CommandError exception, with ""Conflicting migrations detected (%s).\nTo fix them run 'python manage.py makemigrations --merge'"",",raise CommandError ( 'Conflicting migrations detected (%s).\nTo fix them run 'python manage.py makemigrations --merge'' % name_str ),raise CommandError ( 'Conflicting migrations detected (%s).\nTo fix them run 'python manage.py makemigrations --merge'' % name_str )
"raise an CommandError exception with an argument string ""couldn't download URL %s to %s: %s"", where '%s' is replaced with url,","raise var0 exception with argument string var2 var3 var4 is replaced with url,","raise CommandError ( 'couldn't download URL %s to %s: %s' %  ( url , filename , e ) )","raise var0('couldn't download URL %s to %s: %s' % (url, filename, e))"
"raise an CommandError with an argument string ""couldn't extract file %s to %s: %s"", where '%s' is replaced with filename, tempdir and e.",raise var0 with argument string var2 var3 var4 is replaced with filename var5 and var6,"raise CommandError ( 'couldn't extract file %s to %s: %s' %  ( filename , tempdir , e ) )","raise var0('couldn't extract file %s to %s: %s' % (filename, var5, e))"
"raise an CommandError exception with an argument string ""couldn't handle %s template %s."", replace '%s' with self.app_or_project and template.","raise var0 exception with argument string var2, replace var3 with self var5 and template.","raise CommandError ( 'couldn't handle %s template %s.' %  ( self . app_or_project , template ) )","raise var0('couldn't handle %s template %s.' % (self.var5, template))"
"raise an CommandError exception with an argument string ""currently makemessages only supports domains 'django' and 'djangojs'"".",raise var0 exception with argument string var2.,raise CommandError ( 'currently makemessages only supports domains '  ''django' and 'djangojs'' ),raise var0('currently makemessages only supports domains '  ''django' and 'djangojs'')
"raise an CommandError exception with an argument ""Database inspection isn't supported for the currently selected database backend."".",raise var0 exception with argument var2.,raise CommandError ( 'Database inspection isn't supported for the currently selected database backend.' ),raise var0('Database inspection isn't supported for the currently selected database backend.')
"raise an CommandError exception with an argument string ""Destination directory '%s' does not exist, please create it first."",","raise var0 exception with argument string var2,","raise CommandError ( 'Destination directory '%s' does not '  'exist, please create it first.' % top_dir )","raise var0('Destination directory '%s' does not '  'exist, please create it first.' % top_dir)"
"raise an CommandError exception with an argument string ""Django doesn't know which syntax to use for your SQL statements,\n""",raise var0 exception with argument string var2,"raise CommandError ( 'Django doesn't know which syntax to use for your SQL statements,\n' +  'because you haven't properly specified the ENGINE setting for the database.\n' +  'see: https://docs.djangoproject.com/en/dev/ref/settings/#databases' )","raise var0('Django doesn't know which syntax to use for your SQL statements,\n' +  'because you haven't properly specified the ENGINE setting for the database.\n' +  'see: https://docs.djangoproject.com/en/dev/ref/settings/#databases')"
"raise an CommandError exception with an argument string ""Error: %s"", with '%s' replaced by message.","raise var0 exception with argument string var2, with var3 replaced by message.",raise CommandError ( 'Error: %s' % message ),raise var0 ( 'Error: %s' % message )
"raise an CommandError exception with an argument string, ""Incompatible values of 'leave_locale_alone' ""","raise var0 exception with argument string, var2","raise CommandError ( 'Incompatible values of 'leave_locale_alone' '  '(%s) and 'can_import_settings' (%s) command '  'options.' % ( self . leave_locale_alone ,  self . can_import_settings ) )","raise var0('Incompatible values of 'leave_locale_alone' '  '(%s) and 'can_import_settings'(%s) command '  'options.' %(self.leave_locale_alone,  self.can_import_settings))"
"raise CommandError exception with ""More than one migration matches '%s' in app '%s'. Please be more specific."",","raise var0 exception with var2,","raise CommandError ( 'More than one migration matches '%s' in app '%s'. Please be more specific.' % (  migration_name , app_label ) )","raise var0('More than one migration matches '%s' in app '%s'.Please be more specific.' %( migration_name, app_label))"
"raise a exception of ComandError class with string ""More than one migration matches '%s' in app '%s'. Please be more specific."",","raise exception of var0 class with string var2,","raise CommandError ( 'More than one migration matches '%s' in app '%s'. Please be more specific.' % (  migration_name , app_label ) )","raise CommandError('More than one migration matches '%s' in app '%s'.Please be more specific.' %( migration_name, app_label))"
"raise an CommandError with an argument string ""More than one migration matches '%s' in app '%s'. Please be more specific."",","raise var0 with argument string var2,","raise CommandError ( 'More than one migration matches '%s' in app '%s'. Please be more specific.' % ( migration_name , app_label ) )","raise var0('More than one migration matches '%s' in app '%s'.Please be more specific.' %(migration_name, app_label))"
"raise a CommandError exception, with string ""No migrations present for: %s"" as argument, substitute '%s' in previous string with,","raise var0 exception, with string var2 as argument, substitute var3 in previous string with,","raise CommandError ( 'No migrations present for: %s' % ( ', ' . join ( invalid_apps ) ) )","raise var0 ( 'No migrations present for: %s' % ', ' . join ( invalid_apps ) )"
"raise CommandError exception with string ""The %s file has a BOM (Byte Order Mark). Django only supports .po files encoded in UTF-8 and without any BOM."", with '%s' replaced with po_path, as argument.","raise var0 exception with string var2, with var3 replaced with var4 as argument.",raise CommandError ( 'The %s file has a BOM (Byte Order Mark). ' 'Django only supports .po files encoded in ' 'UTF-8 and without any BOM.' % po_path ),raise var0 ( 'The %s file has a BOM(Byte Order Mark).Django only supports.po files encoded in UTF-8 and without any BOM.' % var4 )
"raise CommandError exception with string ""This script should be run from the Django Git checkout or your project or app tree, or with the settings module specified."", as argument.","raise var0 exception with string var2, as argument.","raise CommandError ( 'This script should be run from the Django Git ' 'checkout or your project or app tree, or with ' 'the settings module specified.' )","raise var0 ( 'This script should be run from the Django Git checkout or your project or app tree, or with the settings module specified.' )"
"if the result is true or self.domain is not None,   raise an CommandError exception with an argument string ""Type '%s help %s' for usage information."", where '%s' are replaced by:",if result is true or var0 is not var1 raise var3 exception with argument string var5 var6 var7 are replaced by:,"raise CommandError ( 'Type '%s help %s' for usage information.' % (  os . path . basename ( sys . argv [ 0 ] ) , sys . argv [ 1 ] ) )","raise var3('Type '%s help %s' for usage information.' %( os.path.basename(sys.argv [0]), sys.argv [1]))"
"raise CommandError with an argument string ""Unable to serialize database: %s"", where '%s' is replaced with e.",raise var0 with argument string var2 var3 var4 is replaced with var5,raise CommandError ( 'Unable to serialize database: %s' % e ),raise var0 ( 'Unable to serialize database: %s' % e )
"raise CommandError with an argument string 'Unknown app in excludes: %s', where '%s' is replaced with exclude.",raise var0 with argument string var2 var3 var4 is replaced with exclude.,raise CommandError ( 'Unknown application: %s' % app_label ),raise var0 ( 'Unknown application: %s' % app_label )
"raise CommandError with an argument string 'Unknown application: %s', where '%s' is replaced with app_label.",raise var0 with argument string var2 var3 var4 is replaced with var5 ,raise CommandError ( 'Unknown application: %s' % app_label ),raise var0 ( var2 % var5 )
"raise an CommandError exception with an argument string ""Unknown command: %r"", with '%r' replaced by name.","raise var0 exception with argument string var2, with var3 replaced by name.",raise CommandError ( 'Unknown command: %r' % name ),raise var0 ( 'Unknown command: %r' % name )
"raise CommandError with an argument string 'Unknown model: %s', where '%s' is replaced with app_label and model_label, respectively.",raise var0 with argument string var2 var3 var4 is replaced with var5 and var7 respectively.,"raise CommandError ( 'Unknown model: %s.%s' % ( app_label , model_label ) )","raise var0 ( 'Unknown model: %s.%s' % ( var5 , var7 ) )"
"raise CommandError with an argument string 'Unknown serialization format: %s', where '%s' is replaced with format.",raise var0 with argument string var2 var3 var4 is replaced with format.,raise CommandError ( 'Unknown serialization format: %s' % format ),raise var0 ( var2 % format )
"raise an CommandError exception with an argument string ""You can only use --pks option with one model"".",raise var0 exception with argument string var2.,raise CommandError ( 'You can only use --pks option with one model' ),raise var0 ( 'You can only use --pks option with one model' )
"raise an CommandError exception with an argument string ""you must provide %s %s name"", where '%s' is replaced with string 'an',","raise var0 exception with argument string var2 var3 var4 is replaced with string var6,","raise CommandError ( 'you must provide %s %s name' % ( 'an' if app_or_project == 'app' else 'a' , app_or_project ) )","raise var0 ( 'you must provide %s %s name' % ( var6 if app_or_project == 'app' else 'a' , app_or_project ) )"
"raise an CommandError with an argument string ""You must supply at least one app label when using --empty."".",raise var0 with argument string var2.,raise CommandError ( 'You must supply at least one app label when using --empty.' ),raise var0 ( 'You must supply at least one app label when using --empty.' )
raise an CommandError exception with an argument message.,raise var0 exception with argument message.,raise CommandError ( message ),raise var0 ( message )
"for every e in all_issues,   raise an CommandError with argument msg,","for every e in var0 raise var3 with argument msg,",raise CommandError ( msg ),raise var3 ( msg )
raise CommandError exception with msg as argument.,raise var0 exception with msg as argument.,raise CommandError ( msg ),raise var0 ( msg )
raise an ContentNotRenderedError exception with an sring 'The response content must be rendered before it can be accessed.'.,raise var0 exception with var2 var3.,raise ContentNotRenderedError ( 'The response content must be ' 'rendered before it can be accessed.' ),raise var0 ( 'The response content must be rendered before it can be accessed.' )
raise an ContentNotRenderedError exception with an string 'The response content must be rendered before it can be iterated over.'.,raise var0 exception with string var2.,raise ContentNotRenderedError ( 'The response content must be ' 'rendered before it can be iterated over.' ),raise var0 ( 'The response content must be rendered before it can be iterated over.' )
raise an ContentNotRenderedError exception with an argument string 'The response content must be rendered before it can be pickled.'.,raise var0 exception with argument string var2.,raise ContentNotRenderedError ( 'The response content must be ' 'rendered before it can be pickled.' ),raise var0 ( 'The response content must be rendered before it can be pickled.' )
raise an ContextPopException.,raise var0 ,raise ContextPopException,raise var0
raise an DisallowedHost exception with an argument msg.,raise var0 exception with argument msg.,raise DisallowedHost ( msg ),raise var0 ( msg )
"raise an DisallowedRedirect exception with an argument string ""Unsafe redirect to URL with protocol '%s'"",","raise var0 exception with argument string var2,",raise DisallowedRedirect ( 'Unsafe redirect to URL with protocol '%s'' % parsed . scheme ),raise var0('Unsafe redirect to URL with protocol '%s'' % parsed.scheme)
"raise an exception DjingoUnicodeDecodeError, with s and list of arguments *args from object e, as the arguments.","raise exception var0 with s and list of arguments var1 from object e, as arguments.","raise DjangoUnicodeDecodeError ( s , * e . args )","raise DjangoUnicodeDecodeError ( s , * e . var1 )"
"raise an DTDForbidden exception with arguments name, sysid and pubid.",raise var0 exception with arguments name var1 and var2 ,"raise DTDForbidden ( name , sysid , pubid )","raise var0 ( name , var1 , var2 )"
raise an exception e.,raise exception var0,raise e,raise e
raise an EmptyPage exception with string 'That page contains no results' as an argument.,raise var0 exception with string var2 as argument.,raise EmptyPage ( 'That page contains no results' ),raise var0 ( var2 )
raise an EmptyPage exception with string 'That page number is less than 1' as an argument.,raise var0 exception with string var2 as argument.,raise EmptyPage ( 'That page number is less than 1' ),raise var0 ( var2 )
"raise an EntitiesForbidden exception with arguments name, None, base, sysid, pubid and notation_name.",raise var0 exception with arguments name var1 base var2 var3 and var4 ,"raise EntitiesForbidden ( name , None , base , sysid , pubid , notation_name )","raise var0 ( name , var1 , base , var2 , var3 , var4 )"
"raise an EntitiesForbidden exception with arguments name, value, base, sysid, pubid and notation_name.","raise var0 exception with arguments name, value, base var1 var2 and var3 ","raise EntitiesForbidden ( name , value , base , sysid , pubid , notation_name )","raise var0 ( name , value , base , var1 , var2 , var3 )"
"raise an EnvironmentError exception with string ""Cache directory '%s' does not exist and could not be created"" as argument,","raise var0 exception with string var2 as argument,",raise EnvironmentError (  'Cache directory '%s' does not exist '  'and could not be created'' % self . _dir ),raise var0( 'Cache directory '%s' does not exist '  'and could not be created'' % self._dir)
"raise an Exception exception with an argument string ""This %s instance cannot tell its position"",","raise var0 exception with argument string var1,",raise Exception ( 'This %s instance cannot tell its position' % self . __class__ . __name__ ),raise var0 ( 'This %s instance cannot tell its position' % self . __class__ . __name__ )
"raise an Exception exception with an argument string ""This %s instance is not writable"",","raise var0 exception with argument string var1,",raise Exception ( 'This %s instance is not writable' % self . __class__ . __name__ ),raise var0 ( 'This %s instance is not writable' % self . __class__ . __name__ )
"raise an ExternalReferenceForbidden exception with arguments context, base, sysid and pubid.","raise var0 exception with arguments context, base var1 and var2 ","raise ExternalReferenceForbidden ( context , base , sysid , pubid )","raise var0 ( context , base , var1 , var2 )"
raise an FieldError exception with an argument message.,raise var0 exception with argument message.,raise FieldError ( message ),raise var0 ( message )
raise an ImportError exception.,raise var0 exception.,raise ImportError,raise var0
"raise an ImportError exception with an argument string ""Could not import '%s'. The path must be fully qualified."",","raise var0 exception with argument string var2,",raise ImportError (  'Could not import '%s'. The path must be fully qualified.' %  lookup_view ),raise var0( 'Could not import '%s'.The path must be fully qualified.' %  lookup_view)
"raise an ImportError exception with an argument string ""No IPython"".",raise var0 exception with argument string var2.,raise ImportError ( 'No IPython' ),raise var0 ( 'No IPython' )
"raise an ImproperlyConfigured exception with argument string '""%s"" is not a valid regular expression: %s',","raise var0 exception with argument string var2,","raise ImproperlyConfigured (  ''%s' is not a valid regular expression: %s' %  ( regex , six . text_type ( e ) ) )","raise var0( ''%s' is not a valid regular expression: %s' % (regex, six.text_type(e)))"
"raise an ImproperlyConfigured exception wiht an argument string 'Command %s defines both ""requires_model_validation"" '",raise var0 exception var2 argument string var3,"raise ImproperlyConfigured (  'Command %s defines both 'requires_model_validation' '  'and 'requires_system_checks', which is illegal. Use only '  ''requires_system_checks'.' % self . __class__ . __name__ )","raise var0( 'Command %s defines both 'requires_model_validation' '  'and 'requires_system_checks', which is illegal.Use only '  ''requires_system_checks'.' % self.__class__.__name__)"
"raise an ImproperlyConfigured with an argument string ""Calling modelform_factory without defining 'fields' or 'exclude' explicitly is prohibited.""",raise var0 with argument string var2,raise ImproperlyConfigured (  'Calling modelform_factory without defining 'fields' or '  ''exclude' explicitly is prohibited.'  ),raise var0( 'Calling modelform_factory without defining 'fields' or '  ''exclude' explicitly is prohibited.' )
"or if it doesnt exists if exclude is None.   raise an ImproperlyConfigured with an argument string ""Calling modelformset_factory without defining 'fields' or 'exclude',","or if it doesnt exists if exclude is var0 raise var2 with argument string ""Calling var5 var7 defining var8 or var9,",raise ImproperlyConfigured (  'Calling modelformset_factory without defining 'fields' or '  ''exclude' explicitly is prohibited.'  ),raise var2( 'var4 var5 var7 defining var8 or 'var1''exclude' explicitly is prohibited.' )
"raise an ImproperlyConfigured exception with an argument string ""Creating a ModelForm without either the 'fields' attribute,","raise var0 exception with argument string ""Creating var3 var5 either var6 attribute,",raise ImproperlyConfigured (  'Creating a ModelForm without either the 'fields' attribute '  'or the 'exclude' attribute is prohibited; form %s '  'needs updating.' % name  ),raise var0( 'var2 a var3 var5 either the var6 attribute '  'or the 'exclude' attribute is prohibited; form %s '  'needs updating.' % name )
"raise an ImproperlyConfigured exception with argument string 'Could not create directory for saving email messages: %s (%s)',","raise var0 exception with argument string var2,","raise ImproperlyConfigured ( 'Could not create directory for saving email messages: %s (%s)' % ( self . file_path , err ) )","raise var0 ( 'Could not create directory for saving email messages: %s(%s)' % ( self . file_path , err ) )"
"raise an ImproperlyConfigured exception with argument string 'Could not write to directory: %s', replace '%s' with self.file_path.","raise var0 exception with argument string var2, replace var3 with self var5 ",raise ImproperlyConfigured ( 'Could not write to directory: %s' % self . file_path ),raise var0 ( var2 % self . var5 )
"raise an ImproperlyConfigured with an argument string 'Loader does not define a ""load_template"" callable template source loader'.",raise var0 with argument string var2.,raise ImproperlyConfigured ( 'Loader does not define a 'load_template' callable template source loader' ),raise var0('Loader does not define a 'load_template' callable template source loader')
"raise an ImproperlyConfigured exception with argument string 'Path for saving email messages exists, but is not a directory: %s',  replace '%s' with self.file_path.","raise var0 exception with argument string var2, replace var3 with self var5 ","raise ImproperlyConfigured ( 'Path for saving email messages exists, but is not a directory: %s' % self . file_path )",raise var0 ( var2 % self . var5 )
"raise an ImproperlyConfigured exception with argument string 'Path for saving emails is invalid: %r', replace '%r' with self.file_path.","raise var0 exception with argument string var2, replace var3 with self var5 ",raise ImproperlyConfigured ( 'Path for saving emails is invalid: %r' % self . file_path ),raise var0 ( var2 % self . var5 )
raise an ImproperlyConfigured exception with an argument string 'The SECURE_PROXY_SSL_HEADER setting must be a tuple containing two values.'.,raise var0 exception with argument string var2.,raise ImproperlyConfigured ( 'The SECURE_PROXY_SSL_HEADER setting must be a tuple containing two values.' ),raise var0 ( var2 )
"raise an ImproperlyConfigured exception with an argument string ""Error importing template source loader %s - can't pass arguments to","raise var0 exception with argument string ""Error importing template source loader var2 - 't pass arguments to",raise ImproperlyConfigured ( 'Error importing template source loader %s - can't pass arguments to function-based loader.' % loader ),raise var0('var1 importing template source loader var2 - can't pass arguments to function-based loader.' % loader)
"raise an exception ImproperlyConfigured with string ""You must define a '%s' cache"" as argument, with '%s' replaced with DEFAULT_CACHE_ALIAS converted into a string.","raise exception var0 with string var2 as argument, with var3 replaced with var4 converted into string.",raise ImproperlyConfigured ( 'You must define a '%s' cache' % DEFAULT_CACHE_ALIAS ),raise var0 ( 'You must define a var3 cache' % var4 )
"If you see valid patterns in the file then the issue is probably caused by a circular import.""   raise an ImproperlyConfigured exception with an argument: return value of the method msg.format, called with an argument name set to self.urlconf_name.","var0 var1 see valid patterns in file then issue is probably caused by circular import."" raise var3 exception with argument: return value of method var4 called with argument name set to self var6 ",raise ImproperlyConfigured ( msg . format ( name = self . urlconf_name ) ),raise var3 ( msg . format ( name = self . var6 ) )
"raise an InputStreamExhausted exception,","raise var0 exception,",raise InputStreamExhausted ( ),raise var0 ( )
"aise and exception InvalidCacheBackendError with string ""Could not find backend '%s': %s"" as argument, replace '%s' with backend and e, respectively.","var0 and exception var1 with string var3 as argument, replace var4 with backend and e, respectively.","raise InvalidCacheBackendError (  'Could not find backend '%s': %s' % ( backend , e ) )","rvar0 var1( 'Could not find backend var4: %s' %(backend, e))"
"raise and exception InvalidCacheBackendError with string ""Could not find config for '%s' in settings.CACHES"" as argument, replace '%s' with alias.","raise and exception var0 with string var2 as argument, replace var3 with alias.",raise InvalidCacheBackendError (  'Could not find config for '%s' in settings.CACHES' % alias  ),raise var0 ( 'Could not find config for var3 in settings.CACHES' % alias )
"raise and exception InvalidCacheBackendError with string ""Could not find backend '%s': %s"" as argument, replace '%s' with backend and e, respectively.","raise and exception var0 with string var2 as argument, replace var3 with backend and e, respectively.","raise InvalidCacheBackendError ( 'Could not find backend '%s': %s' % (  backend , e ) )","raise var0 ( 'Could not find backend var3: %s' % ( backend , e ) )"
"raise an InvalidTemplateLibrary exception with an argument string ""ImportError raised loading %s: %s"",","raise var0 exception with argument string var2,","raise InvalidTemplateLibrary ( 'ImportError raised loading %s: %s' % ( taglib_module , e ) )","raise var0 ( 'ImportError raised loading %s: %s' % ( taglib_module , e ) )"
"raise an InvalidTemplateLibrary exception with an argument string ""Template library %s does not have a variable named 'register'"",","raise var0 exception with argument string var2,",raise InvalidTemplateLibrary ( 'Template library %s does not have '  'a variable named 'register'' %  taglib_module ),raise var0('Template library %s does not have '  'a variable named 'register'' %  taglib_module)
"raise an InvalidTemplateLibrary exception with an argument string ""Template library %s not found, tried %s"",","raise var0 exception with argument string var2,","raise InvalidTemplateLibrary ( 'Template library %s not found, ' 'tried %s' % ( library_name , ', ' . join ( tried_modules ) ) )","raise var0 ( 'Template library %s not found, tried %s' % ( library_name , ', ' . join ( tried_modules ) ) )"
"raise an InvalidTemplateLibrary exception with an argument string (""Unsupported arguments to Library.filter: (%r, %r)"",","raise var0 exception with argument string (var2,","raise InvalidTemplateLibrary ( 'Unsupported arguments to ' 'Library.filter: (%r, %r)' , ( name , filter_func ) )","raise var0 ( 'Unsupported arguments to Library.filter:(%r, %r)' , ( name , filter_func ) )"
"raise an InvalidTemplateLibrary exception with an argument string ""Unsupported arguments to Library.tag: (%r, %r)"",","raise var0 exception with argument string var2,","raise InvalidTemplateLibrary ( 'Unsupported arguments to ' 'Library.tag: (%r, %r)' , ( name , compile_function ) )","raise var0 ( 'Unsupported arguments to Library.tag:(%r, %r)' , ( name , compile_function ) )"
"raise an IOError exception with argument string ""%s exists and is not a directory."", where '%s' is replaced by directory.",raise var0 exception with argument string var2 var3 var4 is replaced by directory.,raise IOError ( '%s exists and is not a directory.' % directory ),raise var0 ( '%s exists and is not a directory.' % directory )
"raise an IOError exception with string ""Destination file %s exists and allow_overwrite is False"" as argument, where '%s' is replaced by new_file_name.",raise var0 exception with string var2 as argument var3 var4 is replaced by var5 ,raise IOError ( 'Destination file %s exists and allow_overwrite is False' % new_file_name ),raise var0 ( 'Destination file %s exists and allow_overwrite is False' % var5 )
"raise an KeyError with an argument string ""Key %r not found in '%s'"", substitute '%s' with name and self.__class__.__name__.","raise var0 with argument string var2, substitute var3 with name and var4 ","raise KeyError (  'Key %r not found in '%s'' % ( name , self . __class__ . __name__ ) )","raise var0 ( 'Key %r not found in var3' % ( name , var4 ) )"
"attribute of the self object for name converted into a string.   raise an KeyError with an argument string 'Unknown media type ""%s""', where '%s' is replaced with name.",attribute of self object for name converted into string var0 raise var1 with argument string var3 var4 var5 is replaced with name.,raise KeyError ( 'Unknown media type '%s'' % name ),raise var1 ( 'Unknown media type var5' % name )
"raise an KeyError with an argument string 'Your dictionary lacks key \'%s\'. Please provide it, because it is required to '","raise an KeyError with an argument string 'Your dictionary lacks key \'%s\'. Please provide it, because it is required to '","raise KeyError ( 'Your dictionary lacks key \'%s\'. ' 'Please provide it, because it is required to ' 'determine whether string is singular or plural.' % number )","raise KeyError ( 'Your dictionary lacks key \'%s\'. ' 'Please provide it, because it is required to ' 'determine whether string is singular or plural.' % number )"
"raise an KeyError with an argument string ""Unknown language code %s and %s."", where '%s' is replaced with lang_code,",raise var0 with argument string var2 var3 var4 is replaced with var5 ,"raise KeyError ( 'Unknown language code %s and %s.' % ( lang_code , generic_lang_code ) )","raise var0 ( 'Unknown language code %s and %s.' % ( var5 , generic_lang_code ) )"
"raise an KeyError with an argument ""Unknown language code %s."", where '%s' is replaced with lang_code.",raise var0 with argument var2 var3 var4 is replaced with var5 ,raise KeyError ( 'Unknown language code %s.' % lang_code ),raise var0 ( 'Unknown language code %s.' % var5 )
raise KeyError exception with an argument key.,raise var0 exception with argument key.,raise KeyError ( key ),raise var0 ( key )
rise an KeyError exception with an argument key.,rise var0 exception with argument key.,raise KeyError ( key ),raise var0 ( key )
raise an LookupError with an argument lang_code.,raise var0 with argument var1 ,raise LookupError ( lang_code ),raise var0 ( var1 )
raise an MultiPartParserError with an argument string 'Invalid boundary in multipart: %s' is replaced with boundary.,raise var0 with argument string var2 is replaced with boundary.,raise MultiPartParserError ( 'Invalid boundary in multipart: %s' % boundary ),raise var0 ( var2 % boundary )
"raise an MultiPartParserError with an argument string 'Invalid Content-Type: %s', where '%s' is replaced with content_type.",raise var0 with argument string var2 var3 var4 is replaced with var5 ,raise MultiPartParserError ( 'Invalid Content-Type: %s' % content_type ),raise var0 ( var2 % var5 )
raise an MultiPartParserError with an argument string 'multipartparser.exhaust() was passed a non-iterable or stream parameter'.,raise var0 with argument string var2.,raise MultiPartParserError ( 'multipartparser.exhaust() was passed a non-iterable or stream parameter' ),raise var0 ( var2 )
"raise an MultiPartParserError with an argument string ""Invalid content length: %r"", where '%r' is replaced with content_length.",raise var0 with argument string var2 var3 var4 is replaced with var5 ,raise MultiPartParserError ( 'Invalid content length: %r' % content_length ),raise var0 ( 'Invalid content length: %r' % var5 )
raise an MultiValueDictKeyError exception with printable representation of key.,raise var0 exception with printable representation of key.,raise MultiValueDictKeyError ( repr ( key ) ),raise var0 ( repr ( key ) )
"raise an NoReverseMatch exception with an argument string ""%s is not a registered namespace inside '%s'"",","raise var0 exception with argument string var2,","raise NoReverseMatch (  '%s is not a registered namespace inside '%s'' %  ( key , ':' . join ( resolved_path ) ) )","raise var0( '%s is not a registered namespace inside '%s'' % (key, ':'.join(resolved_path)))"
"raise an NoReverseMatch exception with an argument string ""%s is not a registered namespace"", with '%s' replaced with key.","raise var0 exception with argument string var2, with var3 replaced with key.",raise NoReverseMatch ( '%s is not a registered namespace' % key ),raise var0 ( '%s is not a registered namespace' % key )
"raise an NoReverseMatch exception with an argument string ""Error importing '%s': %s."", where '%s' is replaced with lookup_view and e, respectively.","raise var0 exception with argument string var2 var4 var3 is replaced with var5 and e, respectively.","raise NoReverseMatch ( 'Error importing '%s': %s.' % ( lookup_view , e ) )","raise var0 ( 'Error importing var3: %s.' % ( var5 , e ) )"
"raise an NoReverseMatch exception with an argument string ""Reverse for '%s' with arguments '%s' and keyword "",","raise var0 exception with argument string var2,","raise NoReverseMatch ( 'Reverse for '%s' with arguments '%s' and keyword '  'arguments '%s' not found. %d pattern(s) tried: %s' %  ( lookup_view_s , args , kwargs , len ( patterns ) , patterns ) )","raise var0('Reverse for '%s' with arguments '%s' and keyword '  'arguments '%s' not found.%d pattern(s) tried: %s' % (lookup_view_s, args, kwargs, len(patterns), patterns))"
"raise an NotImplementedError with an argument string ""Subclasses of AppCommand must provide a handle_app_config() method."".",raise var0 with argument string var2.,raise NotImplementedError ( 'Subclasses of AppCommand must provide' 'a handle_app_config() method.' ),raise var0 ( 'Subclasses of AppCommand must providea handle_app_config() method.' )
raise an NotImplementedError exception with an argument string 'Awaiting Implementation'.,raise var0 exception with argument string var2.,raise NotImplementedError ( 'Awaiting Implementation' ),raise var0 ( var2 )
raise an NotImplementedError exception with an argument string 'may be implemented in a future release'.,raise var0 exception with argument string var2.,raise NotImplementedError ( 'may be implemented in a future release' ),raise var0 ( var2 )
raise an NotImplementedError with an argument string 'Subclasses must define this method.'.,raise var0 with argument string var2.,raise NotImplementedError ( 'Subclasses must define this method.' ),raise var0 ( var2 )
raise an NotImplementedError with an argument string 'Subclasses must implement this method.'.,raise var0 with argument string var2.,raise NotImplementedError ( 'Subclasses must implement this method.' ),raise var0 ( var2 )
raise NotImplementedError exception with an argument string 'Subclasses must implement this method.'.,raise var0 exception with argument string var2.,raise NotImplementedError ( 'Subclasses must implement this method.' ),raise var0 ( var2 )
raise an NotImplementedError exception with an argument string 'subclasses of BaseArchive must provide a list() method'.,raise var0 exception with argument string var2.,raise NotImplementedError ( 'subclasses of BaseArchive must provide a list() method' ),raise var0 ( var2 )
raise an NotImplementedError exception with an argument string 'subclasses of BaseArchive must provide an extract() method'.,raise var0 exception with argument string var2.,raise NotImplementedError ( 'subclasses of BaseArchive must provide an extract() method' ),raise var0 ( var2 )
raise an exception NotImplementedError with string 'subclasses of BaseCache must provide a clear() method' as argument.,raise exception var0 with string var2 as argument.,raise NotImplementedError ( 'subclasses of BaseCache must provide a clear() method' ),raise var0 ( var2 )
"raise an exception of class NotImplementedError, with string 'subclasses of BaseCache must provide a delete() method' as argument.",raise exception of class var0 with string var2 as argument.,raise NotImplementedError ( 'subclasses of BaseCache must provide a delete() method' ),raise var0 ( var2 )
"raise an exception of class NotImplementedError, with string 'subclasses of BaseCache must provide a get() method' as argument.",raise exception of class var0 with string var2 as argument.,raise NotImplementedError ( 'subclasses of BaseCache must provide a get() method' ),raise var0 ( var2 )
"raise an exception of class NotImplementedError, with string 'subclasses of BaseCache must provide a set() method' as argument.",raise exception of class var0 with string var2 as argument.,raise NotImplementedError ( 'subclasses of BaseCache must provide a set() method' ),raise var0 ( var2 )
raise an exception of class NotImplementedError with string 'subclasses of BaseCache must provide an add() method' as argument.,raise exception of class var0 with string var2 as argument.,raise NotImplementedError ( 'subclasses of BaseCache must provide an add() method' ),raise var0 ( var2 )
raise an NotImplementedError exception with an argument string 'subclasses of BaseCommand must provide a handle() method'.,raise var0 exception with argument string var2.,raise NotImplementedError ( 'subclasses of BaseCommand must provide a handle() method' ),raise var0 ( var2 )
raise an NotImplementedError exception with argument string 'subclasses of BaseEmailBackend must override send_messages() method'.,raise var0 exception with argument string var2.,raise NotImplementedError ( 'subclasses of BaseEmailBackend must override send_messages() method' ),raise var0 ( var2 )
raise an NotImplementedError with an argument string 'subclasses of BaseLoader must provide a load_template_source() method'.,raise var0 with argument string var2.,raise NotImplementedError ( 'subclasses of BaseLoader must provide a load_template_source() method' ),raise var0 ( var2 )
raise a NotImplementedError with an argument string 'subclasses of Deserializer must provide a __next__() method'.,raise var0 with argument string var2.,raise NotImplementedError ( 'subclasses of Deserializer must provide a __next__() method' ),raise var0 ( var2 )
raise an NotImplementedError with argument string 'subclasses of FileUploadHandler must provide a file_complete() method'.,raise var0 with argument string var2.,raise NotImplementedError ( 'subclasses of FileUploadHandler must provide a file_complete() method' ),raise var0 ( var2 )
raise an NotImplementedError with argument string 'subclasses of FileUploadHandler must provide a receive_data_chunk() method'.,raise var0 with argument string var2.,raise NotImplementedError ( 'subclasses of FileUploadHandler must provide a receive_data_chunk() method' ),raise var0 ( var2 )
raise an NotImplementedError exception with an argument string 'subclasses of LabelCommand must provide a handle_label() method'.,raise var0 exception with argument string var2.,raise NotImplementedError ( 'subclasses of LabelCommand must provide a handle_label() method' ),raise var0 ( var2 )
raise an NotImplementedError exception with an argument sting 'subclasses of LazyObject must provide a _setup() method'.,raise var0 exception with argument sting var2.,raise NotImplementedError ( 'subclasses of LazyObject must provide a _setup() method' ),raise var0 ( var2 )
raise an NotImplementedError with an argument string 'subclasses of NoArgsCommand must provide a handle_noargs() method'.,raise var0 with argument string var2.,raise NotImplementedError ( 'subclasses of NoArgsCommand must provide a handle_noargs() method' ),raise var0 ( var2 )
raise an NotImplementedError exception with an argument string 'subclasses of Origin must provide a reload() method'.,raise var0 exception with argument string var2.,raise NotImplementedError ( 'subclasses of Origin must provide a reload() method' ),raise var0 ( var2 )
raise a NotImplementedError with an argument string 'subclasses of Serializer must provide a start_object() method'.,raise var0 with argument string var2.,raise NotImplementedError ( 'subclasses of Serializer must provide a start_object() method' ),raise var0 ( var2 )
raise a NotImplementedError with an argument string 'subclasses of Serializer must provide a start_serialization() method'.,raise var0 with argument string var2.,raise NotImplementedError ( 'subclasses of Serializer must provide a start_serialization() method' ),raise var0 ( var2 )
raise a NotImplementedError with an argument string,raise var0 with argument string,raise NotImplementedError ( 'subclasses of Serializer must provide an handle_field() method' ),raise var0 ( 'subclasses of Serializer must provide an handle_field() method' )
raise a NotImplementedError with an argument string,raise var0 with argument string,raise NotImplementedError ( 'subclasses of Serializer must provide an handle_fk_field() method' ),raise var0 ( 'subclasses of Serializer must provide an handle_fk_field() method' )
raise a NotImplementedError with an argument string 'subclasses of Serializer must provide an handle_m2m_field() method'.,raise var0 with argument string var2.,raise NotImplementedError ( 'subclasses of Serializer must provide an handle_m2m_field() method' ),raise var0 ( var2 )
raise an NotImplementedError exception with argument string 'subclasses of Storage must provide a created_time() method'.,raise var0 exception with argument string var2.,raise NotImplementedError ( 'subclasses of Storage must provide a created_time() method' ),raise var0 ( var2 )
raise an NotImplementedError exception with argument string 'subclasses of Storage must provide a delete() method'.,raise var0 exception with argument string var2.,raise NotImplementedError ( 'subclasses of Storage must provide a delete() method' ),raise var0 ( var2 )
raise an NotImplementedError exception with argument string 'subclasses of Storage must provide a listdir() method'.,raise var0 exception with argument string var2.,raise NotImplementedError ( 'subclasses of Storage must provide a listdir() method' ),raise var0 ( var2 )
raise an NotImplementedError exception with argument string 'subclasses of Storage must provide a modified_time() method'.,raise var0 exception with argument string var2.,raise NotImplementedError ( 'subclasses of Storage must provide a modified_time() method' ),raise var0 ( var2 )
raise an NotImplementedError exception with argument string 'subclasses of Storage must provide a size() method'.,raise var0 exception with argument string var2.,raise NotImplementedError ( 'subclasses of Storage must provide a size() method' ),raise var0 ( var2 )
raise an NotImplementedError exception with argument string 'subclasses of Storage must provide a url() method'.,raise var0 exception with argument string var2.,raise NotImplementedError ( 'subclasses of Storage must provide a url() method' ),raise var0 ( var2 )
raise an NotImplementedError exception with argument string 'subclasses of Storage must provide an accessed_time() method'.,raise var0 exception with argument string var2.,raise NotImplementedError ( 'subclasses of Storage must provide an accessed_time() method' ),raise var0 ( var2 )
raise an NotImplementedError exception with argument string 'subclasses of Storage must provide an exists() method'.,raise var0 exception with argument string var2.,raise NotImplementedError ( 'subclasses of Storage must provide an exists() method' ),raise var0 ( var2 )
raise an NotImplementedError with an argument string 'subclasses of SyndicationFeed must provide a write() method'.,raise var0 with argument string var2.,raise NotImplementedError ( 'subclasses of SyndicationFeed must provide a write() method' ),raise var0 ( var2 )
raise an NotImplementedError with an argument string 'subclasses of Tokenparser must provide a top() method'.,raise var0 with argument string var2.,raise NotImplementedError ( 'subclasses of Tokenparser must provide a top() method' ),raise var0 ( var2 )
raise an NotImplementedError with an argument string 'subclasses of Widget must provide a render() method'.,raise var0 with argument string var2.,raise NotImplementedError ( 'subclasses of Widget must provide a render() method' ),raise var0 ( var2 )
"raise an NotImplementedError exception with argument string ""This backend doesn't support absolute paths."".",raise var0 exception with argument string var2.,raise NotImplementedError ( 'This backend doesn't support absolute paths.' ),raise var0('This backend doesn't support absolute paths.')
raise an OverflowError exception with an argument string 'dklen too big'.,raise var0 exception with argument string var2.,raise OverflowError ( 'dklen too big' ),raise var0 ( var2 )
raise an exception PageNotAnInteger with string 'That page number is not an integer' as an argument.,raise exception var0 with string var2 as argument.,raise PageNotAnInteger ( 'That page number is not an integer' ),raise var0 ( var2 )
"raise an exception parser.error_class with an argument string ""Not expecting '%s' as infix operator in if tag."",","raise exception parser var1 with argument string var2,",raise parser . error_class (  'Not expecting '%s' as infix operator in if tag.' % self . id  ),raise parser.var1( 'Not expecting '%s' as infix operator in if tag.' % self.id )
"raise an exception parser.error_class with an argument string ""Not expecting '%s' in this position in if tag."",","raise exception parser var1 with argument string var2,",raise parser . error_class (  'Not expecting '%s' in this position in if tag.' % self . id  ),raise parser.var1( 'Not expecting '%s' in this position in if tag.' % self.id )
"raise an exception parser.error_class with an argument string ""Unexpected end of expression in if tag."".",raise exception parser var1 with argument string var2.,raise parser . error_class ( 'Unexpected end of expression in if tag.' ),raise parser . var1 ( 'Unexpected end of expression in if tag.' )
"raise an RawPostDataException exception with an argument string ""You cannot access body after reading from request's data stream"".",raise var0 exception with argument string var2.,raise RawPostDataException ( 'You cannot access body after reading from request's data stream' ),raise var0('You cannot access body after reading from request's data stream')
raise an Resolver404 exception with an argument dictionary containing 1 entry: path for 'path'.,raise var0 exception with argument dict containing 1 entry: path for var2.,raise Resolver404 ( { 'path' : path } ),raise var0 ( { var2 : path } )
raise an Resolver404 exception with an argument dictionary containing 2 entries: new_path for 'path' and tried for 'tried'.,raise var0 exception with argument dict containing 2 entries: var2 for var4 and tried for var5.,"raise Resolver404 ( { 'tried' : tried , 'path' : new_path } )","raise var0 ( { 'tried' : tried , var4 : var2 } )"
"raise an RuntimeError exception with an argument string ""The method to extend accepted command-line arguments by the """,raise var0 exception with argument string var2,raise RuntimeError ( 'The method to extend accepted command-line arguments by the ' 'test management command has changed in Django 1.8. Please ' 'create an add_arguments class method to achieve this.' ),raise var0 ( 'The method to extend accepted command-line arguments by the test management command has changed in Django 1.8.Please create an add_arguments class method to achieve this.' )
"raise an self.error with 2 arguments: None and string ""Unclosed tags: %s "",","raise var0 with 2 arguments: var1 and string var2,","raise self . error ( None , 'Unclosed tags: %s ' % ', ' . join ( parse_until ) )","raise var0 ( var1 , 'Unclosed tags: %s ' % ', ' . join ( parse_until ) )"
"call the method self.error with 2 arguments: token and string ""Empty block tag"", return the result.","call method var0 with 2 arguments: token and string var1, return result.","raise self . error ( token , 'Empty block tag' )","raise var0 ( token , 'Empty block tag' )"
"call the method self.error with 2 arguments: token and string ""Empty variable tag"", return the result.","call method var0 with 2 arguments: token and string var1, return result.","raise self . error ( token , 'Empty variable tag' )","raise var0 ( token , 'Empty variable tag' )"
"raise an self.error exception with 2 arguments: token and string  ""Invalid block tag: '%s', expected %s"",","raise var0 exception with 2 arguments: token and string var1,","raise self . error ( token , 'Invalid block tag: '%s', expected %s' %  ( command , get_text_list ( [ ''%s'' % p for p in parse_until ] ) ) )","raise var0(token, 'Invalid block tag: '%s', expected %s' % (command, get_text_list([''%s'' % p for p in parse_until])))"
"where '%s' is replaced with command and result of the function get_text_list called with an argument list,   with p converted into a string and surrounded with single quotes for every p in parse_until.   call the method self.error with 2 arguments: token and string ""Invalid block tag: '%s'"", where '%s' is replaced with command,","var0 var2 is replaced with command and result of function var4 called with argument list var6 with p converted into string and surrounded with single quotes for every p in var8 call method var10 with 2 arguments: token and string ""Invalid block tag: var2"" var0 var2 is replaced with command,","raise self . error ( token , 'Invalid block tag: '%s'' % command )","raise var10 ( token , 'var12 block tag: var2' % command )"
"raise an exception self.error_class with an argument string """"Unused '%s' at end of if expression"",","raise exception self var1 with argument string var2Unused var4 at end of if expression"",",raise self . error_class ( 'Unused '%s' at end of if expression.' %  self . current_token . display ( ) ),raise self . var1 ( 'var3 var4 at end of if expression.' % self . current_token . display ( ) )
raise an self.exception exception.,raise var0 exception.,raise self . exception,raise var0
"and elements of parse_until joined into a string, separated by string ', '.   raise an self.source_error exception with 2 arguments: source and msg.","and elements of var0 joined into string, separated by string var2 var3 raise self var5 exception with 2 arguments: source and msg.","raise self . source_error ( source , msg )","raise self . var5 ( source , msg )"
raise self.warning.,raise var0 ,raise self . warning,raise var0
raise a SerializerDoesNotExist exception with an argument format.,raise var0 exception with argument format.,raise SerializerDoesNotExist ( format ),raise var0 ( format )
"raise an SignatureExpired exception with an argument string 'Signature age %s > %s seconds', where '%s' is replaced by age and max_age, respectively.",raise var0 exception with argument string var2 var3 var4 is replaced by age and var5 respectively.,"raise SignatureExpired ( 'Signature age %s > %s seconds' % ( age , max_age ) )","raise var0 ( var2 % ( age , var5 ) )"
raise an exception StopFutureHandlers.,raise exception var0 ,raise StopFutureHandlers ( ),raise var0 ( )
raise an StopIteration exception.,raise var0 exception.,raise StopIteration,raise var0
raise an StopIteration exception.,raise var0 exception.,raise StopIteration ( ),raise var0 ( )
raise an StopIteration.,raise var0 ,raise StopIteration ( ),raise var0 ( )
"raise an StopIteration exception,","raise var0 exception,",raise StopIteration ( ),raise var0 ( )
"raise an SuspiciousFileOperation exception with string ""Attempted access to '%s' denied."" as argument, replace '%s' with name.","raise var0 exception with string var2 as argument, replace var3 with name.",raise SuspiciousFileOperation ( 'Attempted access to '%s' denied.' % name ),raise var0 ( 'Attempted access to var3 denied.' % name )
"raise SuspiciousMultipartForm exception with an argument string, ""The multipart parser got stuck, which shouldn't happen with""","raise var0 exception with argument string, var2","raise SuspiciousMultipartForm (  'The multipart parser got stuck, which shouldn't happen with'  ' normal uploaded files. Check for malicious upload activity;'  ' if there is none, report this to the Django developers.'  )","raise var0( 'The multipart parser got stuck, which shouldn't happen with'  ' normal uploaded files.Check for malicious upload activity;'  ' if there is none, report this to the Django developers.' )"
"raise an SyntaxError with an argument string ""Translation blocks must not include other block tags: %s (%sline %d)"",","raise var0 with argument string var2,","raise SyntaxError ( 'Translation blocks must not include other block tags: %s (%sline %d)' % ( t . contents , filemsg , t . lineno ) )","raise var0 ( 'Translation blocks must not include other block tags: %s(%sline %d)' % ( t . contents , filemsg , t . lineno ) )"
"raise an SystemRestart exception,","raise var0 exception,",raise SystemRestart,raise var0
raise an TemplateDoesNotExist exception.,raise var0 exception.,raise TemplateDoesNotExist,raise var0
"raise an TemplateDoesNotExist exception with an argument, elements of not_found joined into a string, separated with ', '","raise var0 exception with argument, elements of var2 joined into string, separated with var4","raise TemplateDoesNotExist ( ', ' . join ( not_found ) )",raise var0 ( var4 . join ( var2 ) )
"raise an TemplateDoesNotExist exception with an argument string ""No template names provided"".",raise var0 exception with argument string var2.,raise TemplateDoesNotExist ( 'No template names provided' ),raise var0 ( 'No template names provided' )
raise an TemplateDoesNotExist exception with an argument error_msg.,raise var0 exception with argument var1 ,raise TemplateDoesNotExist ( error_msg ),raise var0 ( var1 )
raise an TemplateDoesNotExist exception with an argument name.,raise var0 exception with argument name.,raise TemplateDoesNotExist ( name ),raise var0 ( name )
raise an TemplateDoesNotExist exception with an argument template_name.,raise var0 exception with argument var1 ,raise TemplateDoesNotExist ( template_name ),raise var0 ( var1 )
"raise an TemplateEncodingError exception with an argument ""Templates can only be constructed from unicode or UTF-8 strings."".",raise var0 exception with argument var2.,raise TemplateEncodingError ( 'Templates can only be constructed ' 'from unicode or UTF-8 strings.' ),raise var0 ( 'Templates can only be constructed from unicode or UTF-8 strings.' )
raise TemplateSyntaxError(,raise TemplateSyntaxError(,"raise TemplateSyntaxError (  ''%s' did not receive value(s) for the argument(s): %s' %  ( name , ', ' . join ( ''%s'' % p for p in unhandled_params ) ) )","raise var0( ''%s' did not receive value(s) for the argument(s): %s' % (name, ', '.join(''%s'' % p for p in unhandled_params)))"
"raise an TemplateSyntaxError exception ""'%s' is decorated with takes_context=True so it must have a first argument of 'context'"",","raise var0 exception var2,",raise TemplateSyntaxError (  ''%s' is decorated with takes_context=True so it must '  'have a first argument of 'context'' % name ),raise var0( ''%s' is decorated with takes_context=True so it must '  'have a first argument of 'context'' % name)
"raise an TemplateSyntaxError exception with an argument string ""'%s' received multiple values for keyword argument '%s'"",","raise var0 exception with argument string var2,","raise TemplateSyntaxError (  ''%s' received multiple values for keyword argument '%s'' %  ( name , param ) )","raise var0( ''%s' received multiple values for keyword argument '%s'' % (name, param))"
"raise an TemplateSyntaxError exception with an argument string ""'%s' received some positional argument(s) after some keyword argument(s)"", where '%s' is replaced with name.",raise var0 exception with argument string var2 var4 var3 is replaced with name.,raise TemplateSyntaxError (  ''%s' received some positional argument(s) after some '  'keyword argument(s)' % name ),raise var0 ( 'var3 received some positional argument(s) after some keyword argument(s)' % name )
"raise an TemplateSyntaxError exception with an argument string ""'%s' received too many positional arguments"",","raise var0 exception with argument string var2,",raise TemplateSyntaxError (  ''%s' received too many positional arguments' %  name ),raise var0( ''%s' received too many positional arguments' %  name)
"raise an TemplateSyntaxError exception with an argument ""'%s' received unexpected keyword argument '%s'"",","raise var0 exception with argument var2,","raise TemplateSyntaxError (  ''%s' received unexpected keyword argument '%s'' %  ( name , param ) )","raise var0( ''%s' received unexpected keyword argument '%s'' % (name, param))"
"raise an TemplateSyntaxError exception with an argument string, ""'%s' tag takes at least 2 arguments and the second last argument","raise var0 exception with argument string, ""var2 tag takes at least 2 arguments and second last argument",raise TemplateSyntaxError (  ''%s' tag takes at least 2 arguments and the '  'second last argument must be 'as'' % function_name ),raise var0 ( 'var2 tag takes at least 2 arguments and the ' 'second last argument must be ' as '' % function_name )
"raise an TemplateSyntaxError exception with an argument string '""filter %s"" is not permitted.  Use the ""autoescape"" tag instead.',","raise var0 exception with argument string var2,",raise TemplateSyntaxError ( ''filter %s' is not permitted.  Use the 'autoescape' tag instead.' % filter_name ),raise var0(''filter %s' is not permitted. Use the 'autoescape' tag instead.' % filter_name)
"raise an TemplateSyntaxError exception with an argument string '""with"" in %r tag needs at least one keyword argument.',","raise var0 exception with argument string var2,",raise TemplateSyntaxError ( ''with' in %r tag needs at least '  'one keyword argument.' % bits [ 0 ] ),raise var0(''with' in %r tag needs at least '  'one keyword argument.' % bits [0])
"raise an TemplateSyntaxError exception with an argument string 'The %r option was specified more than once.',","raise var0 exception with argument string var2,",raise TemplateSyntaxError ( 'The %r option was specified more ' 'than once.' % option ),raise var0 ( 'The %r option was specified more than once.' % option )
"raise an TemplateSyntaxError with an argument string 'Unknown argument for %r tag: %r.', where '%r' is replaced with first element of bits and options.",raise var0 with argument string var2 var3 var4 is replaced with first element of bits and options.,"raise TemplateSyntaxError ( 'Unknown argument for %r tag: %r.' % ( bits [ 0 ] , option ) )","raise var0 ( var2 % ( bits [ 0 ] , option ) )"
"raise an TemplateSyntaxError exception with an argument string ""'%s' cannot appear more than once in the same template"",","raise var0 exception with argument string var2,",raise TemplateSyntaxError ( ''%s' cannot appear more than once in the same template' % bits [ 0 ] ),raise var0(''%s' cannot appear more than once in the same template' % bits [0])
"raise an TemplateSyntaxError exception with an argument string ""'%s' is not a valid tag library: %s"",","raise var0 exception with argument string var2,","raise TemplateSyntaxError ( ''%s' is not a valid tag library: %s' %  ( taglib , e ) )","raise var0(''%s' is not a valid tag library: %s' % (taglib, e))"
"raise an TemplateSyntaxError exception with an argument string ""'%s' is not a valid tag or filter in tag library '%s'"",","raise var0 exception with argument string var2,","raise TemplateSyntaxError ( ''%s' is not a valid tag or filter in tag library '%s'' %  ( name , taglib ) )","raise var0(''%s' is not a valid tag or filter in tag library '%s'' % (name, taglib))"
"raise an TemplateSyntaxError exception with an argument string ""'%s' tag takes only one argument"",","raise var0 exception with argument string var2,",raise TemplateSyntaxError ( ''%s' tag takes only one argument' % bits [ 0 ] ),raise var0(''%s' tag takes only one argument' % bits [0])
"raise an TemplateSyntaxError exception with an argument string ""'%s' tag with name '%s' appears more than once"",","raise var0 exception with argument string var2,","raise TemplateSyntaxError ( ''%s' tag with name '%s' appears more than once' % ( bits [ 0 ] , block_name ) )","raise var0(''%s' tag with name '%s' appears more than once' %(bits [0], block_name))"
"raise an TemplateSyntaxError exception with an argument string ""'%s' takes at least one argument (path to a view)"",","raise var0 exception with argument string var2,",raise TemplateSyntaxError ( ''%s' takes at least one argument'  ' (path to a view)' % bits [ 0 ] ),raise var0(''%s' takes at least one argument'  '(path to a view)' % bits [0])
"raise an TemplateSyntaxError exception with an argument string ""'%s' takes one argument"", where '%s' is replaced with first element of bits.",raise var0 exception with argument string var2 var4 var3 is replaced with first element of bits.,raise TemplateSyntaxError ( ''%s' takes one argument' % bits [ 0 ] ),raise var0 ( 'var3 takes one argument' % bits [ 0 ] )
"raise an TemplateSyntaxError exception with an argument string ""'autoescape' argument should be 'on' or 'off'"".",raise var0 exception with argument string var2.,raise TemplateSyntaxError ( ''autoescape' argument should be 'on' or 'off'' ),raise var0(''autoescape' argument should be 'on' or 'off'')
"raise an TemplateSyntaxError with an argument string ""'autoescape' tag requires exactly one argument."".",raise var0 with argument string var2.,raise TemplateSyntaxError ( ''autoescape' tag requires exactly one argument.' ),raise var0(''autoescape' tag requires exactly one argument.')
"raise an TemplateSyntaxError exception with an argument string ""'cycle' tag requires at least two arguments"".",raise var0 exception with argument string var2.,raise TemplateSyntaxError ( ''cycle' tag requires at least two arguments' ),raise var0(''cycle' tag requires at least two arguments')
"raise an TemplateSyntaxError exception with an argument string ""'firstof' statement requires at least one argument"".",raise var0 exception with argument string var2.,raise TemplateSyntaxError ( ''firstof' statement requires at least one argument' ),raise var0(''firstof' statement requires at least one argument')
"raise an TemplateSyntaxError exception with an argument string ""'for' statements should have at least four words: %s"",","raise var0 exception with argument string var2,",raise TemplateSyntaxError ( ''for' statements should have at least four'  ' words: %s' % token . contents ),raise var0(''for' statements should have at least four'  ' words: %s' % token.contents)
"raise an TemplateSyntaxError exception with an argument string ""'for' statements should use the format 'for x in y': %s"",","raise var0 exception with argument string var2,",raise TemplateSyntaxError ( ''for' statements should use the format'  ' 'for x in y': %s' % token . contents ),raise var0(''for' statements should use the format'  ' 'for x in y': %s' % token.contents)
"raise an TemplateSyntaxError exception with an argument string ""'for' tag received an invalid argument: %s"",","raise var0 exception with argument string var2,",raise TemplateSyntaxError ( ''for' tag received an invalid argument:'  ' %s' % token . contents ),raise var0(''for' tag received an invalid argument:'  ' %s' % token.contents)
"raise an TemplateSyntaxError exception with an argument string ""'now' statement takes one argument"".",raise var0 exception with argument string var2.,raise TemplateSyntaxError ( ''now' statement takes one argument' ),raise var0(''now' statement takes one argument')
"raise an TemplateSyntaxError exception with an argument string ""'regroup' tag takes five arguments"".",raise var0 exception with argument string var2.,raise TemplateSyntaxError ( ''regroup' tag takes five arguments' ),raise var0(''regroup' tag takes five arguments')
"raise an TemplateSyntaxError exception with an argument string ""'ssi' tag takes one argument: the path to the file to be included"".",raise var0 exception with argument string var2.,raise TemplateSyntaxError ( ''ssi' tag takes one argument: the path to'  ' the file to be included' ),raise var0(''ssi' tag takes one argument: the path to'  ' the file to be included')
"raise an TemplateSyntaxError exception with an argument string ""'templatetag' statement takes one argument"".",raise var0 exception with argument string var2.,raise TemplateSyntaxError ( ''templatetag' statement takes one argument' ),raise var0(''templatetag' statement takes one argument')
"raise an TemplateSyntaxError exception with an argument string ""%r expected at least one variable assignment"",","raise var0 exception with argument string var2,",raise TemplateSyntaxError ( '%r expected at least one variable ' 'assignment' % bits [ 0 ] ),raise var0 ( '%r expected at least one variable assignment' % bits [ 0 ] )
"raise TemplateSyntaxError(""%r must be the first tag in the template."", where '%s' is replaced with node.",raise TemplateSyntaxError(var2 var3 var4 is replaced with node.,raise TemplateSyntaxError ( '%r must be the first tag ' 'in the template.' % node ),raise var0 ( '%r must be the first tag in the template.' % node )
"raise an TemplateSyntaxError exception with an argument string ""%r received an invalid token: %r"", where '%r' is replaced with,","raise var0 exception with argument string var2 var3 var4 is replaced with,","raise TemplateSyntaxError ( '%r received an invalid token: %r' % ( bits [ 0 ] , remaining_bits [ 0 ] ) )","raise var0 ( '%r received an invalid token: %r' % ( bits [ 0 ] , remaining_bits [ 0 ] ) )"
"raise an TemplateSyntaxError with an argument string ""%r tag takes at least one argument: the name of the template to be included."",","raise var0 with argument string var2,",raise TemplateSyntaxError ( '%r tag takes at least one argument: the name of the template to be included.' % bits [ 0 ] ),raise var0 ( '%r tag takes at least one argument: the name of the template to be included.' % bits [ 0 ] )
"raise an TemplateSyntaxError exception with an argument string ""%r takes two arguments"",","raise var0 exception with argument string var2,",raise TemplateSyntaxError ( '%r takes two arguments' % bits [ 0 ] ),raise var0 ( '%r takes two arguments' % bits [ 0 ] )
"raise an TemplateSyntaxError exception with an argument string ""%s requires %d arguments, %d provided"",","raise var0 exception with argument string var2,","raise TemplateSyntaxError ( '%s requires %d arguments, %d provided' % ( name , alen - dlen , plen ) )","raise var0 ( '%s requires %d arguments, %d provided' % ( name , alen - dlen , plen ) )"
"raise an TemplateSyntaxError exception with an argument string ""back called without some previous parsing"".",raise var0 exception with argument string var2.,raise TemplateSyntaxError ( 'back called without some previous ' 'parsing' ),raise var0 ( 'back called without some previous parsing' )
"raise an TemplateSyntaxError exception with an argument ""Could not find variable at start of %s."", replace '%s' with token.","raise var0 exception with argument var2, replace var3 with token.",raise TemplateSyntaxError ( 'Could not find variable at ' 'start of %s.' % token ),raise var0 ( 'Could not find variable at start of %s.' % token )
"raise an TemplateSyntaxError exception with an argument string ""Could not parse some characters: %s|%s|%s"",","raise var0 exception with argument string var2,","raise TemplateSyntaxError ( 'Could not parse some characters: ' '%s|%s|%s' % ( token [ : upto ] , token [ upto : start ] , token [ start : ] ) )","raise var0 ( 'Could not parse some characters: %s|%s|%s' % ( token [ : upto ] , token [ upto : start ] , token [ start : ] ) )"
"raise an TemplateSyntaxError exception with an argument string ""Could not parse the remainder: '%s' from '%s'"",","raise var0 exception with argument string var2,","raise TemplateSyntaxError ( 'Could not parse the remainder: '%s' '  'from '%s'' % ( token [ upto : ] , token ) )","raise var0('Could not parse the remainder: '%s' '  'from '%s'' %(token [upto:], token))"
"raise an TemplateSyntaxError exception with an argument string ""expected another tag, found end of string: %s"",","raise var0 exception with argument string var2,","raise TemplateSyntaxError ( 'expected another tag, found ' 'end of string: %s' % subject )","raise var0 ( 'expected another tag, found end of string: %s' % subject )"
"raise an TemplateSyntaxError exception with an argument string ""Invalid arguments provided to assignment_tag"".",raise var0 exception with argument string var2.,raise TemplateSyntaxError ( 'Invalid arguments provided to assignment_tag' ),raise var0 ( 'Invalid arguments provided to assignment_tag' )
"raise an TemplateSyntaxError exception with an argument string ""Invalid arguments provided to simple_tag"".",raise var0 exception with argument string var2.,raise TemplateSyntaxError ( 'Invalid arguments provided to simple_tag' ),raise var0 ( 'Invalid arguments provided to simple_tag' )
"raise an TemplateSyntaxError with an argument string ""Invalid filter: '%s'"", substitute '%s' with filter_name.","raise var0 with argument string var2, substitute var3 with var4 ",raise TemplateSyntaxError ( 'Invalid filter: '%s'' % filter_name ),raise var0 ( 'Invalid filter: var3' % var4 )
"raise an TemplateSyntaxError exception with an argument string ""Invalid syntax in widthratio tag. Expecting 'as' keyword"".",raise var0 exception with argument string var2.,raise TemplateSyntaxError ( 'Invalid syntax in widthratio tag. Expecting ' as ' keyword' ),raise var0 ( 'Invalid syntax in widthratio tag.Expecting ' as ' keyword' )
"raise an TemplateSyntaxError exception with an argument string ""Invalid templatetag argument: '%s'. Must be one of: %s"",","raise var0 exception with argument string var2,","raise TemplateSyntaxError ( 'Invalid templatetag argument: '%s'.'  ' Must be one of: %s' %  ( tag , list ( TemplateTagNode . mapping ) ) )","raise var0('Invalid templatetag argument: '%s'.'  ' Must be one of: %s' % (tag, list(TemplateTagNode.mapping)))"
"raise an TemplateSyntaxError exception with an argument string ""Malformed arguments to url tag"".",raise var0 exception with argument string var2.,raise TemplateSyntaxError ( 'Malformed arguments to url tag' ),raise var0 ( 'Malformed arguments to url tag' )
"raise an TemplateSyntaxError exception with an argument string ""Named cycle '%s' does not exist"", where '%s' is replaced with name.",raise var0 exception with argument string var2 var4 var3 is replaced with name.,raise TemplateSyntaxError ( 'Named cycle '%s' does not exist' % name ),raise var0 ( 'Named cycle var3 does not exist' % name )
"raise an TemplateSyntaxError exception with an argument string ""next-to-last argument to 'regroup' tag must be 'as'"".",raise var0 exception with argument string var2.,raise TemplateSyntaxError ( 'next-to-last argument to 'regroup' tag must'  ' be 'as'' ),raise var0('next-to-last argument to 'regroup' tag must'  ' be 'as'')
"raise an TemplateSyntaxError exception with an argument string ""No named cycles in template. '%s' is not defined"",","raise var0 exception with argument string var2,",raise TemplateSyntaxError ( 'No named cycles in template. '%s' is not defined' % name ),raise var0('No named cycles in template.'%s' is not defined' % name)
"raise an TemplateSyntaxError exception with an argument string ""Only 'silent' flag is allowed after cycle's name, not '%s'."",","raise var0 exception with argument string var2,","raise TemplateSyntaxError ( 'Only 'silent' flag is allowed after cycle's name, not '%s'.' % args [ - 1 ] )","raise var0('Only 'silent' flag is allowed after cycle's name, not '%s'.' % args [- 1])"
"raise an TemplateSyntaxError exception with an argument string ""Searching for value. Unexpected end of string in column %d: %s"",","raise var0 exception with argument string var2,","raise TemplateSyntaxError ( 'Searching for value. ' 'Unexpected end of string in column %d: %s' % ( i , subject ) )","raise var0 ( 'Searching for value.Unexpected end of string in column %d: %s' % ( i , subject ) )"
"raise an TemplateSyntaxError exception with an argument ""Searching for value. Expected another value but found end of string: %s"",","raise var0 exception with argument var2,",raise TemplateSyntaxError ( 'Searching for value. Expected another ' 'value but found end of string: %s' % subject ),raise var0 ( 'Searching for value.Expected another value but found end of string: %s' % subject )
"raise an TemplateSyntaxError exception with an argument string ""Searching for value. Unexpected end of string in column %d: %s"",","raise var0 exception with argument string var2,","raise TemplateSyntaxError ( 'Searching for value. Unexpected ' 'end of string in column %d: %s' % ( i , subject ) )","raise var0 ( 'Searching for value.Unexpected end of string in column %d: %s' % ( i , subject ) )"
"raise an TemplateSyntaxError exception with an argument string ""Second (optional) argument to %s tag must be 'parsed'"",","raise var0 exception with argument string var2,",raise TemplateSyntaxError ( 'Second (optional) argument to %s tag'  ' must be 'parsed'' % bits [ 0 ] ),raise var0('Second(optional) argument to %s tag'  ' must be 'parsed'' % bits [0])
"raise an TemplateSyntaxError exception with an argument string ""second argument to 'regroup' tag must be 'by'"".",raise var0 exception with argument string var2.,raise TemplateSyntaxError ( 'second argument to 'regroup' tag must be 'by'' ),raise var0('second argument to 'regroup' tag must be 'by'')
"or first element of var equals '_',   raise an TemplateSyntaxError exception with an argument string ""Variables and attributes may not begin with underscores: '%s'"",","or first element of var equals var0 var1 raise var2 exception with argument string var4,",raise TemplateSyntaxError ( 'Variables and attributes may '  'not begin with underscores: '%s'' %  var ),raise var2('var5 and attributes may 'var1'not begin with underscores: 'var6'' %  var)
"raise an TemplateSyntaxError exception with an argument string ""widthratio final argument must be a number"".",raise var0 exception with argument string var2.,raise TemplateSyntaxError ( 'widthratio final argument must be a number' ),raise var0 ( 'widthratio final argument must be a number' )
"raise an TemplateSyntaxError exception with an argument string ""widthratio takes at least three arguments"".",raise var0 exception with argument string var2.,raise TemplateSyntaxError ( 'widthratio takes at least three arguments' ),raise var0 ( 'widthratio takes at least three arguments' )
raise an TemplateSyntaxError exception with an argument error_msg.,raise var0 exception with argument var1 ,raise TemplateSyntaxError ( error_msg ),raise var0 ( var1 )
"raise a TypeError exception,","raise var0 exception,",raise TypeError,raise var0
"raise an TypeError with an argument string ""The argument `field` must be `None` when the `error`argument contains errors for multiple fields."".",raise var0 with argument string var2.,raise TypeError ( 'The argument `field` must be `None` when the `error` ' 'argument contains errors for multiple fields.' ),raise var0 ( 'The argument `field` must be `None` when the `error` argument contains errors for multiple fields.' )
"raise an TypeError exception with an argument string ""Variable must be a string or number, got %s"", replace '%s' with type of var.","raise var0 exception with argument string var2, replace var3 with type of var.","raise TypeError ( 'Variable must be a string or number, got %s' % type ( var ) )","raise var0 ( 'Variable must be a string or number, got %s' % type ( var ) )"
raise an TypeError with an string 'formfield_callback must be a function or callable'.,raise var0 with string var2.,raise TypeError ( 'formfield_callback must be a function or callable' ),raise var0 ( var2 )
raise an TypeError exception with an argument string 'In order to allow non-dict objects to be serialized set the safe parameter to False'.,raise var0 exception with argument string var2.,raise TypeError ( 'In order to allow non-dict objects to be ' 'serialized set the safe parameter to False' ),raise var0 ( 'In order to allow non-dict objects to be serialized set the safe parameter to False' )
raise an TypeError exception with an argument string 'Level not an integer or a valid string: %r' formated with level.,raise var0 exception with argument string var2 formated with level.,raise TypeError ( 'Level not an integer or a ' 'valid string: %r' % level ),raise var0 ( 'Level not an integer or a valid string: %r' % level )
raise an TypeError exception with an argument string 'other_dict must be a mapping (dictionary-like) object.'.,raise var0 exception with argument string var2.,raise TypeError ( 'other_dict must be a mapping (dictionary-like) object.' ),raise var0 ( 'other_dict must be a mapping(dictionary-like) object.' )
"raise an TypeError exception with an argument sting ""can't delete _wrapped."".",raise var0 exception with argument sting var2.,raise TypeError ( 'can't delete _wrapped.' ),raise var0('can't delete _wrapped.')
"raise an TypeError exception with an argument string ""end must be None or a string"".",raise var0 exception with argument string var2.,raise TypeError ( 'end must be None or a string' ),raise var0 ( 'end must be None or a string' )
"raise an TypeError exception with an argument string ""If the flags are set, regex must be a regular expression string."".",raise var0 exception with argument string var2.,"raise TypeError ( 'If the flags are set, regex must be a regular expression string.' )","raise var0 ( 'If the flags are set, regex must be a regular expression string.' )"
"raise an TypeError exception with an argument string ""invalid keyword arguments to print()"".",raise var0 exception with argument string var2.,raise TypeError ( 'invalid keyword arguments to print()' ),raise var0 ( 'invalid keyword arguments to print()' )
"unpacked list args and unpacked dictionary kw, return the result.   raise an TypeError exception with an argument sting ""Lazy object returned unexpected type."".","unpacked list var0 and unpacked dict kw, return result var1 raise var2 exception with argument sting var4.",raise TypeError ( 'Lazy object returned unexpected type.' ),raise var2 ( 'Lazy object returned unexpected type.' )
"raise an TypeError exception with an argument string ""Non-integer base36 conversion input."".",raise var0 exception with argument string var2.,raise TypeError ( 'Non-integer base36 conversion input.' ),raise var0 ( 'Non-integer base36 conversion input.' )
"raise an TypeError with an argument string ""relative imports require the 'package' argument"".",raise var0 with argument string var2.,raise TypeError ( 'relative imports require the 'package' argument' ),raise var0('relative imports require the 'package' argument')
"raise an TypeError exception with an argument string ""sep must be None or a string"".",raise var0 exception with argument string var2.,raise TypeError ( 'sep must be None or a string' ),raise var0 ( 'sep must be None or a string' )
"raise an TypeError exception with an argument: result of the method illegal_formatting.group called with an argument,","raise var0 exception with argument: result of method var1 group called with argument,",raise TypeError ( 'strftime of dates before 1900 does not handle' + illegal_formatting . group ( 0 ) ),raise var0 ( 'strftime of dates before 1900 does not handle' + var1 . group ( 0 ) )
"raise an TypeError with an argument string ""update expected at most 1 arguments, got %d"" formated with length of args.",raise var0 with argument string var2 formated with length of var3 ,"raise TypeError ( 'update expected at most 1 arguments, got %d' % len ( args ) )","raise var0 ( 'update expected at most 1 arguments, got %d' % len ( var3 ) )"
"with new_class.__name__, '%(opt)s' is replaced with opt and '%(value)s' is replaced with value.   raise an TypeError exception with an argument msg.","with var0 __name__, var2 is replaced with opt and var3 is replaced with value var5 raise var6 exception with argument msg.",raise TypeError ( msg ),raise var6 ( msg )
raise an TypeError with an argument s.,raise var0 with argument var1,raise TypeError ( s ),raise var0 ( s )
"raise an UnrecognizedArchiveFormat exception with an argument string ""File object not a recognized archive format."".",raise var0 exception with argument string var2.,raise UnrecognizedArchiveFormat ( 'File object not a recognized archive format.' ),raise var0 ( 'File object not a recognized archive format.' )
"raise an UnrecognizedArchiveFormat exception with an argument string ""Path not a recognized archive format: %s"",","raise var0 exception with argument string var2,",raise UnrecognizedArchiveFormat ( 'Path not a recognized archive format: %s' % filename ),raise var0 ( 'Path not a recognized archive format: %s' % filename )
raise an v exception.,raise v exception.,raise v,raise v
"raise ValidationError with 2 arguments: return value of the function _ called with an argument string,","raise var0 with 2 arguments: return value of function var1 called with argument string,","raise ValidationError ( _ ( 'ManagementForm data is missing or has been tampered with' ) , code = 'missing_management_form' , )","raise var0 ( var1 ( 'ManagementForm data is missing or has been tampered with' ) , code = 'missing_management_form' )"
"raise an ValidationError with 3 arguments: value under the 'invalid_choice' key of the self.error_messages dictionary,","raise var0 with 3 arguments: value under var2 key of self var4 dict,","raise ValidationError ( self . error_messages [ 'invalid_choice' ] , code = 'invalid_choice' , params = { 'value' : choice } , )","raise var0 ( self . var4 [ var2 ] , code = var2 , params = { 'value' : choice } )"
"raise an ValidationError with 3 arguments: value under the 'invalid_choice' key of the self.error_messages dictionary,","raise var0 with 3 arguments: value under var2 key of self var4 dict,","raise ValidationError ( self . error_messages [ 'invalid_choice' ] , code = 'invalid_choice' , params = { 'value' : val } , )","raise var0 ( self . var4 [ var2 ] , code = var2 , params = { 'value' : val } )"
"raise an ValidationError with 3 arguments: dictionary self.error_messages value under the key 'invalid_choice',","raise var0 with 3 arguments: dict self var3 value under key var4,","raise ValidationError ( self . error_messages [ 'invalid_choice' ] , code = 'invalid_choice' , params = { 'value' : val } , )","raise var0 ( self . var3 [ var4 ] , code = var4 , params = { 'value' : val } )"
"raise an ValidationError with 3 arguments: value under the 'invalid_choice' key of the self.error_messages dictionary,","raise var0 with 3 arguments: value under var2 key of self var4 dict,","raise ValidationError ( self . error_messages [ 'invalid_choice' ] , code = 'invalid_choice' , params = { 'value' : value } , )","raise var0 ( self . var4 [ var2 ] , code = var2 , params = { 'value' : value } )"
"raise an ValidationError with 3 arguments: dictionary self.error_messages value under the key 'invalid_pk_value',","raise var0 with 3 arguments: dict self var3 value under key var4,","raise ValidationError ( self . error_messages [ 'invalid_pk_value' ] , code = 'invalid_pk_value' , params = { 'pk' : pk } , )","raise var0 ( self . var3 [ var4 ] , code = var4 , params = { 'pk' : pk } )"
"raise an ValidationError with 3 arguments: value under the 'max_decimal_places' key of the self.error_messages dictionary,","raise var0 with 3 arguments: value under var2 key of self var4 dict,","raise ValidationError ( self . error_messages [ 'max_decimal_places' ] , code = 'max_decimal_places' , params = { 'max' : self . decimal_places } , )","raise var0 ( self . var4 [ var2 ] , code = var2 , params = { 'max' : self . decimal_places } )"
"raise an ValidationError with 3 arguments: value under the 'max_digits' key of the self.error_messages dictionary,","raise var0 with 3 arguments: value under var2 key of self var4 dict,","raise ValidationError ( self . error_messages [ 'max_digits' ] , code = 'max_digits' , params = { 'max' : self . max_digits } , )","raise var0 ( self . var4 [ var2 ] , code = var2 , params = { 'max' : self . max_digits } )"
"self.max_digits and self.decimal_places,   raise an ValidationError with 3 arguments: value under the 'max_whole_digits' key of the self.error_messages dictionary,","self var1 and self var3 raise var5 with 3 arguments: value under var7 key of self var9 dict,","raise ValidationError ( self . error_messages [ 'max_whole_digits' ] , code = 'max_whole_digits' , params = { 'max' : ( self . max_digits - self . decimal_places ) } , )","raise var5 ( self . var9 [ var7 ] , code = var7 , params = { 'max' : self . var1 - self . var3 } )"
"raise a ValidationError exception with 2 arguments: return value of the function _ with an string argument 'Enter a valid integer.',","raise var0 exception with 2 arguments: return value of function var2 with string argument var3,","raise ValidationError ( _ ( 'Enter a valid integer.' ) , code = 'invalid' )","raise var0 ( var2 ( var3 ) , code = 'invalid' )"
"raise a ValidationError exception with 2 arguments: return value of the function _ called with an argument string 'Enter a valid IPv4 or IPv6 address.', and code set to string 'invalid'.","raise var0 exception with 2 arguments: return value of function var2 called with argument string var3, and code set to string var4.","raise ValidationError ( _ ( 'Enter a valid IPv4 or IPv6 address.' ) , code = 'invalid' )","raise var0 ( var2 ( var3 ) , code = 'invalid' )"
"raise a ValidationError exception with 2 arguments: return value of the function _ called with an argument string 'Enter a valid IPv6 address.', and code set to string 'invalid'.","raise var0 exception with 2 arguments: return value of function var2 called with argument string var3, and code set to string var4.","raise ValidationError ( _ ( 'Enter a valid IPv6 address.' ) , code = 'invalid' )","raise var0 ( var2 ( var3 ) , code = 'invalid' )"
raise an ValidationError exception with 2 arguments: error_message and code as a string 'invalid'.,raise var0 exception with 2 arguments: var2 and code as string var4.,"raise ValidationError ( error_message , code = 'invalid' )","raise var0 ( var2 , code = var4 )"
"raise an ValidationError exception with an argument errors,","raise var0 exception with argument errors,",raise ValidationError ( errors ),raise var0 ( errors )
raise an ValidationError with an argument errors.,raise var0 with argument errors.,raise ValidationError ( errors ),raise var0 ( errors )
raise an ValidationError exception with an argument errors.,raise var0 exception with argument errors.,raise ValidationError ( errors ),raise var0 ( errors )
raise an ValidationError with 2 arguments: value under the 'contradiction' key of the self.error_messages dictionary and code set to 'contradiction'.,raise var0 with 2 arguments: value under var2 key of self var5 dict and code set to var2.,"raise ValidationError ( self . error_messages [ 'contradiction' ] , code = 'contradiction' )","raise var0 ( self . var5 [ var2 ] , code = var2 )"
raise an ValidationError with 2 arguments: value under the 'empty' key of the self.error_messages dictionary and code set to 'empty'.,raise var0 with 2 arguments: value under var2 key of self var5 dict and code set to var2.,"raise ValidationError ( self . error_messages [ 'empty' ] , code = 'empty' )","raise var0 ( self . var5 [ var2 ] , code = var2 )"
"raise an ValidationError with 2 arguments: self.error_messages dictionary value under the 'invalid_choice' key,","raise var0 with 2 arguments: self var3 dict value under var4 key,","raise ValidationError ( self . error_messages [ 'invalid_choice' ] , code = 'invalid_choice' )","raise var0 ( self . var3 [ var4 ] , code = var4 )"
"raise an ValidationError exception with 2 arguments: value under the 'invalid_choice' key of the self.error_messages dictionary,","raise var0 exception with 2 arguments: value under var2 key of self var4 dict,","raise ValidationError ( self . error_messages [ 'invalid_choice' ] , code = 'invalid_choice' )","raise var0 ( self . var4 [ var2 ] , code = var2 )"
raise an ValidationError with 2 arguments: value under the 'invalid_date' key of the self.error_messages dictionary and code set to string 'invalid_date'.,raise var0 with 2 arguments: value under var2 key of self var5 dict and code set to string var2.,"raise ValidationError ( self . error_messages [ 'invalid_date' ] , code = 'invalid_date' )","raise var0 ( self . var5 [ var2 ] , code = var2 )"
raise an ValidationError with 2 arguments: value under the 'invalid_list' key of the self.error_messages dictionary and code set to 'invalid_list'.,raise var0 with 2 arguments: value under var2 key of self var5 dict and code set to var2.,"raise ValidationError ( self . error_messages [ 'invalid_list' ] , code = 'invalid_list' )","raise var0 ( self . var5 [ var2 ] , code = var2 )"
raise an ValidationError with 2 arguments: value under the 'invalid_time' key of the self.error_messages dictionary and code set to string 'invalid_time'.,raise var0 with 2 arguments: value under var2 key of self var5 dict and code set to string var2.,"raise ValidationError ( self . error_messages [ 'invalid_time' ] , code = 'invalid_time' )","raise var0 ( self . var5 [ var2 ] , code = var2 )"
raise an ValidationError with 2 arguments: value under the 'invalid' key of the self.error_messages dictionary and code set to 'invalid'.,raise var0 with 2 arguments: value under var2 key of self var5 dict and code set to var2.,"raise ValidationError ( self . error_messages [ 'invalid' ] , code = 'invalid' )","raise var0 ( self . var5 [ var2 ] , code = var2 )"
or value equals return value of the call to Decimal with argument '-Inf'   raise an ValidationError with 2 arguments: value under the 'invalid' key of the self.error_messages dictionary and code set to 'invalid'.,or value equals return value of call to var0 with argument var1 raise var3 with 2 arguments: value under var5 key of self var8 dict and code set to var5.,"raise ValidationError ( self . error_messages [ 'invalid' ] , code = 'invalid' )","raise var3 ( self . var8 [ var5 ] , code = var5 )"
"raise an ValidationError with 2 arguments: dictionary self.error_messages value under the key 'list',","raise var0 with 2 arguments: dict self var3 value under key var4,","raise ValidationError ( self . error_messages [ 'list' ] , code = 'list' )","raise var0 ( self . var3 [ var4 ] , code = var4 )"
raise an ValidationError with 2 arguments: value under the 'max_length' key of the self.error_messages dictionary and code set to 'max_length'.,raise var0 with 2 arguments: value under var2 key of self var5 dict and code set to var2.,"raise ValidationError ( self . error_messages [ 'max_length' ] , code = 'max_length' , params = params )","raise var0 ( self . var5 [ var2 ] , code = var2 , params = params )"
raise an ValidationError with 2 arguments: value under the 'required' key of the self.error_messages dictionary and code set to string 'required'.,raise var0 with 2 arguments: value under var2 key of self var5 dict and code set to string var2.,"raise ValidationError ( self . error_messages [ 'required' ] , code = 'required' )","raise var0 ( self . var5 [ var2 ] , code = var2 )"
raise an ValidationError with 2 arguments: value under the 'required' key of the self.error_messages dictionary and code set to 'required'.,raise var0 with 2 arguments: value under var2 key of self var5 dict and code set to var2.,"raise ValidationError ( self . error_messages [ 'required' ] , code = 'required' )","raise var0 ( self . var5 [ var2 ] , code = var2 )"
"raise an ValidationError with 3 arguments: value under the 'required' key of the self.error_messages dictionary,","raise var0 with 3 arguments: value under var2 key of self var4 dict,","raise ValidationError ( self . error_messages [ 'required' ] , code = 'required' )","raise var0 ( self . var4 [ var2 ] , code = var2 )"
"raise an ValidationError with 2 arguments: dictionary self.error_messages value under the key 'required',","raise var0 with 2 arguments: dict self var3 value under key var4,","raise ValidationError ( self . error_messages [ 'required' ] , code = 'required' )","raise var0 ( self . var3 [ var4 ] , code = var4 )"
"raise a ValidationError exception with arguments self.message, code set to self.code and params set to params.",raise var0 exception with arguments var1 code set to var2 and var3 set to var3 ,"raise ValidationError ( self . message , code = self . code , params = params )","raise var0 ( var1 , code = var2 , var3 = var3 )"
raise a ValidationError exception with arguments self.message and code set to self.code.,raise var0 exception with arguments var1 and code set to var2 ,"raise ValidationError ( self . message , code = self . code )","raise var0 ( var1 , code = var2 )"
"is greater than self.max_num, or if value under the TOTAL_FORM_COUNT key of the self.management_form.cleaned_data dictionary,   is grater than self.absolute_max,   raise an ValidationError with 2 arguments: return value of the function ungettext with 3 arguments:",is greater var0 self var3 or if value under var4 key of self var6 var7 dict var8 is grater var0 self var11 raise var12 with 2 arguments: return value of function var14 with 3 arguments:,"raise ValidationError ( ungettext ( 'Please submit %d or fewer forms.' , 'Please submit %d or fewer forms.' , self . max_num ) % self . max_num , code = 'too_many_forms' , )","raise var12 ( var14 ( 'Please submit %d or fewer forms.' , 'Please submit %d or fewer forms.' , self . var3 ) % self . var3 , code = 'too_many_forms' )"
"is smaller than self.min_num,   raise an ValidationError with 2 arguments: return value of the function ungettext with 3 arguments:",is smaller var0 self var2 raise var4 with 2 arguments: return value of function var5 with 3 arguments:,"raise ValidationError ( ungettext ( 'Please submit %d or more forms.' , 'Please submit %d or more forms.' , self . min_num ) % self . min_num , code = 'too_few_forms' )","raise var4 ( var5 ( 'Please submit %d or more forms.' , 'Please submit %d or more forms.' , self . var2 ) % self . var2 , code = 'too_few_forms' )"
raise an exception value.,raise exception value.,raise value,raise value
raise an value.with_traceback exception with an argument tb.,raise value var1 exception with argument tb.,raise value . with_traceback ( tb ),raise value . var1 ( tb )
raise an ValueError exception.,raise var0 exception.,raise ValueError,raise var0
"raise an ValueError with an argument string ""'%s.%s' has more than one ForeignKey to '%s.%s'."", where '%s' is replaced with,","raise var0 with argument string var2 var3 var4 is replaced with,","raise ValueError (  ''%s.%s' has more than one ForeignKey to '%s.%s'.'  % ( model . _meta . app_label , model . _meta . object_name , parent_model . _meta . app_label , parent_model . _meta . object_name ) )","raise var0( ''%s.%s' has more than one ForeignKey to '%s.%s'.'  %(model._meta.app_label, model._meta.object_name, parent_model._meta.app_label, parent_model._meta.object_name))"
"raise an ValueError with an argument string ""'%s.%s' has no field named '%s'."", where '%s' is replaced with,","raise var0 with argument string var2 var4 var3 is replaced with,","raise ValueError (  ''%s.%s' has no field named '%s'.'  % ( model . _meta . app_label , model . _meta . object_name , fk_name ) )","raise var0( ''%s.%s' has no field named var3.'  %(model._meta.app_label, model._meta.object_name, fk_name))"
"raise an ValueError with an argument string ""'%s.%s' has no ForeignKey to '%s.%s'."", where '%s' is replaced with,","raise var0 with argument string var2 var3 var4 is replaced with,","raise ValueError (  ''%s.%s' has no ForeignKey to '%s.%s'.'  % ( model . _meta . app_label , model . _meta . object_name , parent_model . _meta . app_label , parent_model . _meta . object_name ) )","raise var0( ''%s.%s' has no ForeignKey to '%s.%s'.'  %(model._meta.app_label, model._meta.object_name, parent_model._meta.app_label, parent_model._meta.object_name))"
"raise an ValueError with an argument string ""'%s' has no field named '%s'."", with '%s' replaced with self.__class__.__name__ and field, respectively.","raise var0 with argument string var2, with var3 replaced with var4 and field, respectively.","raise ValueError (  ''%s' has no field named '%s'.' % ( self . __class__ . __name__ , field ) )","raise var0 ( 'var3 has no field named var3.' % ( var4 , field ) )"
"substitute '%s' is ""%s.process_response didn't return an HttpResponse object. It returned None instead."",","substitute var0 is var1,",raise ValueError (  '%s.process_response didn't return an '  'HttpResponse object. It returned None instead.'  % ( middleware_method . __self__ . __class__ . __name__ ) ),raise ValueError( '%s.var3 didn't return an '  'var5 object.var7 returned var8 instead.'  %(middleware_method.__self__.__class__.__name__))
"replace '%s' in the string  ""%s.process_template_response didn't return an HttpResponse object. It returned None instead."",","replace var1 in string var2,",raise ValueError (  '%s.process_template_response didn't return an '  'HttpResponse object. It returned None instead.'  % ( middleware_method . __self__ . __class__ . __name__ ) ),raise ValueError(var0'%s.var4 didn't return an 'var0var0'var6 object.var8 returned var9 instead.'var0 %(middleware_method.__self__.__class__.__name__))
"raise an ValueError exception with argument string ""EMAIL_USE_TLS/EMAIL_USE_SSL are mutually exclusive, so only set one of those settings to True."".",raise var0 exception with argument string var2.,"raise ValueError ( 'EMAIL_USE_TLS/EMAIL_USE_SSL are mutually exclusive, so only set ' 'one of those settings to True.' )","raise var0 ( 'EMAIL_USE_TLS/EMAIL_USE_SSL are mutually exclusive, so only set one of those settings to True.' )"
"and fk.rel.to is not contained in result of the call to the method parent_model._meta.get_parent_list.   raise an ValueError with an argument string ""fk_name '%s' is not a ForeignKey to '%s.%'."", where '%s' is replaced with,","and var0 is not contained in result of call to method var1 _meta var3 raise var5 with argument string var7 var9 var8 is replaced with,","raise ValueError (  'fk_name '%s' is not a ForeignKey to '%s.%'.'  % ( fk_name , parent_model . _meta . app_label , parent_model . _meta . object_name ) )","raise var5( 'fk_name var8 is not a ForeignKey to '%s.%'.'  %(fk_name, var1._meta.app_label, var1._meta.object_name))"
"raise an ValueError exception with an argument string ""make_aware expects a naive datetime, got %s"", where '%s' is replaced with value.",raise var0 exception with argument string var2 var3 var4 is replaced with value.,"raise ValueError ( 'make_aware expects a naive datetime, got %s' % value )","raise var0 ( 'make_aware expects a naive datetime, got %s' % value )"
"raise a ValueError exception with an argument ""You can only use `unpack_ipv4` if `protocol` is set to 'both'"".",raise var0 exception with argument var2.,raise ValueError (  'You can only use `unpack_ipv4` if `protocol` is set to 'both'' ),raise var0( 'You can only use `unpack_ipv4` if `protocol` is set to 'both'')
raise an ValueError with an argument string 'empty_label list/tuple must have 3 elements.'.,raise var0 with argument string var2.,raise ValueError ( 'empty_label list/tuple must have 3 elements.' ),raise var0 ( var2 )
raise an ValueError with an argument string 'ModelForm has no model class specified.'.,raise var0 with argument string var2.,raise ValueError ( 'ModelForm has no model class specified.' ),raise var0 ( var2 )
raise an ValueError exception with an argument string 'must define at least one ordering operation: < > <= >='.,raise var0 exception with argument string var2.,raise ValueError ( 'must define at least one ordering operation: < > <= >=' ),raise var0 ( var2 )
raise an ValueError exception with an argument string 'No handler found with name %r' formated with name.,raise var0 exception with argument string var2 formated with name.,raise ValueError ( 'No handler found with ' 'name %r' % name ),raise var0 ( 'No handler found with name %r' % name )
raise an ValueError exception with an argument string 'Not a valid Python identifier: %r' formated with s.,raise var0 exception with argument string var2 formated with var3,raise ValueError ( 'Not a valid Python identifier: %r' % s ),raise var0 ( var2 % s )
raise ValueError exception with string 'Sign character found in converter base digits.' as an argument.,raise var0 exception with string var2 as argument.,raise ValueError ( 'Sign character found in converter base digits.' ),raise var0 ( var2 )
"called with sep appended to base_path as an argument and results of the function normcase called twice with final_path,   and base_pah are not equal and directory name of the result of the function normcase called with an argument base_path,   if not equal to the result of the function normcase called with an argument base_path.   raise an ValueError with an argument string 'The joined path (%s) is located outside of the base path component (%s)',","called with sep appended to var0 as argument and results of function var6 called twice with var9 and var14 are not equal and directory name of result of function var6 called with argument var0 if not equal to result of function var6 called with argument var0 raise var16 with argument string var18,","raise ValueError ( 'The joined path (%s) is located outside of the base ' 'path component (%s)' % ( final_path , base_path ) )","raise var16 ( 'The joined path(%s) is located outside of the base path component(%s)' % ( var9 , var0 ) )"
raise an ValueError exception with an argument string 'Unable to add filter %r: %s' formated with f and e.,raise var0 exception with argument string var2 formated with f and var3,"raise ValueError ( 'Unable to add filter %r: %s' % ( f , e ) )","raise var0 ( var2 % ( f , e ) )"
raise an ValueError exception with an argument string 'Unable to add handler %r: %s' formated with h and e.,raise var0 exception with argument string var2 formated with h and var3,"raise ValueError ( 'Unable to add handler %r: %s' % ( h , e ) )","raise var0 ( var2 % ( h , e ) )"
raise an ValueError exception with an argument string 'Unable to configure filter %r: %s' formated with name and e.,raise var0 exception with argument string var2 formated with name and var3,"raise ValueError ( 'Unable to configure ' 'filter %r: %s' % ( name , e ) )","raise var0 ( 'Unable to configure filter %r: %s' % ( name , e ) )"
raise an ValueError exception with an argument string 'Unable to configure formatter %r: %s' formated with name and e.,raise var0 exception with argument string var2 formated with name and var3,"raise ValueError ( 'Unable to configure ' 'formatter %r: %s' % ( name , e ) )","raise var0 ( 'Unable to configure formatter %r: %s' % ( name , e ) )"
raise an ValueError exception with an argument string 'Unable to configure handler %r: %s' formated with name and e.,raise var0 exception with argument string var2 formated with name and var3,"raise ValueError ( 'Unable to configure handler ' '%r: %s' % ( name , e ) )","raise var0 ( 'Unable to configure handler %r: %s' % ( name , e ) )"
raise an ValueError exception with an argument string 'Unable to configure logger %r: %s' formated with name and e.,raise var0 exception with argument string var2 formated with name and var3,"raise ValueError ( 'Unable to configure logger ' '%r: %s' % ( name , e ) )","raise var0 ( 'Unable to configure logger %r: %s' % ( name , e ) )"
raise an ValueError exception with an argument string 'Unable to configure root logger: %s' formated with e.,raise var0 exception with argument string var2 formated with var3,raise ValueError ( 'Unable to configure root ' 'logger: %s' % e ),raise var0 ( 'Unable to configure root logger: %s' % e )
raise an ValueError exception with an argument string ''Unable to configure root logger: %s' formated with e.,raise var0 exception with argument string var2 var3 to configure root logger: %s' formated with var5,raise ValueError ( 'Unable to configure root ' 'logger: %s' % e ),raise var0 ( 'var3 to configure root logger: var4' % e )
raise an ValueError exception with an argument string 'Unable to convert %r at %r' formated with value and rest.,raise var0 exception with argument string var2 formated with value and rest.,"raise ValueError ( 'Unable to convert ' '%r at %r' % ( value , rest ) )","raise var0 ( 'Unable to convert %r at %r' % ( value , rest ) )"
raise an ValueError exception with an argument string 'Unable to set formatter %r: %s' formated with formatter and e.,raise var0 exception with argument string var2 formated with formatter and var3,"raise ValueError ( 'Unable to set formatter ' '%r: %s' % ( formatter , e ) )","raise var0 ( 'Unable to set formatter %r: %s' % ( formatter , e ) )"
"raise an ValueError exception with an argument string 'Unable to set target handler %r: %s',","raise var0 exception with argument string var2,","raise ValueError ( 'Unable to set target handler ' '%r: %s' % ( config [ 'target' ] , e ) )","raise var0 ( 'Unable to set target handler %r: %s' % ( config [ 'target' ] , e ) )"
raise an ValueError exception with an argument string 'Unknown level: %r' formated with level.,raise var0 exception with argument string var2 formated with level.,raise ValueError ( 'Unknown level: %r' % level ),raise var0 ( var2 % level )
"raise an ValueError with an argument string ""'package' not set to a string"".",raise var0 with argument string var2.,raise ValueError ( ''package' not set to a string' ),raise var0(''package' not set to a string')
"raise the exception ValueError, with string as argument, ""@python_2_unicode_compatible cannot be applied"",","raise exception var0 with string as argument, var2,",raise ValueError ( '@python_2_unicode_compatible cannot be applied '  'to %s because it doesn't define __str__().' %  klass . __name__ ),raise var0('@python_2_unicode_compatible cannot be applied '  'to %s because it doesn't define __str__().' %  klass.__name__)
"raise an ValueError exception with an argument string ""%r is not in a valid HTTP date format"" formated with date.",raise var0 exception with argument string var2 formated with date.,raise ValueError ( '%r is not in a valid HTTP date format' % date ),raise var0 ( '%r is not in a valid HTTP date format' % date )
"raise an ValueError with an argument string ""attempted relative import beyond top-level package"".",raise var0 with argument string var2.,raise ValueError ( 'attempted relative import beyond top-level package' ),raise var0 ( 'attempted relative import beyond top-level package' )
"raise an ValueError exception with an argument string ""Base36 conversion input too large."".",raise var0 exception with argument string var2.,raise ValueError ( 'Base36 conversion input too large.' ),raise var0 ( 'Base36 conversion input too large.' )
"raise an ValueError exception with an argument string ""Base36 input too large"".",raise var0 exception with argument string var2.,raise ValueError ( 'Base36 input too large' ),raise var0 ( 'Base36 input too large' )
"raise an ValueError with an argument string ""Could not find common ancestor of %s"", where '%s' is replaced with migration_names.",raise var0 with argument string var2 var3 var4 is replaced with var5 ,raise ValueError ( 'Could not find common ancestor of %s' % migration_names ),raise var0 ( 'Could not find common ancestor of %s' % var5 )
"raise an ValueError exception with an argument string ""dictionary doesn't specify a version"".",raise var0 exception with argument string var2.,raise ValueError ( 'dictionary doesn't specify a version' ),raise var0('dictionary doesn't specify a version')
"raise an ValueError exception with an argument string ""Don't mix *args and **kwargs in call to reverse()!"".",raise var0 exception with argument string var2.,raise ValueError ( 'Don't mix *args and **kwargs in call to reverse()!' ),raise var0('Don't mix *args and **kwargs in call to reverse()!')
"raise an ValueError with an argument string ""Invalid header: %r"", where '%s' is replaced with line.",raise var0 with argument string var2 var3 var4 is replaced with line.,raise ValueError ( 'Invalid header: %r' % line ),raise var0 ( 'Invalid header: %r' % line )
"raise an ValueError with an argument string ""Invalid timezone: %r"", substitute '%r' with timezone.","raise var0 with argument string var2, substitute var3 with timezone.",raise ValueError ( 'Invalid timezone: %r' % timezone ),raise var0 ( 'Invalid timezone: %r' % timezone )
"raise a ValueError exception with an argument string ""JSON can't represent timezone-aware times."".",raise var0 exception with argument string var2.,raise ValueError ( 'JSON can't represent timezone-aware times.' ),raise var0('JSON can't represent timezone-aware times.')
"raise an exception of class ValueError, with string ""Key '%s' not found"" as argument, where '%s' is substituted for key.",raise exception of class var0 with string var2 as argument var4 var3 is substituted for key.,raise ValueError ( 'Key '%s' not found' % key ),raise var0 ( 'Key var3 not found' % key )
"raise an exception of the class ValueError with string ""Key '%s' not found"" as argument, '%s' is substituted for key.","raise exception of class var0 with string var2 as argument, var3 is substituted for key.",raise ValueError ( 'Key '%s' not found' % key ),raise var0 ( 'Key var3 not found' % key )
"raise an ValueError exception with string ""Key '%s' not found"" as argument, substitute '%s' with key converted into a string.","raise var0 exception with string var2 as argument, substitute var3 with key converted into string.",raise ValueError ( 'Key '%s' not found' % key ),raise var0 ( 'Key var3 not found' % key )
"raise an ValueError exception with string ""Key '%s' not found"" as argument, substitute '%s' for key.","raise var0 exception with string var2 as argument, substitute var3 for key.",raise ValueError ( 'Key '%s' not found' % key ),raise var0 ( 'Key var3 not found' % key )
"raise an ValueError with an argument string ""MultiValueDict.update() takes either a MultiValueDict or dictionary"".",raise var0 with argument string var2.,raise ValueError ( 'MultiValueDict.update() takes either a MultiValueDict or dictionary' ),raise var0 ( 'MultiValueDict.update() takes either a MultiValueDict or dictionary' )
"raise an ValueError exception with an argument string ""Negative base36 conversion input."".",raise var0 exception with argument string var2.,raise ValueError ( 'Negative base36 conversion input.' ),raise var0 ( 'Negative base36 conversion input.' )
"raise an ValueError with an argument string ""Non-reversible reg-exp portion: '(?%s'"" formated with ch.","raise var0 with argument string ""Non-reversible reg-exp portion: '(?%s'"" formated with var3 ",raise ValueError ( 'Non-reversible reg-exp portion: '(?%s'' % ch ),raise var0('Non-reversible reg-exp portion: '(?%s'' % var3)
"raise an ValueError with an argument string ""Non-reversible reg-exp portion: '(?P%s'"" formated with ch.","raise var0 with argument string ""Non-reversible reg-exp portion: '(?P%s'"" formated with var3 ",raise ValueError ( 'Non-reversible reg-exp portion: '(?P%s'' % ch ),raise var0('Non-reversible reg-exp portion: '(?P%s'' % var3)
"raise an ValueError exception wit an argument string ""Not a string literal: %r"", where ""%r"" is replaced with s.",raise var0 exception wit argument string var2 var3 var4 is replaced with var5,raise ValueError ( 'Not a string literal: %r' % s ),raise var0 ( 'Not a string literal: %r' % s )
"raise an ValueError with an argument string ""The %s could not be %s because the data didn't validate."",","raise var0 with argument string var2,","raise ValueError ( 'The %s could not be %s because the data didn't'  ' validate.' % ( opts . object_name , fail_message ) )","raise var0('The %s could not be %s because the data didn't'  ' validate.' %(opts.object_name, fail_message))"
"raise an ValueError exception with string ""The file cannot be reopened."" as an argument.",raise var0 exception with string var2 as argument.,raise ValueError ( 'The file cannot be reopened.' ),raise var0 ( 'The file cannot be reopened.' )
"raise a ValueError exception with an argument ""The protocol '%s' is unknown. Supported: %s"", replace '%s' with protocol,","raise var0 exception with argument var2, replace var3 with protocol,","raise ValueError ( 'The protocol '%s' is unknown. Supported: %s'  % ( protocol , list ( ip_address_validator_map ) ) )","raise var0 ( 'The protocol var3 is unknown.Supported: %s' % ( protocol , list ( ip_address_validator_map ) ) )"
"substitute the '%s' in the string ""The view %s.%s didn't return an HttpResponse object. It returned None instead."",","substitute var0 in string var1,","raise ValueError ( 'The view %s.%s didn't return an HttpResponse object. It returned None instead.'  % ( callback . __module__ , view_name ) )","raise ValueError('var2 view var4 didn't return an var6 object.var8 returned var9 instead.'  %(callback.__module__, view_name))"
"raise an ValueError with string ""This file is not accessible via a URL."" as argument.",raise var0 with string var2 as argument.,raise ValueError ( 'This file is not accessible via a URL.' ),raise var0 ( 'This file is not accessible via a URL.' )
"raise an ValueError exception with an argument string ""Unable to convert %r"" formated with value.",raise var0 exception with argument string var2 formated with value.,raise ValueError ( 'Unable to convert %r' % value ),raise var0 ( 'Unable to convert %r' % value )
"raise an ValueError exception with an argument string ""Unsupported version: %s"" formated with value under 'version' key of config dictionary.",raise var0 exception with argument string var2 formated with value under var3 key of var4 dict.,raise ValueError ( 'Unsupported version: %s' % config [ 'version' ] ),raise var0 ( 'Unsupported version: %s' % var4 [ var3 ] )
"raise an ValueError with an string ""Zip-compressed fixtures must contain one file."".",raise var0 with string var2.,raise ValueError ( 'Zip-compressed fixtures must contain one file.' ),raise var0 ( 'Zip-compressed fixtures must contain one file.' )
raise an ValueError exception with an argument e.,raise var0 exception with argument var1,raise ValueError ( e ),raise var0 ( e )
"raise an VariableDoesNotExist exception with an argument string ""Failed lookup for key [%s] in %r"",","raise var0 exception with argument string var2,","raise VariableDoesNotExist ( 'Failed lookup for key ' '[%s] in %r' , ( bit , current ) )","raise var0 ( 'Failed lookup for key [var3] in %r' , ( bit , current ) )"
"raise an ViewDoesNotExist exception with an argument string ""Could not import '%s.%s'. View is not callable."",","raise var0 exception with argument string var2,","raise ViewDoesNotExist (  'Could not import '%s.%s'. View is not callable.' %  ( mod_name , func_name ) )","raise var0( 'Could not import '%s.%s'.View is not callable.' % (mod_name, func_name))"
"import_module called with an argument parentmod and submod, evaluates to false.   raise an ViewDoesNotExist exception with an argument string ""Could not import '%s'. Parent module %s does not exist."",","var0 called with argument var1 and var2 evaluates to false var3 raise var4 exception with argument string var6,","raise ViewDoesNotExist (  'Could not import '%s'. Parent module %s does not exist.' %  ( lookup_view , mod_name ) )","raise var4( 'Could not import '%s'.Parent module %s does not exist.' % (lookup_view, mod_name))"
"raise an ViewDoesNotExist exception with an argument string ""Could not import '%s'. View does not exist in module %s."",","raise var0 exception with argument string var2,","raise ViewDoesNotExist (  'Could not import '%s'. View does not exist in module %s.' %  ( lookup_view , mod_name ) )","raise var0( 'Could not import '%s'.View does not exist in module %s.' % (lookup_view, mod_name))"
"call the function random.randrange with argument integer 100000, substitute the result for randint.","call function var0 with argument integer 100000, substitute result for var1 ",randint = random . randrange ( 100000 ),var1 = var0 ( 100000 )
"format string ""%s%s%s"" with 3 elements: result of the function random.getstate, result of the call the the function time.time,",format string var0 with 3 elements: result of function var1 result of call the function var2 ,"random . seed ( hashlib . sha256 ( ( '%s%s%s' % ( random . getstate ( ) , time . time ( ) , settings . SECRET_KEY ) ) . encode ( 'utf-8' ) ) . digest ( ) )","random . seed ( hashlib . sha256 ( ( '%s%s%s' % ( random . getstate ( ) , var2 ( ) , settings . SECRET_KEY ) ) . encode ( 'utf-8' ) ) . digest ( ) )"
"divide value by max_value, multiply the result with max_width, substitute it for ratio.",divide value by var0 multiply result with var1 substitute it for ratio.,ratio = ( value / max_value ) * max_width,ratio = value / var0 * var1
"RAW is a string ""raw"".",RAW is string var0.,RAW = 'raw',RAW = 'raw'
"call get_str_from_wsgi function with self.environ, string 'HTTP_COOKIE' and empty string as arguments, substitute it for raw_cookie.","call var0 function with var2 string var3 and empty string as arguments, substitute it for var4 ","raw_cookie = get_str_from_wsgi ( self . environ , 'HTTP_COOKIE' , '' )","var4 = var0 ( var2 , var3 , '' )"
"call the method field_stream.read, substitute the result for raw_data.","call method var0 read, substitute result for var2 ",raw_data = field_stream . read ( ),var2 = var0 . read ( )
"call the get_bytes_from_wsgi function with self.environ, string 'QUERY_STRING' and empty string as arguments, substitute the return value for raw_query_string.","call var0 function with var2 string var3 and empty string as arguments, substitute return value for var4 ","raw_query_string = get_bytes_from_wsgi ( self . environ , 'QUERY_STRING' , '' )","var4 = var0 ( var2 , var3 , '' )"
call the function force_str with raw data as an argument and substitute it for rawdata.,call function var0 with raw data as argument and substitute it for var1 ,rawdata = force_str ( rawdata ),var1 = var0 ( var1 )
substitute self.rawdata for rawdata.,substitute var0 for var1 ,rawdata = self . rawdata,var1 = var0
"call the function re.compile with an argument raw string '(((?<=[a-z])[A-Z])|([A-Z](?![A-Z]|$)))', substitute the result for re_camel_case.","call function var0 with argument raw string '(((?<= [var2]) [var3])|( [var3](?! [var3]|$)))', substitute result for var6 ",re_camel_case = re . compile ( r'(((?<=[a-z])[A-Z])|([A-Z](?![A-Z]|$)))' ),var6 = var0 ( '(((?<=[var2])[var3])|([var3](?![var3]|$)))' )
"re.U and re.S, substitute the result for re_words.   call the function re.compile with 2 arguments: raw string '<.*?>|(.)' and bitwise OR performed with 2 operands,","re.U and re.S, substitute result for var0 call function var3 with 2 arguments: raw string '<.*?>|(.)' and var5 var6 performed with 2 operands,","re_chars = re . compile ( r'<.*?>|(.)' , re . U | re . S )","re_chars = var3(r'<.*?>|(.var4, re.U | re.S)"
"compile regex from the raw string '(\d{4})-(\d\d?)-(\d\d?)$', substitute it for RE_DATE.","compile var0 from raw string var1, substitute it for var2 ",RE_DATE = re . compile ( r'(\d{4})-(\d\d?)-(\d\d?)$' ),var2 = re . compile ( '(\\d{4})-(\\d\\d?)-(\\d\\d?)$' )
"compile regex from a string '\\(.)', substitute it for re_escaped.","compile var0 from string var1, substitute it for var2 ",re_escaped = re . compile ( r'\\(.)' ),var2 = re . compile ( '\\\\(.)' )
"compile regex from a string '(?<!\\)([aAbBcdDeEfFgGhHiIjlLmMnNoOPrsStTUuwWyYzZ])', substitute it for re_formatchars.","compile var0 from string var1, substitute it for var3 ",re_formatchars = re . compile ( r'(?<!\\)([aAbBcdDeEfFgGhHiIjlLmMnNoOPrsStTUuwWyYzZ])' ),var3 = re . compile ( '(?<!\\\\)([var2])' )
"re.U and re.S, substitute the result for re_chars.   call the function re.compile with an argument raw string '\r\n|\r', substitute the result for re_newlines.","re.U and re.S, substitute result for var0 call function var3 with argument raw string var4, substitute result for var5 ",re_newlines = re . compile ( r'\r\n|\r' ),var5 = var3 ( '\\r\\n|\\r' )
"re.U and re.S, substitute the result for re_chars.   call the function re.compile with 2 arguments: raw string '<(/)?([^ ]+?)(?:(\s*/)| .*?)?>' and bitwise OR performed with 2 operands,","re.U and re.S, substitute result for var0 call function var3 with 2 arguments: raw string var4 and var6 var7 performed with 2 operands,","re_tag = re . compile ( r'<(/)?([^ ]+?)(?:(\s*/)| .*?)?>' , re . S )","re_tag = var3 ( '<(/)?([^]+?)(?:(\\s*/)|.*?)?>' , re . S )"
"call the function re.compile with 2 arguments: raw string '<.*?>|((?:\w[-\w]*|&.*?;)+)' and bitwise OR performed with 2 operands,","call the function re.compile with 2 arguments: raw string '<.*?>|((?:\w[-\w]*|&.*?;)+)' and bitwise OR performed with 2 operands,","re_words = re . compile ( r'<.*?>|((?:\w[-\w]*|&.*?;)+)' , re . U | re . S )","re_words = re . compile ( r'<.*?>|((?:\w[-\w]*|&.*?;)+)' , re . U | re . S )"
"define lambda function that returns self.file.read field, use it as an argument for property function, put the result in read.","define lambda function var0 returns var1 field, use it as argument for property function, put result in read.",read = property ( lambda self : self . file . read ),read = property ( lambda self : var1 )
"define lambda function that returns self.file.readinto field, use it as an argument for property function, put the result in readinto.","define lambda function var0 returns var1 field, use it as argument for property function, put result in var2 ",readinto = property ( lambda self : self . file . readinto ),var2 = property ( lambda self : var1 )
"call the method readline.parse_and_bind with an argument string ""tab:complete"".",call method readline var1 with argument string var2.,readline . parse_and_bind ( 'tab:complete' ),readline . var1 ( 'tab:complete' )
"call the method rlcompleter.Completer with an argument imported_objects, use the complete field of the result as an argument for the call to the method readline.set_completer.",call method var0 var1 with argument var2 use complete field of result as argument for call to method readline var5 ,readline . set_completer ( rlcompleter . Completer ( imported_objects ) . complete ),readline . var5 ( var0 . var1 ( var2 ) . complete )
"define lambda function that returns self.file.readline field, use it as an argument for property function, put the result in readline.","define lambda function var0 returns var1 field, use it as argument for property function, put result in var2 ",readline = property ( lambda self : self . file . readline ),var2 = property ( lambda self : var1 )
"define lambda function that returns self.file.readlines field, use it as an argument for property function, put the result in readlines.","define lambda function var0 returns var1 field, use it as argument for property function, put result in var2 ",readlines = property ( lambda self : self . file . readlines ),var2 = property ( lambda self : var1 )
reason_phrase is None.,var0 is var1 ,reason_phrase = None,var0 = var1
"REASON_PHRASES is a dictionary containing 59 initial entries: 'CONTINUE' for 100, 'SWITCHING PROTOCOLS' for 101,","REASON_PHRASES is dict containing 59 initial entries: var0 for 100, var1 for 101,","REASON_PHRASES = {  100 : 'CONTINUE' ,  101 : 'SWITCHING PROTOCOLS' ,  102 : 'PROCESSING' ,  200 : 'OK' ,  201 : 'CREATED' ,  202 : 'ACCEPTED' ,  203 : 'NON-AUTHORITATIVE INFORMATION' ,  204 : 'NO CONTENT' ,  205 : 'RESET CONTENT' ,  206 : 'PARTIAL CONTENT' ,  207 : 'MULTI-STATUS' ,  208 : 'ALREADY REPORTED' ,  226 : 'IM USED' ,  300 : 'MULTIPLE CHOICES' ,  301 : 'MOVED PERMANENTLY' ,  302 : 'FOUND' ,  303 : 'SEE OTHER' ,  304 : 'NOT MODIFIED' ,  305 : 'USE PROXY' ,  306 : 'RESERVED' ,  307 : 'TEMPORARY REDIRECT' ,  308 : 'PERMANENT REDIRECT' ,  400 : 'BAD REQUEST' ,  401 : 'UNAUTHORIZED' ,  402 : 'PAYMENT REQUIRED' ,  403 : 'FORBIDDEN' ,  404 : 'NOT FOUND' ,  405 : 'METHOD NOT ALLOWED' ,  406 : 'NOT ACCEPTABLE' ,  407 : 'PROXY AUTHENTICATION REQUIRED' ,  408 : 'REQUEST TIMEOUT' ,  409 : 'CONFLICT' ,  410 : 'GONE' ,  411 : 'LENGTH REQUIRED' ,  412 : 'PRECONDITION FAILED' ,  413 : 'REQUEST ENTITY TOO LARGE' ,  414 : 'REQUEST-URI TOO LONG' ,  415 : 'UNSUPPORTED MEDIA TYPE' ,  416 : 'REQUESTED RANGE NOT SATISFIABLE' ,  417 : 'EXPECTATION FAILED' ,  418 : 'I'M A TEAPOT' ,  422 : 'UNPROCESSABLE ENTITY' ,  423 : 'LOCKED' ,  424 : 'FAILED DEPENDENCY' ,  426 : 'UPGRADE REQUIRED' ,  428 : 'PRECONDITION REQUIRED' ,  429 : 'TOO MANY REQUESTS' ,  431 : 'REQUEST HEADER FIELDS TOO LARGE' ,  500 : 'INTERNAL SERVER ERROR' ,  501 : 'NOT IMPLEMENTED' ,  502 : 'BAD GATEWAY' ,  503 : 'SERVICE UNAVAILABLE' ,  504 : 'GATEWAY TIMEOUT' ,  505 : 'HTTP VERSION NOT SUPPORTED' ,  506 : 'VARIANT ALSO NEGOTIATES' ,  507 : 'INSUFFICIENT STORAGE' ,  508 : 'LOOP DETECTED' ,  510 : 'NOT EXTENDED' ,  511 : 'NETWORK AUTHENTICATION REQUIRED' ,  }","REASON_PHRASES = {  100: var0,  101: 'var2 var3',  102: 'PROCESSING',  200: 'OK',  201: 'CREATED',  202: 'ACCEPTED',  203: 'NON-AUTHORITATIVE INFORMATION',  204: 'NO CONTENT',  205: 'RESET CONTENT',  206: 'PARTIAL CONTENT',  207: 'MULTI-STATUS',  208: 'ALREADY REPORTED',  226: 'IM USED',  300: 'MULTIPLE CHOICES',  301: 'MOVED PERMANENTLY',  302: 'FOUND',  303: 'SEE OTHER',  304: 'NOT MODIFIED',  305: 'USE PROXY',  306: 'RESERVED',  307: 'TEMPORARY REDIRECT',  308: 'PERMANENT REDIRECT',  400: 'BAD REQUEST',  401: 'UNAUTHORIZED',  402: 'PAYMENT REQUIRED',  403: 'FORBIDDEN',  404: 'NOT FOUND',  405: 'METHOD NOT ALLOWED',  406: 'NOT ACCEPTABLE',  407: 'PROXY AUTHENTICATION REQUIRED',  408: 'REQUEST TIMEOUT',  409: 'CONFLICT',  410: 'GONE',  411: 'LENGTH REQUIRED',  412: 'PRECONDITION FAILED',  413: 'REQUEST ENTITY TOO LARGE',  414: 'REQUEST-URI TOO LONG',  415: 'UNSUPPORTED MEDIA TYPE',  416: 'REQUESTED RANGE NOT SATISFIABLE',  417: 'EXPECTATION FAILED',  418: 'I'M A TEAPOT',  422: 'UNPROCESSABLE ENTITY',  423: 'LOCKED',  424: 'FAILED DEPENDENCY',  426: 'UPGRADE REQUIRED',  428: 'PRECONDITION REQUIRED',  429: 'TOO MANY REQUESTS',  431: 'REQUEST HEADER FIELDS TOO LARGE',  500: 'INTERNAL SERVER ERROR',  501: 'NOT IMPLEMENTED',  502: 'BAD GATEWAY',  503: 'SERVICE UNAVAILABLE',  504: 'GATEWAY TIMEOUT',  505: 'HTTP VERSION NOT SUPPORTED',  506: 'VARIANT ALSO NEGOTIATES',  507: 'INSUFFICIENT STORAGE',  508: 'LOOP DETECTED',  510: 'NOT EXTENDED',  511: 'NETWORK AUTHENTICATION REQUIRED',  }"
"call the function sanitize_address with arguments addr and email_message.encoding, for every addr in return value of the function email_message.recipients, store the results in a recipients list.","call function var0 with arguments addr and var1 encoding, for every addr in return value of function var1 recipients, store results in recipients list.","recipients = [ sanitize_address ( addr , email_message . encoding ) for addr in email_message . recipients ( ) ]","recipients = [ var0 ( addr , var1 . encoding ) for addr in var1 . recipients ( ) ]"
"call the method references_to_delete.setdefault with arguments: r.rel.to and an empty list, append to the result tuple with 2 entries: model and f.","call method var0 setdefault with arguments: var2 and empty list, append to result tuple with 2 entries: model and var3","references_to_delete . setdefault ( f . rel . to , [ ] ) . append ( ( model , f ) )","var0.setdefault(f.rel.to, []).append((model, var3)"
references_to_delete is an empty dictionary.,var0 is empty dict.,references_to_delete = { },var0 = { }
regex is an empty string.,var0 is empty string.,regex = '',var0 = ''
"call the function force_text with arguments self and _regex, substitute the result for regex.",call function var0 with arguments self and var1 substitute result for var2 ,regex = force_text ( self . _regex ),var2 = var0 ( self . var1 )
"regex is an property object of this class, with _get_regex getter and _set_regex setter function.","var0 is property object of var1 class, with _get_regex var2 and _set_regex setter function.","regex = property ( _get_regex , _set_regex )","var0 = property ( _get_regex , _set_regex )"
"call the re.compile function with 2 arguments: raw string ""^(?:[a-z0-9\.\-]*)://(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\.)+"",","call the re.compile function with 2 arguments: raw string ""^(?:[a-z0-9\.\-]*)://(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\.)+"",","regex = re . compile ( r'^(?:[a-z0-9\.\-]*)://' r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\.)+(?:[A-Z]{2,6}\.?|[A-Z0-9-]{2,}(?<!-)\.?)|' r'localhost|' r'\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}|' r'\[?[A-F0-9]*:[A-F0-9:]+\]?)' r'(?::\d+)?' r'(?:/?|[/?]\S+)$' , re . IGNORECASE )","regex = re . compile ( r'^(?:[a-z0-9\.\-]*)://' r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\.)+(?:[A-Z]{2,6}\.?|[A-Z0-9-]{2,}(?<!-)\.?)|' r'localhost|' r'\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}|' r'\[?[A-F0-9]*:[A-F0-9:]+\]?)' r'(?::\d+)?' r'(?:/?|[/?]\S+)$' , re . IGNORECASE )"
"call the function re.compile with 2 arguments regex, re.UNICODE and substitute the result for regex.",call function var0 with var1 arguments var2 re var4 and substitute result for var2 ,"regex = re . compile ( regex , re . UNICODE )","var2 var1 var0(var2,var1re.var1ar4)"
"if words is true, substitute re_words for regex, if not substitute re_chars for regex.","if words is true, substitute var0 for var1 if not substitute var3 for var1 ",regex = re_words if words else re_chars,var1 = var0 if words else var3
substitute self._regex for regex.,substitute var0 for var1 ,regex = self . _regex,var1 = var0
"call the function re.compile with 2 arguments, string '^%s/', where '%s' is replaced with language_code and re.UNICODE, substitute the result for regex_compiled.","call function var0 with var1 arguments, string '^%s var1 var3 var4 is replaced with var5 and re var7 substitute result for var9 ","regex_compiled = re . compile ( '^%s/' % language_code , re . UNICODE )","var9 var1 var0(var2 var1 var5,var1re.var1ar7)"
"call the function language_code_prefix_re.match with an argument path, substitute it for regex_match.","call function var0 match with argument path, substitute it for var2 ",regex_match = language_code_prefix_re . match ( path ),var2 = var0 . match ( path )
substitute self.regexes for regexes.,substitute var0 for var1 ,regexes = self . regexes,var1 = var0
register is an instance of Library class.,register is instance of var0 class.,register = Library ( ),register = var0 ( )
substitute registry.register for register.,substitute var0 for register.,register = registry . register,register = var0
"call the function register_serializer with 3 arguments: format, value under the format key of the BUILTIN_SERIALIZERS dictionary and serializers.","call function var0 with 3 arguments: format, value under format key of var2 dict and var3 ","register_serializer ( format , BUILTIN_SERIALIZERS [ format ] , serializers )","var0 ( format , var2 [ format ] , var3 )"
"call the function register_serializer with 3 arguments: format, value under the format key of the settings.SERIALIZATION_MODULES dictionary and serializers.","call function var0 with 3 arguments: format, value under format key of settings var2 dict and var3 ","register_serializer ( format , settings . SERIALIZATION_MODULES [ format ] , serializers )","var0 ( format , settings . var2 [ format ] , var3 )"
substitute before_import_registry for register_to._registry.,substitute var0 for var1 _registry.,register_to . _registry = before_import_registry,var1 . _registry = var0
"get value under the 'register_to' key of the kwargs dictionary, substitute it for register_to.","get value under var0 key of var1 dict, substitute it for register_to.",register_to = kwargs . get ( 'register_to' ),register_to = var1 . get ( var0 )
"call the function CheckRegistry, substitute the result for registry.",call function var0 substitute result for registry.,registry = CheckRegistry ( ),registry = var0 ( )
substitute field.rel.to with rel_model.,substitute var0 with var1 ,rel_model = field . rel . to,var1 = var0
substitute field.rel.to for rel_model.,substitute var0 for var1 ,rel_model = field . rel . to,var1 = var0
"if second element of the i-th row of relations equals table_name, rel_to is string 'self',","if second element of i-th row of relations equals var0 var2 is string var4,",rel_to = 'self' if relations [ i ] [ 1 ] == table_name else table2model ( relations [ i ] [ 1 ] ),var2 = var4 if relations [ i ] [ 1 ] == var0 else table2model ( relations [ i ] [ 1 ] )
"get field.name from the obj, substitute it for related.",get var0 from var1 substitute it for related.,"related = getattr ( obj , field . name )","related = getattr ( var1 , var0 )"
"get field.name attribute of the obj, substitute it for related.",get var0 attribute of var1 substitute it for related.,"related = getattr ( obj , field . name )","related = getattr ( var1 , var0 )"
"call the method related.natural_key, substitute the result for related.",call method related var1 substitute result for related.,related = related . natural_key ( ),related = related . var1 ( )
"evaluate the field.get_attname, use the result as the name of the obj attribute to get, substitute it for related_att.","evaluate field var1 use result as name of var2 attribute to get, substitute it for var3 ","related_att = getattr ( obj , field . get_attname ( ) )","var3 = getattr ( var2 , field . var1 ( ) )"
relations is an empty dictionary.,relations is empty dict.,relations = { },relations = { }
"call the method connection.introspection.get_relations with 2 arguments cursor, table_name and substitute the result for relations.",call method connection.introspection var1 with 2 arguments cursor var2 and substitute result for relations.,"relations = connection . introspection . get_relations ( cursor , table_name )","relations = connection . introspection . var1 ( cursor , var2 )"
"call the method path_rest.replace with arguments base_name and name, substitute the result for relative_dir.","call method var0 replace with arguments var1 and name, substitute result for var3 ","relative_dir = path_rest . replace ( base_name , name )","var3 = var0 . replace ( var1 , name )"
"call the function reloader with wrapped_main_func, args and kwargs as arguments.",call function var0 with var1 var2 and var3 as arguments.,"reloader ( wrapped_main_func , args , kwargs )","var0 ( var1 , var2 , var3 )"
substitute jython_reloader for reloader.,substitute var0 for reloader.,reloader = jython_reloader,reloader = var0
substitute python_reloader for reloader.,substitute var0 for reloader.,reloader = python_reloader,reloader = var0
call the function reloader_thread.,call function var0 ,reloader_thread ( ),var0 ( )
decrement remaining by length of emitting.,decrement remaining by length of emitting.,remaining -= len ( emitting ),remaining -= len ( emitting )
"if size is None substitute self._remaining for remaining, if not, substitute size for remaining.","if size is var0 substitute var1 for remaining, if not, substitute size for remaining.",remaining = self . _remaining if size is None else size,remaining = var1 if size is var0 else size
substitute bits without the first element for remaining_bits.,substitute bits var0 first element for var1 ,remaining_bits = bits [ 1 : ],var1 = bits [ 1 : ]
"substitute bits, without the first two elements, substitute the result for remaining_bits.","substitute bits var0 first two elements, substitute result for var1 ",remaining_bits = bits [ 2 : ],var1 = bits [ 2 : ]
substitute complain for remove.,substitute complain for remove.,remove = complain,remove = complain
"call the function allow_lazy with 2 arguments: remove_tags, six.text_type, substitute the result for remove_tags.",call function var0 with 2 arguments: var1 six var5 substitute result for var1 ,"remove_tags = allow_lazy ( remove_tags , six . text_type )","var1 = var0 ( var1 , six . var5 )"
substitute RemovedInDjango19Warning for RemovedInNextVersionWarning.,substitute var0 for var1 ,RemovedInNextVersionWarning = RemovedInDjango19Warning,var1 = var0
renamed is boolean False.,renamed is boolean var0 ,renamed = False,renamed = var0
renamed is boolean True.,renamed is boolean var0 ,renamed = True,renamed = var0
"renamed methods is a tuple containing 3 elements: '_get_memcache_timeout', 'get_backend_timeout' and RemovedInDjango19Warning.","renamed methods is tuple containing 3 elements: var0, var1 and var4 ","renamed_methods = ( ( '_get_memcache_timeout' , 'get_backend_timeout' , RemovedInDjango19Warning ) , )","renamed_methods = ( var0 , 'get_backend_timeout' , var4 ) ,"
renamed_methods is an tuple.,var0 is tuple.,renamed_methods = ( ),var0 = ( )
substitute self.context.render_context for render_context.,substitute self.context var1 for var1 ,render_context = self . context . render_context,var1 = self . context . var1
substitute CheckboxFieldRenderer for renderer.,substitute var0 for var1 ,renderer = CheckboxFieldRenderer,var1 = var0
"remove entry under 'render' key of the kwargs dictionary and substitute it for renderer, if the key doesnt exists, renderer is None.",remove entry under var0 key of var1 dict and substitute it for var2 if key doesnt exists var2 is var4 ,"renderer = kwargs . pop ( 'renderer' , None )","var2 = var1 . pop ( 'var2' , var4 )"
renderer is None.,var0 is var1 ,renderer = None,var0 = var1
substitute RadioFieldRenderer for renderer.,substitute var0 for var1 ,renderer = RadioFieldRenderer,var1 = var0
"rendering_attrs is a list containing 3 strings: 'template_name', 'context_data' and '_post_render_callbacks'.","var0 is list containing 3 strings: var1, var2 and var5.","rendering_attrs = [ 'template_name' , 'context_data' , '_post_render_callbacks' ]","var0 = [ var1 , 'context_data' , '_post_render_callbacks' ]"
"append list with 2 strings: '_request' and '_current_app' to SimpleTemplateResponse.rendering_attrs, substitute the result for rendering_attrs.",append list with 2 strings: var0 and var1 to var2 var4 substitute result for var4 ,"rendering_attrs = SimpleTemplateResponse . rendering_attrs + [ '_request' , '_current_app' ]","var4 = var2 . var4 + [ var0 , '_current_app' ]"
repeat is an integer 0,repeat is integer 0,repeat = 0,repeat = 0
repeat is a random integer between 1 and the value entropy,repeat is random integer between 1 and value entropy,"repeat = random . randint ( 1 , entropy )","repeat = random . randint ( 1 , entropy )"
"get the value under the lang_code key of the _BROWSERS_DEPRECATED_LOCALES dictionary, substitute it for replacement.","get value under var0 key of _BROWSERS_DEPRECATED_LOCALES dict, substitute it for replacement.",replacement = _BROWSERS_DEPRECATED_LOCALES . get ( lang_code ),replacement = _BROWSERS_DEPRECATED_LOCALES . get ( var0 )
append tuple with 2 elements: migration.app_label and migration.name to replaces.,append tuple with 2 elements: migration var1 and var2 to replaces.,"replaces . append ( ( migration . app_label , migration . name ) )","replaces . append ( ( migration . var1 , var2 ) )"
"extend replaces list with migration.replaces,",extend replaces list with var0 ,replaces . extend ( migration . replaces ),replaces . extend ( var0 )
write it to self.stdout stream.   replaces is an empty list.,write it to var0 stream var1 replaces is empty list.,replaces = [ ],replaces = [ ]
"get the absolute path of the __file__, repo_dir is name of the directory two leveles above it.",get absolute path of var0 var1 is name of directory two leveles above it.,repo_dir = os . path . dirname ( os . path . dirname ( os . path . abspath ( __file__ ) ) ),var1 = os . path . dirname ( os . path . dirname ( os . path . abspath ( var0 ) ) )
"and request_repr, respectively.   reporter is an instance of ExceptionReporter class, created with 3 arguments: request, is_email as boolean True,","and var0 respectively var2 reporter is instance of var3 class, created with 3 arguments: request var4 as boolean var6 ","reporter = ExceptionReporter ( request , is_email = True , * exc_info )","reporter = var3 ( request , * exc_info , var4 = var6 )"
substitute self._setupfunc for repr_attr.,substitute var0 for var1 ,repr_attr = self . _setupfunc,var1 = var0
substitute self._wrapped for repr_attr.,substitute var0 for var1 ,repr_attr = self . _wrapped,var1 = var0
"get the value under ch key of the ESCAPE_MAPPINGS dictionary, if it exists substitute it for representative, if not substitute ch for representative.","get value under var0 key of var2 dict, if it exists substitute it for representative, if not substitute var0 for representative.","representative = ESCAPE_MAPPINGS . get ( ch , ch )","representative = var2 . get ( var0 , var0 )"
substitute resolver_match for request.resolver_match.,substitute var0 for request var0 ,request . resolver_match = resolver_match,request . var0 = var0
request is None.,request is var0 ,request = None,request = var0
_get_request is getter function for REQUEST attribute of this class.,var0 is var1 function for var2 attribute of var3 class.,REQUEST = property ( _get_request ),var2 = property ( var0 )
substitute record.request for request.,substitute var0 for request.,request = record . request,request = var0
"call the self.request_class method with environ as an argument, substitute the result for request.","call self var1 method with environ as argument, substitute result for request.",request = self . request_class ( environ ),request = self . var1 ( environ )
"append string "".moves.urllib_request"" to __name__, use it as an key to get the value from the sys.modules dictionary, substitute it for request.","append string var0 to var1 use it as key to get value from var2 dict, substitute it for request.",request = sys . modules [ __name__ + '.moves.urllib_request' ],request = var2 [ var1 + '.moves.urllib_request' ]
substitute WSGIRequest for request_class.,substitute var0 for var1 ,request_class = WSGIRequest,var1 = var0
call the method request_finished.connect with argument update_watch.,call method var0 connect with argument var1 ,request_finished . connect ( update_watch ),var0 . connect ( var1 )
request_finished is a instance of a Signal class.,var0 is instance of var1 class.,request_finished = Signal ( ),var0 = var1 ( )
append mw_instance.process_request at the end of request_middleware.,append var0 var2 at end of var3 ,request_middleware . append ( mw_instance . process_request ),var3 . append ( var0 . var2 )
request_middleware is an empty list.,var0 is empty list.,request_middleware = [ ],var0 = [ ]
request_queue_size is integer 10.,var0 is integer 10.,request_queue_size = 10,var0 = 10
"call the method filter.get_request_repr with an argument request, format string '\n{0}' with the result, substitute the result for request_repr.","call method filter var1 with argument request, format string var4 with result, substitute result for var2 ",request_repr = '\n{0}' . format ( filter . get_request_repr ( request ) ),var2 = '\n{0}' . format ( filter . var1 ( request ) )
"request_repr is a string ""unavailable"".",var0 is string var1.,request_repr = 'unavailable',var0 = 'unavailable'
request_started is a instance of a Signal class.,var0 is instance of var1 class.,request_started = Signal ( ),var0 = var1 ( )
requires_system_checks is boolean False.,var0 is boolean var1 ,requires_system_checks = False,var0 = var1
"pulls out all strings marked for translation. It creates (or updates) a message    ""file in the conf/locale (in the django tree) or locale (for projects and ""   ""applications) directory.\n\nYou must run this command with one of either the ""   ""--locale, --exclude or --all options."".    requires_system_checks is boolean False.","pulls out all strings marked for translation. It creates (or updates) a message    ""file in the conf/locale (in the django tree) or locale (for projects and ""   ""applications) directory.\n\nYou must run this command with one of either the ""   ""--locale, --exclude or --all options."".    requires_system_checks is boolean False.",requires_system_checks = False,requires_system_checks = False
"call the function flatten_result with an argument item, assign the result to res and args, respectively.","call function var0 with argument item, assign result to res and var1 respectively.","res , args = flatten_result ( item )","res , var1 = var0 ( item )"
res is an empty string.,res is empty string.,res = '',res = ''
"concatenate the string ""\\x"", the hexadecimal conversion of the leght of the bytearray of the variable sc and ""\"". Store the result in the string res","concatenate string var0, hexadecimal conversion of var1 of var2 of variable sc and var3 var4 result in string res","res = '\\x%02x, ' % len ( bytearray ( sc ) )","res = '\\x%02x, ' % len ( bytearray ( sc ) )"
"concatenate ""\\x"", the hexadecimal conversion of the leght of the array of bytes of sc and ""\"", and save the final string in res","concatenate var0, hexadecimal conversion of var1 of array of bytes of sc and var2, and save final string in res","res = '\\x%02x, ' % len ( bytearray ( sc ) )","res = '\\x%02x, ' % len ( bytearray ( sc ) )"
"res is the concatenation of the string ""\\x"", the hexadecimal value of the length of array of bytes of the variable tmp and the string ','","res is concatenation of string var0, hexadecimal value of length of array of bytes of variable var1 and string var2","res = '\\x%02x, ' % len ( bytearray ( tmp ) )","res = '\\x%02x, ' % len ( bytearray ( var1 ) )"
res is the sum of variables op1 and op2 modulo 128,res is sum of variables var0 and var1 var2 128,res = ( op1 + op2 ) % 128,res = ( var0 + var1 ) % 128
"call the function func with 2 arguments: unpacked list self.__args and unpacked dictionary self.__kw, substitute the result for res.",call function var0 with 2 arguments: unpacked list self.__args and unpacked dict var1 substitute result for res.,"res = func ( * self . __args , ** self . __kw )","res = var0 ( * self . __args , ** var1 )"
"call the function self.func with an argument instance, substitute the result for res and value under the self.name key of the instance.__dict__ dictionary.","call function var0 with argument instance, substitute result for res and value under var1 key of var2 dict.",res = instance . __dict__ [ self . name ] = self . func ( instance ),res = var2 [ var1 ] = var0 ( instance )
"slice op from index 0 to 2, then assign the result to res","slice var0 from index 0 to 2, then assign result to res",res = op [ 0 : 2 ],res = var0 [ 0 : 2 ]
substitute subject elements from p-th to i-th index for res.,substitute subject elements from p-th to i-th index for res.,res = subject [ p : i ],res = subject [ p : i ]
substitute first element of to_digits for res.,substitute first element of var0 for res.,res = to_digits [ 0 ],res = var0 [ 0 ]
res is x bitwise xor y,res is x var0 xor y,res = x ^ y,res = x ^ y
left shift val2 the and operation between x and val1 and assign it to res1,left shift var0 and operation between x and var1 and assign it to var2,res1 = ( ( x & val1 ) << val2 ),var2 = ( x & var1 ) << var0
assign the variable res1 the right shift of x bitwise and val1 and the variable val2,assign variable var0 right shift of x var1 and var2 and variable var3,res1 = ( ( x & val1 ) >> val2 ),var0 = ( x & var2 ) >> var3
compute x bitwise and val1 and then right shift with val2 and assign the result to the variable res1,compute x var0 and var1 and then right shift with var2 and assign result to variable var3,res1 = ( ( x & val1 ) >> val2 ),var3 = ( x & var1 ) >> var2
x shifted left by val2 and val1 and assign the result to res1,x shifted left by var0 and var1 and assign result to var2,res1 = ( x << val2 ),var2 = x << var0
left shift the variable x by val2 then bitwise and with val1 then store in res1,left shift variable x by var0 then var1 and with var2 then store in var3,res1 = ( x << val2 ) & ( val1 ),var3 = x << var0 & var2
res1 is x left shift by val2 bitwise and val1,var0 is x left shift by var1 var2 and var3,res1 = ( x << val2 ) & ( val1 ),var0 = x << var1 & var3
assign the variable res1 left shift x by val2 bitwise and val1,assign variable var0 left shift x by var1 var2 and var3,res1 = ( x << val2 ) & ( val1 ),var0 = x << var1 & var3
perform the xor operation between x shifted left by val2 and val1 then assign the result to res1,perform xor operation between x shifted left by var0 and var1 then assign result to var2,res1 = ( x << val2 ) ^ ( val1 ),var2 = x << var0 ^ var1
res1 is x left shift by val2 bitwise xor val1,var0 is x left shift by var1 var2 xor var3,res1 = ( x << val2 ) ^ ( val1 ),var0 = x << var1 ^ var3
perform the xor operation between x shifted right by val2 and val1 and assign the result to res1,perform xor operation between x shifted right by var0 and var1 and assign result to var2,res1 = ( x >> val2 ) ^ ( val1 ),var2 = x >> var0 ^ var1
res1 is x bitwise and val1,var0 is x var1 and var2,res1 = x & val1,var0 = x & var2
assign the variable res2 variable t bitwise and val1,assign variable var0 variable t var1 and var2,res2 = ( t & val1 ),var0 = t & var2
assign the variable res2 variable x bitwise and not val1,assign variable var0 variable x var1 and not var2,res2 = ( x & ~ val1 ),var0 = x & ~ var2
assign the variable res2 variable x and val1,assign variable var0 variable x and var1,res2 = ( x & val1 ),var0 = x & var1
assign the variable res2 variable not x bitwise and m,assign variable var0 variable not x var1 and m,res2 = ~ x & m,var0 = ~ x & m
left shift res2 by max_bits times val2,left shift var0 by var1 times var2,res2 = res2 << ( max_bits * val2 ),var0 = var0 << var1 * var2
right shift res2 by max_bits times val2,right shift var0 by var1 times var2,res2 = res2 >> ( max_bits * val2 ),var0 = var0 >> var1 * var2
right shift res2 by max_bits plus val2,right shift var0 by var1 plus val2,res2 = res2 >> ( max_bits + val2 ),var0 = var0 >> var1 + val2
assign res2 the value of res2 left shift by max_bits minus val2,assign var0 value of var0 left shift by var2 minus var3,res2 = res2 >> max_bits - val2,var0 = var0 >> var2 - var3
assign the variable res2 variable x bitwise and val1,assign variable var0 variable x var1 and var2,res2 = x & val1,var0 = x & var2
assign the variable res2 variable x and val1,assign variable var0 variable x and var1,res2 = x & val1,var0 = x & var1
assign the variable res2 variable x modulus and val1,assign variable var0 variable x modulus and var1,res2 = x % val1,var0 = x % var1
assign res2 left shift x by max_bits minus val2,assign var0 left shift x by var1 minus var2,res2 = x << ( max_bits - val2 ),var0 = x << var1 - var2
res2 is equal to left shift x by max_bits minus val2,var0 is equal to left shift x by var1 minus var2,res2 = x << ( max_bits - val2 ),var0 = x << var1 - var2
left shift x by max_bits divided by val2 and assign the result to res2,left shift x by var0 divided by var1 and assign result to var2,res2 = x << ( max_bits / val2 ),var2 = x << var0 / var1
assign the variable res2 variable not x bitwise and val1,assign variable var0 variable not x var1 and var2,res2 = x val1,var0 = x var2
for every x in sequence of integers from 0 to 7.   RESET is a string '0'.,for every x in sequence of integers from 0 to 7 var1 is string var2.,RESET = '0',var1 = var2
"get the value 'reset_sequences' key of the options dictionary, if it exists substitute it for reset_sequences, otherwise reset_sequences is boolean True.","get value var0 key of options dict, if it exists substitute it for reset_sequences, otherwise reset_sequences is boolean var1 ","reset_sequences = options . get ( 'reset_sequences' , True )","reset_sequences = options . get ( var0 , var1 )"
call the function reset_translations.,call function var0 ,reset_translations ( ),var0 ( )
call the function resolve with arguments path and urlconf.,call function resolve with arguments path and var0 ,"resolve ( path , urlconf )","resolve ( path , var0 )"
"call the method self.get_resolved_arguments with an argument context, substitute the result for resolved_args and resolved_kwargs.","call method self var1 with argument context, substitute result for var2 and var4 ","resolved_args , resolved_kwargs = self . get_resolved_arguments ( context )","var2 , var4 = self . var1 ( context )"
"call the method self.get_resolved_arguments with context as an argument, substitute the result for resolved_args and resolved_kwargs.","call method self var1 with context as argument, substitute result for var2 and var4 ","resolved_args , resolved_kwargs = self . get_resolved_arguments ( context )","var2 , var4 = self . var1 ( context )"
"append resolved_args to a list containing context element, substitute it for resolved_args.","append var0 to list containing context element, substitute it for var0 ",resolved_args = [ context ] + resolved_args,var0 = [ context ] + var0
"resolved_args is an list with elements, return value of the method var.resolve with an argument context, for every var in self.args.","var0 is list with elements, return value of method var1 with argument context, for every var in var2 ",resolved_args = [ var . resolve ( context ) for var in self . args ],var0 = [ var . resolve ( context ) for var in var2 ]
"resolved_kwargs is dictionary with elements: return value of the method v.resolve called with an argument context, for k,","var0 is dict with elements: return value of method var1 called with argument context, for k,","resolved_kwargs = dict ( ( k , v . resolve ( context ) ) for k , v in self . kwargs . items ( ) )","var0 = dict ( ( k , var1 ( context ) ) for k , v in self . kwargs . items ( ) )"
call the method resolved_path.append with an argument ns.,call method var0 append with argument ns.,resolved_path . append ( ns ),var0 . append ( ns )
resolved_path is an empty list.,var0 is empty list.,resolved_path = [ ],var0 = [ ]
"call the function get_ns_resolver with arguments ns_pattern and resolver, substitute the result for resolver.","call function var0 with arguments var1 and resolver, substitute result for resolver.","resolver = get_ns_resolver ( ns_pattern , resolver )","resolver = var0 ( var1 , resolver )"
"call the function get_resolver with an argument urlconf, substitute the result for resolver.",call function var0 with argument var1 substitute result for resolver.,resolver = get_resolver ( urlconf ),resolver = var0 ( var1 )
"call the method urlresolvers.RegexURLResolver with raw literal string '^/' and urlconf as the arguments, substitute the result for resolver.","call method var0 var2 with raw literal string '^/' and var5 as arguments, substitute result for var1 ","resolver = urlresolvers . RegexURLResolver ( r'^/' , urlconf )","var1 = var0 . var2 ( '^/' , var5 )"
call to the resolver.resolve method with request.path_info as an argument.,call to var0 method with request var2 as argument.,resolver_match = resolver . resolve ( request . path_info ),resolver_match = var0 ( request . var2 )
"call the method resource.decode with an argument settings.FILE_CHARSET, substitute the result for resource.",call method var0 with argument settings var1 substitute result for resource.,resource = resource . decode ( settings . FILE_CHARSET ),resource = var0 ( settings . var1 )
"call the function resource_string with 2 arguments app_config.name and pkg_name, substitute the result for resource.",call function var0 with 2 arguments var1 name and var2 substitute result for resource.,"resource = resource_string ( app_config . name , pkg_name )","resource = var0 ( var1 . name , var2 )"
resource_string is None.,var0 is var1 ,resource_string = None,var0 = var1
"as the arguments, substitute the result for response.   append the request to the end of the protected class member response._closable_objects.","as arguments, substitute result for response var0 append request to end of protected class member var1 ",response . _closable_objects . append ( request ),var1 . append ( request )
substitute self.__class__ for response._handler_class.,substitute var0 for var1 ,response . _handler_class = self . __class__,var1 = var0
call the method response.add_post_render_callback with _set_response_etag as argument.,call method response var1 with var2 as argument.,response . add_post_render_callback ( _set_response_etag ),response . var1 ( var2 )
called with 2 arguments: request and response.   call the method response.add_post_render_callback with an argument callback.,called with 2 arguments: request and response var0 call method response var2 with argument callback.,response . add_post_render_callback ( callback ),response . var2 ( callback )
response.content is bytes empty string.,var0 is bytes empty string.,response . content = b'',var0 = b''
response.streaming_content is an empty list.,response var1 is empty list.,response . streaming_content = [ ],response . var1 = [ ]
"join the resulting sequence in a string with comma as separator, assign the string to cc.   substitute response dictionary value under the key 'Cache-Control' for cc.","join resulting sequence in var0 string with comma as separator, assign string to cc var0 substitute response dict value under key var2 for ccvar0",response [ 'Cache-Control' ] = cc,response [ var2 ] = cc
substitute char '0' for the value under the 'Content-Length' key of the response dictionary.,substitute char var0 for value under var1 key of response dict.,response [ 'Content-Length' ] = '0',response [ 'Content-Length' ] = var0
"create md5 hash from string response.content in hexadecimal format, surround the hash with double quotes,","create var0 hash from string var1 in hexadecimal format, surround hash with double quotes,",response [ 'ETag' ] = ''%s'' % hashlib . md5 ( response . content ) . hexdigest ( ),response ['ETag'] = ''%s'' % hashlib.var0(var1).hexdigest()
"sum return value of the function call time.time() and cache_timeout, use it as an argument for function call of http_date,",sum return value of function call time.time() and var1 use it as argument for function call of var2 ,response [ 'Expires' ] = http_date ( time . time ( ) + cache_timeout ),response [ 'Expires' ] = var2 ( time . time ( ) + var1 )
"call the function http_date with no arguments, and substitute its return value","call function var0 with no arguments, and substitute its return value",response [ 'Last-Modified' ] = http_date ( ),response [ 'Last-Modified' ] = var0 ( )
modify value at the key 'Location' of the dictionary response by applying function request.build_absolute_uri on it.,modify value at key var0 of dict response by applying function request var2 on it.,response [ 'Location' ] = request . build_absolute_uri ( response [ 'Location' ] ),response [ var0 ] = request . var2 ( response [ var0 ] )
"substitute this list for additional_headers.   join all of the elements of vary_headers and additional_headers in a string delimited by a comma,","substitute var0 list for var1 join all of elements of var4 and var1 in string delimited by comma,","response [ 'Vary' ] = ', ' . join ( vary_headers + additional_headers )","response [ 'Vary' ] = ', ' . join ( var4 + var1 )"
"substitute return value of call to the function _set_response_etag with response as an argument, for response.","substitute return value of call to function var0 with response as argument, for response.",response = _set_response_etag ( response ),response = var0 ( response )
"call the callback function with request and dictionary argument param_dict as the arguments, substitute it for response.","call callback function with request and dict argument var0 as arguments, substitute it for response.","response = callback ( request , ** param_dict )","response = callback ( request , ** var0 )"
"call the function debug.technical_404_response with request and e as arguments, assign the result to response.","call function debug var1 with request and e as arguments, assign result to response.","response = debug . technical_404_response ( request , e )","response = debug . var1 ( request , e )"
"call the function func with request and response as arguments, assign the result to response.","call function var0 with request and response as arguments, assign result to response.","response = func ( request , response )","response = var0 ( request , response )"
"with one entry 'status_code' is integer 400, as arguments.   call the http.HttpResponseBadRequest function, assign the result to the response.","with one entry var0 is integer 400, as arguments var1 call http var2 function, assign result to response.",response = http . HttpResponseBadRequest ( ),response = http . var2 ( )
"call the method middleware.process_template_response with 2 arguments: request and response, substitute the result for response.","call method middleware var1 with 2 arguments: request and response, substitute result for response.","response = middleware . process_template_response ( request , response )","response = middleware . var1 ( request , response )"
"call the middleware_method with request, callback, callback_args and callback_kwargs as the arguments, substitute the result for response.","call var0 with request, callback var1 and var3 as arguments, substitute result for response.","response = middleware_method ( request , callback , callback_args , callback_kwargs )","response = var0 ( request , callback , var1 , var3 )"
"call the middleware_method with request and e as the arguments, substitute the result for response.","call var0 with request and e as arguments, substitute result for response.","response = middleware_method ( request , e )","response = var0 ( request , e )"
"call the function middleware_method with the request and response as the arguments, assign the result to response.","call function var0 with request and response as arguments, assign result to response.","response = middleware_method ( request , response )","response = var0 ( request , response )"
"call the function middleware_method with request and response as the arguments, substitute the result for response.","call function var0 with request and response as arguments, substitute result for response.","response = middleware_method ( request , response )","response = var0 ( request , response )"
"call the middleware_method with the request as an argument, substitute the result for response.","call var0 with request as argument, substitute result for response.",response = middleware_method ( request ),response = var0 ( request )
set response to None.,set response to var0 ,response = None,response = var0
"with name of the class type of the middleware_method instance, use it as the argument for call to the ValueError exception raise.   call the response.render() method and assign the return to the response.","with name of class type of var0 instance, use it as argument for call to var2 exception raise var3 call response.render() method and assign return to response.",response = response . render ( ),response = var4 ( )
"with the name of the type of the self class instance of the middleware_method, raise the ValueError with the previous as the argument.   call the method self.apply_response_fixes with the request and response as the arguments, substitute the result for response.","with name of type of self class instance of var0 raise var2 with previous as argument var3 call method self var5 with request and response as arguments, substitute result for response.","response = self . apply_response_fixes ( request , response )","response = self . var5 ( request , response )"
"status code set to integer 400, return the result.   call the method self.get_exception_response with the request, resolver and integer 400 as the arguments, substitute the result for response.","status code set to integer 400, return result var0 call method self var2 with request var3 and integer 400 as arguments, substitute result for response.","response = self . get_exception_response ( request , resolver , 400 )","response = self . var2 ( request , var3 , 400 )"
"status_code' with value 403, and 'request with value request,   respectively use the previous as the arguments for the call to the logger.warning function.   call the method self.get_exception_response with request, resolver and integer 403 as the arguments, assign the result to response.","status_codevar1request with value request var2 respectively use previous as arguments for call to var4 function var2 call method self var6 with request var7 and integer 403 as arguments, assign result to response.","response = self . get_exception_response ( request , resolver , 403 )","response = self . var6 ( request , var7 , 403 )"
"call the method self.get_exception_response with request, resolver and integer 404 as the arguments, assign the result to response.","call method self var1 with request var2 and integer 404 as arguments, assign result to response.","response = self . get_exception_response ( request , resolver , 404 )","response = self . var1 ( request , var2 , 404 )"
"call the self.get_response with request as the argument, substitute the result for response.","call self var1 with request as argument, substitute result for response.",response = self . get_response ( request ),response = self . var1 ( request )
"call the method self.handle_uncaught_exception with request, resolver and return value of the function sys.exec_info as the arguments.",call method self var1 with request var2 and return value of function sys var4 as arguments.,"response = self . handle_uncaught_exception ( request , resolver , sys . exc_info ( ) )","response = self . var1 ( request , var2 , sys . exc_info ( ) )"
"call to the self.handle_uncaught_exception method with request, resolver and value of the evaluated function sys.exec_info,",call to self var1 method with request var2 and value of evaluated function sys var4 ,"response = self . handle_uncaught_exception ( request , resolver , sys . exc_info ( ) )","response = self . var1 ( request , var2 , sys . exc_info ( ) )"
"append string "".moves.urllib_response"" to __name__, use it as an key to get the value from the sys.modules dictionary, substitute it for response.","append string var0 to var1 use it as key to get value from var2 dict, substitute it for response.",response = sys . modules [ __name__ + '.moves.urllib_response' ],response = var2 [ var1 + '.moves.urllib_response' ]
"call the function view_func with 3 arguments: request, unpacked list args, unpacked dictionary kwargs, substitute the result for response.","call function var0 with 3 arguments: request, unpacked list var1 unpacked dict var2 substitute result for response.","response = view_func ( request , * args , ** kwargs )","response = var0 ( request , * var1 , ** var2 )"
"call the function wrapped_callback with request, list or arguments callback_args and dictionary arguments callback_kwargs,","call function var0 with request, list or arguments var1 and dict arguments var3 ","response = wrapped_callback ( request , * callback_args , ** callback_kwargs )","response = var0 ( request , * var1 , ** var3 )"
response_fixes is a list with  http.fix_location_header and http.conditional_content_removal as elements.,var0 is list with http var3 and http var5 as elements.,"response_fixes = [ http . fix_location_header , http . conditional_content_removal , ]","var0 = [ http . var3 , var1http . var5 ]"
"convert 'Set-Cookie' to a string and convert the return value of method c.output(header='') call to a string,","convert var0 to string and convert return value of method c.output(header=var2) call to string,","response_headers . append ( ( str ( 'Set-Cookie' ) , str ( c . output ( header = '' ) ) ) )","response_headers . append ( ( str ( var0 ) , str ( c . output ( header = '' ) ) ) )"
"convert to k and v to strings for every k and v in return value of the response.item method, response_headers is a list containing all the above iteration elements.",convert to k and v to strings for every k and v in return value of var0 method var1 is list containing all above iteration elements.,"response_headers = [ ( str ( k ) , str ( v ) ) for k , v in response . items ( ) ]","var1 = [ ( str ( k ) , str ( v ) ) for k , v in var0s ( ) ]"
"call the method m.end, slice list rest from previous result as starting index to the end, substitute the result for rest.","call method var0 slice list rest from previous result as starting index to end, substitute result for rest.",rest = rest [ m . end ( ) : ],rest = rest [ m . end ( ) : ]
substitute value for rest.,substitute value for rest.,rest = value,rest = value
"result is an empty list, upto is integer 0.",result is empty list var0 is integer 0.,"result , upto = [ ] , 0","result , var0 = [ ] , 0"
"call the method copy.deepcopy with arguments self._choices and memo, substitute the result for result._choices.","call method var0 with arguments var1 and memo, substitute result for var2 ","result . _choices = copy . deepcopy ( self . _choices , memo )","var2 = var0 ( var1 , memo )"
append string '.' to result.,append string var0 to result.,result . append ( '.' ),result . append ( var0 )
append a tuple with 2 entries lang and priority to result.,append tuple with 2 entries var0 and priority to result.,"result . append ( ( lang , priority ) )","result . append ( ( var0 , priority ) )"
append ch to result.,append var0 to result.,result . append ( ch ),result . append ( var0 )
"instantiate a class Group with 2 arguments: string ""%%(%s)s"" formated with name, and name, append it to result.","instantiate class var0 with 2 arguments: string var1 formated with name, and name, append it to result.","result . append ( Group ( ( ( '%%(%s)s' % name ) , name ) ) )","result . append ( var0 ( ( '%%(%s)s' % name , name ) ) )"
"instantiate a class Group with 2 arguments: string ""%%(%s)s"" formated with param, and None, append it to result.",instantiate class var0 with 2 arguments: string var1 formated with var2 and var3 append it to result.,"result . append ( Group ( ( ( '%%(%s)s' % param ) , None ) ) )","result . append ( var0 ( ( '%%(%s)s' % var2 , var3 ) ) )"
"instantiate a class Group with 2 arguments: string ""%%(%s)s"" formated with param, and param, append it to result.",instantiate class var0 with 2 arguments: string var1 formated with var2 and var2 append it to result.,"result . append ( Group ( ( ( '%%(%s)s' % param ) , param ) ) )","result . append ( var0 ( ( '%%(%s)s' % var2 , var2 ) ) )"
"call the method self.create_token with 2 arguments bit and in_tag, append the result to result.",call method self var1 with 2 arguments bit and var2 append result to result.,"result . append ( self . create_token ( bit , in_tag ) )","result . append ( self . var1 ( bit , var2 ) )"
"call the method self.create_token with 3 arguments: last_bit, tuple with 2 elements: upto and sum of upto and length of last_bit,",call method self var1 with 3 arguments: var2 tuple with 2 elements: var4 and sum of var4 and length of var2 ,"result . append ( self . create_token ( last_bit , ( upto , upto + len ( last_bit ) ) , False ) )","result . append ( self . var1 ( var2 , ( var4 , var4 + len ( var2 ) ) , False ) )"
"call the method self.create_token with 3 arguments: self.template_string list elements from start index to end index,","call method self var1 with 3 arguments: self var3 list elements from start index to end index,","result . append ( self . create_token ( self . template_string [ start : end ] , ( start , end ) , True ) )","result . append ( self . var1 ( self . var3 [ start : end ] , ( start , end ) , True ) )"
"call the method self.create_token with 3 arguments: self.template_string list elements from upto index to start index,","call method self var1 with 3 arguments: self var3 list elements from var4 index to start index,","result . append ( self . create_token ( self . template_string [ upto : start ] , ( upto , start ) , False ) )","result . append ( self . var1 ( self . var3 [ var4 : start ] , ( var4 , start ) , False ) )"
"create a list with count decremented by 1 number of last element of result elements, extend list result with it.","create list with count var0 by 1 number of last element of result elements, extend list result with it.",result . extend ( [ result [ - 1 ] ] * ( count - 1 ) ),result . extend ( [ result [ - 1 ] ] * ( count - 1 ) )
"for every x in self.fields call the method x.__deepcopy__ with an argument memo, put the result into a tuple, substitute it for result.fields.","for every x in var0 call method x.__deepcopy__ with argument memo, put result into tuple, substitute it for var1 ",result . fields = tuple ( [ x . __deepcopy__ ( memo ) for x in self . fields ] ),var1 = tuple ( [ x . __deepcopy__ ( memo ) for x in var0 ] )
substitute key for result.key.,substitute key for var0 ,result . key = key,var0 = key
substitute self for result.parent.,substitute self for var0 ,result . parent = self,var0 = self
remove the first element from result.,remove first element from result.,result . pop ( ),result . pop ( )
substitute result.queryset for result.queryset.,substitute var0 for var0 ,result . queryset = result . queryset,var0 = var0
call the method result.setFormatter with an argument formatter.,call method result var1 with argument var2 ,result . setFormatter ( formatter ),result . var1 ( var2 )
"call function _checkLevel with an argument level, use the result as an argument for the method result.setLevel.","call function var0 with argument level, use result as argument for method result var2 ",result . setLevel ( _checkLevel ( level ) ),result . var2 ( var0 ( level ) )
"call the method result.setlist with 2 arguments: return value of the function copy.deepcopy called with 2 arguments: key and memo,","call method var0 with 2 arguments: return value of function var1 called with 2 arguments: key and memo,","result . setlist ( copy . deepcopy ( key , memo ) , copy . deepcopy ( value , memo ) )","var0 ( copy . deepcopy ( key , memo ) , var1 ( value , memo ) )"
call the method result.setlist with the arguments: key and value.,call method var0 with arguments: key and value.,"result . setlist ( key , value )","var0 ( key , value )"
sort result in reversed order by the key as lambda function with an argument k and reeturn value second element of k.,sort result in reversed order by key as lambda function with argument k and var0 value second element of var1,"result . sort ( key = lambda k : k [ 1 ] , reverse = True )","result . sort ( key = lambda k : k [ 1 ] , reverse = True )"
substitute elements of self.validators list for result.validators.,substitute elements of var0 list for var1 ,result . validators = self . validators [ : ],var1 = var0 [ : ]
"call the method copy.deepcopy with arguments self.widget and memo, substitute the result for result.widget.","call method var0 with arguments var1 and memo, substitute result for var2 ","result . widget = copy . deepcopy ( self . widget , memo )","var2 = var0 ( var1 , memo )"
"last element of result is an instance of Choice class, created with an argument list with 2 elements: None and last element of result.","last element of result is instance of var0 class, created with argument list with 2 elements: var1 and last element of result.","result [ - 1 ] = Choice ( [ None , result [ - 1 ] ] )","result [ - 1 ] = var0 ( [ var1 , result [ - 1 ] ] )"
increment i-th element of result by piece.,increment i-th element of result by piece.,result [ i ] += piece,result [ i ] += piece
"call the function _bin_to_long with an argument u perform bitwise exclusive OR with 2 operands, previous result an result,","call function var0 with argument u perform var1 exclusive var2 with 2 operands, previous result result,",result ^= _bin_to_long ( u ),result ^= var0 ( u )
append ':' and ipv4_address to result.,append var0 and var1 to result.,result += ':' + ipv4_address,result += var0 + var1
"call avoid_wrapping function with name2 modulus count2 as argument, call the ugettext with ', ' as argument, add previous 2 results, increment variable result by it.","call var0 function with var2 modulus var3 as argument, call var4 with var5 as argument, add previous 2 results, increment variable result by it.","result += ugettext ( ', ' ) + avoid_wrapping ( name2 % count2 )",result += var4 ( var5 ) + var0 ( var2 % var3 )
"second 2 elements of seventh element of hextets converted into hexadecimal number,   first 2 elements of eight element of hextets converted into hexadecimal number,   second 2 elements of eight element of hextets converted into hexadecimal number.   join first 5 elements of hextets into a string, separated by ':', substitute the result for result.","second 2 elements of seventh element of var0 converted into hexadecimal number var4 first 2 elements of eight element of var0 converted into hexadecimal number var4 second 2 elements of eight element of var0 converted into hexadecimal number var4 join first 5 elements of var0 into string, separated by var7, substitute result for result.",result = ':' . join ( hextets [ 0 : 6 ] ),result = var7 . join ( var0 [ 0 : 6 ] )
"join elements of hextets into a string, separated with ':', substitute it for result.","join elements of var0 into string, separated with var1, substitute it for result.",result = ':' . join ( hextets ),result = var1 . join ( var0 )
"result is the concatenation of the string ""\\x"" and the hexadecimal value of the length of array of bytes of the variable sc",result is concatenation of string var0 and hexadecimal value of length of array of bytes of variable sc,result = '\\x%02x' % len ( bytearray ( shellcode ) ),result = '\\x%02x' % len ( bytearray ( shellcode ) )
"result is an tuple with 2 elements: template and return value of the function make_origin called with 4 arguments: display_name,  loader, name and dirs.","result is tuple with 2 elements: template and return value of function var1 called with 4 arguments: var2 loader, name and var4 ","result = ( template , make_origin ( display_name , loader , name , dirs ) )","result = template , var0var1 ( var2 , var0loader , var0name , var0dirs )"
result is a list containing an empty string.,result is list containing empty string.,result = [ '' ],result = [ '' ]
result is an empty list.,result is empty list.,result = [ ],result = [ ]
result is an integer 0.,result is integer 0.,result = 0,result = 0
"use the remainder of the division of name by count as the argument for the call to the avoid_wrapping function, store the result in result.","use remainder of division of name by count as argument for call to var0 function, store result in result.",result = avoid_wrapping ( name % count ),result = var0 ( name % count )
"call the method block.nodelist.render with an argument context, substitute the result for result.","call method var0 with argument context, substitute result for result.",result = block . nodelist . render ( context ),result = var0 ( context )
"called with an argument k.   call the function c with an argument unpacked dictionary kwargs, substitute the result for result.",called with argument var0 call function c with argument unpacked dict var2 substitute result for result.,result = c ( ** kwargs ),result = c ( ** var2 )
"call the function cache_get with 2 arguments: key and root, substitute the result for result.","call function var0 with 2 arguments: key and root, substitute result for result.","result = cache_get ( key , root )","result = var0 ( key , root )"
"call the method copy.copy with an argument self, substitute the result for result.","call method var0 with argument self, substitute result for result.",result = copy . copy ( self ),result = var0 ( self )
"substitute the '%s' with table and list containing key, respectively.   fetch one entry from the database that cursor points at, substitute it for the result.","substitute var0 with table and list containing key, respectively var1 fetch one entry from database var2 cursor points at, substitute it for result.",result = cursor . fetchone ( ),result = cursor . fetchone ( )
"call the method datetime.datetime.combine with unpacked list data_list, substitute the result for result.",call method var0 with unpacked list var1 substitute result for result.,result = datetime . datetime . combine ( * data_list ),result = var0 ( * var1 )
"call the function datetime.datetime with 3 arguments: value.year, value.month and value.day, substitute the result for result.",call function var0 with 3 arguments: var1 var2 and var3 substitute result for result.,"result = datetime . datetime ( value . year , value . month , value . day )","result = var0 ( var1 , var2 , var3 )"
"call the method MONTHS.index with 6 arguments: year, month, day, hour, min and sec, substitute the result for result.","call method var0 index with 6 arguments: year, month, day, hour, min and sec, substitute result for result.","result = datetime . datetime ( year , month , day , hour , min , sec )","result = datetime . datetime ( year , month , day , hour , min , sec )"
"call the function factory with an argument unpacked dictionary kwargs, substitute the result for result.",call function factory with argument unpacked dict var0 substitute result for result.,result = factory ( ** kwargs ),result = factory ( ** var0 )
"call the function force_text with an argument message, return the result.","call function var0 with argument message, return result.",result = force_text ( message ),result = var0 ( message )
"call the function func with an argument unpacked list args, substitute the result for result.",call function var0 with argument unpacked list var1 substitute result for result.,result = func ( * args ),result = var0 ( * var1 )
"get translation_function attribute of the object _default, call the result with an argument eol_message, substitute the result for result.",get var0 attribute of object var1 call result with argument var2 substitute result for result.,"result = getattr ( _default , translation_function ) ( eol_message )","result = getattr ( var1 , var0 ) ( var2 )"
"get translation_function attribute of the object t, call the result with an argument eol_message, substitute the result for result.","get var0 attribute of object t, call result with argument var1 substitute result for result.","result = getattr ( t , translation_function ) ( eol_message )","result = getattr ( t , var0 ) ( var1 )"
"call the method handler.handle_raw_input with 5 arguments: self._input_data, self._meta, self._content_length, self._boundary,",call method handler var1 with 5 arguments: var2 var3 var4 var5 ,"result = handler . handle_raw_input ( self . _input_data , self . _meta , self . _content_length , self . _boundary , encoding )","result = handler . var1 ( var2 , var3 , var4 , var5 , encoding )"
"call the method logging.Filter with an argument name, substitute the result for result.","call method logging var0 with argument name, substitute result for result.",result = logging . Filter ( name ),result = logging . var0 ( name )
"call the method logging.Formatter with 2 arguments: fmt and dfmt, substitute the result for result.",call method logging var0 with 2 arguments: var1 and var2 substitute result for result.,"result = logging . Formatter ( fmt , dfmt )","result = logging . var0 ( var1 , var2 )"
"call the method middleware.process_exception with 2 arguments: request and e, substitute the result for result.","call method middleware var1 with 2 arguments: request and e, substitute result for result.","result = middleware . process_exception ( request , e )","result = middleware . var1 ( request , e )"
"call the method middleware.process_request with an argument request, substitute the result for result.","call method middleware var1 with argument request, substitute result for result.",result = middleware . process_request ( request ),result = middleware . var1 ( request )
"call the method middleware.process_view with 4 arguments: request, view_func, args and kwargs, substitute the result for result.",call method middleware var1 with 4 arguments: request var2 var4 and var5 substitute result for result.,"result = middleware . process_view ( request , view_func , args , kwargs )","result = middleware . var1 ( request , var2 , var4 , var5 )"
substitute new_result for result.,substitute var0 for result.,result = new_result,result = var0
result is None.,result is var0 ,result = None,result = var0
"append list with element inner to list containing first start elements of result, substitute it for result.","append list with element inner to list containing first start elements of result, substitute it for result.",result = result [ : start ] + [ inner ],result = result [ : start ] + [ inner ]
"call the method self.__class__ with 3 arguments: an empty string, mutable is boolean True, encoding is self.encoding, substitute the result for result.","call method var0 with 3 arguments: empty string, mutable is boolean var1 encoding is var2 substitute result for result.","result = self . __class__ ( '' , mutable = True , encoding = self . encoding )","result = var0 ( '' , mutable = var1 , encoding = var2 )"
"call the method self.__class__, substitute the result for result.",call method var0 substitute result for result.,result = self . __class__ ( ),result = var0 ( )
"call the method self._resolve, substitute the result for result.",call method var0 substitute result for result.,result = self . _resolve ( ),result = var0 ( )
substitute first size elements of self.buffer for result.,substitute first size elements of var0 for result.,result = self . buffer [ : size ],result = var0 [ : size ]
"add self.buffer and self._read_limited method return value together, store it in result.","add var0 and var1 method return value together, store it in result.",result = self . buffer + self . _read_limited ( ),result = var0 + var1 ( )
"call the method self.read_limited with length of self.buffer subtracted from size as argument, add result to self.buffer, store it in result.","call method self var1 with length of var2 subtracted from size as argument, add result to var2 store it in result.",result = self . buffer + self . _read_limited ( size - len ( self . buffer ) ),result = var2 + self . _read_limited ( size - len ( var2 ) )
"call the method self.configurator.convert with an argument value, substitute the result for result.","call method var0 with argument value, substitute result for result.",result = self . configurator . convert ( value ),result = var0 ( value )
call the method self.configurator.convert with an argument value.,call method var0 with argument value.,result = self . configurator . convert ( value ),result = var0 ( value )
"call the method self.configurator.convert with an arugment value, substitute the result for result.","call method var0 with var1 value, substitute result for result.",result = self . configurator . convert ( value ),result = var0 ( value )
"call the method self.configure_custom with an argument config, substitute the result for result.","call method self var1 with argument config, substitute result for result.",result = self . configure_custom ( config ),result = self . var1 ( config )
"get the value under the key key of the self.find_template_cache dictionary, substitute it for result.","get value under key key of self var1 dict, substitute it for result.",result = self . find_template_cache [ key ],result = self . var1 [ key ]
"call the method self.nodelist.render with an argument context, substitute the result for result.","call method var0 with argument context, substitute result for result.",result = self . nodelist . render ( context ),result = var0 ( context )
"read size number of bytes from self.stream stream, store the result in the result.","read size number of bytes from var0 stream, store result in result.",result = self . stream . read ( size ),result = var0 . read ( size )
"result is an instance of SimpleLazyObject class, created with an argument self._setupfunc.","result is instance of var0 class, created with argument var1 ",result = SimpleLazyObject ( self . _setupfunc ),result = var0 ( var1 )
"round up radio, convert it to an integer and the convert it to a string and substitute the result for result.","round up radio, convert it to integer and convert it to string and substitute result for result.",result = str ( int ( round ( ratio ) ) ),result = str ( int ( round ( ratio ) ) )
"call the method __deepcopy__ with an argument memo from the base class of the class ChoiceField, substitute the result for result.",call method var0 with argument memo from base class of class var1 substitute result for result.,"result = super ( ChoiceField , self ) . __deepcopy__ ( memo )","result = super ( var1 , self ) . var0 ( memo )"
"call the method __deepcopy__ from the base class of the class ChoiceField, with an argument memo, substitute the result for result.","call method var0 from base class of class var1 with argument memo, substitute result for result.","result = super ( ChoiceField , self ) . __deepcopy__ ( memo )","result = super ( var1 , self ) . var0 ( memo )"
"call the method to_python with an argument value from the base class of the DateTimeField class, substitute the result for result.","call method var0 with argument value from base class of var2 class, substitute result for result.","result = super ( DateTimeField , self ) . to_python ( value )","result = super ( var2 , self ) . var0 ( value )"
"call the method __deepcopy__ with an argument memo, from the base class of the class MultiValueField, substitute the result for result.","call method var0 with argument memo, from base class of class var1 substitute result for result.","result = super ( MultiValueField , self ) . __deepcopy__ ( memo )","result = super ( var1 , self ) . var0 ( memo )"
"call the method pop from the base class of the class SortedDict, with 2 arguments k and unpacked list args,",call method pop from base class of class var0 with 2 arguments k and unpacked list var1 ,"result = super ( SortedDict , self ) . pop ( k , * args )","result = super ( var0 , self ) . pop ( k , * var1 )"
"call the method popitem from the base class of the class SortedDict, substitute the result for result.",call method var0 from base class of class var1 substitute result for result.,"result = super ( SortedDict , self ) . popitem ( )","result = super ( var1 , self ) . var0 ( )"
"call the unsign method from the base class of the TimestampSigner class with an argument value, substitute the result for result.","call var0 method from base class of var1 class with argument value, substitute result for result.","result = super ( TimestampSigner , self ) . unsign ( value )","result = super ( var1 , self ) . var0 ( value )"
"get type of self, call it and substitute the result for result.","get type of self, call it and substitute result for result.",result = type ( self ) ( ),result = type ( self ) ( )
"call the function ugettext with an argument msg_with_ctxt, substitute the result for result.",call function var0 with argument var1 substitute result for result.,result = ugettext ( msg_with_ctxt ),result = var0 ( var1 )
"string created by concatenating context, CONTEXT_SEPARATOR and plural and number.   call the function ungettext with unpacked dictionary msgs_with_ctxt, substitute the result for result.",string created by concatenating context var0 and plural and number var1 call function var2 with unpacked dict var3 substitute result for result.,result = ungettext ( * msgs_with_ctxt ),result = var2 ( * var3 )
"call the function ungettext with 3 arguments: singular, plural and number, substitute the result for result.","call function var0 with 3 arguments: singular, plural and number, substitute result for result.","result = ungettext ( singular , plural , number )","result = var0 ( singular , plural , number )"
"call the function user_function with 2 arguments: unpacked list args and unpacked dictionary kwds, substitute the result for result.",call function var0 with 2 arguments: unpacked list var1 and unpacked dict var2 substitute result for result.,"result = user_function ( * args , ** kwds )","result = var0 ( * var1 , ** var2 )"
"call the function user_function with 2 arguments unpacked list args and unpacked dictionary kwds, substitute the result for result.",call function var0 with 2 arguments unpacked list var1 and unpacked dict var2 substitute result for result.,"result = user_function ( * args , ** kwds )","result = var0 ( * var1 , ** var2 )"
"perform bitwise exclusive OR on 2 operands integer representation of x and integer representation of y,","perform var0 exclusive var1 on 2 operands integer representation of x and integer representation of y,",result |= ord ( x ) ^ ord ( y ),result |= ord ( x ) ^ ord ( y )
"perform bitwise exclusive OR on 2 operands x and y, perform bitwise OR with 2 operands: previous result and result, substitute the result for result.","perform var0 exclusive var2 on 2 operands x and y, perform var0 var2 with 2 operands: previous result and result, substitute result for result.",result |= x ^ y,result |= x ^ y
append param to i-th element of result_args.,append var0 to i-th element of var1 ,result_args [ i ] . append ( param ),var1 [ i ] . append ( var0 )
result_args is a list containing an empty list.,var0 is list containing empty list.,result_args = [ [ ] ],var0 = [ [ ] ]
substitute new_args for result_args.,substitute var0 for var1 ,result_args = new_args,var1 = var0
"call the function predicate with an argument item, use it as a key to get results dictionary value, append item to it.","call function predicate with argument item, use it as key to get results dict value, append item to it.",results [ predicate ( item ) ] . append ( item ),results [ predicate ( item ) ] . append ( item )
"results is a tuple with 2 elements, 2 empty lists.","results is tuple with 2 elements, 2 empty lists.","results = ( [ ] , [ ] )","results = [ ] , [ ]"
substitute _ for ret.,substitute var0 for ret.,ret = _,ret = var0
"join elements of self.vals into a bytes string, substitute the result for ret.","join elements of var0 into bytes string, substitute result for ret.",ret = b'' . join ( self . vals ),ret = b'' . join ( var0 )
"all the function fcntl.flock with return value of the _fd(f) function and fcntl.LOCK_UN as arguments, substitute the result for ret.","all the function fcntl.flock with return value of the _fd(f) function and fcntl.LOCK_UN as arguments, substitute the result for ret.","ret = fcntl . flock ( _fd ( f ) , fcntl . LOCK_UN )","ret = fcntl . flock ( _fd ( f ) , fcntl . LOCK_UN )"
"call the function fcntl.flock with return value of the _fd(f) function and flags as arguments, substitute the result for ret.","call the function fcntl.flock with return value of the _fd(f) function and flags as arguments, substitute the result for ret.","ret = fcntl . flock ( _fd ( f ) , flags )","ret = fcntl . flock ( _fd ( f ) , flags )"
"call the LockFileEx function with 6 arguments: hfile, flags, integer 0, integer 0, hexadecimal value FFFF0000, return value of the byref function called with argument overlapped, substitute the result for ret.","call var0 function with 6 arguments: var1 flags, integer 0, integer 0, hexadecimal value var2 return value of var4 function called with argument overlapped, substitute result for ret.","ret = LockFileEx ( hfile , flags , 0 , 0 , 0xFFFF0000 , byref ( overlapped ) )","ret = var0 ( var1 , flags , 0 , 0 , 4294901760 , var4 ( overlapped ) )"
"call the method self._cache.get_multi with argument new_keys, substitute the result for ret.",call method self._cache var0 with argument var1 substitute result for ret.,ret = self . _cache . get_multi ( new_keys ),ret = self . _cache . var0 ( var1 )
"call the LockFileEx function with 5 arguments: hfile, integer 0, integer 0, hexadecimal value FFFF0000, return value of the byref function called with argument overlapped, substitute the result for ret.","call var0 function with 5 arguments: var1 integer 0, integer 0, hexadecimal value var2 return value of var4 function called with argument overlapped, substitute result for ret.","ret = UnlockFileEx ( hfile , 0 , 0 , 0xFFFF0000 , byref ( overlapped ) )","ret = UnlockFileEx ( var1 , 0 , 0 , 4294901760 , var4 ( overlapped ) )"
"subtract length of hextet from 4, create a string with previous result number of character '0', append hextet to it,","subtract length of var0 from 4, create string with previous result number of character var2, append var0 to it,",ret_ip . append ( ( '0' * ( 4 - len ( hextet ) ) + hextet ) . lower ( ) ),ret_ip . append ( ( var2 * ( 4 - len ( var0 ) ) + var0 ) . lower ( ) )
ret_ip is an empty list.,ret_ip is empty list.,ret_ip = [ ],ret_ip = [ ]
return nothing.,return nothing.,return,return
return.,return.,return,return
"return nothing,","return nothing,",return,return
self._files is an instance of class MultiValueDict.   return nothing.,var0 is instance of class var1 return nothing.,return,return
return from the function,return from function,return,return
"call the function _ with an argument string 'a.m.', return the result.","call function var0 with argument string var1, return result.",return _ ( 'a.m.' ),return var0 ( var1 )
"call the function _ with an argument string 'AM', return the result.","call function var0 with argument string var1, return result.",return _ ( 'AM' ),return var0 ( var1 )
"call the function _ with an argument string 'midnight', return the result.","call function var0 with argument string var1, return result.",return _ ( 'midnight' ),return var0 ( var1 )
"call the function _ with an argument string 'noon', return the result.","call function var0 with argument string var1, return result.",return _ ( 'noon' ),return var0 ( var1 )
"call the function _ with an argument string 'p.m.', return the result.","call function var0 with argument string var1, return result.",return _ ( 'p.m.' ),return var0 ( var1 )
"call the function _ with an argument string 'PM', return the result.","call function var0 with argument string var1, return result.",return _ ( 'PM' ),return var0 ( var1 )
"call the function __proxy__ with 2 arguments: args and kw, return the result.","call function var0 with 2 arguments: var1 and kw, return result.","return __proxy__ ( args , kw )","return var0 ( var1 , kw )"
return __wrapper__.,return var0 ,return __wrapper__,return var0
return _cached_filenames.,return _cached_filenames.,return _cached_filenames,return _cached_filenames
"return an instance of _CacheInfo class, created with 4 arguments: value under the HITS key of the stats dictionary,","return instance of _CacheInfo class, created with 4 arguments: value under var0 key of var1 dict,","return _CacheInfo ( stats [ HITS ] , stats [ MISSES ] , maxsize , len ( cache ) )","return _CacheInfo ( var1 [ var0 ] , var1 [ MISSES ] , maxsize , len ( cache ) )"
"unpacked dictionary created with elements of morekwargs dictionary through the kwargs mapping, return the result.   return _curried.","unpacked dict created with elements of var0 dict through var1 mapping, return result var2 return var3 ",return _curried,return var3
"call the function _curried_func with 2 arguments: list moreargs appended to args and unpacked,","call function _curried_func with 2 arguments: list var0 appended to var1 and unpacked,","return _curried_func ( * ( args + moreargs ) , ** dict ( kwargs , ** morekwargs ) )","return _curried_func ( * ( var1 + var0 ) , ** dict ( kwargs , ** morekwargs ) )"
return _dec.,return var0 ,return _dec,return var0
return _decorator.,return var0 ,return _decorator,return var0
return _default.,return var0 ,return _default,return var0
"call the method _entity_re.sub with 2 arguments: _replace_entity and text, return the result.","call method var0 with 2 arguments: _replace_entity and text, return result.","return _entity_re . sub ( _replace_entity , text )","return var0 ( _replace_entity , text )"
"call the function _generate_cache_key with request, method, headerlist, key_prefix as arguments, return the result.","call function _generate_cache_key with request, method var0 var1 as arguments, return result.","return _generate_cache_key ( request , method , headerlist , key_prefix )","return _generate_cache_key ( request , method , var0 , var1 )"
"call the function _generate_cache_key with request, request.method, an empty list and key_prefix as arguments, return the result.","call function _generate_cache_key with request var0 empty list and var1 as arguments, return result.","return _generate_cache_key ( request , request . method , [ ] , key_prefix )","return _generate_cache_key ( request , var0 , [ ] , var1 )"
"call the function _generate_cache_key with request, request.method, headerlist, key_prefix as arguments, return the result.","call function _generate_cache_key with request var0 var1 var2 as arguments, return result.","return _generate_cache_key ( request , request . method , headerlist , key_prefix )","return _generate_cache_key ( request , var0 , var1 , var2 )"
"call the function get_current_timezone, use the result as an argument for the call to the function _get_timezone_name, return the result.",call function var0 use result as argument for call to function var1 return result.,return _get_timezone_name ( get_current_timezone ( ) ),return var1 ( var0 ( ) )
"call the function get_default_timezone, use the result as an argument for the call to the function _get_timezone_name, return the result.",call function var0 use result as argument for call to function var1 return result.,return _get_timezone_name ( get_default_timezone ( ) ),return var1 ( var0 ( ) )
"return instance of _HashedSeq class, created with an argument key.","return instance of var0 class, created with argument key.",return _HashedSeq ( key ),return var0 ( key )
"return value of method url.hexdigest(), return value of method ctx.hexdigest, respectively, substitute it for cache_key.   call the function _i18n_cache_key_suffix with request and cache_key as arguments, return the result.","return value of method url.hexdigest(), return value of method var1 respectively, substitute it for var2 call function var5 with request and var2 as arguments, return result.","return _i18n_cache_key_suffix ( request , cache_key )","return var5 ( request , var2 )"
"to the function url.hexdigest(), respectively, substitute it for cache_key.   call the function _i18n_cache_key_suffix with request and cache_key as arguments, return the result.","to function url.hexdigest(), respectively, substitute it for var1 call function var4 with request and var1 as arguments, return result.","return _i18n_cache_key_suffix ( request , cache_key )","return var4 ( request , var1 )"
"call the function _import_module with an argument self.mod, return the result.",call function var0 with argument var1 return result.,return _import_module ( self . mod ),return var0 ( var1 )
return _localtime.,return var0 ,return _localtime,return var0
"substitute the result for result.   call the function _long_to_bin with 2 arguments: result and hex_format_string, return the result.",substitute result for result var0 call function var1 with 2 arguments: result and var2 return result.,"return _long_to_bin ( result , hex_format_string )","return var1 ( result , var2 )"
return _make_decorator.,return var0 ,return _make_decorator,return var0
"get the value under the format key of the _serializers dictionary, return the Deserializer filed of the result.","get value under format key of var0 dict, return var1 filed of result.",return _serializers [ format ] . Deserializer,return var0 [ format ] . var1
"get the value under the format key of the _serializers dictionary, return the Serializer filed of the result.","get value under format key of var0 dict, return var1 filed of result.",return _serializers [ format ] . Serializer,return var0 [ format ] . var1
"call the function _slugify with an argument value, return the result.","call function var0 with argument value, return result.",return _slugify ( value ),return var0 ( value )
return _standard_context_processors.,return var0 ,return _standard_context_processors,return var0
return the value under the is_dst key of the _time.tzname dictionary.,return value under var0 key of var1 dict.,return _time . tzname [ is_dst ],return var1 [ var0 ]
"call the method self._isdst with an argument dt, use it as an key to get the value from the _time.tzname dictionary, return it.","call method var0 with argument var1 use it as key to get value from var2 dict, return it.",return _time . tzname [ self . _isdst ( dt ) ],return var2 [ self . _isdst ( var1 ) ]
"call the function _trans.activate with an argument language, return the result.","call function var0 with argument language, return result.",return _trans . activate ( language ),return var0 ( language )
"call the function _trans.check_for_language with an argument lang_code, return the result.",call function _trans var1 with argument var2 return result.,return _trans . check_for_language ( lang_code ),return _trans . var1 ( var2 )
"call the function _trans.deactivate, return the result.",call function var0 return result.,return _trans . deactivate ( ),return var0 ( )
"call the function _trans.deactivate_all, return the result.",call function _trans var1 return result.,return _trans . deactivate_all ( ),return _trans . var1 ( )
"call the function _trans.get_language, return the result.",call function _trans var1 return result.,return _trans . get_language ( ),return _trans . var1 ( )
"call the function _trans.get_language_bidi, return the result.",call function _trans var1 return result.,return _trans . get_language_bidi ( ),return _trans . var1 ( )
"call the function _trans.get_language_from_path with an argument path, return the result.","call function _trans var0 with argument path, return result.",return _trans . get_language_from_path ( path ),return _trans . var0 ( path )
"call the function _trans.get_language_from_request with 2 arguments: request and check_path, return the result.",call function _trans var0 with 2 arguments: request and var1 return result.,"return _trans . get_language_from_request ( request , check_path )","return _trans . var0 ( request , var1 )"
call the method _trans.gettext with an argument message.,call method var0 with argument message.,return _trans . gettext ( message ),return var0 ( message )
call the method _trans.gettext_noop with an argument message.,call method _trans var0 with argument message.,return _trans . gettext_noop ( message ),return _trans . var0 ( message )
"call the method _trans.ngettext with 3 arguments singular, plural and number.","call method var0 with 3 arguments singular, plural and number.","return _trans . ngettext ( singular , plural , number )","return var0 ( singular , plural , number )"
"call the method _trans.npgettext with 4 arguments context, singular, plural and number.","call method var0 with 4 arguments context, singular, plural and number.","return _trans . npgettext ( context , singular , plural , number )","return var0 ( context , singular , plural , number )"
call the method _trans.pgettext with 2 arguments context and message.,call method var0 with 2 arguments context and message.,"return _trans . pgettext ( context , message )","return var0 ( context , message )"
"call the function _trans.templatize with 2 arguments: src and origin, return the result.","call function var0 with 2 arguments: var1 and origin, return result.","return _trans . templatize ( src , origin )","return var0 ( var1 , origin )"
"call the function _trans.to_locale with an argument language, return the result.","call function _trans var1 with argument language, return result.",return _trans . to_locale ( language ),return _trans . var1 ( language )
call the method _trans.gettext_noop with an argument message.,call method _trans var0 with argument message.,return _trans . ugettext ( message ),return _trans . ugettext ( message )
"call the method _trans.ungettext with 3 arguments singular, plural and number.","call method var0 with 3 arguments singular, plural and number.","return _trans . ungettext ( singular , plural , number )","return var0 ( singular , plural , number )"
"return _translations dictionary value, under the language key.","return var0 dict value, under language key.",return _translations [ language ],return var0 [ language ]
return _wrapped_view.,return var0 ,return _wrapped_view,return var0
return _wrapper.,return var0 ,return _wrapper,return var0
return integer -1.,return integer var0 ,return - 1,return - 1
"join elements of extra_classes into a string separated by whitespaces, return it.",join elements of var0 into string separated by var1 return it.,return ' ' . join ( extra_classes ),return ' ' . join ( var0 )
"and truncate, return the result.   return elements of words joined in a string, separated with whitespaces.","and truncate, return result var0 return elements of words joined in string, separated with var1 ",return ' ' . join ( words ),return ' ' . join ( words )
"join template_dirs elements into a string, separated by '|', use it as an argument for the call to the function force_bytes,","join var0 elements into string, separated by var2, use it as argument for call to function var3 ","return '-' . join ( [ template_name , hashlib . sha1 ( force_bytes ( '|' . join ( template_dirs ) ) ) . hexdigest ( ) ] )","return var2 - var2 . join ( [ template_name , hashlib . sha1 ( var3 ( var2 . join ( var0 ) ) ) . hexdigest ( ) ] )"
"convert the result into a lowercase, append it to ret_ip.   join elements of ret_ip into a string separated with ':', return it.","convert result into lowercase, append it to var0 join elements of var0 into string separated with var4, return it.",return ':' . join ( ret_ip ),return var4 . join ( var0 )
return an empty string.,return empty string.,return '',return ''
substitute the result for value under the self.target_var key of the context dictionary.   return an empty string.,substitute result for value under self var1 key of context dict var2 return empty string.,return '',return ''
"return an empty string,","return empty string,",return '',return ''
"key for 'grouper' and val converted into a list for 'list', for every key and val in result of the function groupby,   called with 2 arguments: obj_list and lambda function with an argument obj and return value as a result of the function,   self.resolve_expression called with 2 arguments obj and context.   return an empty string,","key for var0 and var1 converted into list for var3, for every key and var1 in result of function var4 called with 2 arguments: var8 and lambda function with argument var10 and return value as result of function var5 self var13 called with 2 arguments var10 and context var5 return empty string,",return '',return ''
return an empty string and an empty string.,return empty string and empty string.,"return '' , ''","return '' , ''"
"call the function _generator, join the result into a string, return the result.","call function var0 join result into string, return result.",return '' . join ( _generator ( ) ),return '' . join ( var0 ( ) )
"join elements of base36 into a string, return it.","join elements of var0 into string, return it.",return '' . join ( base36 ),return '' . join ( var0 )
"join elements of c into a string, return it.","join elements of c into string, return it.",return '' . join ( c ),return '' . join ( c )
"4 for 'h', 4 for 'i', 4 for 'j', 5 for 'k', 5 for 'l', 5 for 'm', 6 for 'n', 6 for 'o', 6 for 'p', 7 for 'q', 7 for 'r', 7 for 'r',   7 for 's', 7 for 't', 8 for 't', 8 for 'u', 8 for 'v', 9 for 'w', 9 for 'x', 9 for 'y' and 9 for 'z'.   for every c in phone converted to lowercase, join the value under the c key of the char2number dictionary into a string, return it.","4 for var0, 4 for var1, 4 for var2, 5 for var3, 5 for var4, 5 for var5, 6 for var6, 6 for var7, 6 for var8, 7 for var9, 7 for var10, 7 for var10 var12 7 for var14, 7 for var16, 8 for var16, 8 for var18, 8 for var19, 9 for var20, 9 for var21, 9 for var22 and 9 for var23 var12 for every c in phone converted to lowercase, join value under c key of var24 dict into string, return it.","return '' . join ( char2number . get ( c , c ) for c in phone . lower ( ) )","return '' . join ( var24 . get ( c , c ) for c in phone . lower ( ) )"
"for every s in strings, call the function force_text with an argument s, join the results in a string, return the result.","for every s in strings, call function var0 with argument s, join results in string, return result.",return '' . join ( force_text ( s ) for s in strings ),return '' . join ( var0 ( s ) for s in strings )
"join elements of output into a string, return the result.","join elements of output into string, return result.",return '' . join ( output ),return '' . join ( output )
"join elements of pieces into a string, return it.","join elements of pieces into string, return it.",return '' . join ( pieces ),return '' . join ( pieces )
"and settings.SECRET_KEY, call on it method encode with an argument string 'utf-8',   use the result as an argument for the call to the method hashlib.sha256, call the method digest on the result,   use the result as an argument for the call to the function random.seed.   call the function random.choice with an argument allowed_chars, for every i in range of integers from 0 to lengths,","and settings var0 call on it method encode with argument string var2 var3 use result as argument for call to method var6 call method digest on result var3 use result as argument for call to function var7 var3 call function var8 with argument var9 for every i in range of integers from 0 to lengths,",return '' . join ( random . choice ( allowed_chars ) for i in range ( length ) ),return '' . join ( random . choice ( var9 ) for i in range ( length ) )
"join rendered_widgets into a string, return it.","join var0 into string, return it.",return '' . join ( rendered_widgets ),return '' . join ( var0 )
"join elements of self.fed into a string, return the result.","join elements of var0 into string, return result.",return '' . join ( self . fed ),return '' . join ( var0 )
"join elements of words into a string, return it.","join elements of words into string, return it.",return '' . join ( words ),return '' . join ( words )
"return a string '""%s""' formated with etag, in which every occurrence of '\\' is replaced with '\\\\' and every occurrence of '""',","return string var0 formated with var1 in var2 every occurrence of var3 is replaced with var5 and every occurrence of var7,","return ''%s'' % etag . replace ( '\\' , '\\\\' ) . replace ( ''' , '\\'' )","return ''%s'' % var1.replace('\\', '\\\\').replace(''', '\\'')"
"for every c in self.children.   return string '(%s: %s)', formated with self.connector and string created by joining c into a string, separated by ', ',","for every c in var0 return string var2, formated with var3 and string created by joining c into string, separated by var4,","return '(%s: %s)' % ( self . connector , ', ' . join ( [ str ( c ) for c in self . children ] ) )","return var2 % ( var3 , ', ' . join ( [ str ( c ) for c in var0 ] ) )"
"return string '(NOT (%s: %s))', formated with self.connector and string created by joining c into a string, separated by ', ',","return string var0, formated with var1 and string created by joining c into string, separated by var2,","return '(NOT (%s: %s))' % ( self . connector , ', ' . join ( [ str ( c ) for c in self . children ] ) )","return '(NOT(%s: %s))' % ( var1 , var2 . join ( [ str ( c ) for c in self . children ] ) )"
"for every k and v in result of the function six.iteritems,called with an argument self,","for every k and v in result of function var0 called with argument self,","return '{%s}' % ', ' . join ( '%r: %r' % ( k , v ) for k , v in six . iteritems ( self ) )","return '{%s}' % ', ' . join ( '%r: %r' % ( k , v ) for k , v in var0 ( self ) )"
"for every e in self, append convert e to an string and append it to string '* ',","for every e in self, append convert e to string and append it to string var0,",return '\n' . join ( '* %s' % e for e in self ),return '\n' . join ( '* %s' % e for e in self )
"join elements of output into a string, separated by newline characters, return it.","join elements of output into string, separated by var0 characters, return it.",return '\n' . join ( output ),return '\n' . join ( output )
"join output into a string, separated by newline characters, return it.","join output into string, separated by var0 characters, return it.",return '\n' . join ( output ),return '\n' . join ( output )
"join elements of the output into a string, separated by newlies, return the string.","join elements of output into string, separated by var0 return string.",return '\n' . join ( output ),return '\n' . join ( output )
"join all the results into a string separated by newlines, append the result to output.   join elements of output into a string, separated by newline characters, return the result.","join all results into string separated by var0 append result to output var2 join elements of output into string, separated by var1 characters, return result.",return '\n' . join ( output ),return '\n' . join ( output )
"join elements of output in a string, separated by newlines, return it.","join elements of output in string, separated by var0 return it.",return '\n' . join ( output ),return '\n' . join ( output )
"join elements of output into a string, separated with newlines, return the result.","join elements of output into string, separated with var0 return result.",return '\n' . join ( output ),return '\n' . join ( output )
"call the sql_flush function with self.style, connections under the key with the value of options dictionary under the 'database' key,","call var0 function with var2 connections under key with value of options dict under var3 key,","return '\n' . join ( sql_flush ( self . style , connections [ options [ 'database' ] ] , only_django = True ) )","return '\n' . join ( var0 ( var2 , connections [ options [ var3 ] ] , only_django = True ) )"
"join statements into a string, separated by newlines, return it.","join statements into string, separated by var0 return it.",return '\n' . join ( statements ),return '\n' . join ( statements )
"join the list of statements into a string separated by new lines, return it.","join list of statements into string separated by new lines, return it.",return '\n' . join ( statements ),return '\n' . join ( statements )
"join statements in a string separated by newline, return the result.",join statements in string separated by var0 return result.,return '\n' . join ( statements ),return '\n' . join ( statements )
"join statements into a string, separated by newline characters, return it.","join statements into string, separated by var0 characters, return it.",return '\n' . join ( statements ),return '\n' . join ( statements )
"join usage elements in a string separated by newline characters, return it.","join usage elements in string separated by var0 characters, return it.",return '\n' . join ( usage ),return '\n' . join ( usage )
"format the string  '<p>%s</p>' with the result, for every p in paras, substitute list of results for paras.   join elements of paras into a string separated with '\n\n', return the result.","format string var2 with result, for every p in paras, substitute list of results for paras var0 join elements of paras into string separated with var3, return result.",return '\n\n' . join ( paras ),return '\n\n' . join ( paras )
"format string '\x1b[%sm' with RESET, return the result.","format string '\x1b[%sm' with RESET, return the result.",return '\x1b[%sm' % RESET,return '\x1b[%sm' % RESET
"called with arguments v and self.encoding, extend the output with the result.   join elements of the output into a string, separated with '&', return the result.","called with arguments v and var0 extend output with result var1 join elements of output into string, separated with var2, return result.",return '&' . join ( output ),return var2 . join ( output )
"call the method calendar.monthrange with 2 arguments: self.data.year and self.data.month,",call method var0 with 2 arguments: var1 and var2 ,"return '%02d' % calendar . monthrange ( self . data . year , self . data . month ) [ 1 ]","return '%02d' % var0 ( var1 , var2 ) [ 1 ]"
return a string '%02d' formated with self.data.day.,return string var0 formated with var1 ,return '%02d' % self . data . day,return var0 % var1
return a string '%02d' formated with self.data.minute.,return string var0 formated with var1 ,return '%02d' % self . data . minute,return var0 % var1
return a string '%02d' formated with self.data.month.,return string var0 formated with var1 ,return '%02d' % self . data . month,return var0 % var1
return a string '%02d' formated with self.data.second.,return string var0 formated with var1 ,return '%02d' % self . data . second,return var0 % var1
return a string '%02d' formated with the result of the function self.g.,return string var0 formated with result of function var1 ,return '%02d' % self . g ( ),return var0 % var1 ( )
return a string '%06d' formated with self.data.microsecond.,return string var0 formated with var1 ,return '%06d' % self . data . microsecond,return var0 % var1
"return a string '%s %s %s' formated with 3 elements: result of the function force_text called with an argument i,","return string var0 formated with 3 elements: result of function var1 called with argument i,","return '%s %s %s' % ( _ ( ', ' ) . join ( force_text ( i ) for i in list_ [ : - 1 ] ) , force_text ( last_word ) , force_text ( list_ [ - 1 ] ) )","return var0 % ( _ ( ', ' ) . join ( var1 ( i ) for i in list_ [ : - 1 ] ) , var1 ( last_word ) , var1 ( list_ [ - 1 ] ) )"
return a string '%02d' formated with self.data.month.,return string var0 formated with var1 ,"return '%s %s' % ( self . f ( ) , self . a ( ) )","return '%s %s' % ( self . f ( ) , self . a ( ) )"
"substitute '%s' in string '%s_%s' with id_ and first_select, return it.",substitute var0 in string var1 with var3 and var4 return it.,"return '%s_%s' % ( id_ , first_select )","return var1 % ( var3 , var4 )"
"convert if into a string append to it a string '_month', return the result.","convert if into string append to it string var0, return result.",return '%s_month' % id_,return '%s_month' % id_
"return a string '%s-%s-%s GMT', formated with: first 7 elements of rfcdate, elements of rfcdate from 8-th to the 11-th index,","return string var0, formated with: first 7 elements of var1 elements of var1 from 8-th to 11-th index,","return '%s-%s-%s GMT' % ( rfcdate [ : 7 ] , rfcdate [ 8 : 11 ] , rfcdate [ 12 : 25 ] )","return var0 % ( var1 [ : 7 ] , var1 [ 8 : 11 ] , var1 [ 12 : 25 ] )"
"substitute '%s' in string '%s-%s-%s' with y,m and d, return the result.","substitute var0 in string var1 with y,m and d, return result.","return '%s-%s-%s' % ( y , m , d )","return var1 % ( y , m , d )"
"substitute '%s' in string '%s-%s-%s' with y, m and d, return the result.","substitute var0 in string var1 with y, m and d, return result.","return '%s-%s-%s' % ( y , m , d )","return var1 % ( y , m , d )"
"substitute '%s' in string '%s-%s' with self.prefix and field_name and return it, if self.prefix is true, if not return field_name.","substitute var0 in string var1 with var3 and var5 and return it, if var3 is true, if not return var5 ","return '%s-%s' % ( self . prefix , field_name ) if self . prefix else field_name","return var1 % ( var3 , var5 ) if var3 else var5"
"replace '%s' in sting '%s-%s' with self.prefix and index, return the result.","replace var0 in sting var1 with var3 and index, return result.","return '%s-%s' % ( self . prefix , index )","return var1 % ( var3 , index )"
"convert key_prefix, version and key into strings, concatenate them respectively, with character ':' as delimiter, return the result.","convert var0 version and key into strings, concatenate var2 respectively, with character var3 as var4 return result.","return '%s:%s:%s' % ( key_prefix , version , key )","return '%s:%s:%s' % ( var0 , version , key )"
"return a string '%s:%s' formated with the results of the functions self.g and self.i, respectivley.",return string var0 formated with results of functions self.g and self.i var1 ,"return '%s:%s' % ( self . g ( ) , self . i ( ) )","return var0 % ( self . g ( ) , self . i ( ) )"
"in the string '%s. You passed in %r (%s)' replace every %s with original and type of the object self.obj as strings, respectively,","in string var0 replace every %s with original and type of object var1 as strings, respectively,","return '%s. You passed in %r (%s)' % ( original , self . obj , type ( self . obj ) )","return '%s.You passed in %r(%s)' % ( original , var1 , type ( var1 ) )"
return a string '%s...' formated with elements of x up to the index equal to the maximum value between integer 0 and 3 subtracted from limit.,return string var0 formated with elements of x up to index equal to maximum value between integer 0 and 3 subtracted from limit.,"return '%s...' % x [ : max ( 0 , limit - 3 ) ]","return var0 % x [ : max ( 0 , limit - 3 ) ]"
return a string '%s(%s)' formated with self.__class__.__name__ and dictreprs.,return string var0 formated with var1 and var2 ,"return '%s(%s)' % ( self . __class__ . __name__ , dictreprs )","return var0 % ( var1 , var2 )"
"join usage and self.help into a string, separated by 2 new line characters, return it.","join usage and var0 into string, separated by 2 new line characters, return it.","return '%s\n\n%s' % ( usage , self . help )","return '%s\n\n%s' % ( usage , var0 )"
"join elements of code_list in a string, separated by ';', format string '\x1b[%sm' with it, append text to the result if exists,","join elements of var0 in string, separated by var2, format string var3 with it, append text to result if exists,","return '%s%s' % ( ( '\x1b[%sm' % ';' . join ( code_list ) ) , text or '' )","return '%s%s' % ( ( '\x1b[%sm' % var2 . join ( var0 ) ) , text or '' )"
"if the value under the 'QUERY_STRING' key of the self.META dictionary is true, call the function iri_to_uri,","if value under var0 key of self var1 dict is true, call function var3 ","return '%s%s' % ( self . path , ( '?' + iri_to_uri ( self . META . get ( 'QUERY_STRING' , '' ) ) ) if self . META . get ( 'QUERY_STRING' , '' ) else '' )","return '%s%s' % ( self . path , '?' + var3 ( self . var1 . get ( var0 , '' ) ) if self . var1 . get ( var0 , '' ) else '' )"
"append truncate to text, return the result.","append truncate to text, return result.","return '%s%s' % ( text , truncate )","return '%s%s' % ( text , truncate )"
"return string first element of t, '=', second element of t.","return string first element of var1 var0, second element of var1","return '%s=%s' % ( t [ 0 ] , t [ 1 ] )","return '%s=%s' % ( t [ 0 ] , t [ 1 ] )"
"return a string '<%s: %r>', format it with __name__ field of the self class and repr_attr.","return string var0, format it with var1 field of self class and var2 ","return '<%s: %r>' % ( type ( self ) . __name__ , repr_attr )","return var0 % ( type ( self ) . var1 , var2 )"
"return an string '<ExtendsNode: extends %s>', where '%s' is replaced with self.parent_name.token.",return string var0 var1 var2 is replaced with self var4 token.,return '<ExtendsNode: extends %s>' % self . parent_name . token,return var0 % self . var4 . token
"return the string '<Page %s of %s>', with occurrences of '%s' replaced by self.number and self.paginator.num_pages, respectively.","return string var0, with occurrences of var1 replaced by var2 and self.paginator var4 respectively.","return '<Page %s of %s>' % ( self . number , self . paginator . num_pages )","return var0 % ( var2 , self . paginator . var4 )"
return an string '0'.,return string var0.,return '0',return var0
return string '0'.,return string var0.,return '0',return var0
return string '1'.,return string var0.,return '1',return var0
return string 'form'.,return string var0.,return 'form',return var0
return string 'https'.,return string var0.,return 'https',return var0
"return string 'https' if value under the ""HTTPS"" key of the os.environ dictionary equals string 'on', if not return 'http'.","return string var0 if value under var1 key of var3 dict equals string var4, if not return var5.",return 'https' if os . environ . get ( 'HTTPS' ) == 'on' else 'http',return var0 if var3 . get ( var1 ) == 'on' else 'http'
return string 'initial-%s' where '%s' is replaced with return value of the self.add_prefix method called with an argument field_name.,return string var0 var1 var2 is replaced with return value of self var4 method called with argument var5 ,return 'initial-%s' % self . add_prefix ( field_name ),return var0 % self . var4 ( var5 )
return string 'nd'.,return string var0.,return 'nd',return var0
return string 'NOTPROVIDED'.,return string var0.,return 'NOTPROVIDED',return var0
return a string 'Raw content'.,return string var0.,return 'Raw content',return var0
return string 'rd'.,return string var0.,return 'rd',return var0
return string 'st'.,return string var0.,return 'st',return var0
"return string 'StopUpload: Consume request data, then halt.'.",return string var0.,"return 'StopUpload: Consume request data, then halt.'",return var0
return string 'StopUpload: Halt current upload.'.,return string var0.,return 'StopUpload: Halt current upload.',return var0
"string '%Y-%m-%d', convert the result into a string and append it to ',', substitute the result for d.   format string 'tag:%s%s:%s/%s' with bits.hostname, d, bits.path and bits.fragment, return it.","string var0, convert result into string and append it to var1, substitute result for var2 format string var4 with var6 var2 bits.path and var7 return it.","return 'tag:%s%s:%s/%s' % ( bits . hostname , d , bits . path , bits . fragment )","return var4 % ( var6 , d , bits . path , var7 )"
return string 'th'.,return string var0.,return 'th',return var0
"return the string 'ValidationError(%s)', replace '%s' with self.","return string var0, replace var1 with self.",return 'ValidationError(%s)' % self,return var0 % self
"if dirname is true, return dirname converted to a string and surounded by single quotes, if not return string 'absolute path'.","if var0 is true, return var0 converted to string and var2 by single quotes, if not return string var3.",return ''%s'' % dirname if dirname else 'absolute path',return ''%s'' % var0 if var0 else var3
return an empty string.,return empty string.,return '',return ''
join inner_text elements into a string.,join var0 elements into string.,return '' . join ( inner_text ),return '' . join ( var0 )
"convert x into a string and append it to a list, substitute the resulting list for out.   join elements of out into a string, separated with whitespaces, append ')' to it, append the result to '(', return it.","convert x into a string and append it to a list, substitute the resulting list for out.   join elements of out into a string, separated with whitespaces, append ')' to it, append the result to '(', return it.",return '(' + ' ' . join ( out ) + ')',return '(' + ' ' . join ( out ) + ')'
"return string ""(%s %r)"", replace '%s' with self.if and '%r' with self.value.","return string var0, replace var1 with self.if and var2 with var3 ","return '(%s %r)' % ( self . id , self . value )","return '(%s %r)' % ( self . id , var3 )"
"return string ""[Didn't have permission to include file]"".",return string var0.,return '[Didn't have permission to include file]',return '[var1]'
"return an string ""[Included template had syntax error: %s]"", where '%s' is replaced with e.",return string var0 var2 var3 is replaced with var4,return '[Included template had syntax error: %s]' % e,return '[var1]' % e
"get the unicode representation of result of the method match.group called with an integer 1, format with in a string ""\\u%04x"",","get var0 representation of result of method var1 called with integer 1, format with in string var2,",return '\\u%04x' % ord ( match . group ( 1 ) ),return '\\u%04x' % ord ( match . group ( 1 ) )
"replace all '%s' from string ""%s: %s%s%s"" with values of obj, id, self.msg and hint, respectively, return the result.","replace all var0 from string var1 with values of var3 id var4 and hint, respectively, return result.","return '%s: %s%s%s' % ( obj , id , self . msg , hint )","return '%s: var2' % ( var3 , id , var4 , hint )"
"return a string ""%s.%s"" formated with first dot package elements and name.",return string var0 formated with first dot package elements and name.,"return '%s.%s' % ( package [ : dot ] , name )","return '%s.%s' % ( package [ : dot ] , name )"
"return a string ""%s%02d%02d"" formated with sign, floored result of the division of seconds by integer 3000,","return string var0 formated with sign, floored result of division of seconds by integer 3000,","return '%s%02d%02d' % ( sign , seconds // 3600 , ( seconds // 60 ) % 60 )","return '%s%02d%02d' % ( sign , seconds // 3600 , seconds // 60 % 60 )"
"return an string ""<%s: %r>"", where '%s' is replaced with self.__class__.__name__ and self.var, respectively.",return string var0 var1 var2 is replaced with var3 and var4 respectively.,"return '<%s: %r>' % ( self . __class__ . __name__ , self . var )","return '<%s: %r>' % ( var3 , var4 )"
"return a string ""<%s: %s>"" formated with self.__class__.__name__,",return string var0 formated with var1 ,"return '<%s: %s>' % ( self . __class__ . __name__ , super ( MultiValueDict , self ) . __repr__ ( ) )","return '<%s: %s>' % ( var1 , super ( MultiValueDict , self ) . __repr__ ( ) )"
"return string ""<%s: %s>"", formated with self.__class__.__name__ and self.","return string var0, formated with var1 and self.","return '<%s: %s>' % ( self . __class__ . __name__ , self )","return '<%s: %s>' % ( var1 , self )"
"substitute '%s' in string '<%s: %s>' with self.__class__.__name__ and self, if exists, or string 'None' if it doesnt, return it.","substitute var0 in string var1 with var3 and self, if exists, or string var4 if it doesnt, return it.","return '<%s: %s>' % ( self . __class__ . __name__ , self or 'None' )","return var1 % ( var3 , self or 'None' )"
"in the string ""<%s: level=%r, msg=%r, hint=%r, obj=%r, id=%r>"", replace '%s' with the name of the type of this class instance,","in string var0, replace var1 with name of type of var2 class instance,","return '<%s: level=%r, msg=%r, hint=%r, obj=%r, id=%r>' % ( self . __class__ . __name__ , self . level , self . msg , self . hint , self . obj , self . id )","return '<%s: level=%r, msg=%r, hint=%r, obj=%r, id=%r>' % ( self . __class__ . __name__ , self . level , self . msg , self . hint , self . obj , self . id )"
"replace '%s' in the string ""<BaseConverter: base%s (%s)>"" with length of self.digits and self.digits, respectively, return the string.","replace var0 in string var1 with length of var5 and var5 respectively, return string.","return '<BaseConverter: base%s (%s)>' % ( len ( self . digits ) , self . digits )","return '<BaseConverter: var4(%s)>' % ( len ( var5 ) , var5 )"
"return string ""<Block Node: %s. Contents: %r>"", where '%s' is replaced with self.name and '%r' with self.nodelist.",return string var0 var1 var2 is replaced with var3 and var4 with var5 ,"return '<Block Node: %s. Contents: %r>' % ( self . name , self . nodelist )","return '<Block Node: %s.Contents: %r>' % ( var3 , var5 )"
"return a string ""<DeserializedObject: %s.%s(pk=%s)>"", where '%s' are replaced with self.object._meta.app_label,",return string var0 var1 var2 are replaced with self.object._meta var4 ,"return '<DeserializedObject: %s.%s(pk=%s)>' % ( self . object . _meta . app_label , self . object . _meta . object_name , self . object . pk )","return '<DeserializedObject: %s.%s(pk=%s)>' % ( self . object . _meta . var4 , self . object . _meta . object_name , self . object . pk )"
"return a string ""<DjangoTranslation lang:%s>"", where '%s' is replaced with self.__language.",return string var0 var1 var2 is replaced with var3 ,return '<DjangoTranslation lang:%s>' % self . __language,return '<DjangoTranslation lang:%s>' % var3
"return an string ""<For Node: for %s in %s, tail_len: %d%s>"", substitute '%s' with elements of self.loopvars joined into a string,","return string var0, substitute var1 with elements of var2 joined into string,","return '<For Node: for %s in %s, tail_len: %d%s>' % ( ', ' . join ( self . loopvars ) , self . sequence , len ( self . nodelist_loop ) , reversed_text )","return '<For Node: for %s in %s, tail_len: %d%s>' % ( ', ' . join ( var2 ) , self . sequence , len ( self . nodelist_loop ) , reversed_text )"
"return an string ""<IfEqualNode>"".",return string var0.,return '<IfEqualNode>',return '<IfEqualNode>'
"return an string ""<IfNode>"".",return string var0.,return '<IfNode>',return '<IfNode>'
"join self.dirpath and self.file in a string, substitute with it '%s' in string ""<TranslatableFile: %s>"", return the result.","join var0 and var1 in string, substitute with it var2 in string var3, return result.","return '<TranslatableFile: %s>' % os . sep . join ( [ self . dirpath , self . file ] )","return '<TranslatableFile: %s>' % os . sep . join ( [ var0 , var1 ] )"
"return a string ""<UTC>"".",return string var0.,return '<UTC>',return '<UTC>'
"return a string ""<Variable Node: %s>"", substitute '%s' with self.filter_expression.","return string var0, substitute var1 with self var3 ",return '<Variable Node: %s>' % self . filter_expression,return '<Variable Node: %s>' % self . var3
"return a string ""<WithNode>""",return string var0,return '<WithNode>',return '<WithNode>'
"for every c in choices split into words, concatenate prefix, result of the function re.escape with an argument c and suffix,","for every c in choices split into words, concatenate prefix, result of function re.escape with argument c and suffix,",return '|' . join ( prefix + re . escape ( c ) + suffix for c in choices . split ( ) ),return '|' . join ( prefix + re . escape ( c ) + suffix for c in choices . split ( ) )
"return an string ""Error in formatting: %s"", replace '%s' with result of the function force_text,","return string var0, replace var1 with result of function var2 ","return 'Error in formatting: %s' % force_text ( e , errors = 'replace' )","return 'Error in formatting: %s' % var2 ( e , errors = 'replace' )"
"in the string ""ResolverMatch(func=%s, args=%s, kwargs=%s, url_name=%s, app_name=%s, namespaces=%s)"", replace all the occurrences of:","in string var0, replace all occurrences of:","return 'ResolverMatch(func=%s, args=%s, kwargs=%s, url_name=%s, app_name=%s, namespaces=%s)' % ( self . _func_path , self . args , self . kwargs , self . url_name , self . app_name , self . namespaces )","return 'ResolverMatch(func=%s, args=%s, kwargs=%s, url_name=%s, app_name=%s, namespaces=%s)' % ( self . _func_path , self . args , self . kwargs , self . url_name , self . app_name , self . namespaces )"
"return a string ""UTC"".",return string var0.,return 'UTC',return 'UTC'
"return a tuple wit 2 elements: _lazy_proxy_unpickle and tuple with 3 elements: func, self.__args, self.__kw and resultclasses.",return tuple wit 2 elements: _lazy_proxy_unpickle and tuple with 3 elements: var0 var1 var2 and var3 ,"return ( _lazy_proxy_unpickle , ( func , self . __args , self . __kw ) + resultclasses )","return _lazy_proxy_unpickle , ( var0 , var1 , var2 ) + var3"
"call the function format_html_join twice, first time with 3 elements: an empty string, string ' {0}=""{1}""'","call function var0 twice, first time with 3 elements: empty string, string ' {0}=""{1}""'","return (  format_html_join ( '' , ' {0}='{1}'' , sorted ( attrs . items ( ) ) ) +  format_html_join ( '' , ' {0}' , sorted ( boolean_attrs ) )  )","return( var0('', ' {0}='{1}'', sorted(attrs.items())) +  var0('', ' {0}', sorted(boolean_attrs)) )"
"evaluate the logical expression, if other is an instance of RegexValidator and self.regex.pattern equals to other.regex.pattern,","evaluate logical expression, if other is instance of var0 and var1 equals to var2 ","return ( isinstance ( other , RegexValidator ) and self . regex . pattern == other . regex . pattern and self . regex . flags == other . regex . flags and ( self . message == other . message ) and ( self . code == other . code ) and ( self . inverse_match == other . inverse_match ) )","return isinstance ( other , var0 ) and var1 == var2 and self . regex . flags == other . regex . flags and self . message == other . message and self . code == other . code and self . inverse_match == other . inverse_match"
"return a tuple containing 3 entries: output, result of the function force_text, called with 3 arguments: errors,","return tuple containing 3 entries: output, result of function var0 called with 3 arguments: errors,","return ( output , force_text ( errors , DEFAULT_LOCALE_ENCODING , strings_only = True ) , p . returncode )","return output , var0 ( errors , DEFAULT_LOCALE_ENCODING , strings_only = True ) , p . returncode"
"return a tuple with 3 elements: if path is true, path, in not, a string '%s.%s' formated with obj.__class__.__module__,","return tuple with 3 elements: if path is true, path, in not, string var0 formated with var1 ","return ( path or '%s.%s' % ( obj . __class__ . __module__ , obj . __class__ . __name__ ) , obj . _constructor_args [ 0 ] , obj . _constructor_args [ 1 ] , )","return path or var0 % ( var1 , obj . __class__ . __name__ ) , obj . _constructor_args [ 0 ] , obj . _constructor_args [ 1 ]"
"return a string '<%s token: ""%s..."">' with '%s', replace '%s' with token_name and 20 self.contents elements with every newline deleted.","return string var0 with var1, replace var1 with var3 and 20 var5 elements with every var6 deleted.","return ( '<%s token: '%s...'>' %  ( token_name , self . contents [ : 20 ] . replace ( '\n' , '' ) ) )","return('<%s token: '%s...'>' % (var3, var5 [: 20].replace('\n', '')))"
"call the function six.text_type with an argument arg, append the result to '%', format the previous with value, return the result.","call function six var0 with argument var1 append result to var2, format previous with value, return result.",return ( '%' + six . text_type ( arg ) ) % value,return ( var2 + six . var0 ( var1 ) ) % value
"use the result as an key to get the value from the LUHN_ODD_LOOKUP dictionary, sum all the results and substitute the result for odds.   sum evens and odds, if the result is divisible by integer 10, return boolean True, if not return boolean False.","use result as key to get value from var0 dict, sum all results and substitute result for odds var1 sum evens and odds, if result is divisible by integer 10, return boolean var2 if not return boolean var3 ",return ( ( evens + odds ) % 10 == 0 ),return ( evens + odds ) % 10 == 0
"if pk.editable is true, or pk.auto_created is true or pk is an instance of AutoField class, or if pk.rel is true,","if var0 is true, or var1 var3 is true or var1 is instance of var4 class, or if var1 rel is true,","return ( ( not pk . editable ) or ( pk . auto_created or isinstance ( pk , AutoField ) ) or ( pk . rel and pk . rel . parent_link and pk_is_not_editable ( pk . rel . to . _meta . pk ) ) )","return not var0 or ( var1 . var3 or isinstance ( var1 , var4 ) ) or var1 . rel and var1 . rel . parent_link and var1_is_not_editable ( var1 . rel . to . _meta . var1 )"
"if url_info.netloc is false or url_info.netloc equals host, and if url_info.scheme is false or url_info.scheme equals,","if var0 netloc is false or var0 netloc equals host, and if var0 scheme is false or var0 scheme equals,","return ( ( not url_info . netloc or url_info . netloc == host ) and ( not url_info . scheme or url_info . scheme in [ 'http' , 'https' ] ) )","return ( not var0 . netloc or var0 . netloc == host ) and ( not var0 . scheme or var0 . scheme in [ 'http' , 'https' ] )"
return a tuple with 2 elements: integer 0 and second element of k.,return tuple with 2 elements: integer 0 and second element of var0,"return ( 0 , k [ 1 ] )","return 0 , k [ 1 ]"
return a tuple with 2 elements: integers 1 and 0.,return tuple with 2 elements: integers 1 and 0.,"return ( 1 , 0 )","return 1 , 0"
"return a tuple with 3 elements: copyreg._reconstructor, tuple with 3 elements: self.__class__, object and None,",return tuple with 3 elements: var0 tuple with 3 elements: var1 object and var2 ,"return ( copyreg . _reconstructor , ( self . __class__ , object , None ) , self . __getstate__ ( ) )","return var0 , ( var1 , object , var2 ) , self . __getstate__ ( )"
"only if form_class is not None, and if form_class has an attribute '_meta' and form_class._meta.fields is not None,",only if var0 is not var3 and if var0 has attribute var5 and var0 _meta.fields is not var3 ,"return ( form_class is not None and ( hasattr ( form_class , '_meta' ) and ( form_class . _meta . fields is not None or form_class . _meta . exclude is not None ) ) )","return var0 is not var3 and ( hasattr ( var0 , var5 ) and ( var0 . _meta . fields is not var3 or var0 . _meta . exclude is not var3 ) )"
"read file fp, call the method decode on the result with an argument settings.FILE_CHARSET, return tuple containing 2 elements,","read file var0 call method decode on result with argument settings var1 return tuple containing 2 elements,","return ( fp . read ( ) . decode ( settings . FILE_CHARSET ) , filepath )","return var0 . read ( ) . decode ( settings . var1 ) , filepath"
"sum length of self.quertset and integer 1 if self.field.empty_label is not None, or integer 0 if not, return the result.","sum length of var0 and integer 1 if self.field var2 is not var3 or integer 0 if not, return result.",return ( len ( self . queryset ) + ( 1 if self . field . empty_label is not None else 0 ) ),return len ( self . queryset ) + ( 1 if self . field . var2 is not var3 else 0 )
"convert byte to its integer representation, return all of the results for every byte in buf.","convert byte to its integer representation, return all of results for every byte in var0 ",return ( ord ( byte ) for byte in buf ),return ( ord ( byte ) for byte in var0 )
"if file path of src and dst files are the same, return boolean True, otherwise return boolean False.","if file path of var0 and var1 files are same, return boolean var2 otherwise return boolean var3 ",return ( os . path . normcase ( os . path . abspath ( src ) ) == os . path . normcase ( os . path . abspath ( dst ) ) ),return os . path . normcase ( os . path . abspath ( var0 ) ) == os . path . normcase ( os . path . abspath ( var1 ) )
"if p2.scheme, p2.hostname and p2.port equals p1.scheme, p1.hostname and p1.port, respectively, return boolean True, otherwise return boolean False.","if var0 var1 and var2 equals var3 var4 and var5 respectively, return boolean var6 otherwise return boolean var7 ","return ( p1 . scheme , p1 . hostname , p1 . port ) == ( p2 . scheme , p2 . hostname , p2 . port )","return ( var3 , var4 , var5 ) == ( var0 , var1 , var2 )"
"return tuple containing 3 elements: RAW, an empty dictionary and stream.",return tuple containing 3 elements: var0 empty dict and stream.,"return ( RAW , { } , stream )","return var0 , { } , stream"
"return a tuple with 2 elements: resource and string 'egg:%s:%s', where '%s' is replaced with app_config.name and pkg_name, respective.",return tuple with 2 elements: resource and string var0 var1 var2 is replaced with var3 name and var5 respective.,"return ( resource , 'egg:%s:%s' % ( app_config . name , pkg_name ) )","return resource , var0 % ( var3 . name , var5 )"
"if ret equals to integer 0, return boolean True, otherwise return boolean False.","if ret equals to integer 0, return boolean var0 otherwise return boolean var1 ",return ( ret == 0 ),return ret == 0
"return a tuple with 3 elements: self.__newobj__, tuple with an element self.__class__ and result of the method self.__getstate__.",return tuple with 3 elements: var0 tuple with element var1 and result of method var2 ,"return ( self . __newobj__ , ( self . __class__ , ) , self . __getstate__ ( ) )","return var0 , ( var1 , ) , var2 ( )"
"call the method self.data.weekday, increment the result by an integer 1, divide it with integer 7, return the reminder of the division.","call method var0 increment result by integer 1, divide it with integer 7, return reminder of division.",return ( self . data . weekday ( ) + 1 ) % 7,return ( self . data . weekday ( ) + 1 ) % 7
"return a tuple with 2 elements: result of the method self.field.prepare_value called with an argument obj,",return tuple with 2 elements: result of method self.field var1 called with argument var2 ,"return ( self . field . prepare_value ( obj ) , self . field . label_from_instance ( obj ) )","return self . field . var1 ( var2 ) , self . field . label_from_instance ( var2 )"
"return the element at the index index of the tuple containing 3 elements: self.func, self.args and self.kwargs.",return element at index index of tuple containing 3 elements: var0 var1 and var2 ,"return ( self . func , self . args , self . kwargs ) [ index ]","return ( var0 , var1 , var2 ) [ index ]"
"decrement self.number by one, multiply it by self.paginator.per_page, increment the result by one, return it.","decrement self.number by one, multiply it by self.paginator var1 increment result by one, return it.",return ( self . paginator . per_page * ( self . number - 1 ) ) + 1,return self . paginator . var1 * ( self . number - 1 ) + 1
"call the function make_origin with 4 arguments: display_name, loader, name and dirs, return a tuple containing 2 elements:","call function var0 with 4 arguments: var1 loader, name and var3 return tuple containing 2 elements:","return ( source , make_origin ( display_name , loader , name , dirs ) )","return source , var0 ( var1 , loader , name , var3 )"
"return first element of t converted to lowercase and second element of t, as a tuple.","return first element of t converted to lowercase and second element of t, as tuple.","return ( t [ 0 ] . lower ( ) , t [ 1 ] )","return t [ 0 ] . lower ( ) , t [ 1 ]"
"return first element of t converted to lowercase and boolean True, as a tuple.",return first element of t converted to lowercase and boolean var0 as tuple.,"return ( t [ 0 ] . lower ( ) , True )","return t [ 0 ] . lower ( ) , var0"
return n left shift by rotations bitwise and mask_value or n right shift by width minus rotations,return n left shift by rotations var0 and var1 or n right shift by width minus rotations,return ( ( n << rotations ) & mask_value ) | ( n >> ( width - rotations ) ),return n << rotations & var1 | n >> width - rotations
return n left shift by mask_value xor n right shift by rotations,return n left shift by var0 xor n right shift by rotations,return ( n << mask_value ^ n >> rotations ),return n << var0 ^ n >> rotations
return n left shift by mask_value or n right shift by rotations,return n left shift by var0 or n right shift by rotations,return ( n << mask_value | n >> rotations ),return n << var0 | n >> rotations
return n right shift by rotations bitwise and not n left shift by width multiplied by rotations and mask_value,return n right shift by rotations var0 and not n left shift by width multiplied by rotations and var1,return ( n >> rotations ) & ( ( ~ n << ( width * rotations ) ) & mask_value ),return n >> rotations & ( ~ n << width * rotations & var1 )
return n left shift by rotations xor mask_value,return n left shift by rotations xor var0,return ( n >> rotations ) ^ mask_value,return n >> rotations ^ var0
return n left shift by rotations xor val1,return n left shift by rotations xor var0,return ( n >> rotations ) ^ val1,return n >> rotations ^ var0
return n right shift by rotations bitwise or with the result of n left shift by width bitwise and mask_value,return n right shift by rotations var0 or with result of n left shift by width var0 and var2,return ( n >> rotations ) | ( ( n << width ) & mask_value ),return n >> rotations | n << width & var2
"call the Warning function with 4 arguments: string ""MIDDLEWARE_CLASSES is not set."", hint tuple containing one string,","call var0 function with 4 arguments: string var1, hint tuple containing one string,","return [ Warning ( 'MIDDLEWARE_CLASSES is not set.' , hint = ( 'Django 1.7 changed the global defaults for the MIDDLEWARE_CLASSES. ' 'django.contrib.sessions.middleware.SessionMiddleware, ' 'django.contrib.auth.middleware.AuthenticationMiddleware, and ' 'django.contrib.messages.middleware.MessageMiddleware were removed from the defaults. ' 'If your project needs these middleware then you should configure this setting.' ) , obj = None , id = '1_7.W001' , ) ]","return [ var0 ( 'MIDDLEWARE_CLASSES is not set.' , hint = 'Django 1.7 changed the global defaults for the MIDDLEWARE_CLASSES.django.contrib.sessions.middleware.SessionMiddleware, django.contrib.auth.middleware.AuthenticationMiddleware, and django.contrib.messages.middleware.MessageMiddleware were removed from the defaults.If your project needs these middleware then you should configure this setting.' , obj = None , id = '1_7.W001' ) ]"
"call the Warning function with 3 arguments: hint tuple containing one string, Django 1.6 introduced a new default test runner.",call var0 function with 3 arguments: hint tuple containing one string var1 1.6 introduced new default test runner.,"return [ Warning ( 'Some project unittests may not execute as expected.' , hint = ( 'Django 1.6 introduced a new default test runner. It looks like ' 'this project was generated using Django 1.5 or earlier. You should ' 'ensure your tests are all running & behaving as expected. See ' 'https://docs.djangoproject.com/en/dev/releases/1.6/#new-test-runner ' 'for more information.' ) , obj = None , id = '1_6.W001' , ) ]","return [ var0 ( 'Some project unittests may not execute as expected.' , hint = 'var1 1.6 introduced a new default test runner.It looks like this project was generated using var1 1.5 or earlier.You should ensure your tests are all running & behaving as expected.See https://docs.djangoproject.com/en/dev/releases/1.6/#new-test-runner for more information.' , obj = None , id = '1_6.W001' ) ]"
return a list containing an empty string and a list containing an empty list.,return list containing empty string and list containing empty list.,"return [ '' ] , [ [ ] ]","return [ '' ] , [ [ ] ]"
"return a list with 5 elements: strings 'parse', 'error', 'request', 'response' and 'robotparser'.","return list with 5 elements: strings var0, var1, var2, var3 and var4.","return [ 'parse' , 'error' , 'request' , 'response' , 'robotparser' ]","return [ var0 , 'error' , 'request' , 'response' , 'robotparser' ]"
"return the list, containing 4 elements: an empty string, string ""    class Meta:"", string ""        managed = False"",","return list, containing 4 elements: empty string, string var0, string var1,","return [ '' ,  '    class Meta:' ,  '        managed = False' ,  '        db_table = '%s'' % table_name ]","return ['',  '    class Meta:',  ' var2managed = var3',  ' var2db_table = '%s'' % table_name]"
return a list with an element tuple with 2 elements: an empty string and an empty list.,return list with element tuple with 2 elements: empty string and empty list.,"return [ ( '' , [ ] ) ]","return [ ( '' , [ ] ) ]"
"put a tuple with 2 elements: k and value under k key of self dictionary into a list, for every k in self.keyOrder,","put tuple with 2 elements: k and value under k key of self dict into list, for every k in self var1 ","return [ ( k , self [ k ] ) for k in self . keyOrder ]","return [ ( k , self [ k ] ) for k in self . var1 ]"
return an empty list.,return empty list.,return [ ],return [ ]
return a list with an element etag_str.,return list with element var0 ,return [ etag_str ],return [ var0 ]
"for every f in return value of the os.listdir function called with an argument command_dir, append f without 3 last elements to a list, only if f doesnt start with character '_' and doesnt ends with string '.py', return the resulting list.","for every f in return value of var0 function called with argument var1 append f var2 3 last elements to list, only if f doesnt start with character var3 and doesnt ends with string var4, return resulting list.",return [ f [ : - 3 ] for f in os . listdir ( command_dir ) if not f . startswith ( '_' ) and f . endswith ( '.py' ) ],return [ f [ : - 3 ] for f in var0 ( var1 ) if not f . startswith ( var3 ) and f . endswith ( '.py' ) ]
"for field in self if field.is_hidden is true, append field to a list, return the resulting list.","for field in self if field var0 is true, append field to list, return resulting list.",return [ field for field in self if field . is_hidden ],return [ field for field in self if field . var0 ]
"for field in self if field.is_hidden is false, append field to a list, return the resulting list.","for field in self if field var0 is false, append field to list, return resulting list.",return [ field for field in self if not field . is_hidden ],return [ field for field in self if not field . var0 ]
"return list with 2 elements: first_item and second_item, and old_style_list.",return list with 2 elements: var0 and var1 and var3 ,"return [ first_item , second_item ] , old_style_list","return [ var0 , var1 ] , var3"
"return list with an element first_item, and boolean True.",return list with element var0 and boolean var2 ,"return [ first_item ] , True","return [ var0 ] , var2"
"where '%s' is replaced with self.__class__.__name__.   for form in self.forms append form.cleaned_data to a list, return the resulting list.","var0 var1 is replaced with var2 for form in var4 append form var6 to list, return resulting list.",return [ form . cleaned_data for form in self . forms ],return [ form . var6 for form in var4 ]
return a list containing results of the function format_html called with 2 arguments:,return list containing results of function var0 called with 2 arguments:,"return [ format_html ( '<script type='text/javascript' src='{0}'></script>' , self . absolute_path ( path ) ) for path in self . _js ]","return [format_html('<script type='text/javascript' src='{0}'></script>', self.absolute_path(path)) for path in self._js]"
"for the call to the function upath, get the directory name of the resulting system path, join the result and string 'locale',   into a valid file path, substitute it for globalpath.   append settings.LOCALE_PATHS converted into a list to a list containing an element globalpath, return it.","for call to function var0 get directory name of resulting system path, join result and string var1 var2 into valid file path, substitute it for var4 var2 append settings var6 converted into list to list containing element var4 return it.",return [ globalpath ] + list ( settings . LOCALE_PATHS ),return [ var4 ] + list ( settings . var6 )
"append k into a list for every k and v in return value of the six.iteritems function with an argument _serializers,",append k into list for every k and v in return value of var0 function with argument var1 ,"return [ k for k , v in six . iteritems ( _serializers ) if not v . Serializer . internal_use_only ]","return [ k for k , v in var0 ( var1 ) if not v . Serializer . internal_use_only ]"
"called with n.getAttribute('pk') method.   call the m2m_convert function with an argument c, for every c in return value of the method node.getElementsByTagName,","called with n.getAttribute(var2) method var3 call var4 function with argument c, for every c in return value of method node var6 ",return [ m2m_convert ( c ) for c in node . getElementsByTagName ( 'object' ) ],return [ var4 ( c ) for c in node . var6 ( 'object' ) ]
"for every obj in value call the function mark_safe with an argument result of the function force_text called with an argument obj,",for every var0 in value call function var2 with argument result of function var3 called with argument var0 ,return [ mark_safe ( force_text ( obj ) ) for obj in value ],return [ var2 ( var3 ( var0 ) ) for var0 in value ]
"called with the argument microseconds set to integer 0, on the result of the method value.time.   return list containing 2 elements: None and None.","called with argument microseconds set to integer 0, on result of method var0 return list containing 2 elements: var2 and var2 ","return [ None , None ]","return [ var2 , var2 ]"
"for i in self._ordering append to a list value under the first element of i key of the self.forms dictionary, return resulting list.","for i in var0 append to list value under first element of i key of var1 dict, return resulting list.",return [ self . forms [ i [ 0 ] ] for i in self . _ordering ],return [ var1 [ i [ 0 ] ] for i in var0 ]
"for i in self._deleted_form_indexes append i-th element of self.forms into a list, return the resulting list.","for i in var0 append i-th element of var1 into list, return resulting list.",return [ self . forms [ i ] for i in self . _deleted_form_indexes ],return [ var1 [ i ] for i in var0 ]
"append value under k key of self dictionary to a list, for every k in self.keyOrder, return the result.","append value under k key of self dict to list, for every k in self var1 return result.",return [ self [ k ] for k in self . keyOrder ],return [ self [ k ] for k in self . var1 ]
"for every val in value call the function smart_text with an argument val, return the results in a lit.",for every var0 in value call function var2 with argument var0 return results in lit.,return [ smart_text ( val ) for val in value ],return [ var2 ( var0 ) for var0 in var0ue ]
return a list containing first element of source and a list containing params.,return list containing first element of source and list containing var0 ,"return [ source [ 0 ] ] , [ params ]","return [ source [ 0 ] ] , [ var0 ]"
"call the method prepare_value from the base class of the class ModelMultipleChoiceField, with an argument v,","call method var0 from base class of class var2 with argument v,","return [ super ( ModelMultipleChoiceField , self ) . prepare_value ( v ) for v in value ]","return [ super ( var2 , self ) . var0 ( v ) for v in value ]"
"return a list containing return values of the function to_py called with an argument val, for every val in value.",return list containing return values of function var2 called with argument var0 for every var0 in value.,return [ to_py ( val ) for val in value ],return [ var2 ( var0 ) for var0 in var0ue ]
"return a list containing 2 elements: return value of the value.date method and return value of the replace method,","return list containing 2 elements: return value of var0 method and return value of replace method,","return [ value . date ( ) , value . time ( ) . replace ( microsecond = 0 ) ]","return [ value . date ( ) , value . time ( ) . replace ( microsecond = 0 ) ]"
"for every i and widget in enumerated iterable self.widgets, call the function widget.value_from_datadict with 3 arguments: data,","for every i and widget in enumerated var0 var1 call function widget var3 with 3 arguments: data,","return [ widget . value_from_datadict ( data , files , name + '_%s' % i ) for i , widget in enumerate ( self . widgets ) ]","return [ widget . var3 ( data , files , name + '_%s' % i ) for i , widget in enumerate ( var1 ) ]"
"get the value under the value key of a dictionary with 6 entries: boolean True for '2', boolean True for boolean True,","get value under value key of dict with 6 entries: boolean var0 for var3, boolean var0 for boolean var0 ","return { '2' : True , True : True , 'True' : True , '3' : False , 'False' : False , False : False } . get ( value , None )","return { var3 : var0 , var0 : var0 , 'var0' : var0 , '3' : False , 'False' : False , ( False ) : False } . get ( value , None )"
return an dictionary containing 1 entry: return value of the function _get_val for 'csrf_token'.,return dict containing 1 entry: return value of function var0 for var1.,return { 'csrf_token' : _get_val ( ) },return { var1 : var0 ( ) }
return an dictionary containing 1 entry: settings.MEDIA_URL for 'MEDIA_URL'.,return dict containing 1 entry: settings.MEDIA_URL for var0.,return { 'MEDIA_URL' : settings . MEDIA_URL },return { var0 : settings . MEDIA_URL }
return an dictionary containing 1 entry: request for 'request'.,return dict containing 1 entry: request for var0.,return { 'request' : request },return { var0 : request }
return an dictionary containing 1 entry: settings.STATIC_URL for 'STATIC_URL'.,return dict containing 1 entry: settings.STATIC_URL for var0.,return { 'STATIC_URL' : settings . STATIC_URL },return { var0 : settings . STATIC_URL }
return an dictionary containing 1 entry: return value of the function timezone.get_current_timezone_name for 'TIME_ZONE'.,return dict containing 1 entry: return value of function timezone var1 for var2.,return { 'TIME_ZONE' : timezone . get_current_timezone_name ( ) },return { var2 : timezone . var1 ( ) }
"return a dictionary with 2 elements: self._version for ""version"" and ""http://www.w3.org/2005/Atom"" for ""xmlns:atom"".",return dict with 2 elements: var0 for var1 and var2 for var5.,"return { 'version' : self . _version , 'xmlns:atom' : 'http://www.w3.org/2005/Atom' }","return { 'version' : var0 , 'xmlns:atom' : 'http://www.w3.org/2005/var4' }"
"return a dictionary with 2 entries: value under the 'language' key of the self.feed dictionary for ""xml:lang"",","return dict with 2 entries: value under var0 key of var1 dict for var2,","return { 'xmlns' : self . ns , 'xml:lang' : self . feed [ 'language' ] }","return { 'xmlns' : self . ns , var2 : var1 [ var0 ] }"
"return a dictionary with an entry: self.ns for ""xmlns"".",return dict with entry: var0 for var1.,return { 'xmlns' : self . ns },return { 'xmlns' : var0 }
return an empty dictionary.,return empty dict.,return { },return { }
return is empty dictionary.,return is empty dict.,return { },return { }
"return a dictionary generated with an expression, return value of the method e.as_data for f,","return dict generated with expression, return value of method e var1 for f,","return { f : e . as_data ( ) for f , e in self . items ( ) }","return { f : e . var1 ( ) for f , e in self . items ( ) }"
return integer 0.,return integer 0.,return 0,return 0
return an integer 0.,return integer 0.,return 0,return 0
return integer 0 and ch2.,return integer 0 and var0 ,"return 0 , ch2","return 0 , var0"
return integer 1.,return integer 1.,return 1,return 1
return integer 1 and ch2.,return integer 1 and var0 ,"return 1 , ch2","return 1 , var0"
"bitwise shift integer 1 to the left by 31 spaces, return the result.","var0 shift integer 1 to left by 31 spaces, return result.",return 1 << 31,return 1 << 31
return integer 12.,return integer 12.,return 12,return 12
return 2 to the power of n minus 1,return 2 to power of n minus 1,return 2 ** ( n - 1 ),return 2 ** ( n - 1 )
return 2 to the power of n minus 3,return 2 to power of n minus 3,return 2 ** ( n - 3 ),return 2 ** ( n - 3 )
return 2 to the power of n and minus 10,return 2 to power of n and minus 10,return 2 ** n - 10,return 2 ** n - 10
return 2 to the power of n and subtract 4,return 2 to power of n and subtract 4,return 2 ** n - 4,return 2 ** n - 4
"if for all attr in list of attributes 'level', 'msg', 'hint', 'obj' and 'id', self and other have the same attribute attr,","if for all var0 in list of attributes var2, var3, var4, var5 and var7, self and other have same attribute var0 ","return all ( getattr ( self , attr ) == getattr ( other , attr ) for attr in [ 'level' , 'msg' , 'hint' , 'obj' , 'id' ] )","return all ( getattr ( self , var0 ) == getattr ( other , var0 ) for var0 in [ var2 , 'msg' , 'hint' , 'obj' , 'id' ] )"
"for every w in self.widgets, if all elements w.is_hidden are true, return boolean True, otherwise return boolean False.","for every w in var0 if all elements w var2 are true, return boolean var3 otherwise return boolean var4 ",return all ( w . is_hidden for w in self . widgets ),return all ( w . var2 for w in var0 )
"if ""__call__"" is contained in klass.__dict__ for any klass in __mro__ field of the obj class, return boolean True, otherwise return False.","if var0 is contained in var1 for any var2 in __mro__ field of var3 class, return boolean var4 otherwise return var5 ",return any ( '__call__' in klass . __dict__ for klass in type ( obj ) . __mro__ ),return any ( '__call__' in var1 for var2 in type ( var3 ) . __mro__ )
"for every form in self call the method form.has_changed if any of the results evaluates to true, return boolean True,","for every form in self call method form var1 if any of results evaluates to true, return boolean var2 ",return any ( form . has_changed ( ) for form in self ),return any ( form . var1 ( ) for form in self )
"called with arguments: filename and pattern.   call the function ignore with an argument pattern, for every pattern in ignore_patterns,","called with arguments: filename and pattern var0 call function ignore with argument pattern, for every pattern in var1 ",return any ( ignore ( pattern ) for pattern in ignore_patterns ),return any ( ignore ( pattern ) for pattern in var1 )
"if any element of self.dicts is true, return boolean True, otherwise return boolean False.","if any element of var0 is true, return boolean var1 otherwise return boolean var2 ",return any ( self . dicts ),return any ( var0 )
"if any w.needs_multipart_form for every w in self.widgets is true, return boolean True, if not return boolean False.","if any w var1 for every w in var2 is true, return boolean var3 if not return boolean var4 ",return any ( w . needs_multipart_form for w in self . widgets ),return any ( w . var1 for w in var2 )
call the method apps.get_model with an argument model_identifier.,call method apps var1 with argument var2 ,return apps . get_model ( model_identifier ),return apps . var1 ( var2 )
"call the method apps.get_model with an argument model_identifier, return the result.",call method apps var1 with argument var2 return result.,return apps . get_model ( model_identifier ),return apps . var1 ( var2 )
return arg.,return var0 ,return arg,return var0
return args and kwargs.,return var0 and var1 ,"return args , kwargs","return var0 , var1"
"substitute the result for args and kwargs.   return an instance of AssignmentNode class created with 4 arguments: takes_context, args, kwargs and target_var.",substitute result for var0 and var2 return instance of var5 class created with 4 arguments: var6 var0 var2 and var8 ,"return AssignmentNode ( takes_context , args , kwargs , target_var )","return var5 ( var6 , var0 , var2 , var8 )"
return attachment.,return attachment.,return attachment,return attachment
and third element of the function sys.exc_info result.   return attr.,and third element of function sys var1 result var2 return var3 ,return attr,return var3
return attrs.,return var0 ,return attrs,return var0
"return an instance of AutoEscapeControlNode with 2 arguments: boolean exception arg equals to string 'on', and nodelist.","return instance of var0 with 2 arguments: boolean exception var2 equals to string var3, and var4 ","return AutoEscapeControlNode ( ( arg == 'on' ) , nodelist )","return var0 ( var2 == var3 , var4 )"
"call the function ugettext with '0 minutes' as argument, use the result as the argument for the call to the avoid_wrapping function, return the result.","call function var0 with var1 as argument, use result as argument for call to var2 function, return result.",return avoid_wrapping ( ugettext ( '0 minutes' ) ),return var2 ( var0 ( var1 ) )
"substitute the result for value.   call the function avoid_wrapping with an argument value, return the result.","substitute result for value var0 call function var1 with argument value, return result.",return avoid_wrapping ( value ),return var1 ( value )
"filesize_number_format with result of division of bytes by PB as an argument, substitute the result for value.   call the function avoid_wrapping with an argument value, return the result.","var0 with result of division of bytes by var1 as argument, substitute result for value var2 call function var3 with argument value, return result.",return avoid_wrapping ( value ),return var3 ( value )
"for every arg in s, evaluate the function force_bytes for the arguments arg, encoding, strings_only and errors,","for every var0 in s, evaluate function var2 for arguments var0 encoding var3 and errors,","return b' ' . join ( [ force_bytes ( arg , encoding , strings_only , errors ) for arg in s ] )","return b' ' . join ( [ var2 ( var0 , encoding , var3 , errors ) for var0 in s ] )"
return empty bytes string.,return empty bytes string.,return b'',return b''
"join self._container elements into a string, return it.","join var0 elements into string, return it.",return b'' . join ( self . _container ),return b'' . join ( var0 )
"substitute the results in a list for T.   join elements of T in a bytes string, append first r elements of result of the call to the function F with an argument l to it,","substitute results in list for var0 join elements of T in bytes string, append first r elements of result of call to function F with argument l to it,",return b'' . join ( T ) + F ( l ) [ : r ],return b'' . join ( T ) + F ( l ) [ : r ]
"and string 'ascii' and call the function to_bytes with 2 arguments: value and string 'latin-1',   join the previous 2 results into a string, separated by ': ', append it to a list, substitute the resulting list for headers.   join headers into a string, separated by string '\r\n'.","and string var0 and call function var1 with 2 arguments: value and string var3 var5 join previous 2 results into string, separated by var7, append it to list, substitute resulting list for headers var5 join headers into string, separated by string var8.",return b'\r\n' . join ( headers ),return b'\r\n' . join ( headers )
"call the salted_hmac with 3 arguments: salt, value and key, call the digest method on the result,","call var0 with 3 arguments: salt, value and key, call digest method on result,","return b64_encode ( salted_hmac ( salt , value , key ) . digest ( ) )","return b64_encode ( var0 ( salt , value , key ) . digest ( ) )"
"evaluate the function backend_cls with location and params as arguments, return the result.","evaluate function var0 with location and var1 as arguments, return result.","return backend_cls ( location , params )","return var0 ( location , var1 )"
return base.,return base.,return base,return base
return base and ext.,return base and var0 ,"return base , ext","return base , var0"
"call the method base.DeserializedObject with arguments obj and m2m_data, return the result.",call method base var0 with arguments var1 and var2 return result.,"return base . DeserializedObject ( obj , m2m_data )","return base . var0 ( var1 , var2 )"
"if base_lang is contained in settings.LANGUAGES_BIDI, return boolean True, if not, return boolean False.","if var0 is contained in settings var2 return boolean var3 if not, return boolean var4 ",return base_lang in settings . LANGUAGES_BIDI,return var0 in settings . var2
"left justify string s in a field of width equal to the sum of length of s and reminder of the division of length of s by integer 4,","left justify string s in field of width equal to sum of length of s and reminder of division of length of s by integer 4,","return base64 . urlsafe_b64decode ( s . ljust ( len ( s ) + len ( s ) % 4 , b'=' ) )","return base64 . urlsafe_b64decode ( s . ljust ( len ( s ) + len ( s ) % 4 , b'=' ) )"
call the method base64.urlsafe_b64decode with sum of s and pad as argument.,call method base64 var1 with sum of s and pad as argument.,return base64 . urlsafe_b64decode ( s + pad ),return base64 . var1 ( s + pad )
"call the method base64.urlsafe_b64encode with an argument s, strip the result of the bytes string '\n=' from the right, return it.","call method base64 var1 with argument s, strip result of bytes string var2 from right, return it.",return base64 . urlsafe_b64encode ( s ) . rstrip ( b'\n=' ),return base64 . var1 ( s ) . rstrip ( b'\n=' )
"call the method base64.urlsafe_b64encode with an argument s, on the result call the strip function with '=' as the argument, return the result.","call method base64 var1 with argument s, on result call strip function with var2 as argument, return result.",return base64 . urlsafe_b64encode ( s ) . strip ( b'=' ),return base64 . var1 ( s ) . strip ( b'=' )
"call the method baseconv.base62.encode with result of the time.time function converted to an integer, as an argument, return the result.","call method var0 with result of var1 function converted to integer, as argument, return result.",return baseconv . base62 . encode ( int ( time . time ( ) ) ),return var0 ( int ( time . time ( ) ) )
"format string hex_format_string with x, call the method encode on the result with an argument string 'ascii',","format string var0 with x, call method encode on result with argument string var2,",return binascii . unhexlify ( ( hex_format_string % x ) . encode ( 'ascii' ) ),return binascii . unhexlify ( ( var0 % x ) . encode ( var2 ) )
return the first element of bits and an empty string.,return first element of bits and empty string.,"return bits [ 0 ] , ''","return bits [ 0 ] , ''"
"return an instance of a BlockNode class, created with 2 arguments: block_name and nodelist.","return instance of var0 class, created with 2 arguments: var1 and var3 ","return BlockNode ( block_name , nodelist )","return var0 ( var1 , var3 )"
"convert initial and data into boolean, if they are not equal return boolean True, if they are return boolean False.","convert initial and data into boolean, if var0 are not equal return boolean var2 if var0 are return boolean var3 ",return bool ( initial ) != bool ( data ),return bool ( initial ) != bool ( data )
"convert ret to a boolean, return it.","convert ret to boolean, return it.",return bool ( ret ),return bool ( ret )
"convert self.changed_data into boolean, return it.","convert self var1 into boolean, return it.",return bool ( self . changed_data ),return bool ( self . var1 )
"convert self.children into an boolean, return it.","convert var0 into boolean, return it.",return bool ( self . children ),return bool ( var0 )
"convert self.dict into boolean, return the result.","convert var0 into boolean, return result.",return bool ( self . dict ),return bool ( var0 )
"convert self.name into an boolean, return it.","convert var0 into boolean, return it.",return bool ( self . name ),return bool ( var0 )
substitute value for value.   return value converted into a boolean.,substitute value for value var0 return value converted into boolean.,return bool ( value ),return bool ( value )
"unpacked list args2 and unpacked dictionary kwargs2, return the result.   call the function bound_func with 2 arguments: unpacked list args and unpacked dictionary kwargs, return the result.",unpacked list var0 and unpacked dict var2 return result var4 call function var5 with 2 arguments: unpacked list var1 and unpacked dict var3 return result.,"return bound_func ( * args , ** kwargs )","return var5 ( * var1 , ** var3 )"
"return an instance of BoundField class, created with arguments self, field and name.","return instance of var0 class, created with arguments self, field and name.","return BoundField ( self , field , name )","return var0 ( self , field , name )"
"call the method build_request_repr with an argument self, return the result.","call method var0 with argument self, return result.",return build_request_repr ( self ),return var0 ( self )
"call the function bytes with an argument tuple with an element i, return the result.","call function bytes with argument tuple with element i, return result.","return bytes ( ( i , ) )","return bytes ( ( i , ) )"
"call the function func with 2 arguments: unpacked list self.__args and unpacked dictionary self.__kw,",call function var0 with 2 arguments: unpacked list self.__args and unpacked dict var1 ,"return bytes ( func ( * self . __args , ** self . __kw ) )","return bytes ( var0 ( * self . __args , ** var1 ) )"
"evaluate the function bytes with the argument s, and return the result.","evaluate function bytes with argument s, and return result.",return bytes ( s ),return bytes ( s )
"call the function bytes with an argument self, divide the result with rhs and return the reminder of the division.","call function bytes with argument self, divide result with rhs and return reminder of division.",return bytes ( self ) % rhs,return bytes ( self ) % rhs
"call the method value.encode with an argument self._charset, use the result as an argument for the call to the bytes function,","call method var0 with argument var1 use result as argument for call to bytes function,",return bytes ( value . encode ( self . _charset ) ),return bytes ( value . encode ( var1 ) )
"call the function bytes with an argument value, return the result.","call function bytes with argument value, return result.",return bytes ( value ),return bytes ( value )
return cache.,return cache.,return cache,return cache
reuturn cache.,var0 cache.,return cache,return cache
"get the value under the mem_args key of the cache dictionary, return it.","get value under var0 key of cache dict, return it.",return cache [ mem_args ],return cache [ var0 ]
in the resulting string replace all occurrences of ' ' with '_' and append it to the end of cache_key.   return cache_key.,in resulting string replace all occurrences of var0 with var1 and append it to end of var3 return var3 ,return cache_key,return var3
return cached.,return cached.,return cached,return cached
"if value under the DEFAULT_CACHE_ALIAS key of caches dictionary is not equal to other, return boolean True, otherwise return False.","if value under var0 key of caches dict is not equal to other, return boolean var1 otherwise return var2 ",return caches [ DEFAULT_CACHE_ALIAS ] != other,return caches [ var0 ] != other
"if value under the DEFAULT_CACHE_ALIAS key of caches dictionary equals to other, return boolean True, otherwise return False.","if value under var0 key of caches dict equals to other, return boolean var1 otherwise return var2 ",return caches [ DEFAULT_CACHE_ALIAS ] == other,return caches [ var0 ] == other
"call the method calendar.isleap with an argument self.data.year, return the result.",call method var0 with argument var1 return result.,return calendar . isleap ( self . data . year ),return var0 ( var1 )
"call the method result.utctimetuple, use the result as an argument for the call to the method calendar.timegm, return the result.",call method var0 use result as argument for call to method var1 return result.,return calendar . timegm ( result . utctimetuple ( ) ),return var1 ( result . utctimetuple ( ) )
return callback and a empty string.,return callback and empty string.,"return callback , ''","return callback , ''"
"and param_dict, respectively.   evaluate the function callback with request and dictionary of parameters param_dict as the arguments, return the result.","and var0 respectively var2 evaluate function callback with request and dict of parameters var0 as arguments, return result.","return callback ( request , ** param_dict )","return callback ( request , ** var0 )"
"return callback split into two lists at the dot index, without the element at the dot index.",return callback split into two lists at dot index var0 element at dot index.,"return callback [ : dot ] , callback [ dot + 1 : ]","return callback [ : dot ] , callback [ dot + 1 : ]"
"mapped with a function k, for every k and v in return value of the method candidate_subs.items.   format candidate_pat with candidate_subs, return the result.","mapped with function k, for every k and v in return value of method var0 items var3 format var4 with var0 return result.",return candidate_pat % candidate_subs,return var4 % var0
"return the result of the call to the function chain, with an argument unpacked list, containing the result of the function,","return result of call to function chain, with argument unpacked list, containing result of function,","return chain ( * [  [ format_html ( '<link href='{0}' type='text/css' media='{1}' rel='stylesheet' />' , self . absolute_path ( path ) , medium )  for path in self . _css [ medium ] ]  for medium in media ] )","return chain(* [ [format_html('<link href='{0}' type='text/css' media='{1}' rel='stylesheet' />', self.absolute_path(path), medium)  for path in self._css [medium]]  for medium in media])"
return changeset.,return var0 ,return changeset,return var0
return check.,return check.,return check,return check
return chunk.,return chunk.,return chunk,return chunk
return last rollback elements of chunk.,return last rollback elements of chunk.,return chunk [ : - rollback ],return chunk [ : - rollback ]
return first end elements of list chunk.,return first end elements of list chunk.,return chunk [ : end ],return chunk [ : end ]
"call the function clean_ipv6_address with arguments value and self.unpack_ipv4, return the result.",call function var0 with arguments value and self var1 return result.,"return clean_ipv6_address ( value , self . unpack_ipv4 )","return var0 ( value , self . var1 )"
return client.,return client.,return client,return client
where '%s' is replaced with filename.   return cls.,var0 var1 is replaced with filename var2 return cls.,return cls,return cls
return cls.,return cls.,return cls,return cls
call the method cls.__new__ with 2 arguments: cls and unpacked list args.,call method var0 with 2 arguments: cls and unpacked list var1 ,"return cls . __new__ ( cls , * args )","return var0 ( cls , * var1 )"
"call the function cls with 8 arguments: date.year, date.month, date.day, time.hour, time.minute, time.second, time.microsecond,",call function cls with 8 arguments: var0 var1 date.day var2 var3 var4 var5 ,"return cls ( date . year , date . month , date . day , time . hour , time . minute , time . second , time . microsecond , time . tzinfo )","return cls ( var0 , var1 , date . day , var2 , var3 , var4 , var5 , time . tzinfo )"
"call the method cls with 3 arguments: value under the 'filename' key of file_dict, value under the 'content' key of file_dict,",call method cls with 3 arguments: value under var0 key of var1 value under var5 key of var1 ,"return cls ( file_dict [ 'filename' ] , file_dict [ 'content' ] , file_dict . get ( 'content-type' , 'text/plain' ) )","return cls ( var1 [ var0 ] , var1 [ 'content' ] , var1 . get ( 'content-type' , 'text/plain' ) )"
return code.,return code.,return code,return code
"name appended to string '_', as the name of the attribute to get from other object, or if the previous doesnt exist, None.   return combined.","name appended to string var0, as name of attribute to get from other object, or if previous doesnt exist var1 return combined.",return combined,return combined
"call the command.execute method with arguments: unpacked list args and unpacked dictionary defaults, return the result.","call var0 method with arguments: unpacked list var1 and unpacked dict defaults, return result.","return command . execute ( * args , ** defaults )","return var0 ( * var1 , ** defaults )"
return commands.,return commands.,return commands,return commands
return an instance of CommentNode class.,return instance of var0 class.,return CommentNode ( ),return var0 ( )
return compile_function.,return var0 ,return compile_function,return var0
"call the method compiled_parent._render with an argument context, return the result.","call method var0 _render with argument context, return result.",return compiled_parent . _render ( context ),return var0 . _render ( context )
"for every subject, message, sender and recipient in datatuple, store the results in the messages list.   return evaluated result of the method connection.send_messages with messages as argument.","for every subject, message, sender and recipient in var0 store results in messages list var1 return evaluated result of method connection var3 with messages as argument.",return connection . send_messages ( messages ),return connection . var3 ( messages )
return content.,return content.,return content,return content
return context.,return context.,return context,return context
return context.render_context.,return context var1 ,return context . render_context,return context . var1
"return an instance of Context class, created with an argument context.","return instance of var0 class, created with argument context.",return Context ( context ),return var0 ( context )
return value under the 'forloop' key of the context dictionary.,return value under var0 key of context dict.,return context [ 'forloop' ],return context [ var0 ]
return context_extras.,return var0 ,return context_extras,return var0
"instantiate class ContextDict with 3 arguments: self, unpacked list args and unpacked dictionary kwargs, return it.","instantiate class var0 with 3 arguments: self, unpacked list var1 and unpacked dict var2 return it.","return ContextDict ( self , * args , ** kwargs )","return var0 ( self , * var1 , ** var2 )"
return cookiedict.,return var0 ,return cookiedict,return var0
"call the method copy.copy with an argument self, return the result.","call method var0 with argument self, return result.",return copy . copy ( self ),return var0 ( self )
"call the method copy.deepcopy with 2 arguments: self._wrapped and memo, return the result.","call method var0 with 2 arguments: var1 and memo, return result.","return copy . deepcopy ( self . _wrapped , memo )","return var0 ( var1 , memo )"
"database set to connection.alias, skip_validation set to boolean True, app_label set to app_label and hide_empty set to boolean True.   return created_models",database set to var0 var1 set to boolean var3 var5 set to var5 and var9 set to boolean var3 return var12,return created_models,return var12
return an instance of CsrfTokenNode class.,return instance of var0 class.,return CsrfTokenNode ( ),return var0 ( )
return current.,return current.,return current,return current
"substitute the '%s' with table and list containing return value of the method call ops.value_to_db_datetime with argument now on the object under the db key of connections dictionary, respectively.   if exists return next entry from the database that cursor points at.","substitute var0 with table and list containing return value of method call ops var2 with argument now on object under db key of connections dict, respectively var3 if exists return next entry from database var4 cursor points at.",return cursor . fetchone ( ) is not None,return cursor . fetchone ( ) is not None
return d.,return var0,return d,return d
"call the object d with arguments stream_or_string and unpacked dictionary options, return the result.","call object d with arguments var0 and unpacked dict options, return result.","return d ( stream_or_string , ** options )","return d ( var0 , ** options )"
return value under the key key of d dictionary.,return value under key key of d dict.,return d [ key ],return d [ key ]
substitute it for value under the 'pk' key of data dictionary.   return data.,substitute it for value under var0 key of data dict var1 return data.,return data,return data
return data.,return data.,return data,return data
"get the name key of the data dictionary, if the key exists return it, if not return None.","get name key of data dict, if key exists return it, if not return var0 ","return data . get ( name , None )","return data . get ( name , var0 )"
"get the value under the name key of the data dictionary, return it, if the previous doesnt exists, return None.","get value under name key of data dict, return it, if previous doesnt exists, return var0 ","return data . get ( name , None )","return data . get ( name , var0 )"
"return value under the name key of the data dictionary, if it doesnt exists, return None.","return value under name key of data dict, if it doesnt exists, return var0 ","return data . get ( name , None )","return data . get ( name , var0 )"
"get the value under the name key of the data dictionary, if it exists return it, if not return None.","get value under name key of data dict, if it exists return it, if not return var0 ","return data . get ( name , None )","return data . get ( name , var0 )"
"call the method data.getlist with an argument name, return the result.","call method var0 with argument name, return result.",return data . getlist ( name ),return var0 ( name )
"if data_set is not equal to initial_set, return boolean True, otherwise return boolean False.",if var0 is not equal to var2 return boolean var4 otherwise return boolean var5 ,return data_set != initial_set,return var0 != var2
"for every value in data.   if data_set is not equal to initial_set return boolean True, otherwise return boolean False.",for every value in data var0 if var1 is not equal to var3 return boolean var4 otherwise return boolean var5 ,return data_set != initial_set,return var1 != var3
"call the function data with 3 arguments: d.year, d.month and d.day, return the result.","call function data with 3 arguments: var0 var1 and d.day, return result.","return date ( d . year , d . month , d . day )","return date ( var0 , var1 , d . day )"
"call the function date with 2 arguments: result of the call to the function datetime.now with an argument tz set to tzinfo,",call function date with 2 arguments: result of call to function var0 with argument var1 set to var2 ,"return date ( datetime . now ( tz = tzinfo ) , self . format_string )","return date ( datetime . now ( var1 = var1info ) , self . format_string )"
"call the function data with 3 arguments: self.year, self.month and self.day, return the result.",call function data with 3 arguments: var0 var1 and var2 return result.,"return date ( self . year , self . month , self . day )","return date ( var0 , var1 , var2 )"
"call the function date_format with 2 arguments: value, string 'DATETIME_FORMAT' and use_l10n as use_l10n, return the result.","call function var0 with 2 arguments: value, string var2 and var3 as var3 return result.","return date_format ( value , 'DATETIME_FORMAT' , use_l10n = use_l10n )","return var0 ( value , var2 , var3 = var3 )"
"call the function date_format with 2 arguments: value and use_l10n as use_l10n, return the result.",call function var0 with 2 arguments: value and var1 as var1 return result.,"return date_format ( value , use_l10n = use_l10n )","return var0 ( value , var1 = var1 )"
"call the method date_value.strftime with an argument input_format, return the result.",call method var0 strftime with argument var1 return result.,return date_value . strftime ( input_format ),return var0 . strftime ( var1 )
call the function dateformat.format with 2 arguments: value and result of the function get_format called with 2 arguments:,call function var0 with 2 arguments: value and result of function var1 called with 2 arguments:,"return dateformat . format ( value , get_format ( format or 'DATE_FORMAT' , use_l10n = use_l10n ) )","return var0 ( value , var1 ( format or 'DATE_FORMAT' , use_l10n = use_l10n ) )"
call the function dateformat.time_format with 2 arguments: value and result of the function get_format called with 2 arguments:,call function dateformat var1 with 2 arguments: value and result of function var2 called with 2 arguments:,"return dateformat . time_format ( value , get_format ( format or 'TIME_FORMAT' , use_l10n = use_l10n ) )","return dateformat . var1 ( value , var2 ( format or 'TIME_FORMAT' , use_l10n = use_l10n ) )"
"for every k and v in the previous result, add a key into a dictionary: v converted to an integer for k,   substitute the resulting dictionary for kw.   call the method datetime.date with an argument unpacked dictionary kw, return the result.","for every k and v in previous result, add key into dict: v converted to integer for k var0 substitute resulting dict for kw var0 call method var2 with argument unpacked dict kw, return result.",return datetime . date ( ** kw ),return var2 ( ** kw )
"call the method datetime.datetime.strptime with 2 arguments: result of the function force_str called with an argument value,","call method var0 with 2 arguments: result of function var1 called with argument value,","return datetime . datetime . strptime ( force_str ( value ) , format )","return var0 ( var1 ( value ) , format )"
"call the method datetime.datetime.strptime with 2 arguments: result of the function force_str called with an argument value,","call method var0 with 2 arguments: result of function var1 called with argument value,","return datetime . datetime . strptime ( force_str ( value ) , format ) . date ( )","return var0 ( var1 ( value ) , format ) . date ( )"
"call the method datetime.datetime.strptime with 2 arguments: result of the function force_str called with an argument value,","call method var0 with 2 arguments: result of function var1 called with argument value,","return datetime . datetime . strptime ( force_str ( value ) , format ) . time ( )","return var0 ( var1 ( value ) , format ) . time ( )"
"call the method datetime.datetime with an argument unpacked dictionary kw, return the result.","call method var0 with argument unpacked dict kw, return result.",return datetime . datetime ( ** kw ),return var0 ( ** kw )
"call the function self.path with argument name, use the result as an argument for the call to the function os.path.getatime,","call function var0 with argument name, use result as argument for call to function os.path.getatime,",return datetime . fromtimestamp ( os . path . getatime ( self . path ( name ) ) ),return datetime . fromtimestamp ( os . path . getatime ( self . path ( name ) ) )
"call the function self.path with argument name, use the result as an argument for the call to the function os.path.getctime,","call function var0 with argument name, use result as argument for call to function os.path.getctime,",return datetime . fromtimestamp ( os . path . getctime ( self . path ( name ) ) ),return datetime . fromtimestamp ( os . path . getctime ( self . path ( name ) ) )
"call the function self.path with argument name, use the result as an argument for the call to the function os.path.getmtime,","call function var0 with argument name, use result as argument for call to function var1 ",return datetime . fromtimestamp ( os . path . getmtime ( self . path ( name ) ) ),return datetime . fromtimestamp ( os . path . getmtime ( self . path ( name ) ) )
"call the method datetime.now, return the result.",call method var0 return result.,return datetime . now ( ),return var0 ( )
"called with an argument kw, only if v is not None, substitute the result for kw.   call the method datetime.time with an argument unpacked dictionary kw, return the result.","called with argument kw, only if v is not var0 substitute result for kw var1 call method var2 with argument unpacked dict kw, return result.",return datetime . time ( ** kw ),return var2 ( ** kw )
"call the method datetime.utcnow, on the result call the method replace with an argument tzinfo set to utc, return the result.","call method var0 on result call method replace with argument var1 set to utc, return result.",return datetime . utcnow ( ) . replace ( tzinfo = utc ),return var0 ( ) . replace ( var1 = utc )
"call the function datetime with an argument unpacked list kw, return the result.","call function var0 with argument unpacked list kw, return result.",return datetime ( * kw ),return var0 ( * kw )
"evaluate debug.technical_500_response with request and list of arguments exec_info, return the result.",evaluate debug var1 with request and list of arguments var2 return result.,"return debug . technical_500_response ( request , * exc_info )","return debug . var1 ( request , * exc_info )"
"evaluate the function debug.technical_500_response with request, evaluated value of function sys.exc_info as a list,","evaluate function debug var1 with request, evaluated value of function sys var3 as list,","return debug . technical_500_response ( request , * sys . exc_info ( ) , status_code = 400 )","return debug . var1 ( request , * sys . var3 ( ) , status_code = 400 )"
return an instance of DebugNode class.,return instance of var0 class.,return DebugNode ( ),return var0 ( )
return an instance of DebugNodeList class.,return instance of var0 class.,return DebugNodeList ( ),return var0 ( )
"return an instance of DebugVariableNode, created with an argument contents.",return instance of var0 created with argument contents.,return DebugVariableNode ( contents ),return var0 ( contents )
return dec.,return dec.,return dec,return dec
"call the function dec with an argument func, return the result.",call function dec with argument var0 return result.,return dec ( func ),return dec ( var0 )
return decorating_function.,return var0 ,return decorating_function,return var0
return decorator.,return decorator.,return decorator,return decorator
"call the function decorator with 2 arugments: unpacked list args and unpacked dictionary kwargs, return the result.",call function decorator with 2 arugments: unpacked list var1 and unpacked dict var2 return result.,"return decorator ( * args , ** kwargs )","return decorator ( * var1 , ** var2 )"
return default.,return default.,return default,return default
"substitute the '%s' with table and list containing key, respectively.   return default.","substitute var0 with table and list containing key, respectively var1 return default.",return default,return default
"return default,","return default,",return default,return default
return default_key_func.,return var0 ,return default_key_func,return var0
return the instance of DefusedExpatParser class.,return instance of var0 class.,return DefusedExpatParser ( ),return var0 ( )
delete the attribute name from the cache dictionary under the DEFAULT_CACHE_ALIAS key.,delete attribute name from cache dict under var0 key.,"return delattr ( caches [ DEFAULT_CACHE_ALIAS ] , name )","return delattr ( caches [ var0 ] , name )"
"call the method df.format with an argument format_string, return the result.",call method var0 with argument var1 return result.,return df . format ( format_string ),return var0 ( var1 )
"return dictionary created out of tuple elements k and printable representation of v,","return dict created out of tuple elements k and printable representation of v,","return dict ( ( k , repr ( v ) ) for k , v in module . __dict__ . items ( ) if not omittable ( k ) )","return dict ( ( k , repr ( v ) ) for k , v in module . __dict__ . items ( ) if not omittable ( k ) )"
"return dictionary created with tuples with 2 elements: key and value under the key key of self dictionary, for every key in self.","return dict created with var0 with 2 elements: key and value under key key of self dict, for every key in self.","return dict ( ( key , self [ key ] ) for key in self )","return dict ( ( key , self [ key ] ) for key in self )"
"convert object self to a dictionary, return it.","convert object self to dict, return it.",return dict ( self ),return dict ( self )
"call the method dict_.getlist with an argument key, return the result.","call method var0 with argument key, return result.",return dict_ . getlist ( key ),return var0 ( key )
return value under key key of dict_ dictionary.,return value under key key of var0 dict.,return dict_ [ key ],return var0 [ key ]
return directories and files.,return directories and files.,"return directories , files","return directories , files"
"use the result as an argument for the call to the upath function, for every d in dirs, append the results into a list,   substitute the resulting list for dirs.   return dirs.","use result as argument for call to var0 function, for every d in var1 append results into list var4 substitute resulting list for var1 return var1 ",return dirs,return var1
"call the function django.get_version, return the result.",call function django var1 return result.,return django . get_version ( ),return django . var1 ( )
"call the function do_ifequal with 3 arguments: parser, token and boolean False, return the result.","call function var0 with 3 arguments: parser, token and boolean var2 return result.","return do_ifequal ( parser , token , False )","return var0 ( parser , token , var2 )"
"call the function do_ifequal with 3 arguments: parser, token and boolean False, return the result.","call function var0 with 3 arguments: parser, token and boolean var2 return result.","return do_ifequal ( parser , token , True )","return var0 ( parser , token , True )"
"call the function do_ntranslate with 3 arguments: singular, plural, number and string 'ngettext', return the result.","call function var0 with 3 arguments: singular, plural, number and string var2, return result.","return do_ntranslate ( singular , plural , number , 'ngettext' )","return var0 ( singular , plural , number , var2 )"
"call the function do_ntranslate with 3 arguments: singular, plural, number and string 'ngettext', return the result.","call function var0 with 3 arguments: singular, plural, number and string var2, return result.","return do_ntranslate ( singular , plural , number , 'ungettext' )","return var0 ( singular , plural , number , 'ungettext' )"
"call the function do_translate with 2 arguments: message and string 'gettext', return the result.","call function var0 with 2 arguments: message and string var2, return result.","return do_translate ( message , 'gettext' )","return var0 ( message , var2 )"
"call the function do_translate with 2 arguments: message and string 'ugettext', return the result.","call function var0 with 2 arguments: message and string var2, return result.","return do_translate ( message , 'ugettext' )","return var0 ( message , var2 )"
"call the method dot_re.sub with 2 arguments: char and src, return the result.",call method var0 sub with 2 arguments: char and var2 return result.,"return dot_re . sub ( char , src )","return var0 . sub ( char , var2 )"
return doy.,return var0 ,return doy,return var0
return an instance of a dummy class.,return instance of dummy class.,return dummy ( ),return dummy ( )
return duplicate.,return duplicate.,return duplicate,return duplicate
return duplicate,return duplicate,return duplicate,return duplicate
return e.,return var0,return e,return e
return encoding.,return encoding.,return encoding,return encoding
return end ans next.,return end ans next.,"return end , next","return end , next"
return endpos.,return var0 ,return endpos,return var0
return EndToken.,return var0 ,return EndToken,return var0
return error_dict.,return var0 ,return error_dict,return var0
return errors.,return errors.,return errors,return errors
"which has not been installed."" with all the '%s' replaced by values of description, name and reference joined into a string delimited by '.', respectively,   obj set to receiver.__module__, hint set to None and id set to string 'signals.E001', append the result to errors.   return errors.","var0 has not been installed."" with all var1 replaced by values of description, name and reference joined into string delimited by var2, respectively var3 var5 set to var6 hint set to var7 and id set to string var8, append result to errors var3 return errors.",return errors,return errors
"with an argument message for 'message', or if not message for 'message' and error.code for 'code' in error.code is true,   if not, an empty string for 'code'.   return errors.","with argument message for var0, or if not message for var0 and var2 for var4 in var2 is true var6 if not, empty string for var4 var6 return errors.",return errors,return errors
call the function escape with an argument output.,call function escape with argument output.,return escape ( output ),return escape ( output )
"call the function escape with an argument text, return the result.","call function escape with argument text, return result.",return escape ( text ),return escape ( text )
"call the function escape with an argument value, return the result.","call function escape with argument value, return result.",return escape ( value ),return escape ( value )
"return an instance of EscapeBytes, created with an argument, reuslt of the call to the function bytes with an argument s.",return instance of var0 created with argument var1 of call to function bytes with argument var2,return EscapeBytes ( bytes ( s ) ),return var0 ( bytes ( s ) )
"return an instance of EscapeBytes, created with an argument s.",return instance of var0 created with argument var1,return EscapeBytes ( s ),return var0 ( s )
"call the function escapejs with an argument value, return the result.","call function var0 with argument value, return result.",return escapejs ( value ),return var0 ( value )
"return an instance of EscapeText, created with an argument s.",return instance of var0 created with argument var1,return EscapeText ( s ),return var0 ( s )
"string 'unicode_escape', substitute the list of results for etags.   return etags.","string var0, substitute list of results for var1 return var1 ",return etags,return var1
return EventHandler.modified_code.,return var0 var2 ,return EventHandler . modified_code,return var0 . var2
return exclude.,return exclude.,return exclude,return exclude
return exit_code.,return var0 ,return exit_code,return var0
return expanded_template.,return var0 ,return expanded_template,return var0
where '%s' is replaced with first element of bits.   return an instance of ExtendsNode with 2 arguments nodelist and parent_name.,var0 var1 is replaced with first element of bits var2 return instance of var3 with 2 arguments var5 and var6 ,"return ExtendsNode ( nodelist , parent_name )","return var3 ( var5 , var6 )"
return f.,return var0,return f,return f
"return result of the f.fileno method if f has an 'fileno' attribute, otherwise return f.","return result of var0 method if f has var2 attribute, otherwise return var1","return f . fileno ( ) if hasattr ( f , 'fileno' ) else f","return var0 ( ) if hasattr ( f , var2 ) else f"
"formated with 3 elements: self.class_name, self.old_method_name and self.new_method_name, self.deprecation_warning and integer 2.   call the function f with a arguments: unpacked list args and unpacked dictionary kwargs, return the result.",formated with 3 elements: self var1 self var3 and self var5 self var7 and integer 2 var8 call function f with arguments: unpacked list var9 and unpacked dict var10 return result.,"return f ( * args , ** kwargs )","return f ( * var9 , ** var10 )"
return boolean False.,return boolean var0 ,return False,return var0
return boolean True.,return boolean var0 ,return False,return False
"return boolean False,",return boolean var0 ,return False,return var0
return is boolean False.,return is boolean var0 ,return False,return var0
return FASTCGI_HELP.,return var0 ,return FASTCGI_HELP,return var0
"call the function fastcgi_help with an argument string ""ERROR: Implementation must be one of prefork or thread."", return the result.","call function var0 with argument string var2, return result.",return fastcgi_help ( 'ERROR: Implementation must be one of prefork or ' 'thread.' ),return var0 ( 'ERROR: Implementation must be one of prefork or thread.' )
"call the fastcgi_help function with an argument string ""ERROR: Invalid option for daemonize parameter."", return it.","call var0 function with argument string var2, return it.",return fastcgi_help ( 'ERROR: Invalid option for daemonize ' 'parameter.' ),return var0 ( 'ERROR: Invalid option for daemonize parameter.' )
"call the fastcgi_help function with an argument string ""Invalid combination of host, port, socket."", return it.","call var0 function with argument string var2, return it.","return fastcgi_help ( 'Invalid combination of host, port, socket.' )","return var0 ( 'Invalid combination of host, port, socket.' )"
"call the fastcgi_help function, return the result.","call var0 function, return result.",return fastcgi_help ( ),return var0 ( )
return fext.,return var0 ,return fext,return var0
"call the method field.rel.to._default_manager.db_manager with an argument db on the return value call the method  get_by_natural_key,",call method field.rel.to._default_manager var2 with argument db on return value call method var3var0,return field . rel . to . _default_manager . db_manager ( db ) . get_by_natural_key ( * value ) . pk,return field . rel . to . _default_manager . var2 ( db ) . var3 ( * var0value ) . pk
"call the field.rel.to._meta.get_field method with an field.rel.field_name argument, on the result call the method to_python,","call field.rel.to._meta var1 method with field.rel var3 argument, on result call method var4 ",return field . rel . to . _meta . get_field ( field . rel . field_name ) . to_python ( field_value ),return field . rel . to . _meta . var1 ( field . rel . var3 ) . var4 ( field_value )
return field.to_python.,return field var1 ,return field . to_python,return field . var1
"call the method Field.validate with 2 arguments: self and value, return the result.","call method var0 validate with 2 arguments: self and value, return result.","return Field . validate ( self , value )","return var0 . validate ( self , value )"
"return the result of the method field.widget.value_from_datadict called with 3 arguments: self.data, self.files and prefix.",return result of method field.widget var1 called with 3 arguments: var2 var3 and prefix.,"return field . widget . value_from_datadict ( self . data , self . files , prefix )","return field . widget . var1 ( var2 , var3 , prefix )"
"if field is contained in self.errors return boolean True, if not, return boolean False.","if field is contained in var0 return boolean var1 if not, return boolean var2 ",return field in self . errors,return field in var0
"append to list, a tuple with 2 elements: f and value under the f key of field_dict dictionary, use the resulting list as an argument,   for the creation of the instance of OrderedDict class, substitute it for field_dict.   return field_dict.","append to list, tuple with 2 elements: f and value under f key of var0 dict, use resulting list as argument var6 for creation of instance of var8 class, substitute it for var0 return var0 ",return field_dict,return var0
"return field_type, field_params and field_notes.",return var0 var1 and var3 ,"return field_type , field_params , field_notes","return var0 , var1 , var3"
"call the function self.path with argument name, use it and mode as arguments for the call to the function open, use it as an argument for creatinon of a File object instance, return it.","call function var0 with argument name, use it and mode as arguments for call to function open, use it as argument for var1 of var2 object instance, return it.","return File ( open ( self . path ( name ) , mode ) )","return var2 ( open ( self . path ( name ) , mode ) )"
return FILE_INPUT_CONTRADICTION.,return var0 ,return FILE_INPUT_CONTRADICTION,return var0
"self.cache_suffix converted to a string, appended to the character '*', call os.path.join with self._dir and fname as arguments,   filelist is a list containing all the previous results.   return filelist.","self var1 converted to string, appended to character var2, call os.path.join with var3 and var4 as arguments var5 var7 is list containing all previous results var5 return var7 ",return filelist,return var7
return filename and display_url.,return filename and var0 ,"return filename , display_url","return filename , var0"
"call the method filename.rfind with an argument string ""\\"", increment the result by one,","call method var0 with argument string var1, increment result by one,",return filename and filename [ filename . rfind ( '\\' ) + 1 : ] . strip ( ),return filename and filename [ filename . rfind ( '\\' ) + 1 : ] . strip ( )
return filenames.,return filenames.,return filenames,return filenames
"return value under the name key of the files dictionary, if it doesnt exists, return None.","return value under name key of files dict, if it doesnt exists, return var0 ","return files . get ( name , None )","return files . get ( name , var0 )"
return filter_func.,return var0 ,return filter_func,return var0
"return an instance of FilterExpression class, created with 2 arguments: token and self.","return instance of var0 class, created with 2 arguments: token and self.","return FilterExpression ( token , self )","return var0 ( token , self )"
"return a class instance FilterNode, called with an arguments filter_expr and nodelist.",return class instance var0 called with arguments var1 and var3 ,"return FilterNode ( filter_expr , nodelist )","return var0 ( var1 , var3 )"
return final_output.,return var0 ,return final_output,return var0
where '%s' is replaced with final_path and base_path.   return final_path.,var0 var1 is replaced with var2 and var6 return var2 ,return final_path,return var2
"return an instance of FirstOfNode class, created with an argument, result of the method parser.compile_filter called with bit,","return instance of var0 class, created with argument, result of method parser var2 called with bit,",return FirstOfNode ( [ parser . compile_filter ( bit ) for bit in bits ] ),return var0 ( [ parser . var2 ( bit ) for bit in bits ] )
"return an instance of FixedOffset class, created with 2 arguments: offset and name.","return instance of var0 class, created with 2 arguments: offset and name.","return FixedOffset ( offset , name )","return var0 ( offset , name )"
return fixture_files.,return var0 ,return fixture_files,return var0
"model._meta.app_label, model._meta.object_name, parent_model._meta.app_label, parent_model._meta.object_name, respectively.   return fk.",model._meta var1 model._meta var4 var6 _meta var1 var6 _meta var4 respectively var10 return var11 ,return fk,return var11
return flat.,return flat.,return flat,return flat
"evaluate the function force_bytes, with the arguments s, encoding, strings_only and errors, return the result.","evaluate function var0 with arguments s, encoding var1 and errors, return result.","return force_bytes ( s , encoding , strings_only , errors )","return var0 ( s , encoding , var1 , errors )"
"return the result.   call the function force_bytes with arguments value and self._charset, return the result.",return result var0 call function var1 with arguments value and var2 return result.,"return force_bytes ( value , self . _charset )","return var1 ( value , var2 )"
"substitute '%s' in string '<%s %s %s>' with self.__class__.__name__, self.name and self.regex.pattern, respectively,","substitute var0 in string var1 with var3 var4 and var5 respectively,","return force_str ( '<%s %s %s>' % ( self . __class__ . __name__ , self . name , self . regex . pattern ) )","return force_str ( var1 % ( var3 , var4 , var5 ) )"
"call the function force_str with an argument string '<%s\npath:%s,\nGET:%s,\nPOST:%s,\nCOOKIES:%s,\nMETA:%s>',","call function var0 with argument string var2,","return force_str ( '<%s\npath:%s,\nGET:%s,\nPOST:%s,\nCOOKIES:%s,\nMETA:%s>' % ( request . __class__ . __name__ , path , six . text_type ( get ) , six . text_type ( post ) , six . text_type ( cookies ) , six . text_type ( meta ) ) )","return var0 ( var2 % ( request . __class__ . __name__ , path , six . text_type ( get ) , six . text_type ( post ) , six . text_type ( cookies ) , six . text_type ( meta ) ) )"
"substitute '%s' from string ""<%s: %s (%s)>"" with self.__class__.__name__, self.name and self.content_type, respectively, use it as an argument for the call to the function force_str, return the result.","substitute var0 from string var1 with var2 var3 and self var5 respectively, use it as argument for call to function var6 return result.","return force_str ( '<%s: %s (%s)>' % ( self . __class__ . __name__ , self . name , self . content_type ) )","return var6 ( '<%s: %s(%s)>' % ( var2 , var3 , self . var5 ) )"
"call the function force_str with 3 arguments: string ""<Text Node: '%s'>"", with '%s' replaced with first 25 elements of self.s string,","call function var0 with 3 arguments: string var2, with var3 replaced with first 25 elements of self.s string,","return force_str ( '<Text Node: '%s'>' % self . s [ : 25 ] , 'ascii' ,  errors = 'replace' )","return var0 ( '<Text Node: var3>' % self . s [ : 25 ] , 'ascii' , errors = 'replace' )"
"call the function force_str with an argument self._tzname, return the result.",call function var0 with argument var1 return result.,return force_str ( self . _tzname ),return var0 ( var1 )
"call the function force_str with an argument signature, return the result.","call function var0 with argument signature, return result.",return force_str ( signature ),return var0 ( signature )
"call the method make_key with arguments key and version from the base class of the class BaseMemcachedCache, use it as an argument for the call to the function force_str, return the result.",call method var0 with arguments key and version from base class of class var2 use it as argument for call to function var3 return result.,"return force_str ( super ( BaseMemcachedCache , self ) . make_key ( key , version ) )","return var3 ( super ( var2 , self ) . var0 ( key , version ) )"
"call the function force_text with an argument error, return the result.","call function var0 with argument error, return result.",return force_text ( error ),return var0 ( error )
"call the function gettext with an argument message, use the result as an argument for the call to the force_text function, return the result.","call function var0 with argument message, use result as argument for call to var1 function, return result.",return force_text ( gettext ( message ) ),return var1 ( var0 ( message ) )
"call the function iri_to_uri with an argument value, use the result as an argument for the call to the force_text function,","call function var0 with argument value, use result as argument for call to var1 function,",return force_text ( iri_to_uri ( value ) ),return var1 ( var0 ( value ) )
"call the function force_text with first element of list_ as an argument, return the result.","call function var0 with first element of var1 as argument, return result.",return force_text ( list_ [ 0 ] ),return var0 ( var1 [ 0 ] )
"replace all the strings '\\' with '/' in the string name, use it as an argument for the call to the force_text function, return the result.","replace all strings var0 with var1 in string name, use it as argument for call to var2 function, return result.","return force_text ( name . replace ( '\\' , '/' ) )","return var2 ( name . replace ( '\\' , '/' ) )"
"call the function ngettext with 3 arguments: singular, plural and number, use the result as an argument for the call to the force_text,","call function var0 with 3 arguments: singular, plural and number, use result as argument for call to var1 ","return force_text ( ngettext ( singular , plural , number ) )","return var1 ( var0 ( singular , plural , number ) )"
"call the function quote with 2 arguments: result of the function force_str called with an argument url,","call function quote with 2 arguments: result of function var0 called with argument url,","return force_text ( quote ( force_str ( url ) , force_str ( safe ) ) )","return force_text ( quote ( var0 ( url ) , var0 ( safe ) ) )"
"call the function quote_plus with 2 arguments: result of the function force_str called with an argument url,","call function var0 with 2 arguments: result of function var1 called with argument url,","return force_text ( quote_plus ( force_str ( url ) , force_str ( safe ) ) )","return force_text ( var0 ( var1 ( url ) , var1 ( safe ) ) )"
"return the result of the call to the function force_text, with s, encoding, string_only and errors as arguments.","return result of call to function var0 with s, encoding var1 and errors as arguments.","return force_text ( s , encoding , strings_only , errors )","return var0 ( s , encoding , strings_only , errors )"
"call the method self.prepare_value with an argument initial_value, use it as the argument for the call to the function force_text,",call method self var1 with argument var2 use it as argument for call to function var4 ,return force_text ( self . prepare_value ( initial_value ) ) != force_text ( data_value ),return var4 ( self . var1 ( var2 ) ) != var4 ( data_value )
"evaluate the force_text function with settings.FORCE_SCRIPT_NAME as argument, return the result.","evaluate var0 function with settings var2 as argument, return result.",return force_text ( settings . FORCE_SCRIPT_NAME ),return var0 ( settings . var2 )
"call the function force_text with 2 arguments: value under the is_dst key of the time.tzname and DEFAULT_LOCALE_ENCODING,",call function var0 with 2 arguments: value under var2 key of var4 and var5 ,"return force_text ( time . tzname [ is_dst ] , DEFAULT_LOCALE_ENCODING )","return var0 ( var4 [ var2 ] , var5 )"
"call the function force_str with an argument quoted_url, use the result as an argument for the call to the function unquote,",call function var0 with argument var1 use result as argument for call to function var3 ,return force_text ( unquote ( force_str ( quoted_url ) ) ),return force_text ( var3 ( var0 ( var1 ) ) )
"call the function force_str with an argument quoted_url, use the result as an argument for the call to the function unquote_plus,",call function var0 with argument var1 use result as argument for call to function var3 ,return force_text ( unquote_plus ( force_str ( quoted_url ) ) ),return force_text ( var3 ( var0 ( var1 ) ) )
"call the function force_text with an argument url, return the result.","call function var0 with argument url, return result.",return force_text ( url ),return var0 ( url )
"call the force_text function with an argument value, return the result.","call var0 function with argument value, return result.",return force_text ( value ),return var0 ( value )
"call the method widget.render with 3 arguments: name, return value of the method self.value, attrs set to attrs,","call method var0 with 3 arguments: name, return value of method var1 var2 set to var2 ","return force_text ( widget . render ( name , self . value ( ) , attrs = attrs ) )","return force_text ( widget . render ( name , var1 ( ) , var2 = var2 ) )"
"and initial as a dictionary with 4 entries: result of self.total_form_count method for TOTAL_FORM_COUNT,   result of self.initial_form_count method for INITIAL_FORM_COUNT, self.min_num for MIN_NUM_FORM_COUNT and self.max_num for MAX_NUM_FORM_COUNT.   return form.",and initial as dict with 4 entries: result of self var1 method for var2 result of self var6 method for var7 self var10 for var11 and self var14 for var15 return form.,return form,return form
return form.,return form.,return form,return form
"get the value under the DELETION_FIELD_NAME key of the form.cleaned_data dictionary, if it exists return it, if not, return boolean False.","get value under var0 key of form var2 dict, if it exists return it, if not, return boolean var3 ","return form . cleaned_data . get ( DELETION_FIELD_NAME , False )","return form . var2 . get ( var0 , var3 )"
"call the method form.save with an argument commit as commit, return the result.","call method var0 with argument commit as commit, return result.",return form . save ( commit = commit ),return var0 ( commit = commit )
"format value into printable data representation with formating rules arg, return the result.",format value into printable data representation with formating rules var0 return result.,"return format ( value , arg )","return format ( value , var0 )"
"call the function format_html with 3 arguments: string '<ul class=""{0}"">{1}</ul>', self.error_class and return value of the function,","call function var0 with 3 arguments: string '<ul class=""{0}"">{1}</ul>', self var4 and return value of function,","return format_html (  '<ul class='{0}'>{1}</ul>' ,  self . error_class ,  format_html_join ( '' , '<li>{0}</li>' , ( ( force_text ( e ) , ) for e in self ) )  )","return var0( '<ul class='{0}'>{1}</ul>',  self.var4,  var0_join('', '<li>{0}</li>',((force_text(e),) for e in self)) )"
"call the function format_html with 2 arguments: string '<ul class=""errorlist"">{0}</ul>', and return value of the function,","call function var0 with 2 arguments: string '<ul class=""errorlist"">{0}</ul>', and return value of function,","return format_html (  '<ul class='errorlist'>{0}</ul>' ,  format_html_join ( '' , '<li>{0}{1}</li>' , ( ( k , force_text ( v ) ) for k , v in self . items ( ) ) )  )","return var0( '<ul class='errorlist'>{0}</ul>',  var0_join('', '<li>{0}{1}</li>',((k, force_text(v)) for k, v in self.items())) )"
"substitute the result for final_attrs dictionary value under the 'value' key.   call the function format_html with 2 arguments: string '<input{0} />',","substitute result for var0 dict value under var2 key var3 call function var4 with 2 arguments: string '<input{0} />',","return format_html ( '<input{0} />' , flatatt ( final_attrs ) )","return var4 ( '<input{0} />' , flatatt ( var0 ) )"
"return the result of the function format_html called with 2 arguments: string '<input{0} />',","return result of function var0 called with 2 arguments: string '<input{0} />',","return format_html ( '<input{0} />' , flatatt ( final_attrs ) )","return var0 ( '<input{0} />' , flatatt ( final_attrs ) )"
"call the function format_html with 2 arguments: string '<input{0} />' and result of the function flatatt,",call function var0 with 2 arguments: string '<input{0} />' and result of function var3 ,"return format_html ( '<input{0} />' , flatatt ( final_attrs ) )","return var0 ( '<input{0} />' , var3 ( final_attrs ) )"
"call the function format_html with 4 arguments: string '<label{0}>{1} {2}</label>', label_for, result of the method self.tag,",call function var0 with 4 arguments: string '<label{0}>{1} {2}</label>' var3 result of method var5 ,"return format_html ( '<label{0}>{1} {2}</label>' , label_for , self . tag ( ) , self . choice_label )","return var0 ( '<label{0}>{1} {2}</label>' , var3 , var5 ( ) , self . choice_label )"
"call the function format_html with 4 arguments: string '<option value=""{0}""{1}>{2}</option>', option_value, selected_html,","call function var0 with 4 arguments: string '<option value=""{0}""{1}>{2}</option>' var3 var5 ","return format_html ( '<option value='{0}'{1}>{2}</option>' ,  option_value ,  selected_html ,  force_text ( option_label ) )","return var0('<option value='{0}'{1}>{2}</option>',  var3,  var5,  force_text(option_label))"
"call the function format_html with 3 arguments: string ('<textarea{0}>\r\n{1}</textarea>', return value of the function flatatt,","call function var0 with 3 arguments: string (var2, return value of function var3 ","return format_html ( '<textarea{0}>\r\n{1}</textarea>' , flatatt ( final_attrs ) , force_text ( value ) )","return var0 ( '<textarea{0}>\r\n{1}</textarea>' , var3 ( final_attrs ) , force_text ( value ) )"
"call the function format_html with an argument empty string, return the result.","call function var0 with argument empty string, return result.",return format_html ( '' ),return var0 ( '' )
"call the function format_html with 2 arguments: string ""<input type='hidden' name='csrfmiddlewaretoken' value='{0}' />"",","call function var0 with 2 arguments: string ""<input type='hidden' name='csrfmiddlewaretoken' value='{0}' />"",","return format_html ( '<input type='hidden' name='csrfmiddlewaretoken' value='{0}' />' , csrf_token )","return var0('<input type='hidden' name='csrfmiddlewaretoken' value='{0}' />', csrf_token)"
"called with an argument w, and sub_widgets as an empty string, append the result to output.   call the function format_html with 3 arguments: self.outer_html,","called with argument w, and var0 as empty string, append result to output var1 call function var2 with 3 arguments: self var5 ","return format_html ( self . outer_html ,  id_attr = format_html ( ' id='{0}'' , id_ ) if id_ else '' ,  content = mark_safe ( '\n' . join ( output ) ) )","return var2(self.var5,var1id_attr = var2(' id='{0}'', id_) if id_ else '',var1content = mark_safe('\n'.join(output)))"
call the formataddr function with argument tuple containing 2 elements nm and addr.,call var0 function with argument tuple containing 2 elements nm and var1 ,"return formataddr ( ( nm , addr ) )","return var0 ( ( nm , var1 ) )"
"call the function formatdate with 2 arguments: epoch_seconds and usegmt set to boolean True, return the result.",call function var0 with 2 arguments: var1 and var3 set to boolean var4 return result.,"return formatdate ( epoch_seconds , usegmt = True )","return var0 ( var1 , var3 = var4 )"
"call the method formats.time_format with 2 arguments: value and arg, return the result.",call method formats var1 with 2 arguments: value and var2 return result.,"return formats . date_format ( value , arg )","return formats . date_format ( value , var2 )"
"call the function formats.localize_input with 2 arguments: value and self.format if true, if not,","call function formats var1 with 2 arguments: value and var2 if true, if not,","return formats . localize_input ( value , self . format or formats . get_format ( self . format_key ) [ 0 ] )","return formats . var1 ( value , var2 or formats . get_format ( self . format_key ) [ 0 ] )"
"call the method formats.localize_input with an argument value, return the result.","call method formats var1 with argument value, return result.",return formats . localize_input ( value ),return formats . var1 ( value )
"call the method formats.time_format with 2 arguments: value and arg, return the result.",call method formats var1 with 2 arguments: value and var2 return result.,"return formats . time_format ( value , arg )","return formats . var1 ( value , var2 )"
substitute the result for formatted_subject.   return first 989 elements of formatted_subject.,substitute result for var0 return first 989 elements of var0 ,return formatted_subject [ : 989 ],return var0 [ : 989 ]
"with an argument i, append the result to a list, substitute the resulting list for forms.   return forms.","with argument i, append result to list, substitute resulting list for forms var0 return forms.",return forms,return forms
"if forms_valid is true and call to the method self.non_form_errors, evaluates to false, return boolean True, otherwise return False.","if var0 is true and call to method self var3 evaluates to false, return boolean var4 otherwise return var5 ",return forms_valid and not self . non_form_errors ( ),return var0 and not self . var3 ( )
return FormSet.,return var0 ,return FormSet,return var0
"return an instance of ForNode class, created with 5 arguments: loopvars, sequence, is_reversed, nodelist_loop and nodelist_empty.","return instance of var0 class, created with 5 arguments: var1 sequence var2 var4 and var6 ","return ForNode ( loopvars , sequence , is_reversed , nodelist_loop , nodelist_empty )","return var0 ( var1 , sequence , var2 , var4 , var6 )"
return found.,return found.,return found,return found
"call the method fp.getvalue, return the result.",call method var0 return result.,return fp . getvalue ( ),return var0 ( )
"call the function from_current_timezone with an argument result, return the result.","call function var0 with argument result, return result.",return from_current_timezone ( result ),return var0 ( result )
"call the function from_current_timezone with an argument, return the result.","call function var0 with argument, return result.",return from_current_timezone ( result ),return var0 ( result )
"call the method from_current_timezone with an argument result, return the result.","call method var0 with argument result, return result.",return from_current_timezone ( result ),return var0 ( result )
"call the function __current_timezone with an argument value, return the result.","call function var0 with argument value, return result.",return from_current_timezone ( value ),return from_current_timezone ( value )
"use its __name__ field as a key to get the value from self.tags, assign func to it.   return func.",use its var0 field as key to get value from var1 assign var2 to it var4 return var2 ,return func,return var2
return func.,return var0 ,return func,return var0
"call the method func.__get__ with 2 arguments: self and type of self object, call the result with 2 arguments:","call method var0 with 2 arguments: self and type of self object, call result with 2 arguments:","return func . __get__ ( self , type ( self ) ) ( * args2 , ** kwargs2 )","return var0 ( self , type ( self ) ) ( * args2 , ** kwargs2 )"
"use the result as an argument for the call to the mark_safe function, return the result.   call the function func with 2 arguments: unpacked list args and unpacked dictionary kwargs, return the result.","use result as argument for call to var0 function, return result var2 call function var1 with 2 arguments: unpacked list var3 and unpacked dict var4 return result.","return func ( * args , ** kwargs )","return var1 ( * var3 , ** var4 )"
call the function func with 2 arguments: unpacked list args and unpacked dictionary kwargs.,call function var0 with 2 arguments: unpacked list var1 and unpacked dict var2 ,"return func ( * args , ** kwargs )","return var0 ( * var1 , ** var2 )"
"call the function func with 2 arguments: unpacked list resolved_args and unpacked dictionary resolved_kwargs, return it.",call function var0 with 2 arguments: unpacked list var1 and unpacked dict var2 return it.,"return func ( * resolved_args , ** resolved_kwargs )","return var0 ( * var1 , ** var2 )"
"call the function func with 2 arguments: unpacked list self.__args and unpacked dictionary self.__kw, return the result.",call function var0 with 2 arguments: unpacked list self.__args and unpacked dict var1 return result.,"return func ( * self . __args , ** self . __kw )","return var0 ( * self . __args , ** var1 )"
"call the function func with 3 arguments: context, self.first and self.second, return the result.",call function var0 with 3 arguments: context var1 and var2 return result.,"return func ( context , self . first , self . second )","return var0 ( context , var1 , var2 )"
"call the function func with 2 arguments: context and self.first, return the result.",call function var0 with 2 arguments: context and var1 return result.,"return func ( context , self . first )","return var0 ( context , var1 )"
call the function func with 2 arguments: self._wrapped and unpacked list args.,call function var0 with 2 arguments: var1 and unpacked list var2 ,"return func ( self . _wrapped , * args )","return var0 ( var1 , * var2 )"
"call the function get_callable with an argument callback, return the result and an empty dictionary.","call function var0 with argument callback, return result and empty dict.","return get_callable ( callback ) , { }","return var0 ( callback ) , { }"
call the function get_connection with 2 arguments: backend set to self.email_backend and fail_silently set to boolean True.,call function var0 with 2 arguments: var2 set to self var4 and var5 set to boolean var7 ,"return get_connection ( backend = self . email_backend , fail_silently = True )","return var0 ( var2 = self . var4 , var5 = var7 )"
return get_git_changeset.cache.,return var0 cache.,return get_git_changeset . cache,return var0 . cache
"call the function get_internal_wsgi_application, return the result.",call function var0 return result.,return get_internal_wsgi_application ( ),return var0 ( )
"call the function get_resolver with an argument urlconf, on the result call the method resolve with an argument path, return it.","call function var0 with argument var1 on result call method resolve with argument path, return it.",return get_resolver ( urlconf ) . resolve ( path ),return var0 ( var1 ) . resolve ( path )
"call the function get_supported_language_variant with an argument accept_lang, return the result.",call function var0 with argument var1 return result.,return get_supported_language_variant ( accept_lang ),return var0 ( var1 )
"call the function get_supported_language_variant with 2 arguments: lang_code and strict set to strict, return the result.","call function var0 with 2 arguments: var1 and strict set to strict, return result.","return get_supported_language_variant ( lang_code , strict = strict )","return var0 ( var1 , strict = strict )"
"call the function get_supported_language_variant with an argument lang_code, return the result.",call function var0 with argument var1 return result.,return get_supported_language_variant ( lang_code ),return var0 ( var1 )
"call the function get_supported_language_variant with an argument settings.LANGUAGE_CODE, return the result.",call function var0 with argument settings var2 return result.,return get_supported_language_variant ( settings . LANGUAGE_CODE ),return var0 ( settings . var2 )
"call the function get_template with an argument parent, return the result.","call function var0 with argument parent, return result.",return get_template ( parent ),return var0 ( parent )
"call the function get_template with 2 arguments template_name and dirs, return the result.",call function var0 with 2 arguments var1 and var3 return result.,"return get_template ( template_name , dirs )","return var0 ( var1 , var3 )"
"call the get_valid_filename with argument name, return the result.","call var0 with argument name, return result.",return get_valid_filename ( name ),return var0 ( name )
"call the function get_wsgi_application, return the result.",call function var0 return result.,return get_wsgi_application ( ),return var0 ( )
"get 'value' attribute of the _active object, if it exists return it, if not, call the function get_default_timezone and return the result.","get var0 attribute of _active object, if it exists return it, if not, call function var1 and return result.","return getattr ( _active , 'value' , get_default_timezone ( ) )","return getattr ( _active , var0 , var1 ( ) )"
"get translation_function attribute of the _default object, call the result with 3 arguments: singular, plural and number, return the result.","get var0 attribute of _default object, call result with 3 arguments: singular, plural and number, return result.","return getattr ( _default , translation_function ) ( singular , plural , number )","return getattr ( _default , var0 ) ( singular , plural , number )"
"get 'value' attribute of the _prefixes, if it exists, return it, otherwise return '/'.","get var0 attribute of var1 if it exists, return it, otherwise return var2.","return getattr ( _prefixes , 'value' , '/' )","return getattr ( var1 , var0 , '/' )"
"get the 'value' attribute of the _urlconfs, if it exists return it, otherwise return defaults.","get var0 attribute of var1 if it exists return it, otherwise return defaults.","return getattr ( _urlconfs , 'value' , default )","return getattr ( var1 , var0 , default )"
"get attribute name from value under the DEFAULT_CACHE_ALIAS key of caches dictionary, return it.","get attribute name from value under var0 key of caches dict, return it.","return getattr ( caches [ DEFAULT_CACHE_ALIAS ] , name )","return getattr ( caches [ var0 ] , name )"
"get name attribute from the instance object, call it and return the result.","get name attribute from instance object, call it and return result.","return getattr ( instance , name ) ( )","return getattr ( instance , name ) ( )"
"get name attribute from the instance object, call it with an argument value and return the result.","get name attribute from instance object, call it with argument value and return result.","return getattr ( instance , name ) ( value )","return getattr ( instance , name ) ( value )"
"get attribute class_name form the module object, return it.","get attribute var0 form module object, return it.","return getattr ( module , class_name )","return getattr ( module , var0 )"
"gett self.attr from the module object, return it.","var0 var1 from module object, return it.","return getattr ( module , self . attr )","return getattr ( module , var1 )"
"get _assertCountEqual attribute of the self object, call the result with 2 arguments: unpacked list args,","get _assertCountEqual attribute of self object, call result with 2 arguments: unpacked list var0 ","return getattr ( self , _assertCountEqual ) ( * args , ** kwargs )","return getattr ( self , _assertCountEqual ) ( * var0 , ** kwargs )"
"get _assertRaisesRegex attribute of the self object, call the result with 2 arguments: unpacked list args,","get _assertRaisesRegex attribute of self object, call result with 2 arguments: unpacked list var0 ","return getattr ( self , _assertRaisesRegex ) ( * args , ** kwargs )","return getattr ( self , _assertRaisesRegex ) ( * var0 , ** kwargs )"
"get _assertRegex attribute of the self object, call the result with 2 arguments: unpacked list args,","get var0 attribute of self object, call result with 2 arguments: unpacked list var1 ","return getattr ( self , _assertRegex ) ( * args , ** kwargs )","return getattr ( self , var0 ) ( * var1 , ** kwargs )"
"get shell attribute of the self object, call it and return the result.","get shell attribute of self object, call it and return result.","return getattr ( self , shell ) ( )","return getattr ( self , shell ) ( )"
"get attribute 'caches' from the self._caches if exists, otherwise get an empty dictionary, call the values method on the return value, return it.","get attribute var0 from var1 if exists, otherwise get empty dict, call values method on return value, return it.","return getattr ( self . _caches , 'caches' , { } ) . values ( )","return getattr ( var1 , var0 , { } ) . values ( )"
"get name attribute of the self._out object, return it.","get name attribute of self._out object, return it.","return getattr ( self . _out , name )","return getattr ( self . _out , name )"
"get format_type attribute of the settings object, return it.","get var0 attribute of settings object, return it.","return getattr ( settings , format_type )","return getattr ( settings , var0 )"
"get translation_function attribute of the t object, call the result with 3 arguments: singular, plural and number, return the result.","get var0 attribute of t object, call result with 3 arguments: singular, plural and number, return result.","return getattr ( t , translation_function ) ( singular , plural , number )","return getattr ( t , var0 ) ( singular , plural , number )"
"get attribute real_name from the trans object, return it.","get attribute var0 from var1 object, return it.","return getattr ( trans , real_name )","return getattr ( var1 , var0 )"
return guessed_path.,return var0 ,return guessed_path,return var0
call the function handle_app with 2 arguments: app_config.models_module and unpacked dictionary options.,call function var0 with 2 arguments: var1 var3 and unpacked dict options.,"return handle_app ( app_config . models_module , ** options )","return var0 ( var1 . var3 , ** options )"
"call the method self.__cast, return the hash value of the result.",call method var0 return hash value of result.,return hash ( self . __cast ( ) ),return hash ( self . __cast ( ) )
"call the function hashlib.pbkdf2_hmac with 5 arguments: field name of the result of the function digest, password, salt,","call function var0 with 5 arguments: field name of result of function digest, password, salt,","return hashlib . pbkdf2_hmac ( digest ( ) . name , password , salt , iterations , dklen )","return var0 ( digest ( ) . name , password , salt , iterations , dklen )"
"convert deader to lowercase, if it is contained in self._headers return boolean True, if not, return boolean False.","convert deader to lowercase, if it is contained in var0 return boolean var1 if not, return boolean var2 ",return header . lower ( ) in self . _headers,return header . lower ( ) in var0
"check if lowercase header_query exists is existing_headers, return the boolean result.",check if lowercase var0 exists is var1 return boolean result.,return header_query . lower ( ) in existing_headers,return var0 . lower ( ) in var1
"call the function hmac.compare_digest with 2 arguments: result of the function force_bytes called with an argument val1,",call function hmac var1 with 2 arguments: result of function var2 called with argument var4 ,"return hmac . compare_digest ( force_bytes ( val1 ) , force_bytes ( val2 ) )","return hmac . var1 ( var2 ( var4 ) , var2 ( val2 ) )"
"call the method hmac.new with 3 arguments: key, msg set to result of the function force_bytes with an argument value,","call method var0 with 3 arguments: key, msg set to result of function var1 with argument value,","return hmac . new ( key , msg = force_bytes ( value ) , digestmod = hashlib . sha1 )","return var0 ( key , msg = var1 ( value ) , digestmod = hashlib . sha1 )"
return host.,return host.,return host,return host
return host and an empty string.,return host and empty string.,"return host , ''","return host , ''"
return html.,return html.,return html,return html
"evaluate the function http.parse_cookie with raw_cookie as an argument, return the result.","evaluate function http var1 with var2 as argument, return result.",return http . parse_cookie ( raw_cookie ),return http . var1 ( var2 )
"evaluate the http.QueryDict method with raw_query_string and encoding set to self._encoding as arguments, return the result.","evaluate http var0 method with var1 and encoding set to var3 as arguments, return result.","return http . QueryDict ( raw_query_string , encoding = self . _encoding )","return http . var0 ( var1 , encoding = var3 )"
return id_.,return var0 ,return id_,return var0
"substitute the list of results for values.   return an instance of a class IfChangedNode, created with 3 arguments: nodelist_true, nodelist_false and unpacked list values.",substitute list of results for values var0 return instance of class var1 created with 3 arguments: var2 var4 and unpacked list values.,"return IfChangedNode ( nodelist_true , nodelist_false , * values )","return var1 ( var2 , var4 , * values )"
"return an instance of IfEqualNode class, created with 5 arguments: val1, val2, nodelist_true, nodelist_false and negate.","return instance of var0 class, created with 5 arguments: var1 var2 var3 var5 and negate.","return IfEqualNode ( val1 , val2 , nodelist_true , nodelist_false , negate )","return var0 ( var1 , var2 , var3 , var5 , negate )"
"return an instance of IfNode class, created with an argument conditions_nodelists.","return instance of var0 class, created with argument var1 ",return IfNode ( conditions_nodelists ),return var0 ( var1 )
"call the import_string with app_path as an argument, return the result.","call var0 with var1 as argument, return result.",return import_string ( app_path ),return var0 ( var1 )
"call the import_string with argument: import_path if exists or settings.DEFAULT_FILE_STORAGE, if not, return the result.","call var0 with argument: var2 if exists or settings var4 if not, return result.",return import_string ( import_path or settings . DEFAULT_FILE_STORAGE ),return var0 ( var2 or settings . var4 )
"evaluate the function import_string with key_func as argument, return the result.","evaluate function var0 with var1 as argument, return result.",return import_string ( key_func ),return var0 ( var1 )
"call the import_string with arguments path, call the return function with arguments: unpacked list args and unpacked dictionary kwargs, return the result.","call var0 with arguments path, call return function with arguments: unpacked list var1 and unpacked dict var2 return result.","return import_string ( path ) ( * args , ** kwargs )","return var0 ( path ) ( * var1 , ** var2 )"
"call the function importlib_find with 2 arguments: full_module_name and package_path, if the result is not None, return boolean True,",call function var0 with 2 arguments: var2 and var3 if result is not var5 return boolean var6 ,"return importlib_find ( full_module_name , package_path ) is not None","return var0 ( var2 , var3 ) is not var5"
"return an instance of IncludeNode class, created with 3 arguments: return value of the method parser.compile_filter,","return instance of var0 class, created with 3 arguments: return value of method parser var2 ","return IncludeNode ( parser . compile_filter ( bits [ 1 ] ) , extra_context = namemap , isolated_context = isolated_context )","return var0 ( parser . var2 ( bits [ 1 ] ) , extra_context = namemap , isolated_context = isolated_context )"
return initial.,return initial.,return initial,return initial
"if initial is not equal to data, return boolean True, if it is return boolean False.","if initial is not equal to data, return boolean var0 if it is return boolean var1 ",return initial != data,return initial != data
return initial_forms.,return var0 ,return initial_forms,return var0
"if initial_value is not equal to data_value, return boolean True, otherwise return boolean False.",if var0 is not equal to var2 return boolean var4 otherwise return boolean var5 ,return initial_value != data_value,return var0 != var2
"initialize the object of a InMemoryUploadedFile class with arguments: file set to self.file, field_name set to self.field_name,",initialize object of var0 class with arguments: file set to var1 var2 set to self var2 ,"return InMemoryUploadedFile ( file = self . file , field_name = self . field_name , name = self . file_name , content_type = self . content_type , size = file_size , charset = self . charset , content_type_extra = self . content_type_extra )","return var0 ( file = var1 , var2 = self . var2 , name = var1_name , content_type = self . content_type , size = file_size , charset = self . charset , content_type_extra = self . content_type_extra )"
return inner.,return inner.,return inner,return inner
self._wrapped.,var0.,return inner,return inner
return input_val.,return var0 ,return input_val,return var0
return instance.,return instance.,return instance,return instance
"call the function binascii.hexlify with an argument x, convert the result to base 16 integer, return the result.","call function var0 with argument x, convert result to base 16 integer, return result.","return int ( binascii . hexlify ( x ) , 16 )","return int ( binascii . hexlify ( x ) , 16 )"
"call the method self.data.utctimetuple, use the result as an argument for the call to the function calendar.timegm,",call method var0 use result as argument for call to function var1 ,return int ( calendar . timegm ( self . data . utctimetuple ( ) ) ),return int ( calendar . timegm ( self . data . utctimetuple ( ) ) )
"convert to integer the value of dictionary cc under the key 'max-age', and return it","convert to integer value of dict cc under key var0, and return it",return int ( cc [ 'max-age' ] ),return int ( cc [ var0 ] )
"convert value into a string, take character at the negative arg index, convert it into an integer, return it.","convert value into string, take character at negative var0 index, convert it into integer, return it.",return int ( str ( value ) [ - arg ] ),return int ( str ( value ) [ - var0 ] )
"call the method self.data.timetuple, use the result as an argument for the call to the function time.mktime,",call method var0 use result as argument for call to function var1 ,return int ( time . mktime ( self . data . timetuple ( ) ) ),return int ( time . mktime ( self . data . timetuple ( ) ) )
"convert timeout into an integer, return it.","convert var0 into integer, return it.",return int ( timeout ),return int ( var0 )
"convert value to an integer, return it.","convert value to integer, return it.",return int ( value ),return int ( value )
"convert value and arg to integers, if value is divisible by arg, return True, otherwise return boolean False.","convert value and var0 to integers, if value is divisible by var0 return var2 otherwise return boolean var3 ",return int ( value ) % int ( arg ) == 0,return int ( value ) % int ( var0 ) == 0
"convert value and arg into a integers, return their sum.","convert value and var0 into integers, return var1 sum.",return int ( value ) + int ( arg ),return int ( value ) + int ( var0 )
"convert first element of values into a integer, return the result and ch.","convert first element of values into integer, return result and var0 ","return int ( values [ 0 ] ) , ch","return int ( values [ 0 ] ) , var0"
"convert protocol to lowercase, use it as a key to get a value from the ip_address_validator_map dictionary, return it.","convert protocol to lowercase, use it as key to get value from var0 dict, return it.",return ip_address_validator_map [ protocol . lower ( ) ],return var0 [ protocol . lower ( ) ]
return ip_str.,return var0 ,return ip_str,return var0
"split ip_str into 2 parts from right, return second element of the result.","split var0 into 2 parts from right, return second element of result.","return ip_str . rsplit ( ':' , 1 ) [ 1 ]","return var0 . rsplit ( ':' , 1 ) [ 1 ]"
return ipv4_unpacked.,return var0 ,return ipv4_unpacked,return var0
return iri.,return var0 ,return iri,return var0
"call the function iri_to_uri with an argument location, return the result.","call function var0 with argument location, return result.",return iri_to_uri ( location ),return var0 ( location )
"call the method resolver._reverse_with_prefix with 4 arguments: view, prefix, unpacked list args, unpacked dictionary kwargs,","call method var0 with 4 arguments: view, prefix, unpacked list var1 unpacked dict var2 ","return iri_to_uri ( resolver . _reverse_with_prefix ( view , prefix , * args , ** kwargs ) )","return iri_to_uri ( resolver . _reverse_with_prefix ( view , prefix , * var1 , ** var2 ) )"
"call the function is_library_missing with an argument path, return the result.","call function var0 with argument path, return result.",return is_library_missing ( path ),return var0 ( path )
"check if obj is instance of the object _PROTECTED_TYPES, return the boolean result.",check if var0 is instance of object var1 return boolean result.,"return isinstance ( obj , _PROTECTED_TYPES )","return isinstance ( var0 , var1 )"
"if other is instance of EmailValidator and, self.domain_whitelist equals to other.domain_whitelist,","if other is instance of var0 and, self var2 equals to other var2 ","return isinstance ( other , EmailValidator ) and ( self . domain_whitelist == other . domain_whitelist ) and ( self . message == other . message ) and ( self . code == other . code )","return isinstance ( other , var0 ) and self . var2 == other . var2 and self . message == other . message and self . code == other . code"
"if other is an instance of self.__class__ and, self.limit_value equals to other.limit_value, and self.message equals to other.message,","if other is instance of var0 and, self var2 equals to other var2 and var5 equals to var6 ","return isinstance ( other , self . __class__ ) and ( self . limit_value == other . limit_value ) and ( self . message == other . message ) and ( self . code == other . code )","return isinstance ( other , var0 ) and self . var2 == other . var2 and var5 == var6 and self . code == other . code"
return next element of the iterable it.,return next element of var0 it.,return it . next ( ),return it . next ( )
"if item is contained in the list of the elements of self, return boolean True, otherwise return boolean False.","if item is contained in list of elements of self, return boolean var0 otherwise return boolean var1 ",return item in list ( self ),return item in list ( self )
"if item is contained in self.dict, return boolean True, otherwise return boolean False.",if item is contained in var0 return boolean var1 otherwise return boolean var2 ,return item in self . dict,return item in var0
"get _iteritems attribute of the class d, call the result with an argument unpacked dictionary kw, convert the result to a iterable,","get _iteritems attribute of class d, call result with argument unpacked dict kw, convert result to var0 ","return iter ( getattr ( d , _iteritems ) ( ** kw ) )","return iter ( getattr ( d , _iteritems ) ( ** kw ) )"
"get _iterkeys attribute of the class d, call the result with an argument unpacked dictionary kw, convert the result to a iterable,","get _iterkeys attribute of class d, call result with argument unpacked dict kw, convert result to var0 ","return iter ( getattr ( d , _iterkeys ) ( ** kw ) )","return iter ( getattr ( d , _iterkeys ) ( ** kw ) )"
"get _iterlists attribute of the class d, call the result with an argument unpacked dictionary kw, convert the result to a iterable,","get var0 attribute of class d, call result with argument unpacked dict kw, convert result to var1 ","return iter ( getattr ( d , _iterlists ) ( ** kw ) )","return iter ( getattr ( d , var0 ) ( ** kw ) )"
"get _itervalues attribute of the class d, call the result with an argument unpacked dictionary kw, convert the result to a iterable,","get var0 attribute of class d, call result with argument unpacked dict kw, convert result to var1 ","return iter ( getattr ( d , _itervalues ) ( ** kw ) )","return iter ( getattr ( d , var0 ) ( ** kw ) )"
return self._container converted into a iterable.,return var0 converted into var1 ,return iter ( self . _container ),return iter ( var0 )
"convert keys of dictionary self.dict into a iterable, return it.",convert keys of dict var0 into var1 return it.,return iter ( self . dict . keys ( ) ),return iter ( var0 . keys ( ) )
return iterator object based on the self.file collection object.,return var0 object based on var1 collection object.,return iter ( self . file ),return iter ( var1 )
"convert self.forms into an iterable, return it.",convert var0 into var1 return it.,return iter ( self . forms ),return iter ( var0 )
return iterable self.keyOrder.,return var0 self var2 ,return iter ( self . keyOrder ),return iter ( self . var2 )
return j.,return var0,return j,return j
"call the method json.dumps with a dictionary generate with an expression as an argument, return value of the function e.get_json_data,","call method var0 with dict generate with expression as argument, return value of function e var2 ","return json . dumps ( { f : e . get_json_data ( escape_html ) for f , e in self . items ( ) } )","return var0 ( { f : e . var2 ( escape_html ) for f , e in self . items ( ) } )"
"call the json.dumps function with 2 arguments: obj and separators set to tuple containing ',' and ':' characters,","call var0 function with 2 arguments: var1 and separators set to tuple containing var2 and var3 characters,","return json . dumps ( obj , separators = ( ', ' , ':' ) ) . encode ( 'latin-1' )","return var0 ( var1 , separators = ( ', ' , var3 ) ) . encode ( 'latin-1' )"
"call the method self.get_json_data with an argument escape_html,",call method self var1 with argument var2 ,return json . dumps ( self . get_json_data ( escape_html ) ),return json . dumps ( self . var1 ( var2 ) )
"call the data.decode method with a string 'latin-1' as an argument, use the result as an argument for the call to the json.load function, return the result.","call var0 method with string var1 as argument, use result as argument for call to var2 function, return result.",return json . loads ( data . decode ( 'latin-1' ) ),return var2s ( data . decode ( var1 ) )
return key and pdict.,return key and var0 ,"return key , pdict","return key , var0"
return first element of key.,return first element of key.,return key [ 0 ],return key [ 0 ]
"if key if contained in value under the DEFAULT_CACHE_ALIAS key of caches dictionary, return boolean True, otherwise return False.","if key if contained in value under var0 key of caches dict, return boolean var1 otherwise return var2 ",return key in caches [ DEFAULT_CACHE_ALIAS ],return key in caches [ var0 ]
"if key is contained in last element of self.dicts, return boolean True, otherwise return boolean False.",if key is contained in last element of var0 return boolean var1 otherwise return boolean var2 ,return key in self . dicts [ - 1 ],return key in var0 [ - 1 ]
return key_func.,return var0 ,return key_func,return var0
return klass.,return var0 ,return klass,return var0
"str.__unicode__().encode('utf-8'), call the lambda function and put the result in the __str__ filed of klass.   return klass.","str.__unicode__().encode(var1), call lambda function and put result in var2 filed of var3 return var3 ",return klass,return var3
"call the klass method with fail_silently set to fail_silently and dictionary arguments kwds as arguments, return the result.","call var0 method with var1 set to var1 and dict arguments var3 as arguments, return result.","return klass ( fail_silently = fail_silently , ** kwds )","return var0 ( var1 = var1 , ** var3 )"
return kwargs.,return var0 ,return kwargs,return var0
"return lambda function with text as argument and return value being result of the function colorize, called with 3 arguments: text,","return lambda function with text as argument and return value being result of function colorize, called with 3 arguments: text,","return lambda text : colorize ( text , opts , ** kwargs )","return lambda text : colorize ( text , opts , ** kwargs )"
"create lambda identity function which returns x for input parameter x, return the function.","create lambda identity function var0 returns x for input parameter x, return function.",return lambda x : x,return lambda x : x
return lang_code.,return var0 ,return lang_code,return var0
"called with an argument lang_code is true,   return lang_code.",called with argument var0 is true var2 return var0 ,return lang_code,return var0
"get the LANG_INFO dictionary value under the generic_lang_code key, return the result.","get var0 dict value under var1 key, return result.",return LANG_INFO [ generic_lang_code ],return var0 [ var1 ]
"get the value under the lang_code key of the LANG_INFO dictionary, return it.","get value under var0 key of var2 dict, return it.",return LANG_INFO [ lang_code ],return var2 [ var0 ]
convert language to lowercase and return it.,convert language to lowercase and return it.,return language . lower ( ),return language . lower ( )
"convert language to lowercase, return it.","convert language to lowercase, return it.",return language . lower ( ),return language . lower ( )
"convert fist p elements of language to lowercase, append '_' to it,","convert fist p elements of language to lowercase, append var0 to it,",return language [ : p ] . lower ( ) + '_' + language [ p + 1 : ] . lower ( ),return language [ : p ] . lower ( ) + var0 + language [ p + 1 : ] . lower ( )
"append '_' to string created from first p elements of languages converted to lowercase,","append var0 to string created from first p elements of languages converted to lowercase,",return language [ : p ] . lower ( ) + '_' + language [ p + 1 : ] . upper ( ),return language [ : p ] . lower ( ) + var0 + language [ p + 1 : ] . upper ( )
"covert to lowercase language element at (p+1)-th index, append it to the previous result,   covert to lowercase language elements from (p+2)-th index to the end, append it to the previous result, return it.   convert fist p elements of language to lowercase, append '_' to it,","covert to lowercase language element at (p+1)-th index, append it to previous result var1 covert to lowercase language elements from (p+2)-th index to end, append it to previous result, return it var1 convert fist p elements of language to lowercase, append var4 to it,",return language [ : p ] . lower ( ) + '_' + language [ p + 1 : ] . upper ( ),return language [ : p ] . lower ( ) + var4 + language [ p + 1 : ] . upper ( )
"convert fist p elements of language to lowercase, append '_' to it,","convert fist p elements of language to lowercase, append var0 to it,",return language [ : p ] . lower ( ) + '_' + language [ p + 1 ] . upper ( ) + language [ p + 2 : ] . lower ( ),return language [ : p ] . lower ( ) + var0 + language [ p + 1 ] . upper ( ) + language [ p + 2 : ] . lower ( )
"if latest_date is true, return it, if not, call the method datetime.datetime.now and return the result.","if var0 is true, return it, if not, call method var1 and return result.",return latest_date or datetime . datetime . now ( ),return var0 or var1 ( )
"call the function lazy with 2 arguments: func and unpacked list resultclasses, call the result with 2 arguments: unpacked list args,",call function lazy with 2 arguments: var0 and unpacked list var1 call result with 2 arguments: unpacked list var2 ,"return lazy ( func , * resultclasses ) ( * args , ** kwargs )","return lazy ( var0 , * var1 ) ( * var2 , ** kwargs )"
"call the function lazy_number with 5 arguments: ngettext, str, singular set to singular, plural set to plural,","call function var0 with 5 arguments: var1 var2 singular set to singular, plural set to plural,","return lazy_number ( ngettext , str , singular = singular , plural = plural , number = number )","return var0 ( var1 , var2 , singular = singular , plural = plural , number = number )"
"call the function lazy_number with 6 arguments: npgettext, six.text_type, context set to context, singular set to singular,","call function var0 with 6 arguments: var1 six var3 context set to context, singular set to singular,","return lazy_number ( npgettext , six . text_type , context = context , singular = singular , plural = plural , number = number )","return var0 ( var1 , six . var3 , context = context , singular = singular , plural = plural , number = number )"
"call the function lazy_number with 5 arguments: ungettext, six.text_type, singular set to singular, plural set to plural,","call function var0 with 5 arguments: var1 six var3 singular set to singular, plural set to plural,","return lazy_number ( ungettext , six . text_type , singular = singular , plural = plural , number = number )","return var0 ( var1 , six . var3 , singular = singular , plural = plural , number = number )"
"instantiate class BoundaryIter with 2 arguments: self._stream and self._boundary, use it to instantiate LazyStream class, return it.","instantiate class var0 with 2 arguments: var1 and var2 use it to instantiate var3 class, return it.","return LazyStream ( BoundaryIter ( self . _stream , self . _boundary ) )","return var3 ( var0 ( var1 , var2 ) )"
return left.,return left.,return left,return left
"create list out of email_messages, return the length of the list.",create list out of var0 return length of list.,return len ( list ( email_messages ) ),return len ( list ( var0 ) )
"convert result of the method self.__iter__ into a list, return its length.","convert result of method var0 into list, return its length.",return len ( list ( self . __iter__ ( ) ) ),return len ( list ( self . __iter__ ( ) ) )
return the length of self.children.,return length of var0 ,return len ( self . children ),return len ( var0 )
return the length of self.content.,return length of var0 ,return len ( self . content ),return len ( var0 )
return the length of self.forms.,return length of var0 ,return len ( self . forms ),return len ( var0 )
"call the method self.get_queryset, return the length of the result.",call method self var1 return length of result.,return len ( self . get_queryset ( ) ),return len ( self . var1 ( ) )
return length of self.items.,return length of var0 ,return len ( self . items ),return len ( var0 )
"for every form_errors in self.errors sum length of return value of the method self.non_form_errors and length of form_errors, return the result.",for every var0 in var2 sum length of return value of method self var4 and length of var0 return result.,return len ( self . non_form_errors ( ) ) + sum ( len ( form_errors ) for form_errors in self . errors ),return len ( self . var4 ( ) ) + sum ( len ( var0 ) for var0 in var2 )
return the length of self.object_list.,return length of self var1 ,return len ( self . object_list ),return len ( self . var1 )
"split value into words, return the length of the result.","split value into words, return length of result.",return len ( value . split ( ) ),return len ( value . split ( ) )
"return length of value,","return length of value,",return len ( value ),return len ( value )
"if lengths of value and arg are equal, return boolean True, otherwise return boolean False.","if lengths of value and var0 are equal, return boolean var1 otherwise return boolean var2 ",return len ( value ) == int ( arg ),return len ( value ) == int ( var0 )
"where '%s' is replaced with library_name and elements of tried_modules joined into a string, separated by ','.   return lib.","var0 var1 is replaced with var2 and elements of var5 joined into string, separated by var7 var8 return var4 ",return lib,return var4
return line.,return line.,return line,return line
"convert _serializers into a list, return it.","convert var0 into list, return it.",return list ( _serializers ),return list ( var0 )
"only if app_configs is None ot model._meta.app_config is contained in app_configs, error is a list containing all the previous elements.   chain all errors elements into a list, return it.","only if var0 is var5 var6 model._meta var1 is contained in var0 error is list containing all previous elements var8 chain all errors elements into list, return it.",return list ( chain ( * errors ) ),return list ( chain ( * errors ) )
return first element of the list containing elements of error.,return first element of list containing elements of error.,return list ( error ) [ 0 ],return list ( error ) [ 0 ]
"append to a list elements of the iterator self, return the resulting list.","append to list elements of var0 self, return resulting list.",return list ( iter ( self ) ),return list ( iter ( self ) )
"reverse the order of modules elements, put them into a list, return it.","reverse order of modules elements, put var0 into list, return it.",return list ( reversed ( modules ) ),return list ( reversed ( modules ) )
"convert result of the method self.__iter__ into a list, return element at the idx index.","convert result of method var0 into list, return element at var1 index.",return list ( self . __iter__ ( ) ) [ idx ],return list ( self . __iter__ ( ) ) [ var1 ]
"call the method self.iteritems, return the list of results.",call method var0 return list of results.,return list ( self . iteritems ( ) ),return list ( self . iteritems ( ) )
"call the method self.iteritems, return list of results.",call method var0 return list of results.,return list ( self . iteritems ( ) ),return list ( self . iteritems ( ) )
"call the method self.iterkeys, return the list of results.",call method var0 return list of results.,return list ( self . iterkeys ( ) ),return list ( self . iterkeys ( ) )
"call the method self.iterlists, return list of results.",call method var0 return list of results.,return list ( self . iterlists ( ) ),return list ( self . iterlists ( ) )
"call the method self.itervalues, return the list of results.",call method var0 return list of results.,return list ( self . itervalues ( ) ),return list ( self . itervalues ( ) )
"call the method self.itervalues, return list of results.",call method var0 return list of results.,return list ( self . itervalues ( ) ),return list ( self . itervalues ( ) )
convert self to a list and return it.,convert self to list and return it.,return list ( self ),return list ( self )
"if other is not equal to list containing elements of self, return boolean True, otherwise return boolean False.","if other is not equal to list containing elements of self, return boolean var0 otherwise return boolean var1 ",return list ( self ) != other,return list ( self ) != other
"if other equals list containing elements of self, return boolean True, otherwise return boolean False.","if other equals list containing elements of self, return boolean var0 otherwise return boolean var1 ",return list ( self ) == other,return list ( self ) == other
"call the urlsplit with an argument url, convert the result into a list and return it.","call var0 with argument url, convert result into list and return it.",return list ( urlsplit ( url ) ),return list ( var0 ( url ) )
return value converted into a list.,return value converted into list.,return list ( value ),return list ( value )
"call the function flatten_result with an argument result, unpack the resulting list and zip it in the list of tuples, return the result.","call function var0 with argument result, unpack resulting list and zip it in list of var1 return result.",return list ( zip ( * flatten_result ( result ) ) ),return list ( zip ( * var0 ( result ) ) )
return list_ and boolean False.,return var0 and boolean var1 ,"return list_ , False","return var0 , var1"
return last element of list_.,return last element of var0 ,return list_ [ - 1 ],return var0 [ - 1 ]
"return an instance of Literal class, created with an argumen value.","return instance of var0 class, created with var1 value.",return Literal ( value ),return var0 ( value )
"call the method loader.get_template with an argument template, return the result.","call method loader var1 with argument template, return result.",return loader . get_template ( template ),return loader . var1 ( template )
"call the method loader.select_template with an argument template, return the result.","call method loader var1 with argument template, return result.",return loader . select_template ( template ),return loader . var1 ( template )
"return an instance of LoaderOrigin class, created with 4 arguments: display_name, loader, name and dirs.","return instance of var0 class, created with 4 arguments: var1 loader, name and var3 ","return LoaderOrigin ( display_name , loader , name , dirs )","return var0 ( var1 , loader , name , var3 )"
where '%s' is replaced with taglib and e.   return an instance of a LoadNode class.,var0 var1 is replaced with var2 and var3 return instance of var5 class.,return LoadNode ( ),return var5 ( )
convert locale to lowercase and return it.,convert locale to lowercase and return it.,return locale . lower ( ),return locale . lower ( )
"convert fist p elements of locale to lowercase, append '_' to it,","convert fist p elements of locale to lowercase, append var0 to it,",return locale [ : p ] . lower ( ) + '-' + locale [ p + 1 : ] . lower ( ),return locale [ : p ] . lower ( ) + '-' + locale [ p + 1 : ] . lower ( )
"with an argument value evaluates to false, and if 'convert_to_local_time' attribute of value object doesnt exists,   or is it does is boolean True, should_convert is boolean True, otherwise is boolean False.   if should_convert is true, call the function localtime with an argument value and return the result, otherwise return value.","with argument value evaluates to false, and if var0 attribute of value object doesnt exists var1 or is it does is boolean var3 var5 is boolean var3 otherwise is boolean var9 if var5 is true, call function var10 with argument value and return result, otherwise return value.",return localtime ( value ) if should_convert else value,return var10 ( value ) if var5 else value
return lookup_view.,return var0 ,return lookup_view,return var0
return lookup_view,return var0,return lookup_view,return var0
"sum m and class Media created with definition, return the result.","sum m and class var0 created with definition, return result.",return m + Media ( definition ),return m + var0 ( definition )
return the evaluated result of the mail.send method.,return evaluated result of var0 method.,return mail . send ( ),return var0 ( )
return major.,return major.,return major,return major
"call the function make_middleware_decorator with an argument middleware_class, return the result.",call function var0 with argument var1 return result.,return make_middleware_decorator ( middleware_class ),return var0 ( var1 )
"call the function make_middleware_decorator with an argument middleware_class, call the result, return the new result.","call function var0 with argument var1 call result, return new result.",return make_middleware_decorator ( middleware_class ) ( ),return var0 ( var1 ) ( )
"map elements of self._iterator through self.make_bytes function, return the result.","map elements of var0 through self var2 function, return result.","return map ( self . make_bytes , self . _iterator )","return map ( self . var2 , var0 )"
"call the function mark_for_escaping with an argument value, return the result.","call function var0 with argument value, return result.",return mark_for_escaping ( value ),return var0 ( value )
"call the function _helper with an argument value, use it as an argument for the call to the function mark_safe, return the result.","call function var0 with argument value, use it as argument for call to function var1 return result.",return mark_safe ( _helper ( value ) ),return var1 ( var0 ( value ) )
"call the function _urlize with 3 arguments: value, nofollow set to boolean True, autoescape set to autoescape,",call function var0 with 3 arguments: value var1 set to boolean var2 var3 set to var3 ,"return mark_safe ( _urlize ( value , nofollow = True , autoescape = autoescape ) )","return mark_safe ( var0 ( value , var1 = var2 , var3 = var3 ) )"
"call the function _urlize with 4 arguments: value, trim_url_limit as limit converted into an integer, nofollow as boolean True,",call function var0 with 4 arguments: value var1 as limit converted into integer var3 as boolean var4 ,"return mark_safe ( _urlize ( value , trim_url_limit = int ( limit ) , nofollow = True , autoescape = autoescape ) )","return mark_safe ( var0 ( value , var1 = int ( limit ) , var3 = var4 , autoescape = autoescape ) )"
"call the function mark_safe with an argument, elements of bits joined into a string, return the result.","call function var0 with argument, elements of bits joined into string, return result.",return mark_safe ( '' . join ( bits ) ),return var0 ( '' . join ( bits ) )
"call the function mark_safe with an arguments: for every n in nodelist results of the function force_text called with an argument n,  joined in a string, return the result.","call function var1 with arguments: for every n in var2 results of function var3 called with argument n var0 joined in string, return result.",return mark_safe ( '' . join ( force_text ( n ) for n in nodelist ) ),return var1 ( '' . join ( var3 ( n ) for n in var2 ) )
"join return value of the function six.text_type called with an argument self.management_form and forms into a string,","join return value of function six var1 called with argument self var3 and forms into string,","return mark_safe ( '\n' . join ( [ six . text_type ( self . management_form ) , forms ] ) )","return mark_safe ( '\n' . join ( [ six . var1 ( self . var3 ) , forms ] ) )"
"call the function chain with an argument unpacked list, append name to string 'render_',","call function chain with argument unpacked list, append name to string var0,","return mark_safe ( '\n' . join ( chain ( * [ getattr ( self , 'render_' + name ) ( ) for name in MEDIA_TYPES ] ) ) )","return mark_safe ( '\n' . join ( chain ( * [ getattr ( self , var0 + name ) ( ) for name in MEDIA_TYPES ] ) ) )"
"input_attrs, append the result to inputs list.   join inputs elements into a string, separated with newline character, use it as an argument for the call to the function mark_safe,","var0, append result to inputs list var1 join inputs elements into string, separated with var2 character, use it as argument for call to function var3 ",return mark_safe ( '\n' . join ( inputs ) ),return var3 ( '\n' . join ( inputs ) )
"and result of the function escape called with an argument line, substitute the result for i-th element of lines.   call the method mark_safe with lines joined into a string, separated by newlines as argument, return the result.","and result of function escape called with argument line, substitute result for i-th element of lines var0 call method var1 with lines joined into string, separated by var2 as argument, return result.",return mark_safe ( '\n' . join ( lines ) ),return var1 ( '\n' . join ( lines ) )
"join output into a string, separated by newline characters, use it as an argument for the call to the mark_safe, return the result.","join output into string, separated by var0 characters, use it as argument for call to var1 return result.",return mark_safe ( '\n' . join ( output ) ),return var1 ( '\n' . join ( output ) )
"join elements of output into a string with newline as separator, use it as an argument for the call to the function mark_safe, return it.","join elements of output into string with var0 as separator, use it as argument for call to function var1 return it.",return mark_safe ( '\n' . join ( output ) ),return var1 ( '\n' . join ( output ) )
"join elements of output into a string, separated by newline characters, use it as the argument for the call the function mark_safe,","join elements of output into string, separated by var0 characters, use it as argument for call function var1 ",return mark_safe ( '\n' . join ( output ) ),return var1 ( '\n' . join ( output ) )
"join elements of output into a string, separated with newline character,","join elements of output into string, separated with var0 character,",return mark_safe ( '\n' . join ( output ) ),return mark_safe ( '\n' . join ( output ) )
"join results of format_html called with 2 arguments: format_string and tuple with an element args, into a string,","join results of var0 called with 2 arguments: var1 and tuple with element var3 into string,","return mark_safe ( conditional_escape ( sep ) . join ( format_html ( format_string , * tuple ( args ) ) for args in args_generator ) )","return mark_safe ( conditional_escape ( sep ) . join ( var0 ( var1 , * tuple ( var3 ) ) for var3 in var3_generator ) )"
"call the function mark_safe with an argument contents, return the result.","call function var0 with argument contents, return result.",return mark_safe ( contents ),return var0 ( contents )
"call the function mark_safe with an argument data, return the result.","call function var0 with argument data, return result.",return mark_safe ( data ),return var0 ( data )
"call the function force_text with an argument text, replace every occurrence of '&' in the result with '&amp;',","call function var0 with argument text, replace every occurrence of var2 in result with var3,","return mark_safe ( force_text ( text ) . replace ( '&' , '&amp;' ) . replace ( '<' , '&lt;' ) . replace ( '>' , '&gt;' ) . replace ( ''' , '&quot;' ) . replace ( ''' , '&#39;' ) )","return mark_safe(var0(text).replace(var2, '&amp;').replace('<', '&lt;').    replace('>', '&gt;').replace(', '&quot;').replace(', '&#39;'))"
"call the function force_text with an argument value, call the method translate on the result, with an argument _js_escapes,","call function var0 with argument value, call method translate on result, with argument var1 ",return mark_safe ( force_text ( value ) . translate ( _js_escapes ) ),return mark_safe ( var0 ( value ) . translate ( var1 ) )
"with value result of the conditional_escape function called with an argument v for key k.   call the method format_string.format with 2 arguments: unpacked list args_safe and unpacked dictionary kwargs_safe,",with value result of var0 function called with argument v for key var1 call method var3 format with 2 arguments: unpacked list var4 and unpacked dict var6 ,"return mark_safe ( format_string . format ( * args_safe , ** kwargs_safe ) )","return mark_safe ( var3 . format ( * var4 , ** var6 ) )"
"call the method formats.number_format with 2 arguments, d converted to a integer and then to string, and integer 0,","call method formats var1 with 2 arguments, d converted to integer and then to string, and integer 0,","return mark_safe ( formats . number_format ( '%d' % ( int ( d ) ) , 0 ) )","return mark_safe ( formats . var1 ( '%d' % int ( d ) , 0 ) )"
"call the method formats.number_format with 2 arguments: number and absolute value of p,","call method formats var1 with 2 arguments: number and absolute value of p,","return mark_safe ( formats . number_format ( number , abs ( p ) ) )","return mark_safe ( formats . var1 ( number , abs ( p ) ) )"
"call the function func with 2 arguments: unpacked list args and unpacked dictionary kwargs,",call function var0 with 2 arguments: unpacked list var1 and unpacked dict var2 ,"return mark_safe ( func ( * args , ** kwargs ) )","return mark_safe ( var0 ( * var1 , ** var2 ) )"
"call the function linebreaks with 2 arguments value and autoescape, use the result as an argument for the call to the mark_safe,",call function var0 with 2 arguments value and var1 use result as argument for call to var2 ,"return mark_safe ( linebreaks ( value , autoescape ) )","return var2 ( var0 ( value , var1 ) )"
"call the function mark_safe with an argument message, return the result.","call function var0 with argument message, return result.",return mark_safe ( message ),return var0 ( message )
call the function mark_safe with an argument output.,call function var0 with argument output.,return mark_safe ( output ),return var0 ( output )
"and convert it to lowercase, substitute the result for value.   call the function re.sub with 3 arguments: string '[-\s]+', string '-' and value, use the result as an argument for the call to the,","and convert it to lowercase, substitute the result for value.   call the function re.sub with 3 arguments: string '[-\s]+', string '-' and value, use the result as an argument for the call to the,","return mark_safe ( re . sub ( '[-\s]+' , '-' , value ) )","return mark_safe ( re . sub ( '[-\s]+' , '-' , value ) )"
"call the function mark_safe with an argument result, return it.","call function var0 with argument result, return it.",return mark_safe ( result ),return var0 ( result )
"and final_attrs, append the result to output.   call the method self.format_output with an argument output, use the result as an argument for the call to the function mark_safe,","and var0 append result to output var1 call method self var3 with argument output, use result as argument for call to function var4 ",return mark_safe ( self . format_output ( output ) ),return var4 ( self . var3 ( output ) )
"under the BLOCK_CONTEXT_KEY key of render_context dictionary dictionary evaluates to be not equal to None,   call the method self.render with an argument self.context, use it as an argument for the call to the mark_safe function, return the result.","under var0 key of var1 dict dict evaluates to be not equal to var3 call method var5 with argument var6 use it as argument for call to var7 function, return result.",return mark_safe ( self . render ( self . context ) ),return var7 ( self . render ( var6 ) )
"call the function six.text_type with an argument number, use the result as an argument for the call to the function mark_safe,","call function six var0 with argument number, use result as argument for call to function var1 ",return mark_safe ( six . text_type ( number ) ),return var1 ( six . var0 ( number ) )
"call the function six.text_type with an argument value, use the result as an argument for the call to the function mark_safe,","call function six var0 with argument value, use result as argument for call to function var1 ",return mark_safe ( six . text_type ( value ) ),return var1 ( six . var0 ( value ) )
"substitutions dictionary.   call the function mark_safe with an argument template, formated with substitutions, return the result.","substitutions dict var0 call function var1 with argument template, formated with substitutions, return result.",return mark_safe ( template % substitutions ),return var1 ( template % substitutions )
"replace every occurrence of newline character in value with string '<br />', use it as an argument for the call to the mark_safe,","replace every occurrence of var0 character in value with string var1, use it as argument for call to var2 ","return mark_safe ( value . replace ( '\n' , '<br />' ) )","return var2 ( value . replace ( '\n' , var1 ) )"
"call the function mark_safe with an argument value, return the result.","call function var0 with argument value, return result.",return mark_safe ( value ),return var0 ( value )
return the value of masked temp,return value of masked temp,return mask ( temp ),return mask ( temp )
"call the method match.group with an argument integer 0, return the result.","call method var0 with argument integer 0, return result.",return match . group ( 0 ),return var0 ( 0 )
return maybe.,return maybe.,return maybe,return maybe
return media.,return media.,return media,return media
"return an instance of the class Media, called with an unpacked dictionary with an entry: name appended to string '_',","return instance of class var0 called with unpacked dict with entry: name appended to string var1,","return Media ( ** { str ( name ) : getattr ( self , '_' + name ) } )","return var0 ( ** { str ( name ) : getattr ( self , var1 + name ) } )"
"return an instance of Media class, created with definition as an argument.","return instance of var0 class, created with definition as argument.",return Media ( definition ),return var0 ( definition )
return message.,return message.,return message,return message
"call the function meta with 3 arguments: name, base and d.","call function var0 with 3 arguments: name, base and var1","return meta ( name , bases , d )","return var0 ( name , bases , d )"
"return an instance of metaclass class, created with 3 arguments: string 'temporary_class', None and an empty dictionary.","return instance of var0 class, created with 3 arguments: string var1 var2 and empty dict.","return metaclass ( 'temporary_class' , None , { } )","return var0 ( var1 , var2 , { } )"
"return an instance of metaclass class, created with 3 arguments: cls.__name__, cls.__bases__ and orig_vars.","return instance of var0 class, created with 3 arguments: var1 var2 and var3 ","return metaclass ( cls . __name__ , cls . __bases__ , orig_vars )","return var0 ( var1 , var2 , var3 )"
"call the method middleware.process_response with 2 arguments: request and response, return the result.","call method middleware var1 with 2 arguments: request and response, return result.","return middleware . process_response ( request , response )","return middleware . var1 ( request , response )"
"get the element with minimal value between the value under the TOTAL_FORM_COUNT key of self.management_form.cleaned_data dictionary,","get element with minimal value between value under var0 key of self var1 var2 dict,","return min ( self . management_form . cleaned_data [ TOTAL_FORM_COUNT ] , self . absolute_max )","return min ( self . var1 . var2 [ var0 ] , self . absolute_max )"
return mod.register.,return var0 ,return mod . register,return var0
return model_list.,return var0 ,return model_list,return var0
"return an instance of ModelChoiceIterator class, created with an argument self.","return instance of var0 class, created with argument self.",return ModelChoiceIterator ( self ),return var0 ( self )
"import_module function, substitute the result for module.   return an instance of the module.Command class.","var0 function, substitute result for module var1 return instance of module var2 class.",return module . Command ( ),return module . var2 ( )
return modules.s,return var0,return modules,return modules
return the value under the self.data.month key of the MONTHS dictionary.,return value under var0 key of var1 dict.,return MONTHS [ self . data . month ],return var1 [ var0 ]
return the value under the self.data.month key of the MONTHS_3 dictionary.,return value under var0 key of var1 dict.,return MONTHS_3 [ self . data . month ],return var1 [ var0 ]
"get the value under the self.data.month key of the MONTHS_3 dictionary, call on it the method title, return the result.","get value under var0 key of var1 dict, call on it method title, return result.",return MONTHS_3 [ self . data . month ] . title ( ),return var1 [ var0 ] . title ( )
return the value under the self.data.month key of the MONTHS_ALT dictionary.,return value under var0 key of var1 dict.,return MONTHS_ALT [ self . data . month ],return var1 [ var0 ]
return the value under the self.data.month key of the MONTHS_AP dictionary.,return value under var0 key of var1 dict.,return MONTHS_AP [ self . data . month ],return var1 [ var0 ]
return msg.,return msg.,return msg,return msg
return msg_count.,return var0 ,return msg_count,return var0
return msgid.,return var0 ,return msgid,return var0
return name and tuple containing 2 elements value and params.,return name and tuple containing 2 elements value and var0 ,"return name , ( value , params )","return name , ( value , var0 )"
"return name, ser_fmt and cmp_fmt.",return name var0 and var1 ,"return name , ser_fmt , cmp_fmt","return name , var0 , var1"
"replace all the occurrences of character '_' in name with a whitespace, capitalize the first letter and return the result.",replace all occurrences of character var0 in name with var1 capitalize first letter and return result.,"return name . replace ( '_' , ' ' ) . capitalize ( )","return name . replace ( var0 , ' ' ) . capitalize ( )"
"concatenate name and string '_id', return it.","concatenate name and string var0, return it.",return name + '_id',return name + var0
"concatenate name and string '-clear', return it.","concatenate name and string var0, return it.",return name + '-clear',return name + var0
return neg and res.,return var0 and res.,"return neg , res","return var0 , res"
return new_class.,return var0 ,return new_class,return var0
return new_context.,return var0 ,return new_context,return var0
return new_key.,return var0 ,return new_key,return var0
"return new_name, field_params and field_notes.",return var0 var1 and var3 ,"return new_name , field_params , field_notes","return var0 , var1 , var3"
return new_value.,return var0 ,return new_value,return var0
code set to an string 'invalid_choice' and dictionary params with an entry: choice for 'value'.   return new_value.,code set to string var0 and dict var1 with entry: choice for var2 var3 return var4 ,return new_value,return var4
return no.,return no.,return no,return no
return node.,return node.,return node,return node
"call the method node.render with an argument context, return the result.","call method var0 with argument context, return result.",return node . render ( context ),return var0 ( context )
"substitute the result for args and kwargs, respectively.   call the function node_class with 3 arguments: takes_context, args and kwargs.",substitute result for var0 and var2 respectively var4 call function var5 with 3 arguments: var6 var0 and var2 ,"return node_class ( takes_context , args , kwargs )","return var5 ( var6 , var0 , var2 )"
return nodelist.,return var0 ,return nodelist,return var0
"call the method nodelist.render with an argument context, return the result.","call method var0 with argument context, return result.",return nodelist . render ( context ),return var0 ( context )
return an instance of NodeList class.,return instance of var0 class.,return NodeList ( ),return var0 ( )
"return an instance of a NodeList class, created with arguments node, for every node in nodelist,","return instance of var0 class, created with arguments node, for every node in var1 ","return NodeList ( node for _ , nodelist in self . conditions_nodelists for node in nodelist )","return var0 ( node for _ , var1 in self . conditions_nodelists for node in var1 )"
"return nodelist_true_output, if true, if not call the method self.nodelist_true.render with an argument context and return the result.","return var0 if true, if not call method self var1 render with argument context and return result.",return nodelist_true_output or self . nodelist_true . render ( context ),return var0 or self . var1 . render ( context )
return nodes.,return nodes.,return nodes,return nodes
return None.,return var0 ,return None,return var0
"doesn't support that type of template loading. Consider removing that line from TEMPLATE_LOADERS."",   where '%r' is replaced with loader.   return None.",doesnvar1%r' is replaced with loader. return var3 ,return None,return var3
"if timeouts is None return None, otherwise return the sum of function time.time return value and timeout.",if var0 is var2 return var2 otherwise return sum of function var4 return value and var1 ,return None if timeout is None else time . time ( ) + timeout,return var2 if var1 is var2 else var4 ( ) + var1
"call the function normpath with an argument path, return the result.","call function var0 with argument path, return result.",return normpath ( path ),return var0 ( path )
"evaluate next boolean expression, value of converter function with opts.db_table as argument is contained in tables,","evaluate next boolean expression, value of converter function with opts var1 as argument is contained in tables,",return not ( ( converter ( opts . db_table ) in tables ) or ( opts . auto_created and converter ( opts . auto_created . _meta . db_table ) in tables ) ),return not ( converter ( opts . var1 ) in tables or opts . auto_created and converter ( opts . auto_created . _meta . var1 ) in tables )
"if self equals to other return boolean False, otherwise return True.",if self equals to other return boolean var0 otherwise return var1 ,return not ( self == other ),return not self == other
"if self equals to other return boolean False, otherwise return boolean True.",if self equals to other return boolean var0 otherwise return boolean var1 ,return not ( self == other ),return not self == other
"if v is boolean False or v is None or v is an empty string, return boolean False, otherwise return boolean True.","if v is boolean var0 or v is var2 or v is empty string, return boolean var0 otherwise return boolean var3 ",return not ( v is False or v is None or v == '' ),return not ( v is var0 or v is var2 or v == '' )
"convert self.option_list into a boolean, return the inverted value.","convert self var1 into boolean, return inverted value.",return not bool ( self . option_list ),return not bool ( self . var1 )
"call the function module_has_submodule with 2 arguments: package and module, return inverted boolean result.","call function var0 with 2 arguments: package and module, return inverted boolean result.","return not module_has_submodule ( package , module )","return not var0 ( package , module )"
"call the method self._is_expired with argument f, invert the boolean result and return it.","call method var0 with argument f, invert boolean result and return it.",return not self . _is_expired ( f ),return not var0 ( f )
"if self.file is false or self.file.closed is true, return boolean true, otherwise return boolean false.","if var0 is false or var0 closed is true, return boolean true, otherwise return boolean false.",return not self . file or self . file . closed,return not var0 or var0 . closed
"if settings.DEBUG is true, return boolean False, otherwise return boolean True.","if settings var0 is true, return boolean var1 otherwise return boolean var2 ",return not settings . DEBUG,return not settings . var0
"return an instance of a NowNode class, created with an argument format_string.","return instance of var0 class, created with argument var1 ",return NowNode ( format_string ),return var0 ( var1 )
return num_sent.,return var0 ,return num_sent,return var0
return number.,return number.,return number,return number
"call the function number_format with 2 arguments: value and use_l10 as use_l10n, return the result.",call function var0 with 2 arguments: value and var1 as var3 return result.,"return number_format ( value , use_l10n = use_l10n )","return var0 ( value , var1n = var1n )"
"call the function number_format with an argument value, return the result.","call function var0 with argument value, return result.",return number_format ( value ),return var0 ( value )
"call the method numberformat.format with 6 arguments: value, result of the function get_format called with 3 arguments:","call method var0 with 6 arguments: value, result of function var1 called with 3 arguments:","return numberformat . format ( value , get_format ( 'DECIMAL_SEPARATOR' , lang , use_l10n = use_l10n ) , decimal_pos , get_format ( 'NUMBER_GROUPING' , lang , use_l10n = use_l10n ) , get_format ( 'THOUSAND_SEPARATOR' , lang , use_l10n = use_l10n ) , force_grouping = force_grouping )","return var0 ( value , var1 ( 'DECIMAL_SEPARATOR' , lang , use_l10n = use_l10n ) , decimal_pos , var1 ( 'NUMBER_GROUPING' , lang , use_l10n = use_l10n ) , var1 ( 'THOUSAND_SEPARATOR' , lang , use_l10n = use_l10n ) , force_grouping = force_grouping )"
"call the method o.isoformat, return the result.",call method var0 return result.,return o . isoformat ( ),return var0 ( )
return obj.,return var0 ,return obj,return var0
return obj_dict.,return var0 ,return obj_dict,return var0
"self.getlist with an argument k, for every k in self.   return obj_dict.","var0 with argument k, for every k in self var1 return var2 ",return obj_dict,return var2
"with field_value as an argument, substitute the result for obj_pk.   return obj_pk.","with var0 as argument, substitute result for var1 return var1 ",return obj_pk,return var1
return obj_pk.,return var0 ,return obj_pk,return var0
"multiply offset.days with 86400, add offset.seconds to the result, return the result.","multiply var0 with 86400, add var1 to result, return result.",return offset . days * 86400 + offset . seconds,return var0 * 86400 + var1
"call the function op, return the result.",call function var0 return result.,return op ( ),return var0 ( )
return Operator.,return var0 ,return Operator,return var0
"get the integer representation of the first element of bs, return it.","get integer representation of first element of bs, return it.",return ord ( bs [ 0 ] ),return ord ( bs [ 0 ] )
"get the integer representation of the i-th element of buf, return it.",get integer representation of i-th element of var0 return it.,return ord ( buf [ i ] ),return ord ( var0 [ i ] )
"return an instance of OrderedDict class, created with an argument fields.","return instance of var0 class, created with argument fields.",return OrderedDict ( fields ),return var0 ( fields )
"call the function original_urlencode with 2 arguments: list with 2 elements: result of the function force_str with an argument k,","call function var0 with 2 arguments: list with 2 elements: result of function var1 with argument k,","return original_urlencode ( [ ( force_str ( k ) , [ force_str ( i ) for i in v ] if isinstance ( v , ( list , tuple ) ) else force_str ( v ) ) for k , v in query ] , doseq )","return var0 ( [ ( var1 ( k ) , [ var1 ( i ) for i in v ] if isinstance ( v , ( list , tuple ) ) else var1 ( v ) ) for k , v in query ] , doseq )"
"call the self.path function with argument name, use the result as the argument for the call to the os.path.exists function, return the result.","call var0 function with argument name, use result as argument for call to os.path.exists function, return result.",return os . path . exists ( self . path ( name ) ),return os . path . exists ( self . path ( name ) )
"call the os.path.getsize function with argument self.file.name, return the result.",call var0 function with argument var1 return result.,return os . path . getsize ( self . file . name ),return var0 ( var1 )
"call the self.path with argument name, use the result as an argument for the call to the os.path.getsize function, return the result.","call var0 with argument name, use result as argument for call to var1 function, return result.",return os . path . getsize ( self . path ( name ) ),return var1 ( self . path ( name ) )
"join into a string: md5 hash sum of force_bytes(key) and self.cache_suffix, compose root file path out of self._dir and previous result, return it.","join into a string: md5 hash sum of force_bytes(key) and self.cache_suffix, compose root file path out of self._dir and previous result, return it.","return os . path . join ( self . _dir , '' . join ( [ hashlib . md5 ( force_bytes ( key ) ) . hexdigest ( ) , self . cache_suffix ] ) )","return os . path . join ( self . _dir , '' . join ( [ hashlib . md5 ( force_bytes ( key ) ) . hexdigest ( ) , self . cache_suffix ] ) )"
"join self.dirpath and self.file into a file path, return it.","join var0 and var1 into file path, return it.","return os . path . join ( self . dirpath , self . file )","return os . path . join ( var0 , var1 )"
"call the os.path.normpath with argument path, return the result.","call var0 with argument path, return result.",return os . path . normpath ( path ),return var0 ( path )
"call the os.path.samefile with arguments src and dst, return the result.",call os.path.samefile with arguments var0 and var1 return result.,"return os . path . samefile ( src , dst )","return os . path . samefile ( var0 , var1 )"
"if other is contained in self.children, return boolean True, otherwise return boolean False.",if other is contained in var0 return boolean var1 otherwise return boolean var2 ,return other in self . children,return other in var0
return other_dict.,return var0 ,return other_dict,return var0
return otherwise.,return otherwise.,return otherwise,return otherwise
return out.,return out.,return out,return out
"call the method out.getvalue, return the result.",call method var0 return result.,return out . getvalue ( ),return var0 ( )
return output.,return output.,return output,return output
"and _allow_fallback set to boolean True, extend the output with the result.   return output.",and _allow_fallback set to boolean var0 extend output with result var1 return output.,return output,return output
return reversed list output.,return reversed list output.,return output [ : : - 1 ],return output [ : : - 1 ]
return size of the image that was fed to the parser p.,return size of image var0 was fed to parser var1,return p . image . size,return var1image . size
"return a instance of the class Page, created with 2 arguments: unpacked list args and unpacked dictionary kwargs.",return instance of class var0 created with 2 arguments: unpacked list var1 and unpacked dict var2 ,"return Page ( * args , ** kwargs )","return var0 ( * var1 , ** var2 )"
return palette.,return palette.,return palette,return palette
return value under the DEFAULT_PALETTE key of the PALETTES dictionary.,return value under var0 key of var1 dict.,return PALETTES [ DEFAULT_PALETTE ],return var1 [ var0 ]
return parent.,return parent.,return parent,return parent
"call the function parse_http_date with an argument date, return the result.","call function var0 with argument date, return result.",return parse_http_date ( date ),return var0 ( date )
return parser,return parser,return parser,return parser
"get the index name, of the parser._namedCycleNodes, return the result.","get index name, of var0 return result.",return parser . _namedCycleNodes [ name ],return var0 [ name ]
"call the method parser.parse, return the result.",call method var0 return result.,return parser . parse ( ),return var0 ( )
"return path,","return path,",return path,return path
return path.,return path.,return path,return path
return path an an empty string.,return path an empty string.,"return path , ''","return path , ''"
"call the method path.decode with an argument fs_encoding, return the result.",call method var0 with argument var1 return result.,return path . decode ( fs_encoding ),return var0 ( var1 )
"call the method path.encode with an argument fs_encoding, return the result.",call method var0 with argument var1 return result.,return path . encode ( fs_encoding ),return var0 ( var1 )
"join first element of django.__path__, string 'conf' and subdir into a valid file path, return it.","join first element of var0 string var1 and var2 into valid file path, return it.","return path . join ( django . __path__ [ 0 ] , 'conf' , subdir )","return path . join ( var0 [ 0 ] , var1 , var2 )"
"index of the first occurrence of '\\' in path, or alternatively if '\\' is not contained in path,   split path in two parts by '/' character, return the result.","index of first occurrence of var0 in path, or alternatively if var0 is not contained in path var2 split path in two parts by var3 character, return result.","return path . split ( '/' , 1 )","return path . split ( var3 , 1 )"
"split path in two parts by '\\' string, return the result.","split path in two parts by var0 string, return result.","return path . split ( '\\' , 1 )","return path . split ( '\\' , 1 )"
return path_info.decode method return value called with UTF_8 as the argument.,return var0 decode method return value called with var1 as argument.,return path_info . decode ( UTF_8 ),return var0 . decode ( var1 )
return patterns.,return patterns.,return patterns,return patterns
"call the function pformat with an argument value, return the result.","call function var0 with argument value, return result.",return pformat ( value ),return var0 ( value )
"call the function pgettext_lazy with an argument self.message_context and value, return the result.","call function var0 with argument self var2 and value, return result.","return pgettext_lazy ( self . message_context , value )","return var0 ( self . var2 , value )"
"call the function phone2numeric with an argument value, return the result.","call function var0 with argument value, return result.",return phone2numeric ( value ),return var0 ( value )
"call the function force_bytes with argument value, use the result as an argument for the call to the method base64.b64decode,","call function var0 with argument value, use result as argument for call to method var1 ",return pickle . loads ( base64 . b64decode ( force_bytes ( value ) ) ),return pickle . loads ( base64 . b64decode ( var0 ( value ) ) )
"evaluate pickle.loads with argument pickled, return the result.","evaluate var0 with argument pickled, return result.",return pickle . loads ( pickled ),return var0 ( pickled )
"call f.read function, use the result as the argument for zlib.decompress function call, call the pickle.loads function with the previous result as argument, return the result.","call var0 function, use result as argument for var1 function call, call var2 function with previous result as argument, return result.",return pickle . loads ( zlib . decompress ( f . read ( ) ) ),return var2 ( zlib . decompress ( f . read ( ) ) )
return plist.,return var0 ,return plist,return var0
return plural.,return plural.,return plural,return plural
return plural_suffix.,return var0 ,return plural_suffix,return var0
return potfiles.,return var0 ,return potfiles,return var0
return property object with _media as getter function.,return property object with var0 as var1 function.,return property ( _media ),return property ( var0 )
"return an property object with getter function fget, setter function fset, destructor fdel and documentation string doc.",return property object with var0 function var1 setter function var2 var3 var4 and documentation string doc.,"return property ( fget , fset , fdel , doc )","return property ( var1 , var2 , var4 , doc )"
return proxy.,return proxy.,return proxy,return proxy
return qs.,return qs.,return qs,return qs
"instantiate QueryDict class with 2 arguments: an empty string and encoding set to self._encoding, instantiate a class MultiValueDict, return them.",instantiate var0 class with 2 arguments: empty string and encoding set to var1 instantiate class var2 return var4 ,"return QueryDict ( '' , encoding = self . _encoding ) , MultiValueDict ( )","return var0 ( '' , encoding = var1 ) , var2 ( )"
"call the function quote with return value of the evaluated function force_bytes(iri),","call the function quote with return value of the evaluated function force_bytes(iri),","return quote ( force_bytes ( iri ) , safe = b'/#%[]=:;$&()+,!?*@'~' )","return quote ( force_bytes ( iri ) , safe = b'/#%[]=:;$&()+,!?*@'~' )"
"evaluate function force_bytes with path as the argument, replace all of the occurancies of the ""\\"" with ""/"" in the resulting string,","evaluate function var0 with path as argument, replace all of var2 of var3 with var4 in resulting string,","return quote ( force_bytes ( path ) . replace ( b'\\' , b'/' ) , safe = b'/~!*()'' )","return quote(force_bytes(path).replace(b'\\', b'/'), safe = b'/~!*()'')"
return r.,return var0,return r,return r
"return an raw string '\""'.",return raw string var0.,return r'\'',return '\\''
"call the function random_module.choice with an argument value, return the result.","call function var0 choice with argument value, return result.",return random_module . choice ( value ),return var0 . choice ( value )
return all the integers from the integer 1 to the self.num_pages.,return all integers from integer 1 to self var1 ,"return range ( 1 , self . num_pages + 1 )","return range ( 1 , self . var1 + 1 )"
return raw_data.,return var0 ,return raw_data,return var0
"result of the m.group method called with an argument integer 0 converted into lowercase and result of the method value.title,   substitute the result for t.   call the function re.sub with 3 arguments: string ""\d([A-Z])"", lambda function with an argument m and return value,","result of var0 method called with argument integer 0 converted into lowercase and result of method var1 substitute result for t var2 call function var5 with 3 arguments: string var6, lambda function with argument m and return value,","return re . sub ( '\d([A-Z])' , lambda m : m . group ( 0 ) . lower ( ) , t )","return var5 ( '\\d([var7])' , lambda m : var0 ( 0 ) . lower ( ) , t )"
"replace every occurrence of whitespaces in the previous result for '_', substitute the result for s.   call the function re.sub with 3 arguments: raw string '(?u)[^-\w.]', an empty string and s, return the result.","replace every occurrence of whitespaces in the previous result for '_', substitute the result for s.   call the function re.sub with 3 arguments: raw string '(?u)[^-\w.]', an empty string and s, return the result.","return re . sub ( r'(?u)[^-\w.]' , '' , s )","return re . sub ( r'(?u)[^-\w.]' , '' , s )"
"call the method re.sub with 3 arguments: raw string '&(?:\w+|#\d+);', empty string and result of the function force_text,","call method var0 with 3 arguments: raw string var1, empty string and result of function var2 ","return re . sub ( r'&(?:\w+|#\d+);' , '' , force_text ( value ) )","return var0 ( '&(?:\\w+|#\\d+);' , '' , var2 ( value ) )"
"call the method re.sub with 3 arguments: raw string '>\s+<', string '><' and result of the function force_text,","call method var0 with 3 arguments: raw string var1, string var2 and result of function var3 ","return re . sub ( r'>\s+<' , '><' , force_text ( value ) )","return var0 ( '>\\s+<' , '><' , var3 ( value ) )"
"call the method re_camel_case.sub with 2 arguments: raw string ' \1' and value, strip the result of whitespaces from both ends,","call the method re_camel_case.sub with 2 arguments: raw string ' \1' and value, strip the result of whitespaces from both ends,","return re_camel_case . sub ( r' \1' , value ) . strip ( ) . lower ( )","return re_camel_case . sub ( r' \1' , value ) . strip ( ) . lower ( )"
"call the method re_newlines.sub with 2 arguments: '\n' and text, return the result.","call method var0 sub with 2 arguments: var2 and text, return result.","return re_newlines . sub ( '\n' , text )","return var0 . sub ( '\n' , text )"
"call the operator.add on the values of the self object converted into a dictionary, until it is reduced to a single value, return it.","call var0 on values of self object converted into dict var1 it is reduced to single value, return it.","return reduce ( operator . add , dict ( self ) . values ( ) )","return reduce ( var0 , dict ( self ) . values ( ) )"
return an instance of a class RegexURLResolver created with arguments: raw string '^/' and a list containing an element ns_resolver.,return instance of class var0 created with arguments: raw string '^/' and list containing element var3 ,"return RegexURLResolver ( r'^/' , [ ns_resolver ] )","return var0 ( '^/' , [ var3 ] )"
return an instance of a class RegexURLResolver created with arguments: raw string '^/' and urlconf.,return instance of class var0 created with arguments: raw string '^/' and var3 ,"return RegexURLResolver ( r'^/' , urlconf )","return var0 ( '^/' , var3 )"
"parser.compile_filter, substitute the result for expression.   return an instance of a RegroupNode class, created with 3 arguments target, expression and var_name.","parser var1 substitute result for expression var2 return instance of var3 class, created with 3 arguments target, expression and var4 ","return RegroupNode ( target , expression , var_name )","return var3 ( target , expression , var4 )"
"instantiate RelatedObject class with 3 arguments: cls.fk.rel.to, cls.model and cls.fk,",instantiate var0 class with 3 arguments: var1 var3 and var2 ,"return RelatedObject ( cls . fk . rel . to , cls . model , cls . fk ) . get_accessor_name ( ) . replace ( '+' , '' )","return var0 ( var1 , var3 , var2 ) . get_accessor_name ( ) . replace ( '+' , '' )"
"call the function remove_tags with 2 arguments value and tags, return the result.","call function var0 with 2 arguments value and tags, return result.","return remove_tags ( value , tags )","return var0 ( value , tags )"
"call the function render_value_in_context with 2 arguments output and context, return the result.","call function var0 with 2 arguments output and context, return result.","return render_value_in_context ( output , context )","return var0 ( output , context )"
"call the function render_value_in_context with 2 arguments: value and context, return the result.","call function var0 with 2 arguments: value and context, return result.","return render_value_in_context ( value , context )","return var0 ( value , context )"
return replacement.,return replacement.,return replacement,return replacement
return the printable representation of the self object converted to a dictionary.,return printable representation of self object converted to dict.,return repr ( dict ( self ) ),return repr ( dict ( self ) )
return the printable representation of the self object converted to a list.,return printable representation of self object converted to list.,return repr ( list ( self ) ),return repr ( list ( self ) )
"convert elements of self into a list, return the its printable representation.","convert elements of self into list, return its printable representation.",return repr ( list ( self ) ),return repr ( list ( self ) )
return printable representation of self.dicts.,return printable representation of var0 ,return repr ( self . dicts ),return repr ( var0 )
return printable representation of self.value.,return printable representation of var0 ,return repr ( self . value ),return repr ( var0 )
"return an instance of RequestContext class, created with 3 arguments: self._request, context and current_app set to self._current_app.","return instance of var0 class, created with 3 arguments: var1 context and var2 set to var4 ","return RequestContext ( self . _request , context , current_app = self . _current_app )","return var0 ( var1 , context , var2 = var4 )"
return res.,return res.,return res,return res
for every k and v in return value of the method self.kwargs.items.   return resolved_args and resolved_kwargs.,for every k and v in return value of method var0 return var2 and var3 ,"return resolved_args , resolved_kwargs","return var2 , var3"
"return an instance of a ResolverMatch class, crated with arguments self.callback, args, kwargs and self.name.","return instance of var0 class, crated with arguments var1 var2 var3 and var4 ","return ResolverMatch ( self . callback , args , kwargs , self . name )","return var0 ( var1 , var2 , var3 , var4 )"
"return an instance of a class ResolverMatch created with 6 arguments: sub_match.func, sub_match.args, sub_match_dict,",return instance of class var0 created with 6 arguments: var1 func var1 args var5 ,"return ResolverMatch ( sub_match . func , sub_match . args , sub_match_dict , sub_match . url_name , self . app_name or sub_match . app_name , [ self . namespace ] + sub_match . namespaces )","return var0 ( var1 . func , var1 . args , var1_dict , var1 . url_name , self . app_name or var1 . app_name , [ self . namespace ] + var1 . namespaces )"
return response,return response,return response,return response
return response.,return response.,return response,return response
and store it in the value of the dictionary response under the key 'ETag'.   return response,and store it in value of dict response under key var0 var1 return response,return response,return response
return result.,return result.,return result,return result
and return value of the function copy.deepcopy called with 2 arguments: value and memo.   return result.,and return value of function var0 called with 2 arguments: value and memo var1 return result.,return result,return result
"and boolean False, append the result to result.   return result.",and boolean var0 append result to result var1 return result.,return result,return result
return result,return result,return result,return result
"and memo, and result of the function copy.deepcopy called with 2 arguments: value and memo.   return result.","and memo, and result of function var0 called with 2 arguments: value and memo var1 return result.",return result,return result
"return result,","return result,",return result,return result
return result and result_args.,return result and var0 ,"return result , result_args","return result , var0"
convert result to lowercase and return it.,convert result to lowercase and return it.,return result . lower ( ),return result . lower ( )
return first and second element of result.,return first and second element of result.,"return result [ 0 ] , result [ 1 ]","return result [ 0 ] , result [ 1 ]"
"perform bitwise OR with 2 operands: previous result and result, substitute the result for result.   if result is equal to integer 0, return boolean True, otherwise return boolean False.","perform var0 var1 with 2 operands: previous result and result, substitute result for result var2 if result is equal to integer 0, return boolean var3 otherwise return boolean var4 ",return result == 0,return result == 0
return results.,return results.,return results,return results
return ret.,return ret.,return ret,return ret
return retval.,return var0 ,return retval,return var0
where '%s' is replaced with result of the method self.current_token.display.   return retval.,var0 var1 is replaced with result of method self var3 display var4 return var5 ,return retval,return var5
"reverse order of elements of self.keyOrder, return the result.",reverse order of elements of self var1 return result.,return reversed ( self . keyOrder ),return reversed ( self . var1 )
return rv.,return rv.,return rv,return rv
return s.,return var0,return s,return s
"join the result in a string separated by whitespaces, substitute it for s.   return s.",join result in string separated by var0 substitute it for var1 return var1,return s,return s
"evaluate the method s.decode with string 'utf-8' and errors as the arguments,","evaluate method var0 with string var1 and errors as arguments,","return s . decode ( 'utf-8' , errors ) . encode ( encoding , errors )","return var0 ( var1 , errors ) . encode ( encoding , errors )"
"call the method e.encode with an argument string ""latin-1"".",call method var0 with argument string var1.,return s . encode ( 'latin-1' ),return s . encode ( 'latin-1' )
"evaluate the member method of s, encode with the encoding and errors as the arguments, return the result.","evaluate member method of s, encode with encoding and errors as arguments, return result.","return s . encode ( encoding , errors )","return s . encode ( encoding , errors )"
"call the method s.get_data, return the result.",call method s var1 return result.,return s . get_data ( ),return s . var1 ( )
"sum the result of the method s.get_data and s.rawdata, return the result.",sum result of method s var1 and var2 return result.,return s . get_data ( ) + s . rawdata,return s . var1 ( ) + var2
"evaluate the method s.getvalue, return the result.",evaluate method var0 return result.,return s . getvalue ( ),return var0 ( )
"call the method s.getvalue, return the result.",call method var0 return result.,return s . getvalue ( ),return var0 ( )
"remove first and last elements of s, replace every occurrence of string '\%s' formated with quote with quote,","remove first and last elements of s, replace every occurrence of string var0 formated with quote with quote,","return s [ 1 : - 1 ] . replace ( r'\%s' % quote , quote ) . replace ( r'\\' , '\\' )","return s [ 1 : - 1 ] . replace ( rvar0 % quote , quote ) . replace ( '\\\\' , '\\' )"
"return an instance of SafeBytes, created with an argument data.",return instance of var0 created with argument data.,return SafeBytes ( data ),return var0 ( data )
"return an instance of SafeBytes, created with an argument s.",return instance of var0 created with argument var1,return SafeBytes ( s ),return var0 ( s )
"return an instance of SafeBytes, created with an argument t.",return instance of var0 created with argument var1,return SafeBytes ( t ),return var0 ( t )
"return an instance of SafeText, created with an argument s converted into a string.",return instance of var0 created with argument s converted into string.,return SafeString ( str ( s ) ),return SafeString ( str ( s ) )
"return an instance of SafeText, created with an argument data.",return instance of var0 created with argument data.,return SafeText ( data ),return var0 ( data )
"return an instance of SafeText, created with an argument s.",return instance of var0 created with argument var1,return SafeText ( s ),return var0 ( s )
"return an instance of SafeText, created with an argument t.",return instance of var0 created with argument var1,return SafeText ( t ),return var0 ( t )
"evaluate the boolean expression, if first three characters of sample equals to string of bytes '\xef\xbb\xbf\',","evaluate boolean expression, if first three characters of sample equals to string of bytes var0,",return sample [ : 3 ] == b'\xef\xbb\xbf' or sample . startswith ( codecs . BOM_UTF16_LE ) or sample . startswith ( codecs . BOM_UTF16_BE ),return sample [ : 3 ] == b'\xef\xbb\xbf' or sample . startswith ( codecs . BOM_UTF16_LE ) or sample . startswith ( codecs . BOM_UTF16_BE )
"call the function with 7 arguments: self, self.instance, self._meta.fields, fail_message, commit, self._meta.exclude,",call function with 7 arguments: self var0 var1 var2 commit var3 ,"return save_instance ( self , self . instance , self . _meta . fields , fail_message , commit , self . _meta . exclude , construct = False )","return save_instance ( self , var0 , var1 , var2 , commit , var3 , construct = False )"
return saved_instances.,return var0 ,return saved_instances,return var0
"if scheme is countaine in self.url_schemes return boolean True, otherwise return False.",if scheme is var0 in self var2 return boolean var3 otherwise return var4 ,return scheme in self . url_schemes,return scheme in self . var2
return scrip_name.decode method result called with UTF_8 as argument.,return var0 decode method result called with var1 as argument.,return script_name . decode ( UTF_8 ),return script_name . decode ( var1 )
return select_html.,return var0 ,return select_html,return var0
return self.,return self.,return self,return self
"call the method self.__bytes_cast, return the result.",call method var0 return result.,return self . __bytes_cast ( ),return var0 ( )
"call the method self.__cast, if the result doesnt equal to other, return boolean True, otherwise return boolean False.","call method var0 if result doesnt equal to other, return boolean var1 otherwise return boolean var2 ",return self . __cast ( ) != other,return var0 ( ) != other
"call the function sself.__cast with an argument self, divide the result with rhs and return the reminder of the division.","call function var0 with argument self, divide result with rhs and return reminder of division.",return self . __cast ( ) % rhs,return self . __cast ( ) % rhs
"call the method self.__cast, if the result is lesser than other, return boolean True, otherwise return boolean False.","call method var0 if result is lesser var1 other, return boolean var2 otherwise return boolean var3 ",return self . __cast ( ) < other,return var0 ( ) < other
"call the method self.__cast, if the result equals other, return boolean True, otherwise return boolean False.","call method var0 if result equals other, return boolean var1 otherwise return boolean var2 ",return self . __cast ( ) == other,return var0 ( ) == other
"call the method self.__class__ with an argument list, with elements: tuples with 2 elements: k and hard copy of list v,","call method var0 with argument list, with elements: var1 with 2 elements: k and hard copy of list v,","return self . __class__ ( [ ( k , v [ : ] ) for k , v in self . lists ( ) ] )","return var0 ( [ ( k , v [ : ] ) for k , v in self . lists ( ) ] )"
"call the method self.__class__ with an argument list, with 2 elements: key and result of the function copy.deepcopy,","call method var0 with argument list, with 2 elements: key and result of function var1 ","return self . __class__ ( [ ( key , copy . deepcopy ( value , memo ) ) for key , value in self . items ( ) ] )","return var0 ( [ ( key , var1 ( value , memo ) ) for key , value in self . items ( ) ] )"
"call the method __copy__ with an argument unpacked list self.dicts, return the result.",call method var0 with argument unpacked list var1 return result.,return self . __class__ ( * self . dicts ),return self . __class__ ( * var1 )
"call the method self.__class__ with an argument self, return the result.","call method var0 with argument self, return result.",return self . __class__ ( self ),return var0 ( self )
"call the method self.__copy__, return the result.",call method var0 return result.,return self . __copy__ ( ),return var0 ( )
call the method self.__deepcopy__ with an empty dictionary as an argument.,call method var0 with empty dict as argument.,return self . __deepcopy__ ( { } ),return var0 ( { } )
"get the value under the funcname key of the t-th elment of self.__dispatch dictionary, call the result with 3 arguments: res,","get value under var0 key of t-th var1 of var2 dict, call result with 3 arguments: res,","return self . __dispatch [ t ] [ funcname ] ( res , * args , ** kw )","return var2 [ t ] [ var0 ] ( res , * args , ** kw )"
return a tuple with an element self.__dt.,return tuple with element var0 ,"return self . __dt ,","return var0 ,"
return self.__language.,return var0 ,return self . __language,return var0
return self.__name.,return var0 ,return self . __name,return var0
return self.__offset.,return var0 ,return self . __offset,return var0
return a tuple with an element self.__offset.,return tuple with element var0 ,"return self . __offset ,","return var0 ,"
"call the method self.__text_cast, return the result.",call method var0 return result.,return self . __text_cast ( ),return var0 ( )
return self.__to_language.,return var0 ,return self . __to_language,return var0
return the value under the language_code key of the self._app_dict dictionary.,return value under var0 key of var1 dict.,return self . _app_dict [ language_code ],return var1 [ var0 ]
"call the method self._base_set with string 'add', key, value and timeout as arguments, return the result.","call method var0 with string var1, key, value and var2 as arguments, return result.","return self . _base_set ( 'add' , key , value , timeout )","return var0 ( var1 , key , value , var2 )"
return self._body.,return var0 ,return self . _body,return var0
"call the method self._cache.add with key, value, self.get_backend_timeout(timeout) as arguments.","call method var0 with key, value, self.get_backend_timeout(timeout) as arguments.","return self . _cache . add ( key , value , self . get_backend_timeout ( timeout ) )","return var0 ( key , value , self . var2 ( timeout ) )"
"evaluate the method self._cache.decr with key and negative delta as arguments, return the result.","evaluate method var0 with key and negative delta as arguments, return result.","return self . _cache . decr ( key , - delta )","return var0 ( key , - delta )"
"evaluate the method self._cache.incr with key and negative delta as arguments, return the result.","evaluate method var0 with key and negative delta as arguments, return result.","return self . _cache . incr ( key , - delta )","return var0 ( key , - delta )"
return self._cached_loaders.,return var0 ,return self . _cached_loaders,return var0
return value under the alias key of self._caches.caches dictionary.,return value under alias key of var0 dict.,return self . _caches . caches [ alias ],return var0 [ alias ]
return self._callback.,return var0 ,return self . _callback,return var0
return self._changed_data.,return var0 ,return self . _changed_data,return var0
return self._choices.,return var0 ,return self . _choices,return var0
return self._client.,return var0 ,return self . _client,return var0
"call the method self._coerce with an argument value, return the result.","call method var0 with argument value, return result.",return self . _coerce ( value ),return var0 ( value )
return self._count.,return var0 ,return self . _count,return var0
"call the method self._create_attachments with argument msg, return the result.","call method var0 with argument msg, return result.",return self . _create_attachments ( msg ),return var0 ( msg )
"call the method self._create_alternatives with an argument msg, use it as an argument for the call to the self._create_attachments method, return the result.","call method var0 with argument msg, use it as argument for call to var1 method, return result.",return self . _create_attachments ( self . _create_alternatives ( msg ) ),return var1 ( self . _create_alternatives ( msg ) )
return self._dimensions_cache.,return var0 ,return self . _dimensions_cache,return var0
return self._encoding.,return var0 ,return self . _encoding,return var0
return self._errors.,return var0 ,return self . _errors,return var0
return self._files.,return var0 ,return self . _files,return var0
return self._fname.,return var0 ,return self . _fname,return var0
return self._fqdn.,return var0 ,return self . _fqdn,return var0
return the first element of the return value of the call to the self._det_image_dimensions method.,return first element of return value of call to var0 method.,return self . _get_image_dimensions ( ) [ 0 ],return self . _get_image_dimensions ( ) [ 0 ]
return the second element of the return value of the call to the self._det_image_dimensions method.,return second element of return value of call to var0 method.,return self . _get_image_dimensions ( ) [ 1 ],return self . _get_image_dimensions ( ) [ 1 ]
"call the self._get_pages method with 3 arguments: self.object_list from the bottom to the top index, number and self, return the result.","call var0 method with 3 arguments: self var2 from bottom to top index, number and self, return result.","return self . _get_page ( self . object_list [ bottom : top ] , number , self )","return self . _get_page ( self . var2 [ bottom : top ] , number , self )"
"call the method self._get_scheme, return the result.",call method var0 return result.,return self . _get_scheme ( ),return var0 ( )
"call the method self._handle_object with an argument node, return the result.","call method var0 with argument node, return result.",return self . _handle_object ( node ),return var0 ( node )
"convert header to lowercase, use it to as a key to get the value of the self._headers dictionary,","convert header to lowercase, use it to as key to get value of var0 dict,","return self . _headers . get ( header . lower ( ) , ( None , alternate ) ) [ 1 ]","return var0 . get ( header . lower ( ) , ( None , alternate ) ) [ 1 ]"
"call the method self._headers.values, return the result,","call method var0 return result,",return self . _headers . values ( ),return var0 ( )
"convert header to lowercase, use it as the key to get the value from the self._headers dictionary, return the second element of the result.","convert header to lowercase, use it as key to get value from var0 dict, return second element of result.",return self . _headers [ header . lower ( ) ] [ 1 ],return var0 [ header . lower ( ) ] [ 1 ]
"return the result of the method self._html_output, called with 5 arguments: normal_row to a string,","return result of method var0 called with 5 arguments: var1 to string,","return self . _html_output (  normal_row = '<li%(html_class_attr)s>%(errors)s%(label)s %(field)s%(help_text)s</li>' ,  error_row = '<li>%s</li>' ,  row_ender = '</li>' ,  help_text_html = ' <span class='helptext'>%s</span>' ,  errors_on_separate_row = False )","return var0( var1 = '<li%(html_class_attr)s>%(errors)s%(label)s %(field)s%(help_text)s</li>',  error_row = '<li>%s</li>',  row_ender = '</li>',  help_text_html = ' <span class='helptext'>%s</span>',  errors_on_separate_row = False)"
"return the result of the method self._html_output, called with 5 arguments: normal_row to a string,","return result of method var0 called with 5 arguments: var1 to string,","return self . _html_output (  normal_row = '<p%(html_class_attr)s>%(label)s %(field)s%(help_text)s</p>' ,  error_row = '%s' ,  row_ender = '</p>' ,  help_text_html = ' <span class='helptext'>%s</span>' ,  errors_on_separate_row = True )","return var0( var1 = '<p%(html_class_attr)s>%(label)s %(field)s%(help_text)s</p>',  error_row = '%s',  row_ender = '</p>',  help_text_html = ' <span class='helptext'>%s</span>',  errors_on_separate_row = True)"
"return the result of the method self._html_output, called with 5 arguments: normal_row to a string,","return result of method var0 called with 5 arguments: var1 to string,","return self . _html_output (  normal_row = '<tr%(html_class_attr)s><th>%(label)s</th><td>%(errors)s%(field)s%(help_text)s</td></tr>' ,  error_row = '<tr><td colspan='2'>%s</td></tr>' ,  row_ender = '</td></tr>' ,  help_text_html = '<br /><span class='helptext'>%s</span>' ,  errors_on_separate_row = False )","return var0( var1 = '<tr%(html_class_attr)s><th>%(label)s</th><td>%(errors)s%(field)s%(help_text)s</td></tr>',  error_row = '<tr><td colspan='2'>%s</td></tr>',  row_ender = '</td></tr>',  help_text_html = '<br /><span class='helptext'>%s</span>',  errors_on_separate_row = False)"
return self._is_rendered.,return var0 ,return self . _is_rendered,return var0
return self._name.,return var0 ,return self . _name,return var0
return the value under the language_code key of the self._namespace_dict dictionary.,return value under var0 key of var1 dict.,return self . _namespace_dict [ language_code ],return var1 [ var0 ]
return self._non_form_errors.,return var0 ,return self . _non_form_errors,return var0
return self._num_pages.,return var0 ,return self . _num_pages,return var0
substitute the result for self._object_dict.   return the value under the pk key of self._object_dict dictionary.,substitute result for var0 return value under var3 key of var0 dict.,return self . _object_dict . get ( pk ),return var0 . get ( var3 )
"call the self._open method with name and mode arguments, return the result.","call var0 method with name and mode arguments, return result.","return self . _open ( name , mode )","return var0 ( name , mode )"
return self._post.,return var0 ,return self . _post,return var0
return self._post and self._files.,return var0 and var1 ,"return self . _post , self . _files","return var0 , var1"
return self._queryset.,return var0 ,return self . _queryset,return var0
return self._regex.,return var0 ,return self . _regex,return var0
return the value under the language_code key of the self._regex_dict dictionary.,return value under var0 key of var1 dict.,return self . _regex_dict [ language_code ],return var1 [ var0 ]
return the value under the language_code of the self._regex_dict dictionary.,return value under var0 of var1 dict.,return self . _regex_dict [ language_code ],return var1 [ var0 ]
"call the method self._render with an argument context, return the result,","call method var0 with argument context, return result,",return self . _render ( context ),return var0 ( context )
return self._request.,return var0 ,return self . _request,return var0
return the value under the language_code key of the self._reverse_dict dictionary.,return value under var0 key of var1 dict.,return self . _reverse_dict [ language_code ],return var1 [ var0 ]
"call the method self._reverse_with_prefix with 4 arguments: lookup_view, an empty string, unpacked list args and unpacked dictionary kwargs.","call method var0 with 4 arguments: var1 empty string, unpacked list var2 and unpacked dict var3 ","return self . _reverse_with_prefix ( lookup_view , '' , * args , ** kwargs )","return var0 ( var1 , '' , * var2 , ** var3 )"
return self._size.,return var0 ,return self . _size,return var0
call the method self._stream.read with 2 arguments: unpacked list args and unpacked dictionary kwargs.,call method var0 with 2 arguments: unpacked list var1 and unpacked dict var2 ,"return self . _stream . read ( * args , ** kwargs )","return var0 ( * var1 , ** var2 )"
"call the method self._stream.readline with 2 arguments: unpacked list args, unpacked dictionary kwargs.",call method var0 with 2 arguments: unpacked list var1 unpacked dict var2 ,"return self . _stream . readline ( * args , ** kwargs )","return var0 ( * var1 , ** var2 )"
"call the method self._text_chars with 4 arguments: length, truncate, text and truncate_len, return the result.","call method var0 with 4 arguments: length, truncate, text and var1 return result.","return self . _text_chars ( length , truncate , text , truncate_len )","return var0 ( length , truncate , text , var1 )"
"call the method self._text_words with 2 arguments length and truncate, return the result.","call method var0 with 2 arguments length and truncate, return result.","return self . _text_words ( length , truncate )","return var0 ( length , truncate )"
"call the method self._truncate_html with 5 arguments: length, truncate, self._wrapped, length and boolean True, return the result.","call method var0 with 5 arguments: length, truncate var1 length and boolean var2 return result.","return self . _truncate_html ( length , truncate , self . _wrapped , length , True )","return var0 ( length , truncate , var1 , length , var2 )"
"call the function self._truncate_html with 5 arguments: length, truncate, text, truncate_len and boolean False, return the result.","call function self._truncate_html with 5 arguments: length, truncate, text var0 and boolean var1 return result.","return self . _truncate_html ( length , truncate , text , truncate_len , False )","return self . _truncate_html ( length , truncate , text , var0 , var1 )"
return self._upload_handlers.,return var0 ,return self . _upload_handlers,return var0
return self._urlconf_module.,return var0 ,return self . _urlconf_module,return var0
return self._wrapped.__dict__.,return var0 ,return self . _wrapped . __dict__,return var0
"call the method self.add_truncation_text with 2 arguments: elements of words joined in a string, separated with whitespaces,","call method self var1 with 2 arguments: elements of words joined in string, separated with var2 ","return self . add_truncation_text ( ' ' . join ( words ) , truncate )","return self . var1 ( ' ' . join ( words ) , truncate )"
"call the method self.add_truncation_text with 2 arguments: if end_index is greater than zero, first end_index elements of text,","call method self var1 with 2 arguments: if var2 is greater var6 zero, first var2 elements of text,","return self . add_truncation_text ( text [ : end_index or 0 ] , truncate )","return self . var1 ( text [ : var2 or 0 ] , truncate )"
"call the method self.as_table, return the result.",call method self var1 return result.,return self . as_table ( ),return self . var1 ( )
"call the method self.as_ul, return the result.",call method self var1 return result.,return self . as_ul ( ),return self . var1 ( )
"append the result to the result of the method, self.as_widget, return the resulting string.   call the method self.as_widget, return the result.","append result to result of method, self var2 return resulting string var4 call method self var2 return result.",return self . as_widget ( ),return self . var2 ( )
"call the method self.as_hidden with an argument only_initial set to boolean True,",call method self var0 with argument var1 set to boolean var3 ,return self . as_widget ( ) + self . as_hidden ( only_initial = True ),return self . as_widget ( ) + self . var0 ( var1 = var3 )
"call the method self.as_widget with 3 arguments: return value of the method self.field.hidden_widget, attrs,",call method self var0 with 3 arguments: return value of method self.field var2 var3 ,"return self . as_widget ( self . field . hidden_widget ( ) , attrs , ** kwargs )","return self . var0 ( self . field . var2 ( ) , var3 , ** kwargs )"
"call the method self.as_widget with 3 arguments: instance of a class Textarea, attrs and unpacked dictionary kwargs, return the result.",call method self var0 with 3 arguments: instance of class var1 var2 and unpacked dict var3 return result.,"return self . as_widget ( Textarea ( ) , attrs , ** kwargs )","return self . var0 ( var1 ( ) , var2 , ** var3 )"
"call the method self.as_widget with 3 arguments: instance of a class TextInput, attrs and unpacked dictionary kwargs, return the result.",call method self var0 with 3 arguments: instance of class var1 var2 and unpacked dict var3 return result.,"return self . as_widget ( TextInput ( ) , attrs , ** kwargs )","return self . var0 ( var1 ( ) , var2 , ** var3 )"
"get the value under the 'id' key of the self.attrs dictionary, return it, if the key doesnt exists return an empty string.","get value under var0 key of self.attrs dict, return it, if key doesnt exists return empty string.","return self . attrs . get ( 'id' , '' )","return self . attrs . get ( var0 , '' )"
"remove the first element of value under the name key of self.blocks dictionary, return it.","remove first element of value under name key of var0 dict, return it.",return self . blocks [ name ] . pop ( ),return var0 [ name ] . pop ( )
"get value under the self.blocks dictionary under the name key, return the last element.","get value under var0 dict under name key, return last element.",return self . blocks [ name ] [ - 1 ],return var0 [ name ] [ - 1 ]
"call the method self.check with 2 arguments app_configs set to app_configs, display_num_errors set to display_num_errors, return the result.",call method var0 with 2 arguments var1 set to var1 var3 set to var3 return result.,"return self . check ( app_configs = app_configs , display_num_errors = display_num_errors )","return var0 ( var1 = var1 , var3 = var3 )"
"call the method self.choice_input_class with 5 arguments: self.name, self.value, result of the method self.attrs.copy,",call method self var1 with 5 arguments: var2 var3 result of method var4 ,"return self . choice_input_class ( self . name , self . value , self . attrs . copy ( ) , choice , idx )","return self . var1 ( var2 , var3 , var4 ( ) , choice , idx )"
"if self.choice_value is contained in self.value return boolean True, otherwise return boolean False.",if self var1 is contained in var2 return boolean var3 otherwise return boolean var4 ,return self . choice_value in self . value,return self . var1 in var2
return self.cleaned_data.,return self var1 ,return self . cleaned_data,return self . var1
evaluate self.clear method and return the result.,evaluate var0 method and return result.,return self . clear ( ),return var0 ( )
return the first element of self.client_address.,return first element of self var1 ,return self . client_address [ 0 ],return self . var1 [ 0 ]
"call the function self.compress with empty list as an argument, return the result.","call function var0 with empty list as argument, return result.",return self . compress ( [ ] ),return var0 ( [ ] )
return self.connection.,return var0 ,return self . connection,return var0
return self.content,return var0,return self . content,return var0
"call the method self.copy, return the result.",call method var0 return result.,return self . copy ( ),return var0 ( )
"call the function self.create_var with an argument token, return the result.","call function self var1 with argument token, return result.",return self . create_var ( token ),return self . var1 ( token )
return self.data.day.,return var0 ,return self . data . day,return var0
return self.data.hour.,return var0 ,return self . data . hour,return var0
"subtract integer 12 from self.data.hour, return the result.",subtract integer 12 from var0 return result.,return self . data . hour - 12,return var0 - 12
"call the method self.data.isocalendar, return the first element of the result.",call method var0 return first element of result.,return self . data . isocalendar ( ) [ 0 ],return var0 ( ) [ 0 ]
"call the method self.data.isoformat, return the result.",call method var0 return result.,return self . data . isoformat ( ),return var0 ( )
return self.data.month.,return var0 ,return self . data . month,return var0
"call the method self.data.tzinfo.tzname with an argument self.data, if it is true, return it, otherwise return an empty string.","call method var0 with argument var1 if it is true, return it, otherwise return empty string.",return self . data . tzinfo . tzname ( self . data ) or '',return var0 ( var1 ) or ''
return self.data.year.,return var0 ,return self . data . year,return var0
"call the method self.dicts.pop, return the result.",call method var0 return result.,return self . dicts . pop ( ),return var0 ( )
"return value under the key key of dictionary in last element of self.dicts,",return value under key key of dict in last element of var0 ,"return self . dicts [ - 1 ] . get ( key , otherwise )","return var0 [ - 1 ] . get ( key , otherwise )"
return value under the key key of dictionary in last element of self.dicts.,return value under key key of dict in last element of var0 ,return self . dicts [ - 1 ] [ key ],return var0 [ - 1 ] [ key ]
return self.DSTDIFF.,return self var0 ,return self . DSTDIFF,return self . var0
return self.DSTOFFSET.,return self var0 ,return self . DSTOFFSET,return self . var0
"call the method self.empty_form.is_multipart, return the result",call method self var1 var2 return result,return self . empty_form . is_multipart ( ),return self . var1 . var2 ( )
return self.empty_form.media.,return self var1 media.,return self . empty_form . media,return self . var1 . media
return self.empty_value.,return self var1 ,return self . empty_value,return self . var1
return value under the 'wsgi.url_scheme' key of self.environ dictionary.,return value under var0 key of var1 dict.,return self . environ . get ( 'wsgi.url_scheme' ),return var1 . get ( var0 )
"return the result of the method self.errors.get called with 2 arguments: NON_FIELD_ERRORS and return value of the method,","return result of method var0 called with 2 arguments: var1 and return value of method,","return self . errors . get ( NON_FIELD_ERRORS , self . error_class ( error_class = 'nonfield' ) )","return var0 ( var1 , self . error_class ( error_class = 'nonfield' ) )"
"call the method self.expression.resolve with 2 arguments: context and boolean True, return the result.",call method var0 with 2 arguments: context and boolean var1 return result.,"return self . expression . resolve ( context , True )","return var0 ( context , var1 )"
"call the method self.extract with an argument absolute_path, return the result.",call method var0 with argument var1 return result.,return self . extract ( absolute_path ),return var0 ( var1 )
"self.form.initial, if it exists, or self.field.initial if not, substitute the result for data.   call the method self.field.prepare_value with an argument data, return the result.","var0, if it exists, or var1 if not, substitute result for data var2 call method self.field var4 with argument data, return result.",return self . field . prepare_value ( data ),return self . field . var4 ( data )
"return self.field.widget.is_hidden,",return self.field.widget var1 ,return self . field . widget . is_hidden,return self . field . widget . var1
"call the method self.field.widget.value_from_datadict with 3 arguments: self.form.data, self.form.files, self.html_name, return the result.",call method self.field.widget var1 with 3 arguments: var2 var3 self var5 return result.,"return self . field . widget . value_from_datadict ( self . form . data , self . form . files , self . html_name )","return self . field . widget . var1 ( var2 , var3 , self . var5 )"
return self.file.,return var0 ,return self . file,return var0
"call the self.file.close method, return the result.","call var0 method, return result.",return self . file . close ( ),return var0 ( )
return self.file.closed.,return var0 ,return self . file . closed,return var0
return self.file.name.,return var0 ,return self . file . name,return var0
return self.file.size.,return var0 ,return self . file . size,return var0
"call the method self.filter with 3 arguments: name, func and unpacked dictionary flags, return the result.","call method var0 with 3 arguments: name var1 and unpacked dict flags, return result.","return self . filter ( name , func , ** flags )","return var0 ( name , var1 , ** flags )"
"if not, substitute func.__name__ for name.   call the method self.filter with 3 arguments: name, func and unpacked dictionary flags.","if not, substitute var0 for name var2 call method var3 with 3 arguments: name var1 and unpacked dict flags.","return self . filter ( name , func , ** flags )","return var3 ( name , var1 , ** flags )"
"call the function self.filter_expr.resolve with an argument context, return the result.","call function self var1 resolve with argument context, return result.",return self . filter_expr . resolve ( context ),return self . var1 . resolve ( context )
"call the method self.filter_function with 2 arguments func and unpacked dictionary flags, return the result.","call method self var1 with 2 arguments func and unpacked dict flags, return result.","return self . filter_function ( func , ** flags )","return self . var1 ( func , ** flags )"
"call the method self.filter_function with arguments name and unpacked dictionary flags, return the result.","call method self var1 with arguments name and unpacked dict flags, return result.","return self . filter_function ( name , ** flags )","return self . var1 ( name , ** flags )"
return the value under the filter_name key of the self.filters dictionary.,return value under var0 key of var1 dict.,return self . filters [ filter_name ],return var1 [ var0 ]
"call the flatten method of the self and other objects, if they are equal, return boolean True, if not return boolean False.","call flatten method of self and other objects, if var0 are equal, return boolean var1 if not return boolean var2 ",return self . flatten ( ) == other . flatten ( ),return self . flatten ( ) == other . flatten ( )
"get the value under the self.name key of the self.form.errors dictionary, if the key exists, return it,","get value under var0 key of var1 dict, if key exists, return it,","return self . form . errors . get ( self . name , self . form . error_class ( ) )","return var1 . get ( var0 , self . form . error_class ( ) )"
"call the method return self.format with an argument string 'D, j M Y H:i:s O', return the result.","call method return var0 with argument string var1, return result.","return self . format ( 'D, j M Y H:i:s O' )",return var0 ( var1 )
"call the self.initial_form_count method, return the sublist of self.forms from the beginning to the previous result as the end index.","call self var1 method, return var2 of var3 from beginning to previous result as end index.",return self . forms [ : self . initial_form_count ( ) ],return var3 [ : self . var1 ( ) ]
"call the method is_multipart on the first element of self.forms, return it.",call method var0 on first element of var1 return it.,return self . forms [ 0 ] . is_multipart ( ),return var1 [ 0 ] . var0 ( )
return the media field of the first element of self.forms.,return media field of first element of var0 ,return self . forms [ 0 ] . media,return var0 [ 0 ] . media
return self.forms element at the index index.,return var0 element at index index.,return self . forms [ index ],return var0 [ index ]
"call the self.initial_form_count method, return the sublist of self.forms, using previous result as start index to the end.","call self var1 method, return var2 of var3 using previous result as start index to end.",return self . forms [ self . initial_form_count ( ) : ],return var3 [ self . var1 ( ) : ]
call the method self.func with an argument value.,call method var0 with argument value.,return self . func ( value ),return var0 ( value )
"call the method self.g, return the result.",call method var0 return result.,return self . g ( ),return var0 ( )
"call the self.get method with key and version set to version as arguments, return it if it is not None.","call self.get method with key and version set to version as arguments, return it if it is not var0 ","return self . get ( key , version = version ) is not None","return self . get ( key , version = version ) is not var0"
"call the method self.get_connection with argument fail_silently, on the result call the method send_messages with one argument: list containing self, return the result.","call method self var1 with argument var2 on result call method var4 with one argument: list containing self, return result.",return self . get_connection ( fail_silently ) . send_messages ( [ self ] ),return self . var1 ( var2 ) . var4 ( [ self ] )
"evaluate the self.get_fqdn method, return the result.","evaluate self var1 method, return result.",return self . get_fqdn ( ),return self . var1 ( )
"call the method self.get_renderer with 4 arguments: name, value, attrs and choices, call the render method on the result, return the result.","call method self var1 with 4 arguments: name, value var2 and choices, call render method on result, return result.","return self . get_renderer ( name , value , attrs , choices ) . render ( )","return self . var1 ( name , value , var2 , choices ) . render ( )"
"call the method self.getlist with an argument key, return the result.","call method var0 with argument key, return result.",return self . getlist ( key ),return var0 ( key )
"call the method self.getvalue, return the result.",call method var0 return result.,return self . getvalue ( ),return var0 ( )
"call the method self.handle_merge with 2 arguments: loader and conflicts, return the result.","call method self var1 with 2 arguments: loader and conflicts, return result.","return self . handle_merge ( loader , conflicts )","return self . var1 ( loader , conflicts )"
"call the self.handle_noargs method with with unpacked dictionary options as argument, return the result.","call self var1 method with with unpacked dict options as argument, return result.",return self . handle_noargs ( ** options ),return self . var1 ( ** options )
"evaluate the self.has_key method with key as argument, return the result.","evaluate self var1 method with key as argument, return result.",return self . has_key ( key ),return self . var1 ( key )
"call the method self.has_key with an argument key, return the result.","call method self var1 with argument key, return result.",return self . has_key ( key ),return self . var1 ( key )
"call the method self.has_previous, if it evaluate to false, call the self.has_next method, return the result.","call method self var1 if it evaluate to false, call self var3 method, return result.",return self . has_previous ( ) or self . has_next ( ),return self . var1 ( ) or self . var3 ( )
return self.hashvalue.,return var0 ,return self . hashvalue,return var0
return self.html_name.,return self var1 ,return self . html_name,return self . var1
return self.id.,return var0 ,return self . id,return var0
"if self.id is contained in settings.SILENCED_SYSTEM_CHECKS return boolean True, False otherwise.",if var0 is contained in settings var1 return boolean var2 var3 otherwise.,return self . id in settings . SILENCED_SYSTEM_CHECKS,return var0 in settings . var1
"call the self.incr method with key, negative delta and version set to version as arguments.","call var0 method with key, negative delta and version set to version as arguments.","return self . incr ( key , - delta , version = version )","return var0 ( key , - delta , version = version )"
"call the method self.incr_version with key, negative delta and version as arguments.","call method self var1 with key, negative delta and version as arguments.","return self . incr_version ( key , - delta , version )","return self . var1 ( key , - delta , version )"
"if self.input_type equals string 'hidden' and self has an attribute 'input_type', return boolean True, otherwise return boolean False.","if var0 equals string var4 and self has attribute var5, return boolean var6 otherwise return boolean var7 ","return self . input_type == 'hidden' if hasattr ( self , 'input_type' ) else False","return var0 == var4 if hasattr ( self , 'input_type' ) else var7"
"if self.is_bound is true and self.errors is false, return boolean True, otherwise return boolean False.","if self var1 is true and var2 is false, return boolean var3 otherwise return boolean var4 ",return self . is_bound and not self . errors,return self . var1 and not var2
return hard copy of self.keyOrder elements.,return hard copy of self var1 elements.,return self . keyOrder [ : ],return self . var1 [ : ]
"return boolean True if self.level is greater than or equals to ERROR, otherwise return boolean False.",return boolean var0 if var1 is greater var2 or equals to var3 otherwise return boolean var4 ,return self . level >= ERROR,return var1 >= var3
return self.limit_choices_to.,return self var1 ,return self . limit_choices_to,return self . var1
"call the method self.limit_choices_to, return the result,","call method self var1 return result,",return self . limit_choices_to ( ),return self . var1 ( )
"call the method self.load_template with 2 arguments: template_name and template_dirs, return the result.",call method self var1 with 2 arguments: var2 and var4 return result.,"return self . load_template ( template_name , template_dirs )","return self . var1 ( var2 , var4 )"
"call the method self.loader with 2 arguments: self.loadname and self.dirs, return the first element of the result.",call method var0 with 2 arguments: var1 and var2 return first element of result.,"return self . loader ( self . loadname , self . dirs ) [ 0 ]","return var0 ( var1 , var2 ) [ 0 ]"
return the value under the INITIAL_FORM_COUNT key of the self.management_form.cleaned_data dictionary.,return value under var0 key of self var2 var3 dict.,return self . management_form . cleaned_data [ INITIAL_FORM_COUNT ],return self . var2 . var3 [ var0 ]
"call the method self.mapping.get with 2 arguments: self.tagtype and an empty list, return the result.","call method var0 with 2 arguments: var1 and empty list, return result.","return self . mapping . get ( self . tagtype , '' )","return var0 ( var1 , '' )"
"get the value under the 'HTTP_X_REQUESTED_WITH' key of the self.META dictionary, if it equals string 'XMLHttpRequest',","get value under var0 key of self var1 dict, if it equals string var3,",return self . META . get ( 'HTTP_X_REQUESTED_WITH' ) == 'XMLHttpRequest',return self . var1 . get ( var0 ) == 'XMLHttpRequest'
"return self.msg formatted with a tuple, with elements generated from return value of the function force_text with 2 arguments:","return var0 formatted with tuple, with elements generated from return value of function var1 with 2 arguments:","return self . msg % tuple ( force_text ( p , errors = 'replace' ) for p in self . params )","return var0 % tuple ( var1 ( p , errors = 'replace' ) for p in self . params )"
return self.name.,return var0 ,return self . name,return var0
return self.new_objects.,return self var1 ,return self . new_objects,return self . var1
"call the method self.nodelist.render with an argument context, return the result.","call method var0 with argument context, return result.",return self . nodelist . render ( context ),return var0 ( context )
"call the method self.nodelist.render with an argument new_context, return the result.",call method var0 with argument var1 return result.,return self . nodelist . render ( new_context ),return var0 ( var1 )
"call the method self.nodelist_empty.render with an argument context, return the result.","call method self var1 render with argument context, return result.",return self . nodelist_empty . render ( context ),return self . var1 . render ( context )
"call the method self.nodelist_false.render with an argument context, return the result.","call method self var1 render with argument context, return result.",return self . nodelist_false . render ( context ),return self . var1 . render ( context )
"call the method self.nodelist_false.render with an arguments context, return the result.","call method self var1 render with arguments context, return result.",return self . nodelist_false . render ( context ),return self . var1 . render ( context )
"call the method self.nodelist_true.render with an argument context, return the result.","call method self var1 render with argument context, return result.",return self . nodelist_true . render ( context ),return self . var1 . render ( context )
"multiply self.number and self.paginator.per_page, return the result.",multiply var0 and self.paginator var1 return result.,return self . number * self . paginator . per_page,return var0 * self . paginator . var1
"if self.number is lesser than self.paginator.num_pages, return boolean True, otherwise return boolean False.",if var0 is lesser var1 self.paginator var3 return boolean var4 otherwise return boolean var5 ,return self . number < self . paginator . num_pages,return var0 < self . paginator . var3
"if self.number is greater than integer 1, return boolean True, otherwise return boolean False.","if var0 is greater var1 integer 1, return boolean var2 otherwise return boolean var3 ",return self . number > 1,return var0 > 1
return self.object_list element at index.,return self var1 element at index.,return self . object_list [ index ],return self . var1 [ index ]
return self.objects.,return var0 ,return self . objects,return var0
return self.paginator.count.,return var0 ,return self . paginator . count,return var0
"call the method self.paginator.validate_number with self.number decremented by 1 as argument, return the result.","call method self.paginator var1 with var2 var3 by 1 as argument, return result.",return self . paginator . validate_number ( self . number - 1 ),return self . paginator . var1 ( var2 - 1 )
"call the method self.paginator.validate_number with self.number incremented by 1 as argument, return the result.","call method self.paginator var1 with var2 var3 by 1 as argument, return result.",return self . paginator . validate_number ( self . number + 1 ),return self . paginator . var1 ( var2 + 1 )
return self.parent_instance.,return self var1 ,return self . parent_instance,return self . var1
and code set to a string 'invalid_choice'.   return self.parent_instance.,and code set to string var0 var1 return self var3 ,return self . parent_instance,return self . var3
"call the method self.parent_widget.render with unpacked list args as an argument, return the result.","call method self var1 render with unpacked list var2 as argument, return result.",return self . parent_widget . render ( * args ),return self . var1 . render ( * var2 )
"if self.path is lesser than other.path, return boolean True, otherwise return boolean False.",if var0 is lesser var1 var2 return boolean var3 otherwise return boolean var4 ,return self . path < other . path,return var0 < var2
"if self.path equals other.path, return boolean True, if not return boolean False.",if var0 equals var1 return boolean var2 if not return boolean var3 ,return self . path == other . path,return var0 == var1
"if self.pointer is smaller than length of self.subject, return boolean True, otherwise return False.",if var0 is smaller var1 length of var2 return boolean var3 otherwise return var4 ,return self . pointer < len ( self . subject ),return var0 < len ( var2 )
return self.position.,return var0 ,return self . position,return var0
"call the method self.queryset.none, return the result.",call method var0 return result.,return self . queryset . none ( ),return var0 ( )
"call the method self.render, return the result.",call method var0 return result.,return self . render ( ),return var0 ( )
"call the method self.renderer with 4 arguments: name, value, final_attrs and choices, return the result.","call method var0 with 4 arguments: name, value var1 and choices, return result.","return self . renderer ( name , value , final_attrs , choices )","return var0 ( name , value , var1 , choices )"
"call the method self.represent_scalar with 2 arguments: string 'tag:yaml.org,2002:str' and data converted into a string, return the result.","call method self var1 with 2 arguments: string var2 and data converted into string, return result.","return self . represent_scalar ( 'tag:yaml.org,2002:str' , str ( data ) )","return self . var1 ( var2 , str ( data ) )"
"call the method self.resolve with an argument value, return the result.","call method var0 with argument value, return result.",return self . resolve ( value ),return var0 ( value )
return self.s.,return var0 ,return self . s,return var0
"sum results of method self.save_existing_objects called with an argument commit and of method self.save_new_objects,",sum results of method self var1 called with argument commit and of method self var3 ,return self . save_existing_objects ( commit ) + self . save_new_objects ( commit ),return self . var1 ( commit ) + self . var3 ( commit )
"if self.scheme equals to string 'https', return boolean True, otherwise return boolean False.","if var0 equals to string var1, return boolean var2 otherwise return boolean var3 ",return self . scheme == 'https',return var0 == var1
"call method self.serialize_headers, append bytes string '\r\n\r\n' to the result, append self.content to the result, return it.","call method self var1 append bytes string var2 to result, append var3 to result, return it.",return self . serialize_headers ( ) + b'\r\n\r\n' + self . content,return self . var1 ( ) + bvar2 + var3
"call the method sign on the result with an argument value, substitute the result for value.   call the method self.set_cookie with 3 arguments: key, value and unpacked dictionary kwargs, return the result.","call method sign on result with argument value, substitute result for value var0 call method self var2 with 3 arguments: key, value and unpacked dict var3 return result.","return self . set_cookie ( key , value , ** kwargs )","return self . var2 ( key , value , ** var3 )"
"call the method self.show_migration_list with connection as first argument, as second argument use value under the 'app_label' key of options dictionary,","call method self var1 with connection as first argument, as second argument use value under var2 key of options dict,","return self . show_migration_list ( connection , [ options [ 'app_label' ] ] if options [ 'app_label' ] else None )","return self . var1 ( connection , [ options [ var2 ] ] if options [ var2 ] else None )"
"append value to the self.sign, return the result.",append value to var0 return result.,return self . sign + value,return var0 + value
return self.size.,return var0 ,return self . size,return var0
"if self.size is greater than chunk_size, return boolean True, otherwise return boolean False.",if var0 is greater var1 var2 return boolean var4 otherwise return boolean var5 ,return self . size > chunk_size,return var0 > var2
return self.source.,return var0 ,return self . source,return var0
"call the method self.source_error with 2 arguments: token.source and msg, return the result.","call method self var1 with 2 arguments: var2 and msg, return result.","return self . source_error ( token . source , msg )","return self . var1 ( var2 , msg )"
return self.STDOFFSET.,return self var0 ,return self . STDOFFSET,return self . var0
"evaluate self.stream.getvalue method, return the result.","evaluate var0 method, return result.",return self . stream . getvalue ( ),return var0 ( )
return self.streaming_content,return self.var1,return self . streaming_content,return self . var1
"call the method self.strptime with arguments value and format, return the result.","call method var0 with arguments value and format, return result.","return self . strptime ( value , format )","return var0 ( value , format )"
"call the method self.tag with 2 arguments name and func, return the result.",call method var0 with 2 arguments name and var1 return result.,"return self . tag ( name , func )","return var0 ( name , var1 )"
return self.tag_function.,return self var1 ,return self . tag_function,return self . var1
"call the method self.tag_function with an argument name, return the result.","call method self var1 with argument name, return result.",return self . tag_function ( name ),return self . var1 ( name )
return self.find_template_cache dictionary value under the key key.,return self var1 dict value under key key.,return self . template_cache [ key ],return self . template_cache [ key ]
return self.text.,return var0 ,return self . text,return var0
"add together self.to, self.cc and self.bcc, return the result.",add together var0 var1 and var2 return result.,return self . to + self . cc + self . bcc,return var0 + var1 + var2
return self.token.,return var0 ,return self . token,return var0
"remove first element from self.tokens, return removed element.",remove first element from var0 return removed element.,return self . tokens . pop ( 0 ),return var0 . pop ( 0 )
return self.value.,return var0 ,return self . value,return var0
"call the method self.value.resolve with 2 arguments context and ignore_failures set to boolean True, return the result.",call method var0 with 2 arguments context and var1 set to boolean var3 return result.,"return self . value . resolve ( context , ignore_failures = True )","return var0 ( context , var1 = var3 )"
"if self.value equals self.choice_value, return boolean True, if not, return boolean False.","if var0 equals self var2 return boolean var3 if not, return boolean var4 ",return self . value == self . choice_value,return var0 == self . var2
return self.var.,return var0 ,return self . var,return var0
return value under key key of self dictionary,return value under key key of self dict,return self [ key ],return self [ key ]
return value under the key key of self dictionary.,return value under key key of self dict.,return self [ key ],return self [ key ]
"call the serializer function, call the loads method on the return value with an argument data, return the result.","call var0 function, call loads method on return value with argument data, return result.",return serializer ( ) . loads ( data ),return var0 ( ) . loads ( data )
"append check.tags into a list for every check in self.registered_checks if check has 'tags' attribute, put the elements into a set and return it.","append var0 into list for every check in self var2 if check has var3 attribute, put elements into set and return it.","return set ( chain ( * [ check . tags for check in self . registered_checks if hasattr ( check , 'tags' ) ] ) )","return set ( chain ( * [ var0 for check in self . var2 if hasattr ( check , var3 ) ] ) )"
"if striped x by '.' character is not contained in ignored, for every x in ext_list put x into a set, return the resulting set.","if striped x by var0 character is not contained in ignored, for every x in var1 put x into set, return resulting set.",return set ( x for x in ext_list if x . strip ( '.' ) not in ignored ),return set ( x for x in var1 if x . strip ( var0 ) not in ignored )
"set the attribute name from value under the DEFAULT_CACHE_ALIAS key of caches dictionary to value, return it.","set attribute name from value under var0 key of caches dict to value, return it.","return setattr ( caches [ DEFAULT_CACHE_ALIAS ] , name , value )","return setattr ( caches [ var0 ] , name , value )"
return settings.DEBUG.,return settings var0 ,return settings . DEBUG,return settings . var0
return settings.LANGUAGE_CODE.,return settings var0 ,return settings . LANGUAGE_CODE,return settings . var0
return settings.TEMPLATE_STRING_IF_INVALID.,return settings var0 ,return settings . TEMPLATE_STRING_IF_INVALID,return settings . var0
"format settings.TEMPLATE_STRING_IF_INVALID with self.var, return the result.",format settings var0 with var1 return result.,return settings . TEMPLATE_STRING_IF_INVALID % self . var,return settings . var0 % var1
"sum sign, int_part and dec_part, return the result.",sum sign var0 and var1 return result.,return sign + int_part + dec_part,return sign + var0 + var1
"create the Singer class with 2 arguments: key appended to string 'django.http.cookies' and salt set to salt, return it.","create var0 class with 2 arguments: key appended to string var1 and salt set to salt, return it.","return Signer ( b'django.http.cookies' + key , salt = salt )","return Signer ( bvar1 + key , salt = salt )"
return singular.,return singular.,return singular,return singular
return singular_suffix.,return var0 ,return singular_suffix,return var0
return sites.,return sites.,return sites,return sites
"call the function six.iteritems with an argument: instance of base class of the MultiValueDict class, return the result.","call function var0 with argument: instance of base class of var1 class, return result.","return six . iteritems ( super ( MultiValueDict , self ) )","return var0 ( super ( var1 , self ) )"
"call the function six.text_type with an argument name, return the result.","call function six var0 with argument name, return result.",return six . text_type ( name ),return six . var0 ( name )
"call the method six.text_type with 3 arguments: s, encoding and string 'replace'.","call method six var0 with 3 arguments: s, encoding and string var1.","return six . text_type ( s , encoding , 'replace' )","return six . var0 ( s , encoding , var1 )"
"return six.text_type(s).encode(encoding, errors).",return var0 errors).,"return six . text_type ( s ) . encode ( encoding , errors )","return six . var1 ( s ) . encode ( encoding , errors )"
"put the results in a list, join the list elements in a string separated by whitespace separator, return the string as the bytes string.   evaluate the method six.text_type(s), on the result call the method encode with the arguments encoding and errors, return the result.","put results in list, join list elements in string separated by var0 separator, return string as bytes string var1 evaluate method six.text_type(s), on result call method encode with arguments encoding and errors, return result.","return six . text_type ( s ) . encode ( encoding , errors )","return six . var3 ( s ) . encode ( encoding , errors )"
"evaluate the method six.text_type(s), on the result call the method encode with encoding as an argument, return the result.","evaluate method six.text_type(s), on result call method encode with encoding as argument, return result.",return six . text_type ( s ) . encode ( encoding ),return six . var1 ( s ) . encode ( encoding )
"call the function six.text_type with an argument self.data.year, return the result without the first 2 elements.",call function six var0 with argument var1 return result var2 first 2 elements.,return six . text_type ( self . data . year ) [ 2 : ],return six . var0 ( var1 ) [ 2 : ]
"call the function six.text_type with an argument self, divide the result with rhs and return the reminder of the division.","call function six var0 with argument self, divide result with rhs and return reminder of division.",return six . text_type ( self ) % rhs,return six . var0 ( self ) % rhs
"call the method six.unichr with an argument c, return the result.","call method var0 with argument c, return result.",return six . unichr ( c ),return var0 ( c )
"call the function six.unichr with value under the text key of the html_entities.name2codepoint dictionary, return the result.","call function var0 with value under text key of var1 name2codepoint dict, return result.",return six . unichr ( html_entities . name2codepoint [ text ] ),return var0 ( var1 . name2codepoint [ text ] )
return size.,return size.,return size,return size
"call the function smart_text with an argument auto_id, format the result with self.html_name, return it.",call function var0 with argument var1 format result with self var4 return it.,return smart_text ( auto_id ) % self . html_name,return var0 ( var1 ) % self . var4
"call the method field.rel.to._meta.pk.to_python with an argument value, use the result as an argument for the call to the,","call method field.rel.to._meta.pk var1 with argument value, use result as argument for call to the,",return smart_text ( field . rel . to . _meta . pk . to_python ( value ) ),return smart_text ( field . rel . to . _meta . pk . var1 ( value ) )
"call the function smart_text with an argument obj, return the result.",call function var0 with argument var1 return result.,return smart_text ( obj ),return var0 ( var1 )
"evaluate the function smart_text with argument self.name, if exists, or an empty string, if not, return the result.","evaluate function var0 with argument var1 if exists, or empty string, if not, return result.",return smart_text ( self . name or '' ),return var0 ( var1 or '' )
"call the smart_text function with an argument token, return the result.","call var0 function with argument token, return result.",return smart_text ( token ),return var0 ( token )
"evaluate the function smart_text with an argument value, return the result.","evaluate function var0 with argument value, return result.",return smart_text ( value ),return var0 ( value )
"call the function smart_text with an argument value, return the result.","call function var0 with argument value, return result.",return smart_text ( value ),return var0 ( value )
sort all_files and return it.,sort var0 and return it.,return sorted ( all_files ),return sorted ( var0 )
"sort value with key set to filed resolve of instance of a class Variable, created with an argument arg, reverse the sort and return the result.",sort value with key set to filed resolve of instance of class var0 created with argument var1 reverse sort and return result.,"return sorted ( value , key = Variable ( arg ) . resolve , reverse = True )","return sorted ( value , key = var0 ( var1 ) . resolve , reverse = True )"
"sort value with key set to filed resolve of instance of a class Variable, created with an argument arg, return the result.",sort value with key set to filed resolve of instance of class var0 created with argument var1 return result.,"return sorted ( value , key = Variable ( arg ) . resolve )","return sorted ( value , key = var0 ( var1 ) . resolve )"
return source and display_name.,return source and var0 ,"return source , display_name","return source , var0"
"return an instance of a SpacelessNode class, created with an argument nodelist.","return instance of var0 class, created with argument var1 ",return SpacelessNode ( nodelist ),return var0 ( var1 )
return split.,return split.,return split,return split
"use the app_config, style and connection as arguments for the call to the sql_create, sql_custom and sql_indexes functions,  append the results respectively, return the result.","use var1 style and connection as arguments for call to var2 var4 and var6 functions var0 append results respectively, return result.","return sql_create ( app_config , style , connection ) + sql_custom ( app_config , style , connection ) + sql_indexes ( app_config , style , connection )","return var2 ( var1 , var0style , var0connection ) + var4 ( var1 , var0style , var0connection ) + var6 ( var1 , var0style , var0connection )"
"return an instance of a SsiNode class, created with 2 arguments: filepath and parsed.","return instance of var0 class, created with 2 arguments: var1 and parsed.","return SsiNode ( filepath , parsed )","return var0 ( var1 , parsed )"
convert it to a string and substitute it for value under the 'cookies' key of the state dictionary.   return state.,convert it to string and substitute it for value under var0 key of state dict var1 return state.,return state,return state
return statements.,return statements.,return statements,return statements
"convert value, self.sep and return value of a method self.signature called with an argument value, concatenate them together, return the result.","convert value var0 and return value of method var1 called with argument value, concatenate var2 together, return result.","return str ( '%s%s%s' ) % ( value , self . sep , self . signature ( value ) )","return str ( '%s%s%s' ) % ( value , var0 , var1 ( value ) )"
"replace all '%s' in string '<%s %s (%s:%s) %s>' with self.__class__.__name__, urlconf_repr, self.app_name,",replace all var0 in string var1 with var4 var5 self var8 ,"return str ( '<%s %s (%s:%s) %s>' ) % ( self . __class__ . __name__ , urlconf_repr , self . app_name , self . namespace , self . regex . pattern )","return str ( '<%s %s(var2) %s>' ) % ( var4 , var5 , self . var8 , self . namespace , self . regex . pattern )"
"get dictionary self items, convert the result into a dictionary, convert the result into a string and return it.","get dict self items, convert result into dict, convert result into string and return it.",return str ( dict ( self . items ( ) ) ),return str ( dict ( self . items ( ) ) )
"sum major and sub, return the result converted to string.","sum major and sub, return result converted to string.",return str ( major + sub ),return str ( major + sub )
return name converted to a string and val.,return name converted to string and var0 ,"return str ( name ) , val","return str ( name ) , var0"
"convert o to an string, return it.","convert o to string, return it.",return str ( o ),return str ( o )
convert self into a string and return it.,convert self into string and return it.,return str ( self ),return str ( self )
"call the function strftime with 2 arguments: self and fmt, return the result.",call function var0 with 2 arguments: self and var1 return result.,"return strftime ( self , fmt )","return var0 ( self , var1 )"
"call the method self.nodelist.render with an argument context, strip the result of the surrounding whitespaces,","call method var0 with argument context, strip result of surrounding var1 ",return strip_spaces_between_tags ( self . nodelist . render ( context ) . strip ( ) ),return strip_spaces_between_tags ( self . nodelist . render ( context ) . strip ( ) )
"call the function strip_tags with an argument value, return the result.","call function var0 with argument value, return result.",return strip_tags ( value ),return var0 ( value )
return style.,return style.,return style,return style
"call the method get_unique_error_message from the base class of the class BaseInlineFormSet, with an argument unique_check, return the result.",call method var0 from base class of class var2 with argument var3 return result.,"return super ( BaseInlineFormSet , self ) . get_unique_error_message ( unique_check )","return super ( var2 , self ) . var0 ( var3 )"
"call the method initial_form_count from the base class of the class BaseInlineFormSet, return the result.",call method var0 from base class of class var2 return result.,"return super ( BaseInlineFormSet , self ) . initial_form_count ( )","return super ( var2 , self ) . var0 ( )"
"call the method _construct_form from the base class of the class BaseModelFormSet, with 2 arguments: i and unpacked dictionary kwargs.",call method var0 from base class of class var1 with 2 arguments: i and unpacked dict var2 ,"return super ( BaseModelFormSet , self ) . _construct_form ( i , ** kwargs )","return super ( var1 , self ) . var0 ( i , ** var2 )"
"call the method initial_form_count from the base class of the class BaseModelFormSet, return the result.",call method var0 from base class of class var2 return result.,"return super ( BaseModelFormSet , self ) . initial_form_count ( )","return super ( var2 , self ) . var0 ( )"
"call the method to_python with an argument data from the base class of the class BooleanField, return the result.",call method var0 with argument data from base class of class var2 return result.,"return super ( BooleanField , self ) . to_python ( value )","return super ( var2 , self ) . var0 ( value )"
"call the method __get__ with 2 arguments: instance and owner, from the base class of the classonlymethod class, return the result.","call method __get__ with 2 arguments: instance and owner, from base class of var0 class, return result.","return super ( classonlymethod , self ) . __get__ ( instance , owner )","return super ( var0 , self ) . __get__ ( instance , owner )"
"call the parse_args method with arguments args and namespace, from the base class of the CommandParser class.",call var0 method with arguments var2 and var3 from base class of var4 class.,"return super ( CommandParser , self ) . parse_args ( args , namespace )","return super ( var4 , self ) . var0 ( var2 , var3 )"
"call the __init__ method with 3 arguments: CRITICAL, unpacked list args and unpacked dictionary kwargs from the base class of Critical.",call var0 method with 3 arguments: var1 unpacked list var2 and unpacked dict var3 from base class of var4 ,"return super ( Critical , self ) . __init__ ( CRITICAL , * args , ** kwargs )","return super ( var4 , self ) . var0 ( var1 , * var2 , ** var3 )"
"call the method to_python with an argument value from the base class of the DateField class, return the result.","call method var0 with argument value from base class of var2 class, return result.","return super ( DateField , self ) . to_python ( value )","return super ( var2 , self ) . var0 ( value )"
"call the __init__ method with 3 arguments: DEBUG, unpacked list args and unpacked dictionary kwargs from the base class of Debug.",call var0 method with 3 arguments: var1 unpacked list var2 and unpacked dict var3 from base class of var4 ,"return super ( Debug , self ) . __init__ ( DEBUG , * args , ** kwargs )","return super ( var4 , self ) . var0 ( var1 , * var2 , ** var3 )"
"call the method default with an argument o from the base class of the class DjangoJSONEncoder, return the result.",call method default with argument o from base class of class var0 return result.,"return super ( DjangoJSONEncoder , self ) . default ( o )","return super ( var0 , self ) . default ( o )"
call the method clean with an argument value from the base class of the EmailField class.,call method clean with argument value from base class of var0 class.,"return super ( EmailField , self ) . clean ( value )","return super ( var0 , self ) . clean ( value )"
"call the __init__ method with 3 arguments: ERROR, unpacked list args and unpacked dictionary kwargs from the base class of Error.",call var0 method with 3 arguments: var1 unpacked list var2 and unpacked dict var3 from base class of var4 ,"return super ( Error , self ) . __init__ ( ERROR , * args , ** kwargs )","return super ( var4 , self ) . var0 ( var1 , * var2 , ** var3 )"
"call the method clean with an argument data from the base class of the class FileField, return the result.",call method clean with argument data from base class of class var0 return result.,"return super ( FileField , self ) . clean ( data )","return super ( var0 , self ) . clean ( data )"
"call the method render from the base class of the class FileInput, called with 3 arguments: name, None and attrs as attrs.",call method render from base class of class var0 called with 3 arguments: name var1 and var2 as var2 ,"return super ( FileInput , self ) . render ( name , None , attrs = attrs )","return super ( var0 , self ) . render ( name , var1 , var2 = var2 )"
"call the __init__ method with 3 arguments: INFO, unpacked list args and unpacked dictionary kwargs from the base class of Info.",call var0 method with 3 arguments: var1 unpacked list var2 and unpacked dict var3 from base class of var4 ,"return super ( Info , self ) . __init__ ( INFO , * args , ** kwargs )","return super ( var4 , self ) . var0 ( var1 , * var2 , ** var3 )"
"call the method _isdst with an argument dt from the base class of the class LocalTimezone, return the result.",call method var0 with argument var1 from base class of class var2 return result.,"return super ( LocalTimezone , self ) . _isdst ( dt )","return super ( var2 , self ) . var0 ( var1 )"
"call the method prepare_value from the base class of the class ModelChoiceField, with an argument value, return the result.","call method var0 from base class of class var2 with argument value, return result.","return super ( ModelChoiceField , self ) . prepare_value ( value )","return super ( var2 , self ) . var0 ( value )"
"for every v in value, return the list of results.   call the method prepare_value the base class of the class ModelMultipleChoiceField, with an argument value, return the result.","for every v in value, return list of results var0 call method var1 base class of class var3 with argument value, return result.","return super ( ModelMultipleChoiceField , self ) . prepare_value ( value )","return super ( var3 , self ) . var1 ( value )"
"call the method __getitem__ from the base class of the class MultiValueDict, with an argument key, return the result..","call method var0 from base class of class var1 with argument key, return result..","return super ( MultiValueDict , self ) . __getitem__ ( key )","return super ( var1 , self ) . var0 ( key )"
"call the method render from the base class of the class NullBooleanSelect, with 4 arguments: name, value, attrs and choices,","call method render from base class of class var0 with 4 arguments: name, value var1 and choices,","return super ( NullBooleanSelect , self ) . render ( name , value , attrs , choices )","return super ( var0 , self ) . render ( name , value , var1 , choices )"
"call the method render from the base class of the class PasswordInput, called with 3 arguments: name, value and attrs,","call method render from base class of class var0 called with 3 arguments: name, value and var1 ","return super ( PasswordInput , self ) . render ( name , value , attrs )","return super ( var0 , self ) . render ( name , value , var1 )"
"call the getvalue method from the base class of the class PythonSerializer, return the result.",call var0 method from base class of class var1 return result.,"return super ( PythonSerializer , self ) . getvalue ( )","return super ( var1 , self ) . var0 ( )"
"call the getvalue method of the base class of the PythonSerializer class, return the result.","call var0 method of base class of var1 class, return result.","return super ( PythonSerializer , self ) . getvalue ( )","return super ( var1 , self ) . var0 ( )"
"call the method pop from the base class of the class QueryDict, with arguments key and unpacked list args, return the result.",call method pop from base class of class var0 with arguments key and unpacked list var1 return result.,"return super ( QueryDict , self ) . pop ( key , * args )","return super ( var0 , self ) . pop ( key , * var1 )"
"call the method popitem from the base class of the class QueryDict, return the result.",call method var0 from base class of class var1 return result.,"return super ( QueryDict , self ) . popitem ( )","return super ( var1 , self ) . var0 ( )"
"call the method setlistdefault from the base class of the class QueryDict, with arguments key and default_list, return the result.",call method var0 from base class of class var1 with arguments key and var2 return result.,"return super ( QueryDict , self ) . setdefault ( key , default )","return super ( var1 , self ) . setdefault ( key , default )"
"call the method setlistdefault from the base class of the class QueryDict, with arguments key and default_list, return the result.",call method var0 from base class of class var1 with arguments key and var2 return result.,"return super ( QueryDict , self ) . setlistdefault ( key , default_list )","return super ( var1 , self ) . var0 ( key , var2 )"
"call the method __init__ from the base class of the class SimpleTemplateResponse, return the result.",call method var0 from base class of class var1 return result.,"return super ( SimpleTemplateResponse , self ) . __iter__ ( )","return super ( var1 , self ) . __iter__ ( )"
return the content field of the base class of the class SimpleTemplateResponse.,return content field of base class of class var0 ,"return super ( SimpleTemplateResponse , self ) . content","return super ( var0 , self ) . content"
"call the clean method wiht value argument from the base class of the SlugField class, return the result.","call clean method var0 value argument from base class of var1 class, return result.","return super ( SlugField , self ) . clean ( value )","return super ( var1 , self ) . clean ( value )"
"call the method setdefault from the base class of the class SortedDict, with 2 arguments key and default, return the result.","call method var0 from base class of class var1 with 2 arguments key and default, return result.","return super ( SortedDict , self ) . setdefault ( key , default )","return super ( var1 , self ) . var0 ( key , default )"
"call the method to_python with an argument value from the base class of the TimeField class, return the result.","call method var0 with argument value from base class of var2 class, return result.","return super ( TimeField , self ) . to_python ( value )","return super ( var2 , self ) . var0 ( value )"
"call the sign method from the base class of the TimestampSigner class with an argument value, return the result","call sign method from base class of var0 class with argument value, return result","return super ( TimestampSigner , self ) . sign ( value )","return super ( var0 , self ) . sign ( value )"
"call the method strftime with an argument fmt, from the base class of the type of dt class.",call method var0 with argument var1 from base class of type of var2 class.,"return super ( type ( dt ) , dt ) . strftime ( fmt )","return super ( type ( var2 ) , var2 ) . var0 ( var1 )"
"call the method clean with an argument data from the base class of the class URLField, return the result.",call method clean with argument data from base class of class var0 return result.,"return super ( URLField , self ) . clean ( value )","return super ( var0 , self ) . clean ( value )"
"call the __init__ method with 3 arguments: WARNING, unpacked list args and unpacked dictionary kwargs from the base class of Warning.",call var0 method with 3 arguments: var1 unpacked list var2 and unpacked dict var3 from base class of var4 ,"return super ( Warning , self ) . __init__ ( WARNING , * args , ** kwargs )","return super ( var4 , self ) . var0 ( var1 , * var2 , ** var3 )"
return supported.,return supported.,return supported,return supported
return supported_code.,return var0 ,return supported_code,return var0
return sys.modules dictionary value under the name key.,return var0 dict value under name key.,return sys . modules [ name ],return var0 [ name ]
return value under the name key of the sys.modules dictionary.,return value under name key of var0 dict.,return sys . modules [ name ],return var0 [ name ]
"if value under the name key of the sys.modules dictionary is not None, return boolean True, otherwise return boolean False.",if value under name key of var0 dict is not var1 return boolean var2 otherwise return boolean var3 ,return sys . modules [ name ] is not None,return var0 [ name ] is not var1
return t.,return var0,return t,return t
"call the method t.render with an argument, instance of Context class, created with an argument dictionary, return the result.","call method var0 with argument, instance of var1 class, created with argument dict, return result.",return t . render ( Context ( dictionary ) ),return var0 ( var1 ( dictionary ) )
"call the function t.render with an argument context, return the result.","call function var0 with argument context, return result.",return t . render ( context ),return var0 ( context )
"call the function t.render with an argument context_instance, return the result.",call function var0 with argument var1 return result.,return t . render ( context_instance ),return var0 ( var1 )
"call the method t.to_language, return the result.",call method t var1 return result.,return t . to_language ( ),return t . var1 ( )
return first element of t.,return first element of var0,return t [ 0 ],return t [ 0 ]
"return tuple, consisting of first element of t converted to lowercase and second element of t.","return tuple, consisting of first element of t converted var0 lowercase and second element of var0","return t [ 0 ] . lower ( ) , t [ 1 ]","return t [ 0 ] . lower ( ) , t [ 1 ]"
"return tuple, consisting of first element of t converted to lowercase and True.","return tuple, consisting of first element of t converted to lowercase and var0 ","return t [ 0 ] . lower ( ) , True","return t [ 0 ] . lower ( ) , var0"
"return boolean True if tag is contained in self.tags_available method return value, return False otherwise.","return boolean var0 if tag is contained in self var2 method return value, return var3 otherwise.",return tag in self . tags_available ( ),return tag in self . var2 ( )
return tempdir.,return var0 ,return tempdir,return var0
return template.,return template.,return template,return template
return template and None.,return template and var0 ,"return template , None","return template , var0"
"call the method context.new with an argument values, use it as an argument for the call to the method template.render, return the result.","call method var0 with argument values, use it as argument for call to method var1 return result.",return template . render ( context . new ( values ) ),return var1 ( context . new ( values ) )
"call the method template.render with an argument context, return the result.","call method var0 with argument context, return result.",return template . render ( context ),return var0 ( context )
"return an instance of Template class, created with 2 arguments: source, origin and name, return the result.","return instance of var0 class, created with 2 arguments: source, origin and name, return result.","return Template ( source , origin , name )","return var0 ( source , origin , name )"
"substitute '%s' in TEMPLATE_FRAGMENT_KEY_TEMPLATE string with fragment_name and args.hexdigest(), respectively, return the result.","substitute var0 in var1 string with var3 and args.hexdigest(), respectively, return result.","return TEMPLATE_FRAGMENT_KEY_TEMPLATE % ( fragment_name , args . hexdigest ( ) )","return var1 % ( var3 , var5 ( ) )"
return template_name.,return var0 ,return template_name,return var0
"return an instance of TemplateLiteral with 2 arguments: result of the function self.template_parser.compile_filter,",return instance of var0 with 2 arguments: result of function self var2 var3 ,"return TemplateLiteral ( self . template_parser . compile_filter ( value ) , value )","return var0 ( self . var2 . var3 ( value ) , value )"
return an instance of TemplateSyntaxError class with an argument msg.,return instance of var0 class with argument msg.,return TemplateSyntaxError ( msg ),return var0 ( msg )
"where '%s' is replaced with tag and TemplateTagNode.mapping converted into a list.   return an instance of a TemplateTagNode class, created with an argument tag.","var0 var1 is replaced with tag and var2 mapping converted into list var6 return instance of var2 class, created with argument tag.",return TemplateTagNode ( tag ),return var2 ( tag )
return templatetags_modules.,return var0 ,return templatetags_modules,return var0
return text.,return text.,return text,return text
"if not an empty string, and truncate, return the result.   return text.","if not empty string, and truncate, return result var0 return text.",return text,return text
"call the method text.__html__, return the result.",call method var0 return result.,return text . __html__ ( ),return var0 ( )
"call the method tf.format with an argument format_string, return the result.",call method var0 with argument var1 return result.,return tf . format ( format_string ),return var0 ( var1 )
return the_path.,return var0 ,return the_path,return var0
"call the function time_format with 3 arguments: value, string 'TIME_FORMAT' and use_l10n as use_l10n, return the result.","call function var0 with 3 arguments: value, string var2 and var3 as var3 return result.","return time_format ( value , 'TIME_FORMAT' , use_l10n = use_l10n )","return var0 ( value , var2 , var3 = var3 )"
"call the function time_format with 2 arguments: value and arg, return the result.",call function var0 with 2 arguments: value and var1 return result.,"return time_format ( value , arg )","return var0 ( value , var1 )"
"append string '-0000' to time_str, return the result.",append string var0 to var1 return result.,return time_str + '-0000',return var1 + var0
"format string '%+03d:%02d' with hour and minute, append it to time_str, return the result.","format string var0 with hour and minute, append it to var1 return result.","return time_str + '%+03d:%02d' % ( hour , minute )","return var1 + var0 % ( hour , minute )"
"format string '%+03d%02d' with hour and minute, append it to time_str, return the result.","format string var0 with hour and minute, append it to var1 return result.","return time_str + '%+03d%02d' % ( hour , minute )","return var1 + var0 % ( hour , minute )"
"append 'Z' to time_str, return the result.",append var0 to var1 return result.,return time_str + 'Z',return var1 + var0
"call the function timedelta with an argument integer 0, return the result.","call function var0 with argument integer 0, return result.",return timedelta ( 0 ),return var0 ( 0 )
"call the function timedelta with an argument seconds as negative time.altzone, return the result.",call function var0 with argument seconds as negative var1 return result.,return timedelta ( seconds = - time . altzone ),return var0 ( seconds = - var1 )
"call the function timedelta with an argument seconds as negative time.timezone, subtract the result from the result of the call,","call function var0 with argument seconds as negative var1 subtract result from result of call,",return timedelta ( seconds = - time . altzone ) - timedelta ( seconds = - time . timezone ),return var0 ( seconds = - time . altzone ) - var0 ( seconds = - var1 )
"call the function timedelta with an argument seconds as negative time.timezone, return the result.",call function var0 with argument seconds as negative var1 return result.,return timedelta ( seconds = - time . timezone ),return var0 ( seconds = - var1 )
"evaluate the function timesince with d, now and reversed set to boolean true as arguments, return the result.","evaluate function var0 with d, now and reversed set to boolean true as arguments, return result.","return timesince ( d , now , reversed = True )","return var0 ( d , now , reversed = True )"
"call the function timesince with 2 arguments: value and arg, return the result.",call function var0 with 2 arguments: value and var1 return result.,"return timesince ( value , arg )","return var0 ( value , var1 )"
"call the function timesince with an argument value, return the result.","call function var0 with argument value, return result.",return timesince ( value ),return var0 ( value )
"instantiate the TimestampSigner object with arguments key and salt set to salt, call its method sign with an argument base64, return it.","instantiate var0 object with arguments key and salt set to salt, call its method sign with argument var1 return it.","return TimestampSigner ( key , salt = salt ) . sign ( base64d )","return var0 ( key , salt = salt ) . sign ( base64d )"
"call the function timeuntil with 2 arguments value and arg, return the result.",call function var0 with 2 arguments value and var1 return result.,"return timeuntil ( value , arg )","return var0 ( value , var1 )"
"call the method timezone.localize with 2 arguments: value and is_dst as None, return the result.",call method var0 with 2 arguments: value and var1 as var3 return result.,"return timezone . localize ( value , is_dst = None )","return var0 ( value , var1 = var3 )"
"call the function timezone.make_aware with arguments value and current_timezone, return the result.",call function timezone var1 with arguments value and var2 return result.,"return timezone . make_aware ( value , current_timezone )","return timezone . var1 ( value , var2 )"
"call the function timezone.make_naive with 2 arguments value, current_timezone, return the result.",call function timezone var1 with 2 arguments value var2 return result.,"return timezone . make_naive ( value , current_timezone )","return timezone . var1 ( value , var2 )"
"call the method timezone.tzname with an argument None, return the result.",call method var0 with argument var1 return result.,return timezone . tzname ( None ),return var0 ( var1 )
return timezone.zone.,return var0 ,return timezone . zone,return var0
return token.,return token.,return token,return token
return total_forms.,return var0 ,return total_forms,return var0
"call the method tpl.format with an arguments self.name, self.sysid and self.pubid.",call method var0 with arguments var1 var2 and var3 ,"return tpl . format ( self . name , self . sysid , self . pubid )","return var0 ( var1 , var2 , var3 )"
call the method tpl.format with an arguments self.sysid and self.pubid.,call method var0 with arguments var1 and var2 ,"return tpl . format ( self . sysid , self . pubid )","return var0 ( var1 , var2 )"
return translated.,return translated.,return translated,return translated
return translation.,return translation.,return translation,return translation
"call strip s of the surrounding whitespaces, substitute every occurrence of the whitespace in the trim_whitespace_re with previous result, return the result.","call strip s of surrounding var0 substitute every occurrence of whitespace in var1 with previous result, return result.","return trim_whitespace_re . sub ( ' ' , s . strip ( ) )","return var1 . sub ( ' ' , s . strip ( ) )"
return boolean True.,return boolean var0 ,return True,return var0
return is boolean True.,return is boolean var0 ,return True,return var0
"and data, if it evaluates to true,    return boolean  True.","and data, if it evaluates to true var1 return boolean var2var0",return True,return var2
"where '%d' is replaced with name, dlen subtracted from alen, and plen.   return boolean True.",var0 var1 is replaced with name var2 subtracted from var3 and var4 return boolean var7 ,return True,return var7
"to_locale called with an argument lang_code, if the result is not None,   return boolean True.",var0 called with argument var1 if result is not var3 return boolean var5 ,return True,return var5
"format truncate with a dictionary with an element: text for 'truncated_text', return the result.","format truncate with dict with element: text for var0, return result.",return truncate % { 'truncated_text' : text },return truncate % { var0 : text }
"instantiate class Truncator, with an argument value, call the method chars on the result with 2 arguments length,","instantiate class var0 with argument value, call method chars on result with 2 arguments length,","return Truncator ( value ) . chars ( length , html = True )","return var0 ( value ) . chars ( length , html = True )"
"instantiate class Truncator, with an argument value, call the method chars on the result with an argument length, return the result.","instantiate class var0 with argument value, call method chars on result with argument length, return result.",return Truncator ( value ) . chars ( length ),return var0 ( value ) . chars ( length )
"instantiate class Truncator, with an argument value, call the method words on the result with 3 arguments length,","instantiate class var0 with argument value, call method words on result with 3 arguments length,","return Truncator ( value ) . words ( length , html = True , truncate = ' ...' )","return var0 ( value ) . words ( length , html = True , truncate = '...' )"
"instantiate class Truncator, with an argument value, call the method words on the result with 2 arguments length,","instantiate class var0 with argument value, call method words on result with 2 arguments length,","return Truncator ( value ) . words ( length , truncate = ' ...' )","return var0 ( value ) . words ( length , truncate = '...' )"
"if tt.tm_isdst is greater than integer 0, return the result.","if tt var1 is greater var2 integer 0, return result.",return tt . tm_isdst > 0,return tt . var1 > 0
"if tt.tm_isdst is greater than intger 0, return boolean True, otherwise return boolean False.","if tt var1 is greater var2 var3 0, return boolean var4 otherwise return boolean var5 ",return tt . tm_isdst > 0,return tt . var1 > 0
"if fh has an attribute a, for every a in WRAPPER_ASSIGNMENTS, put a into a tuple, return the resulting tuple.","if var0 has attribute a, for every in var1 put into tuple, return resulting tuple.","return tuple ( a for a in WRAPPER_ASSIGNMENTS if hasattr ( fn , a ) )","return tuple ( a for a in var1 if hasattr ( fn , a ) )"
"convert app_template_dirs to a tuple, return it.","convert var0 to tuple, return it.",return tuple ( app_template_dirs ),return tuple ( var0 )
"add bits to a tuple, return it.","add bits to tuple, return it.",return tuple ( bits ),return tuple ( bits )
"call the method type.__new__ with 4 arguments: cls, name, empty tuple and d, return the result.","call method var0 with 4 arguments: cls, name, empty tuple and d, return result.","return type . __new__ ( cls , name , ( ) , d )","return var0 ( cls , name , ( ) , d )"
"can_delete for 'can_delete', min_num for 'min_num', max_num for 'max_num', absolute_max for 'absolute_max',   validate_min for 'validate_min' for validate_max for 'validate_max'.   create a class class which name is generated by converting 'FormSet' into a string and appending it to form.__name__,","_delete for var0, min_num for var5, max_num for var10, absolute_max for var13 var14 validate_min for var19 for validate_max for var22 var14 create class class var23 name is generated by converting var24 into string and appending it to var27 ","return type ( form . __name__ + str ( 'FormSet' ) , ( formset , ) , attrs )","return type ( var27 + str ( var24 ) , ( formset , ) , attrs )"
"get the type of form object, return an instance of resulting class created with 3 arguments: class_name, tuple with an element form,","get type of form object, return instance of resulting class created with 3 arguments: var0 tuple with element form,","return type ( form ) ( class_name , ( form , ) , form_class_attrs )","return type ( form ) ( var0 , ( form , ) , form_class_attrs )"
"call the __bool__ method with argument self, on the return value of the type function with argument self, return the result.","call var0 method with argument self, on return value of type function with argument self, return result.",return type ( self ) . __bool__ ( self ),return type ( self ) . var0 ( self )
"evaluate the method type(self).__bool__ with argument self, return the result.","evaluate method var0 with argument self, return result.",return type ( self ) . __bool__ ( self ),return var0 ( self )
"get the type of self object, call the __bool__ method on the result with an argument self, return the result.","get type of self object, call var0 method on result with argument self, return result.",return type ( self ) . __bool__ ( self ),return type ( self ) . var0 ( self )
"get the type of self object, call its method __bool__ with an argument self, return the result.","get type of self object, call its method var0 with argument self, return result.",return type ( self ) . __bool__ ( self ),return type ( self ) . var0 ( self )
"get the type of the self object, on the result call the __bool__ method with an argument self, return the result.","get type of self object, on result call var0 method with argument self, return result.",return type ( self ) . __bool__ ( self ),return type ( self ) . var0 ( self )
"call the function type with an argument self, on the result call the method __next__ with an argument self, return the result.","call function type with argument self, on result call method var0 with argument self, return result.",return type ( self ) . __next__ ( self ),return type ( self ) . var0 ( self )
"call the method types.MethodType with 3 arguments: func, obj and obj.__class__, return the result.","call method types var0 with 3 arguments: var1 var2 and var2 __class__, return result.","return types . MethodType ( func , obj , obj . __class__ )","return types . var0 ( var1 , var2 , var2 . __class__ )"
"call the function ugettext with an argument string ""Please correct the duplicate data for %(field_name)s which must be unique for,","call function var0 with argument string ""Please correct duplicate data for var2 var4 must be unique for,","return ugettext ( 'Please correct the duplicate data for %(field_name)s ' 'which must be unique for the %(lookup)s in %(date_field)s.' ) % { 'field_name' : date_check [ 2 ] , 'date_field' : date_check [ 3 ] , 'lookup' : six . text_type ( date_check [ 1 ] ) , }","return var0 ( 'var1 correct the duplicate data for %(var3)s var4 must be unique for the %(lookup)s in %(date_field)s.' ) % { 'var3' : date_check [ 2 ] , 'date_field' : date_check [ 3 ] , 'lookup' : six . text_type ( date_check [ 1 ] ) }"
"call the function ugettext with an argument string ""Please correct the duplicate data for %(field)s, which must be unique."",","call function var0 with argument string var1,","return ugettext ( 'Please correct the duplicate data for %(field)s, ' 'which must be unique.' ) % { 'field' : get_text_list ( unique_check , six . text_type ( _ ( 'and' ) ) ) , }","return var0 ( 'Please correct the duplicate data for %(field)s, which must be unique.' ) % { 'field' : get_text_list ( unique_check , six . text_type ( _ ( 'and' ) ) ) }"
"call the function ugettext with an argument string ""Please correct the duplicate data for %(field)s."",","call function var0 with argument string var1,","return ugettext ( 'Please correct the duplicate data for %(field)s.' ) % { 'field' : unique_check [ 0 ] , }",return var0 ( 'Please correct the duplicate data for %(field)s.' ) % { 'field' : unique_check [ 0 ] }
"call the function ugettext with an argument string ""Please correct the duplicate values below."", return the result.","call function var0 with argument string var1, return result.",return ugettext ( 'Please correct the duplicate values below.' ),return var0 ( 'Please correct the duplicate values below.' )
call the function ugettext with an argument message.,call function var0 with argument message.,return ugettext ( message ),return var0 ( message )
"call the function ugettext_lazy with an argument value, return the result.","call function var0 with argument value, return result.",return ugettext_lazy ( value ),return var0 ( value )
return unbound.,return unbound.,return unbound,return unbound
return unbound.im_func.,return unbound var1 ,return unbound . im_func,return unbound . var1
"call the function ungettext with 3 arguments: singular, plural and number, return the result.","call function var0 with 3 arguments: singular, plural and number, return result.","return ungettext ( singular , plural , number )","return var0 ( singular , plural , number )"
"replace every occurrence of raw string '\\' in s with a raw string '\\\\', use the result and string ""unicode_escape"",","replace every occurrence of raw string var0 in s with raw string var1, use result and string var3,","return unicode ( s . replace ( r'\\' , r'\\\\' ) , 'unicode_escape' )","return unicode ( s . replace ( '\\\\' , '\\\\\\\\' ) , var3 )"
"call the function update_wrapper with 2 arguments: wrapper and user_function, return the result.",call function var0 with 2 arguments: wrapper and var1 return result.,"return update_wrapper ( wrapper , user_function )","return var0 ( wrapper , var1 )"
return boolean upload.,return boolean upload.,return upload,return upload
return url.,return url.,return url,return url
"join prefix and path into an url, return it.","join prefix and path into url, return it.","return urljoin ( prefix , path )","return urljoin ( prefix , path )"
"call the urljoin function with arguments: self.base_url and result of the call to the function filepath_to_uri with argument name, return the result.","call var0 function with arguments: self var2 and result of call to function var3 with argument name, return result.","return urljoin ( self . base_url , filepath_to_uri ( name ) )","return var0 ( self . var2 , var3 ( name ) )"
"return an instance of a URLNode class, created with 4 arguments viewname, args, kwargs and asvar.","return instance of var0 class, created with 4 arguments var1 var2 var3 and var4 ","return URLNode ( viewname , args , kwargs , asvar )","return var0 ( var1 , var2 , var3 , var4 )"
"call the function urlquote with 2 arguments value and unpacked dictionary kwargs, return the result.",call function var0 with 2 arguments value and unpacked dict var1 return result.,"return urlquote ( value , ** kwargs )","return var0 ( value , ** var1 )"
return usage.,return usage.,return usage,return usage
"call the method ustring_re.sub with 2 arguments: fix and s, return the result.","call method var0 sub with 2 arguments: fix and s, return result.","return ustring_re . sub ( fix , s )","return var0 . sub ( fix , s )"
return val.,return var0 ,return val,return var0
return val and encoded as a tuple.,return var0 and encoded as tuple.,"return val , encoded","return var0 , encoded"
"if val is an instance of bytes, return val, otherwise return result of the method val.encode called with an argument encoding.","if var0 is instance of bytes, return var0 otherwise return result of method var0 encode called with argument encoding.","return val if isinstance ( val , bytes ) else val . encode ( encoding )","return var0 if isinstance ( var0 , bytes ) else var0 . encode ( encoding )"
return valid.,return valid.,return valid,return valid
"instantiate ValidationError class with an argument self.data, return its field error_list.",instantiate var0 class with argument var1 return its field var2 ,return ValidationError ( self . data ) . error_list,return var0 ( var1 ) . var2
return value.,return value.,return value,return value
return value,return value,return value,return value
"code set to string 'max_whole_digits' and params set to a dictionary with an entry: difference of the self.max_digits and self.decimal_places, for 'max'.    return value.",code set to string var0 and var1 set to dict with entry: difference of self var3 and self var5 for var6 var7 return value.,return value,return value
"return value,","return value,",return value,return value
code set to an string 'invalid_choice' and dictionary params with an entry: value for 'value'.   return value.,code set to string var0 and dict var1 with entry: value for var2 var3 return value.,return value,return value
code set to a string 'invalid_choice'.   return value.,code set to string var0 var1 return value.,return value,return value
"message, code as a string 'ambiguous_timezone' and params as params,   and third element of the return value of the function sys.exc_info.   return value.","message, code as string var0 and var1 as var1 and third element of return value of function sys var6 return value.",return value,return value
"call the method value.center with an argument, arg converted into a integer, return the result.","call method var0 with argument var1 converted into integer, return result.",return value . center ( int ( arg ) ),return var0 ( int ( var1 ) )
"call the method value.date, return the result.",call method var0 return result.,return value . date ( ),return var0 ( )
"call the method value.ljust with an argument, arg converted into a integer, return the result.","call method var0 with argument var1 converted into integer, return result.",return value . ljust ( int ( arg ) ),return var0 ( int ( var1 ) )
convert value to lowercase and return the result.,convert value to lowercase and return result.,return value . lower ( ),return value . lower ( )
return value.pk.,return value.pk.,return value . pk,return value . pk
"replace all occurrences of '\\' with '\\\\' in value, replace all occurrences of '""' with '\\""' in the previous result,","replace all occurrences of var0 with var1 in value, replace all occurrences of var3 with var4 in previous result,","return value . replace ( '\\' , '\\\\' ) . replace ( ''' , '\\'' ) . replace ( ''' , '\\'' )","return value.replace('\\', '\\\\').replace(''', '\\'').replace(''', '\\'')"
"replace every occurrence of ' ' in value for '\xa0', return the result.","replace every occurrence of var0 in value for var1, return result.","return value . replace ( ' ' , '\xa0' )","return value . replace ( var0 , '\xa0' )"
"call the method value.replace with an arugment tzinfo set to None, return the result.",call method var0 with var1 var2 set to var3 return result.,return value . replace ( tzinfo = None ),return var0 ( var2 = var3 )
"call the method value.replace with an argument tzinfo as timezone, return the result.",call method var0 with argument var1 as var2 return result.,return value . replace ( tzinfo = timezone ),return var0 ( var1 = var2 )
"call the method value.rjust with an argument, arg converted into a integer, return the result.","call method var0 with argument var1 converted into integer, return result.",return value . rjust ( int ( arg ) ),return var0 ( int ( var1 ) )
"call the method value.serializable_value with an argument self.to_field_name, return the result.",call method value var1 with argument self var3 return result.,return value . serializable_value ( self . to_field_name ),return value . var1 ( self . var3 )
"get_format called with an argument string 'DATETIME_INPUT_FORMATS', substitute the result for format.   call the method value.strftime with an argument format, return the result.","var0 called with argument string var1, substitute result for format var2 call method var3 with argument format, return result.",return value . strftime ( format ),return var3 ( format )
"get_format called with an argument string 'DATE_INPUT_FORMATS', substitute the result for format.   call the method value.strftime with an argument format, return the result.","var0 called with argument string var1, substitute result for format var2 call method var3 with argument format, return result.",return value . strftime ( format ),return var3 ( format )
"get_format called with an argument string 'TIME_INPUT_FORMATS', substitute the result for format.   call the method value.strftime with an argument format, return the result.","var0 called with argument string var1, substitute result for format var2 call method var3 with argument format, return result.",return value . strftime ( format ),return var3 ( format )
"strip whitespaces from both sides of the value, return the result.","strip var0 from both sides of value, return result.",return value . strip ( ),return value . strip ( )
"if value.tzinfo is None and call to the method value.tzinfo.utcoffset called with an argument value evaluates to None,",if var0 is var1 and call to method var0 utcoffset called with argument value evaluates to var1 ,return value . tzinfo is None or value . tzinfo . utcoffset ( value ) is None,return var0 is var1 or var0 . utcoffset ( value ) is var1
"if value.tzinfo is not None and call to the method value.tzinfo.utcoffset called with an argument value evaluates to not None,",if var0 is not var1 and call to method var0 utcoffset called with argument value evaluates to not var1 ,return value . tzinfo is not None and value . tzinfo . utcoffset ( value ) is not None,return var0 is not var1 and var0 . utcoffset ( value ) is not var1
"convert value to uppercase, return the result.","convert value to uppercase, return result.",return value . upper ( ),return value . upper ( )
return last element of value.,return last element of value.,return value [ - 1 ],return value [ - 1 ]
return first element of value.,return first element of value.,return value [ 0 ],return value [ 0 ]
"slice the list value with unpacked list bits as an argument, return the result.","slice list value with unpacked list bits as argument, return result.",return value [ slice ( * bits ) ],return value [ slice ( * bits ) ]
"sum value and arg, return the result.",sum value and var0 return result.,return value + arg,return value + var0
"if value is false, return it, if it is true convert first element of value to uppercase letter, return the value.","if value is false, return it, if it is true convert first element of value to uppercase letter, return value.",return value and value [ 0 ] . upper ( ) + value [ 1 : ],return value and value [ 0 ] . upper ( ) + value [ 1 : ]
"default string value, substitute it for value.   return value if six.PY2 is true, if not return value.encode(ISO_8859_1).","default string value, substitute it for value var0 return value if six var1 is true, if not return value.encode(ISO_8859_1).",return value if six . PY2 else value . encode ( ISO_8859_1 ),return value if six . var1 else value . encode ( var2 )
"default string value, substitute it for value.   return value if six.PY2 is true, if not return value.encode(ISO_8859_1).decode(UTF_8).","default string value, substitute it for value var0 return value if six var1 is true, if not return value.encode(ISO_8859_1).decode(UTF_8).",return value if six . PY2 else value . encode ( ISO_8859_1 ) . decode ( UTF_8 ),return value if six . var1 else value . encode ( var3 ) . decode ( var4 )
"return value, if it is None return arg.","return value, if it is var0 return var1 ",return value or arg,return value or var1
"string ""resolve_variable() is deprecated. Use django.template. Variable(path).resolve(context) instead"", RemovedInDjango20Warning,   and stacklevel set to integer 2.   call the method resolve with an argument context, from the instance of Variable class, created with an argument path.","string var0 var1 and var5 set to integer 2 var3 call method resolve with argument context, from instance of Variable class, created with argument path.",return Variable ( path ) . resolve ( context ),return Variable ( path ) . resolve ( context )
return an instance of VariableNode class with an argument filter_expression.,return instance of var0 class with argument var1 ,return VariableNode ( filter_expression ),return var0 ( var1 )
"call the method nodelist.render with an argument, an instance of Context class, use the result as an argument for the creation of,","call method var0 with argument, instance of var1 class, use result as argument for creation of,",return VerbatimNode ( nodelist . render ( Context ( ) ) ),return VerbatimNode ( nodelist . render ( var1 ( ) ) )
return version,return version,return version,return version
"sum version and delta together, return the result.","sum version and delta together, return result.",return version + delta,return version + delta
"with the argument view, store the result in the view.   return view","with argument view, store result in view var0 return view",return view,return view
"where string '%s' is replaced by mod_name and func_name, respectively.   return view_func.",var0 string var1 is replaced by var2 and var4 respectively var6 return var7 ,return view_func,return var7
return week_number.,return var0 ,return week_number,return var0
"call the method self.data.weekday, use the result as an key for obtaining WEEKDAYS dictionary value, return it.","call method var0 use result as key for obtaining var1 dict value, return it.",return WEEKDAYS [ self . data . weekday ( ) ],return var1 [ self . data . weekday ( ) ]
"call the method self.data.weekday, use the result as an key for obtaining WEEKDAYS_ABBR dictionary value, return it.","call method var0 use result as key for obtaining var1 dict value, return it.",return WEEKDAYS_ABBR [ self . data . weekday ( ) ],return var1 [ self . data . weekday ( ) ]
"if not, substitute self.auto_id for id_.   call the method widget.id_for_label with an argument id_, return the result.","if not, substitute self var1 for var2 call method widget var6 with argument var2 return result.",return widget . id_for_label ( id_ ),return widget . var6 ( var2 )
"return an instance of a class WidthRatioNode, created with 4 arguments: result of the method parser.compile_filter,",return instance of class var0 created with 4 arguments: result of method parser var2 ,"return WidthRatioNode ( parser . compile_filter ( this_value_expr ) , parser . compile_filter ( max_value_expr ) , parser . compile_filter ( max_width ) , asvar = asvar )","return var0 ( parser . var2 ( this_value_expr ) , parser . var2 ( max_value_expr ) , parser . var2 ( max_width ) , asvar = asvar )"
"return an instance of a class WithNode, created with 4 arguments: None, None, nodelist and extra_context as extra_context.",return instance of class var0 created with 4 arguments: var1 None var3 and var4 as var4 ,"return WithNode ( None , None , nodelist , extra_context = extra_context )","return var0 ( var1 , var1 , var3 , var4 = var4 )"
"call the method wrap with 2 arguments, value and arg converted into a integer, return the result.","call method wrap with 2 arguments, value and var0 converted into integer, return result.","return wrap ( value , int ( arg ) )","return wrap ( value , int ( var0 ) )"
return wrapped.,return wrapped.,return wrapped,return wrapped
return wrapper.,return wrapper.,return wrapper,return wrapper
"and unpacked dictionary kwargs, return the result.   return wrapper.",and unpacked dict var0 return result var1 return wrapper.,return wrapper,return wrapper
return WRAPPER_ASSIGNMENTS.,return var0 ,return WRAPPER_ASSIGNMENTS,return var0
"substitute func for _dec._decorated_function.   call the function wraps with an argument func, call the result with an argument _dec, return the result.",substitute var0 for var2 _decorated_function var3 call function wraps with argument var0 call result with argument var2 return result.,return wraps ( func ) ( _dec ),return wraps ( var0 ) ( var2 )
return WSGIHandler object.,return var0 object.,return WSGIHandler ( ),return var0 ( )
return x.,return var0,return x,return x
return yes.,return yes.,return yes,return yes
"call the method zbuf.getvalue, return the result.",call method var0 return result.,return zbuf . getvalue ( ),return var0 ( )
return ZERO.,return var0 ,return ZERO,return var0
call the method zipfile.ZipFile.read with 2 arguments: self and first element of the result of the self.namelist method.,call method zipfile var1 read with 2 arguments: self and first element of result of var2 method.,"return zipfile . ZipFile . read ( self , self . namelist ( ) [ 0 ] )","return zipfile . var1 . read ( self , var2 ( ) [ 0 ] )"
"call the method handler.upload_complete, substitute the result for retval.",call method handler var1 substitute result for var2 ,retval = handler . upload_complete ( ),var2 = handler . var1 ( )
substitute newretval for retval.,substitute var0 for var1 ,retval = newretval,var1 = var0
substitute self for retval.,substitute self for var0 ,retval = self,var0 = self
assign rev_suplx the hexadecimal value of suplX,assign var0 hexadecimal value of var1,rev_suplx = hex ( suplX ),var0 = hex ( var1 )
assign rev_suplx the reversed hexadecimal value of suplX,assign var0 reversed hexadecimal value of var1,rev_suplx = hex ( suplX ) [ : : - 1 ],var0 = hex ( var1 ) [ : : - 1 ]
set rev_suplx to the reversed hexadecimal value of suplX,set var0 to reversed hexadecimal value of var1,rev_suplx = hex ( suplX ) [ : : - 1 ],var0 = hex ( var1 ) [ : : - 1 ]
store in rev_suplx the reverse of the variable suplX,store in var0 reverse of variable var1,rev_suplx = suplX [ : : - 1 ],var0 = var1 [ : : - 1 ]
"use the result as an argument for the call to the function iri_to_uri, return the result.   call the function lazy with arguments reverse and str, substitute the results for reverse_lazy.",use result as argument for call to function var0 return result var1 call function lazy with arguments reverse and var2 substitute results for var3 ,"reverse_lazy = lazy ( reverse , str )","var3 = lazy ( reverse , var2 )"
"if self.is_reversed is true, substitute reversed_text is an string ' reversed', if not, reversed_text is an empty string.","if self var1 is true, substitute var2 is string var6, if not var2 is empty string.",reversed_text = ' reversed' if self . is_reversed else '',var2 = var6 if self . var1 else ''
"call the function re.compile with an argument raw string '^\w{3}, %s %s %s %s GMT$' formated with __D, __M, __Y and __T,","call function var0 with argument raw string var1 formated with __D, __M, __Y and __T,","RFC1123_DATE = re . compile ( r'^\w{3}, %s %s %s %s GMT$' % ( __D , __M , __Y , __T ) )","RFC1123_DATE = var0 ( rvar1 % ( __D , __M , __Y , __T ) )"
"substitute the result for RFC1123_DATE.   call the function re.compile with an argument raw string '^\w{6,9}, %s-%s-%s %s GMT$' formated with __D, __M, __Y2 and __T,","substitute result for var0 call function var3 with argument raw string var4 formated with __D, __M var5 and var6 ","RFC850_DATE = re . compile ( r'^\w{6,9}, %s-%s-%s %s GMT$' % ( __D , __M , __Y2 , __T ) )","RFC850_DATE = var3 ( rvar4 % ( __D , __M , var5 , var6 ) )"
"call the function formatdate with an argument epoch_seconds, substitute the result for rfcdate.",call function var0 with argument var1 substitute result for var2 ,rfcdate = formatdate ( epoch_seconds ),var2 = var0 ( var1 )
"append string "".moves.urllib_robotparser"" to __name__, use it as an key to get the value from the sys.modules dictionary, substitute it for robotparser.","append string var0 to var1 use it as key to get value from var2 dict, substitute it for robotparser.",robotparser = sys . modules [ __name__ + '.moves.urllib_robotparser' ],robotparser = var2 [ var1 + '.moves.urllib_robotparser' ]
"split part by '=' character, substitute the result for role and instructions, respectively.","split part by var0 character, substitute result for role and instructions, respectively.","role , instructions = part . split ( '=' )","role , instructions = part . split ( var0 )"
convert role to uppercase.,convert role to uppercase.,role = role . upper ( ),role = role . upper ( )
substitute self._rollback for rollback.,substitute var0 for rollback.,rollback = self . _rollback,rollback = var0
substitute nonlocal_root for a tuple with an element root.,substitute var0 for tuple with element root.,"root , = nonlocal_root","root , = var0"
substitute nonlocal_root for tuple root.,substitute var0 for tuple root.,"root , = nonlocal_root","root , = var0"
"root is a list with elements: root, root, None and None.","root is list with elements: root, root var0 and var0 ","root [ : ] = [ root , root , None , None ]","root [ : ] = [ root , root , var0 , var0 ]"
"root is an list with 4 elements: root, root, None and None.","root is list with 4 elements: root, root var0 and var0 ","root [ : ] = [ root , root , None , None ]","root [ : ] = [ root , root , var0 , var0 ]"
root dictionary values under the KEY and RESULT keys are both None.,root dict values under var0 and var1 keys are both var2 ,root [ KEY ] = root [ RESULT ] = None,root [ var0 ] = root [ var1 ] = var2
root is an empty list.,root is empty list.,root = [ ],root = [ ]
"get config dictionary element under 'root' key, if it exists substitute it for root, if not, root is None.","get var0 dict element under var1 key, if it exists substitute it for root, if not, root is var2 ","root = config . get ( 'root' , None )","root = var0 . get ( var1 , var2 )"
"call the method logging.getLogger, substitute the result for root.",call method logging var1 substitute result for root.,root = logging . getLogger ( ),root = logging . var1 ( )
substitute logging.root for root.,substitute var0 for root.,root = logging . root,root = var0
get maximal element from roots and substitute it for root.,get maximal element from roots and substitute it for root.,root = max ( roots ),root = max ( roots )
substitute first element of nonlocal_root for root.,substitute first element of var0 for root.,root = nonlocal_root [ 0 ],root = var0 [ 0 ]
substitute value under the NEXT key of the oldroot dictionary for root and first element of nonlocal_root.,substitute value under var0 key of var1 dict for root and first element of var2 ,root = nonlocal_root [ 0 ] = oldroot [ NEXT ],root = var2 [ 0 ] = var1 [ var0 ]
rot is the sum of y and x modulo 256,rot is sum of y and x var0 256,rot = ( y + x ) % 256,rot = ( y + x ) % 256
rot is an integer 13,rot is integer 13,rot = 13,rot = 13
set the variable ROT to the first command-line argument casted into an boolean,set variable var0 to first command-line argument casted into boolean,ROT = bool ( sys . argv [ 1 ] ),var0 = bool ( sys . argv [ 1 ] )
assign the variable ROT the first command-line argument converted to integer,assign variable var0 first command-line argument converted to integer,ROT = int ( sys . argv [ 1 ] ),var0 = int ( sys . argv [ 1 ] )
set the variable ROT to the first command-line argument converted into an integer,set variable var0 to first command-line argument converted into integer,ROT = int ( sys . argv [ 1 ] ),var0 = int ( sys . argv [ 1 ] )
set the variable ROT to the first command-line argument casted into an integer,set variable var0 to first command-line argument casted into integer,ROT = int ( sys . argv [ 1 ] ),var0 = int ( sys . argv [ 1 ] )
set the variable ROT to the 5th command-line argument casted into an integer,set variable var0 to 5th command-line argument casted into integer,ROT = int ( sys . argv [ 5 ] ),var0 = int ( sys . argv [ 5 ] )
"substitute the '%s' with table and list containing key, respectively.   call the cursor.fetchone method, substitute the result for row.","substitute var0 with table and list containing key, respectively var1 call cursor.fetchone method, substitute result for row.",row = cursor . fetchone ( ),row = cursor . fetchone ( )
"row_data is an generator object that returns value under the field key of form.cleaned_data dictionary,","var0 is generator object var1 returns value under field key of form var3 dict,",row_data = ( form . cleaned_data [ field ] for field in unique_check if field in form . cleaned_data ),var0 = ( form . var3 [ field ] for field in unique_check if field in form . var3 )
"for every field in unique_check, if field is contained in form.cleaned_data.   create a generator that for every d in row_data, if d has an '_get_pk_val' attribute,","for every field in var0 if field is contained in form var3 create generator var5 for every d in var6 if d has var8 attribute,","row_data = tuple ( d . _get_pk_val ( ) if hasattr ( d , '_get_pk_val' ) else d for d in row_data )","var6 = tuple ( d . _get_pk_val ( ) if hasattr ( d , var8 ) else d for d in var6 )"
assign rox_encoded_instruction res1 or res2,assign var0 var1 or var2,rox_encoded_instruction = res1 | res2,var0 = var1 | var2
set rox_encoded_instruction to res1 or res2,set var0 to var1 or var2,rox_encoded_instruction = res1 | res2,var0 = var1 | var2
assign rox_encoded_instruction res2 or res3,assign var0 var1 or var2,rox_encoded_instruction = res2 | res3,var0 = var1 | var2
"call the function run with 5 arguments: self.addr, self.port converted to an integer, handler, ipv6 set to self.use_ipv6,  and threading set to threading.","call function run with 5 arguments: var1 var2 converted to integer, handler, ipv6 set to self var4 and threading set to threading.","run ( self . addr , int ( self . port ) , handler , ipv6 = self . use_ipv6 , threading = threading )","run ( var1 , var0int ( var2 ) , var0handler , var0ipv6 = self . var4 , var0threading = threading )"
substitute registry.run_checks for run_checks.,substitute registry var1 for var1 ,run_checks = registry . run_checks,var1 = registry . var1
RUN_RELOADER is boolean True.,var0 is boolean var1 ,RUN_RELOADER = True,var0 = var1
"with '%s' substituted for name_str, as argument.   run_syncdb is boolean False.",with var0 substituted for var1 as argument var4 is boolean var6 ,run_syncdb = False,var4 = var6
run_syncdb is boolean True.,var0 is boolean var1 ,run_syncdb = True,var0 = var1
call the function runfastcgi with an argument args.,call function var0 with argument var1 ,runfastcgi ( args ),var0 ( var1 )
"call the function runfastcgi with an argument all the elements, except the first from the sys.argv list.","call function var0 with argument all elements, except first from var1 list.",runfastcgi ( sys . argv [ 1 : ] ),var0 ( var1 [ 1 : ] )
substitute level for rv.,substitute level for rv.,rv = level,rv = level
substitute value under level key of logging._levelNames dictionary for rv.,substitute value under level key of var0 dict for rv.,rv = logging . _levelNames [ level ],rv = var0 [ level ]
close file descriptor s.,close file descriptor var0,s . close ( ),var0close ( )
call the method s.feed with an argument value.,call method var0 with argument value.,s . feed ( value ),var0 ( value )
call the s.serialize method with arguments queryset and unpacked dictionary options.,call var0 method with arguments var1 and unpacked dict options.,"s . serialize ( queryset , ** options )","var0 ( var1 , ** options )"
append string '\\x' followed by 0xFF converted to hex to the string s,append string var0 followed by var1 converted to hex to string s,s += '\\x%02x' % 0xAA,s += '\\x%02x' % 0xAA
"for every arg in s, call the function force_text with arg, encoding, strings_only and errors as arguments,","for every var0 in s, call function var2 with var0 encoding var3 and errors as arguments,","s = ' ' . join ( [ force_text ( arg , encoding , strings_only , errors ) for arg in s ] )","s = ' ' . join ( [ var2 ( var0 , encoding , var3 , errors ) for var0 in s ] )"
s is a string 'hello',s is string var0,s = 'hello',s = var0
set the variable s to the string 'hello',set variable s to string var0,s = 'hello',s = var0
assign the string 'hello' to the variable s,assign string var0 to variable s,s = 'hello',s = var0
"call the function force_text with an argument s, strip the result of whitespaces from both ends,","call function var0 with argument s, strip result of var1 from both ends,","s = force_text ( s ) . strip ( ) . replace ( ' ' , '_' )","s = var0 ( s ) . strip ( ) . replace ( ' ' , '_' )"
"call the get_serializer function with an argument format, call the return value object and substitute it for s.","call var0 function with argument format, call return value object and substitute it for var1",s = get_serializer ( format ) ( ),s = var0 ( format ) ( )
"call the method m.group with an argument integer 0, substitute the result for s.","call method var0 with argument integer 0, substitute result for var1",s = m . group ( 0 ),s = var0 ( 0 )
s is an instance of MLStripper class.,s is instance of var0 class.,s = MLStripper ( ),s = var0 ( )
"call the method s.decode with an argument string 'utf-8', substitute the result for s.","call method var0 with argument string var2, substitute result for var1",s = s . decode ( 'utf-8' ),s = var0 ( var2 )
"call the method s.decode with encoding and errors as the arguments, substitute the result for s.","call method var0 with encoding and errors as arguments, substitute result for var1","s = s . decode ( encoding , errors )","s = var0 ( encoding , errors )"
"call the method s.encode with an argument string 'utf-8', substitute the result for s.","call method var0 with argument string var2, substitute result for var1",s = s . encode ( 'utf-8' ),s = var0 ( var2 )
"replace every occurrence of '""' in s with '&quot;'.",replace every occurrence of var0 in s with var1.,"s = s . replace ( ''' , '&quot;' )","s = s . replace ( ''' , var1 )"
replace every occurrence of '\\' in s with '\\\\'.,replace every occurrence of var0 in s with var1.,"s = s . replace ( '\\' , '\\\\' )","s = s . replace ( '\\' , '\\\\' )"
replace every occurrence of '\n' in s with '\\n'.,replace every occurrence of var0 in s with var1.,"s = s . replace ( '\n' , '\\n' )","s = s . replace ( '\n' , '\\n' )"
replace every occurrence of '\r' in s with '\\r'.,replace every occurrence of var0 in s with var1.,"s = s . replace ( '\r' , '\\r' )","s = s . replace ( '\r' , '\\r' )"
replace every occurrence of '\t' in s with '\\t'.,replace every occurrence of var0 in s with var1.,"s = s . replace ( '\t' , '\\t' )","s = s . replace ( '\t' , '\\t' )"
replace every occurrence of '</' in s with '<\\/'.,replace every occurrence of '</' in s with '<\\/'.,"s = s . replace ( '</' , '<\\/' )","s = s . replace ( '</' , '<\\/' )"
"replace every occurrence of ""'"" in s with ""\\'"".","replace every occurrence of ""'"" in s with ""\\'"".","s = s . replace ( ''' , '\\'' )","s = s . replace ( ''' , '\\'' )"
"concatenate first site elements of s, syear and elements of s from the site incremented by integer 4 index, substitute the result for s.","concatenate first site elements of s var0 and elements of s from site var1 by integer 4 index, substitute result for var2",s = s [ : site ] + syear + s [ site + 4 : ],s = s [ : site ] + var0 + s [ site + 4 : ]
substitute s without the first element for s.,substitute s var0 first element for var1,s = s [ 1 : ],s = s [ 1 : ]
substitute elements of s from the end index to end for s.,substitute elements of s from end index to end for var0,s = s [ end : ],s = s [ end : ]
substitute s1 for s.,substitute var0 for var1,s = s1,s = var0
"s is an instance of the Select class, created with choices set to choices.","s is instance of var0 class, created with choices set to choices.",s = Select ( choices = choices ),s = var0 ( choices = choices )
"call the function six.text_type with return value of the function bytes(s), encoding and errors as the arguments,","call the function six.text_type with return value of the function bytes(s), encoding and errors as the arguments,","s = six . text_type ( bytes ( s ) , encoding , errors )","s = six . text_type ( bytes ( s ) , encoding , errors )"
"call the function six.text_type with s, encoding and errors as the arguments, substitute the result for s.","call function six var0 with var1 encoding and errors as arguments, substitute result for var1","s = six . text_type ( s , encoding , errors )","s = six . var0 ( s , encoding , errors )"
"call the function six.text_type with s as an argument, substitute the result for s.","call function six var0 with s as argument, substitute result for var1",s = six . text_type ( s ),s = six . var0 ( s )
"call the function six.text_type with s as an argument, substitute result for s.","call function six var0 with s as argument, substitute result for var1",s = six . text_type ( s ),s = six . var0 ( s )
s is an instance of StringIO class.,s is instance of var0 class.,s = StringIO ( ),s = var0 ( )
"take subject elements from p-th to i-th index, substitute it for s.","take subject elements from p-th to i-th index, substitute it for var0",s = subject [ p : i ],s = subject [ p : i ]
"increment s_len by integer 1,","increment var0 by integer 1,",s_len += 1,var0 += 1
s_len is integer 0.,var0 is integer 0.,s_len = 0,var0 = 0
"call the function time.strftime with 2 arguments: fmt and and timetuple without the first element,","call function var0 with 2 arguments: var1 and and var2 var3 first element,","s1 = time . strftime ( fmt , ( year , ) + timetuple [ 1 : ] )","s1 = var0 ( var1 , ( year , ) + var2 [ 1 : ] )"
"call the function time.strftime with 2 arguments: fmt and and timetuple without the first element,","call function var0 with 2 arguments: var1 and and var2 var3 first element,","s2 = time . strftime ( fmt , ( year + 28 , ) + timetuple [ 1 : ] )","s2 = var0 ( var1 , ( year + 28 , ) + var2 [ 1 : ] )"
"call the function force_bytes with 2 arguments: safe and self.encoding, substitute it for safe.",call function var0 with 2 arguments: safe and var1 substitute it for safe.,"safe = force_bytes ( safe , self . encoding )","safe = var0 ( safe , var1 )"
"if value is an instance of SafeData, safe is boolean True, otherwise it is boolean False.",if value is instance of var0 safe is boolean var1 otherwise it is boolean var2 ,"safe = isinstance ( value , SafeData )","safe = isinstance ( value , var0 )"
substitute value for value under the key key of safe_data dictionary.,substitute value for value under key key of var0 dict.,safe_data [ key ] = value,var0 [ key ] = value
safe_data is an empty dictionary.,var0 is empty dict.,safe_data = { },var0 = { }
"if text is an instance of SafeData, safe_input is boolean True, otherwise is boolean False.",if text is instance of var0 var1 is boolean var3 otherwise is boolean var4 ,"safe_input = isinstance ( text , SafeData )","var1 = isinstance ( text , var0 )"
substitute SafeBytes for SafeString.,substitute var0 for var1 ,SafeString = SafeBytes,var1 = var0
substitute SafeText for SafeString.,substitute var0 for var1 ,SafeString = SafeText,var1 = var0
substitute SafeText for SafeUnicode.,substitute var0 for var1 ,SafeUnicode = SafeText,var1 = var0
"call the function force_bytes with an argument salt, substitute the result for salt.","call function var0 with argument salt, substitute result for salt.",salt = force_bytes ( salt ),salt = var0 ( salt )
read 4 bytes from file f and store it in sample.,read 4 bytes from file f and store it in sample.,sample = f . read ( 4 ),sample = f . read ( 4 )
"and construct as boolean False, return the result.   save.alters_data is boolean True.",and construct as boolean var0 return result var1 save var3 is boolean var4 ,save . alters_data = True,save . var3 = var4
"called with an argument commit, return the result.   save.alters_data is boolean True.","called with argument commit, return result var0 save var2 is boolean var3 ",save . alters_data = True,save . var2 = var3
call the function save_m2m.,call function var0 ,save_m2m ( ),var0 ( )
"call the method self.save_existing with 3 arguments: form, obj and commit as commit, append the result to saved_instances.","call method self var1 with 3 arguments: form var2 and commit as commit, append result to var3 ","saved_instances . append ( self . save_existing ( form , obj , commit = commit ) )","var3 . append ( self . var1 ( form , var2 , commit = commit ) )"
saved_instances is an empty list.,var0 is empty list.,saved_instances = [ ],var0 = [ ]
saved_locale is None.,var0 is var1 ,saved_locale = None,var0 = var1
"call the method translation.get_language, substitute th result for saved_locale.",call method translation var1 substitute th result for var2 ,saved_locale = translation . get_language ( ),var2 = translation . var1 ( )
assign sb the hexadecimal value of leader converted into an int16,assign sb hexadecimal value of leader converted into var0,"sb = int ( hex ( leader ) , 16 )","sb = int ( hex ( leader ) , 16 )"
assign sb the hexadecimal value of leader casted into an int32,assign sb hexadecimal value of leader casted into var0,"sb = int ( hex ( leader ) , 32 )","sb = int ( hex ( leader ) , 32 )"
"convert the value of leader to hexadecimal, then remove the last element, convert it to an int16 and set its value to the variable sb","convert value of leader to hexadecimal, then remove last element, convert it to var0 and set its value to variable sb","sb = int ( hex ( leader ) [ : - 1 ] , 16 )","sb = int ( hex ( leader ) [ : - 1 ] , 16 )"
assign sb the hexadecimal value of leader removing the last element casted into an int16,assign sb hexadecimal value of leader removing last element casted into var0,"sb = int ( hex ( leader ) [ : - 1 ] , 16 )","sb = int ( hex ( leader ) [ : - 1 ] , 16 )"
"convert the value of leader to hexadecimal, then remove the last 3 elements, convert it to an int16 and set its value to the variable sb","convert value of leader to hexadecimal, then remove last 3 elements, convert it to var0 and set its value to variable sb","sb = int ( hex ( leader ) [ : - 3 ] , 16 )","sb = int ( hex ( leader ) [ : - 3 ] , 16 )"
"convert the value of leader to hexadecimal, then slice it at index 10, convert it to an int16 and set its value to the variable sb","convert value of leader to hexadecimal, then slice it at index 10, convert it to var0 and set its value to variable sb","sb = int ( hex ( leader ) [ 10 : ] , 16 )","sb = int ( hex ( leader ) [ 10 : ] , 16 )"
"convert the value of leader to hexadecimal, then slice it at index 10, convert it to an int32 and set its value to the variable sb","convert value of leader to hexadecimal, then slice it at index 10, convert it to var0 and set its value to variable sb","sb = int ( hex ( leader ) [ 10 : ] , 32 )","sb = int ( hex ( leader ) [ 10 : ] , 32 )"
"convert the value of leader to hexadecimal, then slice it at index 12, convert it to an int16 and set its value to the variable sb","convert value of leader to hexadecimal, then slice it at index 12, convert it to var0 and set its value to variable sb","sb = int ( hex ( leader ) [ 12 : ] , 16 )","sb = int ( hex ( leader ) [ 12 : ] , 16 )"
assign sb the hexadecimal value of leader starting at index 13 casted into an int16,assign sb hexadecimal value of leader starting at index 13 casted into var0,"sb = int ( hex ( leader ) [ 13 : ] , 16 )","sb = int ( hex ( leader ) [ 13 : ] , 16 )"
assign sb the hexadecimal value of leader starting at index 3 casted into an int16,assign sb hexadecimal value of leader starting at index 3 casted into var0,"sb = int ( hex ( leader ) [ 3 : ] , 16 )","sb = int ( hex ( leader ) [ 3 : ] , 16 )"
assign sb the hexadecimal value of leader starting at index 4 casted into an int32,assign sb hexadecimal value of leader starting at index 4 casted into var0,"sb = int ( hex ( leader ) [ 4 : ] , 32 )","sb = int ( hex ( leader ) [ 4 : ] , 32 )"
assign sb the hexadecimal value of leader starting at index 7 casted into an int16,assign sb hexadecimal value of leader starting at index 7 casted into var0,"sb = int ( hex ( leader ) [ 7 : ] , 16 )","sb = int ( hex ( leader ) [ 7 : ] , 16 )"
assign sb the hexadecimal value of val1 casted into an int16,assign sb hexadecimal value of var0 casted into var1,"sb = int ( hex ( val1 ) , 16 )","sb = int ( hex ( var0 ) , 16 )"
convert the value of x bitwise and y to a hex then add it to the variable sc,convert value of x var0 and y to hex then add it to variable sc,sc += '%02x' % ( x & y ),sc += '%02x' % ( x & y )
Convert the value of x bitwise and 0xff to a hexadecimal then append it to the variable sc1,Convert value of x var0 and var1 to hexadecimal then append it to variable var2,sc1 += '%02x' % ( x & 0xff ),var2 += '%02x' % ( x & var1 )
convert the value of x bitwise and z to a hexadecimal then append it to the variable sc2,convert value of x var0 and z to hexadecimal then append it to variable var1,sc2 += '%02x' % ( x & z ),var1 += '%02x' % ( x & z )
"call the function urlsplit with an argument value, assign the result to scheme, netloc, path, query and fragment, respectively.","call function var0 with argument value, assign result to scheme var1 path, query and fragment, respectively.","scheme , netloc , path , query , fragment = urlsplit ( value )","scheme , var1 , path , query , fragment = var0 ( value )"
"split template once at the first character ':', convert the first element to lowercase and substitute it for scheme.","split template once at first character var0, convert first element to lowercase and substitute it for scheme.","scheme = template . split ( ':' , 1 ) [ 0 ] . lower ( )","scheme = template . split ( var0 , 1 ) [ 0 ] . lower ( )"
"call the value.split method with '://' as argument, convert first element of the result to lower case, substitute the result for scheme.","call var0 method with var1 as argument, convert first element of result to lower case, substitute result for scheme.",scheme = value . split ( '://' ) [ 0 ] . lower ( ),scheme = var0 ( var1 ) [ 0 ] . lower ( )
"schemes is a list containing 4 initial elements: 'http', 'https', 'ftp' and 'ftps'.","schemes is list containing 4 initial elements: var0, var1, var2 and var3.","schemes = [ 'http' , 'https' , 'ftp' , 'ftps' ]","schemes = [ var0 , 'https' , 'ftp' , 'ftps' ]"
"call the get_bytes_from_wsgi function with environ, string 'SCRIPT_NAME' and empty strings as arguments, substitute the result for script_name.","call var0 function with environ, string var2 and empty strings as arguments, substitute result for var3 ","script_name = get_bytes_from_wsgi ( environ , 'SCRIPT_NAME' , '' )","var3 = var0 ( environ , var2 , '' )"
"call the get_script_name function with environ as argument, substitute the result for script_name.","call var0 function with environ as argument, substitute result for var1 ",script_name = get_script_name ( environ ),var1 = var0 ( environ )
"take all but the length of path_info last elements of script_url, substitute it for script_name.",take all but length of var0 last elements of var1 substitute it for var2 ,script_name = script_url [ : - len ( path_info ) ],var2 = var1 [ : - len ( var0 ) ]
"call the get_bytes_from_wsgi function with environ, string 'REDIRECT_URL' and empty strings as arguments, substitute the result for script_url.","call var0 function with environ, string var2 and empty strings as arguments, substitute result for var3 ","script_url = get_bytes_from_wsgi ( environ , 'REDIRECT_URL' , '' )","var3 = var0 ( environ , var2 , '' )"
"call the get_bytes_from_wsgi function with environ, string 'SCRIPT_URL' and empty strings as arguments, substitute the result for script_url.","call var0 function with environ, string var2 and empty strings as arguments, substitute result for var3 ","script_url = get_bytes_from_wsgi ( environ , 'SCRIPT_URL' , '' )","var3 = var0 ( environ , var2 , '' )"
"open err_log flie in append mode with buffering size of input buffer, substitute the result for se.","open var0 var1 in append mode with buffering size of input buffer, substitute result for se.","se = open ( err_log , 'a+' , buffering )","se = open ( var0 , 'a+' , buffering )"
"call the method m.group with an argument string 'sec', convert the result into a string, substitute it for sec.","call method var0 with argument string var1, convert result into string, substitute it for sec.",sec = int ( m . group ( 'sec' ) ),sec = int ( m . group ( var1 ) )
substitute new_second_item with second_item.,substitute var0 with var1 ,second_item = new_second_item,var1 = var0
substitute absolute seconds for seconds.,substitute absolute seconds for seconds.,seconds = abs ( seconds ),seconds = abs ( seconds )
"call the method self.Z, substitute the result for seconds.","call method self.Z, substitute result for seconds.",seconds = self . Z ( ),seconds = self . Z ( )
"get the element of chunks at the (i+1)-the index, assign it to the seconds2 and name2, respectively.","get element of chunks at (i+1)-the index, assign it to var1 and var2 respectively.","seconds2 , name2 = chunks [ i + 1 ]","var1 , var2 = chunks [ i + 1 ]"
"call the function force_bytes with an argument secret, substitute the result for secret.","call function var0 with argument secret, substitute result for secret.",secret = force_bytes ( secret ),secret = var0 ( secret )
substitute settings.SECRET_KEY for secret.,substitute settings var0 for secret.,secret = settings . SECRET_KEY,secret = settings . var0
"function logging.getLogger, assign the result to the security_logger.   evaluate the function force_text with e as an argument, extra is an dictionary with two pair of elements,","function logging var1 assign result to var2 evaluate function var5 with e as argument, extra is dict with two pair of elements,","security_logger . error ( force_text ( e ) , extra = { 'status_code' : 400 , 'request' : request } )","var2 . error ( var5 ( e ) , extra = { 'status_code' : 400 , 'request' : request } )"
"substitute '%s' in 'django.security.%s' with the name of the type of the class object e, use it as the argument for the call to the,","substitute var0 in var1 with name of type of class object e, use it as argument for call to the,",security_logger = logging . getLogger ( 'django.security.%s' % e . __class__ . __name__ ),security_logger = logging . getLogger ( var1 % e . __class__ . __name__ )
"define lambda function that returns self.file.seek field, use it as an argument for property function, put the result in seek.","define lambda function var0 returns var1 field, use it as argument for property function, put result in seek.",seek = property ( lambda self : self . file . seek ),seek = property ( lambda self : var1 )
add k to seen.,add k to seen.,seen . add ( k ),seen . add ( k )
seen is an empty set.,seen is empty set.,seen = set ( ),seen = set ( )
add data to seen_data set.,add data to var0 set.,seen_data . add ( data ),var0 . add ( data )
add row_data to seen_data set.,add var0 to var1 set.,seen_data . add ( row_data ),var1 . add ( var0 )
seen_data is an empty set.,var0 is empty set.,seen_data = set ( ),var0 = set ( )
"assign the result to the sql and references, respectively.   add model to seen_models set.","assign result to var0 and references, respectively var1 add model to var2 set.",seen_models . add ( model ),var2 . add ( model )
"call the connection.introspection.table_names with tables as argument, store the result in seen_models.","call connection.introspection var1 with tables as argument, store result in var2 ",seen_models = connection . introspection . installed_models ( tables ),var2 = connection . introspection . installed_models ( tables )
"call the method s.render with 3 arguments: field string formated with name, val and local_attrs, substitute the result for select_html.",call method var0 with 3 arguments: field string formated with name var1 and var2 substitute result for var3 ,"select_html = s . render ( field % name , val , local_attrs )","var3 = var0 ( field % name , var1 , var2 )"
call the method selected_choices.remove with an argument option_value.,call method var0 remove with argument var1 ,selected_choices . remove ( option_value ),var0 . remove ( var1 )
"call the function force_text with an argument v, for every v in selected_choices, add results to a set,","call function var0 with argument v, for every v in var1 add results to set,",selected_choices = set ( force_text ( v ) for v in selected_choices ),var1 = set ( var0 ( v ) for v in var1 )
selected_html is an empty string.,var0 is empty string.,selected_html = '',var0 = ''
"call the function mark_safe with an argument string ' selected=""selected""', substitute the result for selected_html.","call function var0 with argument string var2, substitute result for var3 ",selected_html = mark_safe ( ' selected='selected'' ),var3 = var0(' selected='selected'')
substitute args for self.__args.,substitute var0 for var1 ,self . __args = args,self . __var0 = var0
update self.__dict__ dictionary with obj_dict.,update var0 dict with var1 ,self . __dict__ . update ( obj_dict ),var0 . update ( var1 )
add state element to self.__dict__ dictionary.,add state element to var0 dict.,self . __dict__ . update ( state ),var0 . update ( state )
substitute func for value under the '_setupfunc' key of the self.__dict__ dictionary.,substitute func for value under var0 key of var1 dict.,self . __dict__ [ '_setupfunc' ] = func,var1 [ var0 ] = func
"substitute value under the ""_wrapped"" key of the self.__dict__ dictionary.",substitute value under var0 key of var1 dict.,self . __dict__ [ '_wrapped' ] = value,var1 [ '_wrapped' ] = value
substitute self.__class__.__doc__ for self.__doc__.,substitute var0 for var1 ,self . __doc__ = self . __class__ . __doc__,var1 = var0
substitute dt for self.__dt.,substitute var0 for var1 ,self . __dt = dt,self . __var0 = var0
substitute kw for self.__kw.,substitute kw for var0 ,self . __kw = kw,var0 = kw
substitute language for self.__language.,substitute language for var0 ,self . __language = language,var0 = language
"call the function to_locale with an argument language, substitute it for self.__locale.","call function var0 with argument language, substitute it for var1 ",self . __locale = to_locale ( language ),var1 = var0 ( language )
"self.__name is a string ""%s%02d%02d"", replace '%s' with sign, '%02d' is replaced with absolute value of offset divided by 60,","var0 is string var1, replace var2 with sign, var3 is replaced with absolute value of offset divided by 60,","self . __name = '%s%02d%02d' % ( sign , abs ( offset ) / 60. , abs ( offset ) % 60 )","var0 = '%s%02d%02d' % ( sign , abs ( offset ) / 60.0 , abs ( offset ) % 60 )"
substitute name for self.__name.,substitute name for var0 ,self . __name = name,var0 = name
substitute offset for self.__offset.,substitute offset for var0 ,self . __offset = offset,var0 = offset
"call the function timedelta with an argument minutes set to offset, substitute the result for self.__offset.","call function var0 with argument minutes set to offset, substitute result for var1 ",self . __offset = timedelta ( minutes = offset ),var1 = var0 ( minutes = offset )
call the method self.__prepare_class__.,call method var0 ,self . __prepare_class__ ( ),var0 ( )
set self.__starttag_text to None.,set var0 to var1 ,self . __starttag_text = None,var0 = var1
"slice the list from the i-th to the endpos-th element, substitute it for self.__starttag_text.","slice list from i-th to endpos-th element, substitute it for var1 ",self . __starttag_text = rawdata [ i : endpos ],var1 = rawdata [ i : var0 ]
"call the function to_language with an argument language, substitute it for self.__to_language.","call function var0 with argument language, substitute it for var1 ",self . __to_language = to_language ( language ),self . __var0 = var0 ( language )
call the method self._add_fallback.,call method var0 ,self . _add_fallback ( ),var0 ( )
call the method self._add_installed_apps_translations.,call method var0 ,self . _add_installed_apps_translations ( ),var0 ( )
call the method self._add_local_translations.,call method var0 ,self . _add_local_translations ( ),var0 ( )
substitute apps for the value under language_code key of the self._app_dict dictionary.,substitute var0 for value under var1 key of var2 dict.,self . _app_dict [ language_code ] = apps,var2 [ var1 ] = var0
self._app_dict is an empty dictionary.,var0 is empty dict.,self . _app_dict = { },var0 = { }
call the method self._archive.close.,call method var0 ,self . _archive . close ( ),var0 ( )
call the method self._archive.extract with an argument to_path.,call method var0 with argument var1 ,self . _archive . extract ( to_path ),var0 ( var1 )
call the method self._archive.list.,call method var0 ,self . _archive . list ( ),var0 ( )
define the method list with 3 arguments: self and unpacked list args and unpacked dictionary kwargs.,define method list with 3 arguments: self and unpacked list var0 and unpacked dict var1 ,"self . _archive . list ( * args , ** kwargs )","self . _archive . list ( * var0 , ** var1 )"
call the method self._archive.printdir with 2 arguments: unpacked list args and unpacked dictionary kwargs.,call method var0 with 2 arguments: unpacked list var1 and unpacked dict var2 ,"self . _archive . printdir ( * args , ** kwargs )","var0 ( * var1 , ** var2 )"
"call the method self._archive_cls with an argument file, call the result with an argument file, substitute the result for self._archive.","call method var0 with argument file, call result with argument file, substitute result for var1 ",self . _archive = self . _archive_cls ( file ) ( file ),var1 = var0 ( file ) ( file )
"call the method tarfile.open with an argument file, substitute the result for self._archive.","call method var0 with argument file, substitute result for var1 ",self . _archive = tarfile . open ( file ),var1 = var0 ( file )
"call the method zipfile.ZipFile with an argument self, substitute the result for self._archive.","call method var0 var1 with argument self, substitute result for var2 ",self . _archive = zipfile . ZipFile ( file ),var2 = var0 . var1 ( file )
call the method self._assert_mutable.,call method var0 ,self . _assert_mutable ( ),var0 ( )
"call the method self._base_set with string 'set', key, value and timeout as arguments.","call method var0 with string var1, key, value and var2 as arguments.","self . _base_set ( 'set' , key , value , timeout )","var0 ( var1 , key , value , var2 )"
"call the method self.read, substitute the result or self._body.",call method var0 substitute result or var1 ,self . _body = self . read ( ),var1 = var0 ( )
substitute boundary for self._boundary.,substitute boundary for var0 ,self . _boundary = boundary,var0 = boundary
substitute boundary for self.boundary.,substitute boundary for var0 ,self . _boundary = boundary,self . _boundary = boundary
call the method self._cache.clear.,call method var0 ,self . _cache . clear ( ),var0 ( )
call the method self._cache.delete with argument key.,call method var0 with argument key.,self . _cache . delete ( key ),var0 ( key )
call the method self_cache.delete_multi with argument list containing keys mapped through function l.,call method var0 var2 with argument list containing keys mapped through function var3,"self . _cache . delete_multi ( map ( l , keys ) )","self . _cache . var2 ( map ( l , keys ) )"
call the method self._cache.disconnect_all.,call method self._cache var1 ,self . _cache . disconnect_all ( ),self . _cache . var1 ( )
call the method self._cache_flush_all.,call method var0 ,self . _cache . flush_all ( ),self . _cache . flush_all ( )
"call the method self._cache.set with key, value, self.get_backend_timeout(timeout) as arguments.","call method var0 with key, value, self.get_backend_timeout(timeout) as arguments.","self . _cache . set ( key , value , self . get_backend_timeout ( timeout ) )","var0 ( key , value , self . var2 ( timeout ) )"
"call the method self._cache.set_multi with safe_data, self.get_backend_timeout(timeout) as arguments.",call method self._cache var1 with var2 self.get_backend_timeout(timeout) as arguments.,"self . _cache . set_multi ( safe_data , self . get_backend_timeout ( timeout ) )","self . _cache . var1 ( var2 , self . var5 ( timeout ) )"
substitute pickled for value under the key key of self._cache dictionary.,substitute pickled for value under key key of self._cache dict.,self . _cache [ key ] = pickled,self . _cache [ key ] = pickled
substitute value for the value under the key key of self._cache dictionary.,substitute value for value under key key of self._cache dict.,self . _cache [ key ] = value,self . _cache [ key ] = value
"call the _caches.setdefault method with name and empty dictionary as arguments, substitute the result for self_cache.","call var0 method with name and empty dict as arguments, substitute result for var1 ","self . _cache = _caches . setdefault ( name , { } )","self . _cache = var0 ( name , { } )"
self._cached_loaders is an empty list.,var0 is empty list.,self . _cached_loaders = [ ],var0 = [ ]
substitute cached_loaders for self._cached_loaders.,substitute var0 for var1 ,self . _cached_loaders = cached_loaders,self . _var0 = var0
substitute cache for value under the alias key of self._caches.caches dictionary.,substitute cache for value under alias key of var0 dict.,self . _caches . caches [ alias ] = cache,var0 [ alias ] = cache
self._caches.caches is an empty dictionary.,var0 is empty dict.,self . _caches . caches = { },var0 = { }
"call the function local, substitute the result for self._caches.","call function local, substitute result for var0 ",self . _caches = local ( ),var0 = local ( )
substitute callback for self._callback.,substitute callback for var0 ,self . _callback = callback,var0 = callback
"call the function get_callable with an argument self._callback_str, substitute the result for self._callback.",call function var0 with argument var1 substitute result for var2 ,self . _callback = get_callable ( self . _callback_str ),var2 = var0 ( var1 )
self._callback is None.,var0 is var1 ,self . _callback = None,var0 = var1
substitute callback for self._callback_str.,substitute callback for var0 ,self . _callback_str = callback,var0 = callback
"joint prefix, character '.' and self._callback_str together, substitute the result for self._callback_str.","joint prefix, character var0 and var1 together, substitute result for var1 ",self . _callback_str = prefix + '.' + self . _callback_str,var1 = prefix + var0 + var1
call the method self._callback_strs.add with an argument lookup_str.,call method var0 with argument var1 ,self . _callback_strs . add ( lookup_str ),var0 ( var1 )
call the method self._callback_strs.add with an argument pattern._callback_str.,call method var0 with argument var1 ,self . _callback_strs . add ( pattern . _callback_str ),var0 ( var1 )
call the method self._callback_strs.update with an argument pattern._callback_strs.,call method var0 with argument var1 ,self . _callback_strs . update ( pattern . _callback_strs ),var0 ( var1 )
self._callback_strs is an empty set.,var0 is empty set.,self . _callback_strs = set ( ),var0 = set ( )
self._called_from_command_line is boolean True.,var0 is boolean var1 ,self . _called_from_command_line = True,var0 = var1
update the self._catalog dictionary with other._catalog.,update var0 dict with var1 ,self . _catalog . update ( other . _catalog ),var0 . update ( var1 )
"call the method translation._catalog.copy, substitute the result for self._catalog.",call method var0 substitute result for var1 ,self . _catalog = translation . _catalog . copy ( ),var1 = var0 ( )
append name to self._changed_data.,append name to var0 ,self . _changed_data . append ( name ),var0 . append ( name )
append name to self._changed_data list.,append name to self._changed_data list.,self . _changed_data . append ( name ),self . _changed_data . append ( name )
self._changed_data is an empty list.,var0 is empty list.,self . _changed_data = [ ],var0 = [ ]
self._changed_data is None.,var0 is var1 ,self . _changed_data = None,var0 = var1
substitute settings.DEFAULT_CHARSET for self._charset.,substitute settings var0 for var1 ,self . _charset = settings . DEFAULT_CHARSET,var1 = settings . var0
self._choices and self.widget.choices are assigned value converted into a list.,var0 and var1 are assigned value converted into list.,self . _choices = self . widget . choices = list ( value ),var0 = var1 = list ( value )
"bring integer 2 to the power of 31, subtract the result by 4, put the result into a list, append possible_sizes to it,","bring integer 2 to power of 31, subtract result by 4, put result into list, append var0 to it,",self . _chunk_size = min ( [ 2 ** 31 - 4 ] + possible_sizes ),self . _chunk_size = min ( [ 2 ** 31 - 4 ] + var0 )
call the method self._clean_fields.,call method var0 ,self . _clean_fields ( ),var0 ( )
call the method self._clean_form.,call method var0 ,self . _clean_form ( ),var0 ( )
"call the method self._lib.Client with self._servers and pickleProtocol set to pickle.HIGHEST_PROTOCOL as arguments, substitute the result for self._client.","call method var0 var1 with var2 and var3 set to pickle var5 as arguments, substitute result for var6 ","self . _client = self . _lib . Client ( self . _servers , pickleProtocol = pickle . HIGHEST_PROTOCOL )","var6 = var0 . var1 ( var2 , var3 = pickle . var5 )"
"call the self._lib.Client with argument self._servers, substitute the result for self._client.",call var0 var1 with argument var2 substitute result for var3 ,self . _client = self . _lib . Client ( self . _servers ),var3 = var0 . var1 ( var2 )
append value to the self._closable_objects list.,append value to var0 list.,self . _closable_objects . append ( value ),var0 . append ( value )
append value to self._closable_objects list.,append value to var0 list.,self . _closable_objects . append ( value ),var0 . append ( value )
self._closable_objects is an empty list.,var0 is empty list.,self . _closable_objects = [ ],var0 = [ ]
call the method self._close_files.,call method var0 ,self . _close_files ( ),var0 ( )
"call the method self.make_bytes with an argument content, append it to self._container.","call method self var1 with argument content, append it to var2 ",self . _container . append ( self . make_bytes ( content ) ),var2 . append ( self . var1 ( content ) )
self._container is an list.,var0 is list.,self . _container = [ ],var0 = [ ]
self._container is a list containing element value.,var0 is list containing element value.,self . _container = [ value ],var0 = [ value ]
substitute content_length for self._content_length.,substitute var0 for var1 ,self . _content_length = content_length,self . _var0 = var0
substitute length of self.object_list for self._count.,substitute length of self var1 for var2 ,self . _count = len ( self . object_list ),var2 = len ( self . var1 )
substitute the return value of the method self.object_list.count for self._count.,substitute return value of method self var1 count for var2 ,self . _count = self . object_list . count ( ),var2 = self . var1 . count ( )
call the self._createdir method.,call var0 method.,self . _createdir ( ),var0 ( )
"or path is not contained in the value under the medium key of self._css dictionary.   call the method self._css.setdefault with 2 arguments medium and an empty string, append path to the result.","or path is not contained in value under medium key of var0 dict var1 call method var0 setdefault with 2 arguments medium and empty string, append path to result.","self . _css . setdefault ( medium , [ ] ) . append ( path )","var0 . setdefault ( medium , [ ] ) . append ( path )"
self._css is an empty dictionary.,var0 is empty dict.,self . _css = { },var0 = { }
call the method self._cull.,call method var0 ,self . _cull ( ),var0 ( )
call the self._cull method.,call var0 method.,self . _cull ( ),var0 ( )
"call the method self._cull with db, cursor and now as arguments.","call method var0 with db, cursor and now as arguments.","self . _cull ( db , cursor , now )","var0 ( db , cursor , now )"
self._cull_frequency is integer 3.,var0 is integer 3.,self . _cull_frequency = 3,var0 = 3
convert cull_frequency into an integer and substitute it for self._cull_frequency.,convert var0 into integer and substitute it for var1 ,self . _cull_frequency = int ( cull_frequency ),self . _var0 = int ( var0 )
"return value of the value._get_pk_val method and strings_only set to boolean True.   call the function m2m_value with the argument related, for every related in itterator object generated from the attribute field.name,","return value of var0 method and var1 set to boolean var3 call function var5 with argument related, for every related in var6 object generated from attribute var7 ","self . _current [ field . name ] = [ m2m_value ( related ) for related in getattr ( obj , field . name ) . iterator ( ) ]","self . _current [ var7 ] = [ var5 ( related ) for related in getattr ( obj , var7 ) . iterator ( ) ]"
"call the function field.value_to_string with an argument obj, substitute the result for value under the field.name key of self._current dictionary.",call function field var1 with argument var2 substitute result for value under var3 key of var4 dict.,self . _current [ field . name ] = field . value_to_string ( obj ),var4 [ var3 ] = field . var1 ( var2 )
"get field.name attribute of obj, convert it to a string, substitute it for the value under the filed.name key of self._current dictionary.","get var0 attribute of var1 convert it to string, substitute it for value under filed.name key of var2 dict.","self . _current [ field . name ] = str ( getattr ( obj , field . name ) )","var2 [ var0 ] = str ( getattr ( var1 , var0 ) )"
substitute value for field.name key of self._current dictionary.,substitute value for var0 key of var1 dict.,self . _current [ field . name ] = value,var1 [ var0 ] = value
substitute value for value under the field.name key of the self._current dictionary.,substitute value for value under var0 key of var1 dict.,self . _current [ field . name ] = value,var1 [ var0 ] = value
self.current is an empty dictionary.,var0 is empty dict.,self . _current = { },self . _current = { }
self._current is None.,var0 is var1 ,self . _current = None,var0 = var1
substitute current_app for self._current_app.,substitute var0 for var1 ,self . _current_app = current_app,self . _var0 = var0
call the self._delete method with argument f.name.,call var0 method with argument var1 ,self . _delete ( f . name ),var0 ( var1 )
call self._delete method with argument fname.,call var0 method with argument var1 ,self . _delete ( fname ),var0 ( var1 )
call the self._delete method with argument fname.,call var0 method with argument var1 ,self . _delete ( fname ),var0 ( var1 )
call the method self._delete with argument k.,call method var0 with argument var1,self . _delete ( k ),var0 ( k )
call the method self._delete with argument key.,call method var0 with argument key.,self . _delete ( key ),var0 ( key )
"call the function self._key_to_file with key and version as arguments, use the result as an argument for the call to the self._delete method.","call function self._key_to_file with key and version as arguments, use result as argument for call to var0 method.","self . _delete ( self . _key_to_file ( key , version ) )","var0 ( self . _key_to_file ( key , version ) )"
call the method self._deleted_form_indexes.append with an argument i.,call method var0 with argument var1,self . _deleted_form_indexes . append ( i ),var0 ( i )
self._deleted_form_indexes is an empty list.,var0 is empty list.,self . _deleted_form_indexes = [ ],var0 = [ ]
"evaluate the method get_image_dimensions with self class instance and close set to close as the arguments, substitute the result for self._dimensions_cache.","evaluate method var0 with self class instance and close set to close as arguments, substitute result for var1 ","self . _dimensions_cache = get_image_dimensions ( self , close = close )","var1 = var0 ( self , close = close )"
"get absolute directory path of dir, substitute it for self._dir.",get absolute directory path of var0 substitute it for var1 ,self . _dir = os . path . abspath ( dir ),self . _var0 = os . path . abspath ( var0 )
self._done is boolean False.,var0 is boolean var1 ,self . _done = False,var0 = var1
self._done is boolean True.,var0 is boolean var1 ,self . _done = True,var0 = var1
self._empty is boolean False.,var0 is boolean var1 ,self . _empty = False,var0 = var1
"if encoding is true, substitute it for self._encoding, if not substitute settings.DEFAULT_CHARSET for self._encoding.","if encoding is true, substitute it for var0 if not substitute settings var2 for var0 ",self . _encoding = encoding or settings . DEFAULT_CHARSET,var0 = encoding or settings . var2
substitute settings.DEFAULT_CHARSET for self._encoding.,substitute settings var0 for var1 ,self . _encoding = settings . DEFAULT_CHARSET,var1 = settings . var0
substitute val for self._encoding.,substitute var0 for var1 ,self . _encoding = val,var1 = var0
substitute value for self._encoding.,substitute value for var0 ,self . _encoding = value,var0 = value
append form.errors to self._errors.,append var0 to var1 ,self . _errors . append ( form . errors ),var1 . append ( var0 )
extend the value under the field key of the self._errors dictionary with error_list.,extend value under field key of var0 dict with var1 ,self . _errors [ field ] . extend ( error_list ),var0 [ field ] . extend ( var1 )
"call the method self.error_class, substitute the result for value under the field key of the self._errors dictionary.",call method self var1 substitute result for value under field key of var2 dict.,self . _errors [ field ] = self . error_class ( ),var2 [ field ] = self . var1 ( )
"call the method self.error_class with an argument error_class as an string 'nonfield',","call method self var1 with argument var1 as string var4,",self . _errors [ field ] = self . error_class ( error_class = 'nonfield' ),self . _errors [ field ] = self . var1 ( var1 = var4 )
self._errors is an empty list.,var0 is empty list.,self . _errors = [ ],var0 = [ ]
self._errors is an instance of ErrorDict.,var0 is instance of var1 ,self . _errors = ErrorDict ( ),var0 = var1 ( )
self._errors is None.,var0 is var1 ,self . _errors = None,var0 = var1
insert mw_instance.process_exception at the beginning of self._exception_middleware.,insert var0 var2 at beginning of var3 ,"self . _exception_middleware . insert ( 0 , mw_instance . process_exception )","var3 . insert ( 0 , var0 . var2 )"
exception_middleware is an empty list.,var0 is empty list.,self . _exception_middleware = [ ],self . _var0 = [ ]
call the method self._expire_info.clear.,call method var0 ,self . _expire_info . clear ( ),var0 ( )
"call the self.get_backend_timeout with argument timeout, substitute it for the value under the key key of self._expire_info dictionary.","call self var1 with argument timeout, substitute it for value under key key of self._expire_info dict.",self . _expire_info [ key ] = self . get_backend_timeout ( timeout ),self . _expire_info [ key ] = self . var1 ( timeout )
"call the _expire_info.setdefault method with name and empty dictionary as arguments, substitute the result for self_expire_info.","call var0 method with name and empty dict as arguments, substitute result for var1 ","self . _expire_info = _expire_info . setdefault ( name , { } )","self . _expire_info = var0 ( name , { } )"
"call the function force_text with 3 arguments: old_field_name, self._encoding and errors as a string 'replace',","call function var0 with 3 arguments: var2 var4 and errors as string var5,","self . _files . appendlist ( force_text ( old_field_name , self . _encoding , errors = 'replace' ) , file_obj )","self . _files . appendlist ( var0 ( var2 , var4 , errors = var5 ) , file_obj )"
self._files is an instance of MultiValueDict class.,var0 is instance of var1 class.,self . _files = MultiValueDict ( ),var0 = var1 ( )
self._fname is None.,var0 is var1 ,self . _fname = None,var0 = var1
"join self.file_path and fname into a valid file path, substitute it for self._fname.","join self var1 and var2 into valid file path, substitute it for var3 ","self . _fname = os . path . join ( self . file_path , fname )","self . _var2 = os . path . join ( self . var1 , var2 )"
"call the function socket.getfqdn, substitute the result for self._fqdn.",call function var0 substitute result for var1 ,self . _fqdn = socket . getfqdn ( ),var1 = var0 ( )
"join func.__class__.__module__ and func.__class__.__name__ into a string, separated by character '.', substitute it for self._func_path.","join var0 and var1 into string, separated by character var2, substitute it for var3 ","self . _func_path = '.' . join ( [ func . __class__ . __module__ , func . __class__ . __name__ ] )","var3 = var2 . join ( [ var0 , var1 ] )"
"join func.__module__ and func.__name__ into a string, separated by character '.', substitute it for self._func_path.","join var0 and var1 into string, separated by character var2, substitute it for var3 ","self . _func_path = '.' . join ( [ func . __module__ , func . __name__ ] )","var3 = var2 . join ( [ var0 , var1 ] )"
self._handler_class is None.,var0 is var1 ,self . _handler_class = None,var0 = var1
substitute the result for value.   substitute tuple containing 2 elements: header and value for the value under the header converted to lowercase key of the self._headers dictionary.,substitute result for value var0 substitute tuple containing 2 elements: header and value for value under header converted to lowercase key of var1 dict.,"self . _headers [ header . lower ( ) ] = ( header , value )","var1 [ header . lower ( ) ] = header , value"
self._headers is an empty dictionary.,var0 is empty dict.,self . _headers = { },var0 = { }
"call the method translation._info.copy, substitute the result for self._info.",call method var0 substitute result for var1 ,self . _info = translation . _info . copy ( ),var1 = var0 ( )
converted to an integer.   call the method self._init_translation_catalog.,converted to integer var0 call method var1 ,self . _init_translation_catalog ( ),var1 ( )
"call the method self._initialize_handlers,",call method var0 ,self . _initialize_handlers ( ),var0 ( )
substitute input_data for self._input_data.,substitute var0 for var1 ,self . _input_data = input_data,self . _var0 = var0
self._is_rendered is boolean False.,var0 is boolean var1 ,self . _is_rendered = False,var0 = var1
self._is_rendered is boolean True.,var0 is boolean var1 ,self . _is_rendered = True,var0 = var1
"convert value into a iterator, substitute the result for self._iterator.",convert value into var0 substitute result for var1 ,self . _iterator = iter ( value ),self . _var0 = iter ( value )
append path to self._js.,append path to var0 ,self . _js . append ( path ),var0 . append ( path )
self._js is an empty list.,var0 is empty list.,self . _js = [ ],var0 = [ ]
self._leftover is an empty string.,var0 is empty string.,self . _leftover = b'',var0 = b''
"join bytes and self._leftover into a bytes string, substitute it for self._leftover.","join bytes and var0 into bytes string, substitute it for var0 ","self . _leftover = b'' . join ( [ bytes , self . _leftover ] )","var0 = b'' . join ( [ bytes , var0 ] )"
substitute library for self._lib.,substitute library for var0 ,self . _lib = library,var0 = library
call the self._load_post_and_files method.,call var0 method.,self . _load_post_and_files ( ),var0 ( )
call the method self._load_post_and_files.,call method var0 ,self . _load_post_and_files ( ),var0 ( )
substitute loaders for self._loaders.,substitute loaders for var0 ,self . _loaders = loaders,var0 = loaders
"call the _lock.setdefault method with name and RWLock() as arguments, substitute the result for self_lock.","call var0 method with name and RWLock() as arguments, substitute result for var2 ","self . _lock = _locks . setdefault ( name , RWLock ( ) )","self . _lock = _locks . setdefault ( name , var1 ( ) )"
"call the method threading.RLock, substitute the result for self._lock.",call method threading var0 substitute result for var1 ,self . _lock = threading . RLock ( ),var1 = threading . var0 ( )
call the method self._mark_post_parse_error.,call method var0 ,self . _mark_post_parse_error ( ),var0 ( )
self._max_entries is integer 300.,var0 is integer 300.,self . _max_entries = 300,var0 = 300
"convert max_entries into a string, substitute it for self._max_entries.","convert var0 into string, substitute it for var1 ",self . _max_entries = int ( max_entries ),self . _var0 = int ( var0 )
substitute minimal element of the resulting list for self._chunk_size.   substitute META for self._meta.,substitute minimal element of resulting list for var0 substitute var2 for var3 ,self . _meta = META,var3 = var2
"key, encoding and errors set to string 'replace', and return value of the function force_text with 3 arguments:   value, encoding and errors set to string 'replace'.   call the method mutable substitute for self._mutable.","key, encoding and errors set to string var0, and return value of function var2 with 3 arguments: value, encoding and errors set to string var0 var4 call method mutable substitute for var6 ",self . _mutable = mutable,var6 = mutable
"append ext to the end of it, substitute the resulting list for name.   substitute name for self._name.","append var0 to end of it, substitute resulting list for name var1 substitute name for var2 ",self . _name = name,var2 = name
substitute namespaces for the value under language_code key of the self._namespace_dict dictionary.,substitute var0 for value under var1 key of var2 dict.,self . _namespace_dict [ language_code ] = namespaces,var2 [ var1 ] = var0
self._namespace_dict is an empty dictionary.,var0 is empty dict.,self . _namespace_dict = { },var0 = { }
self._non_form_errors is None.,var0 is var1 ,self . _non_form_errors = None,var0 = var1
"call the method self.error_class, substitute the result for self._non_form_errors.",call method self var1 substitute result for var2 ,self . _non_form_errors = self . error_class ( ),var2 = self . var1 ( )
"call the method self.error_class with an argument e.error_list, substitute the result for self._non_form_errors.",call method self var1 with argument e var3 substitute result for var4 ,self . _non_form_errors = self . error_class ( e . error_list ),var4 = self . var1 ( e . var3 )
self._num_pages is a integer 0.,var0 is integer 0.,self . _num_pages = 0,var0 = 0
"divide hits by a floating point number self.per_page, convert its ceiling value to an integer and substitute it for self._num_pages.",divide hits by floating point number self var1 convert its ceiling value to integer and substitute it for var2 ,self . _num_pages = int ( ceil ( hits / float ( self . per_page ) ) ),var2 = int ( ceil ( hits / float ( self . var1 ) ) )
self._num_pages and self._count are None.,var0 and var1 are var2 ,self . _num_pages = self . _count = None,var0 = var1 = var2
"call the function dict with an argument tuple with 2 elements: o.pk and o, for every o in result of the method self.get_queryset,","call function var0 with argument tuple with 2 elements: var1 and o, for every o in result of method self var3 ","self . _object_dict = dict ( ( o . pk , o ) for o in self . get_queryset ( ) )","self . _object_var0 = var0 ( ( var1 , o ) for o in self . var3 ( ) )"
"call the params.get function with string 'OPTIONS' and None as arguments, substitute the result for self._options.","call var0 function with string var1 and var2 as arguments, substitute result for var3 ","self . _options = params . get ( 'OPTIONS' , None )","var3 = var0 ( var1 , var2 )"
append tuple with 2 elements: i and value under the ORDERING_FIELD_NAME key of form.cleaned_data dictionary to self._ordering.,append tuple with 2 elements: i and value under var0 key of form var2 dict to var3 ,"self . _ordering . append ( ( i , form . cleaned_data [ ORDERING_FIELD_NAME ] ) )","var3 . append ( ( i , form . var2 [ var0 ] ) )"
call the method self._ordering.sort with an argument key as compare_ordering_key.,call method self._ordering.sort with argument key as var0 ,self . _ordering . sort ( key = compare_ordering_key ),self . _ordering . sort ( key = var0 )
self._ordering is an empty list.,var0 is empty list.,self . _ordering = [ ],var0 = [ ]
"and lambda function returning x for x, substitute the firs element of resulting list for style_func.   call the function style_func with an argument msg, use the result as an argument for the call to the function force_str,","and lambda function returning x for x, substitute firs element of resulting list for var0 call function var0 with argument msg, use result as argument for call to function var3 ",self . _out . write ( force_str ( style_func ( msg ) ) ),self . _out . write ( var3 ( var0 ( msg ) ) )
substitute out for self._out.,substitute out for var0 ,self . _out = out,var0 = out
"call the method payload.decode with 2 arguments: string 'ascii' and string 'surrogateescape', substitute the result for self._payload.","call method var0 with 2 arguments: string var1 and string var2, substitute result for var4 ","self . _payload = payload . decode ( 'ascii' , 'surrogateescape' )","var4 = var0 ( var1 , 'surrogateescape' )"
assign self.model._meta.pk to self._pk_field and pk.,assign var0 to var2 and var1 ,self . _pk_field = pk = self . model . _meta . pk,var2 = var1 = var0
call the method self._populate.,call method var0 ,self . _populate ( ),var0 ( )
"call the method self._populate,",call method var0 ,self . _populate ( ),var0 ( )
self._populated is boolean False.,var0 is boolean var1 ,self . _populated = False,var0 = var1
self._populated is boolean True.,var0 is boolean var1 ,self . _populated = True,var0 = var1
"self._post is an instance of QueryDict created with arguments: an empty string and encoding set to self._encoding,",var0 is instance of var1 created with arguments: empty string and encoding set to var2 ,"self . _post , self . _files = QueryDict ( '' , encoding = self . _encoding ) , MultiValueDict ( )","var0 , self . _files = var1 ( '' , encoding = var2 ) , MultiValueDict ( )"
"self._post is an instance of QueryDict created with arguments: self.body and encoding set to self._encoding,",var0 is instance of var1 created with arguments: var2 and encoding set to var3 ,"self . _post , self . _files = QueryDict ( self . body , encoding = self . _encoding ) , MultiValueDict ( )","var0 , self . _files = var1 ( var2 , encoding = var3 ) , MultiValueDict ( )"
"call the method self.parse_file_upload with arguments self.META and data, assign the result to self._post and self._files.","call method self var1 with arguments self var2 and data, assign result to var3 and var4 ","self . _post , self . _files = self . parse_file_upload ( self . META , data )","var3 , var4 = self . var1 ( self . var2 , data )"
call the method self._post.appendlist with 2 arguments: field_name and result of the function force_text called with 3 arguments:,call method self._post.appendlist with 2 arguments: var0 and result of function var1 called with 3 arguments:,"self . _post . appendlist ( field_name , force_text ( data , encoding , errors = 'replace' ) )","self . _post . appendlist ( var0 , var1 ( data , encoding , errors = 'replace' ) )"
substitute post for self._post.,substitute post for var0 ,self . _post = post,var0 = post
"self._post is an instance of QueryDict class, created with an empty string and mutable set to boolean True.","var0 is instance of var1 class, created with empty string and mutable set to boolean var2 ","self . _post = QueryDict ( '' , mutable = True )","var0 = var1 ( '' , mutable = var2 )"
self._post is an instance of QueryDict class created with an empty string as argument.,var0 is instance of var1 class created with empty string as argument.,self . _post = QueryDict ( '' ),var0 = var1 ( '' )
call the method self._post_clean.,call method var0 ,self . _post_clean ( ),var0 ( )
self._post_parse_error is boolean False.,var0 is boolean var1 ,self . _post_parse_error = False,var0 = var1
self._post_parse_error is boolen False.,var0 is var1 var2 ,self . _post_parse_error = False,var0 = var2
self._post_parse_error is boolean True.,var0 is boolean var1 ,self . _post_parse_error = True,var0 = var1
append callback to self._post_render_callbacks list.,append callback to var0 list.,self . _post_render_callbacks . append ( callback ),var0 . append ( callback )
self._post_render_callbacks is an empty list.,var0 is empty list.,self . _post_render_callbacks = [ ],var0 = [ ]
self._producer is an empty list.,var0 is empty list.,self . _producer = [ ],var0 = [ ]
substitute producer for self._producer.,substitute producer for var0 ,self . _producer = producer,var0 = producer
substitute qs for self._queryset.,substitute qs for var0 ,self . _queryset = qs,var0 = qs
substitute queryset for self._queryset.,substitute var0 for var1 ,self . _queryset = queryset,self . _var0 = var0
"convert self.use_ipv6 to boolean, substitute it for self._raw_ipv6.","convert self var1 to boolean, substitute it for var2 ",self . _raw_ipv6 = bool ( self . use_ipv6 ),var2 = bool ( self . var1 )
self._raw_ipv6 is boolean False.,var0 is boolean var1 ,self . _raw_ipv6 = False,var0 = var1
self._raw_ipv6 is boolean True.,var0 is boolean var1 ,self . _raw_ipv6 = True,var0 = var1
and content_length.   self._read_started is boolean False.,and var0 var3 is boolean var4 ,self . _read_started = False,var3 = var4
self._read_started is True.,var0 is var1 ,self . _read_started = True,var0 = var1
self._read_started is boolean True.,var0 is boolean var1 ,self . _read_started = True,var0 = var1
substitute regex for self._regex.,substitute var0 for var1 ,self . _regex = regex,self . _var0 = var0
where '%s' is replace by regex and return value of the function six.text_type with an argument e.   substitute the compiled_regex for value under the language_code key of the self._regex_dict dictionary.,var0 var1 is replace by var2 and return value of function six var3 with argument var4 substitute var6 for value under var8 key of var10 dict.,self . _regex_dict [ language_code ] = compiled_regex,var10 [ var8 ] = var6
substitute the regex_compiled for value under the language_code key of the self._regex_dict dictionary.,substitute var0 for value under var1 key of var3 dict.,self . _regex_dict [ language_code ] = regex_compiled,var3 [ var1 ] = var0
self._regex_dict is an empty dictionary.,var0 is empty dict.,self . _regex_dict = { },var0 = { }
"call the method validators.RegexValidator with an argument regex set to regex, substitute it for self._regex_validator.",call method var0 var1 with argument var2 set to var2 substitute it for var4 ,self . _regex_validator = validators . RegexValidator ( regex = regex ),var4 = var0 . var1 ( var2 = var2 )
substitute length for self._remaining.,substitute length for var0 ,self . _remaining = length,var0 = length
"call the datastructures.MergeDict with self.POST and self.GET as arguments, assign the result to self._request.","call var0 var1 with self var2 and self var3 as arguments, assign result to var4 ","self . _request = datastructures . MergeDict ( self . POST , self . GET )","var4 = var0 . var1 ( self . var2 , self . var3 )"
status set to None and current_app set to None.   substitute request for self._request.,status set to var0 and var2 set to var0 substitute request for var5 ,self . _request = request,var5 = request
self._request_middleware is None.,var0 is var1 ,self . _request_middleware = None,var0 = var1
substitute self._request_middleware for request_middleware.,substitute var0 for var1 ,self . _request_middleware = request_middleware,self . _var1 = var1
"set class fields _request_middleware, _view_middleware, _template_response_middleware, _response_middleware and _exception_middleware to None.",set class fields var0 _view_middleware var1 _response_middleware and var2 to var3 ,self . _request_middleware = self . _view_middleware = self . _template_response_middleware = self . _response_middleware = self . _exception_middleware = None,( self . var0 ) = ( self . _view_middleware ) = ( self . var1 ) = ( self . _response_middleware ) = ( self . var2 ) = var3
call the method self._reset_dicts with an argument dict_.,call method var0 with argument var1 ,self . _reset_dicts ( dict_ ),var0 ( var1 )
insert mw_instance.process_response at the beginning of self._response_middleware.,insert var0 var2 at beginning of var3 ,"self . _response_middleware . insert ( 0 , mw_instance . process_response )","var3 . insert ( 0 , var0 . var2 )"
_response_middleware is an empty list.,_response_middleware is empty list.,self . _response_middleware = [ ],self . _response_middleware = [ ]
and pattern.default_args.   substitute lookups for the value under language_code key of the self._reverse_dict dictionary.,and pattern var1 substitute lookups for value under var3 key of var5 dict.,self . _reverse_dict [ language_code ] = lookups,var5 [ var3 ] = lookups
self._reverse_dict is an empty dictionary.,var0 is empty dict.,self . _reverse_dict = { },var0 = { }
"increment length of boundary by integer 6, substitute the result for self._rollback.","increment length of boundary by integer 6, substitute result for var0 ",self . _rollback = len ( boundary ) + 6,var0 = len ( boundary ) + 6
"append boundary to bytes string '--', substitute the result for self._separator.","append boundary to bytes string var0, substitute result for var1 ",self . _separator = b'--' + boundary,var1 = bvar0 + boundary
substitute server for self._servers.,substitute server for var0 ,self . _servers = server,var0 = server
"split server with ';' as delimiter, substitute the result for self._servers.",split server with var0 as var1 substitute result for var2 ,self . _servers = server . split ( ';' ),var2 = server . split ( var0 )
"call the method self._set with key, pickled and timeout as arguments.","call method var0 with key, pickled and var1 as arguments.","self . _set ( key , pickled , timeout )","var0 ( key , pickled , var1 )"
unpacked dictionary kwargs.   call the method self._set_regex with an argument regex.,unpacked dict var0 call method var2 with argument var3 ,self . _set_regex ( regex ),var2 ( var3 )
call the method self._setup.,call method var0 ,self . _setup ( ),var0 ( )
"call the method self._get_size_from_underlying_file, substitute the result for self._size.",call method var0 substitute result for var1 ,self . _size = self . _get_size_from_underlying_file ( ),var1 = var0 ( )
substitute size for self._size.,substitute size for var0 ,self . _size = size,var0 = size
call the method self._start_relational_field with an argument field.,call method var0 with argument field.,self . _start_relational_field ( field ),var0 ( field )
call the method self._start_relational_field with the argument field.,call method var0 with argument field.,self . _start_relational_field ( field ),var0 ( field )
call the method self._stream.unget with an argument unused_char.,call method var0 with argument var1 ,self . _stream . unget ( unused_char ),var0 ( var1 )
third element of the result of the function sys.exc_info.   self._stream is an instance of BytesIO class created with an argument self._body.,third element of result of function sys var1 var3 is instance of var4 class created with argument var5 ,self . _stream = BytesIO ( self . _body ),var3 = var4 ( var5 )
"self._stream is a class instance of a LimitedStream class, initialized with self.environ dictionary value under the 'wsgi.input' key,","var0 is class instance of var1 class, initialized with var3 dict value under var4 key,","self . _stream = LimitedStream ( self . environ [ 'wsgi.input' ] , content_length )","var0 = var1 ( var3 [ var4 ] , content_length )"
substitute stream for self._stream.,substitute stream for var0 ,self . _stream = stream,var0 = stream
substitute table for self._table.,substitute table for var0 ,self . _table = table,var0 = table
insert mw_instance.process_template_response at the beginning of self._template_response_middleware.,insert var0 var2 at beginning of var3 ,"self . _template_response_middleware . insert ( 0 , mw_instance . process_template_response )","var3 . insert ( 0 , var0 . var2 )"
self._template_response_middleware is an empty list.,var0 is empty list.,self . _template_response_middleware = [ ],var0 = [ ]
"call the method self.tzname with an argument dt, substitute the result for self._tzname.",call method var0 with argument var1 substitute result for var2 ,self . _tzname = self . tzname ( dt ),var2 = var0 ( var1 )
self._unget_history is an empty list.,var0 is empty list.,self . _unget_history = [ ],var0 = [ ]
"append first 49 elements of self._unget_history to list containing num_bytes, substitute the result for self._unget_history.",append first 49 elements of var0 to list containing var2 substitute result for var0 ,self . _unget_history = [ num_bytes ] + self . _unget_history [ : 49 ],var0 = [ var2 ] + var0 [ : 49 ]
call the method self._update_errors with an argument e.,call method var0 with argument var1,self . _update_errors ( e ),var0 ( e )
call the method self._update_unget_history with length of bytes as an argument.,call method var0 with length of bytes as argument.,self . _update_unget_history ( len ( bytes ) ),var0 ( len ( bytes ) )
"for every handler in settings.FILE_UPLOAD_HANDLERS,",for every handler in settings var0 ,"self . _upload_handlers = [ uploadhandler . load_handler ( handler , self ) for handler in settings . FILE_UPLOAD_HANDLERS ]","self . _upload_handlers = [ uploadhandler . load_handler ( handler , self ) for handler in settings . var0 ]"
substitute _upload_handlers for self.__upload_handlers.,substitute var0 for var1 ,self . _upload_handlers = upload_handlers,self . var0 = upload_handlers
substitute upload_handlers for self._upload_handlers.,substitute var0 for var1 ,self . _upload_handlers = upload_handlers,self . _var0 = var0
"call the function import_module with argument self.urlconf_name, substitute the result for self._urlconf_module.",call function var0 with argument self var2 substitute result for var3 ,self . _urlconf_module = import_module ( self . urlconf_name ),var3 = var0 ( self . var2 )
substitute self.urlconf_name for self.urlconf_module.,substitute self var1 for self var3 ,self . _urlconf_module = self . urlconf_name,self . _var3 = self . var1
self._validate_unique is boolean False.,var0 is boolean var1 ,self . _validate_unique = False,var0 = var1
self._validate_unique is boolean True.,var0 is boolean var1 ,self . _validate_unique = True,var0 = var1
substitute varlist for self.varlist.,substitute var0 for self var0 ,self . _varlist = varlist,self . _var0 = var0
append mw_instance.process_view at the end of self._view_middleware.,append var0 var2 at end of var3 ,self . _view_middleware . append ( mw_instance . process_view ),var3 . append ( var0 . var2 )
self._view_middleware is an empty list.,var0 is empty list.,self . _view_middleware = [ ],var0 = [ ]
substitute empty for self._wrapped.,substitute empty for var0 ,self . _wrapped = empty,var0 = empty
"call the function that is the return value of get_storage_class method, substitute the result for self._wrapped.","call function var0 is return value of var1 method, substitute result for var2 ",self . _wrapped = get_storage_class ( ) ( ),var2 = var1 ( ) ( )
"call the method self._setupfunc, substitute the result for self._wrapped.",call method var0 substitute result for var1 ,self . _wrapped = self . _setupfunc ( ),var1 = var0 ( )
self.abstract is boolean False.,var0 is boolean var1 ,self . abstract = False,var0 = var1
self.activated is boolean False.,var0 is boolean var1 ,self . activated = False,var0 = var1
self.activated is boolean True.,var0 is boolean var1 ,self . activated = True,var0 = var1
"decrement self.active_readers by integer 1,","decrement self var1 by integer 1,",self . active_readers -= 1,self . var1 -= 1
increment self.active_readers by 1.,increment self var1 by 1.,self . active_readers += 1,self . var1 += 1
increment self.active_readers by t.,increment self var1 by var2,self . active_readers += t,self . var1 += t
self.active_readers is an integer 0.,self var1 is integer 0.,self . active_readers = 0,self . var1 = 0
"decrement self.active_writers by integer 1,","decrement self var1 by integer 1,",self . active_writers -= 1,self . var1 -= 1
increment self.active_writers by 1.,increment self var1 by 1.,self . active_writers += 1,self . var1 += 1
"increment self.active_writers by integer 1,","increment self var1 by integer 1,",self . active_writers += 1,self . var1 += 1
self.active_writers is an integer 0.,self var1 is integer 0.,self . active_writers = 0,self . var1 = 0
call the method self.add_arguments with an argument parser.,call method self var1 with argument parser.,self . add_arguments ( parser ),self . var1 ( parser )
call the method self.add_error with 2 arguments name and e.,call method self var1 with 2 arguments name and var2,"self . add_error ( name , e )","self . var1 ( name , e )"
call the method self.add_error with 2 arguments None and e.,call method self var1 with 2 arguments var2 and var3,"self . add_error ( None , e )","self . var1 ( var2 , e )"
call the method self.add_error with 2 arguments: None and errors.,call method self var1 with 2 arguments: var2 and errors.,"self . add_error ( None , errors )","self . var1 ( var2 , errors )"
call the method self.add_fallback with an argument default_translation.,call method self var1 with argument var2 ,self . add_fallback ( default_translation ),self . var1 ( var2 )
call the method self.add_fields with arguments form and i).,call method self var1 with arguments form and i).,"self . add_fields ( form , i )","self . var1 ( form , i )"
"called with string '__prefix__' as an argument and empty_permitted as boolean True, substitute the result for form.   call the method self.add_fields with arguments form and None.",called with string var0 as argument and var1 as boolean var3 substitute result for form var4 call method self var6 with arguments form and var7 ,"self . add_fields ( form , None )","self . var6 ( form , var7 )"
call the method self.add_filters with 2 arguments: logger and filters.,call method self var1 with 2 arguments: logger and filters.,"self . add_filters ( logger , filters )","self . var1 ( logger , filters )"
call the method self.add_filters with 2 arguments: result and filters.,call method self var1 with 2 arguments: result and filters.,"self . add_filters ( result , filters )","self . var1 ( result , filters )"
call the method self.add_handlers with 2 arguments: logger and handlers.,call method self var1 with 2 arguments: logger and handlers.,"self . add_handlers ( logger , handlers )","self . var1 ( logger , handlers )"
call the method self.add_item_elements with 2 arguments: handler and item.,call method self var1 with 2 arguments: handler and item.,"self . add_item_elements ( handler , item )","self . var1 ( handler , item )"
called with an argument item.   call the method self.add_item_elements with 2 arguments: handler and item.,called with argument item var0 call method self var2 with 2 arguments: handler and item.,"self . add_item_elements ( handler , item )","self . var2 ( handler , item )"
call the method self.add_library with an argument lib.,call method self var1 with argument lib.,self . add_library ( lib ),self . var1 ( lib )
call the method self.add_root_elements with an argument handler.,call method self var1 with argument handler.,self . add_root_elements ( handler ),self . var1 ( handler )
"where '%s' is replaced with value under the 'addrport' key of the options dictionary.   call the method m.groups, assign the result to self.addr, _ipv4, _ipv6, _fqdn and self.port, respectively.",var0 var1 is replaced with value under var2 key of options dict var4 call method var5 assign result to var6 var7 _ipv6 var8 and var9 respectively.,"self . addr , _ipv4 , _ipv6 , _fqdn , self . port = m . groups ( )","var6 , var7 , _ipv6 , var8 , var9 = var5 ( )"
"if self.use_ipv6 substitute string '::1' for self.addr, if not substitute '127.0.0.1' for self.addr.",if self var1 substitute string var2 for var3 if not substitute var5 for var3 ,self . addr = '::1' if self . use_ipv6 else '127.0.0.1',var3 = var2 if self . var1 else '127.0.0.1'
self.addr is an empty string.,var0 is empty string.,self . addr = '',var0 = ''
substitute self.addr without the first and last element for self.addr.,substitute var0 var2 first and last element for var0 ,self . addr = self . addr [ 1 : - 1 ],var0 = var0 [ 1 : - 1 ]
substitute socket.AF_INET6 for self.address_family.,substitute socket var0 for self var2 ,self . address_family = socket . AF_INET6,self . var2 = socket . var0
"if not self.max_length is None.   remove the value under 'allow_empty_file' key from the kwargs dictionary and if the key exists,","if not self var1 is var2 remove value under var4 key from var5 dict and if key exists,","self . allow_empty_file = kwargs . pop ( 'allow_empty_file' , False )","self . allow_empty_file = var5 . pop ( var4 , False )"
substitute allow_empty_first_page for self.allow_empty_first_page.,substitute var0 for self var0 ,self . allow_empty_first_page = allow_empty_first_page,self . var0 = var0
substitute allow_files and allow_folders for self.allow_files and self.allow_folders.,substitute var0 and var2 for self var0 and self var2 ,"self . allow_files , self . allow_folders = allow_files , allow_folders","self . var0 , self . var2 = var0 , var2"
"append a tuple containing 2 elements: content and mimetype, to the self.alternatives list.",append tuple containing 2 elements: content and var0 to var1 list.,"self . alternatives . append ( ( content , mimetype ) )","var1 . append ( ( content , var0 ) )"
"bcc, connection, attachments, headers and cc.   if alternatives exists substitute it for self.alternatives, if not self.alternatives is an empty list.","var0, connection, attachments, headers and cc var1 if alternatives exists substitute it for var3 if not var3 is empty listvar1",self . alternatives = alternatives or [ ],self.var1lternatives var1 alternatives or var1]
self.app_label is a string 'django_cache'.,self var1 is string var2.,self . app_label = 'django_cache',self . var1 = var2
"get the value under the 'app_label' key of the options dictionary, substitute it for self.app_label.","get value under var0 key of options dict, substitute it for var1 ",self . app_label = options . get ( 'app_label' ),var1 = options . get ( var0 )
substitute app_name for self.app_name.,substitute var0 for self var0 ,self . app_name = app_name,self . var0 = var0
substitute app_or_project for self.app_or_project.,substitute var0 for self var0 ,self . app_or_project = app_or_project,self . var0 = var0
call the method self.appendlist with 2 arguments: return value of the function force_text with 3 arguments:,call method var0 with 2 arguments: return value of function var1 with 3 arguments:,"self . appendlist ( force_text ( key , encoding , errors = 'replace' ) , force_text ( value , encoding , errors = 'replace' ) )","var0 ( var1 ( key , encoding , errors = 'replace' ) , var1 ( value , encoding , errors = 'replace' ) )"
"keep_blank_values set to boolean True, encoding set to encoding.   call the method appendlist with 2 arguments: key and value.",var0 set to boolean var1 encoding set to encoding var2 call method var3 with 2 arguments: key and value.,"self . appendlist ( key , value )","self . var3 ( key , value )"
substitute args for self.args.,substitute var0 for self var0 ,self . args = args,self . var0 = var0
"call the method self.args_check with 3 arguments: filter_name, filter_func and args.",call method self var1 with 3 arguments: var2 var4 and args.,"self . args_check ( filter_name , filter_func , args )","self . var1 ( var2 , var4 , args )"
"if argv is true, substitue it for self.argv, if not substitute sys.argv for self.argv.",if var0 is true var1 it for self var0 if not substitute sys var0 for self var0 ,self . argv = argv or sys . argv [ : ],self . var0 = var0 or sys . var0 [ : ]
substitute asvar for self.asvar.,substitute var0 for self var0 ,self . asvar = asvar,self . var0 = var0
"call the method self.attach with arguments filename, content and mimetype.","call method var0 with arguments filename, content and var1 ","self . attach ( filename , content , mimetype )","var0 ( filename , content , var1 )"
"append a tuple containing 3 elements: filename, content, mimetype to self.attachments list.","append tuple containing 3 elements: filename, content var0 to var1 list.","self . attachments . append ( ( filename , content , mimetype ) )","var1 . append ( ( filename , content , var0 ) )"
append filename to the self.attachments list.,append filename to var0 list.,self . attachments . append ( filename ),var0 . append ( filename )
"if attachments exists substitute it for self.attachments, if not attachments is an empty list.",if attachments exists substitute it for var0 if not attachments is empty list.,self . attachments = attachments or [ ],var0 = attachments or [ ]
substitute new_attr for self.attr.,substitute var0 for var1 ,self . attr = new_attr,var1 = var0
substitute old_attr for self.attr.,substitute var0 for var1 ,self . attr = old_attr,var1 = var0
substitute attrs and choices for self.attrs and self.choices,substitute var0 and choices for self var0 and var2,"self . attrs , self . choices = attrs , choices","self . var0 , var2 = var0 , choices"
"convert self.index into a string and append it to '_' string, substitute it for value under the 'id' key of self.attrs dictionary.","convert var0 into string and append it to var1 string, substitute it for value under var2 key of self.attrs dict.",self . attrs [ 'id' ] += '_%d' % self . index,self . attrs [ var2 ] += '_%d' % var0
self.attrs is an empty dictionary.,self.attrs is empty dict.,self . attrs = { },self . attrs = { }
substitute attrs for self.attrs.,substitute var0 for self var0 ,self . attrs = attrs,self . var0 = var0
"call the method attrs.copy, substitute the result for self.attrs.",call method var0 substitute result for var1 ,self . attrs = attrs . copy ( ),var1 = var0 ( )
"if attrs is not None substitute it for self.attrs, or if not self.attrs is an empty dictionary.",if var0 is not var1 substitute it for self var0 or if not self var0 is empty dict.,self . attrs = attrs or { },self . var0 = var0 or { }
substitute auto_id for self.auto_id.,substitute var0 for self var0 ,self . auto_id = auto_id,self . var0 = var0
and substitute the result for self.prefix.   substitute auto_id for self.auto_id.,and substitute result for var0 substitute var2 for self var2 ,self . auto_id = auto_id,self . var2 = var2
call the method self.autocomplete.,call method var0 ,self . autocomplete ( ),var0 ( )
use_l10n set to None and use_tz set to None.   substitute autoescape for self.autoescape.,var0 set to var1 and var3 set to var1 substitute var6 for self var6 ,self . autoescape = autoescape,self . var6 = var6
append self.pointer to self.backout.,append var0 to self.backout.,self . backout . append ( self . pointer ),self . backout . append ( var0 )
self.backout is an empty list.,var0 is empty list.,self . backout = [ ],var0 = [ ]
add key to the self.bad_cookies set.,add key to self var1 set.,self . bad_cookies . add ( key ),self . var1 . add ( key )
self.bad_cookies is an empty set.,self var1 is empty set.,self . bad_cookies = set ( ),self . var1 = set ( )
substitute base for self.base.,substitute base for var0 ,self . base = base,var0 = base
"created with an argument widget set to HiddenInput.   value under the INITIAL_FORM_COUNT of the self.base_fields dictionary is an instance of IntegerField class,","created with argument widget set to var0 value under var2 of self var5 dict is instance of var6 class,",self . base_fields [ INITIAL_FORM_COUNT ] = IntegerField ( widget = HiddenInput ),self . var5 [ var2 ] = var6 ( widget = var0 )
"created with 2 arguments: required as boolean False and widget set to HiddenInput.   value under the MAX_NUM_FORM_COUNT of the self.base_fields dictionary is an instance of IntegerField class,","created with 2 arguments: required as boolean var0 and widget set to var1 value under var4 of self var7 dict is instance of var8 class,","self . base_fields [ MAX_NUM_FORM_COUNT ] = IntegerField ( required = False , widget = HiddenInput )","self . var7 [ var4 ] = var8 ( required = var0 , widget = var1 )"
"created with an argument widget set to HiddenInput.   value under the MIN_NUM_FORM_COUNT of the self.base_fields dictionary is an instance of IntegerField class,","created with argument widget set to var0 value under var2 of self var5 dict is instance of var6 class,","self . base_fields [ MIN_NUM_FORM_COUNT ] = IntegerField ( required = False , widget = HiddenInput )","self . var5 [ var2 ] = var6 ( required = False , widget = var0 )"
"value under the TOTAL_FORM_COUNT of the self.base_fields dictionary is an instance of IntegerField class,","value under var0 of self var2 dict is instance of var3 class,",self . base_fields [ TOTAL_FORM_COUNT ] = IntegerField ( widget = HiddenInput ),self . var2 [ var0 ] = var3 ( widget = HiddenInput )
substitute the location for self.base_location.,substitute location for self var1 ,self . base_location = location,self . var1 = location
substitute base_url for self.base_url.,substitute var0 for self var0 ,self . base_url = base_url,self . var0 = var0
self.bcc is an empty list.,var0 is empty list.,self . bcc = [ ],var0 = [ ]
"put bcc into a list, assign it to self.bcc.","put var0 into list, assign it to self var0 ",self . bcc = list ( bcc ),self . var0 = list ( var0 )
append block to the value under the name key of self.blocks dictionary.,append block to value under name key of var0 dict.,self . blocks [ name ] . append ( block ),var0 [ name ] . append ( block )
"get the value under the name key of self.blocks dictionary, insert to it block at the beginning.","get value under name key of var0 dict, insert to it block at beginning.","self . blocks [ name ] . insert ( 0 , block )","var0 [ name ] . insert ( 0 , block )"
"convert elements of defaultdict to list, substitute it for self.blocks.","convert elements of var0 to list, substitute it for var1 ",self . blocks = defaultdict ( list ),var1 = var0 ( list )
"self.blocks is a dictionary with elements: n for n.name, for every n in return value of the method nodelist.get_nodes_by_type,",var0 is dict with elements: n for var1 for every n in return value of method nodelist var3 ,"self . blocks = dict ( ( n . name , n ) for n in nodelist . get_nodes_by_type ( BlockNode ) )","var0 = dict ( ( var1 , n ) for n in nodelist . var3 ( BlockNode ) )"
substitute body for self.body.,substitute body for var0 ,self . body = body,var0 = body
substitute buf_size for self.buf_size.,substitute var0 for self var0 ,self . buf_size = buf_size,self . var0 = var0
increment self.buffer by chunk.,increment var0 by chunk.,self . buffer += chunk,var0 += chunk
substitute empty bytes string for self.buffer.,substitute empty bytes string for var0 ,self . buffer = b'',var0 = b''
truncate first size number of elements of self.buffer.,truncate first size number of elements of var0 ,self . buffer = self . buffer [ size : ],var0 = var0 [ size : ]
"call the sio.read method, substitute the result for self.buffer.","call var0 method, substitute result for var1 ",self . buffer = sio . read ( ),var1 = var0 ( )
substitute cache_choices for self.cache_choices.,substitute var0 for self var0 ,self . cache_choices = cache_choices,self . var0 = var0
substitute CacheEntry for self.cache_model_class.,substitute var0 for self var2 ,self . cache_model_class = CacheEntry,self . var2 = var0
substitute callback for self.callback.,substitute callback for var0 ,self . callback = callback,var0 = callback
self.callback is None.,var0 is var1 ,self . callback = None,var0 = var1
call the method self.can_read.acquire.,call method self var1 acquire.,self . can_read . acquire ( ),self . var1 . acquire ( )
call the method self.can_read.release.,call method self var1 release.,self . can_read . release ( ),self . var1 . release ( )
"call the method threading.Semaphore with an argument integer 0, substitute the result for self.can_read.","call method threading var0 with argument integer 0, substitute result for self var2 ",self . can_read = threading . Semaphore ( 0 ),self . var2 = threading . var0 ( 0 )
call the method self.can_write.acquire.,call method self var1 acquire.,self . can_write . acquire ( ),self . var1 . acquire ( )
call the method self.can_write.release.,call method self var1 release.,self . can_write . release ( ),self . var1 . release ( )
"call the method threading.Semaphore with an argument integer 0, substitute the result for self.can_write.","call method threading var0 with argument integer 0, substitute result for self var2 ",self . can_write = threading . Semaphore ( 0 ),self . var2 = threading . var0 ( 0 )
self.cc is an empty list.,var0 is empty list.,self . cc = [ ],var0 = [ ]
"put cc into a list, assign it to self.cc.","put cc into list, assign it to var0 ",self . cc = list ( cc ),var0 = list ( cc )
set field cdata_tag for this class instance to None.,set field var0 for var2 class instance to var3 ,self . cdata_tag = None,self . var0 = var3
set self.cdata_tag to None.,set self var1 to var2 ,self . cdata_tag = None,self . var1 = var2
"use it and the re.I as the input arguments for function re.compile, put the result in the self.interesting.   evaluate function tag.lower, without the arguments, put the result in the self.cdata_tag.","use it and re.I as input arguments for function var0 put result in var1 evaluate function var3 var4 arguments, put result in self var6 ",self . cdata_tag = tag . lower ( ),self . var6 = var3 ( )
append a tuple with 2 elements: obj and form.changed_data to self.changed_objects.,append tuple with 2 elements: var0 and form var2 to self var4 ,"self . changed_objects . append ( ( obj , form . changed_data ) )","self . var4 . append ( ( var0 , form . var2 ) )"
self.changed_objects is an empty list.,self var1 is empty list.,self . changed_objects = [ ],self . var1 = [ ]
call the method self.characters with an argument contents.,call method var0 with argument contents.,self . characters ( contents ),var0 ( contents )
substitute charset for self.charset.,substitute var0 for self var0 ,self . charset = charset,self . var0 = var0
self.charset is None.,var0 is var1 ,self . charset = None,var0 = var1
"call the method self.check,",call method var0 ,self . check ( ),var0 ( )
"call the method self.check with arguments: app_configs set to app_configs, tags set to tags, display_num_errors set to boolean True.",call method var0 with arguments: var1 set to var1 tags set to tags var5 set to boolean var7 ,"self . check ( app_configs = app_configs , tags = tags , display_num_errors = True )","var0 ( var1 = var1 , tags = tags , var5 = var7 )"
call the method self.check_migrations.,call method self var1 ,self . check_migrations ( ),self . var1 ( )
"substitute boolean_check for self.check_test if check_test is None, otherwise substitute check_test for self.check_test.",substitute var0 for self var4 if var4 is var10 otherwise substitute var4 for self var4 ,self . check_test = boolean_check if check_test is None else check_test,self . var4 = var0 if var4 is var10 else var4
append data to self.children.,append data to var0 ,self . children . append ( data ),var0 . append ( data )
extend self.children list with data.children.,extend var0 list with var1 ,self . children . extend ( data . children ),var0 . extend ( var1 )
self.children is an list with 2 elements: obj and data.,var0 is list with 2 elements: var1 and data.,"self . children = [ obj , data ]","var0 = [ var1 , data ]"
"if children is true, copy children list to self.children, otherwise self.children is an empty list.","if children is true, copy children list to var0 otherwise var0 is empty list.",self . children = children [ : ] if children else [ ],var0 = children [ : ] if children else [ ]
self.choice_cache is None.,self var1 is var2 ,self . choice_cache = None,self . var1 = var2
"call the function force_text with second element of choice as an argument, substitute the result for self.choice_label.","call function var0 with second element of choice as argument, substitute result for self var2 ",self . choice_label = force_text ( choice [ 1 ] ),self . var2 = var0 ( choice [ 1 ] )
"call the function force_text with first element of choice as an argument, substitute the result for self.choice_value.","call function var0 with first element of choice as argument, substitute result for self var2 ",self . choice_value = force_text ( choice [ 0 ] ),self . var2 = var0 ( choice [ 0 ] )
"append a tuple with 2 elements: f and f with first occurrence of the path replaced with an empty string, to self.choices.","append tuple with 2 elements: f and f with first occurrence of path replaced with empty string, to var0 ","self . choices . append ( ( f , f . replace ( path , '' , 1 ) ) )","var0 . append ( ( f , f . replace ( path , '' , 1 ) ) )"
and only if self.match is None or return value of the method self.match_re.search called with an argument f is true.   append a tuple containing 2 elements: full_file and f to self.choices list.,and only if var0 is var1 or return value of method self var3 search called with argument f is true var4 append tuple containing 2 elements: var5 and f to var7 list.,"self . choices . append ( ( full_file , f ) )","var7 . append ( ( var5 , f ) )"
"self.choices is an list containing an tuple with 2 elements: an empty string and string ""---------"".",var0 is list containing tuple with 2 elements: empty string and string var1.,"self . choices = [ ( '' , '---------' ) ]","var0 = [ ( '' , '---------' ) ]"
self.choices is an empty list.,var0 is empty list.,self . choices = [ ],var0 = [ ]
"widget set to widget, label set to label, initial set to initial, help_text set to help_text, unpacked list args,   and unpacked dictionary kwargs.   substitute choices for self.choices.","widget set to widget, label set to label, initial set to initial var0 set to var0 unpacked list var2 and unpacked dict var5 var3 substitute choices for var6 ",self . choices = choices,var6 = choices
substitute choices for self.choices.,substitute choices for var0 ,self . choices = choices,var0 = choices
"convert elements of choices into a list, substitute it for self.choices.","convert elements of choices into list, substitute it for var0 ",self . choices = list ( choices ),var0 = list ( choices )
substitute chunk_size for self.chunk_size.,substitute var0 for self var0 ,self . chunk_size = chunk_size,self . var0 = var0
substitute class_name for self.class_name.,substitute var0 for self var0 ,self . class_name = class_name,self . var0 = var0
"strings ""Please submit %d or more forms."", ""Please submit %d or more forms."" and self.min_num,   where '%d' is replaced with self.min_num, and code as a string 'too_few_forms'.   call the method self.clean.","strings var0, var0 and self var4 var8 var9 is replaced with self var4 and code as string var11 var6 call method var14 ",self . clean ( ),var14 ( )
substitute value for the value under the name key of the self.cleaned_data dictionary.,substitute value for value under name key of self var1 dict.,self . cleaned_data [ name ] = value,self . var1 [ name ] = value
substitute the result for value.   substitute value for the value under the name key of the self.cleaned_data dictionary.,substitute result for value var0 substitute value for value under name key of self var2 dict.,self . cleaned_data [ name ] = value,self . var2 [ name ] = value
self.cleaned_data is an empty dictionary.,self var1 is empty dict.,self . cleaned_data = { },self . var1 = { }
substitute cleaned_data for self.cleaned_data.,substitute var0 for self var0 ,self . cleaned_data = cleaned_data,self . var0 = var0
call the self.clear method.,call var0 method.,self . clear ( ),var0 ( )
call self.clear method.,call var0 method.,self . clear ( ),var0 ( )
call the method self.clear_cdata_mode.,call method self var1 ,self . clear_cdata_mode ( ),self . var1 ( )
close the file self.,close file self.,self . close ( ),self . close ( )
call the method close on self.,call method close on self.,self . close ( ),self . close ( )
call the method self.close.,call method var0 ,self . close ( ),var0 ( )
call the self.close method.,call var0 method.,self . close ( ),var0 ( )
substitute False for self.close_called.,substitute var0 for self var2 ,self . close_called = False,self . var2 = var0
substitute True for self.close_called.,substitute var0 for self var2 ,self . close_called = True,self . var2 = var0
substitute cmd for self.cmd.,substitute var0 for self var0 ,self . cmd = cmd,self . var0 = var0
substitute code for self.code.,substitute code for var0 ,self . code = code,var0 = code
"if 'coerce' key of the kwargs dictionary exists remove it and substitute its value for self.coerce,",if var0 key of var1 dict exists remove it and substitute its value for var2 ,"self . coerce = kwargs . pop ( 'coerce' , lambda val : val )","var2 = var1 . pop ( var0 , lambda val : val )"
"append tuple with 2 elements: command and token.source, append the result to self.command_stack.",append tuple with 2 elements: command and var0 append result to self var2 ,"self . command_stack . append ( ( command , token . source ) )","self . var2 . append ( ( command , var0 ) )"
remove first element from self.command_stack.,remove first element from self var1 ,self . command_stack . pop ( ),self . var1 . pop ( )
self.command_stack is an empty list.,self var1 is empty list.,self . command_stack = [ ],self . var1 = [ ]
"call the method self.common_logger_config with 3 arguments: logger, config and incremental.","call method self var1 with 3 arguments: logger, config and incremental.","self . common_logger_config ( logger , config , incremental )","self . var1 ( logger , config , incremental )"
"call the method self.common_logger_config with 3 arguments: root, config and incremental.","call method self var1 with 3 arguments: root, config and incremental.","self . common_logger_config ( root , config , incremental )","self . var1 ( root , config , incremental )"
"call the self.compile_messages with locations as argument,","call self var1 with locations as argument,",self . compile_messages ( locations ),self . var1 ( locations )
substitute tuple with 2 elements: bz2.BZ2File and string 'r' for value under the 'bz2' key of the self.compression_formats dictionary.,substitute tuple with 2 elements: bz2 var2 and string var3 for value under var4 key of self var6 dict.,"self . compression_formats [ 'bz2' ] = ( bz2 . BZ2File , 'r' )","self . var6 [ 'bz2' ] = bz2 . var2 , var3"
"self.compression_formats is an dictionary with 3 initial entries: tuple containing 2 elements: open and string 'rb' for None,",self var1 is dict with 3 initial entries: tuple containing 2 elements: open and string var2 for var3 ,"self . compression_formats = { None : ( open , 'rb' ) , 'gz' : ( gzip . GzipFile , 'rb' ) , 'zip' : ( SingleZipReader , 'r' ) , }","self . var1 = { var3 : ( open , var2 ) , 'gz' : ( gzip . GzipFile , var2 ) , 'zip' : ( SingleZipReader , 'r' ) }"
substitute conditions_nodelists for self.conditions_nodelists.,substitute var0 for self var0 ,self . conditions_nodelists = conditions_nodelists,self . var0 = var0
substitute self for self.config.configurator.,substitute self for var0 ,self . config . configurator = self,var0 = self
"self.config is an instance of ConvertingDict, called with an argument config.",var0 is instance of var2 called with argument var1 ,self . config = ConvertingDict ( config ),var0 = var2 ( var1 )
"call the method self.configure_logger with 3 arguments: name, value under name key of loggers dictionary and boolean True.","call method self var1 with 3 arguments: name, value under name key of loggers dict and boolean var2 ","self . configure_logger ( name , loggers [ name ] , True )","self . var1 ( name , loggers [ name ] , var2 )"
call the method self.configure_logger with 2 arguments: name and value under loggers dictionary key name.,call method self var1 with 2 arguments: name and value under loggers dict key name.,"self . configure_logger ( name , loggers [ name ] )","self . var1 ( name , loggers [ name ] )"
call the method self.configure_root with 2 arguments: root and boolean True.,call method self var1 with 2 arguments: root and boolean var2 ,"self . configure_root ( root , True )","self . var1 ( root , var2 )"
call the method self.configure_root with an argument root.,call method self var1 with argument root.,self . configure_root ( root ),self . var1 ( root )
call the method self.connection.close.,call method var0 ,self . connection . close ( ),var0 ( )
call the method self.connection.ehlo.,call method var0 ,self . connection . ehlo ( ),var0 ( )
call the method self.connection.login with arguments self.username and self.password.,call method var0 with arguments var1 and var2 ,"self . connection . login ( self . username , self . password )","var0 ( var1 , var2 )"
call the method self.connection.quit.,call method var0 ,self . connection . quit ( ),var0 ( )
"call the method self.connection.sendmail with arguments: from_email, recipients and return value of the function message.as_bytes.",call method var0 with arguments: var1 recipients and return value of function message var3 ,"self . connection . sendmail ( from_email , recipients , message . as_bytes ( ) )","var0 ( var1 , recipients , message . var3 ( ) )"
call the method self.connection.starttls.,call method var0 ,self . connection . starttls ( ),var0 ( )
substitute connection for self.connection.,substitute connection for var0 ,self . connection = connection,var0 = connection
"self.connection is a instance of a class contained in connection_class, instantiated with arguments: self.host, self.port,",var0 is instance of class contained in var1 instantiated with arguments: self.host var2 ,"self . connection = connection_class ( self . host , self . port , ** connection_params )","var0 = var1 ( self . host , var2 , ** connection_params )"
"call the function get_connection with argument fail_silently set to fail_silently, substitute it for self.connection.",call function var0 with argument var1 set to var1 substitute it for var5 ,self . connection = get_connection ( fail_silently = fail_silently ),var5 = var0 ( var1 = var1 )
self.connection is None.,var0 is var1 ,self . connection = None,var0 = var1
substitute connection_reset for self.connection_reset.,substitute var0 for self var0 ,self . connection_reset = connection_reset,self . var0 = var0
substitute conn_type for self.connector.,substitute var0 for var1 ,self . connector = conn_type,var1 = var0
"if connector is true, substitute it for self.connector, otherwise substitute self.default for self.connector.","if connector is true, substitute it for var0 otherwise substitute var1 for var0 ",self . connector = connector or self . default,var0 = connector or var1
substitute content for self.content.,substitute content for var0 ,self . content = content,var0 = content
substitute self.rendered_content for self.content.,substitute self var1 for var2 ,self . content = self . rendered_content,var2 = self . var1
substitute content_length for self.content_length.,substitute var0 for self var0 ,self . content_length = content_length,self . var0 = var0
self.content_length is None.,self var1 is var2 ,self . content_length = None,self . var1 = var2
substitute content_type for self.content_type.,substitute var0 for self var0 ,self . content_type = content_type,self . var0 = var0
self.content_type is None.,self var1 is var2 ,self . content_type = None,self . var1 = var2
substitute content_type_extra for self.content_type_extra.,substitute var0 for self var0 ,self . content_type_extra = content_type_extra,self . var0 = var0
self.content_type_extra is None.,self var1 is var2 ,self . content_type_extra = None,self . var1 = var2
remove the first element from the self.context.,remove first element from var0 ,self . context . pop ( ),var0 . pop ( )
substitute context for self.context.,substitute context for var0 ,self . context = context,var0 = context
substitute context for self.context_data.,substitute context for self var1 ,self . context_data = context,self . var1 = context
"get the value under the key key of the self.cookies dictionary, domain expires for 'domain' key of the returned dictionary.","get value under key key of var0 dict, domain expires for var1 key of returned dict.",self . cookies [ key ] [ 'domain' ] = domain,var0 [ key ] [ var1 ] = domain
"get the value under the key key of the self.cookies dictionary, call the cookie_date function with an argument:","get value under key key of var0 dict, call var1 function with argument:",self . cookies [ key ] [ 'expires' ] = cookie_date ( time . time ( ) + max_age ),var0 [ key ] [ 'expires' ] = var1 ( time . time ( ) + max_age )
"get the value under the key key of the self.cookies dictionary, substitute expires for 'expires' key of the returned dictionary.","get value under key key of var0 dict, substitute expires for var1 key of returned dict.",self . cookies [ key ] [ 'expires' ] = expires,var0 [ key ] [ var1 ] = expires
"get the value under the key key of the self.cookies dictionary, substitute boolean True for 'httponly' key of the returned dictionary.","get value under key key of var0 dict, substitute boolean var1 for var2 key of returned dict.",self . cookies [ key ] [ 'httponly' ] = True,var0 [ key ] [ var2 ] = var1
"get the value under the key key of the self.cookies dictionary, substitute max-age for 'max-age' key of the returned dictionary.","get value under key key of var0 dict, substitute max-age for var1 key of returned dict.",self . cookies [ key ] [ 'max-age' ] = max_age,var0 [ key ] [ var1 ] = max_age
"get the value under the key key of the self.cookies dictionary, substitute path for 'path' key of the returned dictionary.","get value under key key of var0 dict, substitute path for var1 key of returned dict.",self . cookies [ key ] [ 'path' ] = path,var0 [ key ] [ var1 ] = path
"get the value under the key key of the self.cookies dictionary, substitute boolean True for 'secure' key of the returned dictionary.","get value under key key of var0 dict, substitute boolean var1 for var2 key of returned dict.",self . cookies [ key ] [ 'secure' ] = True,var0 [ key ] [ var2 ] = var1
substitute value for self.cookies dictionary value under the key key.,substitute value for var0 dict value under key key.,self . cookies [ key ] = value,var0 [ key ] = value
self.COOKIES is an empty dictionary.,self var0 is empty dict.,self . COOKIES = { },self . var0 = { }
self.cookies is an instance of a class SimpleCookie.,var0 is instance of class var1 ,self . cookies = SimpleCookie ( ),var0 = var1 ( )
self.cookies is an instance of SimpleCookie class created with self.cookies as an argument.,var0 is instance of var2 class created with var0 as argument.,self . cookies = SimpleCookie ( self . cookies ),var0 = var2 ( var0 )
all the method self.create_table with arguments: db and cache._table.,all method self var1 with arguments: db and var2 ,"self . create_table ( db , cache . _table )","self . var1 ( db , var2 )"
call the method self.create_table with arguments: db and tablename.,call method self var1 with arguments: db and var2 ,"self . create_table ( db , tablename )","self . var1 ( db , var2 )"
substitute Field.creation_counter for self.creation_counter.,substitute var0 var2 for self var2 ,self . creation_counter = Field . creation_counter,self . var2 = var0 . var2
substitute current_app for self.current_app.,substitute var0 for self var0 ,self . current_app = current_app,self . var0 = var0
"call the method self.next_token, substitute the result for self.current_token.",call method self var1 substitute result for self var3 ,self . current_token = self . next_token ( ),self . var3 = self . var1 ( )
substitute cyclevars for self.cyclevars.,substitute var0 for self var0 ,self . cyclevars = cyclevars,self . var0 = var0
"if data is true, substitute it for self.data, if not self.data is an empty dictionary.","if data is true, substitute it for var0 if not var0 is empty dict.",self . data = data or { },var0 = data or { }
"if data is true, substitute it for self.data, otherwise self.data is an empty dictionary.","if data is true, substitute it for var0 otherwise var0 is empty dict.",self . data = data or { },var0 = data or { }
substitute obj for self.data.,substitute var0 for var1 ,self . data = obj,var1 = var0
self.day_none_value is a tuple containing 2 elements: integer 0 and third element of empty_label.,self var1 is tuple containing 2 elements: integer 0 and third element of var2 ,"self . day_none_value = ( 0 , empty_label [ 2 ] )","self . var1 = 0 , var2 [ 2 ]"
substitute self.none_value for self.day_none_value.,substitute self var1 for self var3 ,self . day_none_value = self . none_value,self . day_var1 = self . var1
"substitute the result for self.event_stream.   remove the 'using' key from the options dictionary, substitute the return value for self.db, if the key doesnt exists substitute","substitute result for self var1 remove var3 key from options dict, substitute return value for var4 if key doesnt exists substitute","self . db = options . pop ( 'using' , DEFAULT_DB_ALIAS )","var4 = options . pop ( var3 , DEFAULT_DB_ALIAS )"
substitute table for self.db_table.,substitute table for self var1 ,self . db_table = table,self . var1 = table
substitute deactivate for self.deactivate.,substitute deactivate for var0 ,self . deactivate = deactivate,var0 = deactivate
"if default_args exists substitute it for self.default_args, if not, self.default_args is an empty dictionary.","if var0 exists substitute it for self var0 if not, self var0 is empty dict.",self . default_args = default_args or { },self . var0 = var0 or { }
"if default_kwargs exists, substitute it for self.default_kwargs, otherwise self.default_kwargs is an empty dictionary.","if var0 exists, substitute it for self var0 otherwise self var0 is empty dict.",self . default_kwargs = default_kwargs or { },self . var0 = var0 or { }
self.default_locale_path is None.,self var1 is var2 ,self . default_locale_path = None,self . var1 = var2
"put the results into a list, substitute self.locale_paths for it.   substitute first element of self.locale_paths for self.default_locale_path.","put results into list, substitute self var2 for it var4 substitute first element of self var2 for self var6 ",self . default_locale_path = self . locale_paths [ 0 ],self . var6 = self . var2 [ 0 ]
substitute first element of self.locale_paths for self.default_locale_path.,substitute first element of self var1 for self var3 ,self . default_locale_path = self . locale_paths [ 0 ],self . var3 = self . var1 [ 0 ]
substitute timeout for self.default_timeout.,substitute timeout for self var1 ,self . default_timeout = timeout,self . var1 = timeout
"call the method validators.ip_address_validators with arguments protocol, unpack_ipv4, substitute first element of the result for self.default_validators.",call method validators var1 with arguments protocol var2 substitute first element of result for self var5 ,"self . default_validators = validators . ip_address_validators ( protocol , unpack_ipv4 ) [ 0 ]","self . var5 = validators . var1 ( protocol , var2 ) [ 0 ]"
call the delete method with key and version set to version as arguments.,call delete method with key and version set to version as arguments.,"self . delete ( key , version = version )","self . delete ( key , version = version )"
call the self.delete method with key and version set to version as arguments.,call var0 method with key and version set to version as arguments.,"self . delete ( key , version = version )","var0 ( key , version = version )"
append obj to self.deleted_objects list.,append obj to self var1 list.,self . deleted_objects . append ( obj ),self . var1 . append ( obj )
self.deleted_objects is an empty list.,self var1 is empty list.,self . deleted_objects = [ ],self . var1 = [ ]
substitute deprecation_warning for self.deprecation_warning.,substitute var0 for self var0 ,self . deprecation_warning = deprecation_warning,self . var0 = var0
value under the item key of self.dict dictionary is None.,value under item key of var0 dict is var1 ,self . dict [ item ] = None,var0 [ item ] = var1
"self.dict is an instance of OrderedDict class, created with arguments: tuples with 2 argument x and None, for every x in iterables,","var0 is instance of var1 class, created with arguments: var2 with 2 argument x and var3 for every x in var4 ","self . dict = OrderedDict ( ( ( x , None ) for x in iterable ) if iterable else [ ] )","var0 = var1 ( ( ( x , var3 ) for x in iterable ) if iterable else [ ] )"
append other_dict to self.dicts.,append var0 to var1 ,self . dicts . append ( other_dict ),var1 . append ( var0 )
append value to self.dicts list.,append value to var0 list.,self . dicts . append ( value ),var0 . append ( value )
substitute value for value under the key key of dictionary at last element of self.dicts.,substitute value for value under key key of dict at last element of var0 ,self . dicts [ - 1 ] [ key ] = value,var0 [ - 1 ] [ key ] = value
self.dicts is an list with element builtins.,var0 is list with element var1 ,self . dicts = [ builtins ],var0 = [ var1 ]
RemovedInDjango19Warning and integer 2.   substitute dicts for self.dicts.,var0 and integer 2 var1 substitute var2 for self var2 ,self . dicts = dicts,self . var2 = var2
substitute digits for self.digits.,substitute digits for var0 ,self . digits = digits,var0 = digits
"or settings.FILE_UPLOAD_PERMISSIONS if it is.   self.directory_permissions_mode is a tuple containing: directory_permissions_mode if directory_permissions_mode is not None,",or settings var0 if it is var1 self var3 is tuple containing: var3 if var3 is not var8 ,self . directory_permissions_mode = ( directory_permissions_mode if directory_permissions_mode is not None else settings . FILE_UPLOAD_DIRECTORY_PERMISSIONS ),self . var3 = ( var3 if var3 is not var8 else settings . FILE_UPLOAD_DIRECTORY_PERMISSIONS )
substitute dirpath for self.dirpath.,substitute var0 for self var0 ,self . dirpath = dirpath,self . var0 = var0
"get the value under the 'domain' key of the options dictionary, substitute it for self.domain.","get value under var0 key of options dict, substitute it for var1 ",self . domain = options . get ( 'domain' ),var1 = options . get ( var0 )
substitute whitelist for self.domain_whitelist.,substitute whitelist for self var1 ,self . domain_whitelist = whitelist,self . var1 = whitelist
"get the value under the 'dry_run' key of the options dictionary, if the key exists substitute it for self.dry_run,","get value under var0 key of options dict, if key exists substitute it for var1 ","self . dry_run = options . get ( 'dry_run' , False )","var1 = options . get ( var0 , False )"
"subtract self.STDOFFSET with self.DSTOFFSET, substitute the result for self.DSTDIFF.",subtract self var0 with self var1 substitute result for self var3 ,self . DSTDIFF = self . DSTOFFSET - self . STDOFFSET,self . var3 = self . var1 - self . var0
substitute self.STDOFFSET for self.DSTOFFSET.,substitute self var0 for self var1 ,self . DSTOFFSET = self . STDOFFSET,self . var1 = self . var0
"call the function timedelta with an argument seconds set to negative _time.altzone, substitute the result for self.DSTOFFSET.",call function var0 with argument seconds set to negative var1 substitute result for self var2 ,self . DSTOFFSET = timedelta ( seconds = - _time . altzone ),self . var2 = var0 ( seconds = - var1 )
substitute email_backend for self.email_backend.,substitute var0 for self var0 ,self . email_backend = email_backend,self . var0 = var0
"call the method self.emit_post_migrate with arguments verbosity, interactive and database.","call method self var1 with arguments verbosity, interactive and database.","self . emit_post_migrate ( verbosity , interactive , database )","self . var1 ( verbosity , interactive , database )"
"if not, self.merge is boolean False.   get the value under the 'empty' key of the options dictionary, if the key exists substitute it for self.empty,","if not var0 is boolean var1 get value under var3 key of options dict, if key exists substitute it for var4 ","self . empty = options . get ( 'empty' , False )","var4 = options . get ( var3 , var1 )"
call the method self.empty_block_tag with an argument token.,call method self var1 with argument token.,self . empty_block_tag ( token ),self . var1 ( token )
substitute empty_label for self.empty_label.,substitute var0 for self var0 ,self . empty_label = empty_label,self . var0 = var0
self.empty_label is None.,self var1 is var2 ,self . empty_label = None,self . var1 = var2
otherwise substitute return value of the function _ called with an argument ':' for self.label_suffix.   substitute empty_permitted for self.empty_permitted.,otherwise substitute return value of function var0 called with argument var1 for self var3 substitute var5 for self var5 ,self . empty_permitted = empty_permitted,self . var5 = var5
"if not, self.coerce is an identity lambda function with an argument val.   if 'empty_value' key of the kwargs dictionary exists remove it and substitute its value for self.empty_value,",if not var0 is identity lambda function with argument val var1 if var2 key of var3 dict exists remove it and substitute its value for var4 ,"self . empty_value = kwargs . pop ( 'empty_value' , '' )","var4 = var3 . pop ( var2 , '' )"
"if not, self.coerce is an identity lambda function with an argument val.   if 'empty_value' key of the kwargs dictionary exists remove it and substitute its value for self.empty_value,",if not var0 is identity lambda function with argument val var1 if var2 key of var3 dict exists remove it and substitute its value for var4 ,"self . empty_value = kwargs . pop ( 'empty_value' , [ ] )","var4 = var3 . pop ( var2 , [ ] )"
"call the method self.empty_variable with an argument token,","call method self var1 with argument token,",self . empty_variable ( token ),self . var1 ( token )
substitute charset for self.encoding.,substitute var0 for var1 ,self . encoding = charset,var1 = var0
"get the value under the 'charset' key of content_params dictionary, substitute it for self.encoding.","get value under var0 key of var1 dict, substitute it for var3 ",self . encoding = content_params [ 'charset' ],var3 = var1 [ var0 ]
encoding set to None and unpacked dictionary _params.   substitute encoding for self.encoding.,encoding set to var0 and unpacked dict var1 substitute encoding for var3 ,self . encoding = encoding,var3 = encoding
substitute encoding for self.encoding.,substitute encoding for var0 ,self . encoding = encoding,var0 = encoding
call the method self.end_object with an argument obj.,call method self var1 with argument obj.,self . end_object ( obj ),self . var1 ( obj )
call the method self.end_serialization.,call method self var1 ,self . end_serialization ( ),self . var1 ( )
call the method self.endChannelElement with an argument handler.,call method self var1 with argument handler.,self . endChannelElement ( handler ),self . var1 ( handler )
call the method self.endElement with an argument name.,call method self var1 with argument name.,self . endElement ( name ),self . var1 ( name )
substitute ending for self.ending.,substitute ending for var0 ,self . ending = ending,var0 = ending
call the method self.enter_command with 2 arguments command and token.,call method self var1 with 2 arguments command and token.,"self . enter_command ( command , token )","self . var1 ( command , token )"
substitute environ for self.environ.,substitute environ for var0 ,self . environ = environ,var0 = environ
"slice the rawdata from i-th to the j-th element, replace with it '%r' in the string ""bad end tag: %r"", use it to call the method self.error.","slice var0 from i-th to j-th element, replace with it var1 in string var2, use it to call method var3 ","self . error ( 'bad end tag: %r' % ( rawdata [ i : j ] , ) )","var3 ( 'bad end tag: %r' % ( var0 [ i : j ] , ) )"
"slice the rawdata from k to endpos, then take the first 20 elements of the previous slice,","slice var0 from k to var1 then take first 20 elements of previous slice,","self . error ( 'junk characters in start tag: %r' % ( rawdata [ k : endpos ] [ : 20 ] , ) )","self . error ( 'junk characters in start tag: %r' % ( var0 [ k : var1 ] [ : 20 ] , ) )"
call the method self.error with an argument self.cmd.missing_args_message.,call method var0 with argument self.cmd var2 ,self . error ( self . cmd . missing_args_message ),var0 ( self . cmd . var2 )
"append error_class converted into a string to string 'errorlist ', substitute the result for self.error_class.","append var0 converted into string to string var3, substitute result for self var0 ",self . error_class = 'errorlist {}' . format ( error_class ),self . var0 = 'errorlist {}' . format ( var0 )
self.error_class is a string 'errorlist'.,self var1 is string var2.,self . error_class = 'errorlist',self . var1 = var2
substitute .error_class for self.error_class.,substitute var0 for self var0 ,self . error_class = error_class,self . var0 = var0
substitute error_class for self.error_class.,substitute var0 for self var0 ,self . error_class = error_class,self . var0 = var0
substitute messages.error_list for the value under the field key of the self.error_dict dictionary.,substitute messages var1 for value under field key of self var3 dict.,self . error_dict [ field ] = messages . error_list,self . var3 [ field ] = messages . var1
self.error_dict is an empty dictionary.,self var1 is empty dict.,self . error_dict = { },self . var1 = { }
extend the self.error_list list with message.error_list.,extend self var1 list with message var1 ,self . error_list . extend ( message . error_list ),self . var1 . extend ( message . var1 )
self.error_list is an empty list.,self var1 is empty list.,self . error_list = [ ],self . var1 = [ ]
substitute list containing element self for self.error_list.,substitute list containing element self for self var1 ,self . error_list = [ self ],self . var1 = [ self ]
"get 'error_messages' attribute from the options object, if it exists substitute it for self.error_messages,","get var0 attribute from options object, if it exists substitute it for var1 ","self . error_messages = getattr ( options , 'error_messages' , None )","var1 = getattr ( options , var0 , None )"
substitute messages for self.error_messages.,substitute messages for self var1 ,self . error_messages = messages,self . var1 = messages
call self.errors.,call var0 ,self . errors,var0
call the method self.event_stream.expandNode with an argument node.,call method self var1 var2 with argument node.,self . event_stream . expandNode ( node ),self . var1 . var2 ( node )
"call the method pulldom.parse with arguments: self.stream and return value of the method self._make_parser,",call method var0 with arguments: var1 and return value of method var2 ,"self . event_stream = pulldom . parse ( self . stream , self . _make_parser ( ) )","self . event_stream = var0 ( var1 , var2 ( ) )"
substitute exception for self.exception.,substitute exception for var0 ,self . exception = exception,var0 = exception
"get 'exclude' attribute from the options object, if it exists substitute it for self.exclude, if not self.exclude is None.","get var0 attribute from options object, if it exists substitute it for var1 if not var1 is var3 ","self . exclude = getattr ( options , 'exclude' , None )","var1 = getattr ( options , var0 , var3 )"
"call the method self.execute, with 2 arguments: unpacked list args and unpacked dictionary cmd_options.",call method var0 with 2 arguments: unpacked list var1 and unpacked dict var2 ,"self . execute ( * args , ** cmd_options )","var0 ( * var1 , ** var2 )"
call the method self.exit_command.,call method self var1 ,self . exit_command ( ),self . var1 ( )
"call the method self.extend_nodelist with 3 arguments: nodelist, compiled_result and token.",call method self var1 with 3 arguments: nodelist var2 and token.,"self . extend_nodelist ( nodelist , compiled_result , token )","self . var1 ( nodelist , var2 , token )"
"call the method self.extend_nodelist with 3 arguments: nodelist, instance of TextNode class, created with an argument token.contents,","call method self var1 with 3 arguments: var2 instance of var3 class, created with argument var4 ","self . extend_nodelist ( nodelist , TextNode ( token . contents ) , token )","self . var1 ( var2 , var3 ( var4 ) , token )"
"call the method self.extend_nodelist with 3 arguments: nodelist, var_node and token.",call method self var1 with 3 arguments: nodelist var2 and token.,"self . extend_nodelist ( nodelist , var_node , token )","self . var1 ( nodelist , var2 , token )"
"call the function handle_extensions exts, substitute self.extensions.",call function var0 var1 substitute var2 ,self . extensions = handle_extensions ( exts ),var2 = var0 ( var1 )
substitute var for value under the name key of the self.extra_context dictionary.,substitute var for value under name key of self var1 dict.,self . extra_context [ name ] = var,self . var1 [ name ] = var
"if extra_context is true, substitute it for self.extra_context, if not self.extra_context is an empty dictionary.","if var0 is true, substitute it for self var0 if not self var0 is empty dict.",self . extra_context = extra_context or { },self . var0 = var0 or { }
"remove kwargs dictionary entry under the 'extra_context' key, if it exists substitute it for self.extra_context,","remove var0 dict entry under var1 key, if it exists substitute it for var2 ","self . extra_context = kwargs . pop ( 'extra_context' , { } )","var2 = var0 . pop ( var1 , { } )"
"if headers exists substitute it for self.extra_headers, if not extra_headers is an empty dictionary.",if headers exists substitute it for self var1 if not var1 is empty dict.,self . extra_headers = headers or { },self . var1 = headers or { }
substitute fail_silently for self.fail_silently.,substitute var0 for self var0 ,self . fail_silently = fail_silently,self . var0 = var0
"format string '&#%s;' with name, append it to self.fed.","format string var0 with name, append it to var1 ",self . fed . append ( '&#%s;' % name ),var1 . append ( var0 % name )
"format string '&%s;' with name, append it to self.fed.","format string var0 with name, append it to var1 ",self . fed . append ( '&%s;' % name ),var1 . append ( var0 % name )
append d to self.fed.,append d to var0 ,self . fed . append ( d ),var0 . append ( d )
self.fed is an empty list.,var0 is empty list.,self . fed = [ ],var0 = [ ]
"result of the function iri_to_uri called with an argument link for 'link',   result of the function to_unicode called with an argument description for 'description',   result of the function to_unicode called with an argument language for 'language',   result of the function to_unicode called with an author_email description for 'author_email',   result of the function to_unicode called with an argument author_name for 'author_name',   result of the function iri_to_uri called with an argument author_link for 'author_link',   result of the function to_unicode called with an argument subtitle for 'subtitle',   if true, categories is value for 'categories' key, if not, empty tuple is value for 'categories' key,   result of the function iri_to_uri called with an argument feed_url for 'feed_url',   result of the function to_unicode called with an argument feed_copyright for 'feed_copyright',   if true, feed_guid is value for 'id' key, if not, lik is value for 'id' key and ttl for 'ttl'.   update self.feed dictionary with kwargs.","result of function var0 called with argument link for var3 var4 result of function var15 called with argument description for var27 var4 result of function var15 called with argument language for var28 var4 result of function var15 called with author_email description for var33 var4 result of function var15 called with argument author_name for var38 var4 result of function var0 called with argument author_link for var43 var4 result of function var15 called with argument subtitle for var44 var4 if true, categories is value for var45 key, if not, empty tuple is value for var45 key var4 result of function var0 called with argument feed_url for var51 var4 result of function var15 called with argument feed_copyright for var56 var4 if true var57 is value for var59 key, if not var61 is value for var59 key and ttl for var64 var4 update var65 dict with var66 ",self . feed . update ( kwargs ),var65 . update ( var66 )
"self.feed is an dictionary with 13 initial entries, result of the function to_unicode called with an argument title for 'title',","var0 is dict with 13 initial entries, result of function var1 called with argument title for var3,","self . feed = { 'title' : to_unicode ( title ) , 'link' : iri_to_uri ( link ) , 'description' : to_unicode ( description ) , 'language' : to_unicode ( language ) , 'author_email' : to_unicode ( author_email ) , 'author_name' : to_unicode ( author_name ) , 'author_link' : iri_to_uri ( author_link ) , 'subtitle' : to_unicode ( subtitle ) , 'categories' : categories or ( ) , 'feed_url' : iri_to_uri ( feed_url ) , 'feed_copyright' : to_unicode ( feed_copyright ) , 'id' : feed_guid or link , 'ttl' : ttl , }","var0 = { var3 : var1 ( title ) , 'link' : iri_to_uri ( link ) , 'description' : var1 ( description ) , 'language' : var1 ( language ) , 'author_email' : var1 ( author_email ) , 'author_name' : var1 ( author_name ) , 'author_link' : iri_to_uri ( author_link ) , 'subtitle' : var1 ( subtitle ) , 'categories' : categories or ( ) , 'feed_url' : iri_to_uri ( feed_url ) , 'feed_copyright' : var1 ( feed_copyright ) , 'id' : feed_guid or link , 'ttl' : ttl }"
"call the method self.fetch_command with first element of options.args as argument, on the result call the method print_help,","call method self var1 with first element of var2 as argument, on result call method var3 ","self . fetch_command ( options . args [ 0 ] ) . print_help ( self . prog_name , options . args [ 0 ] )","self . var1 ( var2 [ 0 ] ) . var3 ( self . prog_name , var2 [ 0 ] )"
"call the method self.fetch_command with an argument command, call the method run_from_argv on the result with an argument self.argv.","call method self var1 with argument command, call method var2 on result with argument var4 ",self . fetch_command ( subcommand ) . run_from_argv ( self . argv ),self . var1 ( subcommand ) . var2 ( var4 )
"self.field.choice_cache is a list containing results of the method self.choice called with an argument obj,",self.field var1 is list containing results of method var2 called with argument var3 ,self . field . choice_cache = [ self . choice ( obj ) for obj in self . queryset . all ( ) ],self . field . var1 = [ self . choice ( var3 ) for var3 in self . queryset . all ( ) ]
substitute field for self.field.,substitute field for var0 ,self . field = field,var0 = field
"size, charset, content_type_extra.   substitute field_name for self.field_name.",size var0 var1 substitute var4 for self var4 ,self . field_name = field_name,self.var2ar4 var2 var4
substitute field_name for self.field_name.,substitute var0 for self var0 ,self . field_name = field_name,self . var0 = var0
"call the function copy.deepcopy with an argument self.base_fields, substitute the result for self.fields.",call function var0 with argument self var2 substitute result for var3 ,self . fields = copy . deepcopy ( self . base_fields ),var3 = var0 ( self . var2 )
substitute fields for self.fields.,substitute fields for var0 ,self . fields = fields,var0 = fields
"get 'fields' attribute from the options object, if it exists substitute it for self.fields, if not self.fields is None.","get var0 attribute from options object, if it exists substitute it for var1 if not var1 is var3 ","self . fields = getattr ( options , 'fields' , None )","var1 = getattr ( options , var0 , var3 )"
call the file.__enter__ method on self.,call var0 method on self.,self . file . __enter__ ( ),self . var0 ( )
"call the file.__exit__ method on self with exc, value and tb as the arguments.",call var0 method on self with var1 value and tb as arguments.,"self . file . __exit__ ( exc , value , tb )","self . var0 ( var1 , value , tb )"
call the method self.file.close.,call method var0 ,self . file . close ( ),var0 ( )
close the file object.,close file object.,self . file . close ( ),self . file . close ( )
position the file self.file pointer at the end.,position file self.file pointer at end.,"self . file . seek ( 0 , os . SEEK_END )","self . file . seek ( 0 , os . SEEK_END )"
set the file pointer at the beginning of the self.file file.,set file pointer at beginning of self.file file.,self . file . seek ( 0 ),self . file . seek ( 0 )
position the file pointer at the start of the self.file file.,position file pointer at start of self.file file.,self . file . seek ( 0 ),self . file . seek ( 0 )
set file pointer at the beginning of the self.file file.,set file pointer at beginning of self.file file.,self . file . seek ( 0 ),self . file . seek ( 0 )
position file self.file pointer at the pos position.,position file self.file pointer at pos position.,self . file . seek ( pos ),self . file . seek ( pos )
substitute file_size for self.file.size.,substitute var0 for var1 ,self . file . size = file_size,var1 = var0
call the method self.file.write with argument raw_data.,call method var0 with argument var1 ,self . file . write ( raw_data ),var0 ( var1 )
write raw_data to self.file file.,write var0 to var1 file.,self . file . write ( raw_data ),var1 . write ( var0 )
"call the function BytesIO, substitute the result for self.file.",call function var0 substitute result for var1 ,self . file = BytesIO ( ),var1 = var0 ( )
substitute file for self.file.,substitute file for var0 ,self . file = file,var0 = file
substitute file_name for self.file_name.,substitute var0 for self var0 ,self . file = file_name,self . file = var0
"open the file self.name in mode or self.mode mode, whichever exists, assign the file handler to self.file.","open file var0 in mode or var1 mode var2 exists, assign file handler to var3 ","self . file = open ( self . name , mode or self . mode )","var3 = open ( var0 , mode or var1 )"
"call the os.fdopen function with fd, mode and bufsize as the arguments, assign the file handle object to self.file.","call var0 function with var1 mode and var2 as arguments, assign file handle object to var3 ","self . file = os . fdopen ( fd , mode , bufsize )","var3 = var0 ( var1 , mode , var2 )"
"self.file is a instance of a class TemporaryUploadedFile initialized with arguments: self.file_name, self.content_type, integer 0,","var0 is instance of class var1 initialized with arguments: self var3 self var5 integer 0,","self . file = TemporaryUploadedFile ( self . file_name , self . content_type , 0 , self . charset , self . content_type_extra )","var0 = var1 ( self . var3 , self . var5 , 0 , self . charset , self . var5_extra )"
substitute file_name for self.file_name.,substitute var0 for self var0 ,self . file_name = file_name,self . var0 = var0
self.file_name is None.,self var1 is var2 ,self . file_name = None,self . var1 = var2
"get 'EMAIL_FILE_PATH' from the settings, if it exists, substitute it for self.file_path, if not substitute None for self.file_path.","get var0 from settings, if it exists, substitute it for self var3 if not substitute var5 for self var3 ","self . file_path = getattr ( settings , 'EMAIL_FILE_PATH' , None )","self . var3 = getattr ( settings , var0 , var5 )"
"pop the value under the 'file_path' key of kwargs dictionary, substitute it for self.file_path.","pop value under var0 key of var1 dict, substitute it for var2 ",self . file_path = kwargs . pop ( 'file_path' ),var2 = var1 . pop ( var0 )
"call the os.path.abspath with argument self.file_path, substitute the result for self.file_path.",call os.path.abspath with argument self var2 substitute result for self var2 ,self . file_path = os . path . abspath ( self . file_path ),self . var2 = os . path . abspath ( self . var2 )
"self.file_permissions_mode is a tuple containing: file_permissions_mode if file_permissions_mode is not None,",self var1 is tuple containing: var1 if var1 is not var6 ,self . file_permissions_mode = ( file_permissions_mode if file_permissions_mode is not None else settings . FILE_UPLOAD_PERMISSIONS ),self . var1 = var1 if var1 is not var6 else settings . FILE_UPLOAD_PERMISSIONS
substitute filepath for self.filepath.,substitute var0 for self var0 ,self . filepath = filepath,self . var0 = var0
"if files is true, substitute it for self.files, if not self.files is an empty dictionary.","if files is true, substitute it for var0 if not var0 is empty dict.",self . files = files or { },var0 = files or { }
"if data is true, substitute it for self.files, otherwise self.files is an empty dictionary.","if data is true, substitute it for var0 otherwise var0 is empty dict.",self . files = files or { },var0 = files or { }
self.FILES is an instance of MultiValueDict class.,self var0 is instance of var1 class.,self . FILES = MultiValueDict ( ),self . var0 = var1 ( )
"substitute filter_expr and nodelist for self.filter_expr and self.nodelist, respectively.",substitute var0 and var2 for self var0 and self var2 respectively.,"self . filter_expr , self . nodelist = filter_expr , nodelist","self . var0 , self . var2 = var0 , var2"
substitute filter_expression for self.filter_expression.,substitute var0 for self var0 ,self . filter_expression = filter_expression,self . var0 = var0
update self.filters dictionary with lib.filters.,update var0 dict with var1 ,self . filters . update ( lib . filters ),var0 . update ( var1 )
substitute filter_func for value under the name key of self.filters dictionary.,substitute var0 for value under name key of var1 dict.,self . filters [ name ] = filter_func,var1 [ name ] = var0
self.filters is an empty dictionary.,var0 is empty dict.,self . filters = { },var0 = { }
"where '%s' is replaced with elemnts of token from upto index till the end, and token.   substitute filters for self.filters.","var0 var1 is replaced with var2 of token from var3 index till end, and token var4 substitute filters for var5 ",self . filters = filters,var5 = filters
call the method self.find_template_cache.clear.,call method self var1 clear.,self . find_template_cache . clear ( ),self . var1 . clear ( )
substitute result for self.find_template_cache dictionary value under the key key.,substitute result for self var1 dict value under key key.,self . find_template_cache [ key ] = result,self . var1 [ key ] = result
self.find_template_cache is an empty dictionary.,self var1 is empty dict.,self . find_template_cache = { },self . var1 = { }
self.first is boolean False.,var0 is boolean var1 ,self . first = False,var0 = var1
substitute left for self.first.,substitute left for var0 ,self . first = left,var0 = left
"call the method parser.expression with an argument bp, substitute the result for self.first.",call method var0 with argument var1 substitute result for var2 ,self . first = parser . expression ( bp ),var2 = var0 ( var1 )
self.first is boolean True.,var0 is boolean var1 ,self . first = True,var0 = var1
increment self.fixture_count by one.,increment self var1 by one.,self . fixture_count += 1,self . var1 += 1
self.fixture_count is integer 0.,self var1 is integer 0.,self . fixture_count = 0,self . var1 = 0
increment self.fixture_object_count by objects_in_fixture.,increment self var1 by var2 ,self . fixture_object_count += objects_in_fixture,self . var1 += var2
self.fixture_object_count is integer 0.,self var1 is integer 0.,self . fixture_object_count = 0,self . var1 = 0
substitute flags for self.flags.,substitute flags for var0 ,self . flags = flags,var0 = flags
substitute flo for self.flo.,substitute var0 for self var0 ,self . flo = flo,self . var0 = var0
substitute form for self.form.,substitute form for var0 ,self . form = form,var0 = form
"substitute format for self.format if format is true, if not self.format is None.","substitute format for var0 if format is true, if not var0 is var1 ",self . format = format if format else None,var0 = format if format else var1
substitute format_string for self.format_string.,substitute var0 for self var0 ,self . format_string = format_string,self . var0 = var0
"if from_email exists substitute from_email for self.from_email, if not substitute settings.DEFAULT_FROM_EMAIL for self.from_email.",if var0 exists substitute var0 for self var0 if not substitute settings var8 for self var0 ,self . from_email = from_email or settings . DEFAULT_FROM_EMAIL,self . var0 = var0 or settings . var8
call the method self.full_clean.,call method self var1 ,self . full_clean ( ),self . var1 ( )
substitute func for self.func.,substitute var0 for self var0 ,self . func = func,self . var0 = var0
self.GET is an instance of QueryDict class created with an argument mutable set to boolean True.,self var0 is instance of var1 class created with argument mutable set to boolean var3 ,self . GET = QueryDict ( mutable = True ),self . var0 = var1 ( mutable = var3 )
"slice the rawdata to obtain substring from i-th to j-th element, use it as the argument for the method call to the self.handle_data.","slice var0 to obtain substring from i-th to j-th element, use it as argument for method call to self var2 ",self . handle_data ( rawdata [ i : j ] ),self . var2 ( var0 [ i : j ] )
"convert tag to lowercase, use it as the argument for the call to the method self.handle_endtag.","convert tag to lowercase, use it as argument for call to method self var1 ",self . handle_endtag ( tag . lower ( ) ),self . var1 ( tag . lower ( ) )
call the method self.handle_field with arguments obj and filed.,call method self var1 with arguments var2 and filed.,"self . handle_field ( obj , field )","self . var1 ( var2 , field )"
"call the method self.handle_file_complete with arguments old_field_name, counters.",call method self var1 with arguments var2 counters.,"self . handle_file_complete ( old_field_name , counters )","self . var1 ( var2 , counters )"
call the method self.handle_fk_field with arguments obj and field.,call method self var1 with arguments var2 and field.,"self . handle_fk_field ( obj , field )","self . var1 ( var2 , field )"
call the method self.handle_m2m_field with arguments obj and filed.,call method self var1 with arguments var2 and filed.,"self . handle_m2m_field ( obj , field )","self . var1 ( var2 , field )"
call the method self.handle_startendtag with tag and attrs as the arguments.,call method self var1 with tag and var2 as arguments.,"self . handle_startendtag ( tag , attrs )","self . var1 ( tag , var2 )"
"call the method self.handle_starttag, with tag and attrs as the arguments.",call method self var1 with tag and var2 as arguments.,"self . handle_starttag ( tag , attrs )","self . var1 ( tag , var2 )"
"get the hash value of the tup, substitute it for self.hashvalue.","get hash value of tup, substitute it for var0 ",self . hashvalue = hash ( tup ),var0 = hash ( tup )
"if field.help_text is true, substitute field.help_text for self.help_text, if not self.help_text is an empty string.","if field var2 is true, substitute field var2 for self var2 if not self var2 is empty string.",self . help_text = field . help_text or '',self . var2 = field . var2 or ''
substitute help_text for self.help_text.,substitute var0 for self var0 ,self . help_text = help_text,self . var0 = var0
"get 'help_texts' attribute from the options object, if it exists substitute it for self.help_texts, if not self.help_texts is None.","get var0 attribute from options object, if it exists substitute it for var1 if not var1 is var3 ","self . help_texts = getattr ( options , 'help_texts' , None )","var1 = getattr ( options , var0 , var3 )"
"get the value under the 'hide_empty' key of the options dictionary, if the key exists substitute it for self.hide_empty,","get value under var0 key of options dict, if key exists substitute it for var1 ","self . hide_empty = options . get ( 'hide_empty' , False )","var1 = options . get ( var0 , False )"
substitute hint for self.hint.,substitute hint for var0 ,self . hint = hint,var0 = hint
"if host exists substitute it for self.host, if not substitute settings.EMAIL_HOST for self.host.",if host exists substitute it for var0 if not substitute settings var2 for var0 ,self . host = host or settings . EMAIL_HOST,var0 = host or settings . var2
"call the method form.add_initial_prefix with an argument self.auto_id, substitute the result for self.html_initial_id.",call method form var1 with argument self var3 substitute result for self var5 ,self . html_initial_id = form . add_initial_prefix ( self . auto_id ),self . var5 = form . var1 ( self . var3 )
"call the method form.add_initial_prefix with an argument name, substitute the result for self.html_initial_name.","call method form var1 with argument name, substitute result for self var3 ",self . html_initial_name = form . add_initial_prefix ( name ),self . var3 = form . var1 ( name )
"call the method form.add_prefix with an argument self, substitute the result for self.html_name.","call method form var1 with argument self, substitute result for self var3 ",self . html_name = form . add_prefix ( name ),self . var3 = form . var1 ( name )
substitute id for self.id.,substitute id for var0 ,self . id = id,var0 = id
substitute Tok.num for self.id.,substitute var0 num for var2 ,self . id = Tok . num,var2 = var0 . num
"get the value under the 'ignore' key of the options dictionary, substitute it for self.ignore.","get value under var0 key of options dict, substitute it for var1 ",self . ignore = options . get ( 'ignore' ),var1 = options . get ( var0 )
"DEFAULT_DB_ALIAS for self.db.   remove the 'ignorenonexistent' key from the options dictionary, substitute the return value for self.db,","DEFAULT_DB_ALIAS for var0 remove var3 key from options dict, substitute return value for var0 ","self . ignore = options . pop ( 'ignorenonexistent' , False )","self . ignore = options . pop ( var3 , False )"
"put elements of ignore_patterns into a set, substitute the length of it for self.ignore_patterns.","put elements of var0 into set, substitute length of it for self var0 ",self . ignore_patterns = list ( set ( ignore_patterns ) ),self . var0 = list ( set ( var0 ) )
call the method self.importer with an argument used.,call method var0 with argument used.,self . importer ( used ),var0 ( used )
substitute include_html for self.include_html.,substitute var0 for self var0 ,self . include_html = include_html,self . var0 = var0
call the self.indent method with integer 0 as an argument.,call var0 method with integer 0 as argument.,self . indent ( 0 ),var0 ( 0 )
replace '%s' with type of the obj object.   call the method self.indent with argument integer 1.,replace var0 with type of var1 object var2 call method var3 with argument integer 1.,self . indent ( 1 ),var3 ( 1 )
call the method self.indent with argument integer 1.,call method var0 with argument integer 1.,self . indent ( 1 ),var0 ( 1 )
call the method self.indent with argument integer 2.,call method var0 with argument integer 2.,self . indent ( 2 ),var0 ( 2 )
substitute index for self.index.,substitute index for var0 ,self . index = index,var0 = index
substitute initial_id for self.auto_id.,substitute var0 for self var2 ,self . initial = initial,self . initial = initial
"if initial is true, substitute it for self.initial, if not self.files is an empty dictionary.","if initial is true, substitute it for var0 if not var1 is empty dict.",self . initial = initial or { },var0 = initial or { }
"remove entry under 'initial' key of the kwargs dictionary, substitute it for self.initial_extra if it exists,","remove entry under var0 key of var1 dict, substitute it for self var3 if it exists,","self . initial_extra = kwargs . pop ( 'initial' , None )","self . var3 = var1 . pop ( var0 , None )"
call the method self.inner_run with 2 arguments: None and unpacked dictionary options.,call method self var1 with 2 arguments: var2 and unpacked dict options.,"self . inner_run ( None , ** options )","self . var1 ( var2 , ** options )"
substitute input_formats for self.input_formats.,substitute var0 for self var0 ,self . input_formats = input_formats,self . var0 = var0
"remover the entry under the 'type' key of the attrs dictionary, substitute it for self.input_type, if the key doesnt exists,","remover entry under var0 key of var1 dict, substitute it for self var3 if key doesnt exists,","self . input_type = attrs . pop ( 'type' , self . input_type )","self . var3 = var1 . pop ( var0 , self . var3 )"
call the method self.instance.full_clean with 2 arguments: exclude set to exclude and validate_unique set to boolean False.,call method self.instance var1 with 2 arguments: exclude set to exclude and var2 set to boolean var4 ,"self . instance . full_clean ( exclude = exclude , validate_unique = False )","self . instance . var1 ( exclude = exclude , var2 = var4 )"
call the method self.instance.validate_unique with an argument exclude set to exclude.,call method self.instance var1 with argument exclude set to exclude.,self . instance . validate_unique ( exclude = exclude ),self . instance . var1 ( exclude = exclude )
"call the function construct_instance with 4 arguments: self, self.instance, opts.fields and construct_instance_exclude,",call function var0 with 4 arguments: self var1 opts.fields and var2 ,"self . instance = construct_instance ( self , self . instance , opts . fields , construct_instance_exclude )","var1 = var0 ( self , var1 , opts . fields , var0_exclude )"
substitute instance for self.instance.,substitute instance for var0 ,self . instance = instance,var0 = instance
"call the method opts.model, substitute the result for self.instance.",call method var0 substitute result for var1 ,self . instance = opts . model ( ),var1 = var0 ( )
"call the method self.fk.rel.to, substitute the result for self.instance.",call method var0 substitute result for var1 ,self . instance = self . fk . rel . to ( ),var1 = var0 ( )
"get the value under the 'interactive' key of the options dictionary, substitute it for self.interactive.","get value under var0 key of options dict, substitute it for var1 ",self . interactive = options . get ( 'interactive' ),var1 = options . get ( var0 )
"get the value from the options dictionary under the key 'interactive', substitute it for self.interactive.","get value from options dict under key var0, substitute it for var1 ",self . interactive = options . get ( 'interactive' ),var1 = options . get ( var0 )
set field interesting for this class instance to interesting_cdata from module _html_parser.,set field interesting for var0 class instance to var1 from module var2 ,self . interesting = _html_parser . interesting_cdata,self . interesting = var2 . var1
substitute _html_parser.interesting_normal for self.interesting.,substitute _html_parser var1 for var2 ,self . interesting = _html_parser . interesting_normal,var2 = _html_parser . var1
"replace '%s' in the string '</\s*%s\s*>' with the result of the function call tag.lower(),","replace var0 in string var1 with result of function call tag.lower(),","self . interesting = re . compile ( r'</\s*%s\s*>' % tag . lower ( ) , re . I )","self . interesting = re . compile ( rvar1 % var3 ( ) , re . I )"
"call the method self.invalid_block_tag with 3 arguments: token, command and parse_until.","call method self var1 with 3 arguments: token, command and var2 ","self . invalid_block_tag ( token , command , parse_until )","self . var1 ( token , command , var2 )"
substitute inverse_match for self.inverse_match.,substitute var0 for self var0 ,self . inverse_match = inverse_match,self . var0 = var0
substitute '%s' with return value of the function get_text_list called with 2 arguments:self.extensions converted into a list and string 'and'.   self.invoked_for_django is boolean False.,substitute var0 with return value of function var1 called with 2 arguments:self.extensions converted into list and string var4 var5 self var7 is boolean var8 ,self . invoked_for_django = False,self . var7 = var8
self.invoked_for_django is boolean True.,self var1 is boolean var2 ,self . invoked_for_django = True,self . var1 = var2
"initial set to None, error_class set to ErrorList, label_suffix set to None, empty_permitted set to boolean False.   if data is not None or files is not None, self.is_bound is boolean True, otherwise it is boolean False.",initial set to var0 var4 set to var6 var8 set to var0 var10 set to boolean var12 if data is not var0 or files is not var0 self var16 is boolean var17 otherwise it is boolean var12 ,self . is_bound = data is not None or files is not None,self . var16 = data is not var0 or files is not var0
"if data is not None or files is not None, self.is_bound is boolean True, otherwise it is boolean False.",if data is not var0 or files is not var0 self var3 is boolean var4 otherwise it is boolean var5 ,self . is_bound = data is not None or files is not None,self . var3 = data is not var0 or files is not var0
substitute is_reversed for self.is_reversed.,substitute var0 for self var0 ,self . is_reversed = is_reversed,self . var0 = var0
"if not self.extra_context is an empty dictionary.   remove kwargs dictionary entry under the 'isolated_context' key, if it exists substitute it for self.isolated_context,","if not self var1 is empty dict var2 remove var3 dict entry under var4 key, if it exists substitute it for var5 ","self . isolated_context = kwargs . pop ( 'isolated_context' , False )","var5 = var3 . pop ( var4 , False )"
append item to self.items.,append item to var0 ,self . items . append ( item ),var0 . append ( item )
self.items is an empty list.,var0 is empty list.,self . items = [ ],var0 = [ ]
remove the entry under the 'fields' key of the self.json_kwargs dictionary.,remove entry under var0 key of self var2 dict.,"self . json_kwargs . pop ( 'fields' , None )","self . var2 . pop ( var0 , None )"
remove the entry under the 'stream' key of the self.json_kwargs dictionary.,remove entry under var0 key of self var2 dict.,"self . json_kwargs . pop ( 'stream' , None )","self . var2 . pop ( var0 , None )"
"substitute a tuple with 2 elements: characters ',' and ': ' for value under the 'separators' key of the self.json_kwargs dictionary.",substitute tuple with 2 elements: characters var0 and var1 for value under var2 key of self var4 dict.,"self . json_kwargs [ 'separators' ] = ( ', ' , ': ' )","self . var4 [ 'separators' ] = ', ' , var1"
"call the method self.options.copy, substitute the result for self.json_kwargs.",call method var0 substitute result for self var2 ,self . json_kwargs = self . options . copy ( ),self . var2 = var0 ( )
"get the value under the 'keep_pot' key of the options dictionary, substitute it for self.keep_pot.","get value under var0 key of options dict, substitute it for var1 ",self . keep_pot = options . get ( 'keep_pot' ),var1 = options . get ( var0 )
"if key exists, substitute it for self.key, if not substitute settings.SECRET_KEY for key.","if key exists, substitute it for var0 if not substitute settings var1 for key.",self . key = key or settings . SECRET_KEY,var0 = key or settings . var1
"call the method params.get with 2 arguments, string 'KEY_FUNCTION' and None, use the result as the argument for the call to the function get_key_func, substitute the result for the self.key_func.","call method var0 with 2 arguments, string var1 and var2 use result as argument for call to function var3 substitute result for self var5 ","self . key_func = get_key_func ( params . get ( 'KEY_FUNCTION' , None ) )","self . var5 = var3 ( params . get ( var1 , var2 ) )"
"call the params.get method with string 'KEY_PREFIX' and an empty string as arguments, substitute the result for self._key_prefix.","call params.get method with string var0 and empty string as arguments, substitute result for var1 ","self . key_prefix = params . get ( 'KEY_PREFIX' , '' )","self . key_prefix = params . get ( var0 , '' )"
append key to self.keyOrder.,append key to self var1 ,self . keyOrder . append ( key ),self . var1 . append ( key )
append key to self.keyOrder dictionary.,append key to self var1 dict.,self . keyOrder . append ( key ),self . var1 . append ( key )
remove k element from self.keyOrder dictionary.,remove k element from self var1 dict.,self . keyOrder . remove ( k ),self . var1 . remove ( k )
remove key element from self.keyOrder dictionary.,remove key element from self var1 dict.,self . keyOrder . remove ( key ),self . var1 . remove ( key )
remove first element of result from self.keyOrder dictionary.,remove first element of result from self var1 dict.,self . keyOrder . remove ( result [ 0 ] ),self . var1 . remove ( result [ 0 ] )
self.keyOrder is an empty list.,self var1 is empty list.,self . keyOrder = [ ],self . var1 = [ ]
"if data is true, substitute list created from elements of data, substitute it for self.keyOrder, otherwise self.keyOrder is an empty list.","if data is true, substitute list created from elements of data, substitute it for self var2 otherwise self var2 is empty list.",self . keyOrder = list ( data ) if data else [ ],self . var2 = list ( data ) if data else [ ]
substitute kwargs for self.kwargs.,substitute var0 for self var0 ,self . kwargs = kwargs,self . var0 = var0
"call the method pretty_name with an argument name, substitute the result for self.label.","call method var0 with argument name, substitute result for var1 ",self . label = pretty_name ( name ),var1 = var0 ( name )
substitute self.field.label for self.label.,substitute var0 for var1 ,self . label = self . field . label,var1 = var0
substitute label_suffix for self.label_suffix.,substitute var0 for self var0 ,self . label_suffix = label_suffix,self . var0 = var0
"if label_suffix is not None substitute label_suffix for self.label_suffix,",if var0 is not var5 substitute var0 for self var0 ,self . label_suffix = label_suffix if label_suffix is not None else _ ( ':' ),self . var0 = var0 if var0 is not var5 else _ ( ':' )
"if not self.localized_fields is None.   get 'labels' attribute from the options object, if it exists substitute it for self.labels, if not self.labels is None.","if not self var1 is var2 get var5 attribute from options object, if it exists substitute it for var6 if not var6 is var2 ","self . labels = getattr ( options , 'labels' , None )","var6 = getattr ( options , var5 , var2 )"
substitute language for self.language.,substitute language for var0 ,self . language = language,var0 = language
"find the first subgroup of the matched string from the match object, convert it to lowercase, substitute it for tag and self.lasttag.","find first subgroup of matched string from match object, convert it to lowercase, substitute it for tag and var0 ",self . lasttag = tag = match . group ( 1 ) . lower ( ),var0 = tag = match . group ( 1 ) . lower ( )
substitute length and mime_type for self.length and self.mime_type.,substitute length and var0 for var2 and self var0 ,"self . length , self . mime_type = length , mime_type","var2 , self . var0 = length , var0"
substitute length for self._length.,substitute length for var0 ,self . length = length,self . length = length
substitute level for self.level.,substitute level for var0 ,self . level = level,var0 = level
substitute value_not_found_exception for self.LibraryValueNotFoundException.,substitute var0 for self var2 ,self . LibraryValueNotFoundException = value_not_found_exception,self . var2 = var0
substitute limit_choices_to for self.limit_choices_to.,substitute var0 for self var0 ,self . limit_choices_to = limit_choices_to,self . var0 = var0
substitute the limit_value for self.limit_value.,substitute var0 for self var0 ,self . limit_value = limit_value,self . var0 = var0
"call the method token_string.count with an argument '\n', append the result to self.lineno.","call method var0 count with argument var1, append result to var2 ",self . lineno += token_string . count ( '\n' ),var2 += var0 . count ( '\n' )
self.lineno is integer 1.,var0 is integer 1.,self . lineno = 1,var0 = 1
self.lineno is None.,var0 is var1 ,self . lineno = None,var0 = var1
"convert var into an floating point number, substitute it for self.literal.","convert var into floating point number, substitute it for var0 ",self . literal = float ( var ),var0 = float ( var )
"convert self.literal into an integer, substitute it for self.literal.","convert var0 into integer, substitute it for var0 ",self . literal = int ( self . literal ),var0 = int ( var0 )
"call the function unescape_string_literal with an argument var, use it as an argument for the call to the function mark_safe,","call function var0 with argument var, use it as argument for call to function var1 ",self . literal = mark_safe ( unescape_string_literal ( var ) ),self . literal = var1 ( var0 ( var ) )
"self.literal is None,",var0 is var1 ,self . literal = None,var0 = var1
"get the value from the options dictionary under the key 'load_initial_data', substitute it for self.load_initial_data.","get value from options dict under key var0, substitute it for var1 ",self . load_initial_data = options . get ( 'load_initial_data' ),var1 = options . get ( var0 )
call the method self.load_label with an argument fixture_label.,call method self var1 with argument var2 ,self . load_label ( fixture_label ),self . var1 ( var2 )
call the self.load_middleware method.,call self var1 method.,self . load_middleware ( ),self . var1 ( )
call the method self.loaddata with an argument fixture_labels.,call method var0 with argument var1 ,self . loaddata ( fixture_labels ),var0 ( var1 )
increment self.loaded_object_count by loaded_objects_in_fixture.,increment self var1 by var2 ,self . loaded_object_count += loaded_objects_in_fixture,self . var1 += var2
self.loaded_object_count is integer 0.,self var1 is integer 0.,self . loaded_object_count = 0,self . var1 = 0
"substitute loader, name and dirs for self.loader, self.loadname and self.dirs, respectively.","substitute loader, name and var0 for var1 var2 and self var0 respectively.","self . loader , self . loadname , self . dirs = loader , name , dirs","var1 , var2 , self . var0 = loader , name , var0"
substitute locale_dir for self.locale_dir.,substitute var0 for self var0 ,self . locale_dir = locale_dir,self . var0 = var0
"call the function os.path.abspath with an argument 'locale', append the result to self.locale_paths.","call function os.path.abspath with argument var0, append result to self var2 ",self . locale_paths . append ( os . path . abspath ( 'locale' ) ),self . var2 . append ( os . path . abspath ( var0 ) )
convert settings.LOCALE_PATHS into a list and extend list self.locale_paths with it.,convert settings var0 into list and extend list self var2 with it.,self . locale_paths . extend ( list ( settings . LOCALE_PATHS ) ),self . var2 . extend ( list ( settings . var0 ) )
"call the method os.path.abspath with an argument dirpath, join the result and dirname into a file path, inset it at the beggining of self.locale_paths.","call method os.path.abspath with argument var0 join result and var1 into file path, inset it at var2 of self var4 ","self . locale_paths . insert ( 0 , os . path . join ( os . path . abspath ( dirpath ) , dirname ) )","self . var4 . insert ( 0 , os . path . join ( os . path . abspath ( var0 ) , var1 ) )"
self.locale_paths is an empty list.,self var1 is empty list.,self . locale_paths = [ ],self . var1 = [ ]
"join 'conf' and 'locale' into a file path, use it as an argument for the call the method os.path.abspath,","join var0 and var1 into file path, use it as argument for call method var2 ","self . locale_paths = [ os . path . abspath ( os . path . join ( 'conf' , 'locale' ) ) ]","self . locale_paths = [ os . path . abspath ( os . path . join ( var0 , 'locale' ) ) ]"
substitute localize for self.localize.,substitute localize for var0 ,self . localize = localize,var0 = localize
"get 'localized_fields' attribute from the options object, if it exists substitute it for self.localized_fields,","get var0 attribute from options object, if it exists substitute it for var1 ","self . localized_fields = getattr ( options , 'localized_fields' , None )","var1 = getattr ( options , var0 , None )"
substitute the return value of the function abspathu with self.base_location as argument for self.location.,substitute return value of function var0 with self var2 as argument for self.location.,self . location = abspathu ( self . base_location ),self . location = var0 ( self . var2 )
self.lookups is None.,var0 is var1 ,self . lookups = None,var0 = var1
"where '%s' is replaced with var.   call the method var.split with an argument VARIABLE_ATTRIBUTE_SEPARATOR, convert the result to a tuple and substitute it for self.lookups.",var0 var1 is replaced with var var2 call method var3 with argument var4 convert result to tuple and substitute it for var6 ,self . lookups = tuple ( var . split ( VARIABLE_ATTRIBUTE_SEPARATOR ) ),var6 = tuple ( var . split ( var4 ) )
"substitute loopvars and sequence for self.loopvars and self.sequence, respectively.",substitute var0 and sequence for self var0 and var2 respectively.,"self . loopvars , self . sequence = loopvars , sequence","self . var0 , var2 = var0 , sequence"
substitute m2m_data for self.m2m_data.,substitute var0 for self var0 ,self . m2m_data = m2m_data,self . var0 = var0
self.m2m_data is None.,var0 is var1 ,self . m2m_data = None,var0 = var1
call the method self.make_writeable with an argument new_path.,call method self var1 with argument var2 ,self . make_writeable ( new_path ),self . var1 ( var2 )
self.managed is boolean True.,var0 is boolean var1 ,self . managed = True,var0 = var1
"compile self.match regular expression, substitute it for self.match_re.","compile var0 regular expression, substitute it for self var2 ",self . match_re = re . compile ( self . match ),self . var2 = re . compile ( var0 )
"decimal_places set to None, unpacked list args and unpacked dictionary kwargs.   substitute max_digits and decimal_places for self.max_digits and self.decimal_places.",var0 set to var4 unpacked list var5 and unpacked dict var6 substitute var8 and var0 for self var8 and self var0 ,"self . max_digits , self . decimal_places = max_digits , decimal_places","self . var8 , self . var0 = var8 , var0"
substitute max_expr for self.max_expr.,substitute var0 for self var0 ,self . max_expr = max_expr,self . var0 = var0
and unpacked dictionary kwargs.   substitute max_length and min_length for self.max_length for self.min_length.,and unpacked dict var0 substitute var2 and var4 for self var2 for self var4 ,"self . max_length , self . min_length = max_length , min_length","self . var2 , self . var4 = var2 , var4"
"remove the value under 'max_length' key from the kwargs dictionary and if the key exists substitute it for self.max_length,",remove value under var0 key from var1 dict and if key exists substitute it for var2 ,"self . max_length = kwargs . pop ( 'max_length' , None )","var2 = var1 . pop ( var0 , None )"
substitute max_value and min_value for self.max_value and self.min_value.,substitute var0 and var2 for self var0 and self var2 ,"self . max_value , self . min_value = max_value , min_value","self . var0 , self . var2 = var0 , var2"
substitute max_width for self.max_width.,substitute var0 for self var0 ,self . max_width = max_width,self . var0 = var0
call the method self.merge with an argument translation.,call method var0 with argument translation.,self . merge ( translation ),var0 ( translation )
"if not, self.dry_run is boolean False.   get the value under the 'merge' key of the options dictionary, if the key exists substitute it for self.merge,","if not, self var1 is boolean var2 get value under var4 key of options dict, if key exists substitute it for var5 ","self . merge = options . get ( 'merge' , False )","var5 = options . get ( var4 , var2 )"
substitute message for self.message.,substitute message for var0 ,self . message = message,var0 = message
self.message_context is None.,self var1 is var2 ,self . message_context = None,self . var1 = var2
assign path_info to the value under the 'PATH_INFO' key of the self.META dictionary.,assign var0 to value under var2 key of self var3 dict.,self . META [ 'PATH_INFO' ] = path_info,self . var3 [ var2 ] = var0
assign script_name to the value under the 'SCRIP_NAME' key of the self.META dictionary.,assign var0 to value under var2 key of self var3 dict.,self . META [ 'SCRIPT_NAME' ] = script_name,self . var3 [ 'SCRIPT_NAME' ] = var0
self.META is an empty dictionary.,self var0 is empty dict.,self . META = { },self . var0 = { }
substitute environ for self.META.,substitute environ for self var0 ,self . META = environ,self . var0 = environ
"convert value under the 'REQUEST_METHOD' key of the environ dictionary to uppercase, substitute it for self.method.","convert value under var0 key of environ dict to uppercase, substitute it for var1 ",self . method = environ [ 'REQUEST_METHOD' ] . upper ( ),var1 = environ [ var0 ] . upper ( )
self.method is None.,var0 is var1 ,self . method = None,var0 = var1
substitute new for self.mod.,substitute new for var0 ,self . mod = new,var0 = new
substitute new_mod for self.mod.,substitute var0 for var1 ,self . mod = new_mod,var1 = var0
substitute old for self.mod.,substitute old for var0 ,self . mod = old,var0 = old
substitute old_mod for self.mod.,substitute var0 for var1 ,self . mod = old_mod,var1 = var0
substitute file.mode for self.mode.,substitute var0 for var1 ,self . mode = file . mode,var1 = var0
"get 'model' attribute from the options object, if it exists substitute it for self.model, if not self.model is None.","get var0 attribute from options object, if it exists substitute it for var1 if not var1 is var3 ","self . model = getattr ( options , 'model' , None )","var1 = getattr ( options , var0 , var3 )"
self.model_name is a string 'cacheentry'.,self var1 is string var2.,self . model_name = 'cacheentry',self . var1 = var2
add obj.object.__class__ to self.models set.,add var0 to var1 set.,self . models . add ( obj . object . __class__ ),var1 . add ( var0 )
self.models is an empty set.,var0 is empty set.,self . models = set ( ),var0 = set ( )
self.month_none_value is a tuple containing 2 elements: integer 0 and second element of empty_label.,self var1 is tuple containing 2 elements: integer 0 and second element of var2 ,"self . month_none_value = ( 0 , empty_label [ 1 ] )","self . var1 = 0 , var2 [ 1 ]"
substitute self.none_value for self.month_none_value.,substitute self var1 for self var3 ,self . month_none_value = self . none_value,self . month_var1 = self . var1
substitute months for self.months.,substitute months for var0 ,self . months = months,var0 = months
substitute msg for self.msg.,substitute msg for var0 ,self . msg = msg,var0 = msg
append list containing string '--no-location' to self.msgattrib_options.,append list containing string var0 to self var2 ,self . msgattrib_options = self . msgattrib_options [ : ] + [ '--no-location' ],self . var2 = self . var2 [ : ] + [ var0 ]
append list containing string '--no-wrap' to self.msgattrib_options.,append list containing string var0 to self var2 ,self . msgattrib_options = self . msgattrib_options [ : ] + [ '--no-wrap' ],self . var2 = self . var2 [ : ] + [ var0 ]
append list containing string '--no-location' to self.msgmerge_options.,append list containing string var0 to self var2 ,self . msgmerge_options = self . msgmerge_options [ : ] + [ '--no-location' ],self . var2 = self . var2 [ : ] + [ var0 ]
append list containing string '--no-wrap' to self.msgmerge_options,append list containing string var0 to self.var2,self . msgmerge_options = self . msgmerge_options [ : ] + [ '--no-wrap' ],self . var2 = self . var2 [ : ] + [ var0 ]
append list containing string '--no-location' to self.msguniq_options.,append list containing string var0 to self var2 ,self . msguniq_options = self . msguniq_options [ : ] + [ '--no-location' ],self . var2 = self . var2 [ : ] + [ var0 ]
append list containing string '--no-wrap' to self.msguniq_options.,append list containing string var0 to self var2 ,self . msguniq_options = self . msguniq_options [ : ] + [ '--no-wrap' ],self . var2 = self . var2 [ : ] + [ var0 ]
"call the method threading.RLock, substitute the result for self.mutex.",call method threading var0 substitute result for var1 ,self . mutex = threading . RLock ( ),var1 = threading . var0 ( )
"substitute name, nodelist and parent for self.name, self.nodelist and self.parent.",substitute name var0 and parent for var1 self var0 and var3 ,"self . name , self . nodelist , self . parent = name , nodelist , parent","var1 , self . var0 , var3 = name , var0 , parent"
substitute name and value for self.name and self.value.,substitute name and value for var0 and var1 ,"self . name , self . value = name , value","var0 , var1 = name , value"
substitute name for self.name.,substitute name for var0 ,self . name = name,var0 = name
"if name is true, substitute it for self.name, otherwise substitute func.__name__ for self.name.","if name is true, substitute it for var0 otherwise substitute var2 for var0 ",self . name = name or func . __name__,var0 = name or var2
"join self.namespaces into a string separated with character ':', substitute it for self.namespace.","join var0 into string separated with character var2, substitute it for var1 ",self . namespace = ':' . join ( self . namespaces ),var1 = var2 . join ( var0 )
substitute namespace for self.namespace.,substitute var0 for self var0 ,self . namespace = namespace,self . var0 = var0
self.namespaces is an empty list.,var0 is empty list.,self . namespaces = [ ],var0 = [ ]
"append x to self.namespaces list for every x in namespaces, only if x is true.",append x to var0 list for every x in var1 only if x is true.,self . namespaces = [ x for x in namespaces if x ],var0 = [ x for x in var1 if x ]
substitute negate for self.negate.,substitute negate for var0 ,self . negate = negate,var0 = negate
substitute negated for self.negated.,substitute negated for var0 ,self . negated = negated,var0 = negated
invert self.negated.,invert var0 ,self . negated = not self . negated,var0 = not var0
substitute new_method_name for new_method_name.,substitute var0 for var0 ,self . new_method_name = new_method_name,self . var0 = var0
"call the method self.save_new with 2 arguments: form and commit as commit, append the result to self.new_objects.","call method self var1 with 2 arguments: form and commit as commit, append result to self var3 ","self . new_objects . append ( self . save_new ( form , commit = commit ) )","self . var3 . append ( self . var1 ( form , commit = commit ) )"
self.new_objects is an empty list.,self var1 is empty list.,self . new_objects = [ ],self . var1 = [ ]
substitute next for self.next.,substitute next for var0 ,self . next = next,var0 = next
"get the value under the 'no_obsolete' key of the options dictionary, substitute it for self.no_obsolete.","get value under var0 key of options dict, substitute it for var1 ",self . no_obsolete = options . get ( 'no_obsolete' ),var1 = options . get ( var0 )
"call the function compile_string with 2 arguments: template_string and origin, substitute the result for self.nodelist.","call function var0 with 2 arguments: var1 and origin, substitute result for var3 ","self . nodelist = compile_string ( template_string , origin )","var3 = var0 ( var1 , origin )"
substitute nodelist for self.nodelist.,substitute var0 for self var0 ,self . nodelist = nodelist,self . var0 = var0
substitute t.nodelist for self.nodelist.,substitute var0 for var1 ,self . nodelist = t . nodelist,var1 = var0
self.nodelist_empty is an instance of NodeList class.,self var1 is instance of var2 class.,self . nodelist_empty = NodeList ( ),self . var1 = var2 ( )
substitute nodelist_empty for self.nodelist_empty.,substitute var0 for self var0 ,self . nodelist_empty = nodelist_empty,self . var0 = var0
substitute nodelist_loop for self.nodelist_loop.,substitute var0 for self var0 ,self . nodelist_loop = nodelist_loop,self . var0 = var0
"substitute nodelist_true and nodelist_false for self.nodelist_true and self.nodelist_false, respectively.",substitute var0 and var2 for self var0 and self var2 respectively.,"self . nodelist_true , self . nodelist_false = nodelist_true , nodelist_false","self . var0 , self . var2 = var0 , var2"
self.none_value is a tuple containing 2 elements: integer 0 and empty_label.,self var1 is tuple containing 2 elements: integer 0 and var2 ,"self . none_value = ( 0 , empty_label )","self . var1 = 0 , var2"
substitute notation_name for self.notation_name.,substitute var0 for self var0 ,self . notation_name = notation_name,self . var0 = var0
substitute number for self.number.,substitute number for var0 ,self . number = number,var0 = number
substitute obj for self.obj.,substitute var0 for self var0 ,self . obj = obj,self . var0 = var0
assign obj to the obj field of self instance of this class.,assign var0 to var0 field of self instance of var2 class.,self . obj = obj,self . var0 = var0
substitute obj for self.object.,substitute var0 for var1 ,self . object = obj,self . var0ect = var0
convert self.object_list to a list.,convert self var1 to list.,self . object_list = list ( self . object_list ),self . var1 = list ( self . var1 )
substitute object_list for self.object_list.,substitute var0 for self var0 ,self . object_list = object_list,self . var0 = var0
self.object_name is a string 'CacheEntry'.,self var1 is string var2.,self . object_name = 'CacheEntry',self . var1 = var2
"call the self.get_dum_object method with an argument obj, use the result as an argument for the self.objects.append method.","call self var1 method with argument obj, use result as argument for var2 method.",self . objects . append ( self . get_dump_object ( obj ) ),var2 ( self . get_dump_object ( obj ) )
self.objects is an empty list.,var0 is empty list.,self . objects = [ ],var0 = [ ]
"call the function get_language, substitute the result for self.old_language.",call function var0 substitute result for self var2 ,self . old_language = get_language ( ),self . var2 = var0 ( )
substitute old_method_name for self.old_method_name.,substitute var0 for self var0 ,self . old_method_name = old_method_name,self . var0 = var0
get 'value' attribute of the _active object,get var0 attribute of _active object,"self . old_timezone = getattr ( _active , 'value' , None )","self . old_timezone = getattr ( _active , var0 , None )"
call the method self.open(),call method self.open(),self . open ( ),var0 ( )
call the method self.open.,call method var0 ,self . open ( ),var0 ( )
"call the method self.options.update with dictionary as an argument, containing 1 element: boolean False for 'use_decimal'.","call method var0 with dict as argument, containing 1 element: boolean var1 for var2.",self . options . update ( { 'use_decimal' : False } ),var0 ( { var2 : var1 } )
substitute options for self.options.,substitute options for var0 ,self . options = options,var0 = options
substitute origin for self.origin.,substitute origin for var0 ,self . origin = origin,var0 = origin
convert orphans into an integer and substitute it for self.orphans.,convert orphans into integer and substitute it for var0 ,self . orphans = int ( orphans ),var0 = int ( orphans )
substitute paginator for self.paginator.,substitute var0 for self var0 ,self . paginator = paginator,self . var0 = var0
substitute params for self.params.,substitute var0 for self var0 ,self . params = params,self . var0 = var0
substitute parent_instance for self.parent_instance.,substitute var0 for self var0 ,self . parent_instance = parent_instance,self . var0 = var0
substitute parent_name for self.parent_name.,substitute var0 for self var0 ,self . parent_name = parent_name,self . var0 = var0
substitute parent_widget for self.parent_widget.,substitute var0 for self var0 ,self . parent_widget = parent_widget,self . var0 = var0
substitute parsed for self.parsed.,substitute parsed for var0 ,self . parsed = parsed,var0 = parsed
"if password is None substitute settings.EMAIL_HOST_PASSWORD for self.username, if not substitute password for self.password.",if password is var0 substitute settings var1 for var3 if not substitute password for var4 ,self . password = settings . EMAIL_HOST_PASSWORD if password is None else password,var4 = settings . var1 if password is var0 else password
"allow_files set to boolean True, allow_folders set to boolean False, required set to boolean True, widget set to None,   label set to None, initial set to None, help_text set to an empty string, unpacked list args, unpacked dictionary kwargs.   substitute path, match and recursive for self.path, self.match and self.recursive.","var0 set to boolean var1 var3 set to boolean var5 required set to boolean var1 widget set to var6 label set to var6 initial set to var6 var11 set to empty string, unpacked list var13 unpacked dict var14 var9 substitute path, match and recursive for var15 var16 and var17 ","self . path , self . match , self . recursive = path , match , recursive","var15 , var16 , var17 = path , match , recursive"
self.path is an empty string.,var0 is empty string.,self . path = '',var0 = ''
"strip trailing '/' from the script_name string, remove first occurrence of '/' in path_info string, append second result to the first, separated with '/', assign the result to self.path.","strip trailing var0 from var3 string, remove first occurrence of var0 in var5 string, append second result to first, separated with var0, assign result to var7 ","self . path = '%s/%s' % ( script_name . rstrip ( '/' ) , path_info . replace ( '/' , '' , 1 ) )","var7 = '%s/%s' % ( var3 . rstrip ( var0 ) , var5 . replace ( var0 , '' , 1 ) )"
self.path_info is an empty string.,self var1 is empty string.,self . path_info = '',self . var1 = ''
substitute path_info for self.path_info.,substitute var0 for self var0 ,self . path_info = path_info,self . var0 = var0
append the tempdir to self.paths_to_remove.,append var0 to self var2 ,self . paths_to_remove . append ( tempdir ),self . var2 . append ( var0 )
append tempdir to self.self.paths_to_remove.,append var0 to self.self var2 ,self . paths_to_remove . append ( tempdir ),self . var2 . append ( var0 )
self.paths_to_remove is an empty list.,self var1 is empty list.,self . paths_to_remove = [ ],self . var1 = [ ]
convert per_page into an integer and substitute it for self.per_page.,convert var0 into integer and substitute it for self var0 ,self . per_page = int ( per_page ),self . var0 = int ( var0 )
"remove element from kwargs dictionary under the key 'pk_field', substitute it for self.pk_field if it exists,","remove element from var0 dict under key var1, substitute it for var2 if it exists,","self . pk_field = kwargs . pop ( 'pk_field' , False )","var2 = var0 . pop ( var1 , False )"
"self.plural is an lambda function with an argument n, which returns result of boolean expression n not equal to integer 1,","var0 is lambda function with argument n var1 returns result of boolean expression n not equal to integer 1,",self . plural = lambda n : int ( n != 1 ),var0 = lambda n : int ( n != 1 )
self.pointer is integer 0.,var0 is integer 0.,self . pointer = 0,var0 = 0
substitute i for self.pointer.,substitute i for var0 ,self . pointer = i,var0 = i
"remove the first element from self.backout, substitute the result for self.pointer.","remove first element from self.backout, substitute result for var0 ",self . pointer = self . backout . pop ( ),var0 = self . backout . pop ( )
substitute DEFAULT_PORT for self.port.,substitute var0 for var1 ,self . port = DEFAULT_PORT,var1 = var0
"if port exists substitute it for self.host, if not substitute settings.EMAIL_PORT for self.port.",if port exists substitute it for var0 if not substitute settings var1 for var2 ,self . port = port or settings . EMAIL_PORT,var2 = port or settings . var1
increment self.pos by integer 1.,increment self.pos by integer 1.,self . pos += 1,self . pos += 1
self.pos is integer 0.,self.pos is integer 0.,self . pos = 0,self . pos = 0
decrement self.position by length of bytes.,decrement var0 by length of bytes.,self . position -= len ( bytes ),var0 -= len ( bytes )
increment self.position by length of output.,increment var0 by length of output.,self . position += len ( output ),var0 += len ( output )
self.position is an integer 0.,var0 is integer 0.,self . position = 0,var0 = 0
self.POST is an instance of QueryDict class created with an argument mutable set to boolean True.,self var0 is instance of var1 class created with argument mutable set to boolean var3 ,self . POST = QueryDict ( mutable = True ),self . var0 = var1 ( mutable = var3 )
substitute prefix for self.prefix.,substitute prefix for var0 ,self . prefix = prefix,var0 = prefix
"if prefix is true, substitute it for self.prefix, otherwise call the method self.get_default_prefix,","if prefix is true, substitute it for var0 otherwise call method self var2 ",self . prefix = prefix or self . get_default_prefix ( ),var0 = prefix or self . var2 ( )
"call the method self.prepend_token with an argument token,","call method self var1 with argument token,",self . prepend_token ( token ),self . var1 ( token )
"call the function os.path.basename with first element of self.argv as an argument, substitute the result for self.prog_name.","call function os.path.basename with first element of var0 as argument, substitute result for self var2 ",self . prog_name = os . path . basename ( self . argv [ 0 ] ),self . var2 = os . path . basename ( var0 [ 0 ] )
self.proxy is boolean False.,var0 is boolean var1 ,self . proxy = False,var0 = var1
substitute pubid for self.pubid.,substitute var0 for self var0 ,self . pubid = pubid,self . var0 = var0
"call the method self.queryset.filter with an argument, unpacked dictionary with an entry: pk for key.","call method var0 with argument, unpacked dict with entry: var1 for key.",self . queryset . filter ( ** { key : pk } ),var0 ( ** { key : var1 } )
substitute field.queryset for self.queryset.,substitute var0 for var1 ,self . queryset = field . queryset,var1 = var0
"prefix set to None, queryset set to None and unpacked dictionary kwargs.   substitute queryset for self.queryset.",prefix set to var0 var2 set to var0 and unpacked dict var4 substitute var2 for self var2 ,self . queryset = queryset,self . var2 = var2
and unpacked dictionary kwargs.   substitute queryset for self.queryset.,and unpacked dict var0 substitute var2 for self var2 ,self . queryset = queryset,self . var2 = var2
call the method self.reader_enters.,call method self var1 ,self . reader_enters ( ),self . var1 ( )
call the method self.reader_leaves.,call method self var1 ,self . reader_leaves ( ),self . var1 ( )
substitute reason for self.reason_phrase.,substitute reason for self var1 ,self . reason_phrase = reason,self . var1 = reason
"get the value under the self.status_code key of the REASON_PHRASES dictionary, if it exists substitute it for the self.reason_phrase,","get value under self var1 key of var2 dict, if it exists substitute it for self var4 ","self . reason_phrase = REASON_PHRASES . get ( self . status_code , 'UNKNOWN STATUS CODE' )","self . var4 = var2 . get ( self . var1 , 'UNKNOWN STATUS CODE' )"
"call the re.compile function with self.regex and self.flags as arguments, substitute the result for self.regex.","call var0 function with var1 and var3 as arguments, substitute result for var1 ","self . regex = re . compile ( self . regex , self . flags )","var1 = var0 ( var1 , var3 )"
substitute regex for self.regex.,substitute var0 for self var0 ,self . regex = regex,self . var0 = var0
"call the function re.compile with 2 arguments: elements of parts joined into a string, separated with '|',","call function var0 with 2 arguments: elements of parts joined into string, separated with var1,","self . regexes [ state ] = re . compile ( '|' . join ( parts ) , re . MULTILINE | re . VERBOSE )","self . regexes [ state ] = var0 ( var1 . join ( parts ) , re . MULTILINE | re . VERBOSE )"
self.regexes is an empty dictionary.,var0 is empty dict.,self . regexes = { },var0 = { }
call the method self.registered_checks.append with argument check.,call method self var1 append with argument check.,self . registered_checks . append ( check ),self . var1 . append ( check )
self.registered_checks is an empty list.,self var1 is empty list.,self . registered_checks = [ ],self . var1 = [ ]
decrement self.remaining by length of result.,decrement var0 by length of result.,self . remaining -= len ( result ),var0 -= len ( result )
substitute limit for self.remaining.,substitute limit for var0 ,self . remaining = limit,var0 = limit
remove item from self dictionary.,remove item from self dict.,self . remove ( item ),self . remove ( item )
call the method self.remove_potfiles.,call method self var1 ,self . remove_potfiles ( ),self . var1 ( )
self.render_context is a instance of RenderContext class.,self var1 is instance of var2 class.,self . render_context = RenderContext ( ),self . var1 = var2 ( )
substitute render_value for self.render_value.,substitute var0 for self var0 ,self . render_value = render_value,self . var0 = var0
substitute renderer for self.renderer.,substitute var0 for self var0 ,self . renderer = renderer,self . var0 = var0
"call the method self.replace_header with argument string 'Content-Type', 'text/%s; charset=""%s""', where '%s' symbols are replaced by:","call method self var1 with argument string var2, var3 var7 var8 symbols are replaced by:","self . replace_header ( 'Content-Type' , 'text/%s; charset='%s'' % ( subtype , charset ) )","self.var1(var2, 'text/%s; var6'' %(subtype, charset))"
self.request is None.,self.request is var0 ,self . request = request,self . request = request
"if 'require_all_fields' key of the kwargs dictionary exists remove it and substitute its value for self.require_all_fields,",if var0 key of var1 dict exists remove it and substitute its value for var2 ,"self . require_all_fields = kwargs . pop ( 'require_all_fields' , True )","var2 = var1 . pop ( var0 , True )"
"initial set to None, help_text set to an empty string, error_messages set to None, show_hidden_initial set to boolean False,   validators is an empty, localize set to boolean False, label_suffix set to None.   substitute required, label and initial for self.required, self.label and self.initial.","initial set to var0 var3 set to empty string var5 set to var0 var7 set to boolean var9 var13 is empty, localize set to boolean var9 var14 set to var0 substitute required, label and initial for var16 var17 and var18 ","self . required , self . label , self . initial = required , label , initial","var16 , var17 , var18 = required , label , initial"
"and ""requires_system_checks"", which is illegal. Use only ""requires_system_checks"".', replace '%s' for self.__class__.__name__.   call the method self.requires_system_checks with an argument: self.requires_system_checks if has_new_option is true,","and var0 var2 is illegal var3 only var0.var4%s' for var6 call method var8 with argument: var8 if var10 is true,",self . requires_system_checks = ( self . requires_system_checks if has_new_option else self . requires_model_validation if has_old_option else True ),var8 = ( var8 if var10 else self . requires_model_validation if has_old_option else True )
call the method self.reset.,call method var0 ,self . reset ( ),var0 ( )
self.resolver_match is None.,self var1 is var2 ,self . resolver_match = None,self . var1 = var2
call the self.run method with unpacked dictionary options as an argument.,call var0 method with unpacked dict options as argument.,self . run ( ** options ),var0 ( ** options )
call the method self.run_shell with an argument shell set to value under the 'interface' key of the options dictionary.,call method self var1 with argument shell set to value under var2 key of options dict.,self . run_shell ( shell = options [ 'interface' ] ),self . var1 ( shell = options [ var2 ] )
call the method self.run_validators with an argument out.,call method self var1 with argument out.,self . run_validators ( out ),self . var1 ( out )
call the method self.run_validators with an argument value.,call method self var1 with argument value.,self . run_validators ( value ),self . var1 ( value )
"code set to string 'invalid_choice' and params as a dictionary with an entry, val for 'value'.   call the method self.run_validators with an argument value.","code set to string var0 and var1 as dict with entry, val for var2 var3 call method self var5 with argument value.",self . run_validators ( value ),self . var5 ( value )
substitute s for self.s.,substitute s for var0 ,self . s = s,var0 = s
"call the force_str function with an argument: salt, if it exists, if not with a string '%s.%s', with '%s' replaced by,","call var0 function with argument: salt, if it exists, if not with string var2, with var3 replaced by,","self . salt = force_str ( salt or '%s.%s' % ( self . __class__ . __module__ , self . __class__ . __name__ ) )","self . salt = var0 ( salt or var2 % ( self . __class__ . __module__ , self . __class__ . __name__ ) )"
substitute save_as_new for self.save_as_new.,substitute var0 for self var0 ,self . save_as_new = save_as_new,self . var0 = var0
substitute save_m2m for self.save_m2m.,substitute var0 for self var0 ,self . save_m2m = save_m2m,self . var0 = var0
append form to self.saved_forms.,append form to self var1 ,self . saved_forms . append ( form ),self . var1 . append ( form )
self.saved_forms is an empty list.,self var1 is empty list.,self . saved_forms = [ ],self . var1 = [ ]
substitute schemes for self.schemes.,substitute schemes for var0 ,self . schemes = schemes,var0 = schemes
self.second is None.,var0 is var1 ,self . second = None,var0 = var1
"call the method parser.expression with an argument bp, substitute it for self.seconds.",call method var0 with argument var1 substitute it for var2 ,self . second = parser . expression ( bp ),self . second = var0 ( var1 )
position the file pointer at the beginning of self file.,position file pointer at beginning of self file.,self . seek ( 0 ),self . seek ( 0 )
call the self.seek method with argument integer 0.,call var0 method with argument integer 0.,self . seek ( 0 ),var0 ( 0 )
"if the key doesnt exists call the six.String function and substitute the result for self.stream.   remove the 'fields' key from the options dictionary and substitute it for self.selected_fields,",if key doesnt exists call six var1 function and substitute result for var2 remove var4 key from options dict and substitute it for self var6 ,"self . selected_fields = options . pop ( 'fields' , None )","self.var0ar6 var0 options.var0op(var4,var0None)"
"call the function force_str with an argument sep, substitute the result for self.sep.","call function var0 with argument sep, substitute result for var1 ",self . sep = force_str ( sep ),var1 = var0 ( sep )
"call the method serializers.get_public_serializer_formats, substitute the result for self.serialization_formats.",call method serializers var1 substitute result for self var3 ,self . serialization_formats = serializers . get_public_serializer_formats ( ),self . var3 = serializers . var1 ( )
"call the self.set method with key, new_value and version set to version as arguments.",call var0 method with key var1 and version set to version as arguments.,"self . set ( key , new_value , version = version )","var0 ( key , var1 , version = version )"
"call the method self.set with key, value, timeout and version as arguments.","call method var0 with key, value var1 and version as arguments.","self . set ( key , value , timeout , version )","var0 ( key , value , var1 , version )"
"call the method self.set with arguments key, value, timeout set to timeout, version set to version.","call method var0 with arguments key, value var1 set to var1 version set to version.","self . set ( key , value , timeout = timeout , version = version )","var0 ( key , value , var1 = var1 , version = version )"
"call the method self.set with key, value, version incremented by delta, as arguments.","call method var0 with key, value, version var1 by delta, as arguments.","self . set ( key , value , version = version + delta )","var0 ( key , value , version = version + delta )"
call the method self.set_cdata_mode with tag as the argument.,call method self var1 with tag as argument.,self . set_cdata_mode ( tag ),self . var1 ( tag )
call the method self.set_charset with utf8_charset as an argument.,call method self var1 with var2 as argument.,self . set_charset ( utf8_charset ),self . var1 ( var2 )
"call the method self.set_cookie with 5 arguments: key, max_age as integer 0, path as path, domain as domain,","call method self var1 with 5 arguments: key var2 as integer 0, path as path, domain as domain,","self . set_cookie ( key , max_age = 0 , path = path , domain = domain , expires = 'Thu, 01-Jan-1970 00:00:00 GMT' )","self . var1 ( key , var2 = 0 , path = path , domain = domain , expires = 'Thu, 01-Jan-1970 00:00:00 GMT' )"
"call the method payload.decode with 2 arguments: text and utf8_charset, substitute the result for self._payload.",call method var0 with 2 arguments: text and var1 substitute result for var2 ,"self . set_payload ( text , utf8_charset )","self . set_payload ( text , var1 )"
call the method self.setFeature with 2 arguments: handler.feature_external_ges and boolean False.,call method self var1 with 2 arguments: handler var3 and boolean var4 ,"self . setFeature ( handler . feature_external_ges , False )","self . var1 ( handler . var3 , var4 )"
call the method self.setFeature with 2 arguments: handler.feature_external_pes and boolean False.,call method self var1 with 2 arguments: handler var3 and boolean var4 ,"self . setFeature ( handler . feature_external_pes , False )","self . var1 ( handler . var3 , var4 )"
call the method self.setlist with 2 arguments: k and v.,call method var0 with 2 arguments: k and var1,"self . setlist ( k , v )","var0 ( k , v )"
call the method self.setlist with 2 arguments: key and default_list.,call method var0 with 2 arguments: key and var1 ,"self . setlist ( key , default_list )","var0 ( key , var1 )"
"call the method self.setlistdefault with an argument key, append value to the result.","call method var0 with argument key, append value to result.",self . setlistdefault ( key ) . append ( value ),var0 ( key ) . append ( value )
"call the method self.setlistdefault with an argument key, extend the result with value_list.","call method var0 with argument key, extend result with var1 ",self . setlistdefault ( key ) . extend ( value_list ),var0 ( key ) . extend ( var1 )
"substitute setting and nodelist for self.setting and self.nodelist, respectively.",substitute setting and var0 for var1 and self var0 respectively.,"self . setting , self . nodelist = setting , nodelist","var1 , self . var0 = setting , var0"
"substitute exc for self.settings_exception,",substitute exc for self var1 ,self . settings_exception = exc,self . var1 = exc
self.settings_exception is None.,self var1 is var2 ,self . settings_exception = None,self . var1 = var2
call the self.setup_environ method.,call self var1 method.,self . setup_environ ( ),self . var1 ( )
substitute show_hidden_initial for self.show_hidden_initial.,substitute var0 for self var0 ,self . show_hidden_initial = show_hidden_initial,self . var0 = var0
"get the value from the options dictionary under the key 'traceback', substitute it for self.show_traceback.","get value from options dict under key var0, substitute it for self var2 ",self . show_traceback = options . get ( 'traceback' ),self . var2 = options . get ( var0 )
substitute sign for self.sign.,substitute sign for var0 ,self . sign = sign,var0 = sign
substitute silent for self.silent.,substitute silent for var0 ,self . silent = silent,var0 = silent
substitute length of content for self.size.,substitute length of content for var0 ,self . size = len ( content ),var0 = len ( content )
substitute size for self.size.,substitute size for var0 ,self . size = size,var0 = size
substitute source for self.source.,substitute source for var0 ,self . source = source,var0 = source
call the self.start_object with an argument obj.,call self var1 with argument obj.,self . start_object ( obj ),self . var1 ( obj )
if the key doesnt exists substitute boolean False for self.use_natural_primary_keys.   call the method self.start_serialization,if key doesnt exists substitute boolean var0 for self var2 call method self.var5,self . start_serialization ( ),self . var5 ( )
cal the method self.startElement with 2 arguments: name and attrs.,var0 method self var2 with 2 arguments: name and var3 ,"self . startElement ( name , attrs )","self . var2 ( name , var3 )"
"and result of bitwise OR performed on 2 operands: re.MULTILINE and re.VERBOSE,   substitute the result for value under the state key of the self.regexes dictionary.   substitute first for self.state.",and result of var0 var1 performed on var2 operands: re var4 and re var6 substitute result for value under state key of var9 dict var2 substitute first for self.statevar2,self . state = first,self.var2tate var2 first
substitute state for self.state.,substitute state for var0 ,self . state = state,var0 = state
substitute status for self.status_code.,substitute status for self var1 ,self . status_code = status,self . var1 = status
"replace '%s' in string ""Notice: Couldn't set permission bits on %s. You're probably using an uncommon filesystem setup. No problem."",","replace var0 in string var1,","self . stderr . write (  'Notice: Couldn't set permission bits on %s. You're '  'probably using an uncommon filesystem setup. No '  'problem.' % new_path , self . style . NOTICE )","self.stderr.write( 'Notice: var4't set permission bits on %s.var7're '  'probably using an uncommon var10 setup.var3 '  'problem.' % new_path, self.style.NOTICE)"
"call the self.stderr.write method with string ""    Failed to install custom SQL for %s.%s model: %s\n"" as argument,","call var0 method with string var1 as argument,","self . stderr . write ( '    Failed to install custom SQL for %s.%s model: %s\n' % ( app_name , model . _meta . object_name , e ) )","var0 ( '    Failed to install custom SQL for %s.%s model: %s\n' % ( app_name , model . _meta . object_name , e ) )"
"call the self.stderr.write method with string ""    Failed to install index for %s.%s model: %s\n"" as argument,","call var0 method with string var1 as argument,","self . stderr . write ( '    Failed to install index for %s.%s model: %s\n' % ( app_name , model . _meta . object_name , e ) )","var0 ( '    Failed to install index for %s.%s model: %s\n' % ( app_name , model . _meta . object_name , e ) )"
"write string ""App '%s' could not be found. Is it in INSTALLED_APPS?"" with '%s' where '%s' is replaced with app_label,","write string ""App var1 could not be found. Is it in INSTALLED_APPS?"" with var1 var3 var1 is replaced with var4 ",self . stderr . write ( 'App '%s' could not be found. Is it in INSTALLED_APPS?' % app_label ),self . stderr . write ( 'App var1 could not be found.Is it in INSTALLED_APPS?' % var4 )
"replace '%s' in a string ""Error: %s"" with error_text, write it to self.stderr.",replace var0 in string var1 with var3 write it to var5 ,self . stderr . write ( 'Error: %s' % error_text ),var5 . write ( 'Error: %s' % var3 )
"call the self.stderr.write, with string ""The po files under %s are in a seemingly not writable location. mo files will not be updated/created."" as argument, with '%s' replaced by dirpath.","call var0 with string var1 as argument, with var2 replaced by var3 ",self . stderr . write ( 'The po files under %s are in a seemingly not writable location. ' 'mo files will not be updated/created.' % dirpath ),var0 ( 'The po files under %s are in a seemingly not writable location.mo files will not be updated/created.' % var3 )
write msg to self.stderr stream.,write msg to var0 stream.,self . stderr . write ( msg ),var0 . write ( msg )
"self.stderr is an instance of an OutputWrapper object, created with 2 arguments: value under the 'stderr' key of the options dictionary, if it doesnt exists use the sys.stderr instead, and self.style.ERROR.","var0 is instance of var1 object, created with 2 arguments: value under var3 key of options dict, if it doesnt exists use var4 instead, and var5 var6 ","self . stderr = OutputWrapper ( options . get ( 'stderr' , sys . stderr ) , self . style . ERROR )","var0 = var1 ( options . get ( var3 , var4 ) , var5 . var6 )"
"self.stderr is an OutputWrapper object instance, created with value under the 'stderr' key of the options dictionary as an argument,","var0 is var1 object instance, created with value under var3 key of options dict as argument,","self . stderr = OutputWrapper ( options . get ( 'stderr' , sys . stderr ) )","var0 = var1 ( options . get ( var3 , sys . stderr ) )"
"call the function timedelta with an argument seconds set to negative _time.timezone, substitute the result for self.STDOFFSET.",call function var0 with argument seconds set to negative var1 substitute result for self var2 ,self . STDOFFSET = timedelta ( seconds = - _time . timezone ),self . var2 = var0 ( seconds = - var1 )
self.stdout.ending is None.,var0 is var1 ,self . stdout . ending = None,var0 = var1
flush the output buffer of the self.stdout object.,flush output buffer of var0 object.,self . stdout . flush ( ),var0 . flush ( )
"call the method registry.tags_available, sort the result and join it into a string, separate by newlines, write it to self.stdout.","call method registry var1 sort result and join it into string, separate by var2 write it to var3 ",self . stdout . write ( '\n' . join ( sorted ( registry . tags_available ( ) ) ) ),var3 . write ( '\n' . join ( sorted ( registry . var1 ( ) ) ) )
"call the method connection.ops.end_transaction_sql, use the result as the argument for the call to the method self.style.SQL_KEYWORD,",call method connection.ops var1 use result as argument for call to method var2 var3 ,self . stdout . write ( '\n' + self . style . SQL_KEYWORD ( connection . ops . end_transaction_sql ( ) ) ),self . stdout . write ( '\n' + var2 . var3 ( connection . ops . var1 ( ) ) )
"call the method self.stdout.write with an argument string 'examining files with the extensions: %s\n',","call method var0 with argument string var1,","self . stdout . write ( 'examining files with the extensions: %s\n' % get_text_list ( list ( self . extensions ) , 'and' ) )","var0 ( var1 % get_text_list ( list ( self . extensions ) , 'and' ) )"
"replace '%s' in string 'ignoring directory %s\n' with dirname, write it to self.stdout stream.","replace '%s' in string 'ignoring directory %s\n' with dirname, write it to self.stdout stream.",self . stdout . write ( 'ignoring directory %s\n' % dirname ),self . stdout . write ( 'ignoring directory %s\n' % dirname )
"replace '%s' in string 'ignoring file %s in %s\n' with filename and dirpath, write it to self.stdout.","replace '%s' in string 'ignoring file %s in %s\n' with filename and dirpath, write it to self.stdout.","self . stdout . write ( 'ignoring file %s in %s\n' % ( filename , dirpath ) )","self . stdout . write ( 'ignoring file %s in %s\n' % ( filename , dirpath ) )"
"call the self.stdout.write method with string 'processing file %s in %s\n' as argument, replacing all the occurrences of '%s' with f and dirpath, respectively.","call var0 method with string var1 as argument, replacing all occurrences of var2 with f and var3 respectively.","self . stdout . write ( 'processing file %s in %s\n' % ( f , dirpath ) )","var0 ( var1 % ( f , var3 ) )"
"substitute '%s' in a string ""    - %s\n"" with return value of the operation.describe method, write the result to self.stdout.","substitute '%s' in a string ""    - %s\n"" with return value of the operation.describe method, write the result to self.stdout.",self . stdout . write ( '    - %s\n' % operation . describe ( ) ),self . stdout . write ( '    - %s\n' % operation . describe ( ) )
"call the self.stdout.write method with string ""    Creating table %s\n"" as argument, with all occurrences of '%s' replaced with model._meta.db_table.","call var0 method with string var1 as argument, with all occurrences of var2 replaced with model._meta var4 ",self . stdout . write ( '    Creating table %s\n' % model . _meta . db_table ),var0 ( '    Creating table %s\n' % model . _meta . var4 )
"call the self.stdout.write method with string ""    Installing custom SQL for %s.%s model\n"" as argument,","call var0 method with string var1 as argument,","self . stdout . write ( '    Installing custom SQL for %s.%s model\n' % ( app_name , model . _meta . object_name ) )","var0 ( '    Installing custom SQL for %s.%s model\n' % ( app_name , model . _meta . object_name ) )"
"call the self.stderr.write method with string ""    Installing index for %s.%s model\n"" as argument,","call var0 method with string var1 as argument,","self . stdout . write ( '    Installing index for %s.%s model\n' % ( app_name , model . _meta . object_name ) )","self . stdout . write ( '    Installing index for %s.%s model\n' % ( app_name , model . _meta . object_name ) )"
"call the self.stderr.write method with string ""    No custom SQL for %s.%s model\n"" as argument,","call var0 method with string var1 as argument,","self . stdout . write ( '    No custom SQL for %s.%s model\n' % ( app_name , model . _meta . object_name ) )","self . stdout . write ( '    No custom SQL for %s.%s model\n' % ( app_name , model . _meta . object_name ) )"
"call the self.stdout.write method with string ""    Processing %s.%s model\n"" as argument, with all occurrences of '%s' replaced with,","call var0 method with string var1 as argument, with all occurrences of var2 replaced with,","self . stdout . write ( '    Processing %s.%s model\n' % ( app_name , model . _meta . object_name ) )","var0 ( '    Processing %s.%s model\n' % ( app_name , model . _meta . object_name ) )"
"substitute '%s' in a string ""  %s:\n"" with return value of the self.style.MIGRATE_LABEL method called with argument writer.filename,","substitute '%s' in a string ""  %s:\n"" with return value of the self.style.MIGRATE_LABEL method called with argument writer.filename,","self . stdout . write ( '  %s:\n' % ( self . style . MIGRATE_LABEL ( writer . filename ) , ) )","self . stdout . write ( '  %s:\n' % ( self . style . MIGRATE_LABEL ( writer . filename ) , ) )"
"write string ""  all instances of the codebase have applied the migrations you squashed,"" to self.stdout.",write string var0 to var1 ,"self . stdout . write ( '  all instances of the codebase have applied the migrations you squashed, ' )","var1 . write ( '  all instances of the codebase have applied the migrations you squashed, ' )"
"call the self.stdout.write method, with string ""  Applying %s..."" with '%s' replaced with migration and ending set to '', as arguments.","call var0 method, with string var1 with var2 replaced with migration and ending set to var3 , as arguments.","self . stdout . write ( '  Applying %s...' % migration , ending = '' )","var0 ( '  Applying %s...' % migration , ending = var3 )"
"write the string ""  Creating tables...\n"" to the standard output.",write string var0 to standard output.,self . stdout . write ( '  Creating tables...\n' ),self . stdout . write ( '  Creating tables...\n' )
"write the string ""  Installing custom SQL...\n"" to the standard output.",write string var0 to standard output.,self . stdout . write ( '  Installing custom SQL...\n' ),self . stdout . write ( '  Installing custom SQL...\n' )
"write string ""  Installing indexes...\n"" to the standard output.",write string var0 to standard output.,self . stdout . write ( '  Installing indexes...\n' ),self . stdout . write ( '  Installing indexes...\n' )
"call the method self.stdout.write with string ""  No migrations to apply."" as an argument.",call method var0 with string var1 as argument.,self . stdout . write ( '  No migrations to apply.' ),var0 ( '  No migrations to apply.' )
"write string ""  No optimizations possible."" to self.stdout stream.",write string var0 to var1 stream.,self . stdout . write ( '  No optimizations possible.' ),var1 . write ( '  No optimizations possible.' )
"replace '%s' in string ""  Optimized from %s operations to %s operations."" with lengths of operations and ew_operations, respectively,","replace var1 in string var2 with lengths of operations and var4 respectively,","self . stdout . write ( '  Optimized from %s operations to %s operations.' % ( len ( operations ) , len ( new_operations ) ) )","self . stdout . write ( 'var0 var3 from %s operations to %s operations.' % ( len ( operations ) , var0len ( new_operations ) ) )"
"write string ""  the new migration will be used for new installs. Once you are sure"" to self.stdout.",write string var0 to var1 ,self . stdout . write ( '  the new migration will be used for new installs. Once you are sure' ),var1 . write ( '  the new migration will be used for new installs.Once you are sure' )
"call the self.stdout.write method, with string ""  Unapplying %s..."" with '%s' replaced with migration and ending set to '', as arguments.","call var0 method, with string var1 with var2 replaced with migration and ending set to var3 , as arguments.","self . stdout . write ( '  Unapplying %s...' % migration , ending = '' )","var0 ( '  Unapplying %s...' % migration , ending = var3 )"
"write string ""  you can delete them."" to self.stdout.",write string var0 to var1 ,self . stdout . write ( '  you can delete them.' ),var1 . write ( '  you can delete them.' )
"self.style.MIGRATE_HEADING, write the result to self.stdout.   write string ""  You should commit this migration but leave the old ones in place;"" to self.stdout.",var0 var1 write result to var2 write string var4 to var2 ,self . stdout . write ( '  You should commit this migration but leave the old ones in place;' ),var2 . write ( '  You should commit this migration but leave the old ones in place;' )
"append migration.name to string ' - ', write it to self.stdout stream.","append var0 to string var1, write it to var2 stream.",self . stdout . write ( ' - %s' % migration . name ),var2 . write ( ' - %s' % var0 )
"call the self.stdout.write method with string "" (no migrations)"" and self.style.MIGRATE_FAILURE as arguments.",call var0 method with string var1 and var2 var3 as arguments.,"self . stdout . write ( ' (no migrations)' , self . style . MIGRATE_FAILURE )","var0 ( '(no migrations)' , var2 . var3 )"
"substitute '%s' with title in the string "" [ ] %s"", write it to the standard output.","substitute var1 with title in string var2, write it to standard output.",self . stdout . write ( ' [ ] %s' % title ),self . stdout . write ( ' [] %s' % title )
"substitute '%s' with title in the string "" [X] %s"", write it to the standard output.","substitute '%s' with title in the string "" [X] %s"", write it to the standard output.",self . stdout . write ( ' [X] %s' % title ),self . stdout . write ( ' [X] %s' % title )
"substitute '%s' in a string ""\nCreated new merge migration %s"" with writer path, write it to self.stdout.","substitute var0 in string var1 with writer path, write it to var4 ",self . stdout . write ( '\nCreated new merge migration %s' % writer . path ),var4 . write ( '\x0bar3 new merge migration %s' % writer . path )
"append new line to line, write it to self.stdout stream.","append new line to line, write it to var0 stream.",self . stdout . write ( '%s\n' % line ),var0 . write ( '%s\n' % line )
"use it as an argument for the call to the method self.style.MIGRATE_HEADING, write the result to self.stdout.   call the method writer.as_string, append newline to the result, write it to self.stdout.","use it as argument for call to method var0 var1 write result to var2 call method writer var6 append var7 to result, write it to var2 ",self . stdout . write ( '%s\n' % writer . as_string ( ) ),var2 . write ( '%s\n' % writer . var6 ( ) )
"replace '%s' in string ""Cache table '%s' already exists."" with tablename, write it to the self.stdout stream.","replace var0 in string ""Cache table var0 already exists."" with var3 write it to var4 stream.",self . stdout . write ( 'Cache table '%s' already exists.' % tablename ),var4 . write ( 'var2 table var0 already exists.' % var3 )
"replace '%s' in string ""Cache table '%s' created."" with tablename, write it to self.stdout.","replace var0 in string ""Cache table var0 created."" with var3 write it to var4 ",self . stdout . write ( 'Cache table '%s' created.' % tablename ),var4 . write ( 'var2 table var0 created.' % var3 )
"call the method self.stdout.write with an argument string ""Checking %s for fixtures..."",","call method var0 with argument string var1,",self . stdout . write ( 'Checking %s for fixtures...' % humanize ( fixture_dir ) ),var0 ( 'Checking %s for fixtures...' % humanize ( fixture_dir ) )
"write string ""Cleaning up temporary files.\n"" to self.stdout stream.",write string var0 to var1 stream.,self . stdout . write ( 'Cleaning up temporary files.\n' ),var1 . write ( 'Cleaning up temporary files.\n' )
"replace '%s' in string ""copying plural forms: %s\n"" with plural_form_line, write it to self.stdout.","replace '%s' in string ""copying plural forms: %s\n"" with plural_form_line, write it to self.stdout.",self . stdout . write ( 'copying plural forms: %s\n' % plural_form_line ),self . stdout . write ( 'copying plural forms: %s\n' % plural_form_line )
"replace '%s' in string ""Creating %s\n"" with new_path, write it to the self.stdout stream.","replace '%s' in string ""Creating %s\n"" with new_path, write it to the self.stdout stream.",self . stdout . write ( 'Creating %s\n' % new_path ),self . stdout . write ( 'Creating %s\n' % new_path )
"replace '%s' in string ""Downloading %s\n"", with display_url, write it to self.stdout stream.","replace '%s' in string ""Downloading %s\n"", with display_url, write it to self.stdout stream.",self . stdout . write ( 'Downloading %s\n' % display_url ),self . stdout . write ( 'Downloading %s\n' % display_url )
"substitute '%s' in string ""Extracting %s\n"" with filename, write it to self.stdout stream.","substitute '%s' in string ""Extracting %s\n"" with filename, write it to self.stdout stream.",self . stdout . write ( 'Extracting %s\n' % filename ),self . stdout . write ( 'Extracting %s\n' % filename )
"write string ""Flush cancelled.\n"" to self.stdout stream.",write string var0 to var1 stream.,self . stdout . write ( 'Flush cancelled.\n' ),var1 . write ( 'Flush cancelled.\n' )
"call the method self.stdout.write with an argument string ""Installed %d object(s) (of %d) from %d fixture(s)"",","call method var0 with argument string var1,","self . stdout . write ( 'Installed %d object(s) (of %d) from %d fixture(s)' % ( self . loaded_object_count , self . fixture_object_count , self . fixture_count ) )","var0 ( 'Installed %d object(s)(of %d) from %d fixture(s)' % ( self . loaded_object_count , self . fixture_object_count , self . fixture_count ) )"
"call the method self.stdout.write with an argument string ""Installed %d object(s) from %d fixture(s)"",","call method var0 with argument string var1,","self . stdout . write ( 'Installed %d object(s) from %d fixture(s)' % ( self . loaded_object_count , self . fixture_count ) )","var0 ( 'Installed %d object(s) from %d fixture(s)' % ( self . loaded_object_count , self . fixture_count ) )"
"call the method self.stdout.write with an argument string ""Installing %s fixture '%s' from %s."",","call method var0 with argument string var1,","self . stdout . write ( 'Installing %s fixture '%s' from %s.' %  ( ser_fmt , fixture_name , humanize ( fixture_dir ) ) )","var0('Installing %s fixture '%s' from %s.' % (ser_fmt, fixture_name, humanize(fixture_dir)))"
"call the method self.stdout.write with an argument string ""Loading '%s' fixtures..."", where '%s' is replaced with fixture_name.",call method var0 with argument string var1 var3 var2 is replaced with var4 ,self . stdout . write ( 'Loading '%s' fixtures...' % fixture_name ),var0 ( 'Loading var2 fixtures...' % var4 )
"substitute '%s' in string ""No changes detected in app '%s'"" with the result of the method app_labels.pop, write it to self.stdout.","substitute var0 in string ""No changes detected in var3 var0"" with result of method var4 pop, write it to var6 ",self . stdout . write ( 'No changes detected in app '%s'' % app_labels . pop ( ) ),var6 . write ( 'var2 changes detected in var3 var0' % var4 . pop ( ) )
"substitute '%s' in string ""No changes detected in apps '%s'"" with the app_labels joined into a string, separated by string ""', '"",","substitute var0 in string ""No changes detected in var3 var0"" with var4 joined into string, separated by string var6,","self . stdout . write ( 'No changes detected in apps '%s'' % ( '', '' . join ( app_labels ) ) )","self . stdout . write ( 'var2 changes detected in var3 var0' % ( '' , '' . join ( var4 ) ) )"
"write string ""No changes detected"" to self.stdout stream.",write string var0 to var1 stream.,self . stdout . write ( 'No changes detected' ),var1 . write ( 'No changes detected' )
"write string ""No conflicts detected to merge."" to self.stdout stream.",write string var0 to var1 stream.,self . stdout . write ( 'No conflicts detected to merge.' ),var1 . write ( 'No conflicts detected to merge.' )
"call the method self.stdout.write with an argument string ""No fixture '%s' in %s."", where '%s' is replaced with fixture_name,",call method var0 with argument string var1 var3 var2 is replaced with var4 ,"self . stdout . write ( 'No fixture '%s' in %s.' %  ( fixture_name , humanize ( fixture_dir ) ) )","var0 ( 'No fixture var2 in %s.' % ( var4 , humanize ( fixture_dir ) ) )"
"write string ""Performing system checks...\n\n"" to self.stdout stream.",write string var0 to var1 stream.,self . stdout . write ( 'Performing system checks...\n\n' ),var1 . write ( 'Performing system checks...\n\n' )
"replace '%s' in string ""processing locale %s\n"" with locale, write it to self.stdout.","replace '%s' in string ""processing locale %s\n"" with locale, write it to self.stdout.",self . stdout . write ( 'processing locale %s\n' % locale ),self . stdout . write ( 'processing locale %s\n' % locale )
"call the method self.stdout.write, with an argument string ""Rendering %s template files with extensions: %s\n"",","call method var0 with argument string var1,","self . stdout . write ( 'Rendering %s template files with ' 'extensions: %s\n' % ( app_or_project , ', ' . join ( extensions ) ) )","var0 ( 'Rendering %s template files with extensions: %s\n' % ( app_or_project , ', ' . join ( extensions ) ) )"
"where '%s' is replaced with app_or_project and extensions joined into a string, separated by a string ', '.   call the method self.stdout.write, with an argument string ""Rendering %s template files with filenames: %s\n"",","where '%s' is replaced with app_or_project and extensions joined into a string, separated by a string ', '.   call the method self.stdout.write, with an argument string ""Rendering %s template files with filenames: %s\n"",","self . stdout . write ( 'Rendering %s template files with ' 'filenames: %s\n' % ( app_or_project , ', ' . join ( extra_files ) ) )","self . stdout . write ( 'Rendering %s template files with ' 'filenames: %s\n' % ( app_or_project , ', ' . join ( extra_files ) ) )"
"write a string ""Resetting sequences\n"" to self.stdout stream.",write string var0 to var1 stream.,self . stdout . write ( 'Resetting sequences\n' ),var1 . write ( 'Resetting sequences\n' )
"substitute '%s' in string ""UnicodeDecodeError: skipped file %s in %s"" with f.file and f.dirpath, write it to self.stdout.",substitute var0 in string var1 with var4 and var5 write it to var6 ,"self . stdout . write ( 'UnicodeDecodeError: skipped file %s in %s' % ( f . file , f . dirpath ) )","var6 . write ( 'UnicodeDecodeError: skipped file %s in %s' % ( var4 , var5 ) )"
"call the method self.stdout.write with an argument: string ""%(started_at)s\nDjango version %(version)s, using settings %(settings)r\n""",call method var0 with argument: string var1,"self . stdout . write ( ( '%(started_at)s\n' 'Django version %(version)s, using settings %(settings)r\n' 'Starting development server at http://%(addr)s:%(port)s/\n' 'Quit the server with %(quit_command)s.\n' ) % { 'started_at' : now , 'version' : self . get_version ( ) , 'settings' : settings . SETTINGS_MODULE , 'addr' : '[%s]' % self . addr if self . _raw_ipv6 else self . addr , 'port' : self . port , 'quit_command' : quit_command , } )","var0 ( '''%(started_at)sDjango version %(version)s, using settings %(settings)rStarting development server at http://%(addr)s:%(port)s/Quit the server with %(quit_command)s.''' % { 'started_at' : now , 'version' : self . get_version ( ) , 'settings' : settings . SETTINGS_MODULE , 'addr' : '[%s]' % self . addr if self . _raw_ipv6 else self . addr , 'port' : self . port , 'quit_command' : quit_command } )"
call self.stdout.write method with app_name and self.style.MIGRATE_LABEL as arguments.,call var0 method with var1 and var3 var4 as arguments.,"self . stdout . write ( app_name , self . style . MIGRATE_LABEL )","var0 ( var1 , var3 . var4 )"
write errors to self.stdout.,write errors to var0 ,self . stdout . write ( errors ),var0 . write ( errors )
write msg to self.stderr stream.,write msg to var0 stream.,self . stdout . write ( msg ),self . stdout . write ( msg )
write the result to the self.stdout stream.   write output to self.stdout stream.,write result to var0 stream var2 write output to var0 stream.,self . stdout . write ( output ),var0 . write ( output )
"replace '%s' in a string ""Created new squashed migration %s"" with writer.path, use it as an argument for the call to the method,","replace var0 in string var1 with var3 use it as argument for call to method,",self . stdout . write ( self . style . MIGRATE_HEADING ( 'Created new squashed migration %s' % writer . path ) ),self . stdout . write ( self . style . MIGRATE_HEADING ( 'var2 new squashed migration %s' % var3 ) )
"substitute '%s' in a string ""Full migrations file '%s':"" with writer.filename, append newline to it,","substitute var0 in string ""Full migrations file var0:"" with var3 append var4 to it,",self . stdout . write ( self . style . MIGRATE_HEADING ( 'Full migrations file '%s':' % writer . filename ) + '\n' ),self . stdout . write ( self . style . MIGRATE_HEADING ( 'var2 migrations file var0:' % var3 ) + '\n' )
"substitute '%s' in a string ""Merging %s"" with app_label,",substitute var0 in string var1 with var3 ,self . stdout . write ( self . style . MIGRATE_HEADING ( 'Merging %s' % app_label ) ),self . stdout . write ( self . style . MIGRATE_HEADING ( 'var2 %s' % var3 ) )
"substitute '%s' in a string ""Migrations for '%s':"" with app_label, append newline to it,","substitute var0 in string ""Migrations for var0:"" with var3 append var5 to it,",self . stdout . write ( self . style . MIGRATE_HEADING ( 'Migrations for '%s':' % app_label ) + '\n' ),self . stdout . write ( self . style . MIGRATE_HEADING ( 'var2 for var0:' % var3 ) + '\n' )
"call the self.style.MIGRATE_HEADING method, with string ""Operations to perform:"" as an argument,","call var0 var1 method, with string var2 as argument,",self . stdout . write ( self . style . MIGRATE_HEADING ( 'Operations to perform:' ) ),self . stdout . write ( var0 . var1 ( 'Operations to perform:' ) )
"call the method self.style.MIGRATE_HEADING with an argument string ""Optimizing..."", write it to self.stdout.","call method var0 var1 with argument string var3, write it to var4 ",self . stdout . write ( self . style . MIGRATE_HEADING ( 'Optimizing...' ) ),var4 . write ( var0 . var1 ( 'Optimizing...' ) )
"call the self.style.MIGRATE_HEADING method with string ""Running migrations:"" as an argument, use the result as an argument for the call to the self.stdout.write method.","call var0 var1 method with string var2 as argument, use result as argument for call to var3 method.",self . stdout . write ( self . style . MIGRATE_HEADING ( 'Running migrations:' ) ),var3 ( var0 . var1 ( 'Running migrations:' ) )
"call the self.style.MIGRATE_HEADING with string ""Synchronizing apps without migrations:"" as an argument,","call var0 var1 with string var2 as argument,",self . stdout . write ( self . style . MIGRATE_HEADING ( 'Synchronizing apps without migrations:' ) ),self . stdout . write ( var0 . var1 ( 'Synchronizing apps without migrations:' ) )
"call the method self.style.MIGRATE_HEADING with an argument string ""Will squash the following migrations:"",","call method var0 var1 with argument string var3,",self . stdout . write ( self . style . MIGRATE_HEADING ( 'Will squash the following migrations:' ) ),self . stdout . write ( var0 . var1 ( 'Will squash the following migrations:' ) )
"for every a and n in targets, put a into a set, join all the set elements into a string separated by string ', ',","for every and n in targets, put into set, join all set elements into string separated by string var0,","self . stdout . write ( self . style . MIGRATE_LABEL ( '  Apply all migrations: ' ) + ( ', ' . join ( set ( a for a , n in targets ) ) or '(none)' ) )","self . stdout . write ( self . style . MIGRATE_LABEL ( '  Apply all migrations: ' ) + ( var0 . join ( set ( a for a , n in targets ) ) or '(none)' ) )"
"substitute '%s' in a string ""  Branch %s"" with migration.name,",substitute var1 in string var2 with var4 ,self . stdout . write ( self . style . MIGRATE_LABEL ( '  Branch %s' % migration . name ) ),self . stdout . write ( self . style . MIGRATE_LABEL ( 'var0 var3 %s' % var4 ) )
"join the executor.loader.unmigrated_apps into a string separated by string ', ' append it to the end of a string ""  Synchronize unmigrated apps: "",","join executor.loader var1 into string separated by string var4 append it to end of string var5,","self . stdout . write ( self . style . MIGRATE_LABEL ( '  Synchronize unmigrated apps: ' ) + ( ', ' . join ( executor . loader . unmigrated_apps ) ) )",self . stdout . write ( self . style . MIGRATE_LABEL ( var5 ) + var4 . join ( executor . loader . var1 ) )
"replace '%s' in string ""%s, from %s"" with second and first element of the first targets row, respectively,","replace var0 in string var1 with second and first element of first targets row, respectively,","self . stdout . write ( self . style . MIGRATE_LABEL ( '  Target specific migration: ' ) + '%s, from %s' % ( targets [ 0 ] [ 1 ] , targets [ 0 ] [ 0 ] ) )","self . stdout . write ( self . style . MIGRATE_LABEL ( '  Target specific migration: ' ) + '%s, from %s' % ( targets [ 0 ] [ 1 ] , targets [ 0 ] [ 0 ] ) )"
"convert the first element of the first row of targets to string, append it to the string ""  Unapply all migrations: "",","convert first element of first row of targets to string, append it to string var0,","self . stdout . write ( self . style . MIGRATE_LABEL ( '  Unapply all migrations: ' ) + '%s' % ( targets [ 0 ] [ 0 ] , ) )","self . stdout . write ( self . style . MIGRATE_LABEL ( '  Unapply all migrations: ' ) + '%s' % ( targets [ 0 ] [ 0 ] , ) )"
"wrte to the standard output result of the call to the method self.style.MIGRATE_SUCCESS with string "" FAKED"" as a argument.",var0 to standard output result of call to method var1 var2 with string var3 as argument.,self . stdout . write ( self . style . MIGRATE_SUCCESS ( ' FAKED' ) ),self . stdout . write ( var1 . var2 ( ' FAKED' ) )
"wrte to the standard output result of the call to the method self.style.MIGRATE_SUCCESS with string "" OK"" as a argument.",var0 to standard output result of call to method var1 var2 with string var3 as argument.,self . stdout . write ( self . style . MIGRATE_SUCCESS ( ' OK' ) ),self . stdout . write ( var1 . var2 ( ' OK' ) )
"call the method self.style.NOTICE with string ""  Run 'manage.py makemigrations' to make new migrations, and then re-run 'manage.py migrate' to apply them."" as an argument, use the result as an argument for the call to the self.stdout.write method.","call method var0 var1 with string var2 as argument, use result as argument for call to var3 method.","self . stdout . write ( self . style . NOTICE ( '  Run 'manage.py makemigrations' to make new migrations, and then re-run 'manage.py migrate' to apply them.' ) )","var3(var0.var1('  Run 'manage.py makemigrations' to make new migrations, and then re-run 'manage.py migrate' to apply them.'))"
"call the method self.style.NOTICE with string ""  Your models have changes that are not yet reflected in a migration, and so won't be applied."" as an argument, use the result as an argument for the call to the self.stdout.write method.","call method var0 var1 with string var2 as argument, use result as argument for call to var3 method.","self . stdout . write ( self . style . NOTICE ( '  Your models have changes that are not yet reflected in a migration, and so won't be applied.' ) )","var3(var0.var1('  Your models have changes that are not yet reflected in a migration, and so won't be applied.'))"
call the method self.style.NOTICE with an argument:,call method var0 var1 with argument:,self . stdout . write ( self . style . NOTICE ( '\nYou have unapplied migrations; your app may not work properly until they are applied.' ) ),self . stdout . write ( var0 . var1 ( '''You have unapplied migrations; your app may not work properly until they are applied.''' ) )
"string: ""\nYou have unapplied migrations; your app may not work properly until they are applied."", write it to self.stdout.   call the method self.style.NOTICE with an argument string ""Run 'python manage.py migrate' to apply them.\n"",","string: ""\nYou have unapplied migrations; your app may not work properly until they are applied."", write it to self.stdout.   call the method self.style.NOTICE with an argument string ""Run 'python manage.py migrate' to apply them.\n"",",self . stdout . write ( self . style . NOTICE ( 'Run 'python manage.py migrate' to apply them.\n' ) ),self . stdout . write ( self . style . NOTICE ( 'Run 'python manage.py migrate' to apply them.\n' ) )
"call the method connection.ops.start_transaction_sql, use the result as an argument for the call to the method self.style.SQL_KEYWORD,",call method connection.ops var1 use result as argument for call to method var2 var3 ,self . stdout . write ( self . style . SQL_KEYWORD ( connection . ops . start_transaction_sql ( ) ) ),self . stdout . write ( var2 . var3 ( connection . ops . var1 ( ) ) )
write shutdown_message to self.stdout file stream.,write var0 to var1 file stream.,self . stdout . write ( shutdown_message ),var1 . write ( var0 )
call method self.stdout.write with statement as an argument.,call method var0 with statement as argument.,self . stdout . write ( statement ),var0 ( statement )
"self.stdout is an instance of OutputWrapper class created with an argument: value under the 'stdout' key of the options dictionary,","var0 is instance of var1 class created with argument: value under var3 key of options dict,","self . stdout = OutputWrapper ( options . get ( 'stdout' , sys . stdout ) )","var0 = var1 ( options . get ( var3 , sys . stdout ) )"
call the self.stream.close function.,call var0 function.,self . stream . close ( ),var0 ( )
call the method self.stream.flush.,call method var0 ,self . stream . flush ( ),var0 ( )
write 79 '-' characters into self.stream file stream.,write 79 var0 characters into var1 file stream.,self . stream . write ( '-' * 79 ),var1 . write ( var0 * 79 )
write a newline into a self.stream file stream.,write var0 into var1 file stream.,self . stream . write ( '\n' ),var1 . write ( '\n' )
"call the method self.stream.write with argument string '%s\n', with '%s' replaced with msg_data.","call method var0 with argument string var1, with var2 replaced with var3 ",self . stream . write ( '%s\n' % msg_data ),var0 ( var1 % var3 )
write a white space to the self.stream file stream.,write white space to var0 file stream.,self . stream . write ( ' ' ),var0 . write ( ' ' )
"write ',' to the self.stream file stream.",write var0 to var1 file stream.,"self . stream . write ( ', ' )","var1 . write ( ', ' )"
write a '[' to the self.stream file stream.,write a '[' to the self.stream file stream.,self . stream . write ( '[' ),self . stream . write ( '[' )
write ']' to the self.stream file stream.,write var0 to var1 file stream.,self . stream . write ( ']' ),var1 . write ( var0 )
write a new line to the self.stream file stream.,write new line to var0 file stream.,self . stream . write ( '\n' ),var0 . write ( '\n' )
write new line to the self.stream file stream.,write new line to var0 file stream.,self . stream . write ( '\n' ),var0 . write ( '\n' )
write 79 '-' characters into self.stream file stream.,write 79 var0 characters into var1 file stream.,self . stream . write ( b'-' * 79 ),var1 . write ( bvar0 * 79 )
write a newline character into self.stream file stream.,write var0 character into var1 file stream.,self . stream . write ( b'\n' ),var1 . write ( b'\n' )
"call the as_bytes method on the return value of the message.message method append to it '\n' character, use it as the argument for the call to the self.stream.write method.","call var0 method on return value of var2 method append to it var3 character, use it as argument for call to var4 method.",self . stream . write ( message . message ( ) . as_bytes ( ) + b'\n' ),var4 ( message . message ( ) . var0 ( ) + b'\n' )
"pop the value under the 'stream' key of the kwargs dictionary, if it exists replace it for self.stream, if not replace sys.stdout for self.stream.","pop value under var0 key of var1 dict, if it exists replace it for var2 if not replace var4 for var2 ","self . stream = kwargs . pop ( 'stream' , sys . stdout )","var2 = var1 . pop ( var0 , var4 )"
self.stream is None.,var0 is var1 ,self . stream = None,var0 = var1
open the file in mode 'ab' and with file name obtained by calling the self._get_filename method.,open file in mode var0 and with file name obtained by calling var1 method.,"self . stream = open ( self . _get_filename ( ) , 'ab' )","self . stream = open ( self . _get_filename ( ) , var0 )"
"remove the 'stream' key from the options dictionary and substitute it for self.stream,",remove var0 key from options dict and substitute it for var1 ,"self . stream = options . pop ( 'stream' , six . StringIO ( ) )","var1 = options . pop ( var0 , six . StringIO ( ) )"
"call the function six.StringIO with an argument stream_or_string, substitute the result for self.stream.",call function six var0 with argument var1 substitute result for var3 ,self . stream = six . StringIO ( stream_or_string ),var3 = six . var0 ( var1 )
substitute stream for self.stream.,substitute stream for var0 ,self . stream = stream,var0 = stream
substitute stream_or_string for self.stream.,substitute var0 for var1 ,self . stream = stream_or_string,var1 = var0
and unpacked dictionary kwargs.   substitute streaming_content for self.streaming_content.,and unpacked dict var0 substitute var2 for self var2 ,self . streaming_content = streaming_content,self . var2 = var2
"call the function color_style, substitute the result for self.style.",call function var0 substitute result for var1 ,self . style = color_style ( ),var1 = var0 ( )
"call the color_style method, substitute the result for self.style.","call var0 method, substitute result for var1 ",self . style = color_style ( ),var1 = var0 ( )
"call the function no_style, substitute the result for self.style.",call function var0 substitute result for var1 ,self . style = no_style ( ),var1 = var0 ( )
"call the function no_style, substitute it for self.style.",call function var0 substitute it for var1 ,self . style = no_style ( ),var1 = var0 ( )
substitute None for self.style_func.,substitute var0 for self var2 ,self . style_func = None,self . var2 = var0
substitute style_func for self.style_func.,substitute var0 for self var0 ,self . style_func = style_func,self . var0 = var0
substitute subject for self.subject.,substitute subject for var0 ,self . subject = subject,var0 = subject
"get the value under the 'symlinks' key of the options dictionary, substitute it for self.symlinks.","get value under var0 key of options dict, substitute it for var1 ",self . symlinks = options . get ( 'symlinks' ),var1 = options . get ( var0 )
substitute sysid for self.sysid.,substitute var0 for self var0 ,self . sysid = sysid,self . var0 = var0
call the method self.tag with 2 arguments: function_name and compile_func.,call method var0 with 2 arguments: var1 and var2 ,"self . tag ( function_name , compile_func )","var0 ( var1 , var2 )"
call the function self.tag with 2 arguments: function_name and compile_func.,call function var0 with 2 arguments: var1 and var2 ,"self . tag ( function_name , compile_func )","var0 ( var1 , var2 )"
"call the method self.tag, substitute the result for self.tagname.",call method var0 substitute result for var1 ,self . tagname = self . tag ( ),var1 = var0 ( )
update self.tags dictionary with lib.tags.,update var0 dict with var1 ,self . tags . update ( lib . tags ),var0 . update ( var1 )
"get ""_decorated_function"" attribute from func, return func if the attribute doesnt exists,","get var0 attribute from func, return func if attribute doesnt exists,","self . tags [ getattr ( func , '_decorated_function' , func ) . __name__ ] = func","self . tags [ getattr ( func , '_decorated_function' , func ) . __name__ ] = func"
substitute compile_function for self.tags dictionary value under the name key.,substitute var0 for var1 dict value under name key.,self . tags [ name ] = compile_function,var1 [ name ] = var0
self.tags is an empty dictionary.,var0 is empty dict.,self . tags = { },var0 = { }
substitute tagtype for self.tagtype.,substitute var0 for self var0 ,self . tagtype = tagtype,self . var0 = var0
substitute takes_context for self.takes_context.,substitute var0 for self var0 ,self . takes_context = takes_context,self . var0 = var0
"substitute target and expression for self.target and self.expression, respectively.",substitute target and expression for var0 and var1 respectively.,"self . target , self . expression = target , expression","var0 , var1 = target , expression"
substitute target_var for self.target_var.,substitute var0 for self var0 ,self . target_var = target_var,self . var0 = var0
substitute template for self.template.,substitute template for var0 ,self . template = template,var0 = template
call the method self.template_cache.clear.,call method self var1 clear.,self . template_cache . clear ( ),self . var1 . clear ( )
"substitute a tuple with 2 elements: template and None, for self.find_template_cache dictionary value under the key key.",substitute tuple with 2 elements: template and var0 for self var2 dict value under key key.,"self . template_cache [ key ] = ( template , None )","self . template_cache [ key ] = template , var0"
"substitute a tuple with 2 elements: template and origin, for self.find_template_cache dictionary value under the key key.","substitute tuple with 2 elements: template and origin, for self var1 dict value under key key.","self . template_cache [ key ] = ( template , origin )","self . template_cache [ key ] = template , origin"
substitute TemplateDoesNotExist for self.find_template_cache dictionary value under the key key.,substitute var0 for self var2 dict value under key key.,self . template_cache [ key ] = TemplateDoesNotExist,self . template_cache [ key ] = var0
self.template_cache is an empty dictionary.,self var1 is empty dict.,self . template_cache = { },self . var1 = { }
substitute template_dirs for self.template_dirs.,substitute var0 for self var0 ,self . template_dirs = template_dirs,self . var0 = var0
substitute template for self.template_name.,substitute template for self var1 ,self . template_name = template,self . var1 = template
substitute parser for self.template_parser.,substitute parser for self var1 ,self . template_parser = parser,self . var1 = parser
substitute template_string for self.template_string.,substitute var0 for self var0 ,self . template_string = template_string,self . var0 = var0
"get the value from the options dictionary under the key 'test_database', or False if the key dont exists, substitute it for self.test_database.","get value from options dict under key var0, or var1 if key dont exists, substitute it for var2 ","self . test_database = options . get ( 'test_database' , False )","var2 = options . get ( var0 , var1 )"
"get the length of the options, use it as a starting index for the slicing arg list, substitute it for self.test_runner.","get length of options, use it as starting index for slicing var0 list, substitute it for self var2 ",self . test_runner = arg [ len ( option ) : ],self . var2 = var0 [ len ( option ) : ]
self.test_runner is None.,self var1 is var2 ,self . test_runner = None,self . var1 = var2
substitute text for self.text.,substitute text for var0 ,self . text = text,var0 = text
substitute timeout for self.timeout.,substitute var0 for self var0 ,self . timeout = timeout,self . var0 = var0
"call the function get_default_timezone, substitute the result for self.timezone.",call function var0 substitute result for var1 ,self . timezone = get_default_timezone ( ),var1 = var0 ( )
self.timezone is None.,var0 is var1 ,self . timezone = None,var0 = var1
substitute obj.tzinfo for self.timezone.,substitute var0 for var1 ,self . timezone = obj . tzinfo,var1 = var0
substitute timezone for self.timezone.,substitute var0 for self var0 ,self . timezone = timezone,self . var0 = var0
self.to is an empty list.,var0 is empty list.,self . to = [ ],var0 = [ ]
"put to into a list, assign it to self.to.","put to into list, assign it to var0 ",self . to = list ( to ),var0 = list ( to )
"if not self.pk_field is boolean False.   remove element from kwargs dictionary under the key 'to_field', substitute it for self.to_field if it exists,","if not self var1 is boolean var2 remove element from var4 dict under key var5, substitute it for var6 if it exists,","self . to_field = kwargs . pop ( 'to_field' , None )","var6 = var4 . pop ( var5 , None )"
substitute to_field_name for self.to_field_name,substitute var0 for self.var0,self . to_field_name = to_field_name,self . var0 = var0
substitute token for self.token.,substitute token for var0 ,self . token = token,var0 = token
substitute token_type and contents for self.token_type and self.contents.,substitute var0 and contents for self var0 and var3 ,"self . token_type , self . contents = token_type , contents","self . var0 , var3 = var0 , contents"
insert token at the beginning of self.tokens.,insert token at beginning of var0 ,"self . tokens . insert ( 0 , token )","var0 . insert ( 0 , token )"
substitute mapped_tokens for self.tokens.,substitute var0 for var1 ,self . tokens = mapped_tokens,var1 = var0
substitute tokens for self.tokens.,substitute tokens for var0 ,self . tokens = tokens,var0 = tokens
substitute tok for value under the groupid key of the self.toks dictionary.,substitute var0 for value under var1 key of var2 dict.,self . toks [ groupid ] = tok,self . var0s [ var1 ] = var0
self.tokens is an empty dictionary.,var0 is empty dict.,self . toks = { },self . toks = { }
self.translate is boolean False.,var0 is boolean var1 ,self . translate = False,var0 = var1
self.translate is boolean True.,var0 is boolean var1 ,self . translate = True,var0 = var1
call the method self.unclosed_block_tag with an argument list with an element endtag.,call method self var1 with argument list with element var2 ,self . unclosed_block_tag ( [ endtag ] ),self . var1 ( [ var2 ] )
call the method self.unclosed_block_tag with an argument parse_until.,call method self var1 with argument var2 ,self . unclosed_block_tag ( parse_until ),self . var1 ( var2 )
call the method self.unget with list containing first remaining elements of chunk as an argument.,call method var0 with list containing first remaining elements of chunk as argument.,self . unget ( chunk [ remaining : ] ),var0 ( chunk [ remaining : ] )
call the method unlink on self with self.name as the argument.,call method var0 on self with var1 as argument.,self . unlink ( self . name ),self . var0 ( var1 )
"unpacked list args, unpacked dictionary kwargs.   substitute unpack_ipv4 for self.unpack_ipv4.",unpacked list var0 unpacked dict var1 substitute var3 for self var3 ,self . unpack_ipv4 = unpack_ipv4,self . var3 = var3
update self dictionary with updates.,update self dict with updates.,self . update ( updates ),self . update ( updates )
"self.upload_handlers is an instance of ImmutableList, created with 2 arguments: self.upload_handlers,",self var2 is instance of var4 created with 2 arguments: self var2 ,"self . upload_handlers = ImmutableList ( self . upload_handlers , warning = 'You cannot alter upload handlers after the upload has been processed.' )","self . var2 = var4 ( self . var2 , warning = 'You cannot alter upload handlers after the upload has been processed.' )"
"call the function iri_to_uri with an argument url, substitute the result for self.url.","call function var0 with argument url, substitute result for var1 ",self . url = iri_to_uri ( url ),var1 = var0 ( url )
substitute url_name for self.url_name.,substitute var0 for self var0 ,self . url_name = url_name,self . var0 = var0
substitute urlconf_name for self.urlconf_name.,substitute var0 for self var0 ,self . urlconf_name = urlconf_name,self . var0 = var0
substitute value under the 'use_ipv6' key of the options dictionary for self.use_ipv6.,substitute value under var0 key of options dict for var1 ,self . use_ipv6 = options . get ( 'use_ipv6' ),var1 = options . get ( var0 )
self.use_ipv6 is boolean True.,self var1 is boolean var2 ,self . use_ipv6 = True,self . var1 = var2
substitute use_l10n for self.use_l10n.,substitute var0 for self var0 ,self . use_l10n = use_l10n,self . var0 = var0
"remove the 'use_natural_primary_keys' key from the options dictionary and substitute it for self.use_natural_foreign_keys,",remove var0 key from options dict and substitute it for self var2 ,"self . use_natural_foreign_keys = options . pop ( 'use_natural_foreign_keys' , False ) or self . use_natural_keys","self . var2 = options . pop ( 'var2' , False ) or self . use_natural_keys"
"if the key doesnt exists substitute None for self.selected_fields.   remove the 'use_natural_keys' key from the options dictionary and substitute it for self.use_natural_keys,",if key doesnt exists substitute var0 for self var2 remove var4 key from options dict and substitute it for var5 ,"self . use_natural_keys = options . pop ( 'use_natural_keys' , False )","var5 = options . pop ( var4 , False )"
"if the key doesnt exists substitute self.use_natural_keys for self.use_natural_foreign_keys.   remove the 'use_natural_primary_keys' key from the options dictionary and substitute it for self.use_natural_primary_keys,",if key doesnt exists substitute self var1 for self var3 remove var5 key from options dict and substitute it for var6 ,"self . use_natural_primary_keys = options . pop ( 'use_natural_primary_keys' , False )","var6 = options . pop ( var5 , False )"
"if use_ssl is None substitute settings.EMAIL_USE_SSL for self.username, if not substitute use_ssl for self.use_ssl.",if var0 is var5 substitute settings var6 for var8 if not substitute var0 for self var0 ,self . use_ssl = settings . EMAIL_USE_SSL if use_ssl is None else use_ssl,self . var0 = settings . var6 if var0 is var5 else var0
"if use_tls is None substitute settings.EMAIL_USE_TLS for self.username, if not substitute use_tls for self.use_tls.",if var0 is var5 substitute settings var6 for var8 if not substitute var0 for self var0 ,self . use_tls = settings . EMAIL_USE_TLS if use_tls is None else use_tls,self . var0 = settings . var6 if var0 is var5 else var0
substitute use_tz for self.use_tz.,substitute var0 for self var0 ,self . use_tz = use_tz,self . var0 = var0
"if username is None substitute settings.EMAIL_HOST_USER for self.username, if not substitute username for self.username.",if var0 is var2 substitute settings var3 for self var0 if not substitute var0 for self var0 ,self . username = settings . EMAIL_HOST_USER if username is None else username,self . var0 = settings . var3 if var0 is var2 else var0
"get the value under the 'database' key of the options dictionary, substitute it for self.database.","get value under var0 key of options dict, substitute it for var1 ",self . using = options . get ( 'database' ),self . using = options . get ( var0 )
substitute val_expr for self.val_expr.,substitute var0 for self var0 ,self . val_expr = val_expr,self . var0 = var0
call the method self.validate with an argument display_num_errors set to boolean True.,call method var0 with argument var1 set to boolean var3 ,self . validate ( display_num_errors = True ),var0 ( var1 = var3 )
call the method self.validate with an argument out.,call method var0 with argument out.,self . validate ( out ),var0 ( out )
call the method self.validate with an argument value.,call method var0 with argument value.,self . validate ( value ),var0 ( value )
call the method self.validate_key with argument key.,call method self var1 with argument key.,self . validate_key ( key ),self . var1 ( key )
call the method self.validate_key with key as argument.,call method self var1 with key as argument.,self . validate_key ( key ),self . var1 ( key )
call the self.validate_key method with argument key.,call self var0 method with argument key.,self . validate_key ( key ),self . var0 ( key )
call the method self.validate_name with 2 arguments: app_name and string 'app'.,call method self var1 with 2 arguments: var2 and string var4.,"self . validate_name ( app_name , 'app' )","self . var1 ( var2 , var4 )"
call the method self.validate_name with 2 arguments name and app_or_project.,call method self var1 with 2 arguments name and var2 ,"self . validate_name ( name , app_or_project )","self . var1 ( name , var2 )"
"call the method self.validate_name with arguments project_name and string ""project"".",call method self var1 with arguments var2 and string var4.,"self . validate_name ( project_name , 'project' )","self . var1 ( var2 , 'project' )"
call the method self.validate_unique.,call method self var1 ,self . validate_unique ( ),self . var1 ( )
append self._regex_validator to self.validators.,append var0 to var1 ,self . validators . append ( self . _regex_validator ),var1 . append ( var0 )
"call the method validators.MaxLengthValidator with max_length converted into an integer, append the result to list self.validators.","call method var0 var1 with var2 converted into integer, append result to list self var0 ",self . validators . append ( validators . MaxLengthValidator ( int ( max_length ) ) ),self . var0 . append ( var0 . var1 ( int ( var2 ) ) )
"call the method validators.MaxValueValidator with max_value converted into an integer, append the result to list self.validators.","call method var0 var1 with var2 converted into integer, append result to list self var0 ",self . validators . append ( validators . MaxValueValidator ( max_value ) ),self . var0 . append ( var0 . var1 ( var2 ) )
"call the method validators.MinLengthValidator with min_length converted into an integer, append the result to list self.validators.","call method var0 var1 with var2 converted into integer, append result to list self var0 ",self . validators . append ( validators . MinLengthValidator ( int ( min_length ) ) ),self . var0 . append ( var0 . var1 ( int ( var2 ) ) )
"call the method validators.MinValueValidator with min_value converted into an integer, append the result to list self.validators.","call method var0 var1 with var2 converted into integer, append result to list self var0 ",self . validators . append ( validators . MinValueValidator ( min_value ) ),self . var0 . append ( var0 . var1 ( var2 ) )
remove self._regex_validator from self.validators.,remove var0 from var1 ,self . validators . remove ( self . _regex_validator ),var1 . remove ( var0 )
"add self.default_validators and validators, substitute the result for self.validators.","add self var1 and validators, substitute result for var2 ",self . validators = self . default_validators + validators,var2 = self . var1 + validators
append val to self.vals.,append var0 to var1 ,self . vals . append ( val ),self . var0s . append ( var0 )
self.vals is an empty list.,var0 is empty list.,self . vals = [ ],var0 = [ ]
"and unpacked dictionary kwargs.   call the function force_text with an argument self.value, substitute the result for self.value.",and unpacked dict var0 call function var2 with argument var3 substitute result for var3 ,self . value = force_text ( self . value ),var3 = var2 ( var3 )
"and unpacked dictionary kwargs.   for every v in self.value call the function force_text with an argument v, add the result to a set,","and unpacked dict var0 for every v in var2 call function var3 with argument v, add result to set,",self . value = set ( force_text ( v ) for v in self . value ),var2 = set ( var3 ( v ) for v in var2 )
substitute value for self.value.,substitute value for var0 ,self . value = value,var0 = value
substitute var for self.var.,substitute var for var0 ,self . var = var,var0 = var
substitute var_obj for self.var.,substitute var0 for var1 ,self . var = var_obj,var1 = var0
substitute var_name for self.var_name.,substitute var0 for self var0 ,self . var_name = var_name,self . var0 = var0
"substitute var1 and var2 for self.var1 and self.var2, respectively.",substitute var0 and var1 for self var0 and var2 respectively.,"self . var1 , self . var2 = var1 , var2","self . var0 , var1 = var0 , var0"
substitute variable_name for self.variable_name.,substitute var0 for self var0 ,self . variable_name = variable_name,self . var0 = var0
substitute variables for self.vars.,substitute variables for var0 ,self . vars = variables,var0 = variables
"append block_content to a string 'end', substitute the result for self.verbatim.","append var0 to string var2, substitute result for var3 ",self . verbatim = 'end%s' % block_content,var3 = 'end%s' % var0
self.verbatim is boolean False.,var0 is boolean var1 ,self . verbatim = False,var0 = var1
self.verbose_name is a string 'cache entry'.,self var1 is string var2.,self . verbose_name = 'cache entry',self . var1 = var2
self.verbose_name_plural is a string 'cache entries'.,self var1 is string var2.,self . verbose_name_plural = 'cache entries',self . var1 = var2
"get the value under the key 'exclude' of the options dictionary, convert it to an integer, substitute it for exclude.","get value under key var0 of options dict, convert it to integer, substitute it for exclude.",self . verbosity = int ( options . get ( 'verbosity' ) ),self . verbosity = int ( options . get ( 'verbosity' ) )
"get the value under the 'verbosity' key of the options dictionary, convet it to an integer and substitute for self.verbosity.",get value under var0 key of options dict var1 it to integer and substitute for var2 ,self . verbosity = int ( options . get ( 'verbosity' ) ),var2 = int ( options . get ( var0 ) )
"if not, self.hide_empty is boolean False.   get the value under the 'verbosity' key of the options dictionary, substitute it for self.verbosity.","if not, self var1 is boolean var2 get value under var4 key of options dict, substitute it for var5 ",self . verbosity = options . get ( 'verbosity' ),var5 = options . get ( var4 )
"get the value under the 'verbosity' key of the options dictionary, substitute it for self.verbosity.","get value under var0 key of options dict, substitute it for var1 ",self . verbosity = options . get ( 'verbosity' ),var1 = options . get ( var0 )
"get the value from the options dictionary under the key 'verbosity', substitute it for self.verbosity.","get value from options dict under key var0, substitute it for var1 ",self . verbosity = options . get ( 'verbosity' ),var1 = options . get ( var0 )
substitute value under the 'verbosity' key of the options dictionary for self.verbosity.,substitute value under var0 key of options dict for var1 ,self . verbosity = options [ 'verbosity' ],var1 = options [ var0 ]
"call the params.get method wit string 'VERSION' and integer 1 as arguments, substitute the result for self.version.","call params.get method wit string var0 and integer 1 as arguments, substitute result for var1 ","self . version = params . get ( 'VERSION' , 1 )","var1 = params . get ( var0 , 1 )"
"append list containing view_path to self.namespaces list, join all the elements into a string separated by character ':',","append list containing var0 to var2 list, join all elements into string separated by character var3,",self . view_name = ':' . join ( self . namespaces + [ view_path ] ),self . view_name = var3 . join ( var2 + [ var0 ] )
substitute view_name for self.view_name.,substitute var0 for self var0 ,self . view_name = view_name,self . var0 = var0
increment self.waiting_readers by 1.,increment self var1 by 1.,self . waiting_readers += 1,self . var1 += 1
self.waiting_readers is an integer 0.,self var1 is integer 0.,self . waiting_readers = 0,self . var1 = 0
self.waiting_readers is integer 0.,self var1 is integer 0.,self . waiting_readers = 0,self . var1 = 0
"decrement self.waiting_writers by integer 1,","decrement self var1 by integer 1,",self . waiting_writers -= 1,self . var1 -= 1
"increment self.waiting_writers by integer 1,","increment self var1 by integer 1,",self . waiting_writers += 1,self . var1 += 1
self.waiting_writers is an integer 0.,self var1 is integer 0.,self . waiting_writers = 0,self . var1 = 0
substitute warning for self.warning.,substitute warning for var0 ,self . warning = warning,var0 = warning
substitute self.choices for self.widgetchoices.,substitute var0 for var1 ,self . widget . choices = self . choices,self . widget . choices = var0
substitute self.choices for self.widget.choices.,substitute var0 for var1 ,self . widget . choices = self . choices,var1 = var0
substitute widget for self.widget.,substitute widget for var0 ,self . widget = widget,var0 = widget
"for every w in widgets, call the function w and append the result to a list, if w is an instance of type class,","for every w in widgets, call function w and append result to list, if w is instance of type class,","self . widgets = [ w ( ) if isinstance ( w , type ) else w for w in widgets ]","self . widgets = [ ( w ( ) if isinstance ( w , type ) else w ) for w in widgets ]"
"get 'widgets' attribute from the options object, if it exists substitute it for self.widgets, if not self.widgets is None.","get var0 attribute from options object, if it exists substitute it for var1 if not var1 is var3 ","self . widgets = getattr ( options , 'widgets' , None )","var1 = getattr ( options , var0 , var3 )"
call the method self.write with 2 arguments: s and encoding.,call method var0 with 2 arguments: s and encoding.,"self . write ( s , encoding )","var0 ( s , encoding )"
call the method self.write_items with an argument handler.,call method self var1 with argument handler.,self . write_items ( handler ),self . var1 ( handler )
call the method self.write_message with argument message.,call method self var1 with argument message.,self . write_message ( message ),self . var1 ( message )
call the method self.write_migration_files with an argument changes.,call method self var1 with argument changes.,self . write_migration_files ( changes ),self . var1 ( changes )
call the method self.write_po_file with 2 arguments: potfile and locale.,call method self var1 with 2 arguments: var2 and locale.,"self . write_po_file ( potfile , locale )","self . var1 ( var2 , locale )"
call the method self.writer_enters.,call method self var1 ,self . writer_enters ( ),self . var1 ( )
call the method self.writer_leaves.,call method self var1 ,self . writer_leaves ( ),self . var1 ( )
append list containing string '--no-location' to self.xgettext_options.,append list containing string var0 to self var2 ,self . xgettext_options = self . xgettext_options [ : ] + [ '--no-location' ],self . var2 = self . var2 [ : ] + [ var0 ]
append list containing string '--no-wrap' to self.xgettext_options.,append list containing string var0 to self var2 ,self . xgettext_options = self . xgettext_options [ : ] + [ '--no-wrap' ],self . var2 = self . var2 [ : ] + [ var0 ]
call the method self.xml.addQuickElement with an argument string 'None'.,call method self.xml var1 with argument string var2.,self . xml . addQuickElement ( 'None' ),self . xml . var1 ( var2 )
call the self.xml.addQuickElement method with 2 arguments: string 'object' and attr dictionary containing 1 entry:,call self.xml var1 method with 2 arguments: string var2 and var3 dict containing 1 entry:,"self . xml . addQuickElement ( 'object' , attrs = { 'pk' : smart_text ( value . _get_pk_val ( ) ) } )","self . xml . var1 ( var2 , var3s = { 'pk' : smart_text ( value . _get_pk_val ( ) ) } )"
"call the method field.value_to_string with an argument obj, use the result as an argument for the call the method self.xml.characters.",call method field var1 with argument var2 use result as argument for call method var3 ,self . xml . characters ( field . value_to_string ( obj ) ),var3 ( field . var1 ( var2 ) )
"call the function smart_text with argument key_value, use the result as an argument for the call to the self.xml.characters method.",call function var0 with argument var1 use result as argument for call to var3 method.,self . xml . characters ( smart_text ( key_value ) ),var3 ( var0 ( var1 ) )
"call the function smart_text with argument related_att, use the result as an argument for the call to the self.xml.characters method.",call function var0 with argument var1 use result as argument for call to var3 method.,self . xml . characters ( smart_text ( related_att ) ),var3 ( var0 ( var1 ) )
call the self.xml.endDocument method.,call self.xml var1 method.,self . xml . endDocument ( ),self . xml . var1 ( )
"call the method self.xml.endElement with an argument string ""django-objects"".",call method self.xml var1 with argument string var2.,self . xml . endElement ( 'django-objects' ),self . xml . var1 ( 'django-objects' )
call the method self.xml.endElement with an argument string 'field',call method self.xml var1 with argument string var2,self . xml . endElement ( 'field' ),self . xml . var1 ( var2 )
call the method self.xml.endElement with an argument string 'field'.,call method self.xml var1 with argument string var2.,self . xml . endElement ( 'field' ),self . xml . var1 ( var2 )
call the method self.xml.endElement with an argument string 'natural',call method self.xml var1 with argument string var2,self . xml . endElement ( 'natural' ),self . xml . var1 ( var2 )
call the method self.xml.startElement with an argument string 'natural'.,call method self.xml var1 with argument string var2.,self . xml . endElement ( 'natural' ),self . xml . endElement ( var2 )
call the method self.xml.endElement with an argument string 'object'.,call method self.xml var1 with argument string var2.,self . xml . endElement ( 'object' ),self . xml . var1 ( var2 )
call the method self.xml.startElement with an argument string 'object'.,call method self.xml var1 with argument string var2.,self . xml . endElement ( 'object' ),self . xml . endElement ( var2 )
"get the value under the 'indent' key of the options dictionary, multiply it with level, create a string containing number of  whitespaces equal to the previous result, append it to the string containing newline character, use the result as the argument for  the call to the self.xml.ignorableWhitespace method.","get value under var2 key of options dict, multiply it with level, create string containing number of var3 equal to previous result, append it to string containing var4 character, use result as argument for call to self.xml var6 method.","self . xml . ignorableWhitespace ( '\n' + ' ' * self . options . get ( 'indent' , None ) * level )","self.xml.var6('\n' + 'var0'var0*var0self.options.get(var2,var0None) *var0level)"
"options dictionary, if the key doesnt exists use settings.DEFAULT_CHARSET instead.   call the self.xml.startDocument method.","options dict, if key doesnt exists use settings var0 instead var1 call self.xml var2 method.",self . xml . startDocument ( ),self . xml . var2 ( )
"call the method self.xml.startElement with 2 arguments, string ""django-objects"" and a dictionary containing 1 element: ""1.0"" for ""version"".","call method self.xml var1 with 2 arguments, string var2 and dict containing 1 element: var3 for var4.","self . xml . startElement ( 'django-objects' , { 'version' : '1.0' } )","self . xml . var1 ( 'django-objects' , { 'version' : '1.0' } )"
"call the method self.xml.startElement with 2 arguments: string 'field' and dictionary containing 3 entries: field.name for 'name',","call method self.xml var1 with 2 arguments: string var2 and dict containing 3 entries: var3 for var4,","self . xml . startElement ( 'field' , { 'name' : field . name , 'rel' : field . rel . __class__ . __name__ , 'to' : smart_text ( field . rel . to . _meta ) , } )","self . xml . var1 ( var2 , { 'name' : var3 , 'rel' : field . rel . __class__ . __name__ , 'to' : smart_text ( field . rel . to . _meta ) } )"
"call the method self.xml.startElement with 2 arguments: string 'field' and a dictionary containing 2 entries: field.name for 'name',","call method self.xml var1 with 2 arguments: string var2 and dict containing 2 entries: var3 for var4,","self . xml . startElement ( 'field' , { 'name' : field . name , 'type' : field . get_internal_type ( ) } )","self . xml . var1 ( var2 , { 'name' : var3 , 'type' : field . get_internal_type ( ) } )"
call the method self.xml.startElement with arguments string 'natural' and an empty dictionary.,call method self.xml var1 with arguments string var2 and empty dict.,"self . xml . startElement ( 'natural' , { } )","self . xml . var1 ( var2 , { } )"
call the method self.xml.startElement with argument string 'natural' and an empty dictionary.,call method self.xml var1 with argument string var2 and empty dict.,"self . xml . startElement ( 'natural' , { } )","self . xml . var1 ( var2 , { } )"
call the method self.xml.startElement with argument string 'object' and an empty dictionary.,call method self.xml var1 with argument string var2 and empty dict.,"self . xml . startElement ( 'object' , { } )","self . xml . var1 ( var2 , { } )"
call the method self.xml.startElement with arguments string 'object' and attrs.,call method self.xml var1 with arguments string var2 and var3 ,"self . xml . startElement ( 'object' , attrs )","self . xml . var1 ( var2 , var3 )"
self.xml is a instance of SimplerXMLGenerator class created with 2 arguments: self.stream and value under the 'encoding' key of the,var0 is instance of var1 class created with 2 arguments: var3 and value under var4 key of the,"self . xml = SimplerXMLGenerator ( self . stream , self . options . get ( 'encoding' , settings . DEFAULT_CHARSET ) )","var0 = var1 ( var3 , self . options . get ( var4 , settings . DEFAULT_CHARSET ) )"
self.year_none_value is a tuple containing 2 elements: integer 0 and first element of empty_label.,self var1 is tuple containing 2 elements: integer 0 and first element of var2 ,"self . year_none_value = ( 0 , empty_label [ 0 ] )","self . var1 = 0 , var2 [ 0 ]"
substitute self.none_value for self.year_none_value.,substitute self var1 for self var3 ,self . year_none_value = self . none_value,self . year_var1 = self . var1
self.years is list containing 10 successive integers from this_year.,var0 is list containing 10 successive integers from var1 ,"self . years = range ( this_year , this_year + 10 )","var0 = range ( var1 , var1 + 10 )"
substitute years for self.years.,substitute years for var0 ,self . years = years,var0 = years
substitute tup for elements of self.,substitute tup for elements of self.,self [ : ] = tup,self [ : ] = tup
"and unpacked dictionary kwargs.   join into a string permitted_methods, separated by string ', ', substitute it for value under the 'Allow' key of the self dictionary.","and unpacked dict var0 join into string var2 separated by string var4, substitute it for value under var5 key of self dict.","self [ 'Allow' ] = ', ' . join ( permitted_methods )",self [ 'Allow' ] = var4 . join ( var2 )
"if not, self.reason_phrase is a string 'UNKNOWN STATUS CODE'.   substitute content_type for value under the 'Content-Type' key of the self dictionary.","if not, self var1 is string var2 var3 substitute var4 for value under var6 key of self dict.",self [ 'Content-Type' ] = content_type,self [ var6 ] = var4
"and unpacked dictionary kwargs.   call the function iri_to_uri with an argument redirect_to, substitute the result for the value under the 'Location' key of the self dictionary.",and unpacked dict var0 call function var2 with argument var3 substitute result for value under var5 key of self dict.,self [ 'Location' ] = iri_to_uri ( redirect_to ),self [ var5 ] = var2 ( var3 )
substitute v for value under the k key of self dictionary.,substitute v for value under k key of self dict.,self [ k ] = v,self [ k ] = v
substitute default for value under the key key of self dictionary.,substitute default for value under key key of self dict.,self [ key ] = default,self [ key ] = default
substitute result for self dictionary under key key.,substitute result for self dict under key key.,self [ key ] = result,self [ key ] = result
substitute result for value under key key of self dictionary.,substitute result for value under key key of self dict.,self [ key ] = result,self [ key ] = result
"call the method tuple.__new__ with 3 arguments: cls, unpacked list args and unpacked dictionary kwargs, substitute the result for self.","call method var0 with 3 arguments: cls, unpacked list var1 and unpacked dict var2 substitute result for self.","self = tuple . __new__ ( cls , * args , ** kwargs )","self = var0 ( cls , * var1 , ** var2 )"
"call the method self._send with argument message, substitute the result for sent.","call method var0 with argument message, substitute result for sent.",sent = self . _send ( message ),sent = var0 ( message )
"append ')' to third element of bit, substitute it for sentinal.","append ')' to third element of bit, substitute it for sentinal.",sentinal = bit [ 2 ] + ')',sentinal = bit [ 2 ] + ')'
"remove 'sep' key from the kwargs dictionary, if it exists substitute it for sep, if not sep is None.","remove var0 key from var1 dict, if it exists substitute it for sep, if not sep is var2 ","sep = kwargs . pop ( 'sep' , None )","sep = var1 . pop ( var0 , var2 )"
"split first and second element of hextet into parts by ':', sum their lengths, substitute the result for sep.","split first and second element of var0 into parts by var1, sum var2 lengths, substitute result for sep.",sep = len ( hextet [ 0 ] . split ( ':' ) ) + len ( hextet [ 1 ] . split ( ':' ) ),sep = len ( var0 [ 0 ] . split ( var1 ) ) + len ( var0 [ 1 ] . split ( var1 ) )
substitute space for sep.,substitute space for sep.,sep = space,sep = space
"call the method connection.introspection.sequence_list if reset_sequences is true, substitute the result for seqs, if not, seqs is an empty tuple.","call method connection.introspection var1 if var2 is true, substitute result for var4 if not var4 is empty tuple.",seqs = connection . introspection . sequence_list ( ) if reset_sequences else ( ),var4 = connection . introspection . var1 ( ) if var2 else ( )
"where '%s' is replaced with token.contents.   call the method parser.compile_filter with an argument, in_index incremented by one, and used to index parser.compile_filter,","var0 var1 is replaced with var2 call method parser var6 with argument var8 var10 by one, and used to index parser var6 ",sequence = parser . compile_filter ( bits [ in_index + 1 ] ),sequence = parser . var6 ( bits [ var8 + 1 ] )
"call the method connection.ops.sequence_reset_sql with 2 arguments: return value of the no_style and self.models,",call method connection.ops var1 with 2 arguments: return value of var2 and var4 ,"sequence_sql = connection . ops . sequence_reset_sql ( no_style ( ) , self . models )","sequence_sql = connection . ops . var1 ( var2 ( ) , var4 )"
ser_fmt is None.,var0 is var1 ,ser_fmt = None,var0 = var1
substitute the last element of parts for ser_fmt.,substitute last element of parts for var0 ,ser_fmt = parts [ - 1 ],var0 = parts [ - 1 ]
"otherwise cmp_fmts is a list containing cmp_fmt.   call the method serializers.get_public_serializer_formats, substitute the result for ser_fmts if ser_fmt is None,",otherwise var0 is list containing var1 call method serializers var6 substitute result for var7 if var8 is var11 ,ser_fmts = serializers . get_public_serializer_formats ( ) if ser_fmt is None else [ ser_fmt ],var7 = serializers . var6 ( ) if var8 is var11 else [ var8 ]
call the method serializers.get_serializer with an argument format.,call method serializers var1 with argument format.,serializers . get_serializer ( format ),serializers . var1 ( format )
"call the method serializers.serialize with 6 arguments: format, result of the function get_objects, indent set to indent,","call method var0 with 6 arguments: format, result of function var1 indent set to indent,","serializers . serialize ( format , get_objects ( ) , indent = indent , use_natural_foreign_keys = use_natural_foreign_keys , use_natural_primary_keys = use_natural_primary_keys , stream = stream or self . stdout )","var0 ( format , var1 ( ) , indent = indent , use_natural_foreign_keys = use_natural_foreign_keys , use_natural_primary_keys = use_natural_primary_keys , stream = stream or self . stdout )"
substitute module for the value under the format key of the serializers dictionary.,substitute module for value under format key of var0 dict.,serializers [ format ] = module,var0 [ format ] = module
serializers is an empty dictionary.,var0 is empty dict.,serializers = { },var0 = { }
server_address is a tuple containing 2 initial elements: addr and port.,var0 is tuple containing 2 initial elements: var1 and port.,"server_address = ( addr , port )","var0 = var1 , port"
"convert the value under the 'SERVER_NAME' key of the self.META dictionary to a string, substitute result for server_port.","convert value under var0 key of self var1 dict to string, substitute result for var3 ",server_port = str ( self . META [ 'SERVER_PORT' ] ),var3 = str ( self . var1 [ 'SERVER_PORT' ] )
"call the get_script_name function with environ as argument, use the result as an argument for call to the set_script_prefix function.","call var0 function with environ as argument, use result as argument for call to var1 function.",set_script_prefix ( get_script_name ( environ ) ),var1 ( var0 ( environ ) )
set attr.name attribute of the _MovedItemst object to attr.,set var0 attribute of var2 object to var1 ,"setattr ( _MovedItems , attr . name , attr )","setattr ( _MovedItems , var0 , var1 )"
set move.name attribute of the _MovedItems to move.,set var0 attribute of var1 to move.,"setattr ( _MovedItems , move . name , move )","setattr ( var1 , var0 , move )"
"formated with 3 elements: class_name, old_method_name and new_method_name, deprecation_warning and integer 2.   set new_method_name attribute of the base object to old_method.",formated with 3 elements: var0 var1 and var5 var9 and integer 2 var11 set var5 attribute of base object to var2 ,"setattr ( base , new_method_name , old_method )","setattr ( base , var5 , var2 )"
set old_method_name attribute of the base object to the result of the function wrapper called with an argument new_method.,set var0 attribute of base object to result of function wrapper called with argument var1 ,"setattr ( base , old_method_name , wrapper ( new_method ) )","setattr ( base , var0 , wrapper ( var1 ) )"
set old_method_name attribute of the base object to the result of the function wrapper called with an argument old_method.,set var0 attribute of base object to result of function wrapper called with argument var1 ,"setattr ( base , old_method_name , wrapper ( old_method ) )","setattr ( base , var0 , wrapper ( var1 ) )"
set k attribute of cls object to meth.,set k attribute of cls object to meth.,"setattr ( cls , k , meth )","setattr ( cls , k , meth )"
set opname attribute of cls object to opfunc.,set var0 attribute of cls object to var1 ,"setattr ( cls , opname , opfunc )","setattr ( cls , var0 , var1 )"
set filter_func objec attr attribute to value.,set var0 var1 var2 attribute to value.,"setattr ( filter_func , attr , value )","setattr ( var0 , var2 , value )"
set filter_func._decorated_function objects attr attribute to value.,set var0 _decorated_function objects var2 attribute to value.,"setattr ( filter_func . _decorated_function , attr , value )","setattr ( var0 . _decorated_function , var2 , value )"
"use the result as an key to get the value of the form.data dictionary, assign it value None.   use return value of the self.fk.get_attname as the name of the attribute of form.instance object to set, set it to self.instance.pk.","use result as key to get value of form.data dict, assign it value var0 use return value of self.fk var2 as name of attribute of var3 object to set, set it to var4 ","setattr ( form . instance , self . fk . get_attname ( ) , self . instance . pk )","setattr ( var3 , self . fk . var2 ( ) , var4 )"
set attr.name attribute of the Module_six_moves_urllib_error object to attr.,set var0 attribute of var2 object to var1 ,"setattr ( Module_six_moves_urllib_error , attr . name , attr )","setattr ( var2 , var0 , var1 )"
set attr.name attribute of the Module_six_moves_urllib_parse object to attr.,set var0 attribute of var2 object to var1 ,"setattr ( Module_six_moves_urllib_parse , attr . name , attr )","setattr ( var2 , var0 , var1 )"
set attr.name attribute of the Module_six_moves_urllib_request object to attr.,set var0 attribute of var2 object to var1 ,"setattr ( Module_six_moves_urllib_request , attr . name , attr )","setattr ( var2 , var0 , var1 )"
set attr.name attribute of Module_six_moves_urllib_response object to attr.,set var0 attribute of var2 object to var1 ,"setattr ( Module_six_moves_urllib_response , attr . name , attr )","setattr ( var2 , var0 , var1 )"
set attr.name attribute of Module_six_moves_urllib_robotparser object to attr.,set var0 attribute of var2 object to var1 ,"setattr ( Module_six_moves_urllib_robotparser , attr . name , attr )","setattr ( var2 , var0 , var1 )"
"get attribute 'pk' of the pk_value object, if it doesnt exists use pk_value, set to it self.fk.get_attname return value attribute,","get attribute var0 of var1 object, if it doesnt exists use var1 set to it self.fk var5 return value attribute,","setattr ( obj , self . fk . get_attname ( ) , getattr ( pk_value , 'pk' , pk_value ) )","setattr ( obj , self . fk . var5 ( ) , getattr ( var1 , var0 , var1 ) )"
set self.name attribute of the obj object to result.,set var0 attribute of var1 object to result.,"setattr ( obj , self . name , result )","setattr ( var1 , var0 , result )"
set result attribute name to value value.,set result attribute name to value value.,"setattr ( result , name , value )","setattr ( result , name , value )"
set attr attribute of the self object to value.,set var0 attribute of self object to value.,"setattr ( self , attr , value )","setattr ( self , var0 , value )"
set real_name attribute of the self object to value of real_name attribute of trans object.,set var0 attribute of self object to value of var0 attribute of var2 object.,"setattr ( self , real_name , getattr ( trans , real_name ) )","setattr ( self , var0 , getattr ( var2 , var0 ) )"
set name attribute of self._wrapped object to value.,set name attribute of var0 object to value.,"setattr ( self . _wrapped , name , value )","setattr ( var0 , name , value )"
set accessor_name of the self.object to object_list.,set var0 of var1 to var2 ,"setattr ( self . object , accessor_name , object_list )","setattr ( var1 , var0 , var2 )"
sets the role attribute of the style object to the value of the call to the termcolors.make_style function with dictionary format as an argument.,sets role attribute of style object to value of call to termcolors var1 function with dict format as argument.,"setattr ( style , role , termcolors . make_style ( ** format ) )","setattr ( style , role , termcolors . var1 ( ** format ) )"
call the method settings._setup.,call method var0 ,settings . _setup ( ),var0 ( )
settings.BASE_DIR.,settings var0 ,settings . BASE_DIR,settings . var0
call the method settings.configure.,call method var0 ,settings . configure ( ),var0 ( )
call the method settings.configure with an argument USE_I18N set to boolean True.,call method var0 with argument var1 set to boolean var2 ,settings . configure ( USE_I18N = True ),var0 ( var1 = var2 )
call settings.INSTALLED_APPS.,call settings var0 ,settings . INSTALLED_APPS,settings . var0
call the settings.INSTALLED_APPS.,call settings var0 ,settings . INSTALLED_APPS,settings . var0
settings.SITE_ID.,settings var0 ,settings . SITE_ID,settings . var0
settings.USE_I18N is boolean True.,settings var0 is boolean var1 ,settings . USE_I18N = True,settings . var0 = var1
"get the value under the settings.__module__ key of the sys.modules dictionary,","get value under var0 key of var1 dict,",settingsfile = upath ( sys . modules [ settings . __module__ ] . __file__ ),settingsfile = upath ( var1 [ var0 ] . __file__ )
add to the string sh the concatenation of '\\x' and the string str encoded in hexadecimal,add to string var1 concatenation of var2 and string var0 encoded in hexadecimal,sh += '\\x' + str . encode ( 'hex' ),var1 += var2 + var0 . encode ( 'hex' )
"concatenate '\\x' and the string str encoded in hexadecimal, then add it to sh","concatenate var0 and string var1 encoded in hexadecimal, then add it to var2",sh += '\\x' + str . encode ( 'hex' ),var2 += var0 + var1 . encode ( 'hex' )
"append to the variable shell the hexadecimal value of the variable c followed by a ', '",append to variable shell hexadecimal value of variable c followed by var0,"shell += '%02x, ' % c","shell += '%02x, ' % c"
"store in the variable shell the hexadecimal values of temp separated by the string '0x' and remove any trailing ','",store in variable shell hexadecimal values of temp separated by string var0 and remove any trailing var1,"shell = '' . join ( '0x{:02x}, ' . format ( z ) for z in temp ) . rstrip ( ', ' )","shell = '' . join ( '0x{:02x}, ' . format ( z ) for z in temp ) . rstrip ( ', ' )"
assign the variable shell the bytearray hexadecimal values read from file f stripped from all whitespaces and remove all occurences of '\\t',assign variable shell var0 hexadecimal values read from file f stripped from all var1 and remove all var2 of var3,"shell = bytearray . fromhex ( f . read ( ) . strip ( ) . replace ( '\\t' , '' ) )","shell = var0 . fromhex ( f . read ( ) . strip ( ) . replace ( '\\t' , '' ) )"
"shell is an instance of IPShell class, created with an argument argv as an empty list.","shell is instance of var0 class, created with argument var1 as empty list.",shell = IPShell ( argv = [ ] ),shell = var0 ( var1 = [ ] )
shellrot is the sum of x and rot modulo 256,var0 is sum of x and rot var1 256,shell_rot = ( x + rot ) % 256,shell_rot = ( x + rot ) % 256
"add ""0x"" to every 2 characters of the string shell",add var0 to every 2 characters of string shell,"shell = '0x' + '0x' . join ( a + b for a , b in zip ( shell [ : : 2 ] , shell [ 1 : : 2 ] ) )","shell = '0x' + '0x' . join ( a + b for a , b in zip ( shell [ : : 2 ] , shell [ 1 : : 2 ] ) )"
"add ""0x"" to every 2 characters of the variable shell",add var0 to every 2 characters of variable shell,"shell = '0x' + '0x' . join ( a + b for a , b in zip ( shell [ : : 2 ] , shell [ 1 : : 2 ] ) )","shell = '0x' + '0x' . join ( a + b for a , b in zip ( shell [ : : 2 ] , shell [ 1 : : 2 ] ) )"
"concatenate '\\x' and the string byte encoded in hexadecimal, then append it to the string shellcode","concatenate var0 and string byte encoded in hexadecimal, then append it to string var1",shellcode += '\\x' + byte . encode ( 'hex' ),var1 += var0 + byte . encode ( 'hex' )
append to the string shellcode the concatenation of '\\x' and the string value encoded in hexadecimal,append to string var0 concatenation of var1 and string value encoded in hexadecimal,shellcode += '\\x' + value . encode ( 'hex' ),var0 += var1 + value . encode ( 'hex' )
"concatenate the string '\\x' and the string value encoded in hexadecimal, then add it to shellcode","concatenate string var0 and string value encoded in hexadecimal, then add it to var1",shellcode += '\\x' + value . encode ( 'hex' ),var1 += var0 + value . encode ( 'hex' )
"shellcode is a tuple containing the string ""\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68""",var0 is tuple containing string var1,shellcode = ( '\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68' ),var0 = ( '\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68' )
"shellcode is a string ""\x31\xc0\x50\x89\xe2\x68\x62\x61\x73\x68\x68\x62\x69\x6e\x2f\x68\x2f\x2f\x2f\x2f\x89\xe3\x50\x53\x89\xe1\xb0\x0b\xcd\x80""",var0 is string var1,shellcode = ( '\x31\xc0\x50\x89\xe2\x68\x62\x61\x73\x68\x68\x62\x69\x6e\x2f\x68\x2f\x2f\x2f\x2f\x89\xe3\x50\x53\x89\xe1\xb0\x0b\xcd\x80' ),var0 = ( '\x31\xc0\x50\x89\xe2\x68\x62\x61\x73\x68\x68\x62\x69\x6e\x2f\x68\x2f\x2f\x2f\x2f\x89\xe3\x50\x53\x89\xe1\xb0\x0b\xcd\x80' )
reverse the variable shellcode,reverse variable var0,shellcode = shellcode [ : : - 1 ],var0 = var0 [ : : - 1 ]
remove the first 12 items from shellcode,remove first 12 items from var0,shellcode = shellcode [ 12 : : ],var0 = var0 [ 12 : ]
update the variable shellcode by removing the first 12 elements from shellcode,update variable var0 by removing first 12 elements from var0,shellcode = shellcode [ 12 : : ],var0 = var0 [ 12 : ]
remove the first 8 items from shellcode,remove first 8 items from var0,shellcode = shellcode [ 8 : : ],var0 = var0 [ 8 : ]
Declare a variable shellcode and add the string '\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x89\xe2\x53\x89\xe1\xb0\x0b\xcd\x80' into it,Declare variable var0 and add string var1 into it,shellcode = '\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x89\xe2\x53\x89\xe1\xb0\x0b\xcd\x80',var0 = '\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x89\xe2\x53\x89\xe1\xb0\x0b\xcd\x80'
store in the variable shellcode_encoded_hex the hexadecimal values of shellcode_encoded separated by the string '  ',store in variable var0 hexadecimal values of var1 separated by string var4,shellcode_encoded_hex = '' . join ( ' {:02x}' . format ( x ) for x in shellcode_encoded ),var0 = '' . join ( ' {:02x}' . format ( x ) for x in var1 )
store in the variable shellcode_encoded_hex the hexadecimal values of shellcode_encoded separated by the string '--',store in variable var0 hexadecimal values of var1 separated by string var4,shellcode_encoded_hex = '' . join ( '--{:02x}' . format ( x ) for x in shellcode_encoded ),var0 = '' . join ( '--{:02x}' . format ( x ) for x in var1 )
store in the variable shellcode_encoded_hex the hexadecimal values of shellcode_encoded separated by the string '\\x',store in variable var0 hexadecimal values of var1 separated by string var4,shellcode_encoded_hex = '' . join ( '\\x{:02x}' . format ( val ) for val in shellcode_encoded ),var0 = '' . join ( '\\x{:02x}' . format ( val ) for val in var1 )
store in the variable shellcode_encoded_hex the hexadecimal values of shellcode_encoded separated by the string '\\x',store in variable var0 hexadecimal values of var1 separated by string var4,shellcode_encoded_hex = '' . join ( '\\x{:02x}' . format ( z ) for z in shellcode_encoded ),var0 = '' . join ( '\\x{:02x}' . format ( z ) for z in var1 )
"store in the variable shellcode_encoded_nasm the hexadecimal values of shellcode_encoded separated by the string '0x' and remove any trailing ','",store in variable var0 hexadecimal values of var1 separated by string var3 and remove any trailing var4,"shellcode_encoded_nasm = '' . join ( '0x{:02x}, ' . format ( s ) for s in shellcode_encoded ) . rstrip ( ', ' )","var0 = '' . join ( '0x{:02x}, ' . format ( s ) for s in var1 ) . rstrip ( ', ' )"
store in the variable shellcode_encoded_nasm the hexadecimal values of shellcode_encoded separated by the string '0x' and remove any trailing '?',store in variable var0 hexadecimal values of var1 separated by string var3 and remove any trailing var4?var4,"shellcode_encoded_nasm = '' . join ( '0x{:02x}, ' . format ( x ) for x in shellcode_encoded ) . rstrip ( '?' )","var0 = var4.join('0x{:02x}, var4.format(x) for x in var1).rstrip(var4?var4)"
"assign the variable shellcode_encoded_nasm the hexadecimal values of z separated by the string '0x' and remove any trailing ','",assign variable var0 hexadecimal values of z separated by string var1 and remove any trailing var2,"shellcode_encoded_nasm = '' . join ( '0x{:02x}, ' . format ( x ) for x in z ) . rstrip ( ', ' )","var0 = '' . join ( '0x{:02x}, ' . format ( x ) for x in z ) . rstrip ( ', ' )"
append to the variable shellcode_encoded the value of shellcode_original at index i+2 xor the variable r,append to variable var0 value of var1 at index i+2 xor variable r,shellcode_encoded . append ( shellcode_original [ i + 2 ] ^ r ),var0 . append ( var1 [ i + 2 ] ^ r )
append to the variable shellcode_encoded the value of shellcode_original at index i+3 xor the variable r,append to variable var0 value of var1 at index var3 xor variable r,shellcode_encoded . append ( shellcode_original [ i + 3 ] ^ r ),var0 . append ( var1 [ i + 3 ] ^ r )
assign the variable shellcode_original the bytearray hexadecimal values read from file f stripped from all whitespaces and replace all '\\n' with '',assign variable var0 var2 hexadecimal values read from file f stripped from all var3 and replace all var4 with var5 ,"shellcode_original = bytearray.fromhex(f.read().strip().replace('\\n, ''))","var0 = var2.fromhex(f.read().strip().replace('\\n, var5))"
assign the variable shellcode_original the bytearray hexadecimal values read from file f stripped from all whitespaces and remove all occurences of '\\n',assign variable var0 var2 hexadecimal values read from file f stripped from all var3 and remove all var4 of var5,"shellcode_original = bytearray . fromhex ( f . read ( ) . strip ( ) . replace ( '\\n' , '' ) )","var0 = var2 . fromhex ( f . read ( ) . strip ( ) . replace ( '\\n' , '' ) )"
assign the variable shellcode_original the bytearray hexadecimal values read from file f stripped from all whitespaces and replace all '\\t' with '',assign variable var0 var2 hexadecimal values read from file f stripped from all var3 and replace all var4 with var5 ,"shellcode_original = bytearray . fromhex ( f . read ( ) . strip ( ) . replace ( '\\t' , '' ) )","var0 = var2 . fromhex ( f . read ( ) . strip ( ) . replace ( '\\t' , '' ) )"
assign the variable shellcode_original the bytearray hexadecimal values read from file f stripped from all whitespaces and remove all occurences of '\\t',assign variable var0 var2 hexadecimal values read from file f stripped from all var3 and remove all var4 of var5,"shellcode_original = bytearray . fromhex ( f . read ( ) . strip ( ) . replace ( '\\t' , '' ) )","var0 = var2 . fromhex ( f . read ( ) . strip ( ) . replace ( '\\t' , '' ) )"
assign the variable shellcode_original the bytearray hexadecimal values read from file f stripped from all whitespaces and replace all '\\x' with '',assign variable var0 var2 hexadecimal values read from file f stripped from all var3 and replace all var4 with var5 ,"shellcode_original = bytearray . fromhex ( f . read ( ) . strip ( ) . replace ( '\\x' , '' ) )","var0 = var2 . fromhex ( f . read ( ) . strip ( ) . replace ( '\\x' , '' ) )"
assign the variable shellcode_original the bytearray hexadecimal values read from file f stripped from all whitespaces and remove all occurences of '\\x',assign variable var0 var2 hexadecimal values read from file f stripped from all var3 and remove all var4 of var5,"shellcode_original = bytearray . fromhex ( f . read ( ) . strip ( ) . replace ( '\\x' , '' ) )","var0 = var2 . fromhex ( f . read ( ) . strip ( ) . replace ( '\\x' , '' ) )"
read the file f as a bytearray from hexadecimal values and store the result in shellcode_original,read file f as var0 from hexadecimal values and store result in var1,shellcode_original = bytearray . fromhex ( f . read ( ) ),var1 = var0 . fromhex ( f . read ( ) )
assign the variable shellcode_original the bytearray hexadecimal values read from file f,assign variable var0 var1 hexadecimal values read from file f,shellcode_original = bytearray . fromhex ( f . read ( ) ),var0 = var1 . fromhex ( f . read ( ) )
store in the variable shellcode_original the bytearray hexadecimal values read from file f,store in variable var0 var1 hexadecimal values read from file f,shellcode_original = bytearray . fromhex ( f . read ( ) ),var0 = var1 . fromhex ( f . read ( ) )
assign the variable shellcode_original_hex the hexadecimal values of shellcode_original separated by the string '\\n',assign variable var0 hexadecimal values of var1 separated by string var4,shellcode_original_hex = '' . join ( '\\n{:02x}' . format ( x ) for x in shellcode_original ),var0 = '' . join ( '\\n{:02x}' . format ( x ) for x in var1 )
assign the variable shellcode_original_hex the hexadecimal values of f separated by the string '\\x',assign variable var0 hexadecimal values of f separated by string var2,shellcode_original_hex = '' . join ( '\\x{:02x}' . format ( x ) for x in f ),var0 = '' . join ( '\\x{:02x}' . format ( x ) for x in f )
shellcode_original_hex is the hexadecimal values of shellcode_original separated by the string '\\x',var1 is hexadecimal values of var0 separated by string var3,shellcode_original_hex = '' . join ( '\\x{:02x}' . format ( x ) for x in shellcode_original ),var1 = '' . join ( '\\x{:02x}' . format ( x ) for x in var0 )
append to encoded a bytes object containing the value val3 packed according to the format string unsigned char,append to encoded bytes object containing value var0 packed according to format string unsigned char,"shellcode . append ( struct . pack ( 'B' , val3 ) )","shellcode . append ( struct . pack ( 'B' , var0 ) )"
append 0x60 to shellcode1,append var0 to var1,shellcode1 . append ( 0x60 ),var1 . append ( var0 )
append 0x80 to shellcode2,append var0 to var1,shellcode2 . append ( 0x80 ),var1 . append ( var0 )
append 0x70 to shellcode3,append 0x70 to var0,shellcode3 . append ( 0x70 ),var0 . append ( 112 )
append 0x50 to shellcode4,append var0 to var1,shellcode4 . append ( 0x50 ),var1 . append ( var0 )
"get the value under the 'traceback' key of the options dictionary, substitute the result for traceback.","get value under var0 key of options dict, substitute result for traceback.",show_traceback = options . get ( 'traceback' ),show_traceback = options . get ( var0 )
add plan_node to the shown set.,add var0 to shown set.,shown . add ( plan_node ),shown . add ( var0 )
shown is an empty set.,shown is empty set.,shown = set ( ),shown = set ( )
"replace '%r' from string '\nServer stopped.\nNote that the test database, %r, has not been deleted. You can explore it on your own.',  with db_name, substitute it for shutdown_message.","replace '%r' from string '\nServer stopped.\nNote that the test database, %r, has not been deleted. You can explore it on your own.',  with db_name, substitute it for shutdown_message.","shutdown_message = '\nServer stopped.\nNote that the test database, %r, has not been deleted. You can explore it on your own.' % db_name","shutdown_message = '\nServer stopped.\nNote that the test database, %r, has not been deleted. You can explore it on your own.' % db_name"
"get the value under the 'shutdown_message' key of the options dictionary, if it exists substitute it for shutdown_message,","get value under var0 key of options dict, if it exists substitute it for shutdown_message,","shutdown_message = options . get ( 'shutdown_message' , '' )","shutdown_message = options . get ( var0 , '' )"
call the method shutil.copyfileobj with 2 arguments: extracted and outfile.,call method var0 with 2 arguments: extracted and var1 ,"shutil . copyfileobj ( extracted , outfile )","var0 ( extracted , var1 )"
call the function shutil.copymode with arguments old_path and new_path.,call function var0 with arguments var1 and var2 ,"shutil . copymode ( old_path , new_path )","var0 ( var1 , var2 )"
call the function shutil.move with arguments the_path and guessed_path.,call function var0 with arguments var1 and var2 ,"shutil . move ( the_path , guessed_path )","var0 ( var1 , var2 )"
call the function shutil.rmtree with 2 arguments: path_to_remove and onerror set to rmtree_errorhandler.,call function var0 with 2 arguments: var1 and var2 set to var3 ,"shutil . rmtree ( path_to_remove , onerror = rmtree_errorhandler )","var0 ( var1 , var2 = var3 )"
"open '/dev/null' file in read mode, substitute the result for si.","open var0 file in read mode, substitute result for si.","si = open ( '/dev/null' , 'r' )","si = open ( var0 , 'r' )"
"call the method d.quantize with 3 arguments: exp, ROUND_HALF_UP and instance of Context class created with prec as prec,",call method var0 with 3 arguments: var1 var2 and instance of var3 class created with var4 as var4 ,"sign , digits , exponent = d . quantize ( exp , ROUND_HALF_UP , Context ( prec = prec ) ) . as_tuple ( )","sign , digits , var1onent = var0 ( var1 , var2 , var3 ( var4 = var4 ) ) . as_tuple ( )"
"call the method value.as_tuple, assign the result to sign, digittuple and exponent, respectively.","call method value var1 assign result to sign var2 and exponent, respectively.","sign , digittuple , exponent = value . as_tuple ( )","sign , var2 , exponent = value . var1 ( )"
sign is a string '-'.,sign is string var0.,sign = '-',sign = var0
"if offset is smaller than integer 0, sign is '-', otherwise sign is '+'.","if offset is smaller var0 integer 0, sign is var1, otherwise sign is var2.",sign = '-' if offset < 0 else '+',sign = var1 if offset < 0 else '+'
"if offset is lesser than integer 0, sign is set to '-', otherwise sign is '+',","if offset is lesser var0 integer 0, sign is set to var1, otherwise sign is var2,",sign = '-' if offset < 0 else '+',sign = var1 if offset < 0 else '+'
"if seconds smaller than integer 0, sign is '-', otherwise sign is '+',","if seconds smaller var0 integer 0, sign is var1, otherwise sign is var2,",sign = '-' if seconds < 0 else '+',sign = var1 if seconds < 0 else '+'
return the result.   sign is an empty string.,return result var0 sign is empty string.,sign = '',sign = ''
"call the method signal.signal with signal.SIGTTOU and old_handler, as arguments.",call method var0 with signal var1 and var2 as arguments.,"signal . signal ( signal . SIGTTOU , old_handler )","var0 ( signal . var1 , var2 )"
"call the method signals.got_request_exception.send with the sender set to the type of this class, and request set to request as the arguments.","call method signals var1 send with sender set to type of var2 class, and request set to request as arguments.","signals . got_request_exception . send ( sender = self . __class__ , request = request )","signals . var1 . send ( sender = self . __class__ , request = request )"
call the method signals.got_request_exception.send with sender set to type of the self class instance and request set to request.,call method signals var1 send with sender set to type of self class instance and request set to request.,"signals . got_request_exception . send ( sender = self . __class__ , request = request )","signals . var1 . send ( sender = self . __class__ , request = request )"
call the signals.got_request_exception.send method with sender set to type of the self class instance and request set to request.,call signals var1 send method with sender set to type of self class instance and request set to request.,"signals . got_request_exception . send ( sender = self . __class__ , request = request )","signals . var1 . send ( sender = self . __class__ , request = request )"
call the function signals.request_finished.connect with argument cache.close.,call function signals var1 connect with argument var2 ,signals . request_finished . connect ( cache . close ),signals . var1 . connect ( var2 )
call the function signals.request_finished.connect with argument close_caches.,call function signals var1 connect with argument var2 ,signals . request_finished . connect ( close_caches ),signals . var1 . connect ( var2 )
call the method signals.request_finished.send with an argument sender set to self._handler_class.,call method signals var1 send with argument sender set to var2 ,signals . request_finished . send ( sender = self . _handler_class ),signals . var1 . send ( sender = var2 )
call the signals.request_started.send method with sender set to self.__class__ as argument.,call signals var1 send method with sender set to var2 as argument.,signals . request_started . send ( sender = self . __class__ ),signals . var1 . send ( sender = var2 )
signal is a string 'signals',signal is string var0,signals = 'signals',signals = var0
"call the function base64_hmac with 3 arguments: string 'signer' appended to self.salt, value and self.key, substitute the result for signature.",call function var0 with 3 arguments: string var1 appended to var2 value and var3 substitute result for signature.,"signature = base64_hmac ( self . salt + 'signer' , value , self . key )","signature = var0 ( var2 + var1 , value , var3 )"
"call the function signed_value with an argument value, substitute the result for signed_value.","call function var0 with argument value, substitute result for var0 ",signed_value = force_str ( signed_value ),var0 = force_str ( var0 )
"call the import_string function with an argument settings.SIGNING_BACKEND, substitute the result for Signer.",call var0 function with argument settings var2 substitute result for var3 ,Signer = import_string ( settings . SIGNING_BACKEND ),var3 = var0 ( settings . var2 )
silent is boolean False.,silent is boolean var0 ,silent = False,silent = var0
silent is boolean True.,silent is boolean var0 ,silent = True,silent = var0
silent_variable_failure is an boolean True.,var0 is boolean var1 ,silent_variable_failure = True,var0 = var1
"and re.IGNORECASE, substitute the result for simple_url_re.   call the function re.compile with raw string '&(?!(\w+|#\d+);)', substitute the result for simple_email_re.","and re var0 substitute result for var2 call function var5 with raw string var6, substitute result for var7 ",simple_email_re = re . compile ( r'^\S+@\S+\.\S+$' ),var7 = var5 ( '^\\S+@\\S+\\.\\S+$' )
"call the function re.compile with 2 arguments: raw string '^www\.|^(?!http)\w[^@]+\.(com|edu|gov|int|mil|net|org)($|/.*)$',","call function var0 with 2 arguments: raw string var1,","simple_url_2_re = re . compile ( r'^www\.|^(?!http)\w[^@]+\.(com|edu|gov|int|mil|net|org)($|/.*)$' , re . IGNORECASE )","simple_url_2_re = var0 ( '^www\\.|^(?!http)\\w[^@]+\\.(com|edu|gov|int|mil|net|org)($|/.*)$' , re . IGNORECASE )"
"call the function re.compile with 2 arguments: raw string '^https?://\[?\w' and re.IGNORECASE, substitute the result for simple_url_re.","call the function re.compile with 2 arguments: raw string '^https?://\[?\w' and re.IGNORECASE, substitute the result for simple_url_re.","simple_url_re = re . compile ( r'^https?://\[?\w' , re . IGNORECASE )","simple_url_re = re . compile ( r'^https?://\[?\w' , re . IGNORECASE )"
substitute http_cookies.SimpleCookie for SimpleCookie.,substitute var0 var2 for var2 ,SimpleCookie = http_cookies . SimpleCookie,var2 = var0 . var2
"multiply delta.days, integer 24, integer 60 and integer 60 add delta.seconds to it, substitute the result for since.","multiply var0 integer 24, integer 60 and integer 60 add var1 to it, substitute result for var2 ",since = delta . days * 24 * 60 * 60 + delta . seconds,var2 = var0 * 24 * 60 * 60 + var1
SINGLE_BRACE_END is a string '}'.,var0 is string var1.,SINGLE_BRACE_END = '}',var0 = var1
SINGLE_BRACE_START is a string '{'.,var0 is string var1.,SINGLE_BRACE_START = '{',var0 = var1
"append string '%%(%s)s' to singular, where '%s' is replaced with t.contents.",append string var0 to singular var1 var2 is replaced with var3 ,singular . append ( '%%(%s)s' % t . contents ),singular . append ( var0 % var3 )
append contents to singular.,append contents to singular.,singular . append ( contents ),singular . append ( contents )
singular is an empty list.,singular is empty list.,singular = [ ],singular = [ ]
"substitute first 2 elements of bits for singular_suffix and plural_suffix, respectively.",substitute first 2 elements of bits for var0 and var1 respectively.,"singular_suffix , plural_suffix = bits [ : 2 ]","var0 , var1 = bits [ : 2 ]"
"call the function BytesIO with self.buffer as argument, store the result is sio.","call function var0 with var1 as argument, store result is var2 ",sio = BytesIO ( self . buffer ),var2 = var0 ( var1 )
append j to sites.,append j to sites.,sites . append ( j ),sites . append ( j )
append site to sites.,append site to sites.,sites . append ( site ),sites . append ( site )
sites is an empty list.,sites is empty list.,sites = [ ],sites = [ ]
"added to a tuple with an element year, substitute the result for s1.   call the function _findall with 2 arguments: s1 and year converted into a string, substitute the result for sites1.","added to var2 tuple with element year, substitute result for var0 call function var4 with var2 arguments: var0 and year converted into var2 string, substitute result for sites1var2","sites1 = _findall ( s1 , str ( year ) )","sitevar0 = var4 ( var0 , str ( year ) )"
"added to a tuple with an element sum of year an integer 28, substitute the result for s2.   call the function _findall with 2 arguments: s2 and sum of year and integer 28, converted into a string, substitute the result for sites2.","added to var2 tuple with element sum of year integer 28, substitute result for var0 call function var4 with var2 arguments: var0 and sum of year and integer 28, converted into var2 string, substitute result for sites2var2","sites2 = _findall ( s2 , str ( year + 28 ) )","sitevar0 = var4 ( var0 , str ( year + 28 ) )"
"call the function reraise from the module six, with list of arguments exec_info.","call function var0 from module six, with list of arguments var1 ",six . reraise ( * exc_info ),six . var0 ( * exc_info )
call the function six.reraise with unpacked list exc_info as an argument.,call function var0 with unpacked list var1 as argument.,six . reraise ( * exc_info ),var0 ( * var1 )
"* The database isn't running or isn't configured correctly.\n  * At least one of the expected database tables doesn't exist.\n   ""  * The SQL was invalid.\nHint: Look at the output of 'django-admin.py sqlflush'. That's the SQL this command wasn't able to run.\n""   ""The full error: %s"", where '%s' is replaced by value under the 'NAME' key of the connection.settings_dict dictionary and e.   call the function six.reraise with 3 arguments: CommandError, CommandError created with argument new_msg,","* The database isn't running or isn't configured correctly.\n  * At least one of the expected database tables doesn't exist.\n   ""  * The SQL was invalid.\nHint: Look at the output of 'django-admin.py sqlflush'. That's the SQL this command wasn't able to run.\n""   ""The full error: %s"", where '%s' is replaced by value under the 'NAME' key of the connection.settings_dict dictionary and e.   call the function six.reraise with 3 arguments: CommandError, CommandError created with argument new_msg,","six . reraise ( CommandError , CommandError ( new_msg ) , sys . exc_info ( ) [ 2 ] )","six . reraise ( CommandError , CommandError ( new_msg ) , sys . exc_info ( ) [ 2 ] )"
"call the six.reraise function with 3 arguments: DeserializationError, DeserializationError called with an argument e,","call var0 function with 3 arguments: var1 DeserializationError called with argument e,","six . reraise ( DeserializationError , DeserializationError ( e ) , sys . exc_info ( ) [ 2 ] )","var0 ( var1 , var1 ( e ) , sys . exc_info ( ) [ 2 ] )"
"call the function six.reraise with 3 arguments: DeserializationError, return value of the DeserializationError called with an argument e,","call function var0 with 3 arguments: var1 return value of var1 called with argument e,","six . reraise ( DeserializationError , DeserializationError ( e ) , sys . exc_info ( ) [ 2 ] )","var0 ( var1 , var1 ( e ) , sys . exc_info ( ) [ 2 ] )"
"call the function six.reraise with 3 arguments: exc_type, exc_value and third element of the result of the method sys.exc_info.",call function var0 with 3 arguments: var1 var2 and third element of result of method sys var5 ,"six . reraise ( exc_type , exc_value , sys . exc_info ( ) [ 2 ] )","var0 ( var1 , var2 , sys . var5 ( ) [ 2 ] )"
"call the function six.reraise with 3 arguments: ImportError, instance of ImportError class created with an argument msg,","call function var0 with 3 arguments: var1 instance of var1 class created with argument msg,","six . reraise ( ImportError , ImportError ( msg ) , sys . exc_info ( ) [ 2 ] )","var0 ( var1 , var1 ( msg ) , sys . exc_info ( ) [ 2 ] )"
"call the function six.reraise with 3 arguments: ImproperlyConfigured, ImproperlyConfigured(msg) and third element of return value of the function sys.exc_info.",call function var0 with 3 arguments: var1 ImproperlyConfigured(msg) and third element of return value of function sys var5 ,"six . reraise ( ImproperlyConfigured , ImproperlyConfigured ( msg ) , sys . exc_info ( ) [ 2 ] )","var0 ( var1 , var1 ( msg ) , sys . var5 ( ) [ 2 ] )"
"call the function six.reraise with 3 arguments: ImproperlyConfigured, instance of ImproperlyConfigured class created with msg,","call function var0 with 3 arguments: var1 instance of var1 class created with msg,","six . reraise ( ImproperlyConfigured , ImproperlyConfigured ( msg ) , sys . exc_info ( ) [ 2 ] )","var0 ( var1 , var1 ( msg ) , sys . exc_info ( ) [ 2 ] )"
"call the method six.reraise with 3 arguments: MultiPartParserError, MultiPartParserError created with msg,","call method var0 with 3 arguments: var1 MultiPartParserError created with msg,","six . reraise ( MultiPartParserError , MultiPartParserError ( msg ) , sys . exc_info ( ) [ 2 ] )","var0 ( var1 , var1 ( msg ) , sys . exc_info ( ) [ 2 ] )"
"call the method six.reraise 3 with arguments: os_err_exc_type, return value of the function os_err_exc_type,",call method var0 3 with arguments: var1 return value of function var1 ,"six . reraise ( os_err_exc_type , os_err_exc_type ( 'Error executing %s: %s' % ( args [ 0 ] , strerror ) ) , sys . exc_info ( ) [ 2 ] )","var0 ( var1 , var1 ( 'Error executing %s: %s' % ( args [ 0 ] , strerror ) ) , sys . exc_info ( ) [ 2 ] )"
"call the function six.reraise with 3 arguments: UnreadablePostError, UnreadablePostError instantiated with unpacked list e.args,",call function var0 with 3 arguments: var1 UnreadablePostError instantiated with unpacked list var3 ,"six . reraise ( UnreadablePostError , UnreadablePostError ( * e . args ) , sys . exc_info ( ) [ 2 ] )","var0 ( var1 , var1 ( * var3 ) , sys . exc_info ( ) [ 2 ] )"
"call the function six.reraise with 3 arguments: class ValidationError, class ValidationError, created with 3 arguments:",call function var0 with 3 arguments: class var1 class var1 created with 3 arguments:,"six . reraise ( ValidationError , ValidationError ( message , code = 'ambiguous_timezone' , params = params , ) , sys . exc_info ( ) [ 2 ] )","var0 ( var1 , var1 ( message , code = 'ambiguous_timezone' , params = params ) , sys . exc_info ( ) [ 2 ] )"
"call the function six.reraise with 3 arguments: ValidationError, ValidationError created with 2 arguments:",call function var0 with 3 arguments: var1 ValidationError created with 2 arguments:,"six . reraise ( ValidationError , ValidationError ( self . error_messages [ 'invalid_image' ] , code = 'invalid_image' , ) , sys . exc_info ( ) [ 2 ] )","var0 ( var1 , var1 ( self . error_messages [ 'invalid_image' ] , code = 'invalid_image' ) , sys . exc_info ( ) [ 2 ] )"
"call the function six.reraise with 3 arguments: ValueError, instance of a class ValueError, created with an argument string,","call function var0 with 3 arguments: var1 instance of class var1 created with argument string,","six . reraise ( ValueError , ValueError ( '%r is not a valid date' % date ) , sys . exc_info ( ) [ 2 ] )","var0 ( var1 , var1 ( '%r is not a valid date' % date ) , sys . exc_info ( ) [ 2 ] )"
size is a property object with _get_size as getter method and _set_size as setter method.,size is property object with var0 as var1 method and var2 as setter method.,"size = property ( _get_size , _set_size )","size = property ( var0 , var2 )"
"get the position of the file self.file pointer, substitute it for size.","get position of file var0 pointer, substitute it for size.",size = self . file . tell ( ),size = var0 . tell ( )
substitute self.remaining for size.,substitute var0 for size.,size = self . remaining,size = var0
"append a tuple containing 2 elemetns: model and deps, to skipped.",append tuple containing 2 elemetns: model and var1 to skipped.,"skipped . append ( ( model , deps ) )","skipped . append ( ( model , var1 ) )"
skipped is an empty list.,skipped is empty list.,skipped = [ ],skipped = [ ]
"slots is a list with an element, slots.","slots is list with element, slots.",slots = [ slots ],slots = [ slots ]
"get the value under the '__slots__' key of the orig_vars dictionary, substitute it for slots.","get value under var0 key of var1 dict, substitute it for slots.",slots = orig_vars . get ( '__slots__' ),slots = var1 . get ( var0 )
"call the re.compile function with an argument raw string '^[-a-zA-Z0-9_]+$', substitute the result for slug_re.","call var0 function with argument raw string '^ [var2]+$', substitute result for var3 ",slug_re = re . compile ( r'^[-a-zA-Z0-9_]+$' ),var3 = var0 ( '^[var2]+$' )
"mark_safe function, return the result.   call the function allow_lazy with 2 arguments: slugify and six.text_type, substitute the result slugify.","var0 function, return result var1 call function var2 with 2 arguments: var3 and six var6 substitute result var3 ","slugify = allow_lazy ( slugify , six . text_type )","var3 = var2 ( var3 , six . var6 )"
"call the function re.compile with 2 arguments: raw string ""((?:[^\s'""]*(?:(?:""(?:[^""\\]|\\.)*"" | '(?:[^'\\]|\\.)*')[^\s'""]*)+) | \+)"",","call the function re.compile with 2 arguments: raw string ""((?:[^\s'""]*(?:(?:""(?:[^""\\]|\\.)*"" | '(?:[^'\\]|\\.)*')[^\s'""]*)+) | \+)"",","smart_split_re = re . compile ( r'''     ((?:         [^\s'']*         (?:             (?:'(?:[^'\\]|\\.)*' | '(?:[^'\\]|\\.)*')             [^\s'']*         )+     ) | \S+) ''' , re . VERBOSE )","smart_split_re = re . compile ( r'''     ((?:         [^\s'']*         (?:             (?:'(?:[^'\\]|\\.)*' | '(?:[^'\\]|\\.)*')             [^\s'']*         )+     ) | \S+) ''' , re . VERBOSE )"
substitute smart_bytes for smart_str.,substitute var0 for var1 ,smart_str = smart_bytes,var1 = var0
substitute smart_text for smart_str.,substitute var0 for var1 ,smart_str = smart_text,var1 = var0
substitute smart_text for smart_unicode.,substitute var0 for var1 ,smart_unicode = smart_text,var1 = var0
"open out_log flie in append mode with buffering size of input buffer, substitute the result for so.","open var0 var1 in append mode with buffering size of input buffer, substitute result for so.","so = open ( out_log , 'a+' , buffering )","so = open ( var0 , 'a+' , buffering )"
"define lambda function that returns self.file.softspace field, use it as an argument for property function, put the result in softspace.","define lambda function var0 returns var1 field, use it as argument for property function, put result in var2 ",softspace = property ( lambda self : self . file . softspace ),var2 = property ( lambda self : var1 )
substitute complain for sort.,substitute complain for sort.,sort = complain,sort = complain
"if f is an instance of ModelFiled, for every f in opts.virtual_fields, append f to a list, substitute the resulting list for sortable_virtual_fields.","if f is instance of var0 for every f in opts var2 append f to list, substitute resulting list for var3 ","sortable_virtual_fields = [ f for f in opts . virtual_fields if isinstance ( f , ModelField ) ]","sortable_var2 = [ f for f in opts . var2 if isinstance ( f , ModelField ) ]"
"sorted_issues is a list of tuples with 5 entries: criticals and 'CRITICALS', errors and 'ERRORS', warnings and 'WARNINGS',","var0 is list of var1 with 5 entries: var2 and var3, errors and var4, warnings and var6,","sorted_issues = [ ( criticals , 'CRITICALS' ) , ( errors , 'ERRORS' ) , ( warnings , 'WARNINGS' ) , ( infos , 'INFOS' ) , ( debugs , 'DEBUGS' ) , ]","var0 = [ ( var2 , var3 ) , ( errors , 'ERRORS' ) , ( warnings , 'WARNINGS' ) , ( infos , 'INFOS' ) , ( debugs , 'DEBUGS' ) ]"
"sort elements of kwds, substitute the result for sorted_items.",sort elements of var0 substitute result for var1 ,sorted_items = sorted ( kwds . items ( ) ),var1 = sorted ( var0 . items ( ) )
"call the function loader with 2 arguments name and dirs, substitute the result for source and display_name, respectively.",call function loader with 2 arguments name and var0 substitute result for source and var1 respectively.,"source , display_name = loader ( name , dirs )","source , var1 = loader ( name , var0 )"
"call the method self.load_template_source with arguments template_name and template_dirs, assign the result to source and display_name.",call method self var1 with arguments var2 and var3 assign result to source and var5 ,"source , display_name = self . load_template_source ( template_name , template_dirs )","source , var5 = self . var1 ( var2 , var3 )"
"substitute string "" "" for space.",substitute string var0 for space.,space = ' ',space = ' '
"find first index of whitespace occurrence in line, add integer 1 to it, substitute the result for space.","find first index of var0 occurrence in line, add integer 1 to it, substitute result for space.",space = line . find ( ' ' ) + 1,space = line . find ( ' ' ) + 1
"get fist max_width incremented by 1 elements from line, find index of the first occurrenece of whitespace from the right side,","get fist var0 var1 by 1 elements from line, find index of first var2 of var3 from right side,",space = line [ : max_width + 1 ] . rfind ( ' ' ) + 1,space = line [ : var0 + 1 ] . rfind ( ' ' ) + 1
convert whitespace character to unicode and substitute the result for space.,convert var0 character to var1 and substitute result for space.,space = unicode ( ' ' ),space = var1 ( ' ' )
"special_floats is an list with 3 elements, pos_inf, neg_inf and nan, all converted to strings.","var0 is list with 3 elements var1 var2 and nan, all converted to strings.","special_floats = [ str ( pos_inf ) , str ( neg_inf ) , str ( nan ) ]","var0 = [ str ( var1 ) , str ( var2 ) , str ( nan ) ]"
append bit to split.,append bit to split.,split . append ( bit ),split . append ( bit )
split is an empty list.,split is empty list.,split = [ ],split = [ ]
"app_name and model._meta.object_name, respectively.   evaluate connection.creation.sql_create_model method with model, no_style() and seen_models as arguments,","var0 and model._meta var2 respectively var3 evaluate connection.creation var5 method with model, no_style() and var8 as arguments,","sql , references = connection . creation . sql_create_model ( model , no_style ( ) , seen_models )","sql , references = connection . creation . var5 ( model , var6 ( ) , var8 )"
"use the result as the argument for the call to the sql.extend method.   call the connection.creation.sql_for_pending_references method with refto, no_style() and pending_references as arguments,","use result as argument for call to var0 method var1 call connection.creation var3 method with var5 no_style() and var4 as arguments,","sql . extend ( connection . creation . sql_for_pending_references ( model , no_style ( ) , pending_references ) )","var0 ( connection . creation . var3 ( model , var6 ( ) , var4 ) )"
"call the connection.creation.sql_for_pending_references method with refto, no_style() and pending_references as arguments,","call connection.creation var1 method with var3 no_style() and var2 as arguments,","sql . extend ( connection . creation . sql_for_pending_references ( refto , no_style ( ) , pending_references ) )","sql . extend ( connection . creation . var1 ( var3 , var4 ( ) , var2 ) )"
"join into a file path: app_dir and string %s.%s.sql, where '%s' is replaced by opts.model_name and backend_name, respectively,","join into file path: var0 and string var2 var3 var4 is replaced by opts var6 and var7 respectively,","sql_files . append ( os . path . join ( app_dir , '%s.%s.sql' % ( opts . model_name , backend_name ) ) )","sql_files . append ( os . path . join ( var0 , 'var2' % ( opts . var6 , var7 ) ) )"
"append the result to sql_files.   join into a file path: app_dir and string %s.%s.sql, where '%s' is replaced by opts.model_name, append the result to sql_files.",append result to var0 join into file path: var5 and string var7 var8 var9 is replaced by opts var11 append result to var0 ,"sql_files . append ( os . path . join ( app_dir , '%s.sql' % opts . model_name ) )","var0 . append ( os . path . join ( var5 , '%s.sql' % opts . var11 ) )"
sql_files is an empty list.,var0 is empty list.,sql_files = [ ],var0 = [ ]
"call the method sql_flush with 5 arguments: self.style, connection, only_django set to boolean True,",call method var0 with 5 arguments: var2 connection var3 set to boolean var5 ,"sql_list = sql_flush ( self . style , connection , only_django = True , reset_sequences = reset_sequences , allow_cascade = allow_cascade )","sql_list = var0 ( var2 , connection , var3 = var5 , reset_sequences = reset_sequences , allow_cascade = allow_cascade )"
"call method executor.collect_sql with plan as the argument, substitute the result for sql_statements.","call method executor var1 with plan as argument, substitute result for var2 ",sql_statements = executor . collect_sql ( plan ),var2 = executor . var1 ( plan )
call the function force_text with 2 arguments: src and settings.FILE_CHARSET.,call function var0 with 2 arguments: var2 and settings var3 ,"src = force_text ( src , settings . FILE_CHARSET )","var2 = var0 ( var2 , settings . var3 )"
"perform the following:   call the method fp.read, substitute the result for src_data.",perform following: call method var1 substitute result for var2 ,src_data = fp . read ( ),var2 = var1 ( )
"with the result renamed to fp, perform the following:   call the method fp.read, substitute the result for src_data.","with result renamed to var0 perform following: call method var0 read, substitute result for var3 ",src_data = fp . read ( ),var3 = var0 . read ( )
"call the function prepare_js_for_gettext with an argument src_data, substitute it for src_data.",call function var0 with argument var1 substitute it for var1 ,src_data = prepare_js_for_gettext ( src_data ),var1 = var0 ( var1 )
"call the function os.stat with an argument filename, substitute the result for st.","call function var0 with argument filename, substitute result for var1 ",st = os . stat ( filename ),var1 = var0 ( filename )
"call the os.stat function with argument src, substitute the result for st.",call var0 function with argument var2 substitute result for var1 ,st = os . stat ( src ),var1 = var0 ( var2 )
"ingeter 0 and integer 0.   call the method _time.mktime with an argument tt, substitute the result for stamp.","var0 0 and integer 0 var1 call method var2 with argument tt, substitute result for stamp.",stamp = _time . mktime ( tt ),stamp = var2 ( tt )
"call the method time.mktime with an argument tt, substitute the result for stamp.","call method var0 with argument tt, substitute result for stamp.",stamp = time . mktime ( tt ),stamp = var0 ( tt )
"call the method match.span, substitute the result for start an end, respectively.","call method var0 substitute result for start end, respectively.","start , end = match . span ( )","start , end = var0 ( )"
increment start by length of toktext.,increment start by length of var0 ,start += len ( toktext ),start += len ( var0 )
start is an integer 0.,start is integer 0.,start = 0,start = 0
"call the method match.start, substitute the result for start.",call method var0 substitute result for start.,start = match . start ( ),start = var0 ( )
"remove first element from non_capturing_groups, substitute it for start.",remove first element from var0 substitute it for start.,start = non_capturing_groups . pop ( ),start = var0 . pop ( )
call the method start_ipython with an argument argv as an empty list.,call method var0 with argument var1 as empty list.,start_ipython ( argv = [ ] ),var0 ( var1 = [ ] )
"format the previous in a tuple, append the tuple to the response_headers.   call the start_response function with force_str(status) method return value and response_headers as arguments.","format previous in tuple, append tuple to var0 call var3 function with force_str(status) method return value and var0 as arguments.","start_response ( force_str ( status ) , response_headers )","var3 ( var5 ( status ) , var0 )"
"call the function re.compile with 2 arguments: raw string '<%s(/?>|(\s+[^>]*>))' formated with tags_re and re.U,","call function var0 with 2 arguments: raw string var1 formated with var3 and re.U,","starttag_re = re . compile ( r'<%s(/?>|(\s+[^>]*>))' % tags_re , re . U )","starttag_re = var0 ( rvar1 % var3 , re . U )"
"call the os.stat function with argument filename, store the return value in stat.","call var0 function with argument filename, store return value in var1 ",stat = os . stat ( filename ),var1 = var0 ( filename )
"get the value under the 'cookies' key of the state dictionary,","get value under var0 key of state dict,",state [ 'cookies' ] = str ( state [ 'cookies' ] ),state [ var0 ] = str ( state [ var0 ] )
"call the method self.__dict__.copy, substitute the result for state.",call method var0 substitute result for state.,state = self . __dict__ . copy ( ),state = var0 ( )
substitute self.state for state.,substitute var0 for state.,state = self . state,state = var0
substitute tok.next for state.,substitute var0 for state.,state = tok . next,state = var0
substitute compare_to for value under the state_frame dictionary under the self key.,substitute var0 for value under var1 dict under self key.,state_frame [ self ] = compare_to,var1 [ self ] = var0
value under the self key of state_frame dictionary is None.,value under self key of var0 dict is var2 ,state_frame [ self ] = None,var0 [ self ] = var2
"call the method self._get_context_stack_frame with an argument context, substitute the result for state_frame.","call method var0 with argument context, substitute result for var1 ",state_frame = self . _get_context_stack_frame ( context ),var1 = var0 ( context )
append cleaned_lien to statement.,append var0 to statement.,statement . append ( cleaned_line ),statement . append ( cleaned_line )
statement is an empty list.,statement is empty list.,statement = [ ],statement = [ ]
"join statements into a string, separated by white spaces, append it to statements.","join statements into string, separated by white spaces, append it to statements.",statements . append ( ' ' . join ( statement ) ),statements . append ( ' ' . join ( statement ) )
statements is an empty list.,statements is empty list.,statements = [ ],statements = [ ]
"call the method connection.ops.sequence_reset_sql with 2 arguments self.style and models, substitute the result for statements.","call method connection.ops var1 with 2 arguments var2 and models, substitute result for statements.","statements = connection . ops . sequence_reset_sql ( self . style , models )","statements = connection . ops . var1 ( var2 , models )"
"call the method connection.ops.sql_flush with arguments: style, tables, seqs and allow_cascade, substitute the result for statements.","call method connection.ops var1 with arguments: style, tables var2 and var3 substitute result for statements.","statements = connection . ops . sql_flush ( style , tables , seqs , allow_cascade )","statements = connection . ops . var1 ( style , tables , var2 , var3 )"
"call the function sql_all with 3 arguments: app_config, self.style and connection, substitute the result for statements.","call function var0 with 3 arguments: var1 var3 and connection, substitute result for statements.","statements = sql_all ( app_config , self . style , connection )","statements = var0 ( var1 , var3 , connection )"
"call the function sql_create with 3 arguments: app_config, self.style and connection, substitute the result for statements.","call function var0 with 3 arguments: var1 var3 and connection, substitute result for statements.","statements = sql_create ( app_config , self . style , connection )","statements = var0 ( var1 , var3 , connection )"
"call the function sql_custom with app_config, self.style and connection as the arguments, substitute the result for statements.","call function var0 with var1 var3 and connection as arguments, substitute result for statements.","statements = sql_custom ( app_config , self . style , connection )","statements = var0 ( var1 , var3 , connection )"
"call the function sql_destroy_indexes with 3 arguments: app_config, self.style and connection, substitute the result for statements.","call function var0 with 3 arguments: var1 var3 and connection, substitute result for statements.","statements = sql_delete ( app_config , self . style , connection )","statements = sql_delete ( var1 , var3 , connection )"
"call the function sql_destroy_indexes with 3 arguments: app_config, self.style and connection, substitute the result for statements.","call function var0 with 3 arguments: var1 var3 and connection, substitute result for statements.","statements = sql_destroy_indexes ( app_config , self . style , connection )","statements = var0 ( var1 , var3 , connection )"
"call the function sql_indexes with app_config, self.style and connection as arguments, store the result in statements.","call function var0 with var1 var3 and connection as arguments, store result in statements.","statements = sql_indexes ( app_config , self . style , connection )","statements = var0 ( var1 , var3 , connection )"
"states is a dictionary with 2 arguments: appended list with an element instance of a class Tok, created with 3 arguments: ""punct"",","states is dict with 2 arguments: appended list with element instance of class var0 created with 3 arguments: var2,","states = { 'div' : both_before + [ Tok ( 'punct' , literals ( '/= /' ) , next = 'reg' ) , ] + both_after , 'reg' : both_before + [ Tok ( 'regex' , r'''                     /                       # opening slash                     # First character is..                     (   [^*\\/[]            # anything but * \ / or [                     |   \\.                 # or an escape sequence                     |   \[                  # or a class, which has                             (   [^\]\\]     #   anything but \ or ]                             |   \\.         #   or an escape sequence                             )*              #   many times                         \]                     )                     # Following characters are same, except for excluding a star                     (   [^\\/[]             # anything but \ / or [                     |   \\.                 # or an escape sequence                     |   \[                  # or a class, which has                             (   [^\]\\]     #   anything but \ or ]                             |   \\.         #   or an escape sequence                             )*              #   many times                         \]                     )*                      # many times                     /                       # closing slash                     [a-zA-Z0-9]*            # trailing flags                 ''' , next = 'div' ) , ] + both_after , }","states = { 'div' : both_before + [ var0 ( 'punct' , literals ( '/= /' ) , next = 'reg' ) ] + both_after , 'reg' : both_before + [ var0 ( 'regex' , '                     /                       # opening slash                     # First character is..                   (  [^*\\\\/[]            # anything but * \\ / or [                    |   \\\\.                # or an escape sequence                     |   \\[                 # or a class, which has                            (  [^\\]\\\\]     #   anything but \\ or]                             |   \\\\.        #   or an escape sequence                            )*              #   many times                         \\]                    )                     # Following characters are same, except for excluding a star                    (  [^\\\\/[]             # anything but \\ / or [                    |   \\\\.                # or an escape sequence                     |   \\[                 # or a class, which has                            (  [^\\]\\\\]     #   anything but \\ or]                             |   \\\\.        #   or an escape sequence                            )*              #   many times                         \\]                    )*                      # many times                     /                       # closing slash                     [a-zA-Z0-9]*            # trailing flags                 ' , next = 'div' ) ] + both_after }"
stats is a list with 2 elements: 2 integers 0.,var0 is list with 2 elements: 2 integers 0.,"stats [ : ] = [ 0 , 0 ]","var0 [ : ] = [ 0 , 0 ]"
increment stats dictionary value under the HITS key by integer 1.,increment var0 dict value under var1 key by integer 1.,stats [ HITS ] += 1,var0 [ var1 ] += 1
increment stats dictionary value under the MISSES key by integer 1.,increment var0 dict value under var1 key by integer 1.,stats [ MISSES ] += 1,var0 [ var1 ] += 1
for value under the key key of the cache dictionary.   increment stats dictionary value under the MISSES key by integer 1.,for value under key key of cache dict var0 increment var1 dict value under var2 key by integer 1.,stats [ MISSES ] += 1,var1 [ var2 ] += 1
stats is an list with 2 elements: 2 integers 0.,var0 is list with 2 elements: 2 integers 0.,"stats = [ 0 , 0 ]","var0 = [ 0 , 0 ]"
"replace '%s' in the string '%s %s' with response.status_code and response.reason_phrase, respectively, substitute it for status.","replace var0 in string var1 with response var3 and response var5 respectively, substitute it for status.","status = '%s %s' % ( response . status_code , response . reason_phrase )","status = var1 % ( response . var3 , response . var5 )"
status_code is an integer 200.,var0 is integer 200.,status_code = 200,var0 = 200
status_code is an integer 301.,var0 is integer 301.,status_code = 301,var0 = 301
status_code is an integer 302.,var0 is integer 302.,status_code = 302,var0 = 302
status_code is an integer 304.,var0 is integer 304.,status_code = 304,var0 = 304
status_code is an integer 400.,var0 is integer 400.,status_code = 400,var0 = 400
status_code is an integer 403.,var0 is integer 403.,status_code = 403,var0 = 403
status_code is an integer 404.,var0 is integer 404.,status_code = 404,var0 = 404
status_code is an integer 405.,var0 is integer 405.,status_code = 405,var0 = 405
status_code is an integer 410.,var0 is integer 410.,status_code = 410,var0 = 410
status_code is an integer 500.,var0 is integer 500.,status_code = 500,var0 = 500
"and result of the bitwise OR performed on the re.MULTILINE and re.DOTALL operands, substitute the result for plural_forms_re/   STATUS_OK is integer 0.","and result of var0 var1 performed on re var3 and re var5 operands, substitute result for var7 var10 is integer 0var2",STATUS_OK = 0,var10 = 0
"created with arguments sys.stderr and self.style.ERROR.   replace '%s' in string '%s: %s' with e.__class__.__name__ and e, respectively, write it to the stderr stream.","created with arguments var0 and var2 var3 replace var5 in string var6 with var7 and e, respectively, write it to var1 stream.","stderr . write ( '%s: %s' % ( e . __class__ . __name__ , e ) )","var1 . write ( var6 % ( var7 , e ) )"
"if it exists, get 'stderr' attribute of self, substitute it for stderr, if not, stderr is an instance of OutputWrapper class,","if it exists, get var0 attribute of self, substitute it for stderr, if not, stderr is instance of var1 class,","stderr = getattr ( self , 'stderr' , OutputWrapper ( sys . stderr , self . style . ERROR ) )","stderr = getattr ( self , var0 , var1 ( sys . stderr , self . style . ERROR ) )"
step is an string 'any'.,step is string var0.,step = 'any',step = var0
"call the object Decimal with string '1' as an argument, divide it by 10, bring the result to the power of self.decimal_places,","call object var0 with string var1 as argument, divide it by 10, bring result to power of self var3 ",step = str ( Decimal ( '1' ) / 10 ** self . decimal_places ) . lower ( ),step = str ( var0 ( var1 ) / 10 ** self . var3 ) . lower ( )
add the string value '\\s' to the variable str,add string value var1 to variable var0,str += '\\s',var0 += '\\s'
append string '\\x' to str,append string var1 to var0,str += '\\x',var0 += '\\x'
"convert the value of x bitwise and y to hex, append the string "","" and save it in str","convert value of x var0 and y to hex, append string var2 and save it in var1","str += '%02x, ' % ( x & y )","var1 += '%02x, ' % ( x & y )"
"convert the value of x bitwise or y to hex, append the string "","" and save it in str","convert value of x var0 or y to hex, append string var2 and save it in var1","str += '%02x, ' % ( x ^ y )","var1 += '%02x, ' % ( x ^ y )"
"Convert the value of z bitwise or 0xff to a hexadecimal then add it to the variable str followed by ','",Convert value of z var0 or var1 to hexadecimal then add it to variable var2 followed by var3,"str += '%02x, ' % ( z ^ 0xff )","var2 += '%02x, ' % ( z ^ var1 )"
append the string value '0x' to the variable str,append string value var1 to variable var0,str += '0x',var0 += var1
slice the hexadecimal value of leader at index 5 and append it to str,slice hexadecimal value of leader at index 5 and append it to var0,str += hex ( leader ) [ 5 : ],var0 += hex ( leader ) [ 5 : ]
declare an empty string and save in str,declare empty string and save in var0,str = '',var0 = ''
empty string str,empty string var0,str = '',var0 = ''
"str is a string """"",var0 is string var1,str = '',var0 = ''
"join hidden_fields elements into a string, without separation, substitute the result for str_hidden.","join var0 elements into string var1 separation, substitute result for var2 ",str_hidden = '' . join ( hidden_fields ),var2 = '' . join ( var0 )
"call the function six.text_type with an argument number, substitute the result for str_number.","call function six var0 with argument number, substitute result for var1 ",str_number = six . text_type ( number ),var1 = six . var0 ( number )
remove the first element from str_number.,remove first element from var0 ,str_number = str_number [ 1 : ],var0 = var0 [ 1 : ]
append the string '\\x' to the string str1,append string var0 to string var1,str1 += '\\x',var1 += '\\x'
"append the hexadecimal conversion of byte followed by ', ' to the string str1",append hexadecimal conversion of byte followed by var0 to string var1,"str1 += '%02x, ' % byte","var1 += '%02x, ' % byte"
"convert the value of x bitwise and y to hex, append the string "","" and save it in str1","convert value of x var0 and y to hex, append string var1 and save it in var2","str1 += '%02x, ' % ( x & y )","var2 += '%02x, ' % ( x & y )"
"convert the value of x bitwise or y to hex, append the string "","" and save it in str1","convert value of x var0 or y to hex, append string var1 and save it in var2","str1 += '%02x, ' % ( x ^ y )","var2 += '%02x, ' % ( x ^ y )"
add the string value '0x' to the variable str1,add string value var0 to variable var1,str1 += '0x',var1 += var0
append the string value '0x' to the variable str1,append string value var0 to variable var1,str1 += '0x',var1 += var0
convert to hexadecimal the value of str and save it in str1,convert to hexadecimal value of var0 and save it in var1,str1 = '%02x' % str,var1 = '%02x' % var0
convert to hex the value of str and store it in str1,convert to hex value of var0 and store it in var1,str1 = '%02x' % str,var1 = '%02x' % var0
str1 is a string containing '0x',var0 is string containing var1,str1 = '0x',var0 = var1
str1 is an empty string,var0 is empty string,str1 = '',var0 = ''
declare an empty string and save in str1,declare empty string and save in var0,str1 = '',var0 = ''
append str2 to str1,append var0 to var1,str1 = str1 + str2,var1 = var1 + var0
append to str1 a bytes object containing the value byte packed according to the format string unsigned char,append to var0 bytes object containing value byte packed according to format string unsigned char,"str1 . append ( struct . pack ( 'B' , byte ) )","var0 . append ( struct . pack ( 'B' , byte ) )"
append the string '\\t' to the string str2,append string var0 to string var1,str2 += '\\t',var1 += '\\t'
"convert the value of val to hexadecimal, concatenate it with ', ' and save the results in str2","convert value of var0 to hexadecimal, concatenate it with var1 and save results in var2","str2 += '%02x, ' % val1","var2 += '%02x, ' % var01"
add string '0x' to str2,add string var0 to var1,str2 += '0x',var1 += var0
add '0x' to the string str2,add var0 to string var1,str2 += '0x',var1 += var0
add the string value '0x' to the string str2,add string value var0 to string var1,str2 += '0x',var1 += var0
append the first 4 element of leader converted in hex to the string str2,append first 4 element of leader converted in hex to string var0,str2 += hex ( leader ) [ : 4 ],var0 += hex ( leader ) [ : 4 ]
initialize the empty string str2,initialize empty string var0,str2 = '',var0 = ''
str2 is a string containing the hexadecimal conversion of str1,var0 is string containing hexadecimal conversion of var1,str2 = '%02x' % str1,var0 = '%02x' % var1
convert to hexadecimal the value of str1 and save it in str2,convert to hexadecimal value of var0 and save it in var1,str2 = '%02x' % str1,var1 = '%02x' % var0
initialize the string str2 to '0x',initialize string var0 to var1,str2 = '0x',var0 = var1
str2 is the concatenation of str2 and str1,var0 is concatenation of var0 and var2,str2 = str2 + str1,var0 = var0 + var2
add '\\val1' to str3,add var0 to var1,str3 += '\\val1',var1 += '\\val1'
"append the hexadecimal conversion of new followed by ', ' to the string str3",append hexadecimal conversion of new followed by var0 to string var1,"str3 += '%02x, ' % new","var1 += '%02x, ' % new"
append '0x' to the string str3,append var0 to string var1,str3 += '0x',var1 += var0
append the string value '\\x' to the variable str3,append string value var0 to variable var1,str3 += '\\x',var1 += '\\x'
append '\\x' to the string str3,append var0 to string var1,str3 += '\\x',var1 += '\\x'
add to the string str3 the first 7 element of leader converted in hex,add to string var0 first 7 element of leader converted in hex,str3 += hex ( leader ) [ : 7 ],var0 += hex ( leader ) [ : 7 ]
initialize an empty string str3,initialize empty string var0,str3 = '',var0 = ''
str3 is a string containing the hexadecimal conversion of str2,var0 is string containing hexadecimal conversion of var1,str3 = '%02x' % str2,var0 = '%02x' % var1
convert to hexadecimal the value of str2 and save it in str3,convert to hexadecimal value of var0 and save it in var1,str3 = '%02x' % str2,var1 = '%02x' % var0
set the string str3 to '0x',set string var0 to var1,str3 = '0x',var0 = var1
str3 is the concatenation of str3 and str2,var0 is concatenation of var0 and var2,str3 = str3 + str2,var0 = var0 + var2
add the string '0x' to str4,add string var0 to var1,str4 += '0x',var1 += var0
append to the string str4 the hexadecimal conversion of arr sliced at the index 6,append to string var0 hexadecimal conversion of var1 sliced at index 6,str4 += hex ( arr ) [ 6 : ],var0 += hex ( var1 ) [ 6 : ]
concatenate str4 with str3 and store the result in str4,concatenate var0 with var2 and store result in var0,str4 = str4 + str3,var0 = var0 + var2
add to string str5 the hexadecimal value of tmp sliced at the index 10,add to string var0 hexadecimal value of var1 sliced at index 10,str5 += hex ( tmp ) [ 10 : ],var0 += hex ( var1 ) [ 10 : ]
concatenate str5 with str4 and save the result in str5,concatenate var0 with var2 and save result in var0,str5 = str5 + str4,var0 = var0 + var2
close the file stream.,close file stream.,stream . close ( ),stream . close ( )
call the method stream.unget with an argument chunk.,call method var0 with argument chunk.,stream . unget ( chunk ),var0 ( chunk )
call the method stream.unget with last rollback elements of chunk as an argument.,call method var0 with last rollback elements of chunk as argument.,stream . unget ( chunk [ - rollback : ] ),var0 ( chunk [ - rollback : ] )
call the method stream.unget with list containing elements of chunk list from the header_end incremented by integer 4 as a start index to the end as argument.,call method var0 with list containing elements of chunk list from var1 var2 by integer 4 as start index to end as argument.,stream . unget ( chunk [ header_end + 4 : ] ),var0 ( chunk [ var1 + 4 : ] )
call the method stream.unget with elements of list chunk from the index next to the end.,call method var0 with elements of list chunk from index next to end.,stream . unget ( chunk [ next : ] ),var0 ( chunk [ next : ] )
"instantiate class ChunkIter with 2 arguments: self._input_data and self._chunk_size, use it to instantiate LazyStream class,","instantiate class var0 with 2 arguments: var1 and var2 use it to instantiate var3 class,","stream = LazyStream ( ChunkIter ( self . _input_data , self . _chunk_size ) )","stream = var3 ( var0 ( var1 , var2 ) )"
"open the output file in writing mode if output is true, assign the file descriptor to stream, otherwise stream is None.","open output file in writing mode if output is true, assign file descriptor to stream, otherwise stream is var0 ","stream = open ( output , 'w' ) if output else None","stream = open ( output , 'w' ) if output else var0"
substitute self._stream for stream.,substitute var0 for stream.,stream = self . _stream,stream = var0
substitute stream_or_string for stream.,substitute var0 for stream.,stream = stream_or_string,stream = var0
"call the function StringIO with an argument stream_or_string, substitute the result for stream.",call function var0 with argument var1 substitute result for stream.,stream = StringIO ( stream_or_string ),stream = var0 ( var1 )
substitute BytesIO for stream_class.,substitute var0 for var1 ,stream_class = BytesIO,var1 = var0
"substitute StringIO for stream_class if content is an instance of six.text_type, otherwise substitute BytesIO for stream_class.",substitute var0 for var1 if content is instance of six var6 otherwise substitute var7 for var1 ,"stream_class = StringIO if isinstance ( content , six . text_type ) else BytesIO","var1 = var0 if isinstance ( content , six . var6 ) else var7"
"call the method self.open, substitute the result for stream_created.",call method var0 substitute result for var1 ,stream_created = self . open ( ),var1 = var0 ( )
"call the method stream_or_string.decode with an argument string 'utf-8', substitute the result for stream_or_string.","call method var0 decode with argument string var4, substitute result for var0 ",stream_or_string = stream_or_string . decode ( 'utf-8' ),var0 = var0 . decode ( var4 )
"call the method stream_or_string.decode with string 'utf-8' as argument, substitute the result for stream_or_string.","call method var0 decode with string var4 as argument, substitute result for var0 ",stream_or_string = stream_or_string . decode ( 'utf-8' ),var0 = var0 . decode ( var4 )
"call the stream_or_string.read function, substitute the result for stream_or_string.","call var0 read function, substitute result for var0 ",stream_or_string = stream_or_string . read ( ),var0 = var0 . read ( )
streaming is boolean False.,streaming is boolean var0 ,streaming = False,streaming = var0
streaming is boolean True.,streaming is boolean var0 ,streaming = True,streaming = var0
"call the force_text function with 3 arguments: e.strerror, DEFAULT_LOCALE_ENCODING and strings_only set to boolean True.",call var0 function with 3 arguments: var2 var3 and var4 set to boolean var6 ,"strerror = force_text ( e . strerror , DEFAULT_LOCALE_ENCODING , strings_only = True )","strerror = var0 ( var2 , var3 , var4 = var6 )"
"strfunc is an instance of a class Name, created with 2 arguments: string ""__str__"" and prefix as unifunc.prefix.",var0 is instance of class var1 created with 2 arguments: string var2 and prefix as var3 ,"strfunc = Name ( '__str__' , prefix = unifunc . prefix )","var0 = var1 ( '__str__' , prefix = var3 )"
"call the function lazy with 2 arguments: _string_concat and six.text_type, substitute the result for string_concat.",call function lazy with 2 arguments: _string_concat and six var3 substitute result for var0 ,"string_concat = lazy ( _string_concat , six . text_type )","var0 = lazy ( _string_concat , six . var3 )"
substitute basestring for string_types.,substitute var0 for var1 ,"string_types = basestring ,","var1 = var0 ,"
assign StringIO.StringIO to StringIO and BytesIO.,assign var0 StringIO to var0 and var4 ,StringIO = BytesIO = StringIO . StringIO,var0 = var4 = var0 . var0
substitute io.StringIO for StringIO.,substitute io var1 for var1 ,StringIO = io . StringIO,var1 var0 io.var0ar1
"called with an argument value, return the result.   call the function allow_lazy with 2 arguments: strip_entities, six.text_type, substitute the result for strip_entities.","called with argument value, return result var0 call function var1 with 2 arguments: var2 six var7 substitute result for var2 ","strip_entities = allow_lazy ( strip_entities , six . text_type )","var2 = var1 ( var2 , six . var7 )"
"called with 3 arguments: raw string '[^a-zA-Z0-9]', empty string and result of the method table_name.title.   strip_prefix is a lambda function with an argument s, return value is s without the first element if s starts with string 'u'',","called with 3 arguments: raw string '[^a-zA-Z0-9]', empty string and result of method var2 title var5 is lambda function with argument s, return value is s var7 first element if s starts with string var8',",strip_prefix = lambda s : s [ 1 : ] if s . startswith ( 'u'' ) else s,var5 = lambda s: s [1:] if s.startswith(var8') else s
"called with an argument value, return the result.   call the function allow_lazy with 2 arguments: strip_spaces_between_tags, six.text_type, substitute the result for strip_spaces_between_tags.","called with argument value, return result var0 call function var1 with 2 arguments: var2 six var7 substitute result for var2 ","strip_spaces_between_tags = allow_lazy ( strip_spaces_between_tags , six . text_type )","var2 = var1 ( var2 , six . var7 )"
"call the color_style function, substitute the result for style.","call var0 function, substitute result for style.",style = color_style ( ),style = var0 ( )
style is an instance of the dummy class.,style is instance of dummy class.,style = dummy ( ),style = dummy ( )
substitute return value of function no_style for style.,substitute return value of function var0 for style.,style = no_style ( ),style = var0 ( )
"if f is not None append it to a list for every f in tuple containing 3 elements: style_func, self.style_func,",if f is not var0 append it to list for every f in tuple containing 3 elements: var1 self var1 ,"style_func = [ f for f in ( style_func , self . style_func , lambda x : x ) if f is not None ] [ 0 ]","var1 = [ f for f in ( var1 , self . var1 , lambda x : x ) if f is not var0 ] [ 0 ]"
reverse the order of elements of styles.,reverse order of elements of styles.,styles . reverse ( ),styles . reverse ( )
"split instructions by ',' character, substitute the result for styles.","split instructions by var0 character, substitute result for styles.","styles = instructions . split ( ', ' )","styles = instructions . split ( ', ' )"
"convert git_changeset to string, append it to the string '.dev', replace it for sub.","convert var0 to string, append it to string var2, replace it for sub.",sub = '.dev%s' % git_changeset,sub = '.dev%s' % var0
sub is an empty string.,sub is empty string.,sub = '',sub = ''
"use fourth element of version as a key to get the value from mapping dictionary, append to it fourth element of version converted to string, substitute it for sub.","use fourth element of version as key to get value from mapping dict, append to it fourth element of version converted to string, substitute it for sub.",sub = mapping [ version [ 3 ] ] + str ( version [ 4 ] ),sub = mapping [ version [ 3 ] ] + str ( version [ 4 ] )
"call the method pattern.resolve with an argument new_path, substitute the result for sub_match.",call method var0 with argument var1 substitute result for var2 ,sub_match = pattern . resolve ( new_path ),var2 = var0 ( var1 )
call the method sub_match_dict.update with an argument sub_match.kwargs.,call method var0 update with argument var1 kwargs.,sub_match_dict . update ( sub_match . kwargs ),var0 . update ( var1 . kwargs )
sub_match_dict is a dictionary created from self.default_kwargs dictionary using mapping function match.groupdict.,var0 is dict created from self var2 dict using mapping function var3 ,"sub_match_dict = dict ( match . groupdict ( ) , ** self . default_kwargs )","var0 = dict ( match . groupdict ( ) , ** self . var2 )"
"call the get method with an argument string 'tried' on the first element of the e.args, substitute the result for sub_tried.",call get method with argument string var0 on first element of var1 substitute result for var2 ,sub_tried = e . args [ 0 ] . get ( 'tried' ),var2 = var1 [ 0 ] . get ( var0 )
attrs as attrs_plus and choices as choice_label.   substitute self.choice_input_class for sub_ul_renderer.choice_input_class.,attrs as var0 and choices as var1 substitute self var5 for var7 var5 ,sub_ul_renderer . choice_input_class = self . choice_input_class,var7 . var5 = self . var5
"sub_ul_renderer is an instance of ChoiceFieldRenderer class, created with 4 arguments: name as self.name, value as self.value,","var0 is instance of var1 class, created with 4 arguments: name as var2 value as var3 ","sub_ul_renderer = ChoiceFieldRenderer ( name = self . name , value = self . value , attrs = attrs_plus , choices = choice_label )","var0 = var1 ( name = var2 , value = var3 , attrs = attrs_plus , choices = choice_label )"
"subclass is a instance of a class named Migration, derived from the base class Migration, with 1 field:",subclass is instance of class named var0 derived from base class var0 with 1 field:,"subclass = type ( 'Migration' , ( Migration , ) , { 'dependencies' : [ ( app_label , migration . name ) for migration in merge_migrations ] , } )","subclass = type ( 'var0' , ( var0 , ) , { 'dependencies' : [ ( app_label , migration . name ) for migration in merge_migrations ] } )"
"subclass is a class named Migration, sub classed from migrations.Migration base class, with fields dependencies set to an empty list,","subclass is class named var0 sub classed from migrations var0 base class, with fields dependencies set to empty list,","subclass = type ( 'Migration' , ( migrations . Migration , ) , { 'dependencies' : [ ] , 'operations' : new_operations , 'replaces' : replaces , } )","subclass = type ( 'var0' , ( migrations . var0 , ) , { 'dependencies' : [ ] , 'operations' : new_operations , 'replaces' : replaces } )"
subcommand is a string 'help'.,var0 is string var1.,subcommand = 'help',var0 = var1
substitute first element of self.argv for subcommand.,substitute first element of var0 for var1 ,subcommand = self . argv [ 1 ],var1 = var0 [ 1 ]
"call the method self.fetch_command with first element of cwords as an argument, substitute it for subcommand_cls.","call method self var1 with first element of var2 as argument, substitute it for var3 ",subcommand_cls = self . fetch_command ( cwords [ 0 ] ),var3 = self . var1 ( var2 [ 0 ] )
"subject is an string '%s (%s IP): %s', formated with record.levelname, string 'internal' if value under the 'REMOTE_ADDR' key,","subject is string var0, formated with var1 string var2 if value under var3 key,","subject = '%s (%s IP): %s' % ( record . levelname , ( 'internal' if request . META . get ( 'REMOTE_ADDR' ) in settings . INTERNAL_IPS else 'EXTERNAL' ) , record . getMessage ( ) )","subject = '%s(%s IP): %s' % ( var1 , var2 if request . META . get ( 'REMOTE_ADDR' ) in settings . INTERNAL_IPS else 'EXTERNAL' , record . getMessage ( ) )"
"subject is an string '%s: %s' formated with record.levelname and result of the method record.getMessage, respectively.",subject is string var0 formated with var1 and result of method record var3 respectively.,"subject = '%s: %s' % ( record . levelname , record . getMessage ( ) )","subject = var0 % ( var1 , record . var3 ( ) )"
"call the function self.format_subject with an argument subject, substitute the result for subject.","call function self var1 with argument subject, substitute result for subject.",subject = self . format_subject ( subject ),subject = self . var1 ( subject )
substitute self.subject for subject.,substitute var0 for subject.,subject = self . subject,subject = var0
"call the function _helper with 2 arguments: sublist_item and tabs incremented by 1, substitute the result for sublist.","call function var0 with 2 arguments: var1 and tabs var2 by 1, substitute result for sublist.","sublist = _helper ( sublist_item , tabs + 1 )","sublist = var0 ( var1 , tabs + 1 )"
sublist is an empty string.,var0 is empty string.,sublist = '',var0 = ''
"sublist is an string '\n%s<ul>\n%s\n%s</ul>\n%s', where every '%s' is replaced with indent, sublist, indent and indent, respectively.","var0 is string var2 var3 every var4 is replaced with indent var0 indent and indent, respectively.","sublist = '\n%s<ul>\n%s\n%s</ul>\n%s' % ( indent , sublist , indent , indent )","var0 = var2 % ( indent , var0 , indent , indent )"
substitute next_item for sublist_item.,substitute var0 for var1 ,sublist_item = next_item,var1 = var0
sublist_item is None.,var0 is var1 ,sublist_item = None,var0 = var1
substitute title for sublist_item.,substitute title for var0 ,sublist_item = title,var0 = title
"substitute the result for value under the 'clear_checkbox_name' key of the substitutions dictionary.   call the function conditional_escape with an argument checkbox_id,",substitute result for value under var0 key of substitutions dict var1 call function var2 with argument var4 ,substitutions [ 'clear_checkbox_id' ] = conditional_escape ( checkbox_id ),substitutions [ 'clear_checkbox_id' ] = var2 ( var4 )
"call the function conditional_escape with an argument checkbox_name,",call function var0 with argument var1 ,substitutions [ 'clear_checkbox_name' ] = conditional_escape ( checkbox_name ),substitutions [ 'clear_checkbox_name' ] = var0 ( var1 )
"attrs as a dictionary with an entry: checkbox_id for 'id',   substitute the result for value under the 'clear' key of the substitutions dictionary.   format self.template_with_clear with substitutions, substitute the result for value under the 'clear_template' key of,","var0 as dict with entry: var1 for var3 var4 substitute result for value under var6 key of substitutions dict var4 format self var8 with substitutions, substitute result for value under var9 key of,",substitutions [ 'clear_template' ] = self . template_with_clear % substitutions,substitutions [ var9 ] = self . var8 % substitutions
"substitute the result for value under the 'clear_checkbox_id' key of the substitutions dictionary.   call the method render from the instance of CheckboxInput class, with 3 arguments: checkbox_name, boolean False,","substitute result for value under var0 key of substitutions dict var1 call method render from instance of var2 class, with 3 arguments: var4 boolean var6 ","substitutions [ 'clear' ] = CheckboxInput ( ) . render ( checkbox_name , False , attrs = { 'id' : checkbox_id } )","substitutions [ 'clear' ] = var2 ( ) . render ( var4 , var6 , attrs = { 'id' : checkbox_id } )"
"call the function format_html with 3 arguments: self.url_markup_template, value.url and return value of the function force_text,",call function var0 with 3 arguments: self var2 var3 and return value of function var4 ,"substitutions [ 'initial' ] = format_html ( self . url_markup_template , value . url , force_text ( value ) )","substitutions [ 'initial' ] = var0 ( self . var2 , var3 , var4 ( value ) )"
"call the method render from the base class of the class ClearableFileInput, called with 3 arguments: name, value and attrs,","call method render from base class of class var0 called with 3 arguments: name, value and var1 ","substitutions [ 'input' ] = super ( ClearableFileInput , self ) . render ( name , value , attrs )","substitutions [ 'input' ] = super ( var0 , self ) . render ( name , value , var1 )"
"substitutions is a dictionary with 4 initial entries: self.initial_text for 'initial_text', self.input_text for 'input_text',","substitutions is dict with 4 initial entries: var0 for var1 var2 for var6,","substitutions = { 'initial_text' : self . initial_text , 'input_text' : self . input_text , 'clear_template' : '' , 'clear_checkbox_label' : self . clear_checkbox_label , }","substitutions = { var1 : var0 , 'input_text' : var2 , 'clear_template' : '' , 'clear_checkbox_label' : self . clear_checkbox_label }"
"substitute value under the 'suffix' key of dictionary d, substitute it for suffix.","substitute value under var0 key of dict d, substitute it for suffix.",suffix = d [ 'suffix' ],suffix = d [ var0 ]
"for every ext in combo, if ext is true, join it to a string, separated by '.', put the result in a tuple,","for every var0 in combo, if var0 is true, join it to string, separated by var2, put result in tuple,","suffixes = ( '.' . join ( ext for ext in combo if ext ) for combo in product ( databases , ser_fmts , cmp_fmts ) )","suffixes = ( var2 . join ( var0 for var0 in combo if var0 ) for combo in product ( databases , ser_fmts , cmp_fmts ) )"
sup_cls is base class of the class cls.,var0 is base class of class cls.,"sup_cls = super ( cls , self )","var0 = super ( cls , self )"
call the method __init__ with an argument name form the base class of the class _LazyModule.,call method var0 with argument name form base class of class var1 ,"super ( _LazyModule , self ) . __init__ ( name )","super ( var1 , self ) . var0 ( name )"
"call the method __init__ from the base class of the class AssignmentNode, with 3 arguments: takes_context, args and kwargs.",call method var0 from base class of class var1 with 3 arguments: var2 var4 and var5 ,"super ( AssignmentNode , self ) . __init__ ( takes_context , args , kwargs )","super ( var1 , self ) . var0 ( var2 , var4 , var5 )"
"call the method __init__ from the base class of the class BaseInlineFormSet, with 5 arguments: data, files, prefix set to prefix,","call method var0 from base class of class var1 with 5 arguments: data, files, prefix set to prefix,","super ( BaseInlineFormSet , self ) . __init__ ( data , files , prefix = prefix , queryset = qs , ** kwargs )","super ( var1 , self ) . var0 ( data , files , prefix = prefix , queryset = qs , ** kwargs )"
"call the method add_fields from the base class of the class BaseInlineFormSet, with 2 arguments: form and index.",call method var0 from base class of class var2 with 2 arguments: form and index.,"super ( BaseInlineFormSet , self ) . add_fields ( form , index )","super ( var2 , self ) . var0 ( form , index )"
call the initialization method with argument params for the base class of the BaseMemcachedCache class.,call initialization method with argument var0 for base class of var1 class.,"super ( BaseMemcachedCache , self ) . __init__ ( params )","super ( var1 , self ) . __init__ ( var0 )"
"call the method __init__ from the base class of the class BaseModelForm, with 8 arguments: data, files, auto_id, prefix, object_data,","call method var0 from base class of class var1 with 8 arguments: data, files var2 prefix var4 ","super ( BaseModelForm , self ) . __init__ ( data , files , auto_id , prefix , object_data , error_class , label_suffix , empty_permitted )","super ( var1 , self ) . var0 ( data , files , var2 , prefix , var4 , error_class , label_suffix , empty_permitted )"
"call the method __init__ from the base class of the class BaseModelFormSet, with an argument unpacked dictionary defaults.",call method var0 from base class of class var1 with argument unpacked dict defaults.,"super ( BaseModelFormSet , self ) . __init__ ( ** defaults )","super ( var1 , self ) . var0 ( ** defaults )"
"created with 4 arguments: qs, initial as pk_value, required as boolean False and widget as widget.   call the method add_fields from the base class of the class BaseModelFormSet, with 2 arguments: form and index.","created with 4 arguments: qs, initial as var0 required as boolean var2 and widget as widget var3 call method var4 from base class of class var6 with 2 arguments: form and index.","super ( BaseModelFormSet , self ) . add_fields ( form , index )","super ( var6 , self ) . var4 ( form , index )"
"call the method __init__ from the base class of the BaseTemporalField class, with arguments: unpacked list args and unpacked dictionary kwargs.","call method var0 from base class of var1 class, with arguments: unpacked list var2 and unpacked dict var3 ","super ( BaseTemporalField , self ) . __init__ ( * args , ** kwargs )","super ( var1 , self ) . var0 ( * var2 , ** var3 )"
"call the method __init__ from the base class of the class CharField, with arguments unpacked list args and unpacked dictionary kwargs.",call method var0 from base class of class var1 with arguments unpacked list var2 and unpacked dict var3 ,"super ( CharField , self ) . __init__ ( * args , ** kwargs )","super ( var1 , self ) . var0 ( * var2 , ** var3 )"
"call the method __init__ from the base class of the class CheckboxChoiceInput, with 2 arguments: unpacked list args,",call method var0 from base class of class var1 with 2 arguments: unpacked list var2 ,"super ( CheckboxChoiceInput , self ) . __init__ ( * args , ** kwargs )","super ( var1 , self ) . var0 ( * var2 , ** kwargs )"
"call the method __init__ from the base class of the class CheckboxInput, with an argument attrs.",call method var0 from base class of class var1 with argument var2 ,"super ( CheckboxInput , self ) . __init__ ( attrs )","super ( var1 , self ) . var0 ( var2 )"
"label set to None, initial set to None, help_text set to an empty string, unpacked list args and unpacked dictionary kwargs.   call the __init__ method of the base class of the class ChoiceField, called with 7 arguments: required set to required,","label set to var0 initial set to var0 var2 set to empty string, unpacked list var4 and unpacked dict var5 call var7 method of base class of class var8 called with 7 arguments: required set to required,","super ( ChoiceField , self ) . __init__ ( required = required , widget = widget , label = label , initial = initial , help_text = help_text , * args , ** kwargs )","super ( var8 , self ) . var7 ( * var4 , required = required , widget = widget , label = label , initial = initial , var2 = var2 , ** var5 )"
call the method validate with an argument value from the base class of the class ChoiceField.,call method validate with argument value from base class of class var0 ,"super ( ChoiceField , self ) . validate ( value )","super ( var0 , self ) . validate ( value )"
"call the method __init__ with 2 arguments: unpacked list args and unpacked dictionary kwargs, from the base class of the class ComboField.",call method var0 with 2 arguments: unpacked list var1 and unpacked dict var2 from base class of class var3 ,"super ( ComboField , self ) . __init__ ( * args , ** kwargs )","super ( var3 , self ) . var0 ( * var1 , ** var2 )"
call the method clean with an argument value from the base class of the class ComboField.,call method clean with argument value from base class of class var0 ,"super ( ComboField , self ) . clean ( value )","super ( var0 , self ) . clean ( value )"
call the method __init__ form the base class of the Command class.,call method var0 form base class of var1 class.,"super ( Command , self ) . __init__ ( )","super ( var1 , self ) . var0 ( )"
"call the method add_arguments from the base class of the class Command, with an argument parser.",call method var0 from base class of class var2 with argument parser.,"super ( Command , self ) . add_arguments ( parser )","super ( var2 , self ) . var0 ( parser )"
"call the function add_arguments with parser as an argument, from the base class of the Command class.","call function var0 with parser as argument, from base class of var2 class.","super ( Command , self ) . add_arguments ( parser )","super ( var2 , self ) . var0 ( parser )"
call the add_arguments method from the base class of the class Command with parser as an argument.,call var0 method from base class of class var2 with parser as argument.,"super ( Command , self ) . add_arguments ( parser )","super ( var2 , self ) . var0 ( parser )"
call the parent class of Command class add_arguments method and parser as the arguments.,call parent class of var0 class var1 method and parser as arguments.,"super ( Command , self ) . add_arguments ( parser )","super ( var0 , self ) . var1 ( parser )"
call the add_arguments method with parser as argument form the base class of the class Command.,call var0 method with parser as argument form base class of class var2 ,"super ( Command , self ) . add_arguments ( parser )","super ( var2 , self ) . var0 ( parser )"
"call the method add_arguments from the base class of the Command class, with an argument parser.","call method var0 from base class of var2 class, with argument parser.","super ( Command , self ) . add_arguments ( parser )","super ( var2 , self ) . var0 ( parser )"
"call the method execute form the base class of the class Command, with 2 arguments: unpacked list args and unpacked dictionary options.",call method execute form base class of class var0 with 2 arguments: unpacked list var1 and unpacked dict options.,"super ( Command , self ) . execute ( * args , ** options )","super ( var0 , self ) . execute ( * var1 , ** options )"
"as an app name. Please try another name., where '%r' is replaced with app_name.   call the method handle from the base class of Command class, with 4 arguments: string 'app', app_name, target and unpacked dictionary options.","as app name var2 try another name var3 var4 is replaced with var5 call method handle from base class of var10 class, with 4 arguments: string var11 var5 target and unpacked dict options.","super ( Command , self ) . handle ( 'app' , app_name , target , ** options )","super ( var10 , self ) . handle ( var11 , var5 , target , ** options )"
"call the handle method of the base class of the Command class, with 4 arguments: string 'project', project_name, target,","call handle method of base class of var0 class, with 4 arguments: string var1 var2 target,","super ( Command , self ) . handle ( 'project' , project_name , target , ** options )","super ( var0 , self ) . handle ( var1 , var2 , target , ** options )"
call the handle function with dictionary pair of elements options from the base class of the class Command.,call handle function with dict pair of elements options from base class of class var0 ,"super ( Command , self ) . handle ( ** options )","super ( var0 , self ) . handle ( ** options )"
"call the run_from_argv function from the base class of the Command class with argv as a argument,.","call var0 function from base class of var3 class with var2 as argument,.","super ( Command , self ) . run_from_argv ( argv )","super ( var3 , self ) . var0 ( var2 )"
"call the method __init__ from the base class of the CommandParser class, with unpacked dictionary kwargs as argument.","call method var0 from base class of var1 class, with unpacked dict var2 as argument.","super ( CommandParser , self ) . __init__ ( ** kwargs )","super ( var1 , self ) . var0 ( ** var2 )"
"call the method error with an argument message, from the base class of the class CommandParser.","call method error with argument message, from base class of class var0 ","super ( CommandParser , self ) . error ( message )","super ( var0 , self ) . error ( message )"
"call the __init__ method with stream_class(content) and name set to name arguments, from the base class of the ContentFile class.","call the __init__ method with stream_class(content) and name set to name arguments, from the base class of the ContentFile class.","super ( ContentFile , self ) . __init__ ( stream_class ( content ) , name = name )","super ( ContentFile , self ) . __init__ ( stream_class ( content ) , name = name )"
call the the method __init__ from the base class of the class Context.,call the method var0 from base class of class var1 ,"super ( Context , self ) . __init__ ( dict_ )","super ( var1 , self ) . var0 ( dict_ )"
"call the method __init__ from the base class of the class ContextDict, with 2 arguments: unpacked list args and unpacked dictionary kwargs.",call method var0 from base class of class var1 with 2 arguments: unpacked list var2 and unpacked dict var3 ,"super ( ContextDict , self ) . __init__ ( * args , ** kwargs )","super ( var1 , self ) . var0 ( * var2 , ** var3 )"
"call the method __init__ from the base class of the class DateTimeBaseInput, with an argument attrs.",call method var0 from base class of class var1 with argument var2 ,"super ( DateTimeBaseInput , self ) . __init__ ( attrs )","super ( var1 , self ) . var0 ( var2 )"
"call the method __init__ from the base class of the class DebugLexer, with 2 arguments: template_string and origin.",call method var0 from base class of class var1 with 2 arguments: var2 and origin.,"super ( DebugLexer , self ) . __init__ ( template_string , origin )","super ( var1 , self ) . var0 ( var2 , origin )"
"call the method __init__ with an argument lexer, from the base class of the class DebugParser.",call method var0 with argument var1 from base class of class var2 ,"super ( DebugParser , self ) . __init__ ( lexer )","super ( var2 , self ) . var0 ( var1 )"
"call the method extend_nodelist with 3 arguments: nodelist, node and token, from the base class of the class DebugParser.","call method var0 with 3 arguments: var2 node and token, from base class of class var3 ","super ( DebugParser , self ) . extend_nodelist ( nodelist , node , token )","super ( var3 , self ) . var0 ( var2 , node , token )"
"call the method __init__ from the base class of the class DecimalField, with 4 arguments: max_value, min_value,",call method var0 from base class of class var1 with 4 arguments: var2 var4 ,"super ( DecimalField , self ) . __init__ ( max_value , min_value , * args , ** kwargs )","super ( var1 , self ) . var0 ( var2 , var4 , * args , ** kwargs )"
call the method validate with an argument value from the base class of the DecimalField class.,call method validate with argument value from base class of var0 class.,"super ( DecimalField , self ) . validate ( value )","super ( var0 , self ) . validate ( value )"
call the method __init__ from the base class of the Deserializer class with arguments stream_or_string and unpacked dictionary options.,call method var0 from base class of var1 class with arguments var2 and unpacked dict options.,"super ( Deserializer , self ) . __init__ ( stream_or_string , ** options )","super ( var1 , self ) . var0 ( var2 , ** options )"
"call the method __init__ with an argument data, from the base class of the class DictWrapper.","call method var0 with argument data, from base class of class var1 ","super ( DictWrapper , self ) . __init__ ( data )","super ( var1 , self ) . var0 ( data )"
call the method __init__ from the base class of the DTDForbidden class.,call method var0 from base class of var1 class.,"super ( DTDForbidden , self ) . __init__ ( )","super ( var1 , self ) . var0 ( )"
"call the __init__ method from the base class of the EmailBackend class, with arguments: unpacked list args and unpacked dictionary kwargs.","call var0 method from base class of var1 class, with arguments: unpacked list var2 and unpacked dict var3 ","super ( EmailBackend , self ) . __init__ ( * args , ** kwargs )","super ( var1 , self ) . var0 ( * var2 , ** var3 )"
call the __init__ method of the base class of the EmailBackend class with arguments: unpacked list args and unpacked dictionary kwargs.,call var0 method of base class of var1 class with arguments: unpacked list var2 and unpacked dict var3 ,"super ( EmailBackend , self ) . __init__ ( * args , ** kwargs )","super ( var1 , self ) . var0 ( * var2 , ** var3 )"
"call the method __init__ from the base class of EmailBackend class, with arguments: unpacked list args and unpacked dictionary kwargs.","call method var0 from base class of var1 class, with arguments: unpacked list var2 and unpacked dict var3 ","super ( EmailBackend , self ) . __init__ ( * args , ** kwargs )","super ( var1 , self ) . var0 ( * var2 , ** var3 )"
"use_tls set to None, fail_silently set to False, use_ssl set to None, timeout set to None and unpacked dictionary kwargs.   call the __init__ method from the base class of the EmailBackend class with argument fail_silently set to fail_silently.",var0 set to var1 var4 set to var10 var11 set to var1 var13 set to var1 and unpacked dict var14 call var16 method from base class of var17 class with argument var4 set to var4 ,"super ( EmailBackend , self ) . __init__ ( fail_silently = fail_silently )","super ( var17 , self ) . var16 ( var4 = var4 )"
"call the method __init__ from the base class of the EmailMultiAlternatives class, with 9 arguments: subject, body, from_email, to,","call method var0 from base class of var1 class, with 9 arguments: subject, body var2 to,","super ( EmailMultiAlternatives , self ) . __init__ ( subject , body , from_email , to , bcc , connection , attachments , headers , cc )","super ( var1 , self ) . var0 ( subject , body , var2 , to , bcc , connection , attachments , headers , cc )"
call the method __init__ from the base class of the EntitiesForbidden class.,call method var0 from base class of var1 class.,"super ( EntitiesForbidden , self ) . __init__ ( )","super ( var1 , self ) . var0 ( )"
call the method __init__ with an argument initlist from the base class of the class ErrorList.,call method var0 with argument var1 from base class of class var2 ,"super ( ErrorList , self ) . __init__ ( initlist )","super ( var2 , self ) . var0 ( var1 )"
call the method __init__ from the base class of the ExternalReferenceForbidden class.,call method var0 from base class of var1 class.,"super ( ExternalReferenceForbidden , self ) . __init__ ( )","super ( var1 , self ) . var0 ( )"
call the method __init__ from the base class of the Field class.,call method var0 from base class of var1 class.,"super ( Field , self ) . __init__ ( )","super ( var1 , self ) . var0 ( )"
call method __init__ with argument params from the base class of the FileBaseCache.,call method var0 with argument var1 from base class of var2 ,"super ( FileBasedCache , self ) . __init__ ( params )","super ( FileBasedCache , self ) . var0 ( var1 )"
"substitute it for self.allow_empty_file, if not self.allow_empty_file is boolean False.   call the method __init__ from the base class of the FileField class, with 2 arguments: unpacked list args and unpacked dictionary.","substitute it for self var2 if not self var2 is boolean var4 call method var6 from base class of var7 class, with 2 arguments: unpacked list var9 and unpacked dict.","super ( FileField , self ) . __init__ ( * args , ** kwargs )","super ( var7 , self ) . var6 ( * var9 , ** kwargs )"
"call the __init__ method of the base class of the class FilePathField, with arguments: choices set to an empty tuple,4",call var0 method of base class of class var1 with arguments: choices set to empty var2,"super ( FilePathField , self ) . __init__ ( choices = ( ) , required = required , widget = widget , label = label , initial = initial , help_text = help_text , * args , ** kwargs )","super ( var1 , self ) . var0 ( * args , choices = ( ) , required = required , widget = widget , label = label , initial = initial , help_text = help_text , ** kwargs )"
"call the method validate with an argument value, from the base class of the FloatField class.","call method validate with argument value, from base class of var0 class.","super ( FloatField , self ) . validate ( value )","super ( var0 , self ) . validate ( value )"
call the __init__ method with unpacked list args and unpacked dictionary kwargs from the base class of the GenericIPAddressField class.,call var0 method with unpacked list var1 and unpacked dict var2 from base class of var3 class.,"super ( GenericIPAddressField , self ) . __init__ ( * args , ** kwargs )","super ( var3 , self ) . var0 ( * var1 , ** var2 )"
"call the __init__ method from the base class of the HttpResponse class, with the arguments: unpacked list args and unpacked dictionary kwargs.","call var0 method from base class of var1 class, with arguments: unpacked list var2 and unpacked dict var3 ","super ( HttpResponse , self ) . __init__ ( * args , ** kwargs )","super ( var1 , self ) . var0 ( * var2 , ** var3 )"
"call the __init__ method from the base class of the HttpResponseNotAllowed class, called with arguments: unpacked list args,","call var0 method from base class of var1 class, called with arguments: unpacked list var2 ","super ( HttpResponseNotAllowed , self ) . __init__ ( * args , ** kwargs )","super ( var1 , self ) . var0 ( * var2 , ** kwargs )"
"call the __init__ method from the base class of the HttpResponseNotModified class, called with arguments: unpacked list args,","call var0 method from base class of var1 class, called with arguments: unpacked list var2 ","super ( HttpResponseNotModified , self ) . __init__ ( * args , ** kwargs )","super ( var1 , self ) . var0 ( * var2 , ** kwargs )"
"where '%s' is replaced with parsed.scheme.   call the __init__ method from the base class of the HttpResponseRedirectBase class, called with arguments: unpacked list args,","var0 var1 is replaced with var2 call var4 method from base class of var5 class, called with arguments: unpacked list var7 ","super ( HttpResponseRedirectBase , self ) . __init__ ( * args , ** kwargs )","super ( var5 , self ) . var4 ( * var7 , ** kwargs )"
"if not self.isolated_context is boolean False.   call the method __init__ from the base class of the class IncludeNode, called with 2 arguments: unpacked dictionary args,",if not self var1 is boolean var2 call method var4 from base class of class var5 called with 2 arguments: unpacked dict var7 ,"super ( IncludeNode , self ) . __init__ ( * args , ** kwargs )","super ( var5 , self ) . var4 ( * var7 , ** kwargs )"
"call the method __init__ from the base class of the class InlineForeignKeyField, with 2 arguments unpacked list args,",call method var0 from base class of class var1 with 2 arguments unpacked list var2 ,"super ( InlineForeignKeyField , self ) . __init__ ( * args , ** kwargs )","super ( var1 , self ) . var0 ( * var2 , ** kwargs )"
"call the method __init__ from the base class of the InMemoryUploadedFile base class, with 6 arguments: file, name, content_type,","call method var0 from base class of var1 base class, with 6 arguments: file, name var2 ","super ( InMemoryUploadedFile , self ) . __init__ ( file , name , content_type , size , charset , content_type_extra )","super ( var1 , self ) . var0 ( file , name , var2 , size , charset , var2_extra )"
"call the method __init__ from the base class of the class IntegerField, with arguments unpacked list args and unpacked dictionary kwargs.",call method var0 from base class of class var1 with arguments unpacked list var2 and unpacked dict var3 ,"super ( IntegerField , self ) . __init__ ( * args , ** kwargs )","super ( var1 , self ) . var0 ( * var2 , ** var3 )"
and RemovedInDjango19Warning.   call the __init__ method with unpacked list args and unpacked dictionary kwargs from the base class of the IPAddressField class.,and var0 call var2 method with unpacked list var3 and unpacked dict var4 from base class of var5 class.,"super ( IPAddressField , self ) . __init__ ( * args , ** kwargs )","super ( var5 , self ) . var2 ( * var3 , ** var4 )"
call the method __init__ with 2 arguments: self.states and string 'reg' from the base class of the class JsLexer.,call method var0 with 2 arguments: var1 and string var2 from base class of class var3 ,"super ( JsLexer , self ) . __init__ ( self . states , 'reg' )","super ( var3 , self ) . var0 ( var1 , var2 )"
"call the __init__ method from the base class of the JsonResponse class, called with arguments: content set to data,","call var0 method from base class of var1 class, called with arguments: content set to data,","super ( JsonResponse , self ) . __init__ ( content = data , ** kwargs )","super ( var1 , self ) . var0 ( content = data , ** kwargs )"
"call the method __init__ with an argument display_name, from the base class of the LoaderOrigin class.",call method var0 with argument var1 from base class of var3 class.,"super ( LoaderOrigin , self ) . __init__ ( display_name )","super ( var3 , self ) . var0 ( var1 )"
"call the __init__ method of the base class of the class LocaleRegexURLResolver, with arguments:  None, urlconf_name, default_kwargs, app_name and namespace.",call var1 method of base class of class var2 with arguments: var3 var4 var6 var8 and var10 ,"super ( LocaleRegexURLResolver , self ) . __init__ ( None , urlconf_name , default_kwargs , app_name , namespace )","super ( var2 , var0self ) . var1 ( var3 , var0var4 , var0var6 , var0var8 , var0namespace )"
"created with 2 arguments: required as boolean False and widget set to HiddenInput.   call the method __init__ from the base class of the class ManagementForm, called with 2 arguments: unpacked list args,",created with 2 arguments: required as boolean var0 and widget set to var1 call method var4 from base class of class var5 called with 2 arguments: unpacked list var7 ,"super ( ManagementForm , self ) . __init__ ( * args , ** kwargs )","super ( var5 , self ) . var4 ( * var7 , ** kwargs )"
"call method __init__ from the base class of the class MemcachedCache with arguments: server, params,",call method var0 from base class of class var1 with arguments: server var2 ,"super ( MemcachedCache , self ) . __init__ ( server , params , library = memcache , value_not_found_exception = ValueError )","super ( var1 , self ) . var0 ( server , var2 , library = memcache , value_not_found_exception = ValueError )"
call the new_file method form the base class from the MemoryFileUploadHandler class with arguments: unpacked list args and unpacked list kwargs.,call var0 method form base class from var2 class with arguments: unpacked list var3 and unpacked list var4 ,"super ( MemoryFileUploadHandler , self ) . new_file ( * args , ** kwargs )","super ( var2 , self ) . var0 ( * var3 , ** var4 )"
"widget set to None, label set to None, initial set to None, help_text set to an empty strign,   unpacked list args and unpacked dictionary kwargs.   call the method __init__ from the base class of the class ModelMultipleChoiceField, with 10 arguments: queryset, None,",widget set to var0 label set to var0 initial set to var0 var4 set to empty var6 unpacked list var9 and unpacked dict var10 var7 call method var11 from base class of class var12 with 10 arguments: var14 var0 ,"super ( ModelMultipleChoiceField , self ) . __init__ ( queryset , None , cache_choices , required , widget , label , initial , help_text , * args , ** kwargs )","super ( var12 , self ) . var11 ( var14 , var0 , cache_choices , required , widget , label , initial , var4 , * var9 , ** var10 )"
call the method __init__ with an argument name form the base class of the class MovedAttribute.,call method var0 with argument name form base class of class var1 ,"super ( MovedAttribute , self ) . __init__ ( name )","super ( var1 , self ) . var0 ( name )"
call the __init__ method with an argument name from the base class of the MovedModule class.,call var0 method with argument name from base class of var1 class.,"super ( MovedModule , self ) . __init__ ( name )","super ( var1 , self ) . var0 ( name )"
"call the method __init__ from the base class of the class MultipleHiddenInput, called with an argument attrs.",call method var0 from base class of class var1 called with argument var2 ,"super ( MultipleHiddenInput , self ) . __init__ ( attrs )","super ( var1 , self ) . var0 ( var2 )"
"call the method __init__ from the base class of the class MultiValueDict, with an argument key_to_list_mapping.",call method var0 from base class of class var1 with argument var2 ,"super ( MultiValueDict , self ) . __init__ ( key_to_list_mapping )","super ( var1 , self ) . var0 ( var2 )"
"call the method __setitem__ from the base class of the class MultiValueDict, with 2 arguments key and list containing element value.",call method var0 from base class of class var1 with 2 arguments key and list containing element value.,"super ( MultiValueDict , self ) . __setitem__ ( key , [ value ] )","super ( var1 , self ) . var0 ( key , [ value ] )"
"call the method __setitem__ from the base class of the class MultiValueDict, with 2 arguments key and list_.",call method var0 from base class of class var1 with 2 arguments key and var2 ,"super ( MultiValueDict , self ) . __setitem__ ( key , list_ )","super ( var1 , self ) . var0 ( key , var2 )"
"if not, self.require_all_fields is boolean True.   call the method __init__ with 2 arguments: unpacked list args and unpacked dictionary kwargs, from the base class of the class MultiValueField.","if not, self var1 is boolean var2 call method var4 with 2 arguments: unpacked list var5 and unpacked dict var6 from base class of class var7 ","super ( MultiValueField , self ) . __init__ ( * args , ** kwargs )","super ( var7 , self ) . var4 ( * var5 , ** var6 )"
"if not append w to the list, substitute the resulting list for self.widgets.   call the method __init__ from the base class of the class MultiWidget, with an argument attrs.","if not append w to list, substitute resulting list for var0 call method var2 from base class of class var3 with argument var4 ","super ( MultiWidget , self ) . __init__ ( attrs )","super ( var3 , self ) . var2 ( var4 )"
"Use BaseCommand instead, which takes no arguments by default. and RemovedInDjango20Warning.   call the __init__ method from the base class of the NoArgsCommand class.",Use var0 instead var1 takes no arguments by default. and var2 call var5 method from base class of var6 class.,"super ( NoArgsCommand , self ) . __init__ ( )","super ( var6 , self ) . var5 ( )"
"called with an argument string 'Unknown', tuple with 2 elements: string '2' and return value of the function ugettext_lazy,   called with an argument string 'Yes' and tuple with 2 elements: string '3' and return value of the function ugettext_lazy,   called with an argument string 'No'.   call the method __init__ from the base class of the class NullBooleanSelect, with arguments attrs and choices.","called with argument string var0, tuple with 2 elements: string var1 and return value of function var2 called with argument string var9 and tuple with 2 elements: string var11 and return value of function var2 called with argument string var12 var6 call method var14 from base class of class var15 with arguments var17 and choices.","super ( NullBooleanSelect , self ) . __init__ ( attrs , choices )","super ( var15 , self ) . var14 ( var17 , choices )"
"call the method __init__ from the base class of the class PasswordInput, called with an argument attrs.",call method var0 from base class of class var1 called with argument var2 ,"super ( PasswordInput , self ) . __init__ ( attrs )","super ( var1 , self ) . var0 ( var2 )"
"call method __init__ from the base class of the class PyLibMCCache with arguments: server, params,",call method var0 from base class of class var1 with arguments: server var2 ,"super ( PyLibMCCache , self ) . __init__ ( server , params , library = pylibmc , value_not_found_exception = pylibmc . NotFound )","super ( var1 , self ) . var0 ( server , var2 , library = pylibmc , value_not_found_exception = pylibmc . NotFound )"
"call the method __delitem__ from the base class of the QueryDict class, with an argument key.","call method __delitem__ from base class of var0 class, with argument key.","super ( QueryDict , self ) . __delitem__ ( key )","super ( var0 , self ) . __delitem__ ( key )"
call the __init__ method of the base class of the QueryDict class.,call var0 method of base class of var1 class.,"super ( QueryDict , self ) . __init__ ( )","super ( var1 , self ) . var0 ( )"
"call the method __setitem__ from the base class of the QueryDict class, with arguments key and value.","call method var0 from base class of var1 class, with arguments key and value.","super ( QueryDict , self ) . __setitem__ ( key , value )","super ( var1 , self ) . var0 ( key , value )"
"call the method appendlist from the base class of the QueryDict class, with arguments key and value.","call method var0 from base class of var1 class, with arguments key and value.","super ( QueryDict , self ) . appendlist ( key , value )","super ( var1 , self ) . var0 ( key , value )"
"call the method clear from the base class of the class QueryDict, return the result.",call method clear from base class of class var0 return result.,"super ( QueryDict , self ) . clear ( )","super ( var0 , self ) . clear ( )"
"substitute the resulting list for list_.   call the method setlist from the base class of the QueryDict class, with arguments key and list_.","substitute resulting list for var0 call method var3 from base class of var4 class, with arguments key and var0 ","super ( QueryDict , self ) . setlist ( key , list_ )","super ( var4 , self ) . var3 ( key , var0 )"
"call the method __init__ from the base class of the class RadioChoiceInput, with 2 arguments: unpacked list args,",call method var0 from base class of class var1 with 2 arguments: unpacked list var2 ,"super ( RadioChoiceInput , self ) . __init__ ( * args , ** kwargs )","super ( var1 , self ) . var0 ( * var2 , ** kwargs )"
"call the method __init__ from the base class of the class RegexField, with 4 arguments: max_length, min_length, unpacked list args,",call method var0 from base class of class var1 with 4 arguments: var2 var3 unpacked list var5 ,"super ( RegexField , self ) . __init__ ( max_length , min_length , * args , ** kwargs )","super ( var1 , self ) . var0 ( var2 , var3 , * var5 , ** kwargs )"
"call the method __init__ from the base class of the class RendererMixin, with 2 arguments: unpacked list args,",call method var0 from base class of class var1 with 2 arguments: unpacked list var2 ,"super ( RendererMixin , self ) . __init__ ( * args , ** kwargs )","super ( var1 , self ) . var0 ( * var2 , ** kwargs )"
"call the method __init__ from the base class of the class Select, with an argument attrs.",call method var0 from base class of class var1 with argument var2 ,"super ( Select , self ) . __init__ ( attrs )","super ( var1 , self ) . var0 ( var2 )"
"call the handle_filed method of the base class of the Serializer class, with arguments obj and field.","call var0 method of base class of var2 class, with arguments var3 and field.","super ( Serializer , self ) . handle_field ( obj , field )","super ( var2 , self ) . handle_field ( var3 , field )"
from the base class of the SimpleCookie class call the method load with rawdata as argument.,from base class of var0 class call method load with var1 as argument.,"super ( SimpleCookie , self ) . load ( rawdata )","super ( var0 , self ) . load ( var1 )"
"call the __init__ method from the base class of the class SimpleTemplateResponse, with 3 arguments: an empty string, content_type and status.",call var0 method from base class of class var1 with 3 arguments: empty string var2 and status.,"super ( SimpleTemplateResponse , self ) . __init__ ( '' , content_type , status )","super ( var1 , self ) . var0 ( '' , var2 , status )"
"call the __init__ method from the base class of the SimpleUploadedFile class with 7 arguments: BytesIO(content), None, name,","call the __init__ method from the base class of the SimpleUploadedFile class with 7 arguments: BytesIO(content), None, name,","super ( SimpleUploadedFile , self ) . __init__ ( BytesIO ( content ) , None , name , content_type , len ( content ) , None , None )","super ( SimpleUploadedFile , self ) . __init__ ( BytesIO ( content ) , None , name , content_type , len ( content ) , None , None )"
"call the method __delitem__ from the base class of the class SortedDict, with an argument key.",call method __delitem__ from base class of class var0 with argument key.,"super ( SortedDict , self ) . __delitem__ ( key )","super ( var0 , self ) . __delitem__ ( key )"
call the method __init__ from the base class of the class SortedDict.,call method var0 from base class of class var1 ,"super ( SortedDict , self ) . __init__ ( )","super ( var1 , self ) . var0 ( )"
"call the method __init__ from the base class of the class SortedDict, called with an argument data.",call method var0 from base class of class var1 called with argument data.,"super ( SortedDict , self ) . __init__ ( data )","super ( var1 , self ) . var0 ( data )"
"call the method __setitem__ from the base class of the class SortedDict, with 2 arguments key and value.",call method var0 from base class of class var1 with 2 arguments key and value.,"super ( SortedDict , self ) . __setitem__ ( key , value )","super ( var1 , self ) . var0 ( key , value )"
call the method clear from the base class of the class SortedDict.,call method clear from base class of class var0 ,"super ( SortedDict , self ) . clear ( )","super ( var0 , self ) . clear ( )"
"error_messages as an dictionary with an entry: value under the 'invalid_date' of errors dictionary for 'invalid',   localize set to localize, and an instance of the class TimeField created with 3 arguments: input_formats set to input_time_formats,   error_messages as an dictionary with an entry: value under the 'invalid_time' of errors dictionary for 'invalid',   localize set to localize   call the __init__ method with fields, unpacked list args and unpacked dictionary kwargs from the base class of the SplitDateTimeField class.","var0 as dict with entry: value under var3 of errors dict for var4 var6 localize set to localize, and instance of class var10 created with 3 arguments: var12 set to var14 var0 as dict with entry: value under var16 of errors dict for var4 var6 localize set to localize call var19 method with fields, unpacked list var20 and unpacked dict var21 from base class of var22 class.","super ( SplitDateTimeField , self ) . __init__ ( fields , * args , ** kwargs )","super ( var22 , self ) . var19 ( fields , * var20 , ** var21 )"
"and instance of TimeInput class, created with 2 arguments: attrs set to attrs and format set to date_format.   call the method __init__ from the base class of the class SplitDateTimeWidget, with 2 arguments: widgets and attrs.","and instance of var0 class, created with 2 arguments: var1 set to var1 and format set to var4 call method var7 from base class of class var8 with 2 arguments: widgets and var1 ","super ( SplitDateTimeWidget , self ) . __init__ ( widgets , attrs )","super ( var8 , self ) . var7 ( widgets , var1 )"
"call the method __init__ from the base class of the class SplitHiddenDateTimeWidget, with 3 arguments: attrs, date_format,  and time_format.",call method var1 from base class of class var2 with 3 arguments: var3 var4 and var6var0,"super ( SplitHiddenDateTimeWidget , self ) . __init__ ( attrs , date_format , time_format )","super ( var2 , var0self ) . var1 ( var3 , var0var4 , var0var6 )"
"and unpacked dictionary kwargs.   call the __init__ method from the base class of the StreamingHttpResponse class, called with arguments: unpacked list args,","and unpacked dict var0 call var3 method from base class of var4 class, called with arguments: unpacked list var1 ","super ( StreamingHttpResponse , self ) . __init__ ( * args , ** kwargs )","super ( var4 , self ) . var3 ( * var1 , ** var0 )"
"call the method __init__ with an argument UNKNOWN_SOURCE, from the base class of the class StringOrigin.",call method var0 with argument var1 from base class of class var2 ,"super ( StringOrigin , self ) . __init__ ( UNKNOWN_SOURCE )","super ( var2 , self ) . var0 ( var1 )"
"call the method __init__ from the base class of the class TemplateIfParser, with 2 arguments: unpacked list args and unpacked dictionary.",call method var0 from base class of class var1 with 2 arguments: unpacked list var2 and unpacked dict.,"super ( TemplateIfParser , self ) . __init__ ( * args , ** kwargs )","super ( var1 , self ) . var0 ( * var2 , ** kwargs )"
"call the __init__ method from the base class of the class TemplateResponse, with 4 arguments: template, context, content_type, status.","call var0 method from base class of class var1 with 4 arguments: template, context var2 status.","super ( TemplateResponse , self ) . __init__ ( template , context , content_type , status )","super ( var1 , self ) . var0 ( template , context , var2 , status )"
"call the __init__ method from the base class of the TemporaryFileUploadHandler class with arguments: unpacked list args,",call var0 method from base class of var1 class with arguments: unpacked list var2 ,"super ( TemporaryFileUploadHandler , self ) . __init__ ( * args , ** kwargs )","super ( var1 , self ) . var0 ( * var2 , ** kwargs )"
"call the method new_file from the base class of the TemporaryFileUploadHandler class with arguments: file_name, unpacked list args and unpacked dictionary kwargs.",call method var0 from base class of var2 class with arguments: var3 unpacked list var4 and unpacked dict var5 ,"super ( TemporaryFileUploadHandler , self ) . new_file ( file_name , * args , ** kwargs )","super ( var2 , self ) . var0 ( var3 , * var4 , ** var5 )"
"call the method __init__ from the base class of the TemporaryUploadedFile class with arguments: file, name, content_type, size, charset and content_type_extra.","call method var0 from base class of var1 class with arguments: file, name var2 size var4 and var5 ","super ( TemporaryUploadedFile , self ) . __init__ ( file , name , content_type , size , charset , content_type_extra )","super ( var1 , self ) . var0 ( file , name , var2 , size , var4 , var2_extra )"
"call the method __init__ from the base class of the class Textarea, with an argument default_attrs.",call method var0 from base class of class var1 with argument var2 ,"super ( Textarea , self ) . __init__ ( default_attrs )","super ( var1 , self ) . var0 ( var2 )"
"substitute self.input_type for self.input_type.   call the method __init__ from the base class of the class TextInput, called with an argument attrs.",substitute self var2 for self var2 call method var5 from base class of class var6 called with argument var7 ,"super ( TextInput , self ) . __init__ ( attrs )","super ( var6 , self ) . var5 ( var7 )"
"call the method __init__ from the base class of the class Truncator,",call method var0 from base class of class var1 ,"super ( Truncator , self ) . __init__ ( lambda : force_text ( text ) )","super ( var1 , self ) . var0 ( lambda : force_text ( text ) )"
"if not, sself.empty_value is an empty string.   call the method __init__ with 2 arguments: unpacked list args and unpacked dictionary kwargs,","if not, sself var1 is empty string var2 call method var3 with 2 arguments: unpacked list var4 and unpacked dict var5 ","super ( TypedChoiceField , self ) . __init__ ( * args , ** kwargs )","super ( TypedChoiceField , self ) . var3 ( * var4 , ** var5 )"
"if not, self.empty_value is an empty list.   call the method __init__ with 2 arguments: unpacked list args and unpacked dictionary kwargs,","if not, self var1 is empty list var2 call method var3 with 2 arguments: unpacked list var4 and unpacked dict var5 ","super ( TypedMultipleChoiceField , self ) . __init__ ( * args , ** kwargs )","super ( TypedMultipleChoiceField , self ) . var3 ( * var4 , ** var5 )"
call the method validate with an argument value from the base class of the class TypedMultipleChoiceField.,call method validate with argument value from base class of class var0 ,"super ( TypedMultipleChoiceField , self ) . validate ( value )","super ( var0 , self ) . validate ( value )"
"call the __init__ method with arguments file and name, from the base class of the UploadedFile class.","call var0 method with arguments file and name, from base class of var1 class.","super ( UploadedFile , self ) . __init__ ( file , name )","super ( var1 , self ) . var0 ( file , name )"
"call the __call__ method from the base class of the URLValidator class, with an argument url.","call var0 method from base class of var1 class, with argument url.","super ( URLValidator , self ) . __call__ ( url )","super ( var1 , self ) . var0 ( url )"
"call the __call__ method from the base class of the class URLValidator, with an argument value.",call var0 method from base class of class var1 with argument value.,"super ( URLValidator , self ) . __call__ ( value )","super ( var1 , self ) . var0 ( value )"
"call the __init__ method of the base class of the class URLValidator, with unpacked dictionary kwargs as argument.",call var0 method of base class of class var1 with unpacked dict var2 as argument.,"super ( URLValidator , self ) . __init__ ( ** kwargs )","super ( var1 , self ) . var0 ( ** var2 )"
"call the __init__ method from the base class of the class ValidationError with arguments message, code and params.","call var0 method from base class of class var1 with arguments message, code and var2 ","super ( ValidationError , self ) . __init__ ( message , code , params )","super ( var1 , self ) . var0 ( message , code , var2 )"
"call the __init__ method from the base class of the WSGIRequestHandler class, with 2 arguments: unpacked list args and unpacked dictionary kwargs.","call var0 method from base class of var1 class, with 2 arguments: unpacked list var2 and unpacked dict var3 ","super ( WSGIRequestHandler , self ) . __init__ ( * args , ** kwargs )","super ( var1 , self ) . var0 ( * var2 , ** var3 )"
"call the __init__ method from the base class of the WSGIServer class, with 2 arguments: unpacked list args and unpacked dictionary kwargs.","call var0 method from base class of var1 class, with 2 arguments: unpacked list var2 and unpacked dict var3 ","super ( WSGIServer , self ) . __init__ ( * args , ** kwargs )","super ( var1 , self ) . var0 ( * var2 , ** var3 )"
call the server_bind method from the base class of the WSGIServer class.,call var0 method from base class of var2 class.,"super ( WSGIServer , self ) . server_bind ( )","super ( var2 , self ) . var0 ( )"
call the function super_set with 2 arguments: key and value.,call function var0 with 2 arguments: key and value.,"super_set ( key , value )","var0 ( key , value )"
supported is boolean False.,supported is boolean var0 ,supported = False,supported = var0
supported is boolean True.,supported is boolean var0 ,supported = True,supported = var0
"evaluate the logic expression, plat does not equals to string 'Pocket PC', and plat does not equals to string 'win32'","evaluate logic expression, plat does not equals to string var0, and plat does not equals to string var1",supported_platform = plat != 'Pocket PC' and ( plat != 'win32' or 'ANSICON' in os . environ ),supported_platform = plat != var0 and ( plat != 'win32' or 'ANSICON' in os . environ )
initialize an empty string variable called surname,initialize empty string variable called surname,surname = '',surname = ''
"separate every 5 characters of the string my_list with the separator "", """,separate every 5 characters of string var0 with separator var2,"swapped = ', ' . join ( my_list [ i : i + 5 ] for i in range ( 0 , len ( my_list ) , 5 ) )","swapped = ', ' . join ( var0 [ i : i + 5 ] for i in range ( 0 , len ( var0 ) , 5 ) )"
"separate every 4 characters of the string swapped with the separator ""? """,separate every 4 characters of string swapped with separatorvar0?var0,"swapped = '? ' . join ( swapped [ i : i + 4 ] for i in range ( 0 , len ( swapped ) , 4 ) )","swapped = '? ' . join ( swapped [ i : i + 4 ] for i in range ( 0 , len ( swapped ) , 4 ) )"
"separate every 4 characters of the string swapped with the separator "". """,separate every 4 characters of string swapped with separator var0,"swapped = '. ' . join ( swapped [ i : i + 4 ] for i in range ( 0 , len ( swapped ) , 4 ) )","swapped = '.' . join ( swapped [ i : i + 4 ] for i in range ( 0 , len ( swapped ) , 4 ) )"
"add ""0x"" to every 2 characters of the variable swapped",add var0 to every 2 characters of variable swapped,"swapped = '0x' + '0x' . join ( a + b for a , b in zip ( swapped [ : : 2 ] , swapped [ 1 : : 2 ] ) )","swapped = '0x' + '0x' . join ( a + b for a , b in zip ( swapped [ : : 2 ] , swapped [ 1 : : 2 ] ) )"
"add ""0x"" to every 2 characters of swapped",add var0 to every 2 characters of swapped,"swapped = '0x' + '0x' . join ( a + b for a , b in zip ( swapped [ : : 2 ] , swapped [ 1 : : 2 ] ) )","swapped = '0x' + '0x' . join ( a + b for a , b in zip ( swapped [ : : 2 ] , swapped [ 1 : : 2 ] ) )"
assign swapped the hexadecimal values of the bytearray of swapped,assign swapped hexadecimal values of var0 of swapped,swapped = binascii . hexlify ( bytearray ( swapped ) ),swapped = binascii . hexlify ( var0 ( swapped ) )
"syear is a string ""%04d"" formated with dt.year.",var0 is string var1 formated with var2 ,"syear = '%04d' % ( dt . year , )","var0 = '%04d' % ( var2 , )"
"join tmpdir and sting 'symlink' into a file path name, substitute it for symlink_path.","join var0 and sting var1 into file path name, substitute it for var2 ","symlink_path = os . path . join ( tmpdir , 'symlink' )","var2 = os . path . join ( var0 , var1 )"
exit program with code integer 0.,exit program with code integer 0.,sys . exit ( 0 ),sys . exit ( 0 )
close the process with an argument 0.,close process with argument 0.,sys . exit ( 0 ),sys . exit ( 0 )
where '%r' is replaced with subcommand and '%s' is replaced with self.prog_name.   call the function sys.exit with an argument integer 1.,var0 var1 is replaced with var2 and var3 is replaced with self var6 call function var8 with argument integer 1.,sys . exit ( 1 ),var8 ( 1 )
call the function sys.exit with an integer 1 as an argument.,call function var0 with integer 1 as argument.,sys . exit ( 1 ),var0 ( 1 )
call the function sys.exit with an argument integer 1.,call function var0 with argument integer 1.,sys . exit ( 1 ),var0 ( 1 )
close the process with an argument 1.,close process with argument 1.,sys . exit ( 1 ),sys . exit ( 1 )
write it for self.stderr.   exit the program with the integer 2 as exit code.,write it for var0 exit program with integer 2 as exit code.,sys . exit ( 2 ),sys . exit ( 2 )
call the function sys.exit with argument integer 3.,call function var0 with argument integer 3.,sys . exit ( 3 ),var0 ( 3 )
exit the program with failures converted to boolean as a message.,exit program with failures converted to boolean as message.,sys . exit ( bool ( failures ) ),sys . exit ( bool ( failures ) )
call the function sys.exit with argument exit_code.,call function var0 with argument var1 ,sys . exit ( exit_code ),var0 ( var1 )
"concatenate __name__, string '.moves' and attr.name together, use it as an key to get the value from the sys.modules dictionary,","concatenate __name__, string var0 and var1 together, use it as key to get value from var2 dict,",sys . modules [ __name__ + '.moves.' + attr . name ] = attr,var2 [ __name__ + '.moves.' + var1 ] = attr
"call the method Module_six_moves_urllib_request with an argument: string "".moves.urllib.error"" appended to __name__,",call method var0 with argument: string var2 appended to var3 ,sys . modules [ __name__ + '.moves.urllib_error' ] = sys . modules [ __name__ + '.moves.urllib.error' ] = Module_six_moves_urllib_error ( __name__ + '.moves.urllib.error' ),sys . modules [ var3 + '.moves.urllib_error' ] = sys . modules [ var3 + '.moves.urllib.error' ] = Module_six_moves_urllib_error ( var3 + '.moves.urllib.error' )
"call the method Module_six_moves_urllib_request with an argument: string "".moves.urllib_parse"" appended to __name__,",call method var0 with argument: string var2 appended to var3 ,sys . modules [ __name__ + '.moves.urllib_parse' ] = sys . modules [ __name__ + '.moves.urllib.parse' ] = Module_six_moves_urllib_parse ( __name__ + '.moves.urllib_parse' ),sys . modules [ var3 + '.moves.urllib_parse' ] = sys . modules [ var3 + '.moves.urllib.parse' ] = Module_six_moves_urllib_parse ( var3 + '.moves.urllib_parse' )
"call the method Module_six_moves_urllib_request with an argument: string "".moves.urllib.request"" appended to __name__,",call method var0 with argument: string var2 appended to var3 ,sys . modules [ __name__ + '.moves.urllib_request' ] = sys . modules [ __name__ + '.moves.urllib.request' ] = Module_six_moves_urllib_request ( __name__ + '.moves.urllib.request' ),sys . modules [ var3 + '.moves.urllib_request' ] = sys . modules [ var3 + '.moves.urllib.request' ] = var0 ( var3 + '.moves.urllib.request' )
"instantiate class Module_six_moves_urllib_response with an argument, string "".moves.urllib.response"" appended to __name__,","instantiate class var0 with argument, string var2 appended to var3 ",sys . modules [ __name__ + '.moves.urllib_response' ] = sys . modules [ __name__ + '.moves.urllib.response' ] = Module_six_moves_urllib_response ( __name__ + '.moves.urllib.response' ),sys . modules [ var3 + '.moves.urllib_response' ] = sys . modules [ var3 + '.moves.urllib.response' ] = var0 ( var3 + '.moves.urllib.response' )
"instantiate class Module_six_moves_urllib_robotparser with an argument, string "".moves.urllib.robotparser"" appended to __name__,","instantiate class var0 with argument, string var2 appended to var3 ",sys . modules [ __name__ + '.moves.urllib_robotparser' ] = sys . modules [ __name__ + '.moves.urllib.robotparser' ] = Module_six_moves_urllib_robotparser ( __name__ + '.moves.urllib.robotparser' ),sys . modules [ var3 + '.moves.urllib_robotparser' ] = sys . modules [ var3 + '.moves.urllib.robotparser' ] = var0 ( var3 + '.moves.urllib.robotparser' )
"instantiate class Module_six_moves_urllib with an argument, string "".moves.urllib"" appended to __name__,","instantiate class var0 with argument, string var2 appended to var3 ",sys . modules [ __name__ + '.moves.urllib' ] = Module_six_moves_urllib ( __name__ + '.moves.urllib' ),sys . modules [ var3 + '.moves.urllib' ] = var0 ( var3 + '.moves.urllib' )
insert options.pythonpath at the beginning of sys.path.,insert var0 at beginning of var1 ,"sys . path . insert ( 0 , options . pythonpath )","var1 . insert ( 0 , var0 )"
call the method sys.stderr.close.,call method var0 ,sys . stderr . close ( ),var0 ( )
"call the method sys.stderr.write with an argument string ""  as a FastCGI application, you will need to get flup from\n"".",call method var0 with argument string var1.,"sys . stderr . write ( '  as a FastCGI application, you will need to get flup from\n' )","var0 ( '  as a FastCGI application, you will need to get flup from\n' )"
"call the method sys.stderr.write with an argument string ""  http://www.saddi.com/software/flup/   If you've already\n"".",call method var0 with argument string var1.,sys . stderr . write ( '  http://www.saddi.com/software/flup/   If you've already\n' ),var0('  http://www.saddi.com/software/flup/   If you've already\n')
"call the method sys.stderr.write with an argument string ""  installed flup, then make sure you have it in your PYTHONPATH.\n"".",call method var0 with argument string var1.,"sys . stderr . write ( '  installed flup, then make sure you have it in your PYTHONPATH.\n' )","var0 ( '  installed flup, then make sure you have it in your PYTHONPATH.\n' )"
"call the method sys.stderr.write with an argument string ""  Unable to load the flup package.  In order to run django\n"".",call method var0 with argument string var1.,sys . stderr . write ( '  Unable to load the flup package.  In order to run django\n' ),var0 ( '  Unable to load the flup package. In order to run django\n' )
"call the method sys.stderr.write with an argument string ""ERROR: %s\n"", where '%s' is replaced by e.",call method var0 with argument string var1 var2 var3 is replaced by var4,sys . stderr . write ( 'ERROR: %s\n' % e ),var0 ( 'ERROR: %s\n' % e )
"call the method sys.stderr.write with an argument string ""fork #1 failed: (%d) %s\n"", formated with e.errno and e.strerror.","call method var0 with argument string var1, formated with var2 and var3 ","sys . stderr . write ( 'fork #1 failed: (%d) %s\n' % ( e . errno , e . strerror ) )","var0 ( 'fork #1 failed:(%d) %s\n' % ( var2 , var3 ) )"
"call the method sys.stderr.write with an argument string ""fork #2 failed: (%d) %s\n"", formated with e.errno and e.strerror.","call method var0 with argument string var1, formated with var2 and var3 ","sys . stderr . write ( 'fork #2 failed: (%d) %s\n' % ( e . errno , e . strerror ) )","var0 ( 'fork #2 failed:(%d) %s\n' % ( var2 , var3 ) )"
"call the method sys.stderr.write with an argument string ""Unknown command: %r\nType '%s help' for usage.\n"",","call method var0 with argument string var1,","sys . stderr . write ( 'Unknown command: %r\nType '%s help' for usage.\n' %  ( subcommand , self . prog_name ) )","var0('Unknown command: %r\nType '%s help' for usage.\n' % (subcommand, self.prog_name))"
call the sys.stderr.write function with an argument msg.,call var0 function with argument msg.,sys . stderr . write ( msg ),var0 ( msg )
sys.stderr is an instance of NullDevice class.,var0 is instance of var1 class.,sys . stderr = NullDevice ( ),var0 = var1 ( )
"open err_log file in append mode with buffering size of the input buffer, substitute the result for sys.stderr.","open var0 file in append mode with buffering size of input buffer, substitute result for var1 ","sys . stderr = open ( err_log , 'a' , buffering )","var1 = open ( var0 , 'a' , buffering )"
call the method sys.stdin.close.,call method var0 ,sys . stdin . close ( ),var0 ( )
substitute so and se for sys.stdout and sys.stderr.,substitute so and se for var0 and var1 ,"sys . stdout , sys . stderr = so , se","var0 , var1 = so , se"
call the method sys.stdout.close.,call method var0 ,sys . stdout . close ( ),var0 ( )
"call the method django.get_version append new line to it, write it to sys.stdout.","call method django var1 append new line to it, write it to var2 ",sys . stdout . write ( django . get_version ( ) + '\n' ),var2 . write ( django . var1 ( ) + '\n' )
"call the method self.main_help_text append new line to it, write it to sys.stdout.","call method self var1 append new line to it, write it to var2 ",sys . stdout . write ( self . main_help_text ( ) + '\n' ),var2 . write ( self . var1 ( ) + '\n' )
"and a list containing a string '-h',   call the method self.main_help_text, append new line to it, write it to sys.stdout.","and list containing string var0 var1 call method self var3 append new line to it, write it to var4 ",sys . stdout . write ( self . main_help_text ( ) + '\n' ),var4 . write ( self . var3 ( ) + '\n' )
"call the method self.main_help_text with an argument commands_only set to boolean True, append new line to it, write it to sys.stdout.","call method self var1 with argument var2 set to boolean var4 append new line to it, write it to var5 ",sys . stdout . write ( self . main_help_text ( commands_only = True ) + '\n' ),var5 . write ( self . var1 ( var2 = var4 ) + '\n' )
sys.stdout is an instance of NullDevice class.,var0 is instance of var1 class.,sys . stdout = NullDevice ( ),var0 = var1 ( )
exit the program,exit program,sys . exit ( ),sys . exit ( )
exit the program with code 1,exit program with code 1,sys . exit ( 1 ),sys . exit ( 1 )
exit the program with exit code 2,exit program with exit code 2,sys . exit ( 2 ),sys . exit ( 2 )
"call the function F with an argument x, for every x in sequence of integers from 1 to l, not included,","call function F with argument x, for every x in sequence of integers from 1 to l, not included,","T = [ F ( x ) for x in range ( 1 , l ) ]","T = [ F ( x ) for x in range ( 1 , l ) ]"
substitute file_name for t.,substitute var0 for var1,t = file_name,t = var0
"call the function get_template with an argument file_name, substitute the result for t.",call function var0 with argument var1 substitute result for var2,t = get_template ( file_name ),t = var0 ( var1 )
"call the function get_template with 2 arguments: template_name and dirs, substitute the result for t.",call function var0 with 2 arguments: var1 and var3 substitute result for var4,"t = get_template ( template_name , dirs )","t = var0 ( var1 , var3 )"
"get 'value' attribute of the _active object, if it exists substitute it for t, if not t is None.","get var0 attribute of _active object, if it exists substitute it for t, if not t is var1 ","t = getattr ( _active , 'value' , None )","t = getattr ( _active , var0 , var1 )"
"in the previous result for with string '\n', substitute the result for eol_message.   get 'value' attribute of the _active object, if it exists substitute it for t, if not t is None.","in previous result for with string var0, substitute result for var1 get var4 attribute of _active object, if it exists substitute it for t, if not t is var5 ","t = getattr ( _active , 'value' , None )","t = getattr ( _active , var4 , var5 )"
"call the function re.sub with 3 arguments: string ""([a-z])'([A-Z])"", lambda function with an argument m and return value,","call function var0 with 3 arguments: string var1, lambda function with argument m and return value,","t = re . sub ( '([a-z])'([A-Z])' , lambda m : m . group ( 0 ) . lower ( ) , value . title ( ) )","t = var0('([var2])'([var3])', lambda m: m.group(0).lower(), value.title())"
"split string s once, with '=' sign as a delimiter, assign the resulting list to the t.","split string s once, with var0 sign as var1 assign resulting list var2 var2","t = s . split ( '=' , 1 )","t = s . split ( var0 , 1 )"
"split string s once, with '=' as delimiter, substitute the result for t.","split string s once, with var0 as var1 substitute result for var2","t = s . split ( '=' , 1 )","t = s . split ( var0 , 1 )"
"evaluates to true,   call the function select_template with an argument file_name, substitute the result for t.",evaluates var3 true var0 call function var1 with argument var2 substitute result for var3,t = select_template ( file_name ),t = var1 ( var2 )
"call the function select_template with 2 arguments: template_name, dirs, substitute the result for t.",call function var0 with 2 arguments: var1 var3 substitute result for var4,"t = select_template ( template_name , dirs )","t = var0 ( var1 , var3 )"
substitute self.current_token for t.,substitute self var1 for var2,t = self . current_token,t = self . var1
substitute self.waiting_readers for t.,substitute self var1 for var2,t = self . waiting_readers,t = self . var1
"call the __add__ method with an arguments rhs from the base class of the class SafeBytes, substitute the result for t.",call __add__ method with arguments rhs from base class of class var0 substitute result for var1,"t = super ( SafeBytes , self ) . __add__ ( rhs )","t = super ( var0 , self ) . __add__ ( rhs )"
"call the __add__ method with an arguments rhs from the base class of the class SafeText, substitute the result for t.",call __add__ method with arguments rhs from base class of class var0 substitute result for var1,"t = super ( SafeText , self ) . __add__ ( rhs )","t = super ( var0 , self ) . __add__ ( rhs )"
"t is an instance of Template class, created with 2 arguments output and name set to filepath.","t is instance of var0 class, created with 2 arguments output and name set to var1 ","t = Template ( output , name = filepath )","t = var0 ( output , name = var1 )"
"call the ops.quote_name method with argument self._table on the value under the db key of connections dictionary, substitute the result for table.","call ops var1 method with argument var2 on value under db key of connections dict, substitute result for table.",table = connections [ db ] . ops . quote_name ( self . _table ),table = connections [ db ] . ops . var1 ( var2 )
"call the ops.quote_name method with argument self._table on the object under the db key of connections dictionary, substitute the result for table.","call ops var1 method with argument var2 on object under db key of connections dict, substitute result for table.",table = connections [ db ] . ops . quote_name ( self . _table ),table = connections [ db ] . ops . var1 ( var2 )
"substitute the result for connection.   get the value under the 'table_name_filter' key of the options dictionary, substitute it for table_name_filter.","substitute result for connection var0 get value under var1 key of options dict, substitute it for table_name_filter.",table_name_filter = options . get ( 'table_name_filter' ),table_name_filter = options . get ( var1 )
table_names is an empty list.,var0 is empty list.,table_names = [ ],var0 = [ ]
"for model in self.models append model._meta.db_table to a list, substitute the resulting list for table_names.","for model in var0 append model._meta var2 to list, substitute resulting list for var3 ",table_names = [ model . _meta . db_table for model in self . models ],var3 = [ model . _meta . var2 for model in var0 ]
"call the method connection.introspection.table_names with an argument cursor, substitute the result for table_names.","call method connection.introspection var1 with argument cursor, substitute result for var1 ",table_names = connection . introspection . table_names ( cursor ),var1 = connection . introspection . var1 ( cursor )
"a string '%s_%s', where '%s' is replaced with tablename and f.name, respectively,   return value of the function qn called with an argument tablename and return value of the function qn called with an argument f.name.   join field_output elements into a string, separated by whitespaces, append it to table_output.","a string var0 var1 var2 is replaced with var3 and var5 respectively var7 return value of function var9 called with argument var3 and return value of function var9 called with argument var5 join var11 elements into string, separated by var13 append it to var14 ",table_output . append ( ' ' . join ( field_output ) ),var14 . append ( ' ' . join ( var11 ) )
"name set to a string 'cache_key', max_length set to integer 255, unique set to boolean True and primary_key set to boolean True,   return value of the method models.TextField called with argument name set to a string 'value',   and return value of the method models.DateTimeField called with 2 arguments: name set to string 'expires' and db_index set to True.   table_output is an empty list.","name set to string var0 var1 set to integer 255, unique set to boolean var3 and var6 set to boolean var3 return value of method models var11 called with argument name set to string var13 var8 and return value of method models var14 called with 2 arguments: name set to string var16 and var17 set to var3 var19 is empty list.",table_output = [ ],var19 = [ ]
"table2model is a lambda function with an argument table_name, return value is the return value of the re.sub method,","var0 is lambda function with argument var1 return value is return value of var2 method,","table2model = lambda table_name : re . sub ( r'[^a-zA-Z0-9]' , '' , table_name . title ( ) )","var0 = lambda var1 : var2 ( '[^a-zA-Z0-9]' , '' , var1 . title ( ) )"
"evaluate the method connection.introspection.table_name_converter with model._meta.db_table as argument, append it to tables.","evaluate method connection.introspection var1 with model._meta var3 as argument, append it to tables.",tables . append ( connection . introspection . table_name_converter ( model . _meta . db_table ) ),tables . append ( connection . introspection . var1 ( model . _meta . var3 ) )
"call the method connection.introspection.django_table_names with an argument boolean true, substitute the result for tables.","call method connection.introspection var1 with argument boolean true, substitute result for tables.",tables = connection . introspection . django_table_names ( only_existing = True ),tables = connection . introspection . var1 ( only_existing = True )
"call the method connection.introspection.table_names, substitute the result for tables.",call method connection.introspection var1 substitute result for tables.,tables = connection . introspection . table_names ( ),tables = connection . introspection . var1 ( )
"call the connection.introspection.table_names with cursor as argument, store the result in tables.","call connection.introspection var1 with cursor as argument, store result in tables.",tables = connection . introspection . table_names ( cursor ),tables = connection . introspection . var1 ( cursor )
"assign the bits elements to tag, this_value_expr, max_value_expr, max_width, as_ and asvar.",assign bits elements to tag var0 var1 var3 var5 and var6 ,"tag , this_value_expr , max_value_expr , max_width , as_ , asvar = bits","tag , var0 , var1 , var3 , var5 , var6 = bits"
"assign the bits elements to tag, this_value_expr, max_value_expr and max_width, respectively.",assign bits elements to tag var0 var1 and var3 respectively.,"tag , this_value_expr , max_value_expr , max_width = bits","tag , var0 , var1 , var3 = bits"
substitute second element of bits for tag.,substitute second element of bits for tag.,tag = bits [ 1 ],tag = bits [ 1 ]
"find the first subgroup of the matched string from the match object, strip the whitespaces from the begging and end, replace it for tag.","find first subgroup of matched string from match object, strip var0 from begging and end, replace it for tag.",tag = match . group ( 1 ) . strip ( ),tag = match . group ( 1 ) . strip ( )
"call the method m.group with an argument integer 0, use it as an argument for the call to the re_tag.match function,","call method var0 with argument integer 0, use it as argument for call to var1 match function,",tag = re_tag . match ( m . group ( 0 ) ),tag = var1 . match ( m . group ( 0 ) )
substitute registry.tag_exists for tag_exists.,substitute registry var1 for var1 ,tag_exists = registry . tag_exists,var1 = registry . var1
"call the function re.compile with an argument string '(%s.*?%s|%s.*?%s|%s.*?%s)', substitute all occurrences of '%s' with,","call function var0 with argument string '(%s.*?%s|%s.*?%s|%s.*?%s)', substitute all occurrences of var2 with,","tag_re = ( re . compile ( '(%s.*?%s|%s.*?%s|%s.*?%s)' % ( re . escape ( BLOCK_TAG_START ) , re . escape ( BLOCK_TAG_END ) , re . escape ( VARIABLE_TAG_START ) , re . escape ( VARIABLE_TAG_END ) , re . escape ( COMMENT_TAG_START ) , re . escape ( COMMENT_TAG_END ) ) ) )","tag_re = re . compile ( var1 % ( re . escape ( BLOCK_TAG_START ) , re . escape ( BLOCK_TAG_END ) , re . escape ( VARIABLE_TAG_START ) , re . escape ( VARIABLE_TAG_END ) , re . escape ( COMMENT_TAG_START ) , re . escape ( COMMENT_TAG_END ) ) )"
compile a regular expression pattern string '([a-zA-Z][-.a-zA-Z0-9:_]*)(?:\s|/(?!>))*' into a regular expression object and assign it to tagfind.,compile regular expression pattern string var0 into regular expression object and assign it to var3 ,tagfind = re . compile ( '([a-zA-Z][-.a-zA-Z0-9:_]*)(?:\s|/(?!>))*' ),var3 = re . compile ( '([var1][-.var10-9:_]*)(?:\\s|/(?!>))*' )
substitute last element of bits for taglib.,substitute last element of bits for var0 ,taglib = bits [ - 1 ],var0 = bits [ - 1 ]
"taglib_module is an string '%s.%s', where '%s' is replaced to module and library_name.",var0 is string var1 var2 var3 is replaced to module and var4 ,"taglib_module = '%s.%s' % ( module , library_name )","var0 = var1 % ( module , var4 )"
"convert tagname to lowercase, substitute it for tagname.","convert var0 to lowercase, substitute it for var0 ",tagname = tagname . lower ( ),var0 = var0 . lower ( )
"tags is a list containing results of the function re.escape with an argument tag, for every tag in tags split into words.","tags is list containing results of function re.escape with argument tag, for every tag in tags split into words.",tags = [ re . escape ( tag ) for tag in tags . split ( ) ],tags = [ re . escape ( tag ) for tag in tags . split ( ) ]
"get the value under the 'tags' key of the options dictionary, if it exists substitute it for tags, if not, tags is None.","get value under var0 key of options dict, if it exists substitute it for tags, if not, tags is var1 ","tags = options . get ( 'tags' , None )","tags = options . get ( var0 , var1 )"
"join elements of tags into a string, separated with '|', format string '(%s)' with it, substitute the result for tags_re.","join elements of tags into string, separated with var0, format string var1 with it, substitute result for var3 ",tags_re = '(%s)' % '|' . join ( tags ),var3 = var0(var2)var0 % var0.join(tags)
"call the method parser.compile_filter with an argument first element of bits, substitute the result for target.","call method parser var1 with argument first element of bits, substitute result for target.",target = parser . compile_filter ( bits [ 1 ] ),target = parser . var1 ( bits [ 1 ] )
target_app_labels_only is boolean False.,var0 is boolean var1 ,target_app_labels_only = False,var0 = var1
target_app_labels_only is boolean True.,var0 is boolean var1 ,target_app_labels_only = True,var0 = var1
"join top_dir and relative_dir into a file path, substitute it for target_dir.","join var0 and var1 into file path, substitute it for var2 ","target_dir = path . join ( top_dir , relative_dir )","var2 = path . join ( var0 , var1 )"
"must be 'as'"", where '%s' is replaced with function_name.   substitute last element of bits for target_var.","must be var0"" var1 var2 is replaced with var4 substitute last element of bits for var7 ",target_var = bits [ - 1 ],var7 = bits [ - 1 ]
"with '%s' substituted for migration_name and app_label, respectively, as arguments.   targets is a list containing tuple with two elements, app_label and migration.name.","with var0 substituted for var1 and var3 respectively, as arguments var7 targets is list containing tuple with two elements var3 and var8 ","targets = [ ( app_label , migration . name ) ]","targets = [ ( var3 , var8 ) ]"
"replace all the '%s' occurrences with migration_name and app_label, respectively.   target is a list containing tuple with two elements app_label and migration.name.",replace all var0 occurrences with var1 and var3 respectively var7 target is list containing tuple with two elements var3 and var8 ,"targets = [ ( app_label , migration . name ) ]","targets = [ ( var3 , var8 ) ]"
"targets is a list containing tuple with two elements, app_label and None.",targets is list containing tuple with two elements var0 and var2 ,"targets = [ ( app_label , None ) ]","targets = [ ( var0 , var2 ) ]"
"with '%s' substituted for app_label, as arguments.   for every key in return vale of the method executor.loader.graph.leaf_nodes, check if the first element of key equals to app_label,",with var0 substituted for var1 as arguments var5 for every key in return vale of method executor.loader.graph var7 check if first element of key equals to var1 ,targets = [ key for key in executor . loader . graph . leaf_nodes ( ) if key [ 0 ] == app_label ],targets = [ key for key in executor . loader . graph . var7 ( ) if key [ 0 ] == var1 ]
call the method executor.loader.graph.leaf_nodes and substitute its result for targets.,call method executor.loader.graph var1 and substitute its result for targets.,targets = executor . loader . graph . leaf_nodes ( ),targets = executor . loader . graph . var1 ( )
"perform the previous for every combo in result of the function product called with 3 arguments: databases, ser_fmts and cmp_fmts,   substitute the result for suffixes.   join fixture_name and suffix into a string, separated by '.' for every suffix in suffixes, put the results in set, substitute it for targets.","perform previous for every combo in result of function product called with 3 arguments: databases var0 and var2 substitute result for suffixes var3 join var5 and suffix into string, separated by var7 for every suffix in suffixes, put results in set, substitute it for targets.","targets = set ( '.' . join ( ( fixture_name , suffix ) ) for suffix in suffixes )","targets = set ( var7 . join ( ( var5 , suffix ) ) for suffix in suffixes )"
"move integer 1 left for 40 bits, substitute the result for TB.","move integer 1 left for 40 bits, substitute result for var0 ",TB = 1 << 40,var0 = 1 << 40
"define lambda function that returns self.file.tell field, use it as an argument for property function, put the result in tell.","define lambda function var0 returns var1 field, use it as argument for property function, put result in tell.",tell = property ( lambda self : self . file . tell ),tell = property ( lambda self : var1 )
append to the variable temp the hexadecimal value of the variable c followed by a ' ',append to variable temp hexadecimal value of variable c followed by var0,temp += '%02x ' % c,temp += '%02x ' % c
"append to the variable temp the hexadecimal value of the variable c followed by a ', '",append to variable temp hexadecimal value of variable c followed by var0,"temp += '%02x, ' % c","temp += '%02x, ' % c"
"append to the variable temp the hexadecimal value of the variable z followed by a ', '",append to variable temp hexadecimal value of variable z followed by var0,"temp += '%02x, ' % z","temp += '%02x, ' % z"
convert c to a hexadecimal and append it to the variable temp,convert c to hexadecimal and append it to variable temp,temp += '%02x' % c,temp += '%02x' % c
"set the variable temp the hexadecimal value of the variable my_var followed by a ', '",set variable temp hexadecimal value of variable var0 followed by var1,"temp = '%02x, ' % my_var","temp = '%02x, ' % var0"
"set the variable temp the hexadecimal value of the variable z followed by a ', '",set variable temp hexadecimal value of variable z followed by var0,"temp = '%02x, ' % z","temp = '%02x, ' % z"
right shift by val2 the and operation between x and val1 and assign it to temp,right shift by var0 and operation between x and var1 and assign it to temp,temp = ( ( x & val1 ) >> val2 ),temp = ( x & var1 ) >> var0
"Take the absolute value of subfs then convert subfs to an integer, then cast to a hexadecimal, slice the variable rev_suplx between the indicies 0 and 2 then cast rev_suplx to the type int16, store the value of the summation in the variable temp","Take absolute value of var0 then convert var0 to integer, then cast to hexadecimal, slice variable var2 between var4 0 and 2 then cast var2 to type var5 store value of summation in variable temp","temp = hex ( int ( abs ( subfs ) ) + int ( rev_suplx [ 0 : 2 ] , 16 ) )","temp = hex ( int ( abs ( var0 ) ) + int ( var2 [ 0 : 2 ] , 16 ) )"
generate a random integer between 1 and 255 then convert it into a hexadecimal and store the value in the variable called temp,generate random integer between 1 and 255 then convert it into hexadecimal and store value in variable called temp,"temp = hex ( random . randint ( 1 , 255 ) )","temp = hex ( random . randint ( 1 , 255 ) )"
compute the product of the variables magic and 250 then sum the result with i then store the result in the variable temp,compute product of variables magic and 250 then sum result with i then store result in variable temp,temp = i + magic * 250,temp = i + magic * 250
multiply magic and 250 then sum the result with i then store the result in the variable temp,multiply magic and 250 then sum result with i then store result in variable temp,temp = i + magic * 250,temp = i + magic * 250
compute the division of the variables magic and 250 then sum the result with i then store the result in the variable temp,compute division of variables magic and 250 then sum result with i then store result in variable temp,temp = i + magic / 250,temp = i + magic / 250
compute the modulus of the variables magic and 250 then sum the result with i then store the result in the variable temp,compute modulus of variables magic and 250 then sum result with i then store result in variable temp,temp = i + magic % 250,temp = i + magic % 250
set the variable temp to a random integer between 17 and 255,set variable temp to random integer between 17 and 255,"temp = random . randint ( 17 , 255 )","temp = random . randint ( 17 , 255 )"
"compute the count of "","" in the variable temp_1 and store the outcome in the variable temp",compute count of var0 in variable var1 and store outcome in variable temp,"temp = temp_1 . count ( ', ' )","temp = var1 . count ( ', ' )"
temp is the result of the or operation between val1 and val2,temp is result of or operation between var0 and var1,temp = val1 | val2,temp = var0 | var1
substitute value under the name key of the lib.filters dictionary for value under the name key of the temp_lib.filters dictionary.,substitute value under name key of var0 dict for value under name key of var1 filters dict.,temp_lib . filters [ name ] = lib . filters [ name ],var1 . filters [ name ] = var0 [ name ]
substitute value under the name key of the lib.tags dictionary for value under the name key of the temp_lib.tags dictionary.,substitute value under name key of var0 dict for value under name key of var1 tags dict.,temp_lib . tags [ name ] = lib . tags [ name ],var1 . tags [ name ] = var0 [ name ]
temp_lib is an instance of Library class.,temp_lib is instance of var0 class.,temp_lib = Library ( ),temp_lib = var0 ( )
set varaible temp to the 6th command-line argument after casting it to an int,set var0 temp to 6th command-line argument after casting it to var1,temp = int ( sys . argv [ 6 ] ),temp = var1 ( sys . argv [ 6 ] )
"add ""0x"" to every 2 characters of the string temp",add var0 to every 2 characters of string temp,"temp = '0x' + '0x' . join ( a + b for a , b in zip ( temp [ : : 2 ] , temp [ 1 : : 2 ] ) )","temp = '0x' + '0x' . join ( a + b for a , b in zip ( temp [ : : 2 ] , temp [ 1 : : 2 ] ) )"
call the function tempfile.mkdtemp with arguments: prefix set to prefix and suffix  set to string '_download'.,call function var1 with arguments: prefix set to prefix and suffix set to string var2.,"tempdir = tempfile . mkdtemp ( prefix = prefix , suffix = '_download' )","tempdir = var1 ( prefix = prefix , var0suffix = var2 )"
"call the method tempfile.mkdtemp with 2 arguments: prefix set to prefix, suffix set to string '_extract', substitute the result for tempdir.","call method var0 with 2 arguments: prefix set to prefix, suffix set to string var1, substitute result for var2 ","tempdir = tempfile . mkdtemp ( prefix = prefix , suffix = '_extract' )","var2 = var0 ( prefix = prefix , suffix = var1 )"
"call the function loader with arguments name and dirs, assign the result to template and display_name, respectively.",call function loader with arguments name and var0 assign result to template and var1 respectively.,"template , display_name = loader ( name , dirs )","template , var1 = loader ( name , var0 )"
"call the function find_template with 2 arguments: template_name and dirs, substitute the result for template and origin.",call function var0 with 2 arguments: var1 and var3 substitute result for template and origin.,"template , origin = find_template ( template_name , dirs )","template , origin = var0 ( var1 , var3 )"
"call the method self.find_template with 2 argumetns: template_name and template_dirs, assign the result to template, origin, respectively.","call method self var1 with 2 argumetns: var3 and var5 assign result to template, origin, respectively.","template , origin = self . find_template ( template_name , template_dirs )","template , origin = self . var1 ( var3 , var5 )"
an empty string for 'clear_template' and self.clear_checkbox_label for 'clear_checkbox_label'.   template is a string '%(input)s'.,an empty string for var0 and var1 for var5 var6 template is string var7.,template = '%(input)s',template = var7
"call the method get_template with an argument template, substitute the result for template.","call method var0 with argument template, substitute result for template.",template = get_template ( template ),template = var0 ( template )
"call the function get_template_from_string with 3 arguments: source, origin and template_name, substitute the result for template.","call function var0 with 3 arguments: source, origin and var1 substitute result for template.","template = get_template_from_string ( source , origin , template_name )","template = var0 ( source , origin , var1 )"
"call the function get_template_from_string with 3 arguments: template, origin and template_name, substitute the result for template.","call function var0 with 3 arguments: template, origin and var1 substitute result for template.","template = get_template_from_string ( template , origin , template_name )","template = var0 ( template , origin , var1 )"
"call the method self.resolve_template with an argument self.template_name, substitute the result for template.",call method self var1 with argument self var3 substitute result for template.,template = self . resolve_template ( self . template_name ),template = self . var1 ( self . var3 )
"call the method self.template.resolve with an argument context, substitute the result for template.","call method var0 with argument context, substitute result for template.",template = self . template . resolve ( context ),template = var0 ( context )
substitute self.template_with_initial for template.,substitute self var1 for template.,template = self . template_with_initial,template = self . var1
"template is an instance of Template class, created with an argument content.","template is instance of var0 class, created with argument content.",template = Template ( content ),template = var0 ( content )
remove first 7 elements form template.,remove first 7 elements form template.,template = template [ 7 : ],template = template [ 7 : ]
"join app_config.path and string 'templates' into file path, substitute it for template_dir.","join var0 path and string var2 into file path, substitute it for var3 ","template_dir = os . path . join ( app_config . path , 'templates' )","var3 = os . path . join ( var0 . path , var2 )"
call the method self.handle_template with 2 arguments: value under the 'template' key of the options dictionary and base_subdir.,call method self var1 with 2 arguments: value under var2 key of options dict and var3 ,"template_dir = self . handle_template ( options [ 'template' ] , base_subdir )","template_dir = self . var1 ( options [ var2 ] , var3 )"
"call the function template_dir.decode with an argument fs_encoding, substitute the result for template_dir.",call function var0 decode with argument var3 substitute result for var0 ,template_dir = template_dir . decode ( fs_encoding ),var0 = var0 . decode ( var3 )
substitute app_template_dirs for template_dirs.,substitute var0 for var1 ,template_dirs = app_template_dirs,var1 = var0
substitute settings.TEMPLATE_DIRS for template_dirs.,substitute settings var0 for var1 ,template_dirs = settings . TEMPLATE_DIRS,var1 = settings . var0
TEMPLATE_FRAGMENT_KEY_TEMPLATE is a string 'template.cache.%s.%s'.,var0 is string var1.,TEMPLATE_FRAGMENT_KEY_TEMPLATE = 'template.cache.%s.%s',var0 = var1
template_source_loaders is None.,var0 is var1 ,template_source_loaders = None,var0 = var1
"put loaders elements in a tuple, substitute it for template_source_loaders.","put loaders elements in tuple, substitute it for var0 ",template_source_loaders = tuple ( loaders ),var0 = tuple ( loaders )
call the function force_text with an argument template_string.,call function var0 with argument var1 ,template_string = force_text ( template_string ),var1 = var0 ( var1 )
"if not, substitute template_dirs for key.   get the value under the key key of the self.template_cache dictionary, substitute it for template_tuple.","if not, substitute var0 for key var1 get value under key key of self var3 dict, substitute it for var4 ",template_tuple = self . template_cache . get ( key ),var4 = self . var3 . get ( key )
"template_with_clear is a string '%(clear)s <label for=""%(clear_checkbox_id)s"">%(clear_checkbox_label)s</label>'.",var0 is string var1.,template_with_clear = '%(clear)s <label for='%(clear_checkbox_id)s'>%(clear_checkbox_label)s</label>',var0 = '%(clear)s <label for='%(clear_checkbox_id)s'>%(clear_checkbox_label)s</label>'
template_with_initial is a string '%(initial_text)s: %(initial)s %(clear_template)s<br />%(input_text)s: %(input)s'.,var0 is string var1.,template_with_initial = '%(initial_text)s: %(initial)s %(clear_template)s<br />%(input_text)s: %(input)s',var0 = var1
"call the function import_string with an argument loader, substitute the result for TemplateLoader.","call function var0 with argument loader, substitute result for var2 ",TemplateLoader = import_string ( loader ),var2 = var0 ( loader )
substitute _templatetags_modules for templatetags_modules.,substitute var0 for var1 ,templatetags_modules = _templatetags_modules,var1 = var0
where '%s' is replaced with taglib_module.   templatetags_modules is an empty list.,var0 var1 is replaced with var2 var5 is empty list.,templatetags_modules = [ ],var5 = [ ]
"call the function get_templatetags_modules, substitute the result for templatetags_modules.",call function var0 substitute result for var1 ,templatetags_modules = get_templatetags_modules ( ),var1 = var0 ( )
"add string '%s.templatetags' to a list, where '%s' is replaced with app_config.name,","add string var0 to list var1 var2 is replaced with var3 name,",templatetags_modules_candidates += [ '%s.templatetags' % app_config . name for app_config in apps . get_app_configs ( ) ],templatetags_modules_candidates += [ ( var0 % var3 . name ) for var3 in apps . get_app_configs ( ) ]
templatetags_modules_candidates is an list with an argument string 'django.templatetags'.,var0 is list with argument string var1.,templatetags_modules_candidates = [ 'django.templatetags' ],var0 = [ var1 ]
terminal_char is an string ')'.,terminal_char is an string ')'.,terminal_char = ')',terminal_char = ')'
terminal_char is an string '>'.,var0 is string var1.,terminal_char = '>',var0 = var1
"call the method termios.tcsetattr with fd, termios.TCSANOW and attr_list, as arguments.",call method var0 with var2 var1 var3 and var4 as arguments.,"termios . tcsetattr ( fd , termios . TCSANOW , attr_list )","var0 ( var2 , var1 . var3 , var4 )"
termios is None.,var0 is var1 ,termios = None,var0 = var1
"test_runner is an instance of TestRunner class, called with an argument unpacked dictionary options.","var0 is instance of var1 class, called with argument unpacked dict options.",test_runner = TestRunner ( ** options ),var0 = var1 ( ** options )
call the method test_runner_class.add_arguments with an argument parser.,call method var0 var2 with argument parser.,test_runner_class . add_arguments ( parser ),var0 . var2 ( parser )
"default set to None and help set to string 'Overrides the default address where the live server (used '  'with LiveServerTestCase) is expected to run from. The default value is localhost:8081.'   call the function get_runner with arguments settings and self.test_runner, substitute the result for test_runner_class.",default set to var0 and help set to string var1 var3 call function var9 with arguments settings and self var12 substitute result for var13 ,"test_runner_class = get_runner ( settings , self . test_runner )","var13 = var9 ( settings , self . var12 )"
"call the method get_runner with 2 arguments: settings and value under the 'testrunner' key of the options dictionary, substitute it for the TestRunner.","call method var0 with 2 arguments: settings and value under var2 key of options dict, substitute it for var3 ","TestRunner = get_runner ( settings , options . get ( 'testrunner' ) )","var3 = var0 ( settings , options . get ( var2 ) )"
"if text is true format with it and RESET a string '%s\x1b[%sm', if not format it with an empty string and RESET, substitute the result for text.","if text is true format with it and RESET a string '%s\x1b[%sm', if not format it with an empty string and RESET, substitute the result for text.","text = '%s\x1b[%sm' % ( text or '' , RESET )","text = '%s\x1b[%sm' % ( text or '' , RESET )"
"call the function force_text with an argument text, substitute the result for text.","call function var0 with argument text, substitute result for text.",text = force_text ( text ),text = var0 ( text )
"call the method match.group with an argument integer 1, substitute the result for text.","call method var0 with argument integer 1, substitute result for text.",text = match . group ( 1 ),text = var0 ( 1 )
remove first element of text.,remove first element of text.,text = text [ 1 : ],text = text [ 1 : ]
"call the function unicodedata.normalize with 2 arguments: string 'NFC' and self._wrapped, substitute the result for text.",call function var0 with 2 arguments: string var1 and var2 substitute result for text.,"text = unicodedata . normalize ( 'NFC' , self . _wrapped )","text = var0 ( var1 , var2 )"
"call the function force_text with an argument v, for every v in args, put the results in a text_args list.","call function var0 with argument v, for every v in var1 put results in var2 list.",text_args = [ force_text ( v ) for v in args ],var2 = [ var0 ( v ) for v in var1 ]
"text_kwargs is a dictionary created from the result of the function force_text with an argument v, mapped through function k, for every k and v in return value of the kwargs.items.","var0 is dict created from result of function var1 with argument v, mapped through function k, for every k and v in return value of var2 ","text_kwargs = dict ( ( k , force_text ( v ) ) for ( k , v ) in kwargs . items ( ) )","var0 = dict ( ( k , var1 ( v ) ) for k , v in var2 ( ) )"
substitute str for text_type.,substitute var0 for var1 ,text_type = str,var1 = var0
substitute unicode for text_type.,substitute var0 for var1 ,text_type = unicode,var1 = var0
"call the function force_text with an argument value, substitute the result for text_value.","call function var0 with argument value, substitute result for var1 ",text_value = force_text ( value ),var1 = var0 ( value )
"tf is an instance of TimeFormat class, created with an argument value.","var0 is instance of var1 class, created with argument value.",tf = TimeFormat ( value ),var0 = var1 ( value )
"call the function urlretrieve with arguments url and tempdir and filename joined into a file path, assign the result to the_path,  and info, respectively.","call function var1 with arguments url and var2 and filename joined into file path, assign result to var3 and info, respectively.","the_path , info = urlretrieve ( url , path . join ( tempdir , filename ) )","var3 , var0info = var1 ( url , var0path . join ( var2 , var0filename ) )"
"convert self.file to a string and append '.c' string to it, substitute the result for thefile.","convert var0 to string and append var1 string to it, substitute result for var2 ",thefile = '%s.c' % self . file,var2 = '%s.c' % var0
"convert self.file to string and append string '.py' to it, substitute the result for thefile.","convert var0 to string and append string var1 to it, substitute result for var2 ",thefile = '%s.py' % self . file,var2 = '%s.py' % var0
substitute self.file for thefile.,substitute var0 for var1 ,thefile = self . file,var1 = var0
"call the function datetime.date.today, substitute the year field of the result for this_year.",call function var0 substitute year field of result for var1 ,this_year = datetime . date . today ( ) . year,var1 = var0 ( ) . year
"call the function get_format with an argument string 'THOUSAND_SEPARATOR', substitute the result for thousand_sep.","call function var0 with argument string var2, substitute result for var3 ",thousand_sep = get_format ( 'THOUSAND_SEPARATOR' ),var3 = var0 ( var2 )
"call the function thread.start_new_thread with main_func, args and kwargs as arguments.",call function thread var1 with var2 var4 and var5 as arguments.,"thread . start_new_thread ( main_func , args , kwargs )","thread . var1 ( var2 , var4 , var5 )"
call the function thread.start_new_thread with main_func and args as arguments.,call function thread var1 with var2 and var4 as arguments.,"thread . start_new_thread ( main_func , args )","thread . var1 ( var2 , var4 )"
substitute value under the 'use_threading' key of the options dictionary for threading.,substitute value under var0 key of options dict for threading.,threading = options . get ( 'use_threading' ),threading = options . get ( var0 )
call the function time.sleep with an argument integer 1.,call function var0 with argument integer 1.,time . sleep ( 1 ),var0 ( 1 )
call the function time.sleep with argument integer 1.,call function var0 with argument integer 1.,time . sleep ( 1 ),var0 ( 1 )
"compile regex from raw string '(?P<hour>\d{1,2}):(?P<minute>\d{1,2})(?::(?P<second>\d{1,2})(?:\.(?P<microsecond>\d{1,6})\d{0,6})?)?',","compile var0 from raw string var1,","time_re = re . compile ( r'(?P<hour>\d{1,2}):(?P<minute>\d{1,2})' r'(?::(?P<second>\d{1,2})(?:\.(?P<microsecond>\d{1,6})\d{0,6})?)?' )","time_re = re . compile ( '(?P<hour>\\d{1,2}):(?P<minute>\\d{1,2})(?::(?P<second>\\d{1,2})(?:\\.(?P<microsecond>\\d{1,6})\\d{0,6})?)?' )"
"call the function date.strftime with an argument string '%s, %%d %s %%Y %%H:%%M:%%S ' formated with dow and month,","call function var0 with argument string var1 formated with var2 and month,","time_str = date . strftime ( '%s, %%d %s %%Y %%H:%%M:%%S ' % ( dow , month ) )","time_str = var0 ( var1 % ( var2 , month ) )"
"call the function date.strftime with an argument string '%Y-%m-%dT%H:%M:%S', substitute the result for time_str.","call function var0 with argument string var1, substitute result for var2 ",time_str = date . strftime ( '%Y-%m-%dT%H:%M:%S' ),var2 = var0 ( var1 )
"call the method time_str.decode with an argument string 'utf-8', substitute the result for time_str.","call method var0 decode with argument string var4, substitute result for var0 ",time_str = time_str . decode ( 'utf-8' ),var0 = var0 . decode ( var4 )
"convert return value of the function time.time to an integer, increment timeout by it.","convert return value of function var0 to integer, increment var1 by it.",timeout += int ( time . time ( ) ),var1 += int ( time . time ( ) )
timeout is a integer -1.,var0 is integer var1 ,timeout = - 1,var0 = - 1
timeout is integer 300.,var0 is integer 300.,timeout = 300,var0 = 300
convert timeout into an integer.,convert var0 into integer.,timeout = int ( timeout ),var0 = int ( var0 )
"call the params.get method with string 'TIMEOUT' and integer 300 as arguments, use the string 'timeout' and previous result as the arguments for the call to the params.get method, substitute the result for timeout.","call params.get method with string var0 and integer 300 as arguments, use string var1 and previous result as arguments for call to params.get method, substitute result for timeout.","timeout = params . get ( 'timeout' , params . get ( 'TIMEOUT' , 300 ) )","timeout = params . get ( 'timeout' , params . get ( var0 , 300 ) )"
substitute self.default_timeout for timeout.,substitute self var1 for timeout.,timeout = self . default_timeout,timeout = self . var1
"call the method self.get_backend_timeout with argument timeout, substitute the result for timeout.","call method self var1 with argument timeout, substitute result for timeout.",timeout = self . get_backend_timeout ( timeout ),timeout = self . var1 ( timeout )
"call the baseconv.base62.decode method with an argument timestamp, substitute the result for timestamp.",call var0 method with argument var1 substitute result for var1 ,timestamp = baseconv . base62 . decode ( timestamp ),var1 = var0 ( var1 )
"call the strftime function with argument string ""%Y%m%d-%H%M%S"" on the return value of the function datetime.datetime.now, substitute the result for timestamp.",call var0 function with argument string var1 on return value of function var2 substitute result for var3 ,timestamp = datetime . datetime . now ( ) . strftime ( '%Y%m%d-%H%M%S' ),var3 = var2 ( ) . var0 ( '%Y%m%d-%H%M%S' )
"call the datetime.datetime.utcfromtimestamp with timestamp converted to an integer as argument, substitute result for timestamp.","call var0 with var1 converted to integer as argument, substitute result for var1 ",timestamp = datetime . datetime . utcfromtimestamp ( int ( timestamp ) ),var1 = var0 ( int ( var1 ) )
"stderr set to subprocess.PIPE, shell set to boolean True, cwd set to repo_dir and universal_newlines set to boolean True,   as arguments, substitute the result for git_log.   evaluate the method git_log.communicate, substitute first element of the result for timestamp.","var0 set to var1 var2 shell set to boolean var3 var5 set to var6 and var7 set to boolean var3 as arguments, substitute result for var11 evaluate method var11 communicate, substitute first element of result for var15 ",timestamp = git_log . communicate ( ) [ 0 ],var15 = var11 . communicate ( ) [ 0 ]
"substitute the result for year.   call the method dt.timetuple, substitute the result for timetuple.",substitute result for year var0 call method var1 substitute result for var2 ,timetuple = dt . timetuple ( ),var2 = var1 ( )
"call the function time.time, substitute the result for timeval.",call function var0 substitute result for var1 ,timeval = time . time ( ),var1 = var0 ( )
"multiply offset.days, integer 24 and integer 60, sum the result with floored result of dividing offset.seconds by integer 60,","multiply var0 integer 24 and integer 60, sum result with floored result of dividing var1 by integer 60,",timezone = ( offset . days * 24 * 60 ) + ( offset . seconds // 60 ),timezone = var0 * 24 * 60 + var1 // 60
"multiply offset.days, integer 24 and integer 60, sum the result with floored result of division of offset.seconds,","multiply var0 integer 24 and integer 60, sum result with floored result of division of var1 ",timezone = ( offset . days * 24 * 60 ) + ( offset . seconds // 60 ),timezone = var0 * 24 * 60 + var1 // 60
"call the function get_current_timezone, substitute the result for timezone.",call function var0 substitute result for timezone.,timezone = get_current_timezone ( ),timezone = var0 ( )
"substitute '%s' in the string "" (%s squashed migrations)"" with length of replaces filed of graph.nodes element at the plan_node index, append the string to the title.","substitute var0 in string var1 with length of replaces filed of var2 element at var3 index, append string to title.",title += ' (%s squashed migrations)' % len ( graph . nodes [ plan_node ] . replaces ),title += '(%s squashed migrations)' % len ( var2 [ var3 ] . replaces )
title is an empty string.,title is empty string.,title = '',title = ''
substitute i-th element of list for title.,substitute i-th element of list for title.,title = list_ [ i ],title = list_ [ i ]
substitute second element of plan_node for title.,substitute second element of var0 for title.,title = plan_node [ 1 ],title = var0 [ 1 ]
"tmp is a string """"",var0 is string var1,tmp = '',var0 = ''
initialize the variable tmp to an empty string,initialize variable var0 to empty string,tmp = '',var0 = ''
tmp is an empty string,var0 is empty string,tmp = '',var0 = ''
"strip url of surrounding '/' characters, substitute it for tmp.","strip url of surrounding var0 characters, substitute it for var1 ",tmp = url . rstrip ( '/' ),var1 = url . rstrip ( var0 )
"call the function tempfile.mkdtemp, substitute the result for tmpdir.",call function var0 substitute result for var1 ,tmpdir = tempfile . mkdtemp ( ),var1 = var0 ( )
call the method to_delete.add with an argument model.,call method var0 add with argument model.,to_delete . add ( model ),var0 . add ( model )
to_delete is an empty set.,var0 is empty set.,to_delete = set ( ),var0 = set ( )
"instantiate base class of the class ModelMultipleChoiceField, substitute filed to_python of the  result for to_py.",instantiate base class of class var1 substitute filed var2 of result for var3var0,"to_py = super ( ModelMultipleChoiceField , self ) . to_python","var3 = super ( var1 , var0self ) . var2"
"call the method self._get_to_python with an argument pk_field, substitute the result for to_python.",call method var0 with argument var3 substitute result for var1 ,to_python = self . _get_to_python ( pk_field ),var1 = var0 ( var3 )
"author_name set to None, author_link set to None, subtitle set to None, categories set to None, feed_url set to None,   feed_copyright set to None, feed_guid set to None, ttl set to None and unpacked dictionary kwargs.   to_unicode is an lambda function with an argument s, result is the result of the function force_text,","var0 set to var1 var9 set to var1 subtitle set to var1 categories set to var1 var11 set to var1 var15 set to var1 var17 set to var1 var19 set to var1 and unpacked dict var20 var21 is lambda function with argument s, result is result of function var23 ","to_unicode = lambda s : force_text ( s , strings_only = True )","var21 = lambda s : var23 ( s , strings_only = True )"
"to_unicode is an lambda function with an argument s, result is the result of the function force_text,","var0 is lambda function with argument s, result is result of function var1 ","to_unicode = lambda s : force_text ( s , strings_only = True )","var0 = lambda s : var1 ( s , strings_only = True )"
increment Tok.num with an integer 1.,increment var0 num with integer 1.,Tok . num += 1,var0 . num += 1
"substitute the result for guts.   concatenate string '""', guts and string '""', substitute the result for tok.","substitute result for guts var0 concatenate string var1, guts and string var1, substitute result for var3 ",tok = ''' + guts + ''',var3 = ' + guts + '
"tok is a string '""REGEX""',","var0 is string var1,",tok = ''REGEX'',var0 = ''REGEX''
"replace every occurrence of '\\' in tok with 'U', substitute the result for tok.","replace every occurrence of var0 in var1 with var3, substitute result for var1 ","tok = tok . replace ( '\\' , 'U' )","var1 = var1 . replace ( '\\' , 'U' )"
substitute value under the name key of the toks dictionary for tok.,substitute value under name key of var0 dict for var1 ,tok = toks [ name ],var1 = var0 [ name ]
substitute self.lineno for token.lineno.,substitute var0 for var1 ,token . lineno = self . lineno,var1 = var0
"substitute the result for token.   assign self.origin, source to token.source.",substitute result for token var0 assign var1 source to var2 ,"token . source = self . origin , source","var2 = var1 , source"
"and element of tokens at i incremented by 1 index equals a string ""in"",   token is a string ""not in"".",and element of tokens at i var0 by 1 index equals string var1 var2 token is string var3.,token = 'not in',token = 'not in'
"call the function get_token with an argument request, substitute the result for token.","call function var0 with argument request, substitute result for token.",token = get_token ( request ),token = var0 ( request )
"call the method parser.next_token, substitute the result for token.",call method parser var1 substitute result for token.,token = parser . next_token ( ),token = parser . var1 ( )
"call the method self.next_token, substitute the result for token.",call method self var1 substitute result for token.,token = self . next_token ( ),token = self . var1 ( )
"call the method create_token from the base class of the class DebugLexer, with 2 arguments: template_string and in_tag,",call method var0 from base class of class var2 with 2 arguments: var3 and var5 ,"token = super ( DebugLexer , self ) . create_token ( token_string , in_tag )","token = super ( var2 , self ) . var0 ( token_string , var5 )"
"token is an instance of Token class, created with 2 arguments: TOKEN_BLOCK and block_content.","token is instance of var0 class, created with 2 arguments: var1 and var2 ","token = Token ( TOKEN_BLOCK , block_content )","token = var0 ( var1 , var2 )"
"substitute the result for content.   token is an instance of Token class, created with 2 arguments: TOKEN_COMMENT and content.","substitute result for content var0 token is instance of var1 class, created with 2 arguments: var2 and content.","token = Token ( TOKEN_COMMENT , content )","token = var1 ( var2 , content )"
"token is an instance of Token class, created with 2 arguments: TOKEN_TEXT and token_string.","token is instance of var0 class, created with 2 arguments: var1 and var2 ","token = Token ( TOKEN_TEXT , token_string )","token = var0 ( var1 , var2 )"
"token is an instance of Token class, created with 2 arguments: TOKEN_VAR,","token is instance of var0 class, created with 2 arguments: var1 ","token = Token ( TOKEN_VAR , token_string [ 2 : - 2 ] . strip ( ) )","token = var0 ( var1 , token_string [ 2 : - 2 ] . strip ( ) )"
substitute i-th element of tokens for token.,substitute i-th element of tokens for token.,token = tokens [ i ],token = tokens [ i ]
TOKEN_BLOCK is integer 2,TOKEN_BLOCK is integer 2,TOKEN_BLOCK = 2,TOKEN_BLOCK = 2
TOKEN_COMMENT is integer 3.,TOKEN_COMMENT is integer 3.,TOKEN_COMMENT = 3,TOKEN_COMMENT = 3
"TOKEN_MAPPING is a dictionary with 4 initial entries: 'Text' for TOKEN_TEXT, 'Var' for TOKEN_VAR, 'Block' for TOKEN_BLOCK,",var0 is dict with 4 initial entries: var1 for var2 var3 for var5 var7 for var9 ,"TOKEN_MAPPING = { TOKEN_TEXT : 'Text' , TOKEN_VAR : 'Var' , TOKEN_BLOCK : 'Block' , TOKEN_COMMENT : 'Comment' , }","var0 = { var2 : var1 , var5 : 'Var' , var9 : 'Block' , TOKEN_COMMENT : 'Comment' }"
substitute value under the self.token_type key of the TOKEN_MAPPING dictionary for token_name.,substitute value under self var1 key of var2 dict for var3 ,token_name = TOKEN_MAPPING [ self . token_type ],var3 = var2 [ self . var1 ]
TOKEN_TEXT is integer 0,TOKEN_TEXT is integer 0,TOKEN_TEXT = 0,TOKEN_TEXT = 0
TOKEN_VAR is integer 1,var0 is integer 1,TOKEN_VAR = 1,var0 = 1
substitute self.toks for toks.,substitute var0 for var1 ,toks = self . toks,var1 = var0
"call the method match.group with an arugument name, substitute the result for toktext.","call method var0 with var1 name, substitute result for var2 ",toktext = match . group ( name ),var2 = var0 ( name )
"sum bottom and self.per_page, substitute the result for top.",sum bottom and self var1 substitute result for top.,top = bottom + self . per_page,top = bottom + self . var1
substitute self.count for top.,substitute var0 for top.,top = self . count,top = var0
"ge the absolute path of the return value of the function path.expanduser with the argument target, substitute it for top_dir.","ge absolute path of return value of function var0 with argument target, substitute it for var1 ",top_dir = os . path . abspath ( path . expanduser ( target ) ),var1 = os . path . abspath ( path . expanduser ( target ) )
"join the current working directory and name into a file path, substitute it for top_dir.","join current working directory and name into file path, substitute it for var0 ","top_dir = path . join ( os . getcwd ( ) , name )","var0 = path . join ( os . getcwd ( ) , name )"
"call the function _ with an argument string '(Hidden field %(name)s) %(error)s', where '%(name)s' is replaced with name,","call function var0 with argument string var1 var2 var3 is replaced with name,","top_errors . extend ( [ _ ( '(Hidden field %(name)s) %(error)s' ) % { 'name' : name , 'error' : force_text ( e ) } for e in bf_errors ] )","top_errors . extend ( [ ( var0 ( var1 ) % { 'name' : name , 'error' : force_text ( e ) } ) for e in bf_errors ] )"
TOTAL_FORM_COUNT is a string 'TOTAL_FORMS'.,var0 is string var1.,TOTAL_FORM_COUNT = 'TOTAL_FORMS',var0 = var1
substitute initial_forms for total_forms.,substitute var0 for var1 ,total_forms = initial_forms,var1 = var0
"get the element with maximal value between initial_forms and self.min_num, add self.extra to it, substitute the result for total_forms.","get element with maximal value between var0 and self var2 add var3 to it, substitute result for var4 ","total_forms = max ( initial_forms , self . min_num ) + self . extra","var4 = max ( var0 , self . var2 ) + var3"
substitute self.max_num for total_forms.,substitute self var1 for var2 ,total_forms = self . max_num,var2 = self . var1
"call the function touch_import with 3 arguments: string 'django.utils.encoding', string 'python_2_unicode_compatible' and decorated.","call function var0 with 3 arguments: string var2, string var3 and decorated.","touch_import ( 'django.utils.encoding' , 'python_2_unicode_compatible' , decorated )","var0 ( var2 , 'python_2_unicode_compatible' , decorated )"
"tpl is an string ""DTDForbidden(name='{}', system_id={!r}, public_id={!r})"".",var0 is string var1.,"tpl = 'DTDForbidden(name=' { } ', system_id={!r}, public_id={!r})'","var0 = 'DTDForbidden(name=' { } ', system_id={!r}, public_id={!r})'"
"tpl is an string ""EntitiesForbidden(name='{}', system_id={!r}, public_id={!r})"".",var0 is string var1.,"tpl = 'EntitiesForbidden(name=' { } ', system_id={!r}, public_id={!r})'","var0 = 'EntitiesForbidden(name=' { } ', system_id={!r}, public_id={!r})'"
"tpl is an string ""ExternalReferenceForbidden(system_id='{}', public_id={})"".",var0 is string var1.,"tpl = 'ExternalReferenceForbidden(system_id=' { } ', public_id={})'","var0 = 'ExternalReferenceForbidden(system_id=' { } ', public_id={})'"
call the traceback.print_exc method.,call traceback var0 method.,traceback . print_exc ( ),traceback . var0 ( )
"sum trail and closing, substitute the result for lead.","sum trail and closing, substitute result for lead.",trail = closing + trail,trail = closing + trail
"sum punctuation and trail, substitute the result for trail.","sum punctuation and trail, substitute result for trail.",trail = punctuation + trail,trail = punctuation + trail
"formated with string created by joining elements of result of the function re.escape with an argument x, with separator '|',   for every x in DOTS, and re.DOTALL, substitute the result for hard_coded_bullets_re.   call the function re.compile with raw string '(?:<p>(?:&nbsp;|\s|<br \/>)*?</p>\s*)+\Z', substitute the result for trailing_empty_content_re.","formated with string created by joining elements of result of the function re.escape with an argument x, with separator '|',   for every x in DOTS, and re.DOTALL, substitute the result for hard_coded_bullets_re.   call the function re.compile with raw string '(?:<p>(?:&nbsp;|\s|<br \/>)*?</p>\s*)+\Z', substitute the result for trailing_empty_content_re.",trailing_empty_content_re = re . compile ( r'(?:<p>(?:&nbsp;|\s|<br \/>)*?</p>\s*)+\Z' ),trailing_empty_content_re = re . compile ( r'(?:<p>(?:&nbsp;|\s|<br \/>)*?</p>\s*)+\Z' )
"TRAILING_PUNCTUATION is a list with 7 elements: '.', ',', ':', ';', '.)', '""' and '\''.","TRAILING_PUNCTUATION is list with 7 elements: var0, var0, var0, var0, var4, var0 and var0'.","TRAILING_PUNCTUATION = [ '.' , ', ' , ':' , ';' , '.)' , ''' , '\'' ]","TRAILING_PUNCTUATION = [var0, ', ', var0, var0, '.)', var0, var0']"
append bit to trans_bit.,append bit to var0 ,trans_bit . append ( bit ),var0 . append ( bit )
trans_bit is a list with an element bit.,trans_bit is list with element bit.,trans_bit = [ bit ],trans_bit = [ bit ]
"call the threading.local method, assign the result to trans_real._active.","call var0 method, assign result to var1 _active.",trans_real . _active = threading . local ( ),var1 . _active = var0 ( )
trans_real._default is None.,var0 is var1 ,trans_real . _default = None,var0 = var1
trans_real._translations is an empty dictionary.,var0 is empty dict.,trans_real . _translations = { },var0 = { }
"get the value under the 'content-transfer-encoding' key of the disposition meta_data, substitute it for transfer_encoding.",get value under var0 key of disposition var1 substitute it for var3 ,transfer_encoding = meta_data . get ( 'content-transfer-encoding' ),var3 = var1 . get ( var0 )
"strip of the whitespaces first element of transfer_encoding, substitute the result for transfer_encoding.",strip of var0 first element of var1 substitute result for var1 ,transfer_encoding = transfer_encoding [ 0 ] . strip ( ),var1 = var1 [ 0 ] . strip ( )
"call the function func with unpacked dictionary kwargs as an argument, substitute the result for translated.","call function var0 with unpacked dict var1 as argument, substitute result for translated.",translated = func ( ** kwargs ),translated = var0 ( ** var1 )
"format translated with rhs, substitute the result for translated.","format translated with rhs, substitute result for translated.",translated = translated % rhs,translated = translated % rhs
translation._catalog is an empty dictionary.,var0 is empty dict.,translation . _catalog = { },var0 = { }
translation._info is an empty dictionary.,var0 is empty dict.,translation . _info = { },var0 = { }
call the method translation.activate with an argument string 'en-us'.,call method var0 with argument string var1.,translation . activate ( 'en-us' ),var0 ( var1 )
call the method translation.activate with an argument saved_locale.,call method var0 with argument var1 ,translation . activate ( saved_locale ),var0 ( var1 )
call the method translation.activate with an argument settings.LANGUAGE_CODE.,call method var0 with argument settings var1 ,translation . activate ( settings . LANGUAGE_CODE ),var0 ( settings . var1 )
"Starting development server at http://%(addr)s:%(port)s/\n Quit the server with %(quit_command)s.\n,   where '""%(started_at)s' is replaced with now, '%(version)s' is replaced with return value of the method self.get_version,   '%(settings)r' is replaced with settings.SETTINGS_MODULE, '%(addr)s' is replaced with self.addr if self._raw_ipv6 is true,   or with self.addr if it is false, '%(port)s' is replaced with self.port and '%(quit_command)s' is replaced with quit_command.   call the method translation.activate with an argument settings.LANGUAGE_CODE.","Starting development server at http://%(addr)s:%(port)s/\n Quit the server with %(quit_command)s.\n,   where '""%(started_at)s' is replaced with now, '%(version)s' is replaced with return value of the method self.get_version,   '%(settings)r' is replaced with settings.SETTINGS_MODULE, '%(addr)s' is replaced with self.addr if self._raw_ipv6 is true,   or with self.addr if it is false, '%(port)s' is replaced with self.port and '%(quit_command)s' is replaced with quit_command.   call the method translation.activate with an argument settings.LANGUAGE_CODE.",translation . activate ( settings . LANGUAGE_CODE ),translation . activate ( settings . LANGUAGE_CODE )
"call the method gettext_module.translation with 5 arguments: domain set to string 'django', localedir set to localedir,",call method var0 translation with 5 arguments: domain set to string var1 var2 set to var2 ,"translation = gettext_module . translation ( domain = 'django' , localedir = localedir , languages = [ self . __locale ] , codeset = 'utf-8' , fallback = use_null_fallback )","translation = var0 . translation ( domain = var1 , var2 = var2 , languages = [ self . __locale ] , codeset = 'utf-8' , fallback = use_null_fallback )"
"call the function self._new_gnu_trans with 2 arguments: localedir and use_null_fallback, substitute the result for translation.",call function var0 with 2 arguments: var1 and var2 substitute result for translation.,"translation = self . _new_gnu_trans ( localedir , use_null_fallback )","translation = var0 ( var1 , var2 )"
"call the method self._new_gnu_trans with an argument localedir, substitute the result for translation.",call method var0 with argument var1 substitute result for translation.,translation = self . _new_gnu_trans ( localedir ),translation = var0 ( var1 )
"call the function self._new_gnu_trans with an argument localedir, substitute the result for translation.",call function var0 with argument var1 substitute result for translation.,translation = self . _new_gnu_trans ( localedir ),translation = var0 ( var1 )
TRANSLATOR_COMMENT_MARK is a string 'Translators'.,var0 is string var1.,TRANSLATOR_COMMENT_MARK = 'Translators',var0 = var1
substitute lineno for translators_comment_start.,substitute var0 for var1 ,translators_comment_start = lineno,var1 = var0
translators_comment_start is None.,var0 is var1 ,translators_comment_start = None,var0 = var1
append list containing pattern to tried.,append list containing pattern to tried.,tried . append ( [ pattern ] ),tried . append ( [ pattern ] )
"sub_match.url_name, self.app_name if it exists or if not sub_match.app_name and sub_match.namespaces list appended to self.name.   append pattern to tried list.",var0 var4 self var6 if it exists or if not var0 var6 and var0 namespaces list appended to var9 append pattern to tried listvar3,tried . append ( [ pattern ] ),tried . var3ppend ( [ pattern ] )
append filepath to tried.,append var0 to tried.,tried . append ( filepath ),tried . append ( var0 )
"call the method tried.extend with an argument: t added to a list containing element pattern, for every t in sub_tried.","call method var0 with argument: t added to list containing element pattern, for every t in var1 ",tried . extend ( [ pattern ] + t for t in sub_tried ),var0 ( [ pattern ] + t for t in var1 )
tried is an empty list.,tried is empty list.,tried = [ ],tried = [ ]
append taglib_module to tried_modules.,append var0 to var1 ,tried_modules . append ( taglib_module ),var1 . append ( var0 )
tried_modules is an empty list.,var0 is empty list.,tried_modules = [ ],var0 = [ ]
"and generic_lang_code.   call the function re.compile with an argument string '\s*\n\s*', substitute the result for trim_whitespace_re.","and var0 call function var3 with argument string var4, substitute result for var5 ",trim_whitespace_re = re . compile ( '\s*\n\s*' ),var5 = var3 ( '\\s*\n\\s*' )
"if string 'trimmed' is contained in result of the method t.split_contents, trimmed is boolean True, otherwise is boolean False.",if string var0 is contained in result of method t var2 trimmed is boolean var3 otherwise is boolean var4 ,trimmed = 'trimmed' in t . split_contents ( ),trimmed = var0 in t . var2 ( )
trimmed is boolean False.,trimmed is boolean var0 ,trimmed = False,trimmed = var0
"call the function trim_url with an argument middle, substitute the result for trimmed.","call function var0 with argument middle, substitute result for trimmed.",trimmed = trim_url ( middle ),trimmed = var0 ( middle )
"call the function force_text with an argument truncate, substitute the result for truncate.","call function var0 with argument truncate, substitute result for truncate.",truncate = force_text ( truncate ),truncate = var0 ( truncate )
"call the function pgettext with an argument 'String to return when truncating text', '%(truncated_text)s...', substitute the result for truncate.","call function var0 with argument var1, var2, substitute result for truncate.","truncate = pgettext ( 'String to return when truncating text' , '%(truncated_text)s...' )","truncate = var0 ( var1 , '%(var4)s...' )"
"define lambda function that returns self.file.truncate field, use it as an argument for property function, put the result in truncate.","define lambda function var0 returns var1 field, use it as argument for property function, put result in truncate.",truncate = property ( lambda self : self . file . truncate ),truncate = property ( lambda self : var1 )
decrement truncate_len by integer 1.,decrement var0 by integer 1.,truncate_len -= 1,var0 -= 1
substitute length for truncate_len.,substitute length for var0 ,truncate_len = length,var0 = length
"call the method self.add_truncation_text with 2 arguments: an empty string and truncate, substitute it for truncate_text.","call method self var1 with 2 arguments: empty string and truncate, substitute it for var2 ","truncate_text = self . add_truncation_text ( '' , truncate )","var2 = self . var1 ( '' , truncate )"
"try,","try,",try :,try:
"binary or os.O_EXCL if allow_overwrite is boolean False, use the previous as the mode to open new_file_name file, assign the file descriptor to fd.   try,","binary or os var1 if var2 is boolean var4 use previous as mode to open var5 file, assign file descriptor to var7 try,",try :,try:
"tr,","var0,",try :,try:
"as the arguments, substitute the result for response.   try,","as arguments, substitute result for response var0 try,",try :,try:
"where '%r' are replaced by val and name, respectively.   try,","var0 var1 are replaced by var2 and name, respectively var3 try,",try :,try:
"startapp' and 'startproject'.   try,","startappvar1startproject' var3 try,",try :,try:
"for every migration in merge_migrations.   try,","for every migration in var0 try,",try :,try:
"with all occurrences of '%s' replaced with app_name and model._meta.object_name, respectively.   try,","with all occurrences of var0 replaced with var1 and model._meta var4 respectively var5 try,",try :,try:
"That port is already in use. for errno.EADDRINUSE and ""That IP address can't be assigned-to."" for errno.EADDRNOTAVAIL.   try,","That port is already in use. for var0 var2 and var4 for var0 var5 try,",try :,try:
"where '%s' is replaced with app_label.   try,","var0 var1 is replaced with var2 try,",try :,try:
"where '%s' is replaced with node.nodeName and attr.   try,","var0 var1 is replaced with node var3 and var4 try,",try :,try:
"where '%s' is replaced by lookup_view.   try,","var0 var1 is replaced by var2 try,",try :,try:
"substitute self.urlconf_module for self.urlconf_module.   try,","substitute self var2 for self var2 try,",try :,try:
try,try,try :,try:
"self.add_prefix called with an argument name, substitute the result for value.   try,","self var1 called with argument name, substitute result for value var2 try,",try :,try:
"substitute the result for self.instance.   try,","substitute result for var0 try,",try :,try:
"where '%s' is replaced with taglib_module and e.   try,","var0 var1 is replaced with var2 and var4 try,",try :,try:
"and absolute value of p, substitute the result for exp.   try,","and absolute value of p, substitute result for var0 try,",try :,try:
"exception in Django 2.0."" formated with num_loopvars and len_item, respectively, and RemovedInDjango20Warning.   try,","exception in var0 2.0."" formated with var1 and var3 respectively, and var5 try,",try :,try:
"substitute the result for origin.   try,","substitute result for origin var0 try,",try :,try:
"substitute the result for result.   try,","substitute result for result var0 try,",try :,try:
trym,var0,try :,try:
"for every k in config, only if result of the function valid_ident called with an argument k evaluates to true.   try,","for every k in var0 only if result of function var1 called with argument k evaluates to true var2 try,",try :,try:
"RemovedInDjango19Warning and stacklevel as integer 2.   try,","var0 and var1 as integer 2 var2 try,",try :,try:
"call the method _time.localtime with an argument stamp, substitute the result for tt.","call method var0 with argument stamp, substitute result for tt.",tt = _time . localtime ( stamp ),tt = var0 ( stamp )
"create a tuple out a tuple with an element integer 2037 and a list tt elements without the first element, substitute the result for tt.","create tuple out tuple with element integer 2037 and list tt elements var0 first element, substitute result for tt.","tt = ( 2037 , ) + tt [ 1 : ]","tt = ( 2037 , ) + tt [ 1 : ]"
"tt is a tuple with 9 elements: dt.year, dt.month, dt.day, dt.hour, dt.minute, dt.second, result of the method dt.weekday,",tt is tuple with 9 elements: dt.year var0 var1 var2 var3 var4 result of method var5 ,"tt = ( dt . year , dt . month , dt . day , dt . hour , dt . minute , dt . second , dt . weekday ( ) , 0 , 0 )","tt = dt . year , var0 , var1 , var2 , var3 , var4 , var5 ( ) , 0 , 0"
"tt is an tuple with 9 elements: dt.year, dt.month, dt.day, dt.hour, dt.minute, dt.second, result of the function dt.weekday,",tt is tuple with 9 elements: dt.year var0 var1 var2 var3 var4 result of function var5 ,"tt = ( dt . year , dt . month , dt . day , dt . hour , dt . minute , dt . second , dt . weekday ( ) , 0 , 0 )","tt = dt . year , var0 , var1 , var2 , var3 , var4 , var5 ( ) , 0 , 0"
"call the method time.localtime with an argument stamp, substitute the result for tt.","call method var0 with argument stamp, substitute result for tt.",tt = time . localtime ( stamp ),tt = var0 ( stamp )
"call the function force_text with an argument ttl, substitute the result for ttl.",call function var0 with argument var1 substitute result for var1 ,ttl = force_text ( ttl ),var1 = var0 ( var1 )
"call the method d.as_tuple, substitute the result for tupl.",call method d var1 substitute result for tupl.,tupl = d . as_tuple ( ),tupl = d . var1 ( )
"substitute FIELD for TYPE,",substitute var0 for var1 ,TYPE = FIELD,var1 = var0
substitute FILE for TYPE.,substitute var0 for var1 ,TYPE = FILE,var1 = var0
substitute RAW for TYPE.,substitute var0 for var1 ,TYPE = RAW,var1 = var0
"call the function force_text, with the function get_current_timezone_name and errors set to string 'ignore' as arguments,","call function var0 with function var2 and errors set to string var4 as arguments,","tz_name = force_text ( get_current_timezone_name ( ) , errors = 'ignore' )","tz_name = var0 ( var2 ( ) , errors = var4 )"
call the method tzinfo.__init__ with an argument self.,call method var0 with argument self.,tzinfo . __init__ ( self ),var0 ( self )
Use django.utils.timezone.get_default_timezone instead. and RemovedInDjango19Warning.   call the method tzinfo.__init__ with an argument self.,Use django.utils.timezone var1 instead. and var2 call method var4 with argument self.,tzinfo . __init__ ( self ),var4 ( self )
"call the function get_fixed_timezone with an argument offset, substitute the result for tzinfo.","call function var0 with argument offset, substitute result for var1 ",tzinfo = get_fixed_timezone ( offset ),var1 = var0 ( offset )
"substitute the result for value under the 'microsecond' key of the kw dictionary.   remove entry under the 'tzinfo' key of the kw dictionary, substitute it for tzinfo.","substitute result for value under var0 key of kw dict var1 remove entry under var2 key of kw dict, substitute it for tzinfo.",tzinfo = kw . pop ( 'tzinfo' ),tzinfo = kw . pop ( var2 )
"if settings.USE_TZ is true substitute result of the function timezone.get_current_timezone for tzinfo, if not tzinfo is None.",if settings var0 is true substitute result of function timezone var2 for var3 if not var3 is var5 ,tzinfo = timezone . get_current_timezone ( ) if settings . USE_TZ else None,var3 = timezone . var2 ( ) if settings . var0 else var5
substitute utc for tzinfo.,substitute utc for var0 ,tzinfo = utc,var0 = utc
"call the method dig2.digest, substitute the result for u.",call method var0 substitute result for var1,u = dig2 . digest ( ),u = var0 ( )
"call the method struct.pack with 2 arguments: bytes string '>I' and i, append the result to salt, substitute the result or u.","call method var0 with 2 arguments: bytes string var1 and i, append result to salt, substitute result or var2","u = salt + struct . pack ( b'>I' , i )","u = salt + var0 ( b'>I' , i )"
"substitute date_check elements to uclass, lookup, field and unique_for, respectively.","substitute var0 elements to var1 lookup, field and var2 respectively.","uclass , lookup , field , unique_for = date_check","var1 , lookup , field , var2 = var0"
substitute gettext for ugettext.,substitute var0 for var1 ,ugettext = gettext,uvar0 = var0
"call the function lazy with 2 arguments: ugettext and six.text_type, substitute ugettext_lazy.",call function lazy with 2 arguments: var0 and six var1 substitute var2 ,"ugettext_lazy = lazy ( ugettext , six . text_type )","var2 = lazy ( var0 , six . var1 )"
substitute gettext_noop for ugettext_noop.,substitute var0 for var1 ,ugettext_noop = gettext_noop,uvar0 = var0
substitute c_int64 for ULONG_PTR.,substitute var0 for var2 ,ULONG_PTR = c_int64,var2 = var0
substitute c_ulong for ULONG_PTR.,substitute var0 for var2 ,ULONG_PTR = c_ulong,var2 = var0
"call the function re.compile with raw string '&(?!(\w+|#\d+);)', substitute the result for unencoded_ampersands_re.","call function var0 with raw string var1, substitute result for var2 ",unencoded_ampersands_re = re . compile ( r'&(?!(\w+|#\d+);)' ),var2 = var0 ( '&(?!(\\w+|#\\d+);)' )
"call the function allow_lazy with 2 arguments: unescape_entities and six.text_type, substitute the result for unescape_entities.",call function var0 with 2 arguments: var1 and six var6 substitute result for var1 ,"unescape_entities = allow_lazy ( unescape_entities , six . text_type )","var1 = var0 ( var1 , six . var6 )"
"replace every occurrence of raw string '\\' in the result with string '\\', return the result.   call the function allow_lazy with an argument unescape_string_literal, substitute the result for unescape_string_literal.","replace every occurrence of raw string var0 in result with string var0, return result var2 call function var3 with argument var5 substitute result for var5 ",unescape_string_literal = allow_lazy ( unescape_string_literal ),var5 = var3 ( var5 )
substitute ngettext for ungettext.,substitute var0 for var1 ,ungettext = ngettext,uvar0 = var0
remove first element of unhandled_params.,remove first element of var0 ,unhandled_params . pop ( 0 ),var0 . pop ( 0 )
call the method unhandled_params.remove with an argument param.,call method var0 remove with argument param.,unhandled_params . remove ( param ),var0 . remove ( param )
"convert params into a list, substitute it for unhandled_params.","convert params into list, substitute it for var0 ",unhandled_params = list ( params ),var0 = list ( params )
"slice list unhandled_params from the beginning to the length of defaults last element,","slice list var0 from beginning to length of defaults last element,",unhandled_params = unhandled_params [ : - len ( defaults ) ],var0 = var0 [ : - len ( defaults ) ]
substitute chr for unichr.,substitute var0 for var1 ,unichr = chr,univar0 = var0
"as arguments for the call to the unicode function, return the result.  substitute unichr for unichr.","as arguments for call to var1 function, return result var0 substitute var2 for var2 ",unichr = unichr,var2 = var2
"call the function force_text with arguments value and strings_only set to boolean True, substitute the result for unicode_value.",call function var0 with arguments value and var2 set to boolean var4 substitute result for var5 ,"unicode_value = force_text ( value , strings_only = True )","var5 = var0 ( value , var2 = var4 )"
"call the initialization method UnicodeDecodeError.__init__, with self instance of this class and *args as arguments.","call initialization method var0 __init__, with self instance of var2 class and var3 as arguments.","UnicodeDecodeError . __init__ ( self , * args )","var0 . __init__ ( self , * var3 )"
call the method unifunc.replace with an argument strfunc.,call method var0 with argument var1 ,unifunc . replace ( strfunc ),var0 ( var1 )
"substitute value under the ""unifunc"" key of the results dictionary for unifunc.",substitute value under var0 key of results dict for unifunc.,unifunc = results [ 'unifunc' ],unifunc = results [ 'unifunc' ]
"if f.unique is true, substitute ""UNIQUE "" for unique, otherwise unique is an empty string.","if var0 is true, substitute var1 for unique, otherwise unique is empty string.",unique = 'UNIQUE ' if f . unique else '',unique = 'UNIQUE ' if var0 else ''
"unique_check is a list with elements field, for every field in unique_check if field is not equal to self.fk.name.","var0 is list with elements field, for every field in var0 if field is not equal to var1 ",unique_check = [ field for field in unique_check if field != self . fk . name ],var0 = [ field for field in var0 if field != var1 ]
"call the method form.instance._get_unique_checks with an argument exclude as exclude, substitute the result for unique_checks,  and date_checks, respectively.","call method var1 with argument exclude as exclude, substitute result for var2 and var3 respectively.","unique_checks , date_checks = form . instance . _get_unique_checks ( exclude = exclude )","var2 , var0var3 = var1 ( exclude = exclude )"
"call the function get_tag_uri with 2 arguments: values under 'link' and 'pubdate' keys of item dictionary, substitute the result for unique_id.","call function var0 with 2 arguments: values under var2 and var3 keys of item dict, substitute result for var5 ","unique_id = get_tag_uri ( item [ 'link' ] , item [ 'pubdate' ] )","var5 = var0 ( item [ var2 ] , item [ 'pubdate' ] )"
substitute value under 'unique_id' key of item dictionary for unique_id.,substitute value under var0 key of item dict for unique_id.,unique_id = item [ 'unique_id' ],unique_id = item [ var0 ]
"subtract third element of tupl from length of second element of tupl, substitute the result for units.",subtract third element of var0 from length of second element of var0 substitute result for units.,units = len ( tupl [ 1 ] ) - tupl [ 2 ],units = len ( var0 [ 1 ] ) - var0 [ 2 ]
UNKNOWN_SOURCE is a string '<unknown source>'.,UNKNOWN_SOURCE is string var0.,UNKNOWN_SOURCE = '<unknown source>',UNKNOWN_SOURCE = var0
substitute os.unlink for unlink.,substitute var0 for var1 ,unlink = os . unlink,var1 = var0
"UnlockFileEx.argtypes is a list containing 5 elements: HANDLE, DWORD, DWORD, DWORD and LPOVERLAPPED.",var0 is list containing 5 elements: var1 var2 DWORD var2 and var8 ,"UnlockFileEx . argtypes = [ HANDLE , DWORD , DWORD , DWORD , LPOVERLAPPED ]","var0 = [ var1 , var2 , var2 , var2 , var8 ]"
substitute BOOL for UnlockFileEx.restype.,substitute var0 for var1 restype.,UnlockFileEx . restype = BOOL,var1 . restype = var0
substitute windll.kernel32.UnlockFileEx for UnlockFileEx.,substitute windll.kernel32 var1 for var1 ,UnlockFileEx = windll . kernel32 . UnlockFileEx,var1 = windll . kernel32 . var1
"if num_loopvars is greater than integer 1, unpack is an boolean True, otherwise is an boolean False.","if var0 is greater var2 integer 1, unpack is boolean var3 otherwise is boolean var4 ",unpack = num_loopvars > 1,unpack = var0 > 1
"zip self.loopvars and item is a list to tuples, convert the result to an dictionary, substitute it for unpacked_vars.","zip var0 and item is list to var1 convert result to dict, substitute it for var2 ","unpacked_vars = dict ( zip ( self . loopvars , item ) )","var2 = dict ( zip ( var0 , item ) )"
"call the method self._stream.read with an argument integer 1, substitute the result for unused_char.","call method var0 with argument integer 1, substitute result for var1 ",unused_char = self . _stream . read ( 1 ),var1 = var0 ( 1 )
call the method update_watch.,call method var0 ,update_watch ( ),var0 ( )
"call the function update_wrapper with 3 arguments: _dec, decorator and assigned as result of the function available_attrs,",call function var0 with 3 arguments: var1 decorator and assigned as result of function var2 ,"update_wrapper ( _dec , decorator , assigned = available_attrs ( decorator ) )","var0 ( var1 , decorator , assigned = var2 ( decorator ) )"
call the function update_wrapper with 2 arguments: _wrapper and dummy.,call function var0 with 2 arguments: _wrapper and dummy.,"update_wrapper ( _wrapper , dummy )","var0 ( _wrapper , dummy )"
call the function update_wrapper with 2 arguments: _wrapper and func.,call function var1 with 2 arguments: _wrapper and var0 ,"update_wrapper ( _wrapper , func )","var1 ( _wrapper , var0 )"
"call the function processor with an argument request, update updates dictionary with the result.","call function processor with argument request, update updates dict with result.",updates . update ( processor ( request ) ),updates . update ( processor ( request ) )
updates is an empty dictionary.,updates is empty dict.,updates = dict ( ),updates = dict ( )
"call the method value_from_datadict from the base class of the class ClearableFileInput,",call method var0 from base class of class var2 ,"upload = super ( ClearableFileInput , self ) . value_from_datadict ( data , files , name )","upload = super ( var2 , self ) . var0 ( data , files , name )"
upto is integer 0.,var0 is integer 0.,upto = 0,var0 = 0
"tuple with 2 elements: start and end and boolean False, append the result to result.   substitute end for upto.",tuple with 2 elements: start and end and boolean var0 append result to result var1 substitute end for var2 ,upto = end,var2 = end
"call the method match.end, substitute the result for upto.",call method var0 substitute result for var1 ,upto = match . end ( ),var1 = var0 ( )
"tuple with 2 elements: upto and start and boolean False, append the result to result.   substitute start for upto.",tuple with 2 elements: var0 and start and boolean var2 append result to result var3 substitute start for var0 ,upto = start,var0 = start
"substitute the result for trail.   call the function escape with an argument url, substitute the result for url, call the function escape with an argument trimmed,","substitute result for trail var0 call function escape with argument url, substitute result for url, call function escape with argument trimmed,","url , trimmed = escape ( url ) , escape ( trimmed )","url , trimmed = escape ( url ) , escape ( trimmed )"
url is an empty string.,url is empty string.,url = '',url = ''
url is a string 'mailto:%s@%s' formated with local and domain.,url is string var0 formated with local and domain.,"url = 'mailto:%s@%s' % ( local , domain )","url = var0 % ( local , domain )"
"call iri_to_uri with return value of the request.build_absolute_uri method, us the result as the argument for the call to the","call var0 with return value of request var2 method, us result as argument for call to the",url = hashlib . md5 ( force_bytes ( iri_to_uri ( request . build_absolute_uri ( ) ) ) ),url = hashlib . md5 ( force_bytes ( var0 ( request . var2 ( ) ) ) )
"call method request.build_absolute_uri, use the result as an argument for function call of iri_to_uri,",call method request var1 use result as argument for function call of var2 ,url = hashlib . md5 ( force_bytes ( iri_to_uri ( request . build_absolute_uri ( ) ) ) ),url = hashlib . md5 ( force_bytes ( var2 ( request . var1 ( ) ) ) )
url is None.,url is var0 ,url = None,url = var0
"url is a property of the class, lambda function is getter attribute with an argument self and return value is the value under the 'Location' key of the self dictionary.","url is property of class, lambda function is var0 attribute with argument self and return value is value under var1 key of self dict.",url = property ( lambda self : self [ 'Location' ] ),url = property ( lambda self : self [ var1 ] )
"call the function quote with 2 arguments: url and safe as bytes string '!*\'();:@&=+$,/?#[]~', substitute the result for url.","call the function quote with 2 arguments: url and safe as bytes string '!*\'();:@&=+$,/?#[]~', substitute the result for url.","url = quote ( url , safe = b'!*\'();:@&=+$,/?#[]~' )","url = quote ( url , safe = b'!*\'();:@&=+$,/?#[]~' )"
"call the function reverse with 4 arguments: concatenated project_name, character '.' and view_name, args as args, kwargs as kwargs,",call function reverse with 4 arguments: concatenated var0 character var2 and var3 var5 as var5 var7 as var7 ,"url = reverse ( project_name + '.' + view_name , args = args , kwargs = kwargs , current_app = context . current_app )","url = reverse ( var0 + var2 + var3 , var5 = var5 , kwvar5 = var7 , current_app = context . current_app )"
"call the function reverse with 4 arguments: view_name, args as args, kwargs as kwargs and current_app as context.current_app,",call function reverse with 4 arguments: var0 var1 as var1 var3 as var3 and var5 as context var5 ,"url = reverse ( view_name , args = args , kwargs = kwargs , current_app = context . current_app )","url = reverse ( var0 , var1 = var1 , kwvar1 = var3 , var5 = context . var5 )"
"call the function smart_urlquote with an argument string 'http://%s' formated with an argument middle, substitute the result for url.","call function var0 with argument string var2 formated with argument middle, substitute result for url.",url = smart_urlquote ( 'http://%s' % middle ),url = var0 ( var2 % middle )
"call the function smart_urlquote with an argument middle, substitute the result for url.","call function var0 with argument middle, substitute result for url.",url = smart_urlquote ( middle ),url = var0 ( middle )
"call the function force_str with an argument url, use the result as an argument for the call to the function unquote, substitute the result for url.","call function var0 with argument url, use result as argument for call to function var1 substitute result for url.",url = unquote ( force_str ( url ) ),url = var1 ( var0 ( url ) )
replace every occurrence of '\\' in url with '/'.,replace every occurrence of var0 in url with var1.,"url = url . replace ( '\\' , '/' )","url = url . replace ( '\\' , '/' )"
"call the function urlunsplit with a tuple containing 5 elements: scheme, netloc, path, query and fragment, as an argument, substitute the result for url.","call function var0 with tuple containing 5 elements: scheme var1 path, query and fragment, as argument, substitute result for url.","url = urlunsplit ( ( scheme , netloc , path , query , fragment ) )","url = var0 ( ( scheme , var1 , path , query , fragment ) )"
"call the function urlunsplit with an argument tuple with 4 elements: scheme, netloc, path, query and fragment, substitute the result for url.","call function var0 with argument tuple with 4 elements: scheme var1 path, query and fragment, substitute result for url.","url = urlunsplit ( ( scheme , netloc , path , query , fragment ) )","url = var0 ( ( scheme , var1 , path , query , fragment ) )"
substitute value for url.,substitute value for url.,url = value,url = value
first element of url_fields is string 'http'.,first element of var0 is string var2.,url_fields [ 0 ] = 'http',var0 [ 0 ] = var2
substitute third element of url_fields for second element of url_fields.,substitute third element of var0 for second element of var0 ,url_fields [ 1 ] = url_fields [ 2 ],var0 [ 1 ] = var0 [ 2 ]
third element of url_fields is an empty string.,third element of var0 is empty string.,url_fields [ 2 ] = '',var0 [ 2 ] = ''
"call the function urlunsplit with an argument url_fields, use the result as an argument for the call to the function split_url,",call function var0 with argument var1 use result as argument for call to function var2 ,url_fields = split_url ( urlunsplit ( url_fields ) ),var1 = var2 ( var0 ( var1 ) )
"call the function split_url with an argument value, substitute the result for url_fields.","call function var0 with argument value, substitute result for var1 ",url_fields = split_url ( value ),var1 = var0 ( value )
"call the function urlparse with an argument url, substitute the result for url_info.","call function var0 with argument url, substitute result for var1 ",url_info = urlparse ( url ),var1 = var0 ( url )
"url_markup_template is a string '<a href=""{0}"">{1}</a>'.","var0 is string '<a href=""{0}"">{1}</a>'.",url_markup_template = '<a href='{0}'>{1}</a>',var0 = '<a href='{0}'>{1}</a>'
"url_schemes is list of strings 'http', 'https' and 'ftp'.","var0 is list of strings var1, var2 and var3.","url_schemes = [ 'http' , 'https' , 'ftp' ]","var0 = [ var1 , 'https' , 'ftp' ]"
call the function get_urlconf with an argument urlconf.,call function var0 with argument urlconf.,urlconf = get_urlconf ( ),urlconf = var0 ( )
substitute request.urlconf for urlconf.,substitute var0 for var1 ,urlconf = request . urlconf,var1 = var0
substitute settings.ROOT_URLCONF for urlconf.,substitute settings var0 for var1 ,urlconf = settings . ROOT_URLCONF,var1 = settings . var0
"replace '%s' in string '<%s list>' with __class__.__name__ field of first element of self.urlconf_name, substitute it for urlconf_repr.",replace var0 in string var1 with var3 field of first element of self var5 substitute it for var6 ,urlconf_repr = '<%s list>' % self . urlconf_name [ 0 ] . __class__ . __name__,var6 = var1 % self . var5 [ 0 ] . var3
"create a printable representation of self.urlconf_name object, substitute it for urlconf_repr.","create printable representation of self var1 object, substitute it for var2 ",urlconf_repr = repr ( self . urlconf_name ),var2 = repr ( self . var1 )
"call the function allow_lazy with 2 arguments: urlize, six.text_type, substitute the result for urlize.",call function var0 with 2 arguments: var1 six var4 substitute result for var1 ,"urlize = allow_lazy ( urlize , six . text_type )","var1 = var0 ( var1 , six . var4 )"
"and result of the function force_str called with an argument safe,   use the result as an argument for the call to the function force_text, return the result.   call the function allow_lazy with 2 arguments: urlquote and six.text_type, substitute the result for urlquote.",and result of function var0 called with argument safe var1 use result as argument for call to function var3 return result var1 call function var5 with 2 arguments: var7 and six var10 substitute result for var7 ,"urlquote = allow_lazy ( urlquote , six . text_type )","var7 = var5 ( var7 , six . var10 )"
"and result of the function force_str called with an argument safe,   use the result as an argument for the call to the function force_text, return the result.   call the function allow_lazy with 2 arguments: urlquote_plus and six.text_type, substitute the result for urlquote_plus.",and result of function var0 called with argument safe var1 use result as argument for call to function var3 return result var1 call function var5 with 2 arguments: var7 and six var12 substitute result for var7 ,"urlquote_plus = allow_lazy ( urlquote_plus , six . text_type )","var7 = var5 ( var7 , six . var12 )"
call the method urlresolvers.set_urlconf with urlconf as the argument.,call method urlresolvers var1 with urlconf as argument.,urlresolvers . set_urlconf ( urlconf ),urlresolvers . var1 ( urlconf )
call the function urlresolvers.set_urlconf with urlconf as the argument.,call function urlresolvers var1 with urlconf as argument.,urlresolvers . set_urlconf ( urlconf ),urlresolvers . var1 ( urlconf )
"use the result as an argument for the call to the function force_text, return the result.   call the function allow_lazy with 2 arguments: urlunquote and six.text_type, substitute the result for urlunquote.",use result as argument for call to function var0 return result var1 call function var2 with 2 arguments: var4 and six var7 substitute result for var4 ,"urlunquote = allow_lazy ( urlunquote , six . text_type )","var4 = var2 ( var4 , six . var7 )"
"use the result as an argument for the call to the function force_text, return the result.   call the function allow_lazy with 2 arguments: urlunquote_plus and six.text_type, substitute the result for urlunquote_plus.",use result as argument for call to function var0 return result var1 call function var2 with 2 arguments: var4 and six var9 substitute result for var4 ,"urlunquote_plus = allow_lazy ( urlunquote_plus , six . text_type )","var4 = var2 ( var4 , six . var9 )"
"append string ""    %s"", where '%s' is replaced by name to the usage.",append string var0 var1 var2 is replaced by name to usage.,usage . append ( '    %s' % name ),usage . append ( '    %s' % name )
append an empty string to usage.,append empty string to usage.,usage . append ( '' ),usage . append ( '' )
"call the method style.NOTICE with an argument string ""Note that only Django core commands are listed as settings are not properly configured (error: %s)."", where '%s' is replaced by self.settings_exception, append the result to usage.",call method style var0 with argument string var1 var2 var3 is replaced by self var5 append result to usage.,usage . append ( style . NOTICE ( 'Note that only Django core commands are listed ' 'as settings are not properly configured (error: %s).' % self . settings_exception ) ),usage . append ( style . var0 ( 'Note that only Django core commands are listed as settings are not properly configured(error: %s).' % self . var5 ) )
"call the style.NOTICE method with an argument string ""[%s]"", where '%s' is replaced with app, append the result to usage.",call style var0 method with argument string var1 var3 var4 is replaced with var5 append result to usage.,usage . append ( style . NOTICE ( '[%s]' % app ) ),usage . var5end ( style . var0 ( '[var2]' % var5 ) )
"substitute '%s' in the string '%%prog %s [options] %s' with subcommand and self.args, respectively, substitute it for usage.","substitute var0 in string var1 with var5 and var6 respectively, substitute it for usage.","usage = '%%prog %s [options] %s' % ( subcommand , self . args )","usage = var1 % ( var5 , var6 )"
"usage is a list containing 4 entries: an empty string, string ""Type '%s help <subcommand>' for help on a specific subcommand."",","usage is list containing 4 entries: empty string, string var0,","usage = [  '' ,  'Type '%s help <subcommand>' for help on a specific subcommand.' % self . prog_name ,  '' ,  'Available subcommands:' ,  ]","usage = [ '',  'Type '%s help <subcommand>' for help on a specific subcommand.' % self.prog_name,  '',  'Available subcommands:', ]"
"call the function get_commands, call the method keys on the result, substitute sorted result for usage.","call function var0 call method keys on result, substitute sorted result for usage.",usage = sorted ( get_commands ( ) . keys ( ) ),usage = sorted ( var0 ( ) . keys ( ) )
"get the value under the 'use_base_manager' key of the options dictionary, substitute the result for use_base_manager.","get value under var0 key of options dict, substitute result for use_base_manager.",use_base_manager = options . get ( 'use_base_manager' ),use_base_manager = options . get ( var0 )
use_func is boolean False.,var0 is boolean var1 ,use_func = False,var0 = var1
use_func is boolean True.,var0 is boolean var1 ,use_func = True,var0 = var1
"if settings.USE_L10N is true, substitute settings.USE_THOUSAND_SEPARATOR for use_grouping,","if settings var0 is true, substitute settings var1 for var3 ",use_grouping = settings . USE_L10N and settings . USE_THOUSAND_SEPARATOR,var3 = settings . var0 and settings . var1
"if use_grouping is true and grouping is greater than integer 0, use_grouping is boolean True, otherwise it is boolean False.",if var0 is true and grouping is greater var4 integer 0 var0 is boolean var5 otherwise it is boolean var6 ,use_grouping = use_grouping and grouping > 0,var0 = var0 and grouping > 0
"otherwise substitute settings.USE_L10N for use_grouping.   if use_grouping is true substitute it for use_grouping, otherwise substitute force_grouping for use_grouping.",otherwise substitute settings var0 for var1 if var1 is true substitute it for var1 otherwise substitute var10 for var1 ,use_grouping = use_grouping or force_grouping,var1 = var1 or var10
USE_INOTIFY is boolean False.,var0 is boolean var1 ,USE_INOTIFY = False,var0 = var1
USE_INOTIFY is boolean True.,var0 is boolean var1 ,USE_INOTIFY = True,var0 = var1
"and RemovedInDjango19Warning.   get the value under the ' use_natural_foreign_keys' key of the options dictionary, substitute the result for  use_natural_foreign_keys.","and var0 get value under var3 key of options dict, substitute result for use_natural_foreign_keys.",use_natural_foreign_keys = options . get ( 'use_natural_foreign_keys' ) or use_natural_keys,use_natural_foreign_keys = options . get ( 'use_natural_foreign_keys' ) or use_natural_keys
"get the value under the 'use_natural_keys' key of the options dictionary, substitute the result for use_natural_keys.","get value under var0 key of options dict, substitute result for use_natural_keys.",use_natural_keys = options . get ( 'use_natural_keys' ),use_natural_keys = options . get ( var0 )
"get the value under the 'use_natural_primary_keys' key of the options dictionary, substitute the result for use_natural_primary_keys.","get value under var0 key of options dict, substitute result for use_natural_primary_keys.",use_natural_primary_keys = options . get ( 'use_natural_primary_keys' ),use_natural_primary_keys = options . get ( var0 )
use_null_fallback is boolean False.,var0 is boolean var1 ,use_null_fallback = False,var0 = var1
substitute it for localedir.   use_null_fallback is boolean True.,substitute it for var0 var2 is boolean var4 ,use_null_fallback = True,var2 = var4
substitute value under the 'use_reloader' key of the options dictionary for use_reloader.,substitute value under var0 key of options dict for use_reloader.,use_reloader = options . get ( 'use_reloader' ),use_reloader = options . get ( var0 )
substitute connection.features.test_db_allows_multiple_connections for use_threading.,substitute connection.features var1 for var2 ,use_threading = connection . features . test_db_allows_multiple_connections,var2 = connection . features . var1
"set use_workaround to boolean True if current_version tuple elements are smaller than the tuple (2,7,3), respectively,","set var0 to boolean var2 if var3 tuple elements are smaller var5 tuple (2,7,3), respectively,","use_workaround = ( ( current_version < ( 2 , 7 , 3 ) ) or ( current_version >= ( 3 , 0 ) and current_version < ( 3 , 2 , 3 ) ) )","var0 = var3 < ( 2 , 7 , 3 ) or var3 >= ( 3 , 0 ) and var3 < ( 3 , 2 , 3 )"
"append '.' to frag, append the result to used.",append var0 to var1 append result to used.,used += '.' + frag,used += var0 + var1
"remove first element from name, substitute the result for used.","remove first element from name, substitute result for used.",used = name . pop ( 0 ),used = name . pop ( 0 )
append att_name to used_column_names list.,append var0 to var1 list.,used_column_names . append ( att_name ),var1 . append ( var0 )
used_column_names is an empty list.,var0 is empty list.,used_column_names = [ ],var0 = [ ]
"filename and e.   split the_path at the '/' character, substitute last element of the result for used_name.","filename and var0 split var2 at var4 character, substitute last element of result for var5 ",used_name = the_path . split ( '/' ) [ - 1 ],var5 = var2 . split ( var4 ) [ - 1 ]
"call the method value.rsplit with arguments character '@' and integer 1, assign the result to user_part and domain_part, respectively.","call method var0 with arguments character var1 and integer 1, assign result to var2 and var4 respectively.","user_part , domain_part = value . rsplit ( '@' , 1 )","var2 , var4 = var0 ( var1 , 1 )"
"call the re.compile function with 2 arguments: raw string ""(^[-!#$%&'*+/=?^_`{}|~0-9A-Z]+(\.[-!#$%&'*+/=?^_`{}|~0-9A-Z]+)*$"",","call var0 function with 2 arguments: raw string var1,","user_regex = re . compile (  r'(^[-!#$%&'*+/=?^_`{}|~0-9A-Z]+(\.[-!#$%&'*+/=?^_`{}|~0-9A-Z]+)*$'  r'|^'([\001-\010\013\014\016-\037!#-\[\]-\177]|\\[\001-\011\013\014\016-\177])*'$)' ,  re . IGNORECASE )","user_regex = var0( r'(^[-!#$%&'*+/=?^_`{}|var2]+(\.[-!#$%&'*+/=?^_`{}|var2]+)*$'  r'|^'([\001-\010\013\014\016-\037!#-\[\]-\177]|\\[\001-\011\013\014\016-\177])*'$)',  re.IGNORECASE)"
"call the function module_to_dict with an argument settings._wrapped, substitute it for user_settings.",call function var0 with argument var1 substitute it for var2 ,user_settings = module_to_dict ( settings . _wrapped ),var2 = var0 ( var1 )
"call the function get_user_model, substitute the result for UserModel.",call function var0 substitute result for var2 ,UserModel = get_user_model ( ),var2 = var0 ( )
"get the value under the 'database' key of the options dictionary, substitute the result for database.","get value under var0 key of options dict, substitute result for database.",using = options . get ( 'database' ),using = options . get ( var0 )
string 'A secure pseudo-random number generator is not available on your system. Falling back to Mersenne Twister.'.   using_sysrandom is boolean False.,string var0 var2 is boolean var4 ,using_sysrandom = False,var2 = var4
using_sysrandom is boolean True.,var0 is boolean var1 ,using_sysrandom = True,var0 = var1
"call the function re.compile with an argument string ""([\u0080-\uffff])"", substitute the result for ustring_re.","call the function re.compile with an argument string ""([\u0080-\uffff])"", substitute the result for ustring_re.",ustring_re = re . compile ( '([\u0080-\uffff])' ),ustring_re = re . compile ( '([\u0080-\uffff])' )
"if pytz is true, substitute pytz.utc for utc, otherwise substitute result of the function UTC for utc.","if var0 is true, substitute var0 utc for utc, otherwise substitute result of function var2 for utc.",utc = pytz . utc if pytz else UTC ( ),utc = var0 . utc if var0 else var2 ( )
"call the function time.gmtime with argument timeval, use string '%Y%m%d%H%M%S' and the previous result as an argument for the call to the time.strftime function, substitute the result for utcdate.","call function var0 with argument var1 use string var2 and previous result as argument for call to var3 function, substitute result for var4 ","utcdate = time . strftime ( '%Y%m%d%H%M%S' , time . gmtime ( timeval ) )","var4 = var3 ( var2 , var0 ( var1 ) )"
utf8_charset.body_encoding is None.,utf8_charset var1 is var2 ,utf8_charset . body_encoding = None,utf8_charset . var1 = var2
"call the function Charset.Charset with argument string 'utf-8', substitute the result for utf8_charset.","call function var0 Charset with argument string var4, substitute result for var5 ",utf8_charset = Charset . Charset ( 'utf-8' ),var5 = var0 . var0 ( var4 )
call the method utility.execute.,call method var0 ,utility . execute ( ),var0 ( )
"utility is a instance of ManagementUtility class, created with an argument argv.","utility is instance of var0 class, created with argument var1 ",utility = ManagementUtility ( argv ),utility = var0 ( var1 )
substitute e and tb for v.__cause__ and v.__traceback__.,substitute e and tb for var0 and var1 ,"v . __cause__ , v . __traceback__ = e , tb","var0 , var1 = e , tb"
call the function v with an argument value.,call function v with argument value.,v ( value ),v ( value )
"call the method datetime.datetime.strptime with 2 arguments: return value of the function force_str called with an argument value,","call method var0 with 2 arguments: return value of function var1 called with argument value,","v = datetime . datetime . strptime ( force_str ( value ) , input_format )","v = var0 ( var1 ( value ) , input_format )"
"raise an ValueError exception with an argument string 'Cannot resolve %r: %s', formated with s and e.","raise var0 exception with argument string var2, formated with s and var3","v = ValueError ( 'Cannot resolve %r: %s' % ( s , e ) )","v = var0 ( var2 % ( s , e ) )"
"from the base class of the class SimpleCookie call the value_encode method with val as the argument, store the result in the val and encoded, respectively.","from base class of class var0 call var1 method with var3 as argument, store result in var3 and encoded, respectively.","val , encoded = super ( SimpleCookie , self ) . value_encode ( val )","var3 , encoded = super ( var0 , self ) . var1 ( var3 )"
append iso_input to val.,append var0 to var1 ,val . append ( iso_input ),var1 . append ( var0 )
call the method val.encode with argument string 'ascii'.,call method var0 with argument string var1.,val . encode ( 'ascii' ),var0 ( var1 )
append to the string val the hexadecimal conversion of the value (7 - (256 -x)),append to string var0 hexadecimal conversion of value (7 - (256 -x)),val += '%02x' % ( 7 - ( 256 - x ) ),var0 += '%02x' % ( 7 - ( 256 - x ) )
convert (x+7) to hexadecimal and append it to val,convert (x+7) to hexadecimal and append it to var0,val += '%02x' % ( x + 7 ),var0 += '%02x' % ( x + 7 )
"call the function sanitize_address with arguments addr and encoding, for every addr in return value of the getadresses function with tuple containing val as argument, join all the results into a string separated by ', ', substitute the result for val.","call function var0 with arguments var2 and encoding, for every var2 in return value of var6 function with tuple containing var4 as argument, join all results into string separated by var7, substitute result for var4 ","val = ', ' . join ( sanitize_address ( addr , encoding ) for addr in getaddresses ( ( val , ) ) )","var4 = var7 . join ( var0 ( var2 , encoding ) for var2 in getaddresses ( ( var4 , ) ) )"
"set the variable val the hexadecimal value of the variable temp followed by a ', '",set variable var0 hexadecimal value of variable temp followed by var1,"val = '%02x, ' % temp","var0 = '%02x, ' % temp"
"call the function force_text with argument val, substitute it for val.",call function var0 with argument var1 substitute it for var1 ,val = force_text ( val ),var1 = var0 ( var1 )
"get format_type attribute of module object, substitute the result for val.","get var0 attribute of module object, substitute result for var1 ","val = getattr ( module , format_type )","var1 = getattr ( module , var0 )"
"call the encode function on the Header class instance, created with arguments val and encoding, substitute the result for val.","call encode function on var0 class instance, created with arguments var1 and encoding, substitute result for var1 ","val = Header ( val , encoding ) . encode ( )","var1 = var0 ( var1 , encoding ) . encode ( )"
"call the encode function on the Header class instance, created with argument val, substitute the result for val.","call encode function on var0 class instance, created with argument var1 substitute result for var1 ",val = Header ( val ) . encode ( ),var1 = var0 ( var1 ) . encode ( )
val is the result of the bitwise xor between the integer base 32 of the string byte encoded to hex and i,var0 is result of var1 xor between integer base 32 of string byte encoded to hex and i,"val = int ( byte . encode ( 'hex' ) , 32 ) ^ i","var0 = int ( byte . encode ( 'hex' ) , 32 ) ^ i"
"convert val to an list, substitute it for val.","convert var0 to list, substitute it for var0 ",val = list ( val ),var0 = list ( var0 )
val is None.,var0 is var1 ,val = None,var0 = var1
"call the method self._cache.decr with key and delta as arguments, substitute the result for val.","call method var0 with key and delta as arguments, substitute result for var1 ","val = self . _cache . decr ( key , delta )","var1 = var0 ( key , delta )"
"call the self._cache.get method with argument key, substitute the result for val.","call var0 method with argument key, substitute result for var1 ",val = self . _cache . get ( key ),var1 = var0 ( key )
"call the method self._cache.incr with key and delta as arguments, substitute the result for val.","call method var0 with key and delta as arguments, substitute result for var1 ","val = self . _cache . incr ( key , delta )","var1 = var0 ( key , delta )"
"call the self.get method with k and version set to version as arguments, substitute the result for val.","call self.get method with k and version set to version as arguments, substitute result for var0 ","val = self . get ( k , version = version )","var0 = self . get ( k , version = version )"
substitute value under the key key of self dictionary for val.,substitute value under key key of self dict for var0 ,val = self [ key ],var0 = self [ key ]
store in val1 2 to the power of max_bits multipied by 3,store in var0 2 to power of var1 var2 by 3,val1 = 2 ** max_bits * 3,var0 = 2 ** var1 * 3
store in val1 2 to the power of max_bits divided by 3,store in var0 2 to power of var1 divided by 3,val1 = 2 ** max_bits / 3,var0 = 2 ** var1 / 3
assign val1 2 to the power of max_bits minus 1,assign var0 2 to power of var1 minus 1,val1 = 2 ** max_bits - 1,var0 = 2 ** var1 - 1
store in val1 2 to the power of max_bits minus 1,store in var0 2 to power of var1 minus 1,val1 = 2 ** max_bits - 1,var0 = 2 ** var1 - 1
set val1 to the reversed hexadecimal value of val2,set var0 to reversed hexadecimal value of var1,val1 = hex ( val2 ) [ : : - 1 ],var0 = hex ( var1 ) [ : : - 1 ]
val1 is the integer base 32 of the string byte encoded to hex,var0 is integer base 32 of string byte encoded to hex,"val1 = int ( byte . encode ( 'hex' ) , 32 )","var0 = int ( byte . encode ( 'hex' ) , 32 )"
val1 is the result of the bitwise and between the integer base 32 of the string byte encoded to hex and temp,var0 is result of var1 and between integer base 32 of string byte encoded to hex and temp,"val1 = int ( byte . encode ( 'hex' ) , 32 ) & temp","var0 = int ( byte . encode ( 'hex' ) , 32 ) & temp"
val1 is the result of the bitwise xor between the integer base 32 of the string byte encoded to hex and i,var0 is result of var1 xor between integer base 32 of string byte encoded to hex and i,"val1 = int ( byte . encode ( 'hex' ) , 32 ) ^ i","var0 = int ( byte . encode ( 'hex' ) , 32 ) ^ i"
val1 is the result of the bitwise or between the integer base 32 of the string byte encoded to hex and i,var0 is result of var1 or between integer base 32 of string byte encoded to hex and i,"val1 = int ( byte . encode ( 'hex' ) , 32 ) | i","var0 = int ( byte . encode ( 'hex' ) , 32 ) | i"
"call the method parser.compile_filter with an argument, second element of bits, substitute the result for val1.","call method parser var1 with argument, second element of bits, substitute result for var2 ",val1 = parser . compile_filter ( bits [ 1 ] ),var2 = parser . var1 ( bits [ 1 ] )
assign val2 the hexadecimal value of the variable chunk at element converted to int16  xor with the variable xor_byte,assign var1 hexadecimal value of variable chunk at element converted to var2 xor with variable var3,"val2 = int ( chunk [ i ] . encode ( 'hex' ) , 16 ) ^ xor_byte","var1 = int ( chunk [ i ] . encode ( 'hex' ) , var016 ) ^ var3"
assign val2 the hexadecimal value of the variable chunk at element converted to int 32,assign var0 hexadecimal value of variable chunk at element converted to var1 32,"val2 = int ( chunk [ i ] . encode ( 'hex' ) , 32 )","var0 = var1 ( chunk [ i ] . encode ( 'hex' ) , 32 )"
assign val2 the hexadecimal value of the variable chunk at element converted to int32  bitwise and with the variable xor_byte,assign var1 hexadecimal value of variable chunk at element converted to var2 var3 and with variable var4,"val2 = int ( chunk [ i ] . encode ( 'hex' ) , 32 ) & xor_byte","var1 = int ( chunk [ i ] . encode ( 'hex' ) , var032 ) & var4"
val2 is the result of the bitwise xor between the int32 of the element i of chunk encoded to hex and xor_byte,var0 is result of var1 xor between var2 of element i of chunk encoded to hex and var3,"val2 = int ( chunk [ i ] . encode ( 'hex' ) , 32 ) ^ xor_byte","var0 = int ( chunk [ i ] . encode ( 'hex' ) , 32 ) ^ var3"
assign val2 the hexadecimal value of the variable chunk at element converted to int32  xor with the variable xor_byte,assign var1 hexadecimal value of variable chunk at element converted to var2 xor with variable var3,"val2 = int ( chunk [ i ] . encode ( 'hex' ) , 32 ) ^ xor_byte","var1 = int ( chunk [ i ] . encode ( 'hex' ) , var032 ) ^ var3"
store in val2 the hexadecimal value of the variable chunk at element converted to int32  xor with the variable xor_byte,store in var1 hexadecimal value of variable chunk at element converted to var2 xor with variable var3,"val2 = int ( chunk [ i ] . encode ( 'hex' ) , 32 ) ^ xor_byte","var1 = int ( chunk [ i ] . encode ( 'hex' ) , var032 ) ^ var3"
val2 is the result of the bitwise or between the integer base 32 of the element i of chunk encoded to hex and xor_byte,var0 is result of var1 or between integer base 32 of element i of chunk encoded to hex and var2,"val2 = int ( chunk [ i ] . encode ( 'hex' ) , 32 ) | xor_byte","var0 = int ( chunk [ i ] . encode ( 'hex' ) , 32 ) | var2"
call the function mask with the argument tmp2 and save the return value in val2,call function mask with argument var0 and save return value in var1,val2 = mask ( tmp2 ),var1 = mask ( var0 )
"call the method self.var2.resolve with 2 arguments: context and boolean True, substitute the result for val2.",call method var0 with 2 arguments: context and boolean var1 substitute result for var2 ,"val2 = self . var2 . resolve ( context , True )","var2 = var0 ( context , var1 )"
call the function create with the argument tmp3 and save the return value in val3,call function create with argument var0 and save return value in var1,val3 = create ( tmp3 ),var1 = create ( var0 )
valid is boolean False.,valid is boolean var0 ,valid = False,valid = var0
valid is boolean True.,valid is boolean var0 ,valid = True,valid = var0
"for every form in self.forms append form to a list, if function form.is_valid evaluates to true,","for every form in var0 append form to list, if function form var2 evaluates to true,",valid_forms = [ form for form in self . forms if form . is_valid ( ) and form not in forms_to_delete ],valid_forms = [ form for form in var0 if form . var2 ( ) and form not in forms_to_delete ]
"validate_comma_separated_integer_list is a instance of a RegexValidator class, created with 3 arguments: comma_separated_int_list_re,","var0 is instance of var1 class, created with 3 arguments: var2 ","validate_comma_separated_integer_list = RegexValidator ( comma_separated_int_list_re , _ ( 'Enter only digits separated by commas.' ) , 'invalid' )","var0 = var1 ( var2 , _ ( 'Enter only digits separated by commas.' ) , 'invalid' )"
"and self.message equals to other.message, and self.code equals to other.code, return boolean True, otherwise return boolean False.   validate_email is an instance of EmailValidator class.",and var0 equals to var1 and var2 equals to var3 return boolean var4 otherwise return boolean var5 var7 is instance of var9 class.,validate_email = EmailValidator ( ),var7 = var9 ( )
call the function validate_ipv4_address with an argument hextet.,call function var0 with argument var1 ,validate_ipv4_address ( hextet ),var0 ( var1 )
call the function validate_ipv4_address with an argument value.,call function var0 with argument value.,validate_ipv4_address ( value ),var0 ( value )
"substitute the result for ipv4_re.   validate_ipv4_address is a instance of a RegexValidator class, created with 3 arguments: ipv4_re,","substitute result for var0 var3 is instance of var5 class, created with 3 arguments: var0 ","validate_ipv4_address = RegexValidator ( ipv4_re , _ ( 'Enter a valid IPv4 address.' ) , 'invalid' )","var3 = var5 ( var0 , _ ( 'Enter a valid IPv4 address.' ) , 'invalid' )"
call the function validate_ipv46_address with an argument ip_address.,call function var0 with argument var1 ,validate_ipv46_address ( ip_address ),var0 ( var1 )
call the function validate_ipv6_address with an argument value.,call function var0 with argument value.,validate_ipv6_address ( value ),var0 ( value )
"validate_slug is a instance of a RegexValidator class, created with 3 arguments: slug_re, return value of the call to the function,","var0 is instance of var1 class, created with 3 arguments: var2 return value of call to function,","validate_slug = RegexValidator ( slug_re , _ ( 'Enter a valid 'slug' consisting of letters, numbers, underscores or hyphens.' ) , 'invalid' )","var0 = var1(var2, _('Enter a valid 'slug' consisting of letters, numbers, underscores or hyphens.'), 'invalid')"
"call the function convert_old_style_list with an argument value, substitute the result for value and converted, respectively.","call function var0 with argument value, substitute result for value and converted, respectively.","value , converted = convert_old_style_list ( value )","value , converted = var0 ( value )"
"split value into two parts by decimal_separator, assign the result to value and decimals.",split value into two parts by var0 assign result to value and decimals.,"value , decimals = value . split ( decimal_separator , 1 )","value , decimals = value . split ( var0 , 1 )"
"call the signed_value.rsplit method with arguments self.sep and integer 1, substitute the result for value and sig, respectively.","call var0 rsplit method with arguments var2 and integer 1, substitute result for value and sig, respectively.","value , sig = signed_value . rsplit ( self . sep , 1 )","value , sig = var0 . rsplit ( var2 , 1 )"
"call the result.rsplit method with arguments self.sep and integer 1, substitute the result for value and timestamp, respectively.","call var0 method with arguments var1 and integer 1, substitute result for value and var2 respectively.","value , timestamp = result . rsplit ( self . sep , 1 )","value , var2 = var0 ( var1 , 1 )"
substitute self for value.configurator.,substitute self for var0 ,value . configurator = self,var0 = self
call the method value.decode with an argument charset.,call method var0 with argument var1 ,value . decode ( charset ),var0 ( var1 )
call the method value.encode with an argument charset.,call method var0 with argument var1 ,value . encode ( charset ),var0 ( var1 )
"append value to the '-', substitute it for value.","append value to var0, substitute it for value.",value = '-' + value,value = var0 + value
"reverse order of parts, join them into a string, separated with '.', substitute the result for value.","reverse order of parts, join var0 into string, separated with var1, substitute result for value.",value = '.' . join ( reversed ( parts ) ),value = var1 . join ( reversed ( parts ) )
value is an empty string.,value is empty string.,value = '',value = ''
"substitute '%s' in string '%s %s' with the elements of value converted into a tuple, substitute the result for value.","substitute var0 in string var1 with elements of value converted into tuple, substitute result for value.",value = '%s %s' % tuple ( value ),value = var1 % tuple ( value )
value is an string '1'.,value is string var0.,value = '1',value = var0
value is an empty list.,value is empty list.,value = [ ],value = [ ]
"for every v in value call the function conditional_escape with an argument v, append the result in a list, substitute the resulting list for value.","for every v in value call function var0 with argument v, append result in list, substitute resulting list for value.",value = [ conditional_escape ( v ) for v in value ],value = [ var0 ( v ) for v in value ]
"get the value under value key of a dictionary with 4 entries: '2' for boolean True, '3' for boolean False, '2' for '2',","get value under value key of dict with 4 entries: var0 for boolean var3 var4 for boolean var5 var0 for var0,","value = { True : '2' , False : '3' , '2' : '2' , '3' : '3' } [ value ]","value = { var3 : var0 , var5 : '3' , var0 : var0 , '3' : '3' } [ value ]"
"call the self.make_bytes method with an argument chunk, for every chunk in value join the result to a bytes string,","call self var1 method with argument chunk, for every chunk in value join result to bytes string,",value = b'' . join ( self . make_bytes ( chunk ) for chunk in value ),value = b'' . join ( self . var1 ( chunk ) for chunk in value )
convert value into boolean and substitute it for value.,convert value into boolean and substitute it for value.,value = bool ( value ),value = bool ( value )
"call the method bytes_to_text with 2 arguments: key and self.encoding, substitute the result for value.",call method var0 with 2 arguments: key and var1 substitute result for value.,"value = bytes_to_text ( value , self . encoding )","value = var0 ( value , var1 )"
"call the method bytes_to_text with 2 arguments: value and self.encoding, substitute the result for value.",call method var0 with 2 arguments: value and var1 substitute result for value.,"value = bytes_to_text ( value , self . encoding )","value = var0 ( value , var1 )"
"call the method ops.process_clob with second element of row as argument, on the object under the db key of connections dictionary, substitute the result for value.","call method ops var1 with second element of row as argument, on object under db key of connections dict, substitute result for value.",value = connections [ db ] . ops . process_clob ( row [ 1 ] ),value = connections [ db ] . ops . var1 ( row [ 1 ] )
"call the function converter with an argument suffix, substitute the result for value.","call function converter with argument suffix, substitute result for value.",value = converter ( suffix ),value = converter ( suffix )
"value is an instance of ConvertingDict class, created with an argument value.","value is instance of var0 class, created with argument value.",value = ConvertingDict ( value ),value = var0 ( value )
"value is an instance of ConvertingList class, created with an argument value.","value is instance of var0 class, created with argument value.",value = ConvertingList ( value ),value = var0 ( value )
"value is an instance of ConvertingTuple class, created with an argument value.","value is instance of var0 class, created with argument value.",value = ConvertingTuple ( value ),value = var0 ( value )
"get the value under the name key of the data dictionary, if it exists substitute it for value, if not, value is None.","get value under name key of data dict, if it exists substitute it for value, if not, value is var0 ","value = data . get ( name , None )","value = data . get ( name , var0 )"
"get the name key of the data dictionary, substitute it for value.","get name key of data dict, substitute it for value.",value = data . get ( name ),value = data . get ( name )
"call the method datetime_safe.new_date with an argument value, substitute the result for value.","call method var0 var2 with argument value, substitute result for value.",value = datetime_safe . new_date ( value ),value = var0 . var2 ( value )
"call the method datetime_safe.new_datetime with an argument value, substitute the result for value.","call method var0 var2 with argument value, substitute result for value.",value = datetime_safe . new_datetime ( value ),value = var0 . var2 ( value )
value is an instance of a class Decimal created with value as an argument.,value is instance of class var0 created with value as argument.,value = Decimal ( value ),value = var0 ( value )
"call the method dict.__getitem__ with 2 arguments self and key, substitute the result for value.","call method var0 with 2 arguments self and key, substitute result for value.","value = dict . __getitem__ ( self , key )","value = var0 ( self , key )"
"get value under key key of self dictionary, if it doesnt exists return default, substitute the result for value.","get value under key key of self dict, if it doesnt exists return default, substitute result for value.","value = dict . get ( self , key , default )","value = dict . get ( self , key , default )"
"remove value under key key of self dictionary, if it doesnt exists return default, substitute the result for value.","remove value under key key of self dict, if it doesnt exists return default, substitute result for value.","value = dict . pop ( self , key , default )","value = dict . pop ( self , key , default )"
"convert key and default to strings, get the value under the key string key of the environ dictionary, if it does not exists use the,","convert key and default to strings, get value under key string key of environ dict, if it does not exists use the,","value = environ . get ( str ( key ) , str ( default ) )","value = environ . get ( str ( key ) , str ( default ) )"
"call the function escape with an argument value, substitute it for value.","call function escape with argument value, substitute it for value.",value = escape ( value ),value = escape ( value )
value is boolean False.,value is boolean var0 ,value = False,value = var0
"call the method field._get_val_from_obj with obj argument, substitute the result for value.","call method var0 with var1 argument, substitute result for value.",value = field . _get_val_from_obj ( obj ),value = var0 ( var1 )
"if not substitute field.initial for initial.   call the method filed.clean with arguments value and initial, substitute the result for value.","if not substitute var0 for initial var1 call method var2 with arguments value and initial, substitute result for value.","value = field . clean ( value , initial )","value = field . clean ( value , initial )"
"call the method field.clean with an argument value, substitute the result for value.","call method var0 with argument value, substitute result for value.",value = field . clean ( value ),value = var0 ( value )
"all the method field.rel.to._meta.get_field with field.rel.field_name as argument, call the to_python method on the result with,","all method field.rel.to._meta var1 with field.rel var3 as argument, call var4 method on result with,",value = field . rel . to . _meta . get_field ( field . rel . field_name ) . to_python ( field_value ),value = field . rel . to . _meta . var1 ( field . rel . var3 ) . var4 ( field_value )
"call the function getInnerText with argument field_node, on the result call the method strip, use the result as an argument for the","call function var0 with argument var1 on result call method strip, use result as argument for the",value = field . to_python ( getInnerText ( field_node ) . strip ( ) ),value = field . to_python ( var0 ( var1 ) . strip ( ) )
"call the method field.widget.value_from_datadict with 3 arguments: self.data, self.files and return value of the method,","call method field.widget var1 with 3 arguments: var2 var3 and return value of method,","value = field . widget . value_from_datadict ( self . data , self . files , self . add_prefix ( name ) )","value = field . widget . var1 ( var2 , var3 , self . add_prefix ( name ) )"
substitute value under the attr key of flags dictionary for value.,substitute value under var0 key of flags dict for value.,value = flags [ attr ],value = flags [ var0 ]
"convert value into an floating point number, substitute it for value.","convert value into floating point number, substitute it for value.",value = float ( value ),value = float ( value )
"call the function force_str with an argument value, substitute the result for value.","call function var0 with argument value, substitute result for value.",value = force_str ( value ),value = var0 ( value )
"call the force_str function with an argument value, substitute the result for value.","call var0 function with argument value, substitute result for value.",value = force_str ( value ),value = var0 ( value )
"call the function force_text with an argument value, substitute the result for value.","call function var0 with argument value, substitute result for value.",value = force_text ( value ),value = var0 ( value )
"call the method formats.sanitize_separators with an argument value, substitute the result for value.","call method formats var1 with argument value, substitute result for value.",value = formats . sanitize_separators ( value ),value = formats . var1 ( value )
"get attr attribute from the _module object, substitute it for value.","get var0 attribute from var1 object, substitute it for value.","value = getattr ( _module , attr )","value = getattr ( var1 , var0 )"
"get return value of the field.get_attname function attribute of the obj object, substitute it for value.","get return value of field var1 function attribute of var2 object, substitute it for value.","value = getattr ( obj , field . get_attname ( ) )","value = getattr ( var2 , field . var1 ( ) )"
"unpacked list field_value as an argument, substitute the result for obj.   get field.rel.field_name attribute of the object obj, substitute it for value.","unpacked list var0 as argument, substitute result for var1 get field.rel var5 attribute of object var1 substitute it for value.","value = getattr ( obj , field . rel . field_name )","value = getattr ( var1 , field . rel . var5 )"
"get opt attribute of the opts object, substitute it for value.","get opt attribute of opts object, substitute it for value.","value = getattr ( opts , opt )","value = getattr ( opts , opt )"
"get 'clean_%s', where '%s' is replaced with name' attribute of the self object, call the result as an function,","get var0 var1 var2 is replaced with name' attribute of self object, call result as function,","value = getattr ( self , 'clean_%s' % name ) ( )","value = getattr ( self , var0 % name ) ( )"
"convert s to integer of base 36, substitute it for value.","convert s to integer of base 36, substitute it for value.","value = int ( s , 36 )","value = int ( s , 36 )"
"convert value into an string, convert the result into an integer and substitute it for value.","convert value into string, convert result into integer and substitute it for value.",value = int ( str ( value ) ),value = int ( str ( value ) )
convert value to an integer.,convert value to integer.,value = int ( value ),value = int ( value )
"call the method list.__getitem__ with 2 arguments self and key, substitute the result for value.","call method var0 with 2 arguments self and key, substitute result for value.","value = list . __getitem__ ( self , key )","value = var0 ( self , key )"
remove idx-th element from self list.,remove idx-th element from self list.,"value = list . pop ( self , idx )","value = list . pop ( self , var0 )"
"call the function localize with 2 arguments: value and use_l10n=context.use_l10n, substitute the result for value.",call function localize with 2 arguments: value and use_l10n=context var0 substitute result for value.,"value = localize ( value , use_l10n = context . use_l10n )","value var2 localize(value, var0 var2 context.var0)"
"map elements of value through mapping function force_text, substitute the result for value.",map elements of value through mapping function var0 substitute result for value.,"value = map ( force_text , value )","value = map ( var0 , value )"
substitute new_value for value.,substitute var0 for value.,value = new_value,value = var0
"call the function next with an argument cycle_iter, call the method resolve on the result with an argument context, substitute the result for value.","call function next with argument var0 call method resolve on result with argument context, substitute result for value.",value = next ( cycle_iter ) . resolve ( context ),value = next ( var0 ) . resolve ( context )
value is None.,value is var0 ,value = None,value = var0
"call the function normalize_newlines with an argument value, substitute the result for value.","call function var0 with argument value, substitute result for value.",value = normalize_newlines ( value ),value = var0 ( value )
"decode with an argument string 'ascii', substitute the result for name.   take elements of p from index i incremented by 1 to the end, strip the result of the whitespaces, substitute it for value.","decode with argument string var0, substitute result for name var1 take elements of p from index i var2 by 1 to end, strip result of var3 substitute it for value.",value = p [ i + 1 : ] . strip ( ),value = p [ i + 1 : ] . strip ( )
"and string 'ignore', call the method decode on the result with an argument string 'ascii', substitute the result for value.   call the method re.sub with 3 arguments: string '[^\w\s-]', empty string and value, strip the result of whitespaces from both ends,","and string 'ignore', call the method decode on the result with an argument string 'ascii', substitute the result for value.   call the method re.sub with 3 arguments: string '[^\w\s-]', empty string and value, strip the result of whitespaces from both ends,","value = re . sub ( '[^\w\s-]' , '' , value ) . strip ( ) . lower ( )","value = re . sub ( '[^\w\s-]' , '' , value ) . strip ( ) . lower ( )"
"call the method related.natural_key, substitute the result for value.",call method related var1 substitute result for value.,value = related . natural_key ( ),value = related . var1 ( )
call method request.META.get with arguments header and None.,call method request var1 get with arguments header and var2 ,"value = request . META . get ( header , None )","value = request . var1 . get ( header , var2 )"
"call the method self._convert_to_charset with arguments: header, string 'latin-1' and mime_encode set to boolean True,","call method var0 with arguments: header, string var1 and var2 set to boolean var4 ","value = self . _convert_to_charset ( value , 'latin-1' , mime_encode = True )","value = var0 ( value , var1 , var2 = var4 )"
substitute self._empty_value for value.,substitute var0 for value.,value = self . _empty_value,value = var0
"call the function self._resolve_lookup with an argument context, substitute the result for value.","call function var0 with argument context, substitute result for value.",value = self . _resolve_lookup ( context ),value = var0 ( context )
"call the function self.coerce with an argument value, substitute it for value.","call function var0 with argument value, substitute it for value.",value = self . coerce ( value ),value = var0 ( value )
"call the method self.decompress with an argument value, substitute the result for value.","call method var0 with argument value, substitute result for value.",value = self . decompress ( value ),value = var0 ( value )
"call the method self.get with key and version set to version as arguments, substitute the result for value.","call method var0 with key and version set to version as arguments, substitute result for value.","value = self . get ( key , version = version )","value = var0 ( key , version = version )"
"call the self.get method with arguments key and version set to version, substitute the result for value.","call self.get method with arguments key and version set to version, substitute result for value.","value = self . get ( key , version = version )","value = self . get ( key , version = version )"
"call the self.get method with key and version set to version as arguments, substitute the result for value.","call self.get method with key and version set to version as arguments, substitute result for value.","value = self . get ( key , version = version )","value = self . get ( key , version = version )"
substitute self.literal for value.,substitute var0 for value.,value = self . literal,value = var0
"call the method self.make_bytes with an argument value, substitute the result for value.","call method self var1 with argument value, substitute result for value.",value = self . make_bytes ( value ),value = self . var1 ( value )
"call the method self.queryset.get with an argument, unpacked dictionary with an element: value for key, substitute the result for value.","call method var0 with argument, unpacked dict with element: value for key, substitute result for value.",value = self . queryset . get ( ** { key : value } ),value = var0 ( ** { key : value } )
"call the method self.to_python with an argument value, substitute it for value.","call method self var1 with argument value, substitute it for value.",value = self . to_python ( value ),value = self . var1 ( value )
"call the method self.to_python with an argument value, strip the whitespaces from the both ends of the result and substitute it for value.","call method self var1 with argument value, strip var2 from both ends of result and substitute it for value.",value = self . to_python ( value ) . strip ( ),value = self . var1 ( value ) . strip ( )
"call the method self.to_python with an argument value, strip the whitespaces from the result, substitute it for value.","call method self var1 with argument value, strip var2 from result, substitute it for value.",value = self . to_python ( value ) . strip ( ),value = self . var1 ( value ) . strip ( )
"call the self.to_python method with an argument value, strip the result of the whitespaces from the sides, substitute the result for value.","call self var1 method with argument value, strip result of var2 from sides, substitute result for value.",value = self . to_python ( value ) . strip ( ),value = self . var1 ( value ) . strip ( )
"call the method self.val_expr.resolve with an argument context, substitute the result for value.","call method self var1 resolve with argument context, substitute result for value.",value = self . val_expr . resolve ( context ),value = self . var1 . resolve ( context )
"call the method signing.get_cookie_signer with an argument salt set to sum of key and salt,","call method signing var1 with argument salt set to sum of key and salt,",value = signing . get_cookie_signer ( salt = key + salt ) . sign ( value ),value = signing . var1 ( salt = key + salt ) . sign ( value )
"call the method signing.get_cookie_signer with an argument salt set to sum of key and salt, call the method unsign on the result,","call method signing var1 with argument salt set to sum of key and salt, call method var2 on result,","value = signing . get_cookie_signer ( salt = key + salt ) . unsign ( cookie_value , max_age = max_age )","value = signing . var1 ( salt = key + salt ) . var2 ( cookie_value , max_age = max_age )"
"call the function smart_text with an argument value, strip the result of whitespaces from both ends and substitute it for value.","call function var0 with argument value, strip result of var1 from both ends and substitute it for value.",value = smart_text ( value ) . strip ( ),value = var0 ( value ) . strip ( )
"convert value, self.sep and return value of the function timestamp, concatenate them, substitute the result for value.",convert value var0 and return value of function var1 concatenate var2 substitute result for value.,"value = str ( '%s%s%s' ) % ( value , self . sep , self . timestamp ( ) )","value = str ( '%s%s%s' ) % ( value , var0 , self . var1 ( ) )"
"instantiate class Header with 3 arguments: value, string 'utf-8', maxlinelen set to sys.maxsize, call the encode method on it,","instantiate class var0 with 3 arguments: value, string var1 var2 set to var3 call encode method on it,","value = str ( Header ( value , 'utf-8' , maxlinelen = sys . maxsize ) . encode ( ) )","value = str ( var0 ( value , var1 , var2 = var3 ) . encode ( ) )"
convert value to an string and substitute it for value.,convert value to string and substitute it for value.,value = str ( value ),value = str ( value )
"call the method __getitem__ with an argument key from the base class of the class DictWrapper, substitute the result for value.",call method var0 with argument key from base class of class var1 substitute result for value.,"value = super ( DictWrapper , self ) . __getitem__ ( key )","value = super ( var1 , self ) . var0 ( key )"
"call the method to_python with an argument value, from the base class of the IntegerField class, substitute the result for value.","call method var0 with argument value, from base class of var2 class, substitute result for value.","value = super ( IntegerField , self ) . to_python ( value )","value = super ( var2 , self ) . var0 ( value )"
"call the method clean with an argument value from the base class of the class TypedChoiceField, substitute the result for value.",call method clean with argument value from base class of class var0 substitute result for value.,"value = super ( TypedChoiceField , self ) . clean ( value )","value = super ( var0 , self ) . clean ( value )"
"call the method clean with an argument value from the base class of the class TypedMultipleChoiceField, substitute the result for value.",call method clean with argument value from base class of class var0 substitute result for value.,"value = super ( TypedMultipleChoiceField , self ) . clean ( value )","value = super ( var0 , self ) . clean ( value )"
"call the method to_python with an argument data from the base class of the class URLField, substitute the result for value.",call method var0 with argument data from base class of class var2 substitute result for value.,"value = super ( URLField , self ) . to_python ( value )","value = super ( var2 , self ) . var0 ( value )"
"call the method template_localtime with 2 arguments: value and use_tz=context.use_tz, substitute the result for value.",call method var0 with 2 arguments: value and use_tz=context var1 substitute result for value.,"value = template_localtime ( value , use_tz = context . use_tz )","value var3 var0(value, var1 var3 context.var1)"
"call the method timezone.normalize with an argument value, substitute the result for value.","call method var0 with argument value, substitute result for value.",value = timezone . normalize ( value ),value = var0 ( value )
"call the function to_current_timezone with an argument value, substitute the result for value.","call function var0 with argument value, substitute result for value.",value = to_current_timezone ( value ),value = var0 ( value )
"call the function to_current_timezone with an argument, substitute the result for value.","call function var0 with argument, substitute result for value.",value = to_current_timezone ( value ),value = var0 ( value )
"call the function token_kwargs with 3 arguments: remaining_bits, parser, support_legacy set to boolean False, substitute the result for value.",call function var0 with 3 arguments: var2 parser var4 set to boolean var6 substitute result for value.,"value = token_kwargs ( remaining_bits , parser , support_legacy = False )","value = var0 ( var2 , parser , var4 = var6 )"
value is boolean True.,value is boolean var0 ,value = True,value = var0
"call the method tuple.__getitem__ with 2 arguments: self and key, substitute the result for value.","call method var0 with 2 arguments: self and key, substitute result for value.","value = tuple . __getitem__ ( self , key )","value = var0 ( self , key )"
"convery value into a tuple, substitute it for value.","var0 value into tuple, substitute it for value.",value = tuple ( value ),value = tuple ( value )
"call the function ugettext with an argument string ""%s GB"", substitute '%s' with the result of the call to the function,","call function var0 with argument string var1, substitute var2 with result of call to function,",value = ugettext ( '%s GB' ) % filesize_number_format ( bytes / GB ),value = var0 ( '%s GB' ) % filesize_number_format ( bytes / GB )
"call the function ugettext with an argument string ""%s KB"", substitute '%s' with the result of the call to the function,","call function var0 with argument string var1, substitute var2 with result of call to function,",value = ugettext ( '%s KB' ) % filesize_number_format ( bytes / KB ),value = var0 ( '%s KB' ) % filesize_number_format ( bytes / KB )
"call the function ugettext with an argument string ""%s MB"", substitute '%s' with the result of the call to the function,","call function var0 with argument string var1, substitute var2 with result of call to function,",value = ugettext ( '%s MB' ) % filesize_number_format ( bytes / MB ),value = var0 ( '%s MB' ) % filesize_number_format ( bytes / MB )
"call the function ugettext with an argument string ""%s PB"", substitute '%s' with the result of the call to the function,","call function var0 with argument string var1, substitute var2 with result of call to function,",value = ugettext ( '%s PB' ) % filesize_number_format ( bytes / PB ),value = var0 ( '%s PB' ) % filesize_number_format ( bytes / PB )
"call the function ugettext with an argument string ""%s TB"", substitute '%s' with the result of the call to the function,","call function var0 with argument string var1, substitute var2 with result of call to function,",value = ugettext ( '%s TB' ) % filesize_number_format ( bytes / TB ),value = var0 ( '%s TB' ) % filesize_number_format ( bytes / TB )
"call the function ungettext with 3 arguments: string ""%(size)d byte"", string ""%(size)d bytes"" and 0, '%(size)d' is replaced with 0,","call function var0 with 3 arguments: string var1, string var2 and 0, var3 is replaced with 0,","value = ungettext ( '%(size)d byte' , '%(size)d bytes' , 0 ) % { 'size' : 0 }","value = var0 ( '%(size)d byte' , '%(size)d bytes' , 0 ) % { 'size' : 0 }"
"call the function ugettext with 3 arguments, string ""%(size)d byte"", string ""%(size)d bytes"" and bytes,","call function var0 with 3 arguments, string var1, string var2 and bytes,","value = ungettext ( '%(size)d byte' , '%(size)d bytes' , bytes ) % { 'size' : bytes }","value = ungettext ( '%(size)d byte' , '%(size)d bytes' , bytes ) % { 'size' : bytes }"
"strip whitespaces from both ends of unicode_value, substitute the result for value.",strip var0 from both ends of var1 substitute result for value.,value = unicode_value . strip ( ),value = var1 . strip ( )
"call the method unicodedata.normalize with 2 arguments: string 'NFKD' and value, encode the result with 2 arguments: string 'ascii',","call method var0 with 2 arguments: string var1 and value, encode result with 2 arguments: string var2,","value = unicodedata . normalize ( 'NFKD' , value ) . encode ( 'ascii' , 'ignore' ) . decode ( 'ascii' )","value = var0 ( var1 , value ) . encode ( 'ascii' , 'ignore' ) . decode ( 'ascii' )"
"substitute the result for url_fields.   call the function urlunsplit with an argument url_fields, substitute the result for value.",substitute result for var0 call function var3 with argument var0 substitute result for value.,value = urlunsplit ( url_fields ),value = var3 ( var0 )
"call the method value.astimezone with an argument timezone, substitute the result for value.",call method var0 with argument var1 substitute result for value.,value = value . astimezone ( timezone ),value = var0 ( var1 )
"call the method value.decode with an argument charset, substitute the result for value.",call method var0 with argument var1 substitute result for value.,value = value . decode ( charset ),value = var0 ( var1 )
"call the method value.encode with an argument charset, substitute the result for value.",call method var0 with argument var1 substitute result for value.,value = value . encode ( charset ),value = var0 ( var1 )
substitute value.pk for value.,substitute value.pk for value.,value = value . pk,value = value . pk
"replace every occurrence of arg is value for an empty string, substitute the result for value.","replace every occurrence of var0 is value for empty string, substitute result for value.","value = value . replace ( arg , '' )","value = value . replace ( var0 , '' )"
"replace all the occurrences of '\\\\' in string value with '\\' and all occurrences of '\\""' for '""', substitute the result for value.","replace all occurrences of var0 in string value with var1 and all occurrences of var2 for var3, substitute result for value.","value = value . replace ( b'\\\\' , b'\\' ) . replace ( b'\\' ' , b' '' )","value = value . replace ( b'\\\\' , b'\\' ) . replace ( b'\\' ', b' '' )"
"for every replacement in the resulting set,   replace every occurrence of replacement in value for an empty string, substitute the result for value.","for every replacement in resulting set var0 replace every occurrence of replacement in value for empty string, substitute result for value.","value = value . replace ( replacement , '' )","value = value . replace ( replacement , '' )"
"strip whitespaces from both sides of the value, substitute it for value.","strip var0 from both sides of value, substitute it for value.",value = value . strip ( ),value = value . strip ( )
strip value of the first and last element.,strip value of first and last element.,value = value [ 1 : - 1 ],value = value [ 1 : - 1 ]
"get the value of the values dictionary under the value converted to lowercase key, substitute it for value, if the key doesnt exists,","get value of values dict under value converted to lowercase key, substitute it for value, if key doesnt exists,","value = values . get ( value . lower ( ) , value )","value = values . get ( value . lower ( ) , value )"
"call the method var.resolve with 2 arguments: context and True, substitute the result for value.",call method var0 with 2 arguments: context and var1 substitute result for value.,"value = var . resolve ( context , True )","value = var0 ( context , var1 )"
value_converters is a dictionary with 2 entries: 'ext_convert' for 'ext' and 'cfg_convert' for 'cfg'.,var0 is dict with 2 entries: var1 for var2 and var3 for var7.,"value_converters = { 'ext' : 'ext_convert' , 'cfg' : 'cfg_convert' , }","var0 = { 'ext' : var1 , 'cfg' : 'cfg_convert' }"
substitute _itervalues for values.,substitute var0 for values.,values = _itervalues,values = var0
"join elements of quant into a string, split it by string ',', substitute the result for values.","join elements of var0 into string, split it by string var1, substitute result for values.","values = '' . join ( quant ) . split ( ', ' )","values = '' . join ( var0 ) . split ( ', ' )"
values is an empty list.,values is empty list.,values = [ ],values = [ ]
"if values is None,",if values is var0 ,values = [ ],values = [ ]
"call the function parser.compile_filter with an argument arg for every arg in args from the index 1 to the index -2,",call function parser var1 with argument var2 for every var2 in var4 from index 1 to index var5 ,values = [ parser . compile_filter ( arg ) for arg in args [ 1 : - 2 ] ],values = [ parser . var1 ( var2 ) for var2 in var2s [ 1 : - 2 ] ]
"call the function parser.compile_filter with an argument arg for every arg in args from first element to the end,","call function parser var1 with argument var2 for every var2 in var4 from first element to end,",values = [ parser . compile_filter ( arg ) for arg in args [ 1 : ] ],values = [ parser . var1 ( var2 ) for var2 in var2s [ 1 : ] ]
"for every bit in elements of bits without the first element, call the method parser.compile_filter, with an argument bit,","for every bit in elements of bits var0 first element, call method parser var2 with argument bit,",values = [ parser . compile_filter ( bit ) for bit in bits [ 1 : ] ],values = [ parser . var2 ( bit ) for bit in bits [ 1 : ] ]
"values is an dictionary with entries: return value of the method var.resolve with an argument context for name,","values is dict with entries: return value of method var0 with argument context for name,","values = { name : var . resolve ( context ) for name , var in six . iteritems ( self . extra_context ) }","values = { name : var0 ( context ) for name , var in six . iteritems ( self . extra_context ) }"
values is an dictionary with 2 arguments: boolean False for 'false' and boolean True for 'true'.,values is dict with 2 arguments: boolean var0 for var1 and boolean var2 for var3.,"values = { 'true' : True , 'false' : False }","values = { 'true' : var2 , var1 : var0 }"
"values is an dictionary created with result of the method val.resolve called with an argument context, for key,","values is dict created with result of method var0 called with argument context, for key,","values = dict ( ( key , val . resolve ( context ) ) for key , val in six . iteritems ( self . extra_context ) )","values = dict ( ( key , var0 ( context ) ) for key , val in six . iteritems ( self . extra_context ) )"
"convert values into a list, substitute it for value.","convert values into list, substitute it for value.",values = list ( values ),values = list ( values )
reverse elements order of values.,reverse elements order of values.,values = reversed ( values ),values = reversed ( values )
"call the method self.sequence.resolve with 2 arguments: context and boolean True, substitute the result for values.",call method var0 with 2 arguments: context and boolean var1 substitute result for values.,"values = self . sequence . resolve ( context , True )","values = var0 ( context , var1 )"
"call the method match.group with 2 arguments: strings ""var"" and ""constant"", substitute the result for var and constant, respectively.","call method var0 with 2 arguments: strings var1 and var2, substitute result for var and constant, respectively.","var , constant = match . group ( 'var' , 'constant' )","var , constant = var0 ( 'var' , 'constant' )"
append the string '0x' to var,append string var0 to var,var += '0x',var += var0
add the string '0x' to var,add string var0 to var,var += '0x',var += var0
add the string value 'abc' to the variable var,add string value var0 to variable var,var += 'abc',var += var0
append the string value 'abc' to the variable var,append string value var0 to variable var,var += 'abc',var += var0
append the string value 'abc' to var,append string value var0 to var,var += 'abc',var += var0
add the string value 'abc' to var,add string value var0 to var,var += 'abc',var += var0
"add the bytes literal ""\x0a\x1b\x2c\x3d\x4e\x5f\x6a\x10\x56\x57\x68\x99\xa5"" to var",add bytes literal var0 to var,var += b'\x0a\x1b\x2c\x3d\x4e\x5f\x6a\x10\x56\x57\x68\x99\xa5',var += b'\x0a\x1b\x2c\x3d\x4e\x5f\x6a\x10\x56\x57\x68\x99\xa5'
"append the bytes literal ""\x0a\x1b\x2c\x3d\x4e\x5f\x6a\x10\x56\x57\x68\x99\xa5"" to the variable var",append bytes literal var0 to variable var,var += b'\x0a\x1b\x2c\x3d\x4e\x5f\x6a\x10\x56\x57\x68\x99\xa5',var += b'\x0a\x1b\x2c\x3d\x4e\x5f\x6a\x10\x56\x57\x68\x99\xa5'
"append the bytes literal ""\x0a\x1b\x2c\x3d\x4e\x5f\x6a\x10\x56\x57\x68\x99\xa5"" to var",append bytes literal var0 to var,var += b'\x0a\x1b\x2c\x3d\x4e\x5f\x6a\x10\x56\x57\x68\x99\xa5',var += b'\x0a\x1b\x2c\x3d\x4e\x5f\x6a\x10\x56\x57\x68\x99\xa5'
"add the bytes literal ""\x5b\x37\x42\x01\xbd\x3c\x72\x7c\x02\x3d\x5f\xc1\xcf"" to var",add bytes literal var0 to var,var += b'\x5b\x37\x42\x01\xbd\x3c\x72\x7c\x02\x3d\x5f\xc1\xcf',var += b'\x5b\x37\x42\x01\xbd\x3c\x72\x7c\x02\x3d\x5f\xc1\xcf'
"append the bytes literal ""\x5b\x37\x42\x01\xbd\x3c\x72\x7c\x02\x3d\x5f\xc1\xcf"" to the variable var",append bytes literal var0 to variable var,var += b'\x5b\x37\x42\x01\xbd\x3c\x72\x7c\x02\x3d\x5f\xc1\xcf',var += b'\x5b\x37\x42\x01\xbd\x3c\x72\x7c\x02\x3d\x5f\xc1\xcf'
"append the bytes literal ""\x5b\x37\x42\x01\xbd\x3c\x72\x7c\x02\x3d\x5f\xc1\xcf"" to var",append bytes literal var0 to var,var += b'\x5b\x37\x42\x01\xbd\x3c\x72\x7c\x02\x3d\x5f\xc1\xcf',var += b'\x5b\x37\x42\x01\xbd\x3c\x72\x7c\x02\x3d\x5f\xc1\xcf'
"add the bytes literal ""\x90\x4a\x5c\xf3\x1e\x81\x69\x14\x75\x72\xde\xac\x77"" to var",add bytes literal var0 to var,var += b'\x90\x4a\x5c\xf3\x1e\x81\x69\x14\x75\x72\xde\xac\x77',var += b'\x90\x4a\x5c\xf3\x1e\x81\x69\x14\x75\x72\xde\xac\x77'
"append the bytes literal ""\x90\x4a\x5c\xf3\x1e\x81\x69\x14\x75\x72\xde\xac\x77"" to the variable var",append bytes literal var0 to variable var,var += b'\x90\x4a\x5c\xf3\x1e\x81\x69\x14\x75\x72\xde\xac\x77',var += b'\x90\x4a\x5c\xf3\x1e\x81\x69\x14\x75\x72\xde\xac\x77'
"append the bytes literal ""\x90\x4a\x5c\xf3\x1e\x81\x69\x14\x75\x72\xde\xac\x77"" to var",append bytes literal var0 to var,var += b'\x90\x4a\x5c\xf3\x1e\x81\x69\x14\x75\x72\xde\xac\x77',var += b'\x90\x4a\x5c\xf3\x1e\x81\x69\x14\x75\x72\xde\xac\x77'
"add the bytes literal ""\x99\xaf\xbb\xed\xbe\x46\x56\x4e\x88\x72\x53\x44\x68"" to var",add bytes literal var0 to var,var += b'\x99\xaf\xbb\xed\xbe\x46\x56\x4e\x88\x72\x53\x44\x68',var += b'\x99\xaf\xbb\xed\xbe\x46\x56\x4e\x88\x72\x53\x44\x68'
"append the bytes literal ""\x99\xaf\xbb\xed\xbe\x46\x56\x4e\x88\x72\x53\x44\x68"" to the variable var",append bytes literal var0 to variable var,var += b'\x99\xaf\xbb\xed\xbe\x46\x56\x4e\x88\x72\x53\x44\x68',var += b'\x99\xaf\xbb\xed\xbe\x46\x56\x4e\x88\x72\x53\x44\x68'
"append the bytes literal ""\x99\xaf\xbb\xed\xbe\x46\x56\x4e\x88\x72\x53\x44\x68"" to var",append bytes literal var0 to var,var += b'\x99\xaf\xbb\xed\xbe\x46\x56\x4e\x88\x72\x53\x44\x68',var += b'\x99\xaf\xbb\xed\xbe\x46\x56\x4e\x88\x72\x53\x44\x68'
"add the bytes literal ""\x0d\x01\xc7\xe2\xf2\x52\x57\x8b\x52\x10\x8b\x4a\x3c"" to var",add bytes literal var0 to var,var += b'\xae\xf2\xc4\xbb\x03\x41\xcd\x8b\x52\x10\x8b\x4a\x3c',var += b'\xae\xf2\xc4\xbb\x03\x41\xcd\x8b\x52\x10\x8b\x4a\x3c'
"append the bytes literal ""\x0d\x01\xc7\xe2\xf2\x52\x57\x8b\x52\x10\x8b\x4a\x3c"" to the variable var",append bytes literal var0 to variable var,var += b'\xae\xf2\xc4\xbb\x03\x41\xcd\x8b\x52\x10\x8b\x4a\x3c',var += b'\xae\xf2\xc4\xbb\x03\x41\xcd\x8b\x52\x10\x8b\x4a\x3c'
"append the bytes literal ""\x0d\x01\xc7\xe2\xf2\x52\x57\x8b\x52\x10\x8b\x4a\x3c"" to var",append bytes literal var0 to var,var += b'\xae\xf2\xc4\xbb\x03\x41\xcd\x8b\x52\x10\x8b\x4a\x3c',var += b'\xae\xf2\xc4\xbb\x03\x41\xcd\x8b\x52\x10\x8b\x4a\x3c'
var is integer 1,var is integer 1,var = 1,var = 1
remove first 2 and last 2 elements from var.,remove first 2 and last 2 elements from var.,var = var [ 2 : - 1 ],var = var [ 2 : - 1 ]
substitute sixth element of bits for var_name.,substitute sixth element of bits for var0 ,var_name = bits [ 5 ],var0 = bits [ 5 ]
"call the method self.create_variable_node with an argument filter_expression, substitute the result for var_node.",call method self var1 with argument var2 substitute result for var4 ,var_node = self . create_variable_node ( filter_expression ),var4 = self . var1 ( var2 )
var_obj is None.,var0 is var1 ,var_obj = None,var0 = var1
"instantiate Variable class, with an argument constant, call the resolve method with an empty dictionary as an argument, substitute the result for var_obj.","instantiate var0 class, with argument constant, call resolve method with empty dict as argument, substitute result for var1 ",var_obj = Variable ( constant ) . resolve ( { } ),var1 = var0 ( constant ) . resolve ( { } )
"var_obj is an instance of Variable class, created with an argument var.","var0 is instance of var1 class, created with argument var.",var_obj = Variable ( var ),var0 = var1 ( var )
"Convert the value of val2 to hexadecimal, then slice it between the indicies 4 and 7, convert it to an int16 and add its value to var2","Convert value of var0 to hexadecimal, then slice it between var1 4 and 7, convert it to var3 and add its value to var3","var2 = int ( hex ( val2 ) [ 4 : 7 ] , 16 )","var3 = int ( hex ( var0 ) [ 4 : 7 ] , 16 )"
"Convert the value of val3 to hexadecimal, then slice it between the indicies 9 and 10, convert it to an int16 and add its value to var3","Convert value of var0 to hexadecimal, then slice it between var1 9 and 10, convert it to var2 and add its value to var3","var3 = int ( hex ( val3 ) [ 9 : 10 ] , 16 )","var3 = int ( hex ( var0 ) [ 9 : 10 ] , 16 )"
"Convert the value of val4 to hexadecimal, then slice it between the indicies 11 and 14, convert it to an int8 and add its value to var4","Convert value of var0 to hexadecimal, then slice it between var1 11 and 14, convert it to var2 and add its value to var3","var4 = int ( hex ( val4 ) [ 11 : 14 ] , 8 )","var3 = int ( hex ( var0 ) [ 11 : 14 ] , 8 )"
"Convert the value of val5 to hexadecimal, then slice it between the indicies 1 and 3, convert it to an int8 and add its value to var5","Convert value of var0 to hexadecimal, then slice it between var1 1 and 3, convert it to var2 and add its value to var3","var5 = int ( hex ( val5 ) [ 1 : 3 ] , 8 )","var3 = int ( hex ( var0 ) [ 1 : 3 ] , 8 )"
"Convert the value of val6 to hexadecimal, then slice it between the indicies 6 and 7, convert it to an int8 and add its value to var6","Convert value of var0 to hexadecimal, then slice it between var1 6 and 7, convert it to var2 and add its value to var3","var6 = int ( hex ( val6 ) [ 6 : 7 ] , 8 )","var3 = int ( hex ( var0 ) [ 6 : 7 ] , 8 )"
VARIABLE_ATTRIBUTE_SEPARATOR is a string '.'.,var0 is string var1.,VARIABLE_ATTRIBUTE_SEPARATOR = '.',var0 = var1
VARIABLE_TAG_END is a string '}}'.,var0 is string var1.,VARIABLE_TAG_END = '}}',var0 = var1
VARIABLE_TAG_START is a string '{{'.,var0 is string var1.,VARIABLE_TAG_START = '{{',var0 = var1
vary_headers is an empty list.,var0 is empty list.,vary_headers = [ ],var0 = [ ]
"split the string cc_delim_re with value under the key 'Vary' of response dictionary as delimiter, substitute result for vary_headers.",split string var0 with value under key var2 of response dict as var3 substitute result for var4 ,vary_headers = cc_delim_re . split ( response [ 'Vary' ] ),var4 = var0 . split ( response [ var2 ] )
"split string cc_delim_re by value of dictionary response under the key 'Vary' as a delimiter, substitute it for vary_headers.",split string var0 by value of dict response under key var2 as var3 substitute it for var4 ,vary_headers = cc_delim_re . split ( response [ 'Vary' ] ),var4 = var0 . split ( response [ var2 ] )
vary_on is an empty tuple.,var0 is empty tuple.,vary_on = ( ),var0 = ( )
substitute value under the 'verbosity' key of the options dictionary for verbosity.,substitute value under var0 key of options dict for verbosity.,verbosity = options . get ( 'verbosity' ),verbosity = options . get ( var0 )
"get the value under the key 'verbosity' of options dictionary, substitute it for verbosity.","get value under key var0 of options dict, substitute it for verbosity.",verbosity = options . get ( 'verbosity' ),verbosity = options . get ( var0 )
"call the get_complete_version function with version as argument, store the result in version.","call var0 function with version as argument, store result in version.",version = get_complete_version ( version ),version = var0 ( version )
"call the get_complete_version with an argument version, store the result in version.","call var0 with argument version, store result in version.",version = get_complete_version ( version ),version = var0 ( version )
substitute self.version for version.,substitute self.version for version.,version = self . version,version = self . version
substitute first element of parts for view.,substitute first element of parts for view.,view = parts [ 0 ],view = parts [ 0 ]
"call the function transaction.atomic, with using set to db.alias as the argument, return value is a function which is called,","call function var0 with using set to var1 as argument, return value is function var2 is called,",view = transaction . atomic ( using = db . alias ) ( view ),view = var0 ( using = var1 ) ( view )
substitute viewname for view.,substitute var0 for view.,view = viewname,view = var0
"get func_name attribute from the mod object, substitute it for view_func.","get var0 attribute from mod object, substitute it for var1 ","view_func = getattr ( mod , func_name )","var1 = getattr ( mod , var0 )"
"get the name of the type of the callback, append the string '.__call__' to it, substitute it for view_name.","get name of type of callback, append string var0 to it, substitute it for var1 ",view_name = callback . __class__ . __name__ + '.__call__',var1 = callback . __class__ . __name__ + var0
"get the name of the callback, substitute it for view_name.","get name of callback, substitute it for var0 ",view_name = callback . __name__,var0 = callback . __name__
"result of the call to the method v.resolve with an argument context,   for result of the function smart_text called with 2 arguments k and string 'ascii'.   call the method self.view_name.resolve with an argument context, substitute the result for view_name.","result of call to method var0 with argument context var1 for result of function var3 called with 2 arguments k and string var5 var1 call method self var7 resolve with argument context, substitute result for var7 ",view_name = self . view_name . resolve ( context ),var7 = self . var7 . resolve ( context )
"if url_name exists substitute it for view_path, if not substitute .self._func_path for view_path.",if var0 exists substitute it for var1 if not substitute .self._func_path for var1 ,view_path = url_name or self . _func_path,var1 = var0 or self . _func_path
"where '%s' is replaced with first element of bits.   call the method parser.compile_filter with second element of bits as an argument, substitute the result for viewname.","var0 var1 is replaced with first element of bits var2 call method parser var4 with second element of bits as argument, substitute result for var5 ",viewname = parser . compile_filter ( bits [ 1 ] ),var5 = parser . var4 ( bits [ 1 ] )
increment visible_issue_count for length of issues.,increment var0 for length of issues.,visible_issue_count += len ( issues ),var0 += len ( issues )
"call the method self.choice_input_class with 5 arguments: self.name, self.value, return value of the method self.attrs.copy,",call method self var1 with 5 arguments: var2 var3 return value of method var4 ,"w = self . choice_input_class ( self . name , self . value , self . attrs . copy ( ) , choice , i )","w = self . var1 ( var2 , var3 , var4 ( ) , choice , i )"
call the function walk_to_end with 2 arguments: ch and pattern_iter.,call function var0 with 2 arguments: var1 and var2 ,"walk_to_end ( ch , pattern_iter )","var0 ( var1 , var2 )"
want_unicode is boolean False.,var0 is boolean var1 ,want_unicode = False,var0 = var1
want_unicode is boolean True.,var0 is boolean var1 ,want_unicode = True,var0 = var1
"warn_msg is a string ""The translator-targeted comment '%s' (%sline %d) was ignored, because it wasn't the last item on the line."",","warn_msg is string var0,","warn_msg = ( 'The translator-targeted comment '%s' '  '(%sline %d) was ignored, because it wasn't the last item '  'on the line.' ) % ( c , filemsg , comment_lineno_cache )","warn_msg =('The translator-targeted comment '%s' '  '(%sline %d) was ignored, because it wasn't the last item '  'on the line.') %(c, filemsg, comment_lineno_cache)"
warning is a string 'ImmutableList object is immutable.'.,warning is string var0.,warning = 'ImmutableList object is immutable.',warning = var0
WARNING is integer 30.,WARNING is integer 30.,WARNING = 30,WARNING = 30
substitute value under 'warning' key of kwargs dictionary for warning.,substitute value under var0 key of var1 dict for warning.,warning = kwargs [ 'warning' ],warning = var1 [ var0 ]
"call the function warnings.simplefilter with 2 arguments: string ""default"" and RemovedInNextVersionWarning.",call function var0 with 2 arguments: string var1 and var2 ,"warnings . simplefilter ( 'default' , RemovedInNextVersionWarning )","var0 ( 'default' , var2 )"
"call the function warnings.warn with 2 arguments: string '""requires_model_validation"" is deprecated '",call function var0 with 2 arguments: string var1,"warnings . warn (  ''requires_model_validation' is deprecated '  'in favor of 'requires_system_checks'.' ,  RemovedInDjango19Warning )","var0( ''requires_model_validation' is deprecated '  'in favor of 'requires_system_checks'.',  RemovedInDjango19Warning)"
"call the function warnings.warn with 3 arguments: string 'import_by_path() has been deprecated. Use import_string() instead.',","call function var0 with 3 arguments: string var1,","warnings . warn ( 'import_by_path() has been deprecated. Use import_string() instead.' , RemovedInDjango19Warning , stacklevel = 2 )","var0 ( 'import_by_path() has been deprecated.Use import_string() instead.' , RemovedInDjango19Warning , stacklevel = 2 )"
"call the function warnings.warn with 3 arguments: string 'Reversing by dotted path is deprecated (%s).', with '%s' replaced with","call function var0 with 3 arguments: string var1, with var2 replaced with","warnings . warn ( 'Reversing by dotted path is deprecated (%s).' % original_lookup , RemovedInDjango20Warning , stacklevel = 3 )","var0 ( 'Reversing by dotted path is deprecated(%s).' % original_lookup , RemovedInDjango20Warning , stacklevel = 3 )"
call the function warnings.warn with 3 arguments: string 'Using SplitDateTimeWidget with DateTimeField is deprecated. ',call function var0 with 3 arguments: string var1,"warnings . warn ( 'Using SplitDateTimeWidget with DateTimeField is deprecated. ' 'Use SplitDateTimeField instead.' , RemovedInDjango19Warning , stacklevel = 2 )","var0 ( 'Using SplitDateTimeWidget with DateTimeField is deprecated.Use SplitDateTimeField instead.' , RemovedInDjango19Warning , stacklevel = 2 )"
"call the function warnings.warn with 3 arguments: string ""`%s.%s` is deprecated, use `%s` instead."",","call function var0 with 3 arguments: string var1,","warnings . warn ( '`%s.%s` is deprecated, use `%s` instead.' % ( self . class_name , self . old_method_name , self . new_method_name ) , self . deprecation_warning , 2 )","var0 ( '`%s.%s` is deprecated, use `%s` instead.' % ( self . class_name , self . old_method_name , self . new_method_name ) , self . deprecation_warning , 2 )"
"call the function warnings.warn with 3 arguments: string ""`%s.%s` method should be renamed `%s`."",","call function var0 with 3 arguments: string var1,","warnings . warn ( '`%s.%s` method should be renamed `%s`.' % ( class_name , old_method_name , new_method_name ) , deprecation_warning , 2 )","var0 ( '`%s.%s` method should be renamed `%s`.' % ( class_name , old_method_name , new_method_name ) , deprecation_warning , 2 )"
"call the function warnings.warn with 3 argument: string ""AppCommand.handle_app() is superseded by AppCommand.handle_app_config()."",","call function var0 with 3 argument: string var1,","warnings . warn ( 'AppCommand.handle_app() is superseded by ' 'AppCommand.handle_app_config().' , RemovedInDjango19Warning , stacklevel = 2 )","var0 ( 'AppCommand.handle_app() is superseded by AppCommand.handle_app_config().' , RemovedInDjango19Warning , stacklevel = 2 )"
"call the function warnings.warn with 3 arguments: string ""django.utils.tzinfo will be removed in Django 1.9. """,call function var0 with 3 arguments: string var1,"warnings . warn ( 'django.utils.tzinfo will be removed in Django 1.9. ' 'Use django.utils.timezone instead.' , RemovedInDjango19Warning , stacklevel = 2 )","var0 ( 'django.utils.tzinfo will be removed in Django 1.9.Use django.utils.timezone instead.' , RemovedInDjango19Warning , stacklevel = 2 )"
"call the function warnings.warn with 2 arguments: ""django.utils.tzinfo.FixedOffset will be removed in Django 1.9. """,call function var0 with 2 arguments: var1,"warnings . warn ( 'django.utils.tzinfo.FixedOffset will be removed in Django 1.9. ' 'Use django.utils.timezone.get_fixed_timezone instead.' , RemovedInDjango19Warning )","var0 ( 'django.utils.tzinfo.FixedOffset will be removed in Django 1.9.Use django.utils.timezone.get_fixed_timezone instead.' , RemovedInDjango19Warning )"
"call the function warnings.warn with 2 arguments: string ""django.utils.tzinfo.LocalTimezone will be removed in Django 1.9. """,call function var0 with 2 arguments: string var1,"warnings . warn ( 'django.utils.tzinfo.LocalTimezone will be removed in Django 1.9. ' 'Use django.utils.timezone.get_default_timezone instead.' , RemovedInDjango19Warning )","var0 ( 'django.utils.tzinfo.LocalTimezone will be removed in Django 1.9.Use django.utils.timezone.get_default_timezone instead.' , RemovedInDjango19Warning )"
"call the method warnings.warn with 2 arguments: string ""FastCGI support has been deprecated and will be removed in Django 1.9."",","call method var0 with 2 arguments: string var1,","warnings . warn ( 'FastCGI support has been deprecated and will be removed in Django 1.9.' , RemovedInDjango19Warning )","var0 ( 'FastCGI support has been deprecated and will be removed in Django 1.9.' , RemovedInDjango19Warning )"
"call the function warnings.warn with 3 arguments: string ""get_declared_fields is deprecated and will be removed in Django 1.9."",","call function var0 with 3 arguments: string var1,","warnings . warn ( 'get_declared_fields is deprecated and will be removed in Django 1.9.' , RemovedInDjango19Warning , stacklevel = 2 , )","var0 ( 'get_declared_fields is deprecated and will be removed in Django 1.9.' , RemovedInDjango19Warning , stacklevel = 2 )"
"call the function warnings.warn with 2 arguments: string ""Need {0} values to unpack in for loop; got {1}. This will raise an","call function var0 with 2 arguments: string ""Need {0} values to unpack in for loop; got {1} var2 will raise an","warnings . warn ( 'Need {0} values to unpack in for loop; got {1}. ' 'This will raise an exception in Django 2.0.' . format ( num_loopvars , len_item ) , RemovedInDjango20Warning )","var0 ( 'var1 {0} values to unpack in for loop; got {1}.var2 will raise an exception in Django 2.0.' . format ( num_loopvars , len_item ) , RemovedInDjango20Warning )"
"call the method warnings.warn with 2 arguments: string ""No fixture data found for '%s'. (File format may be invalid.)"",","call method var0 with 2 arguments: string var1,","warnings . warn (  'No fixture data found for '%s'. (File format may be '  'invalid.)' % fixture_name ,  RuntimeWarning  )","var0( 'No fixture data found for '%s'.(File format may be '  'invalid.)' % fixture_name,  RuntimeWarning )"
"call the function warnings.warn with 2 arguments: string ""NoArgsCommand class is deprecated and will be removed in Django 2.0. """,call function var0 with 2 arguments: string var1,"warnings . warn ( 'NoArgsCommand class is deprecated and will be removed in Django 2.0. ' 'Use BaseCommand instead, which takes no arguments by default.' , RemovedInDjango20Warning )","var0 ( 'NoArgsCommand class is deprecated and will be removed in Django 2.0.Use BaseCommand instead, which takes no arguments by default.' , RemovedInDjango20Warning )"
"call the function warnings.warn with 3 arguments: string ""SortedDict is deprecated and will be removed in Django 1.9."",","call function var0 with 3 arguments: string var1,","warnings . warn ( 'SortedDict is deprecated and will be removed in Django 1.9.' , RemovedInDjango19Warning , stacklevel = 2 )","var0 ( 'SortedDict is deprecated and will be removed in Django 1.9.' , RemovedInDjango19Warning , stacklevel = 2 )"
"call the function warnings.warn with 3 arguments: string ""The django.forms.util module has been renamed. """,call function var0 with 3 arguments: string var1,"warnings . warn ( 'The django.forms.util module has been renamed. ' 'Use django.forms.utils instead.' , RemovedInDjango19Warning , stacklevel = 2 )","var0 ( 'The django.forms.util module has been renamed.Use django.forms.utils instead.' , RemovedInDjango19Warning , stacklevel = 2 )"
"call the method warnings.warn with string '""validate"" has been deprecated in favor of ""check"".' and RemovedInDjango19Warning as arguments.",call method var0 with string var1 and var2 as arguments.,"warnings . warn ( ''validate' has been deprecated in favor of 'check'.' ,  RemovedInDjango19Warning )","var0(''validate' has been deprecated in favor of 'check'.',  var2)"
"call the function warnings.warn with 3 arguments: string '`MergeDict` is deprecated, use `dict.update()` instead.',","call function var0 with 3 arguments: string var1,","warnings . warn ( '`MergeDict` is deprecated, use `dict.update()` ' 'instead.' , RemovedInDjango19Warning , 2 )","var0 ( '`MergeDict` is deprecated, use `dict.update()` instead.' , RemovedInDjango19Warning , 2 )"
"call the warnings.warn method with string '`request.REQUEST` is deprecated, use `request.GET` or `request.POST` instead.',","call var0 method with string var1,","warnings . warn ( '`request.REQUEST` is deprecated, use `request.GET` or ' '`request.POST` instead.' , RemovedInDjango19Warning , 2 )","var0 ( '`request.REQUEST` is deprecated, use `request.GET` or `request.POST` instead.' , RemovedInDjango19Warning , 2 )"
"call the function warnings.warn with an argument,","call function var0 with argument,",warnings . warn ( 'A secure pseudo-random number generator is not available ' 'on your system. Falling back to Mersenne Twister.' ),var0 ( 'A secure pseudo-random number generator is not available on your system.Falling back to Mersenne Twister.' )
"substitute '%r' in string 'Cache key contains characters that will cause errors if used with memcached: %r' with key,","substitute var0 in string var1 with key,","warnings . warn ( 'Cache key contains characters that will cause ' 'errors if used with memcached: %r' % key , CacheKeyWarning )","warnings . warn ( 'var2 key contains characters var3 will cause errors if used with var4: %r' % key , var2KeyWarning )"
"substitute '%s' in string 'Cache key will cause errors if used with memcached: %s (longer than %s)' with key,","substitute var0 in string var1 with key,","warnings . warn ( 'Cache key will cause errors if used with memcached: ' '%s (longer than %s)' % ( key , MEMCACHE_MAX_KEY_LENGTH ) , CacheKeyWarning )","warnings . warn ( 'var2 key will cause errors if used with var3: %s(longer var4 %s)' % ( key , MEMCACHE_MAX_KEY_LENGTH ) , var2KeyWarning )"
"call the function warnings.warn with string ""'get_cache' is deprecated in favor of 'caches'."", RemovedInDjango19Warning,",call function var0 with string var1 var2 ,"warnings . warn ( ''get_cache' is deprecated in favor of 'caches'.' ,  RemovedInDjango19Warning , stacklevel = 2 )","var0(''get_cache' is deprecated in favor of 'caches'.',  var2, stacklevel = 2)"
"call the function warnings.warn with an argument string ""``--natural`` is deprecated; use ``--natural-foreign`` instead."",","call function var0 with argument string var1,","warnings . warn ( '``--natural`` is deprecated; use ``--natural-foreign`` instead.' , RemovedInDjango19Warning )","var0 ( '``--natural`` is deprecated; use ``--natural-foreign`` instead.' , RemovedInDjango19Warning )"
"call the function warnings.warn with 2 arguments: string ""``use_natural_keys`` is deprecated; use ``use_natural_foreign_keys`` instead."" and RemovedInDjango19Warning.",call function var0 with 2 arguments: string var1 and var2 ,"warnings . warn ( '``use_natural_keys`` is deprecated; use ``use_natural_foreign_keys`` instead.' , RemovedInDjango19Warning )","var0 ( '``use_natural_keys`` is deprecated; use ``use_natural_foreign_keys`` instead.' , var2 )"
"call the function warnings.warn with an argument string ""A {% csrf_token %} was used in a template, but the context did not provide the value.  This is usually caused by not using RequestContext."".",call function var0 with argument string var1.,"warnings . warn ( 'A {% csrf_token %} was used in a template, but the context did not provide the value.  This is usually caused by not using RequestContext.' )","var0 ( 'A {% csrf_token %} was used in a template, but the context did not provide the value. This is usually caused by not using RequestContext.' )"
"call the function warnings.warn with 3 arguments: string ""cache_choices has been deprecated and will be removed in Django 1.9."",","call function var0 with 3 arguments: string var1,","warnings . warn ( 'cache_choices has been deprecated and will be ' 'removed in Django 1.9.' , RemovedInDjango19Warning , stacklevel = 2 )","var0 ( 'cache_choices has been deprecated and will be removed in Django 1.9.' , RemovedInDjango19Warning , stacklevel = 2 )"
"call the function warnings.warn with 2 arguments: string ""Custom SQL location '<app_label>/models/sql' is deprecated, use '<app_label>/sql' instead."" and RemovedInDjango19Warning.",call function var0 with 2 arguments: string var1 and var2 ,"warnings . warn ( 'Custom SQL location '<app_label>/models/sql' is '  'deprecated, use '<app_label>/sql' instead.' ,  RemovedInDjango19Warning )","var0('Custom SQL location '<app_label>/models/sql' is '  'deprecated, use '<app_label>/sql' instead.',  var2)"
"call the function warnings.warn with 3 arguments: string ""django.utils.dictconfig will be removed in Django 1.9."",","call function var0 with 3 arguments: string var1,","warnings . warn ( 'django.utils.dictconfig will be removed in Django 1.9.' , RemovedInDjango19Warning , stacklevel = 2 )","var0 ( 'django.utils.dictconfig will be removed in Django 1.9.' , RemovedInDjango19Warning , stacklevel = 2 )"
"call the function warnings.warn with 3 arguments: string ""django.utils.importlib will be removed in Django 1.9."",","call function var0 with 3 arguments: string var1,","warnings . warn ( 'django.utils.importlib will be removed in Django 1.9.' , RemovedInDjango19Warning , stacklevel = 2 )","var0 ( 'django.utils.importlib will be removed in Django 1.9.' , RemovedInDjango19Warning , stacklevel = 2 )"
"call the function warnings.warn with 3 arguments: string ""django.utils.unittest will be removed in Django 1.9."",","call function var0 with 3 arguments: string var1,","warnings . warn ( 'django.utils.unittest will be removed in Django 1.9.' , RemovedInDjango19Warning , stacklevel = 2 )","var0 ( 'django.utils.unittest will be removed in Django 1.9.' , RemovedInDjango19Warning , stacklevel = 2 )"
"call the function warnings.warn with 2 arguments string ""IPAddressField has been deprecated. Use GenericIPAddressField instead."",","call function var0 with 2 arguments string var1,","warnings . warn ( 'IPAddressField has been deprecated. Use GenericIPAddressField instead.' , RemovedInDjango19Warning )","var0 ( 'IPAddressField has been deprecated.Use GenericIPAddressField instead.' , RemovedInDjango19Warning )"
call the function warnings.warn with 3 arguments:,call function var0 with 3 arguments:,"warnings . warn ( 'memoize wrapper is deprecated and will be removed in ' 'Django 1.9. Use django.utils.lru_cache instead.' , RemovedInDjango19Warning , stacklevel = 2 )","var0 ( 'memoize wrapper is deprecated and will be removed in Django 1.9.Use django.utils.lru_cache instead.' , RemovedInDjango19Warning , stacklevel = 2 )"
"call the method warnings.warn with an argument string ""No fixture named '%s' found."" where '%s' is replaced with fixture_name.",call method var0 with argument string var1 var3 var2 is replaced with var4 ,warnings . warn ( 'No fixture named '%s' found.' % fixture_name ),var0 ( 'No fixture named var2 found.' % var4 )
"call the function warnings.warn with 2 arguments: string ""OptionParser usage for Django management commands """,call function var0 with 2 arguments: string var1,"warnings . warn ( 'OptionParser usage for Django management commands ' 'is deprecated, use ArgumentParser instead' , RemovedInDjango20Warning )","var0 ( 'OptionParser usage for Django management commands is deprecated, use ArgumentParser instead' , RemovedInDjango20Warning )"
call the function warnings.warn with 3 arguments:,call function var0 with 3 arguments:,"warnings . warn ( 'resolve_variable() is deprecated. Use django.template.' 'Variable(path).resolve(context) instead' , RemovedInDjango20Warning , stacklevel = 2 )","var0 ( 'resolve_variable() is deprecated.Use django.template.Variable(path).resolve(context) instead' , RemovedInDjango20Warning , stacklevel = 2 )"
"call the method warnings.warn with 2 arguments: string ""The syncdb command will be removed in Django 1.9"" and RemovedInDjango19Warning.",call method var0 with 2 arguments: string var1 and var2 ,"warnings . warn ( 'The syncdb command will be removed in Django 1.9' , RemovedInDjango19Warning )","var0 ( 'The syncdb command will be removed in Django 1.9' , var2 )"
"call the function warnings.warn with an argument string ""Your TEMPLATE_LOADERS setting includes %r, but your Python installation","call function var0 with argument string ""Your var2 setting includes var3 but var4 var5 installation","warnings . warn ( 'Your TEMPLATE_LOADERS setting includes %r, but your Python installation doesn't support that type of template loading. Consider removing that line from TEMPLATE_LOADERS.' % loader )","var0('var1 var2 setting includes var3, but var4 var5 installation doesn't support that type of template loading.Consider removing that line from var2.' % loader)"
"call the function warnings.warn with 3 arguments: msg, RemovedInDjango19Warning and stacklevel as integer 2.",call function var0 with 3 arguments: msg var1 and var2 as integer 2.,"warnings . warn ( msg , RemovedInDjango19Warning , stacklevel = 2 )","var0 ( msg , var1 , var2 = 2 )"
"call the method call the function warnings.warn with 3 arguments: msg formatted with language and value under the language key,","call method call function var0 with 3 arguments: msg formatted with language and value under language key,","warnings . warn ( msg % ( language , _DJANGO_DEPRECATED_LOCALES [ language ] ) , RemovedInDjango19Warning , stacklevel = 2 )","var0 ( msg % ( language , _DJANGO_DEPRECATED_LOCALES [ language ] ) , RemovedInDjango19Warning , stacklevel = 2 )"
"formated with c, filemsg and comment_lineno_cache.   call the function warnings.warn with 2 arguments: warn_msg and TranslatorCommentWarning.",formated with var3 var0 and var1 call function var5 with var3 arguments: var6 and var7 ,"warnings . warn ( warn_msg , TranslatorCommentWarning )","warnings . var3arn ( var6 , var3var7 )"
"and e.level is lesser than checks.WARNING and result of the method e.is_silenced in false.   append e to warnings list for every e in all_issues, if checks.WARNING is lesser than or equal to e.level,",and var0 is lesser var2 checks var4 and result of method e var7 in false var8 append e to warnings list for every e in var9 if checks var4 is lesser var2 or equal to var0 ,warnings = [ e for e in all_issues if checks . WARNING <= e . level < checks . ERROR and not e . is_silenced ( ) ],warnings = [ e for e in var9 if checks . var4 <= var0 < checks . ERROR and not e . var7 ( ) ]
decrement week_number by integer 1.,decrement var0 by integer 1.,week_number -= 1,var0 -= 1
week_number is integer 1.,var0 is integer 1.,week_number = 1,var0 = 1
week_number is integer 52.,var0 is integer 52.,week_number = 52,var0 = 52
"with an argument self.data.year decremented by 1, evaluates to true,   week_number is integer 53.","with argument var0 var1 by 1, evaluates to true var3 is integer 53.",week_number = 53,var3 = 53
"divide j by integer 7, substitute the floored result for week_number.","divide j by integer 7, substitute floored result for var0 ",week_number = j // 7,var0 = j // 7
week_number is None.,var0 is var1 ,week_number = None,var0 = var1
"weekday, increment the result by integer 1 and substitute it for jan1_weekday.   call the method self.data.weekday, increment the result by integer 1, substitute the result for weekday.","weekday, increment result by integer 1 and substitute it for var0 call method var2 increment result by integer 1, substitute result for weekday.",weekday = self . data . weekday ( ) + 1,weekday = var2 ( ) + 1
"WEEKDAYS is an dictionary with 7 entries: result of the call to the function _ with an argument string 'Monday' for 0,","WEEKDAYS is dict with 7 entries: result of call to function var0 with argument string var1 for 0,","WEEKDAYS = { 0 : _ ( 'Monday' ) , 1 : _ ( 'Tuesday' ) , 2 : _ ( 'Wednesday' ) , 3 : _ ( 'Thursday' ) , 4 : _ ( 'Friday' ) , 5 : _ ( 'Saturday' ) , 6 : _ ( 'Sunday' ) }","WEEKDAYS = { ( 0 ) : var0 ( var1 ) , ( 1 ) : var0 ( 'Tuesday' ) , ( 2 ) : var0 ( 'Wednesday' ) , ( 3 ) : var0 ( 'Thursday' ) , ( 4 ) : var0 ( 'Friday' ) , ( 5 ) : var0 ( 'Saturday' ) , ( 6 ) : var0 ( 'Sunday' ) }"
"result of the call to the function _ with an argument string 'Tuesday' for 1,   result of the call to the function _ with an argument string 'Wednesday' for 2,   result of the call to the function _ with an argument string 'Thursday' for 3,   result of the call to the function _ with an argument string 'Friday' for 4,   result of the call to the function _ with an argument string 'Saturday' for 5,   and result of the call to the function _ with an argument string 'Sunday' for 6.   WEEKDAYS_ABBR is an dictionary with 7 entries: result of the call to the function _ with an argument string 'Mon' for 0,","result of call to function var0 with argument string var7 for 1 var8 result of call to function var0 with argument string var14 for 2 var8 result of call to function var0 with argument string var16 for 3 var8 result of call to function var0 with argument string var18 for 4 var8 result of call to function var0 with argument string var20 for 5 var8 and result of call to function var0 with argument string var22 for 6 var24 is dict with 7 entries: result of call to function var0 with argument string var25 for 0,","WEEKDAYS_ABBR = { 0 : _ ( 'Mon' ) , 1 : _ ( 'Tue' ) , 2 : _ ( 'Wed' ) , 3 : _ ( 'Thu' ) , 4 : _ ( 'Fri' ) , 5 : _ ( 'Sat' ) , 6 : _ ( 'Sun' ) }","var24 = { ( 0 ) : var0 ( var25 ) , ( 1 ) : var0 ( 'Tue' ) , ( 2 ) : var0 ( 'Wed' ) , ( 3 ) : var0 ( 'Thu' ) , ( 4 ) : var0 ( 'Fri' ) , ( 5 ) : var0 ( 'Sat' ) , ( 6 ) : var0 ( 'Sun' ) }"
"result of the call to the function _ with an argument string 'Tue' for 1,   result of the call to the function _ with an argument string 'Wed' for 2,   result of the call to the function _ with an argument string 'Thu' for 3,   result of the call to the function _ with an argument string 'Fri' for 4,   result of the call to the function _ with an argument string 'Sat' for 5,   and result of the call to the function _ with an argument string 'Sun' for 6.   WEEKDAYS_REV is an dictionary with 7 entries: 0 for 'monday', 1 for 'tuesday', 2 for 'wednesday', 3 for 'thursday', 4 for 'friday',   5 for 'saturday' and 6 for 'sunday'.","result of call to function var0 with argument string var6 for 1 var7 result of call to function var0 with argument string var14 for 2 var7 result of call to function var0 with argument string var17 for 3 var7 result of call to function var0 with argument string var20 for 4 var7 result of call to function var0 with argument string var22 for 5 var7 and result of call to function var0 with argument string var24 for 6 var26 is dict with 7 entries: 0 for var28, 1 for var29, 2 for var30, 3 for var31, 4 for var32 var7 5 for var33 and 6 for var34.","WEEKDAYS_REV = { 'monday' : 0 , 'tuesday' : 1 , 'wednesday' : 2 , 'thursday' : 3 , 'friday' : 4 , 'saturday' : 5 , 'sunday' : 6 }","var26 = { var28 : 0 , 'tuesday' : 1 , 'wednesday' : 2 , 'thursday' : 3 , 'friday' : 4 , 'saturday' : 5 , 'sunday' : 6 }"
increment weight by integer 2.,increment weight by integer 2.,weight += 1,weight += 1
increment weight by integer 2.,increment weight by integer 2.,weight += 2,weight += 2
weight is an integer 0.,weight is integer 0.,weight = 0,weight = 0
"in string '%s_%d', replace '%s' with new_name and '%d' with num, while the result is contained in used_column_names,","in string var0, replace var1 with var2 and var4 with var5 while result is contained in var6 ","while '%s_%d' % ( new_name , num ) in used_column_names : ","while var0 % ( var2 , var5 ) in var6 : "
"while '<' is contained in value and '>' is contained in value,","while var0 is contained in value and var1 is contained in value,",while '<' in value and '>' in value : ,while var0 in value and '>' in value : 
"while i is lesser than num_existing and first pflen elements of i-th element of existing equals prefixed,","while i is lesser var0 var1 and first var2 elements of i-th element of existing equals prefixed,",while ( i < num_existing ) and ( existing [ i ] [ : pflen ] == prefixed ) : ,while ( i < var1 ) and ( existing [ i ] [ : var2 ] == prefixed ) : 
"endless while loop,","endless while loop,",while 1 : ,while 1 : 
"endless loop,","endless loop,",while 1 : ,while 1 : 
"while newline character is not contained in self.buffer and, size is None or length of self.buffer is less than size,","while var0 character is not contained in var1 and, size is var3 or length of var1 is less var4 size,",while b'\n' not in self . buffer and ( size is None or len ( self . buffer ) < size ) : ,while b'\n' not in var1 and ( size is var3 or len ( var1 ) < size ) : 
"while bits is true,","while bits is true,",while bits : ,while bits : 
"while ch is not equal to a string '}',","while var0 is not equal to string var1,",while ch != '}' : ,while var0 != var1 : 
"while ch is not equal to terminal_char,",while ch is not equal to var0 ,while ch != terminal_char : ,while ch != var0 : 
"as long as current_chunk is not an empty string,","as long as var0 is not empty string,",while current_chunk != b'' : ,while var0 != b'' : 
"while current_len is smaller than or equal to length,","while var0 is smaller var1 or equal to length,",while current_len <= length : ,while var0 <= length : 
"while end is greater than integer 0 and return value of the s.count called with 3 arguments: an empty string, integer 0 and end,","while end is greater var0 integer 0 and return value of var1 called with 3 arguments: empty string, integer 0 and end,","while end > 0 and s . count ( b''' , 0 , end ) % 2 : ","while end > 0 and var1 ( b''' , 0 , end ) % 2 : "
"while escaped is true or ch is not equal to a string ']',","while escaped is true or var0 is not equal to string var1,",while escaped or ch != ']' : ,while escaped or var0 != var1 : 
"while factor is greater or equal to integer 0,","while factor is greater or equal to integer 0,",while factor >= 0 : ,while factor >= 0 : 
"while field.rel is not None,",while field.rel is not var0 ,while field . rel is not None : ,while field . rel is not var0 : 
"while i is smaller than l,","while i is smaller var0 l,",while i < l : ,while i < l : 
"while i is lesser than length of subject and i-th element of subject is not equal to c,","while i is lesser var0 length of subject and i-th element of subject is not equal to c,",while i < len ( subject ) and subject [ i ] != c : ,while i < len ( subject ) and subject [ i ] != c : 
"while i is lesser than length of subject and i-th element of subject is not equal to p-th element of subject,","while i is lesser var0 length of subject and i-th element of subject is not equal to p-th element of subject,",while i < len ( subject ) and subject [ i ] != subject [ p ] : ,while i < len ( subject ) and subject [ i ] != subject [ p ] : 
"while i is lesser than length of subject and i-th element of subject is an empty space or tab character,","while i is lesser var0 length of subject and i-th element of subject is empty space or tab character,","while i < len ( subject ) and subject [ i ] in ( ' ' , '\t' ) : ","while i < len ( subject ) and subject [ i ] in ( ' ' , '\t' ) : "
while i is lesser than length of subject and i-th element of subject is an empty space or tab character.,while i is lesser var0 length of subject and i-th element of subject is empty space or tab character.,"while i < len ( subject ) and subject [ i ] in ( ' ' , '\t' ) : ","while i < len ( subject ) and subject [ i ] in ( ' ' , '\t' ) : "
"while i is lesser than length of subject and i-th element of subject is not an empty space or tab character,","while i is lesser var0 length of subject and i-th element of subject is not empty space or tab character,","while i < len ( subject ) and subject [ i ] not in ( ' ' , '\t' ) : ","while i < len ( subject ) and subject [ i ] not in ( ' ' , '\t' ) : "
"while i is smaller than list_length,",while i is smaller var0 var1 ,while i < list_length : ,while i < var1 : 
"as long k is smaller than endpos,",as long k is smaller var0 var1 ,while k < endpos : ,while k < var1 : 
"substitute the resulting list for digits.   while length of digits is smaller than or equal to absolute value of exponent,","substitute resulting list for digits var0 while length of digits is smaller var1 or equal to absolute value of exponent,",while len ( digits ) <= abs ( exponent ) : ,while len ( digits ) <= abs ( exponent ) : 
"while length of line is grater than max_width,",while length of line is grater var0 var1 ,while len ( line ) > max_width : ,while len ( line ) > var1 : 
"while model_dependencies is true,","while var0 is true,",while model_dependencies : ,while var0 : 
"while the result of the method new_name.find, called with an argument string '__' is greater or equals integer 0,","while result of method var0 find, called with argument string var2 is greater or equals integer 0,",while new_name . find ( '__' ) >= 0 : ,while var0 . find ( var2 ) >= 0 : 
"while answer is false or answer is not contained in string ""yn"", perform the following,","while answer is false or answer is not contained in string var0, perform following,",while not answer or answer not in 'yn' : ,while not answer or answer not in 'yn' : 
"while bit doesnt end with sential,",while bit doesnt end with var0 ,while not bit . endswith ( sentinal ) : ,while not bit . endswith ( sentinal ) : 
"while path is true,","while path is true,",while path : ,while path : 
"while rbp is smaller than self.current_token.lbp,","while var0 is smaller var1 self var3 lbp,",while rbp < self . current_token . lbp : ,while var0 < self . var3 . lbp : 
"while remaining is not equal to integer 0,","while remaining is not equal to integer 0,",while remaining != 0 : ,while remaining != 0 : 
"while remaining_bits is true,","while var0 is true,",while remaining_bits : ,while var0 : 
"substitute it for d.   while rest is true,","substitute it for var0 while rest is true,",while rest : ,while rest : 
while RUN_RELOADER is true.,while var0 is true.,while RUN_RELOADER : ,while var0 : 
"while first element of s is equal to bytes string ';',","while first element of s is equal to bytes string var0,",while s [ : 1 ] == b';' : ,while s [ : 1 ] == b';' : 
"as long as self.exists function with argument name evaluates to boolean True,",as long as var0 function with argument name evaluates to boolean var1 ,while self . exists ( name ) : ,while var0 ( name ) : 
"while self.tokens is true,","while var0 is true,",while self . tokens : ,while var0 : 
while start is lesser than end.,while start is lesser var0 end.,while start < end : ,while start < end : 
"while t is greater than integer 0,","while t is greater var0 integer 0,",while t > 0 : ,while t > 0 : 
"while token.contents starts with a string 'elif',","while var0 starts with string var1,",while token . contents . startswith ( 'elif' ) : ,while var0 . startswith ( var1 ) : 
update widget.attrs dictionary with extra_attrs.,update var0 dict with var1 ,widget . attrs . update ( extra_attrs ),var0 . update ( var1 )
widget.input_type is a string 'hidden'.,widget var1 is string var2.,widget . input_type = 'hidden',widget . var1 = var2
substitute self.is_localized for widget.is_localized.,substitute self var1 for widget var1 ,widget . is_localized = self . is_localized,widget . var1 = self . var1
widget.is_localized is boolean True.,widget var1 is boolean var2 ,widget . is_localized = True,widget . var1 = var2
substitute self.required for widget.is_required.,substitute var0 for widget var2 ,widget . is_required = self . required,widget . var2 = var0
substitute CheckboxInput for widget.,substitute var0 for widget.,widget = CheckboxInput,widget = var0
substitute ClearableFileInput for widget.,substitute var0 for widget.,widget = ClearableFileInput,widget = var0
substitute DateInput for widget.,substitute var0 for widget.,widget = DateInput,widget = var0
substitute DateTimeInput for widget.,substitute var0 for widget.,widget = DateTimeInput,widget = var0
substitute EmailInput for widget.,substitute var0 for widget.,widget = EmailInput,widget = var0
"get the value under self._pk_field.name key of form._meta.widgets dictionary, if it exists substitute it for widget, if not,","get value under var0 key of var1 dict, if it exists substitute it for widget, if not,","widget = form . _meta . widgets . get ( self . _pk_field . name , HiddenInput )","widget = var1 . get ( var0 , HiddenInput )"
widget is an instance of HiddenInput class,widget is instance of var0 class,widget = HiddenInput,widget = var0
substitute HiddenInput for widget.,substitute var0 for widget.,widget = HiddenInput,widget = var0
substitute NullBooleanSelect for widget.,substitute var0 for widget.,widget = NullBooleanSelect,widget = var0
substitute NumberInput for widget.,substitute var0 for widget.,widget = NumberInput,widget = var0
substitute Select for widget.,substitute var0 for widget.,widget = Select,widget = var0
substitute SelectMultiple for widget.,substitute var0 for widget.,widget = SelectMultiple,widget = var0
substitute self.field.widget for widget.,substitute var0 for widget.,widget = self . field . widget,widget = var0
substitute SplitDateTimeWidget for widget.,substitute var0 for widget.,widget = SplitDateTimeWidget,widget = var0
substitute substitute TextInput for widget.,substitute substitute var0 for widget.,widget = TextInput,widget = var0
substitute TimeInput for widget.,substitute var0 for widget.,widget = TimeInput,widget = var0
substitute URLInput for widget.,substitute var0 for widget.,widget = URLInput,widget = var0
"call the function widget, substitute the result for widget.","call function widget, substitute result for widget.",widget = widget ( ),widget = widget ( )
"substitute self.widget if the widget is false, otherwise substitute widget for widget.","substitute var0 if widget is false, otherwise substitute widget for widget.",widget = widget or self . widget,widget = widget or var0
widget_value is None.,var0 is var1 ,widget_value = None,var0 = var1
substitute i-th element of value for widget_value.,substitute i-th element of value for var0 ,widget_value = value [ i ],var0 = value [ i ]
"widgets is a tuple with 2 elements: instance of DateInput class, created with 2 arguments: attrs as attrs and format as date_format,","widgets is tuple with 2 elements: instance of var0 class, created with 2 arguments: var1 as var1 and format as var3 ","widgets = ( DateInput ( attrs = attrs , format = date_format ) , TimeInput ( attrs = attrs , format = time_format ) )","widgets = var0 ( var1 = var1 , format = var3 ) , TimeInput ( var1 = var1 , format = time_format )"
"get property attribute _get_width, and substitute it for width.",get property attribute var0 and substitute it for width.,width = property ( _get_width ),width = property ( var0 )
"call the function six.text_type with length of lines as an argument,","call function six var0 with length of lines as argument,",width = six . text_type ( len ( six . text_type ( len ( lines ) ) ) ),width = six . var0 ( len ( six . var0 ( len ( lines ) ) ) )
substitute WindowsError for WindowsError.,substitute var0 for var0 ,WindowsError = WindowsError,var0 = var0
"instantiate Archive class with an argument path, with it renamed to archive, perform,","instantiate var0 class with argument path, with it renamed to archive, perform,",with Archive ( path ) as archive : ,with var0 ( path ) as archive : 
"call the function codecs.open with 3 arguments: sql_file, string 'r' and  encoding set to settings.FILE_CHARSET, with the result renamed to fp,",call function var1 with 3 arguments: var2 string var4 and encoding set to settings var5 with result renamed to var6 ,"with codecs . open ( sql_file , 'r' , encoding = settings . FILE_CHARSET ) as fp : ","with var1 ( var2 , var0var4 , var0encoding = settings . var5 ) as var6 : "
"call the method connection.constraint_checks_disabled, with the result perform,","call method connection var1 with result perform,",with connection . constraint_checks_disabled ( ) : ,with connection . var1 ( ) : 
"with the result,   evaluate method connection.cursor, with return value as curs,","with result var0 evaluate method var1 with return value as curs,",with connection . cursor ( ) as curs : ,with var1 ( ) as curs : 
"with the result,   call the method connection.cursor, with the result as cursor,","with result var0 call method var1 with result as cursor,",with connection . cursor ( ) as cursor : ,with var1 ( ) as cursor : 
"otherwise returns s.   call the method connection.cursor, with the result as cursor,","otherwise returns var0 call method var2 with result as cursor,",with connection . cursor ( ) as cursor : ,with var2 ( ) as cursor : 
"call the method connection.cursor, with the result renamed to cursor, perform the following,","call method var0 with result renamed to cursor, perform following,",with connection . cursor ( ) as cursor : ,with var0 ( ) as cursor : 
"call the cursor method on the value under the db key of connections dictionary, preform following with return value named cursor,","call cursor method on value under db key of connections dict, preform following with return value named cursor,",with connections [ db ] . cursor ( ) as cursor : ,with connections [ db ] . cursor ( ) as cursor : 
"call the method context.push, with the result perform,","call method var0 with result perform,",with context . push ( ) : ,with var0 ( ) : 
"call the context.push method, with the result, perform,","call context.push method, with result, perform,",with context . push ( ) : ,with context . push ( ) : 
"for every key and val in return value of the function six.iteritems called with an arguments self.extra_context.   call the method context.push with an argument unpacked dictionary values, with the result as an argument,","for every key and var0 in return value of function var1 called with arguments self var3 call method var5 with argument unpacked dict values, with result as argument,",with context . push ( ** values ) : ,with var5 ( ** var0ues ) : 
"call the method context.push with unpacked dictionary values as an argument, with the result perform,","call method var0 with unpacked dict values as argument, with result perform,",with context . push ( ** values ) : ,with var0 ( ** values ) : 
"call the method context.push with an argument var set to output, with the result perform,","call method var0 with argument var set to output, with result perform,",with context . push ( var = output ) : ,with var0 ( var = output ) : 
"call the method context_instance.push with an argument dictionary, with the result perform,","call method var0 push with argument dict, with result perform,",with context_instance . push ( dictionary ) : ,with var0 . push ( dictionary ) : 
"call the function io.open with 3 arguments: django_po, string 'r' and encoding set to string 'utf-8' as arguments,","call function var0 with 3 arguments: var1 string var3 and encoding set to string var4 as arguments,","with io . open ( django_po , 'r' , encoding = 'utf-8' ) as fp : ","with var0 ( var1 , var3 , encoding = 'utf-8' ) as fp : "
"with return value of the function io.open with fname and string 'rb' as arguments, named as f,","with return value of function io.open with var0 and string var1 as arguments, named as f,","with io . open ( fd , 'wb' ) as f : ","with io . open ( fd , 'wb' ) as f : "
"with return value of the function io.open with fname and string 'rb' as arguments, named as f,","with return value of function io.open with var0 and string var1 as arguments, named as f,","with io . open ( fname , 'rb' ) as f : ","with io . open ( var0 , var1 ) as f : "
"with call to the io.open function with fname and string 'rb' as arguments, renamed to f,","with call to var0 function with var1 and string var2 as arguments, renamed to f,","with io . open ( fname , 'rb' ) as f : ","with var0 ( var1 , var2 ) as f : "
"call the function io.open with 3 arguments: work_file, string 'w' and encoding set to settings.FILE_CHARSET as arguments,","call function var0 with 3 arguments: var1 string var3 and encoding set to settings var4 as arguments,","with io . open ( orig_file , 'r' , encoding = settings . FILE_CHARSET ) as fp : ","with var0 ( orig_file , 'r' , encoding = settings . var4 ) as fp : "
"call the function io.open with orig_file and encoding set to settings.FILE_CHARSET, with the result renamed to fp,",call function var0 with var1 and encoding set to settings var3 with result renamed to var4 ,"with io . open ( orig_file , encoding = settings . FILE_CHARSET ) as fp : ","with var0 ( var1 , encoding = settings . var3 ) as var4 : "
"call the function io.open with 3 arguments: self.dirpath and thefile joined into a file path, string 'w',","call function var0 with 3 arguments: var1 and var2 joined into file path, string var3,","with io . open ( os . path . join ( self . dirpath , thefile ) , 'w' , encoding = 'utf-8' ) as fp : ","with var0 ( os . path . join ( var1 , var2 ) , var3 , encoding = 'utf-8' ) as fp : "
"replace all the occurrences of previous string in msgs for an empty string, substitute the result for msgs.   call the function io.open with 3 arguments: pofile, string 'w' and encoding set to string 'utf-8' as arguments,","replace all occurrences of previous string in msgs for empty string, substitute result for msgs var0 call function var1 with 3 arguments: var2 string var3 and encoding set to string var4 as arguments,","with io . open ( pofile , 'w' , encoding = 'utf-8' ) as fp : ","with var1 ( var2 , var3 , encoding = 'utf-8' ) as fp : "
"call the function io.open with 3 arguments: potfile, string 'a' and encoding set to string 'utf-8' as arguments,","call function var0 with 3 arguments: var1 string var2 and encoding set to string var3 as arguments,","with io . open ( potfile , 'a' , encoding = 'utf-8' ) as fp : ","with var0 ( var1 , var2 , encoding = 'utf-8' ) as fp : "
"call the function io.open with 3 arguments: potfile, string 'r' and encoding set to string 'utf-8' as arguments,","call function var0 with 3 arguments: var1 string var2 and encoding set to string var3 as arguments,","with io . open ( potfile , 'r' , encoding = 'utf-8' ) as fp : ","with var0 ( var1 , var2 , encoding = 'utf-8' ) as fp : "
"call the function io.open with 3 arguments: potfile, string 'w' and encoding set to string 'utf-8' as arguments,","call function var0 with 3 arguments: var1 string var2 and encoding set to string var3 as arguments,","with io . open ( potfile , 'w' , encoding = 'utf-8' ) as fp : ","with var0 ( var1 , var2 , encoding = 'utf-8' ) as fp : "
"call the function io.open with 3 arguments: work_file, string 'w' and encoding set to string 'utf-8' as arguments,","call function var0 with 3 arguments: var1 string var3 and encoding set to string var4 as arguments,","with io . open ( work_file , 'w' , encoding = 'utf-8' ) as fp : ","with var0 ( var1 , var3 , encoding = 'utf-8' ) as fp : "
"otherwise substitute args for key.   with lock,","otherwise substitute var0 for key var1 with lock,",with lock : ,with lock : 
"with lock,","with lock,",with lock : ,with lock : 
"open filename file in write mode, with the file descriptor renamed to outfile, perform,","open filename file in write mode, with file descriptor renamed to var0 perform,","with open ( filename , 'wb' ) as outfile : ","with open ( filename , 'wb' ) as var0 : "
"open filepath file in read mode, with file descriptor as fp, perform,","open var0 file in read mode, with file descriptor as var1 perform,","with open ( filepath , 'r' ) as fp : ","with open ( var0 , 'r' ) as var1 : "
"open the file named filepath in read mode, with file descriptor renamed to fp perform,","open file named var0 in read mode, with file descriptor renamed to var1 perform,","with open ( filepath , 'rb' ) as fp : ","with open ( var0 , 'rb' ) as var1 : "
"open the file fn in read mode, with file descriptor as f,","open file var0 in read mode, with file descriptor as f,","with open ( fn , 'rb' ) as f : ","with open ( var0 , 'rb' ) as f : "
"open new_path file in 'wb' mode, with file descriptor renamed to new_file,","open var0 file in var2 mode, with file descriptor renamed to var3 ","with open ( new_path , 'wb' ) as new_file : ","with open ( var0 , var2 ) as var3 : "
"open file old_file_name in read bytes mode, with file descriptor as f,","open file var0 in read bytes mode, with file descriptor as f,","with open ( old_file_name , 'rb' ) as old_file : ","with open ( var0 , 'rb' ) as old_file : "
"string ""%s already exists, overlaying a project or app into an existing directory won't replace conflicting files"",   where '%s"" is replaced with new_path.   open old_path file in 'rb' mode, with file descriptor renamed to template_file,","string var0 var1 var3 var4rb' mode, with file descriptor renamed to var9 ","with open ( old_path , 'rb' ) as template_file : ","with open ( var7 , 'rb' ) as var9 : "
"open the file whose name is stored in the value under the 'pidfile' key of options dictionary and mode 'w', with the file descriptor as fp,","open file var0 name is stored in value under var1 key of options dict and mode var2, with file descriptor as var3 ","with open ( options [ 'pidfile' ] , 'w' ) as fp : ","with open ( options [ var1 ] , 'w' ) as var3 : "
"with open file path in append mode,","with open file path in append mode,","with open ( path , 'a' ) : ","with open ( path , 'a' ) : "
"open file named path in 'rb' mode, with file descriptor as f,","open file named path in var0 mode, with file descriptor as f,","with open ( path , 'rb' ) as f : ","with open ( path , var0 ) as f : "
"open pythonrc, with the file handle renamed to handle perform the following,","open var0 with file handle renamed to handle perform following,",with open ( pythonrc ) as handle : ,with open ( var0 ) as handle : 
"open writer.path file in write mode, with the file descriptor as fh, perform,","open var0 file in write mode, with file descriptor as var1 perform,","with open ( writer . path , 'wb' ) as fh : ","with open ( var0 , 'wb' ) as var1 : "
"open writer.path file in write mode, with the file descriptor as fh, perform the following,","open var0 file in write mode, with file descriptor as var1 perform following,","with open ( writer . path , 'wb' ) as fh : ","with open ( var0 , 'wb' ) as var1 : "
"call the method self._lock, with the result,","call method var0 with result,",with self . _lock : ,with var0 : 
"call the method self._lock, with the return value,","call method var0 with return value,",with self . _lock : ,with var0 : 
"call the self._lock.reader method, with the result perform the following,","call var0 method, with result perform following,",with self . _lock . reader ( ) : ,with var0 ( ) : 
"call the self._lock.writer method, with the result perform the following,","call var0 method, with result perform following,",with self . _lock . writer ( ) : ,with var0 ( ) : 
"with self.initLock,",with self var1 ,with self . initLock : ,with self . var1 : 
"with self.mutex perform,","with var0 perform,",with self . mutex : ,with var0 : 
"with the call to the transaction.atomic method with using set to connection.alias, savepoint set to connection.features.can_rollback_ddl as arguments,","with call to var0 method with using set to var1 var2 set to connection.features var4 as arguments,","with transaction . atomic ( using = connection . alias , savepoint = connection . features . can_rollback_ddl ) : ","with var0 ( using = var1 , var2 = connection . features . var4 ) : "
"with call to the function transaction.atomic with using set to connection.alias and savepoint set to connection.features.can_rollback_ddl, as arguments.",with call to function var0 with using set to var1 and var2 set to connection.features var4 as arguments.,"with transaction . atomic ( using = connection . alias , savepoint = connection . features . can_rollback_ddl ) : ","with var0 ( using = var1 , var2 = connection . features . var4 ) : "
"with call to the function transaction.atomic with using set to connection.alias as argument,","with call to function var0 with using set to var1 as argument,",with transaction . atomic ( using = connection . alias ) : ,with var0 ( using = var1 ) : 
"evaluate method transaction.atomic with arguments: using set to database and savepoint set to connection.features.can_rollback_ddl,",evaluate method var0 with arguments: using set to database and var1 set to connection.features var3 ,"with transaction . atomic ( using = database , savepoint = connection . features . can_rollback_ddl ) : ","with var0 ( using = database , var1 = connection . features . var3 ) : "
"call the method transaction.atomic with 2 arguments: using set to database, savepoint set to connection.features.can_rollback_ddl,",call method var0 with 2 arguments: using set to database var1 set to connection.features var3 ,"with transaction . atomic ( using = database , savepoint = connection . features . can_rollback_ddl ) : ","with var0 ( using = database , var1 = connection . features . var3 ) : "
"with return value of the function transaction.atomic with using set to db as arguments, perform the following,","with return value of function var0 with using set to db as arguments, perform following,",with transaction . atomic ( using = db ) : ,with var0 ( using = db ) : 
"call the method transaction.atomic with an argument using set to self.using, with the result,","call method var0 with argument using set to var1 with result,",with transaction . atomic ( using = self . using ) : ,with var0 ( using = var1 ) : 
call the method wm.add_watch with path and mask as arguments.,call method wm var1 with path and mask as arguments.,"wm . add_watch ( path , mask )","wm . var1 ( path , mask )"
"call the pyinotify.WatchManager method, assign the result to wm.","call var0 var1 method, assign result to var2 ",wm = pyinotify . WatchManager ( ),var2 = var0 . var1 ( )
"compile a regex from raw string '^\s*(\w+)\s*', substitute it for WORD_PATTERN.","compile var0 from raw string var1, substitute it for var2 ",WORD_PATTERN = re . compile ( r'^\s*(\w+)\s*' ),var2 = re . compile ( '^\\s*(\\w+)\\s*' )
"call the function re.compile with raw string '(\s+)', substitute the result for word_split_re.","call function var0 with raw string var1, substitute result for var2 ",word_split_re = re . compile ( r'(\s+)' ),var2 = var0 ( '(\\s+)' )
"call the function escape with an argument word, substitute the result for i-th element of words.","call function escape with argument word, substitute result for i-th element of words.",words [ i ] = escape ( word ),words [ i ] = escape ( word )
"format string '<a href=""%s""%s>%s</a>' with lead, middle and trail, use it as an argument for the call to the function mark_safe,","format string var0 with lead, middle and trail, use it as argument for call to function var1 ","words [ i ] = mark_safe ( '%s%s%s' % ( lead , middle , trail ) )","words [ i ] = var1 ( '%s%s%s' % ( lead , middle , trail ) )"
"call the function mark_safe with an argument word, substitute the result for i-th element of words.","call function var0 with argument word, substitute result for i-th element of words.",words [ i ] = mark_safe ( word ),words [ i ] = var0 ( word )
"call the function allow_lazy with an argument words, substitute the result for words.","call function var0 with argument words, substitute result for words.",words = allow_lazy ( words ),words = var0 ( words )
"split self._wrapped into words, substitute the result for words.","split var0 into words, substitute result for words.",words = self . _wrapped . split ( ),words = var0 . split ( )
"call the function force_text with an argument text, split by it word_split_re, substitute it for words.","call function var0 with argument text, split by it var1 substitute it for words.",words = word_split_re . split ( force_text ( text ) ),words = var1 . split ( var0 ( text ) )
substitute first length elements of words for words.,substitute first length elements of words for words.,words = words [ : length ],words = words [ : length ]
"join self.dirpath and thefile in a string, substitute the result for work_file.","join var0 and var1 in string, substitute result for var2 ","work_file = os . path . join ( self . dirpath , thefile )","var2 = os . path . join ( var0 , var1 )"
"join self.dirpath, thefile into a file path, substitute it for work_file.","join var0 var1 into file path, substitute it for var2 ","work_file = os . path . join ( self . dirpath , thefile )","var2 = os . path . join ( var0 , var1 )"
"call the function allow_lazy with 2 arguments: wrap and six.text_type, substitute the result for wrap.",call function var0 with 2 arguments: wrap and six var2 substitute result for wrap.,"wrap = allow_lazy ( wrap , six . text_type )","wrap = var0 ( wrap , six . var2 )"
"call the method self.make_view_atomic with callback as the argument, substitute the result for the wrapped_callback.","call method self var1 with callback as argument, substitute result for var2 ",wrapped_callback = self . make_view_atomic ( callback ),var2 = self . var1 ( callback )
"call the function check_errors with argument main_func, substitute the result for wrapped_main_func.",call function var0 with argument var1 substitute result for var3 ,wrapped_main_func = check_errors ( main_func ),wrapped_var1 = var0 ( var1 )
substitute user_function for wrapper.__wrapped__.,substitute var0 for var1 ,wrapper . __wrapped__ = user_function,var1 = var0
substitute cache_clear for wrapper.cache_clear.,substitute var0 for wrapper var0 ,wrapper . cache_clear = cache_clear,wrapper . var0 = var0
substitute cache_info for wrapper.cache_info.,substitute var0 for wrapper var0 ,wrapper . cache_info = cache_info,wrapper . var0 = var0
"call the function warn_about_renamed_method with 2 arguments: class_name and unpacked list renamed_method, substitute the result for wrapper.",call function var0 with 2 arguments: var2 and unpacked list var1 substitute result for wrapper.,"wrapper = warn_about_renamed_method ( class_name , * renamed_method )","wrapper = var0 ( var2 , * var1 )"
"WRAPPING_PUNCTUATION is a list with 6 elements: tuple with 2 elements: '(' and ')', tuple with 2 elements: '<' and '>',","WRAPPING_PUNCTUATION is a list with 6 elements: tuple with 2 elements: '(' and ')', tuple with 2 elements: '<' and '>',","WRAPPING_PUNCTUATION = [ ( '(' , ')' ) , ( '<' , '>' ) , ( '[' , ']' ) , ( '&lt;' , '&gt;' ) , ( ''' , ''' ) , ( '\'' , '\'' ) ]","WRAPPING_PUNCTUATION = [ ( '(' , ')' ) , ( '<' , '>' ) , ( '[' , ']' ) , ( '&lt;' , '&gt;' ) , ( ''' , ''' ) , ( '\'' , '\'' ) ]"
call the function write with an argument arg.,call function write with argument var0 ,write ( arg ),write ( var0 )
call the function write with an argument end.,call function write with argument end.,write ( end ),write ( end )
call the function write with an argument sep.,call function write with argument sep.,write ( sep ),write ( sep )
"define lambda function that returns self.file.write field, use it as an argument for property function, put the result in write.","define lambda function var0 returns var1 field, use it as argument for property function, put result in write.",write = property ( lambda self : self . file . write ),write = property ( lambda self : var1 )
call the function write_pot_file with 2 arguments: potfile and msgs.,call function var0 with 2 arguments: var1 and msgs.,"write_pot_file ( potfile , msgs )","var0 ( var1 , msgs )"
"define lambda function that returns self.file.writelines field, use it as an argument for property function, put the result in writelines.","define lambda function var0 returns var1 field, use it as argument for property function, put result in var2 ",writelines = property ( lambda self : self . file . writelines ),var2 = property ( lambda self : var1 )
"writer is an instance of MigrationWriter class, created with an argument migration.","writer is instance of var0 class, created with argument migration.",writer = MigrationWriter ( migration ),writer = var0 ( migration )
"that occupies minimum 4 places within a string, and app_label, substitute the result for new_migration.   writer is instance of MigrationWriter class, created with new_migration argument.","var0 occupies minimum 4 places within string, and var1 substitute result for var3 writer is instance of var8 class, created with var3 argument.",writer = MigrationWriter ( new_migration ),writer = var8 ( var3 )
"substitute the result for new_migration.   writer is an instance of a class MigrationWriter, created with an argument new_migration.",substitute result for var0 writer is instance of class var5 created with argument var0 ,writer = MigrationWriter ( new_migration ),writer = var5 ( var0 )
"set the value under the 'bindAddress' key of the wsgi_opts dictionary to a tuple containing 2 elements: value under the 'host' key,","set value under var0 key of var1 dict to tuple containing 2 elements: value under var3 key,","wsgi_opts [ 'bindAddress' ] = ( options [ 'host' ] , int ( options [ 'port' ] ) )","var1 [ var0 ] = options [ 'host' ] , int ( options [ 'port' ] )"
set value under the 'bindAddress' key of wsgi_opts to None.,set value under var0 key of var1 to var3 ,wsgi_opts [ 'bindAddress' ] = None,var1 [ var0 ] = var3
substitute the value under the 'socket' key of options dictionary for value under the 'bindAddress' key of wsgi_opts dictionary.,substitute value under var0 key of options dict for value under var1 key of var4 dict.,wsgi_opts [ 'bindAddress' ] = options [ 'socket' ],var4 [ 'bindAddress' ] = options [ var0 ]
"if value under the 'debug' key of options dictionary is not None, substitute it for value under the 'debug' key of wsgi_opts dictionary.",if value under var0 key of options dict is not var2 substitute it for value under var0 key of var3 dict.,wsgi_opts [ 'debug' ] = options [ 'debug' ] is not None,var3 [ var0 ] = options [ var0 ] is not var2
"wsgi_opts is a dictionary with 4 initial entries: value under the key 'maxspare' of options dictionary converted to an integer,","var0 is dict with 4 initial entries: value under key var1 of options dict converted to integer,","wsgi_opts = { 'maxSpare' : int ( options [ 'maxspare' ] ) , 'minSpare' : int ( options [ 'minspare' ] ) , 'maxChildren' : int ( options [ 'maxchildren' ] ) , 'maxRequests' : int ( options [ 'maxrequests' ] ) , }","var0 = { 'maxSpare' : int ( options [ var1 ] ) , 'minSpare' : int ( options [ 'minspare' ] ) , 'maxChildren' : int ( options [ 'maxchildren' ] ) , 'maxRequests' : int ( options [ 'maxrequests' ] ) }"
"wsgi_opts is a dictionary with 4 initial entries: value under the key 'maxspare' of options dictionary converted to an integer,","var0 is dict with 4 initial entries: value under key var1 of options dict converted to integer,","wsgi_opts = { 'maxSpare' : int ( options [ 'maxspare' ] ) , 'minSpare' : int ( options [ 'minspare' ] ) , 'maxThreads' : int ( options [ 'maxchildren' ] ) , }","var0 = { 'maxSpare' : int ( options [ var1 ] ) , 'minSpare' : int ( options [ 'minspare' ] ) , 'maxThreads' : int ( options [ 'maxchildren' ] ) }"
"create the object WSGIServer with 2 arguments: get_internal_wsgi_application return value and unpacked dictionary wsgi_opts, call the method run on it.",create object var0 with 2 arguments: var1 return value and unpacked dict var3 call method run on it.,"WSGIServer ( get_internal_wsgi_application ( ) , ** wsgi_opts ) . run ( )","var0 ( var1 ( ) , ** var3 ) . run ( )"
substitute module.WSGIServer for WSGIServer.,substitute module var0 for var0 ,WSGIServer = module . WSGIServer,var0 = module . var0
append to x the hexadecimal conversion of the and operation between a and 0xff,append to x hexadecimal conversion of and operation between and var0,x += '%02x' % ( a & 0xff ),x += '%02x' % ( a & var0 )
append to x the and operation between a and 0xff converted to hexadecimal,append to x and operation between and var0 converted to hexadecimal,x += '%02x' % ( a & 0xff ),x += '%02x' % ( a & var0 )
append to x the hexadecimal conversion of the and operation between y and 0xff,append to x hexadecimal conversion of and operation between y and var0,x += '%02x' % ( a & 0xff ),x += '%02x' % ( a & var0 )
"perform the and operation between y and 0xff, then convert the result in hexadecimal and append it to x",perform and operation between y and var0 then convert result in hexadecimal and append it to x,x += '%02x' % ( y & 0xff ),x += '%02x' % ( y & var0 )
add 1 to the variable x,add 1 to variable x,x += 1,x += 1
increment the variable x by 1,increment variable x by 1,x += 1,x += 1
increment x by 10,increment x by 10,x += 10,x += 10
x is integer 0.,x is integer 0.,x = 0,x = 0
"divide x by length of to_digits, convert floor value of the result to an integer, substitute it for x.","divide x by length of var0 convert floor value of result to integer, substitute it for var1",x = int ( x // len ( to_digits ) ),x = int ( x // len ( var0 ) )
x is function rol with x and rand as parameters,x is function var0 with x and rand as parameters,"x = rol ( x , rand )","x = var0 ( x , rand )"
"multiply x by length of from_digits add the return value of method from_digits.index with digit argument, substitute the result for x.","multiply x by length of var0 add return value of method var0 index with digit argument, substitute result for var2",x = x * len ( from_digits ) + from_digits . index ( digit ),x = x * len ( var0 ) + var0 . index ( digit )
"shift x to the left by n, then store the result in x","shift x to left by n, then store result in x",x = x << nbits,x = x << nbits
x is x shifted left by n,x is x shifted left by n,x = x << nbits,x = x << nbits
update x with xor oxDD,update x with xor var0,x = x ^ 0xDD,x = x ^ 221
xgettext_options is an list with elements: strings '--from-code=UTF-8' and '--add-comments=Translators'.,var0 is list with elements: strings var1 and var2.,"xgettext_options = [ '--from-code=UTF-8' , '--add-comments=Translators' ]","var0 = [ var1 , '--add-comments=Translators' ]"
store in xor_byte the value of the function find_valid_xor_byte with chunk and bad_chars as parameters,store in var0 value of function var1 with chunk and var3 as parameters,"xor_byte = find_valid_xor_byte ( chunk , bad_chars )","var0 = var1 ( chunk , var3 )"
xor_rot is shell_rot bitwise xor 0xAA,var0 is var1 var2 xor 0xAA,xor_rot = shell_rot ^ 0xAA,var0 = var1 ^ 170
"define lambda function that returns self.file.xreadlines field, use it as an argument for property function, put the result in xreadlines.","define lambda function var0 returns var1 field, use it as argument for property function, put result in var2 ",xreadlines = property ( lambda self : self . file . xreadlines ),var2 = property ( lambda self : var1 )
assign the variable xxx the hexadecimal integer absolute value of subfs minus rev_suplx converted to int16,assign variable xxx hexadecimal integer absolute value of var0 minus var1 converted to var2,"xxx = hex ( int ( abs ( subfs ) ) - int ( rev_suplx , 16 ) )","xxx = hex ( int ( abs ( var0 ) ) - int ( var1 , 16 ) )"
assign the variable xxx the hexadecimal integer absolute value of subfs minus rev_suplx converted to integer 16,assign variable xxx hexadecimal integer absolute value of var0 minus var1 converted to integer 16,"xxx = hex ( int ( abs ( subfs ) ) - int ( rev_suplx , 16 ) )","xxx = hex ( int ( abs ( var0 ) ) - int ( var1 , 16 ) )"
assign the variable xxx the hexadecimal integer absolute value of subfs modulous rev_suplx converted to int16,assign variable xxx hexadecimal integer absolute value of var0 var1 var2 converted to var3,"xxx = hex ( int ( abs ( subfs ) ) % int ( rev_suplx , 16 ) )","xxx = hex ( int ( abs ( var0 ) ) % int ( var2 , 16 ) )"
assign the variable xxx the hexadecimal integer absolute value of subfs plus the first 3 values converted to int16 of the variable rev_suplx,assign variable xxx hexadecimal integer absolute value of var0 plus first 3 values converted to var1 of variable var2,"xxx = hex ( int ( abs ( subfs ) ) + int ( rev_suplx [ 0 : 2 ] , 16 ) )","xxx = hex ( int ( abs ( var0 ) ) + int ( var2 [ 0 : 2 ] , 16 ) )"
y is x converted to hexadecimal,y is x converted to hexadecimal,y += '%02x' % x,y += '%02x' % x
assign the variable y the bytearray of the variable shellcode at index 0 bitwise bitwise and bytearray of shellcode at index 1,assign variable y var0 of variable var2 at index 0 var4 bitwise and var0 of var2 at index 1,y = bytearray ( shellcode ) [ 0 ] & bytearray ( shellcode ) [ 1 ],y = var0 ( var2 ) [ 0 ] & var0 ( var2 ) [ 1 ]
store in variable y xor of the bytearrays of the variable shellcode at index 0 and 1,store in variable y xor of var0 of variable var1 at index 0 and 1,y = bytearray ( shellcode ) [ 0 ] ^ bytearray ( shellcode ) [ 1 ],y = bytearray ( var1 ) [ 0 ] ^ bytearray ( var1 ) [ 1 ]
"format self.year_field string with name, use it as the key for the data dictionary, substitute the result for y.","format self var1 string with name, use it as key for data dict, substitute result for var2",y = data . get ( self . year_field % name ),y = data . get ( self . var1 % name )
convert y to int16,convert y to var0,"y = int ( hopcode , 16 )","y = int ( hopcode , 16 )"
"perform a left shift on x by n, then store the result in y","perform left shift on x by n, then store result in y",y = x << nbits,y = x << nbits
y is x shifted left by n,y is x shifted left by n,y = x << nbits,y = x << nbits
"shift x to the left by n, then store the result in y","shift x to left by n, then store result in y",y = x << nbits,y = x << nbits
"call the function yaml.dump with 4 arguments: self.objects, self.stream, Dumper=DjangoSafeDumper and unpacked dictionary self.options.",call function var0 with 4 arguments: var1 var2 Dumper=DjangoSafeDumper and unpacked dict var7 ,"yaml . dump ( self . objects , self . stream , Dumper = DjangoSafeDumper , ** self . options )","var0(var1, var2, var3 var4 var5, ** var7)"
increment year by integer 1900.,increment year by integer 1900.,year += 1900,year += 1900
increment year by integer 2000.,increment year by integer 2000.,year += 2000,year += 2000
"integer 0, appended to a string ""strftime of dates before 1900 does not handle"".   substitute dt.year for year.","integer 0, appended to string var0 var1 substitute var2 for year.",year = dt . year,year = var2
"call the method m.group with an argument string 'year', convert the result into a string, substitute it for year.","call method var0 with argument string var1, convert result into string, substitute it for year.",year = int ( m . group ( 'year' ) ),year = int ( m . group ( var1 ) )
"subtract year from integer 2000, divide the result by integer 28, floor the result, multiply it with 28 and increment by year,","subtract year from integer 2000, divide result by integer 28, floor result, multiply it with 28 and increment by year,",year = year + ( ( 2000 - year ) // 28 ) * 28,year = year + ( 2000 - year ) // 28 * 28
"sum year and off, substitute the result for year.","sum year and off, substitute result for year.",year = year + off,year = year + off
"year_days is a list with 13 elements: None, integer 0, integer 31, integer 59, integer 90, integer 120, integer 151, integer 181,","var0 is list with 13 elements: var1 integer 0, integer 31, integer 59, integer 90, integer 120, integer 151, integer 181,","year_days = [ None , 0 , 31 , 59 , 90 , 120 , 151 , 181 , 212 , 243 , 273 , 304 , 334 ]","var0 = [ var1 , 0 , 31 , 59 , 90 , 120 , 151 , 181 , 212 , 243 , 273 , 304 , 334 ]"
year_field is a string '%s_year'.,var0 is string var1.,year_field = '%s_year',var0 = var1
"for v in return value of the function match.groups, convert v into an integer and append i to a list,","for v in return value of function var0 convert v into integer and append i to list,","year_val , month_val , day_val = [ int ( v ) for v in match . groups ( ) ]","year_val , month_val , day_val = [ int ( v ) for v in var0 ( ) ]"
"and input_format, substitute the result for v.   substitute v.year, v.month and v.day for year_val, month_val and day_val, respectively.",and var0 substitute result for var1 substitute var3 var4 and var5 for var6 var8 and var9 respectively.,"year_val , month_val , day_val = v . year , v . month , v . day","var6 , var1r1r8 , var1r1r9 = var1year , var1r1month , var1r1day"
"substitute value.year, value.month and value.day for year_val, month_val and day_val, respectively.",substitute var0 var1 and var2 for var3 var4 and var5 respectively.,"year_val , month_val , day_val = value . year , value . month , value . day","var3 , var4 , var5 = var0 , var1 , var2"
year_val and month_val and day_val are set to None.,var0 and var1 and var2 are set to var4 ,year_val = month_val = day_val = None,var0 = var1 = var2 = var4
"assign bits elements to yes, no and maybe, respectively.","assign bits elements to yes, no and maybe, respectively.","yes , no , maybe = bits","yes , no , maybe = bits"
"substitute first, second and second elements of bits for yes, no, maybe, respectively.","substitute first, second and second elements of bits for yes, no, maybe, respectively.","yes , no , maybe = bits [ 0 ] , bits [ 1 ] , bits [ 1 ]","yes , no , maybe = bits [ 0 ] , bits [ 1 ] , bits [ 1 ]"
yield nothing.,yield nothing.,yield,yield
"yield string '    %s', where '%s' is replaced with field_desc.",yield string var0 var1 var2 is replaced with var3 ,yield '    %s' % field_desc,yield var0 % var3
yield and empty string as the result.,yield and empty string as result.,yield '',yield ''
"get the first space decremented with integer 1 elements from string line, append newline character to it, and yield the result.","get first space var0 with integer 1 elements from string line, append var1 character to it, and yield result.",yield '%s\n' % line [ : space - 1 ],yield '%s\n' % line [ : space - 1 ]
"yield string 'from %s import models' % self.db_module as the result, where ""%s"" is replaced with result of the call to the function,","yield string var0 % self var2 as result var3 var4 is replaced with result of call to function,",yield 'class %s(models.Model):' % table2model ( table_name ),yield 'class %s(models.Model):' % table2model ( table_name )
yield string 'day' as an return value of the generator.,yield string var0 as return value of generator.,yield 'day',yield var0
"yield string 'from %s import models' % self.db_module as the result, where ""%s"" is replaced with self.db_module.",yield string var0 % self var3 as result var5 var6 is replaced with self var3 ,yield 'from %s import models' % self . db_module,yield var0 % self . var3
yield string 'month' as an return value of the generator.,yield string var0 as return value of generator.,yield 'month',yield var0
yield string 'year' as an return value of the generator.,yield string var0 as return value of generator.,yield 'year',yield var0
"yield string ""#   * Make sure each model has one field with primary_key=True"" as the result.",yield string var0 as result.,yield '#   * Make sure each model has one field with primary_key=True',yield '#   * Make sure each model has one field with primary_key=True'
"yield string ""#   * Rearrange models' order"" as the result.",yield string var0 as result.,yield '#   * Rearrange models' order',yield '#   * Rearrange models' order'
"yield string ""#   * Remove `managed = False` lines if you wish to allow Django to create, modify, and delete the table"" as the result.",yield string var0 as result.,"yield '#   * Remove `managed = False` lines if you wish to allow Django to create, modify, and delete the table'","yield '#   * Remove `managed = False` lines if you wish to allow Django to create, modify, and delete the table'"
"yield string ""# Also note: You'll have to insert the output of 'django-admin.py sqlcustom [app_label]'"" as the result.",yield string var0 as result.,yield '# Also note: You'll have to insert the output of 'django-admin.py sqlcustom [app_label]'',yield '# Also note: You'll have to insert the output of 'django-admin.py sqlcustom [var1]''
"yield string ""# Feel free to rename the models, but don't rename db_table values or field names."" as the result.",yield string var0 as result.,"yield '# Feel free to rename the models, but don't rename db_table values or field names.'","yield '# Feel free to rename the models, but don't rename db_table values or field names.'"
"yield string ""# into your database."" as the result.",yield string var0 as result.,yield '# into your database.',yield '# into your database.'
"yield string ""# This is an auto-generated Django model module."" as the result.",yield string var0 as result.,yield '# This is an auto-generated Django model module.',yield '# This is an auto-generated Django model module.'
"yield string ""# You'll have to do the following manually to clean this up:"" as the result.",yield string var0 as result.,yield '# You'll have to do the following manually to clean this up:',yield '# You'll have to do the following manually to clean this up:'
"yield string ""#"" as the result.",yield string var0 as result.,yield '#',yield '#'
"yield string ""from __future__ import unicode_literals"" as the result.",yield string var0 as result.,yield 'from __future__ import unicode_literals',yield 'from __future__ import unicode_literals'
yield a tuple with 2 elements: an empty string and self.field.empty_label.,yield tuple with 2 elements: empty string and self.field var1 ,"yield ( '' , self . field . empty_label )","yield '' , self . field . var1"
yield a tuple with 2 elements: tok.name and toktext.,yield tuple with 2 elements: var0 and var1 ,"yield ( tok . name , toktext )","yield var0 , var1"
"join self into a bytes string, yield the result as the return value of the generator.","join self into bytes string, yield result as return value of generator.",yield b'' . join ( self ),yield b'' . join ( self )
"call the function base.DeserializedObject with obj and m2m_data as arguments, yield the result as the generator return value.","call function base var0 with var1 and var2 as arguments, yield result as generator return value.","yield base . DeserializedObject ( obj , m2m_data )","yield base . var0 ( var1 , var2 )"
"call the method bit.group with an argument integer 0, yield the result.","call method var0 with argument integer 0, yield result.",yield bit . group ( 0 ),yield var0 ( 0 )
yield buf as return value of the generator.,yield var0 as return value of generator.,yield buf,yield var0
"and fileobj set to buf.   read data from buf file stream, yield the result.","and var0 set to var1 read data from var1 file stream, yield result.",yield buf . read ( ),yield var1 . read ( )
"read data from buf, yield the result.",read data from var0 yield result.,yield buf . read ( ),yield var0 . read ( )
yield one element from the buffer_ iterable.,yield one element from var0 var1 ,yield buffer_,yield var0
yield ch and boolean False.,yield var0 and boolean var1 ,"yield ch , False","yield var0 , var1"
yield choice.,yield choice.,yield choice,yield choice
yield d.,yield var0,yield d,yield d
yield one element of data iterable.,yield one element of data var0 ,yield data,yield data
yield emitting as result of the generator.,yield emitting as result of generator.,yield emitting,yield emitting
"yield field and ValidationError object converted to an list, created with an argument errors.","yield field and var0 object converted to list, created with argument errors.","yield field , list ( ValidationError ( errors ) )","yield field , list ( var0 ( errors ) )"
"call the force_text with an argument message, yield the result.","call var0 with argument message, yield result.",yield force_text ( message ),yield var0 ( message )
"call the function import_module with an argument string '%s.formats' formated with location, which is formated with loc,",call function var0 with argument string var2 formated with location var4 is formated with var3 ,yield import_module ( '%s.formats' % ( location % loc ) ),yield var0 ( var2 % ( location % var3 ) )
yield item.,yield item.,yield item,yield item
yield k.,yield var0,yield k,yield k
yield key.,yield key.,yield key,yield key
yield key and value under key key of self dictionary.,yield key and value under key key of self dict.,"yield key , self [ key ]","yield key , self [ key ]"
yield key and value under the key key of self dictionary.,yield key and value under key key of self dict.,"yield key , self [ key ]","yield key , self [ key ]"
yield one element of line iterable.,yield one element of line var0 ,yield line,yield line
yield line.,yield line.,yield line,yield line
yield meta_line as the result.,yield var0 as result.,yield meta_line,yield var0
yield node.,yield node.,yield node,yield node
yield node as an return value of a generator.,yield node as return value of generator.,yield node,yield node
"yield obj, as an return value of the generator.",yield var0 as return value of generator.,yield obj,yield var0
"yield obj as generator return value,","yield var0 as generator return value,",yield obj,yield var0
"with 2 arguments: stream and Loader set to SafeLoader, and unpacked dictionary options,   yield one element of the itterable obj.",with 2 arguments: stream and var0 set to var1 and unpacked dict options var3 yield one element of var4 var5 ,yield obj,yield var5
"call the function parse_boundary_stream with 2 arguments: sub_stream and integer 1024, yield the result as the return value of the generator.","call function var0 with 2 arguments: var1 and integer 1024, yield result as return value of generator.","yield parse_boundary_stream ( sub_stream , 1024 )","yield var0 ( var1 , 1024 )"
yield representative and boolean True.,yield representative and boolean var0 ,"yield representative , True","yield representative , var0"
"call the function safe_join with 2 arguments template_dir and template_name, yield the result.",call function var0 with 2 arguments var1 and var2 yield result.,"yield safe_join ( template_dir , template_name )","yield var0 ( var1 , var2 )"
yield self.,yield self.,yield self,yield self
"call the method self.choice with an argument obj, yield the result.",call method var0 with argument var1 yield result.,yield self . choice ( obj ),yield var0 ( var1 )
read the whole self file and yield it as a generator return value.,read whole self file and yield it as generator return value.,yield self . read ( ),yield self . read ( )
yield value under key key of self dictionary.,yield value under key key of self dict.,yield self [ key ],yield self [ key ]
"get the value under the name key of the self dictionary, yield it as the return value of the generator.","get value under name key of self dict, yield it as return value of generator.",yield self [ name ],yield self [ name ]
yield subnode.,yield var0 ,yield subnode,yield var0
"for every subwidget in the result,   yield subwidget, as the result of the generator.",for every var0 in result var2 yield var0 as result of generator.,yield subwidget,yield var0
"yield an instance of SubWidget class created with 5 arguments: self, name, value, attrs and choices.","yield instance of var0 class created with 5 arguments: self, name, value var1 and choices.","yield SubWidget ( self , name , value , attrs , choices )","yield var0 ( self , name , value , var1 , choices )"
yield v.,yield var0,yield v,yield v
yield widget.,yield widget.,yield widget,yield widget
"Convert the variable x to a hexadecimal and append it to the variable z followed by ','",Convert variable x to hexadecimal and append it to variable z followed by var0,"z += '%02x, ' % x","z += '%02x, ' % x"
"Convert the variable x to a hexadecimal, append the string ',' to it, the add it to the variable z","Convert variable x to hexadecimal, append string var0 to it, add it to variable z","z += '%02x, ' % x","z += '%02x, ' % x"
"Convert the variable x to a hexadecimal, append the string ',' to it, the append it to the variable z","Convert variable x to hexadecimal, append string var0 to it, append it to variable z","z += '%02x, ' % x","z += '%02x, ' % x"
"append the string ""a"" and string ""b"" to z",append string var0 and string var1 to z,z += 'a' + 'b',z += 'a' + 'b'
slice the variable x at index 2 and add the value to the variable z,slice variable x at index 2 and add value to variable z,z += x [ 2 : ],z += x [ 2 : ]
z is the sum of x and y modulo 64,z is sum of x and y var0 64,z = ( x + y ) % 64,z = ( x + y ) % 64
assign the variable z the value of new left shift with the variable shift,assign variable z value of new left shift with variable shift,z = new << shift,z = new << shift
set variable z to the 1st command-line argument,set variable z to 1st command-line argument,z = sys . argv [ 1 ],z = sys . argv [ 1 ]
set variable z to the 5th command-line argument,set variable z to 5th command-line argument,z = sys . argv [ 5 ],z = sys . argv [ 5 ]
set variable z to the 99th command-line argument,set variable z to var0 command-line argument,z = sys . argv [ 99 ],z = sys . argv [ 99 ]
z is z shifted left by shift,z is z shifted left by shift,z = z << shift,z = z << shift
"get_current_timezone', 'get_current_timezone_name', 'activate', 'deactivate', 'override', 'localtime', 'now', 'is_aware',   'is_naive', 'make_aware' and 'make_naive'.   call the function timedelta with an argument integer 0, substitute the result for ZERO.","get_current_timezonevar1get_current_timezone_namevar1activatevar1deactivatevar1overridevar1localtimevar1nowvar1is_awarevar14is_naivevar1make_awarevar21make_naive' var15 call function var24 with argument integer 0, substitute result for var25 ",ZERO = timedelta ( 0 ),var25 = var24 ( 0 )
call the method zfile.close.,call method var0 ,zfile . close ( ),var0 ( )
close zfile stream.,close var0 stream.,zfile . close ( ),var0 . close ( )
flush zfile stream buffer.,flush var0 stream buffer.,zfile . flush ( ),var0 . flush ( )
write item to zfile stream.,write item to var0 stream.,zfile . write ( item ),var0 . write ( item )
and fileobj set to zbuf.   call the method zfile.write with an argument s.,and var0 set to var1 call method var3 with argument var4,zfile . write ( s ),var3 ( s )
"zfile is an instance of GzipFile class, created with 3 arguments: mode set to string 'wb', compresslevel set to integer 6,","var0 is instance of var1 class, created with 3 arguments: mode set to string var3 var4 set to integer 6,","zfile = GzipFile ( mode = 'wb' , compresslevel = 6 , fileobj = buf )","var0 = var1 ( mode = var3 , var4 = 6 , fileobj = buf )"
"zfile is an instance of GzipFile class, created with 3 arguments: mode set to string 'wb', compresslevel set to integer 6,","var0 is instance of var1 class, created with 3 arguments: mode set to string var3 var4 set to integer 6,","zfile = GzipFile ( mode = 'wb' , compresslevel = 6 , fileobj = zbuf )","var0 = var1 ( mode = var3 , var4 = 6 , fileobj = zbuf )"
"call the method zipfile.ZipFile.__init___ with the arguments self, unpacked list args and unpacked dictionary kwargs.","call method var0 var1 __init___ with arguments self, unpacked list var3 and unpacked dict var4 ","zipfile . ZipFile . __init__ ( self , * args , ** kwargs )","var0 . var1 . __init__ ( self , * var3 , ** var4 )"
