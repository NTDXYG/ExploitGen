raw_nl,temp_nl,raw_code,temp_code
convert to hexadecimal a random integer between 1 and 100 and append it to the string a,convert to hexadecimal random integer between 1 and 100 and append it to string a,"a += '\\x%02x' % random . randint ( 1 , 100 )","a += '\\x%02x' % random . randint ( 1 , 100 )"
append string '0x' to a,append string var0 to a,a += '0x',a += var0
increment a by 1,increment by 1,a += 1,a += 1
cast a to int16,cast to var0,"a = int ( hopcode , 16 )","a = int ( hopcode , 16 )"
ba1 is a bytearrary of ba1,var0 is var2 of ba1,ba1 = bytearray ( ba1 ),var0 = bytearray ( var0 )
"call the import_string with argument backend, substitute it for backend_cls.",call var0 with argument var1 substitute it for var2 ,backend_cls = import_string ( backend ),var2 = var0 ( var1 )
bad_app_labels is an empty set.,bad_app_labels is empty set.,bad_app_labels = set ( ),bad_app_labels = set ( )
break loop execution.,break loop execution.,break,break
break from the loop execution.,break from loop execution.,break,break
breaks from the smallest enclosing loop.,breaks from smallest enclosing loop.,break,break
skip this loop iteration.,skip var0 loop iteration.,break,break
break from the loop execution,break from loop execution,break,break
"read one line from self file stream, substitute the result for buf.","read one line from self file stream, substitute result for var0 ",buf = self . readline ( ),var0 = self . readline ( )
buf is an instance of StreamingBuffer class.,var0 is instance of var1 class.,buf = StreamingBuffer ( ),var0 = var1 ( )
substitute line for buffer_.,substitute line for var0 ,buffer_ = line,var0 = line
"builtins is an dictionary with 3 initial entries: boolean True for 'True', boolean False for 'False' and None for 'None'.","var0 is dict with 3 initial entries: boolean True for var1, boolean False for var4 and None for var7.","builtins = { 'True' : True , 'False' : False , 'None' : None }","var0 = { var1 : True , 'False' : False , 'None' : None }"
"call te method operator.itemgetter with an argument integer 0, substitute the result for byte2int.","call te method var0 with argument integer 0, substitute result for var1 ",byte2int = operator . itemgetter ( 0 ),var1 = var0 ( 0 )
"convert bytes to floating point number, substitute it for bytes.","convert bytes to floating point number, substitute it for bytes.",bytes = float ( bytes ),bytes = float ( bytes )
c is the sum of a and b modulo 100,c is sum of and b var0 100,c = ( a + b ) % 100,c = ( a + b ) % 100
"call the self._read_limiter with length of self.buffer subtracted from size as argument, store the result into chunk.","call var0 with length of var1 subtracted from size as argument, store result into chunk.",chunk = self . _read_limited ( size - len ( self . buffer ) ),chunk = self . _read_limited ( size - len ( var1 ) )
"call the method stream.read with an argument max_header_size, substitute the result for chunk.",call method var0 with argument var1 substitute result for chunk.,chunk = stream . read ( max_header_size ),chunk = var0 ( var1 )
substitute length of chunk for chunk_length.,substitute length of chunk for var0 ,chunk_length = len ( chunk ),var0 = len ( chunk )
double the chunk size.,double chunk size.,chunk_size *= 2,chunk_size *= 2
"call the function get_quantifier with 2 arguments: ch and pattern_iter, substitute the result for count and ch, respectively.",call function var0 with 2 arguments: var1 and var3 substitute result for count and var1 respectively.,"count , ch = get_quantifier ( ch , pattern_iter )","count , var1 = var0 ( var1 , var3 )"
"call the itertools.count function with argument integer 1, substitute the result for count.","call var0 function with argument integer 1, substitute result for count.",count = itertools . count ( 1 ),count = var0 ( 1 )
"multiply seconds by count, subtract it from since, divide the result by seconds2, store the floored result in count2.","multiply seconds by count, subtract it from var0 divide result by var1 store floored result in var2 ",count2 = ( since - ( seconds * count ) ) // seconds2,var2 = ( var0 - seconds * count ) // var1
define a variable named counter and assign 0 to it,define variable named counter and assign 0 to it,counter = 0,counter = 0
add the string value '0x' to the variable d,add string value var0 to variable d,d += '0x',d += var0
"append e to debugs list for every e in all_issues, if e.level is lesser than checks.INFO and result of the method e.is_silenced in false.",append e to debugs list for every e in var0 if var2 is lesser var3 checks var4 and result of method e var6 in false.,debugs = [ e for e in all_issues if e . level < checks . INFO and not e . is_silenced ( ) ],debugs = [ e for e in var0 if var2 < checks . var4 and not e . var6 ( ) ]
substitute first decimal_pos elements of dec_part for dec_part.,substitute first var0 elements of var1 for var1 ,dec_part = dec_part [ : decimal_pos ],var1 = var1 [ : var0 ]
update declared_fields dictionary with entry base.declared_fields.,update var0 dict with entry base var0 ,declared_fields . update ( base . declared_fields ),var0 . update ( base . var0 )
declared_fields is an instance of OrderedDict class.,var0 is instance of var1 class.,declared_fields = OrderedDict ( ),var0 = var1 ( )
"call the function curry with 2 arguments: _proxy_method and method set to bytes.decode, substitute the result for decode.",call function curry with 2 arguments: var0 and method set to var1 substitute result for decode.,"decode = curry ( _proxy_method , method = bytes . decode )","decode = curry ( var0 , method = var1 )"
"s and max_age set to max_age, use it as an argument for the force_bytes function, substitute the result for base64d.   decompress is boolean False.","s and var0 set to var0 use it as argument for var4 function, substitute result for var6 decompress is boolean var8 ",decompress = False,decompress = var8
"called with with an argument lambda function which returns result of the force_text function called with an argument text.   define the method add_truncation_text with 3 arguments: self, text and truncate set to None.","called with with argument lambda function var0 returns result of var1 function called with argument text var3 define method var4 with 3 arguments: self, text and truncate set to var6 ","def add_truncation_text ( self , text , truncate = None ) : ","def var4 ( self , text , truncate = var6 ) : "
"define a method named add with the parameters a, b and c. C has a default value of 3","define method named add with parameters a, b and var0 C has default value of 3","def add ( a , b , c = 3 ) : ","def add ( a , b , c = 3 ) : "
define the function find_template_loader with an argument loader.,define function var0 with argument loader.,def find_template_loader ( loader ) : ,def var0 ( loader ) : 
define the function first with an argument value.,define function first with argument value.,def first ( value ) : ,def first ( value ) : 
"define a method named func with the parameters n,x, and y. Y has a default value of 1","define method named var0 with parameters n,x, and var1 Y has default value of 1","def func ( n , x , y = 1 ) : ","def var0 ( n , x , y = 1 ) : "
define the function mark_safe with an argument s.,define function var0 with argument var1,def mark_safe ( s ) : ,def var0 ( s ) : 
define the function media with an argument request.,define function media with argument request.,def media ( request ) : ,def media ( request ) : 
"define the function rmtree_errorhandler with 3 arguments func, path and exc_info.",define function var1 with 3 arguments var0 path and var2 ,"def rmtree_errorhandler ( func , path , exc_info ) : ","def var1 ( var0 , path , var2 ) : "
define the method root_attributes with an argument self.,define method var0 with argument self.,def root_attributes ( self ) : ,def var0 ( self ) : 
define a method named routine that takes in n as a parameter,define method named routine var0 takes in n as parameter,def routine ( n ) : ,def routine ( n ) : 
define the method rss_attributes with an argument self.,define method var0 with argument self.,def rss_attributes ( self ) : ,def var0 ( self ) : 
else if name is equal to the string 'abcd',else if name is equal to string var0,elif name == 'abcd':,elif name == var0:
"otherwise if fourth element of version does not equals to 'final',","otherwise if fourth element of version does not equals to var0,",elif version [ 3 ] != 'final' :,elif version [3]!= var0:
"if not,","if not,",else :,else:
"to the function timedelta called with an argument seconds as negative time.altzone, return the result.   if not,","to function var0 called with argument seconds as negative var1 return result var2 if not,",else :,else:
elt is an list with an element elt.,var0 is list with element var0 ,elt = [ elt ],var0 = [ var0 ]
"EMPTY_VALUES is a tuple containing 5 initial elements: None, empty string, empty list, empty tuple and an empty dictionary.","EMPTY_VALUES is tuple containing 5 initial elements: var0 empty string, empty list, empty tuple and empty dict.","EMPTY_VALUES = ( None , '' , [ ] , ( ) , { } )","EMPTY_VALUES = var0 , '' , [ ] , ( ) , { }"
"put elements of validators.EMPTY_VALUES to a list, substitute the result for empty_values.","put elements of var0 var1 to list, substitute result for var2 ",empty_values = list ( validators . EMPTY_VALUES ),var2 = list ( var0 . var1 )
"call the function curry with 2 arguments: _proxy_method and method set to six.text_type.encode, substitute the result for encode.","call function curry with 2 arguments: var0 and method set to six var2 encode, substitute result for encode.","encode = curry ( _proxy_method , method = six . text_type . encode )","encode = curry ( var0 , method = six . var2 . encode )"
"encode is an lambda function with arguments k and v, return value is string '%s=%s', where '%s' is replaced with:","encode is lambda function with arguments k and v, return value is string var0 var1 var2 is replaced with:","encode = lambda k , v : '%s=%s' % ( ( quote ( k , safe ) , quote ( v , safe ) ) )","encode = lambda k , v : var0 % ( quote ( k , safe ) , quote ( v , safe ) )"
"add the string value ',' to the variable encoded",add string value var0 to variable encoded,"encoded += ', '","encoded += ', '"
add the string value '\\y' to the variable encoded,add string value var0 to variable encoded,encoded += '\\y',encoded += '\\y'
"Convert the value of j to a hexadecimal then add it to the variable encoded followed by the string ', '",Convert value of j to hexadecimal then add it to variable encoded followed by string var0,"encoded += '%02x, ' % j","encoded += '%02x, ' % j"
"Convert the value of y bitwise and 0xff to a hexadecimal then add it to the variable encoded followed by the string ','",Convert value of y var0 and var1 to hexadecimal then add it to variable encoded followed by string var2,"encoded += '%02x, ' % ( y & 0xff )","encoded += '%02x, ' % ( y & var1 )"
"Convert the value of x to a hexadecimal then add it to the variable encoded followed by the string ', '",Convert value of x to hexadecimal then add it to variable encoded followed by string var0,"encoded += '%02x, ' % x","encoded += '%02x, ' % x"
"Convert the variable x to a hexadecimal. Concatenate the result with the string ',' add the result to the variable encoded",Convert variable x to hexadecimal var0 result with string var1 add result to variable encoded,"encoded += '%02x, ' % x","encoded += '%02x, ' % x"
"convert the value x to hex, concatenate the result with ',' and append it to the string encoded","convert value x to hex, concatenate result with var0 and append it to string encoded","encoded += '%02x, ' % x","encoded += '%02x, ' % x"
"convert (7 -(256 - x)) to hexadecimal, concatenate the result with the string ',' and append it to the string encoded","convert (7 -(256 - x)) to hexadecimal, concatenate result with string var0 and append it to string encoded","encoded += '%02x, ' % ( 7 - ( 256 - x ) )","encoded += '%02x, ' % ( 7 - ( 256 - x ) )"
"Convert the value of h bitwise and 0xff to a hexadecimal, concatenate the result with the string ',' and then add it to the variable encoded","Convert value of h var0 and var1 to hexadecimal, concatenate result with string var2 and then add it to variable encoded","encoded += '%02x, ' % ( h & 0xff )","encoded += '%02x, ' % ( h & var1 )"
"convert (x+7) to hexadecimal, concatenate the result with the string ',' and append it to the string encoded","convert (x+7) to hexadecimal, concatenate result with string var0 and append it to string encoded","encoded += '%02x, ' % ( x + 7 )","encoded += '%02x, ' % ( x + 7 )"
"Convert the value of y to a hexadecimal, concatenate the result with the string ',' and then add it to the variable encoded","Convert value of y to hexadecimal, concatenate result with string var0 and then add it to variable encoded","encoded += '%02x, ' % y","encoded += '%02x, ' % y"
convert the value x to hex and append it to the string encoded,convert value x to hex and append it to string encoded,encoded += '%02x' % x,encoded += '%02x' % x
concatenate the string '0x' with the hexadecimal conversion of 0xAA and append the result to the string encoded,concatenate string var0 with hexadecimal conversion of var1 and append result to string encoded,"encoded += '0x%02x, ' % 0xAA","encoded += '0x%02x, ' % var1"
concatenate the string '0x' with the hexadecimal conversion of rand and append the result to the string encoded,concatenate string var0 with hexadecimal conversion of rand and append result to string encoded,"encoded += '0x%02x, ' % rand","encoded += '0x%02x, ' % rand"
set encoded to the string '0x',set encoded to string var0,encoded = '0x',encoded = var0
"encoded is the concatenation of the string ""0x"" with the hexadecimal conversion of the lenght of the array of bytes of shellcode",encoded is concatenation of string var0 with hexadecimal conversion of var1 of array of bytes of var2,"encoded = '0x%02x, ' % len ( bytearray ( shellcode ) )","encoded = '0x%02x, ' % len ( bytearray ( var2 ) )"
convert the value z to hex and append it to the string encoded1,convert value z to hex and append it to string var0,encoded1 += '%02x' % z,var0 += '%02x' % z
"Convert the value of leader to hexadecimal, then slice it at the index of 2 and add its value to the variable encoded3","Convert value of leader to hexadecimal, then slice it at index of 2 and add its value to variable var0",encoded3 += hex ( leader ) [ 2 : ],var0 += hex ( leader ) [ 2 : ]
call the method Encoders.encode_base64 with an argument attachment.,call method var0 var2 with argument attachment.,Encoders . encode_base64 ( attachment ),var0 . var2 ( attachment )
substitute string 'ascii' for encoding.,substitute string var0 for encoding.,encoding = 'ascii',encoding = var0
if encoding does not exists substitute it for settings.DEFAULT_CHARSET.,if encoding does not exists substitute it for settings var0 ,encoding = encoding or settings . DEFAULT_CHARSET,encoding = encoding or settings . var0
"substitute elements of tuple boundary to end and next, respectively.","substitute elements of tuple boundary to end and next, respectively.","end , next = boundary","end , next = boundary"
"es is a bytearrary of the byte string ""\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x87\xe3\xb0\x0b\xcd\x80""",es is var0 of byte string var1,es = bytearray ( b'\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x87\xe3\xb0\x0b\xcd\x80' ),es = bytearray ( b'\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x87\xe3\xb0\x0b\xcd\x80' )
"if ZeroDivisionError exception is caught,","if var0 exception is caught,",except ZeroDivisionError :,except var0:
"if zlib.error as e exception is raised,","if var0 as e exception is raised,",except zlib . error as e :,except var0 as e:
except,except,except:,except:
executor is an instance of the class MigrationExecutor created with an argument: value under the DEFAULT_DB_ALIAS key of the connections dictionary.,executor is instance of class var0 created with argument: value under var1 key of connections dict.,executor = MigrationExecutor ( connections [ DEFAULT_DB_ALIAS ] ),executor = var0 ( connections [ var1 ] )
"substitute them for app_label and migration_name, respectively.   executor is an instance of MigrationExecutor, created with value under the DEFAULT_DB_ALIAS key of the connections dictionary.",substitute var0 for var1 and var3 respectively var5 executor is instance of var6 created with value under var7 key of connections dict.,executor = MigrationExecutor ( connections [ DEFAULT_DB_ALIAS ] ),executor = var6 ( connections [ var7 ] )
call the function exhaust with an argument field_stream.,call function exhaust with argument var0 ,exhaust ( field_stream ),exhaust ( var0 )
call the function exhaust with an argument self._input_data.,call function exhaust with argument var0 ,exhaust ( self . _input_data ),exhaust ( var0 )
"call the function os.spawnve with os.P_WAIT, sys.executable, args and new_environ as arguments, substitute the result for exit_code.","call function var0 with os var1 var2 var3 and var4 as arguments, substitute result for var6 ","exit_code = os . spawnve ( os . P_WAIT , sys . executable , args , new_environ )","var6 = var0 ( os . var1 , var2 , var3 , var4 )"
"call the function restart_with_reloader, substitute the return value for exit_code.",call function var0 substitute return value for var1 ,exit_code = restart_with_reloader ( ),var1 = var0 ( )
terminate the program with exit code 4,terminate program with exit code 4,exit ( 4 ),exit ( 4 )
terminate the program with exit code 5,terminate program with exit code 5,exit ( 5 ),exit ( 5 )
"on the object under the db key of connections dictionary call the method ops.value_to_db_datetime with argument exp, substitute the result for the exp.",on object under db key of connections dict call method ops var1 with argument var2 substitute result for var2 ,exp = connections [ db ] . ops . value_to_db_datetime ( exp ),var2 = connections [ db ] . ops . var1 ( var2 )
"call the function datetime.fromtimestamp with argument timeout, substitute it for exp.",call function var0 with argument var1 substitute it for var2 ,exp = datetime . fromtimestamp ( timeout ),var2 = var0 ( var1 )
"call the method test_runner.run_tests with an argument test_labels, substitute it for failures.",call method var0 var2 with argument var3 substitute it for failures.,failures = test_runner . run_tests ( test_labels ),failures = var0 . var2 ( var3 )
"FASTCGI_OPTIONS is a dictionary containing 16 initial entries: 'fcgi' for 'protocol', None for 'host', None for 'port',","FASTCGI_OPTIONS is dict containing 16 initial entries: var0 for var1 var2 for var4 var2 for var5,","FASTCGI_OPTIONS = { 'protocol' : 'fcgi' , 'host' : None , 'port' : None , 'socket' : None , 'method' : 'fork' , 'daemonize' : None , 'workdir' : '/' , 'pidfile' : None , 'maxspare' : 5 , 'minspare' : 2 , 'maxchildren' : 50 , 'maxrequests' : 0 , 'debug' : None , 'outlog' : None , 'errlog' : None , 'umask' : None , }","FASTCGI_OPTIONS = { 'protocol' : var0 , 'host' : var2 , 'port' : var2 , 'socket' : var2 , 'method' : 'fork' , 'daemonize' : var2 , 'workdir' : '/' , 'pidfile' : var2 , 'maxspare' : 5 , 'minspare' : 2 , 'maxchildren' : 50 , 'maxrequests' : 0 , 'debug' : var2 , 'outlog' : var2 , 'errlog' : var2 , 'umask' : var2 }"
"dir set to None as the arguments.   call the method tmpfile.mkstemp with suffix set to suffix, prefix set to prefix and dir set to dir, store the result in the fd and name, respective.","var0 set to var3 as arguments var4 call method var5 with suffix set to suffix, prefix set to prefix and var0 set to var0 store result in var6 and name, respective.","fd , name = tempfile . mkstemp ( suffix = suffix , prefix = prefix , dir = dir )","var6 , name = tempfile . mkstemp ( suffix = suffix , prefix = prefix , var0 = var0 )"
"join base an unpacked list paths into a string, get the absolute path in unicode representation of the result, substitute the result for final_path.","join base unpacked list paths into string, get absolute path in var0 representation of result, substitute result for var1 ","final_path = abspathu ( join ( base , * paths ) )","var1 = abspathu ( join ( base , * paths ) )"
"finally perform,","finally perform,",finally :,finally:
"call the method smart_split_re.finditer with an argument text, for every bit in result,","call method var0 finditer with argument text, for every bit in result,",for bit in smart_split_re . finditer ( text ) : ,for bit in var0 . finditer ( text ) : 
"split tag_re by self.template_string separator, for every bit in result,","split var0 by self var2 separator, for every bit in result,",for bit in tag_re . split ( self . template_string ) : ,for bit in var0 . split ( self . var2 ) : 
iterate over bytes in array,iterate over bytes in array,for byte in array : ,for byte in array : 
iterate bytes in list lst,iterate bytes in list var0,for byte in lst : ,for byte in var0 : 
iterate byte in the list lst1,iterate byte in list var0,for byte in lst1 : ,for byte in var0 : 
iterate byte in lst2,iterate byte in var0,for byte in lst2 : ,for byte in var0 : 
iterate over bytes in lst3,iterate over bytes in var0,for byte in lst3_,for byte in var0_
"for every bytes in stream,","for every bytes in stream,",for bytes in stream : ,for bytes in stream : 
"for every c in lineno_comment_map dictionary value under the comment_lineno_cache key,","for every c in var0 dict value under var1 key,",for c in lineno_comment_map [ comment_lineno_cache ] : ,for c in var0 [ var1 ] : 
"for every ch and escaped in input_iter,",for every var0 and escaped in var1 ,"for ch , escaped in input_iter : ","for var0 , escaped in var1 : "
"for every ch in input_iter,",for every var0 in var1 ,for ch in input_iter : ,for var0 in var1 : 
"for every char in fmt,",for every char in var0 ,for char in fmt : ,for char in var0 : 
iterate char over str,iterate char over var0,for char in str : ,for char in var0 : 
"for every i and widget in enumerated iterable self.widgets,",for every i and widget in enumerated var0 var1 ,"for i , widget in enumerate ( self . widgets ) : ","for i , widget in enumerate ( var1 ) : "
"for every i and word in enumerated iterable words,","for every i and word in enumerated var0 words,","for i , word in enumerate ( words ) : ","for i , word in enumerate ( words ) : "
loop through sc3 converted into a bytearray,loop through var0 converted into var1,for i in bytearray ( sc3 ) : ,for i in var1 ( var0 ) : 
Make a for loop for each i in the bytearray of sc4,Make for loop for each i in var0 of var1,for i in bytearray ( sc4 ) : ,for i in var0 ( var1 ) : 
declare a for loop with an iterator i for each element in sh starting from index 4 converted into a bytearray,declare for loop with var0 i for each element in var1 starting from index 4 converted into var2,for i in bytearray ( sh ) [ 4 : ] : ,for i in var2 ( var1 ) [ 4 : ] : 
iterate i in lst,iterate i in var0,for i in lst : ,for i in var0 : 
iterate i over 200 random numbers between 1 and 256,iterate i over 200 random numbers between 1 and 256,"for i in random . sample ( range ( 1 , 256 ) , 200 ) : ","for i in random . sample ( range ( 1 , 256 ) , 200 ) : "
"for every i in range of integers from integer 0 to the length of pieces decremented by one, with step of integer 3,","for every i in range of integers from integer 0 to length of pieces var0 by one, with step of integer 3,","for i in range ( 0 , len ( pieces ) - 1 , 3 ) : ","for i in range ( 0 , len ( pieces ) - 1 , 3 ) : "
"call the method self.total_form_count, for every i in sequence of integers, from 0 to the previous result,","call method self var1 for every i in sequence of integers, from 0 to previous result,","for i in range ( 0 , self . total_form_count ( ) ) : ","for i in range ( 0 , self . var1 ( ) ) : "
"for every i in range of integers from 0 to length of result, not included,","for every i in range of integers from 0 to length of result, not included,",for i in range ( len ( result ) ) : ,for i in range ( len ( result ) ) : 
iterate i over a sequence of number from 0 to 5,iterate i over sequence of number from 0 to 5,"for i in range ( 0 , 5 ) : ","for i in range ( 0 , 5 ) : "
initialize a for loop with an iterator i with a range starting from 0 until the length of shellcode_original with a step of 8,initialize for loop with var0 i with range starting from 0 var1 length of var2 with step of 8,"for i in range ( 0 , len ( shellcode_original ) , 8 ) : ","for i in range ( 0 , len ( var2 ) , 8 ) : "
initialize a for loop with an iterator i with a range starting from 0 until the value of stop,initialize for loop with var0 i with range starting from 0 var1 value of stop,"for i in range ( 0 , stop ) : ","for i in range ( 0 , stop ) : "
loop over shellcode,loop over var0,for i in shellcode : ,for i in var0 : 
"zip elements of inner_result and inner_args into a list of tuples, for every i_item and i_args in the result,","zip elements of var0 and var1 into list of var3 for every var4 and var6 in result,","for i_item , i_args in zip ( inner_result , inner_args ) : ","for var4 , var6 in zip ( var0 , var1 ) : "
"for every index in range of integers from 0 to length of hextets, not included,","for every index in range of integers from 0 to length of var0 not included,",for index in range ( len ( hextets ) ) : ,for index in range ( len ( var0 ) ) : 
"for every j in range of integers from 0 to iterations converted to an integer,","for every j in range of integers from 0 to iterations converted to integer,",for j in xrange ( int ( iterations ) ) : ,for j in xrange ( int ( iterations ) ) : 
"for every x in argset,",for every x in var0 ,for x in argset : ,for x in var0 : 
Make a for loop for each x in the bytearray of sh1,Make for loop for each x in var0 of var1,for x in bytearray ( sh1 ) : ,for x in var0 ( var1 ) : 
loop through sh2 converted into a bytearray,loop through var0 converted into var1,for x in bytearray ( sh2 ) : ,for x in var1 ( var0 ) : 
loop x over the bytearray of the string sh3,loop x over var0 of string var1,for x in bytearray ( sh3 ) : ,for x in var0 ( var1 ) : 
"for every x is the range of integers from level to the integer 2, in the reversed order,","for every x is range of integers from level to integer 2, in reversed order,","for x in range ( level , 1 , - 1 ) : ","for x in range ( level , 1 , - 1 ) : "
substitute force_bytes for force_str.,substitute var0 for var1 ,force_str = force_bytes,var1 = var0
"get the value under the 'format' key of the options dictionary, substitute the result for format.","get value under var0 key of options dict, substitute result for format.",format = options . get ( 'format' ),format = options . get ( var0 )
"append encoded_instruction_in_hex and string "","" to the variable format_0x",append var0 and string var2 to variable var3,"format_0x += encoded_instruction_in_hex + ', '","var3 += var0 + ', '"
initialize format_0x to an empty string,initialize var0 to empty string,format_0x = '',var0 = ''
format key is an empty string.,format key is empty string.,format_key = '',format_key = ''
"format_slash_x is an empty string """"",var0 is empty string var1,format_slash_x = '',var0 = ''
substitute second element of bits without the first and last element for format_string.,substitute second element of bits var0 first and last element for var1 ,format_string = bits [ 1 ] [ 1 : - 1 ],var1 = bits [ 1 ] [ 1 : - 1 ]
"call the function re.sub with 3 arguments: raw string ""\\.|."", escape_quotes and tok without the first and last element,","call function var0 with 3 arguments: raw string var1 var2 and var4 var5 first and last element,","guts = re . sub ( r'\\.|.' , escape_quotes , tok [ 1 : - 1 ] )","guts = var0 ( '\\\\.|.' , var2 , var4 [ 1 : - 1 ] )"
h is the sum of y and x modulo 256,h is sum of y and x var0 256,h = ( y + x ) % 256,h = ( y + x ) % 256
substitute self.handle_app for handle_app.,substitute self var1 for var1 ,handle_app = self . handle_app,var1 = self . var1
"call the function digest, substitute the filed digest_size of the result for hlen.","call function digest, substitute filed var0 of result for var1 ",hlen = digest ( ) . digest_size,var1 = digest ( ) . var0
"if return value of the self.is_secure is false and server port is not equal to string '80',   join host and server_port into a string, separated with ':', substitute the result for host.","if return value of self var1 is false and server port is not equal to string var2 var3 join host and var4 into string, separated with var6, substitute result for host.","host = '%s:%s' % ( host , server_port )","host = '%s:%s' % ( host , var4 )"
"result of the function force_text called with an argument title, and with sublist, append the string to output.   increment i by 1.","result of function var0 called with argument title, and with var1 append string to output var2 increment i by 1.",i += 1,i += 1
increment i by 1,increment i by 1,i += 1,i += 1
add 1 to the variable i,add 1 to variable i,i += 1,i += 1
i is integer 0.,i is integer 0.,i = 0,i = 0
substitute self.pointer for i.,substitute var0 for var1,i = self . pointer,i = var0
initialize i as an integer,initialize i as integer,i = 0,i = 0
I18N_MODIFIED is integer 2,var0 is integer 2,I18N_MODIFIED = 2,var0 = 2
"if character '=' is contained in x,","if character var0 is contained in x,",if '=' in x : ,if var0 in x : 
"if string ""0x1,"" is in format_0x",if string var0 is in var1,"if '0x1, ' in format_0x : ","if '0x1, ' in var1 : "
"if string 'help' is contained in options,","if string var0 is contained in options,",if 'help' in options : ,if var0 in options : 
"strings ""Please submit %d or fewer forms."", ""Please submit %d or fewer forms."" and self.max_num,   where '%d' is replaced with self.max_num, and code as a string 'too_many_forms'.   if self.validate_min is true, and length of self.deleted_forms subtracted from the return value of the method self.total_form_count,","strings var0, var0 and self var4 var8 var9 is replaced with self var4 and code as string var10 var6 if self var14 is true, and length of self var16 subtracted from return value of method self var18 ",if ( self . validate_min and self . total_form_count ( ) - len ( self . deleted_forms ) < self . min_num ) : ,if ( self . var14 and self . var18 ( ) - len ( self . var16 ) < self . min_num ) : 
check if the length of the variable a is not even,check if length of variable is not even,if ( len ( a ) % 2 ) != 0 : ,if ( len ( a ) % 2 ) != 0 : 
check if the variable r xor shellcode_original at index i is not equal to 0 and r bitwise xor shellcode_original at index i+1 does not equal 0 and r bitwise xor shellcode_original at index i+2 does not equal 0 and r bitwise xor shellcode_original at index i+3 does not equal 0,check if variable r xor var0 at index i is not equal to 0 and r var4 xor var0 at index var7 does not equal 0 and r var4 xor var0 at index var8 does not equal 0 and r var4 xor var0 at index var9 does not equal 0,if ( r ^ shellcode_original [ i ] != 0 ) and ( r ^ shellcode_original [ i + 1 ] != 0 ) and ( r ^ shellcode_original [ i + 2 ] != 0 ) and ( r ^ shellcode_original [ i + 3 ] != 0 ) : ,if ( r ^ var0 [ i ] != 0 ) and ( r ^ var0 [ i + 1 ] != 0 ) and ( r ^ var0 [ i + 2 ] != 0 ) and ( r ^ var0 [ i + 3 ] != 0 ) : 
"if response.status_code is lesser than integer 200 and grater or equal than 100, or response.status_code equals to integer 204 or 304,","if response var2 is lesser var4 integer 200 and grater or equal var4 100, or response var2 equals to integer 204 or 304,","if 100 <= response . status_code < 200 or response . status_code in ( 204 , 304 ) : ","if 100 <= response . var2 < 200 or response . var2 in ( 204 , 304 ) : "
check if variable a is less than the value of 1,check if variable is less var0 value of 1,if a < 1 : ,if a < 1 : 
"if accept_lang equals '*',","if var0 equals var2,",if accept_lang == '*' : ,if var0 == var2 : 
"if changes is true,","if changes is true,",if changes : ,if changes : 
"if cookie is an empty string,","if cookie is empty string,",if cookie == '' : ,if cookie == '' : 
"if count does not equals to integer 0,","if count does not equals to integer 0,",if count != 0 : ,if count != 0 : 
if count modulo 2 is not equal to zero,if count var0 2 is not equal to zero,if count % 2 != 0 : ,if count % 2 != 0 : 
"if count2 does not equals to integer 0,","if var0 does not equals to integer 0,",if count2 != 0 : ,if var0 != 0 : 
if counter modulo 3 is equal to 0,if counter var0 3 is equal to 0,if counter % 3 == 0 : ,if counter % 3 == 0 : 
"if not csrf_token is None.   if csrf_token is true,","if not var0 is var4 if var0 is true,",if csrf_token : ,if var0 : 
"bring integer 36 to the power of factor, if i is smaller than the result,","bring integer 36 to power of factor, if i is smaller var0 result,",if i < 36 ** factor : ,if i < 36 ** factor : 
if variable i is lower than the length of chunk,if variable i is lower var0 length of chunk,if i < len ( chunk ) : ,if i < len ( chunk ) : 
if i equals to integer 0 and,if i equals to integer 0 and,if i == 0 and not is_writable ( npath ( base_path + '.mo' ) ) : ,if i == 0 and not is_writable ( npath ( base_path + '.mo' ) ) : 
convert to integer base 16 the string shellcode encoded to hex and check if it is equal to i,convert to integer base 16 string var0 encoded to hex and check if it is equal to i,"if i == int ( shellcode . encode ( 'hex' ) , 16 ) : ","if i == int ( var0 . encode ( 'hex' ) , 16 ) : "
"if length of x is equal to integer 0,","if length of x is equal to integer 0,",if len ( x ) == 0 : ,if len ( x ) == 0 : 
"if len_values is smaller than integer 1,","if var0 is smaller var1 integer 1,",if len_values < 1 : ,if var0 < 1 : 
if the length of sys.argv is not equal to 3,if length of var0 is not equal to 3,if len ( sys . argv ) != 3 : ,if len ( var0 ) != 3 : 
if the number of  command-line arguments is lower than 10,if number of command-line arguments is lower var1 10,if len ( sys . argv ) < 10 : ,if len ( sys . argv ) < 10 : 
Check if the length of x is greater than 4,Check if length of x is greater var0 4,if len ( x ) > 4 : ,if len ( x ) > 4 : 
if the length of z is not divisable by 4,if length of z is not var0 by 4,if len ( z ) % 4 != 0 : ,if len ( z ) % 4 != 0 : 
"if level is true,","if level is true,",if level : ,if level : 
check if matched_a_byte is True,check if var0 is var2,if matched_a_byte : ,if var0 : 
"if mtime is different than the value of dictionary _mtimes under the key filename,","if var0 is different var1 value of dict var2 under key filename,",if mtime != _mtimes [ filename ] : ,if var0 != var2 [ filename ] : 
"if match is false or call to the method match.group with an argument integer 1 evaluates to boolean false,","if match is false or call to method var0 with argument integer 1 evaluates to boolean false,",if not match or not match . group ( 1 ) : ,if not match or not var0 ( 1 ) : 
check if matched_a_byte is not True,check if var0 is not var2,if not matched_a_byte : ,if not var0 : 
"if p_pattern starts with a string '^',","if var0 starts with string '^',",if p_pattern . startswith ( '^' ) : ,if var0 . startswith ( '^' ) : 
check if the variable padding does not equal 0,check if variable padding does not equal 0,if padding : ,if padding : 
"if role is contained in value under the NOCOLOR_PALETTE key of the PALETTES dictionary and definition is true,","if role is contained in value under var0 key of var1 dict and definition is true,",if role in PALETTES [ NOCOLOR_PALETTE ] and definition : ,if role in var1 [ var0 ] and definition : 
"if root is true,","if root is true,",if root : ,if root : 
"call the method router.allow_migrate with 2 arguments: self.using and obj.object.__class__, if it evaluates to true,","call method router var1 with 2 arguments: var2 and var3 if it evaluates to true,","if router . allow_migrate ( self . using , obj . object . __class__ ) : ","if router . var1 ( var2 , var3 ) : "
"if fifth and sixth elements of row are None,",if fifth and sixth elements of row are var0 ,if row [ 4 ] is None or row [ 5 ] is None : ,if row [ 4 ] is var0 or row [ 5 ] is var0 : 
"on the result call the method encode with the arguments encoding and errors, return the result.   if strings_only and boolean return value of the call to the function is_protected_type for argument s are boolean True,","on result call method encode with arguments encoding and errors, return result var0 if var1 and boolean return value of call to function var3 for argument s are boolean var5 ",if strings_only and is_protected_type ( s ) : ,if var1 and var3 ( s ) : 
check if the bytes object containing my_value packed according to the format string unsigned char is equal to the variable z,check if bytes object containing var0 packed according to format string unsigned char is equal to variable z,"if struct . pack ( 'B' , my_value ^ i ) == z : ","if struct . pack ( 'B' , var0 ^ i ) == z : "
"if sub_match is true,","if var0 is true,",if sub_match : ,if var0 : 
if total is not equivalent to 2,if total is not equivalent to 2,if total != 2 : ,if total != 2 : 
"if with_base_fields is true,","if var0 is true,",if with_base_fields : ,if var0 : 
"if words is not empty and length is smaller than or equal to integer 0,","if words is not empty and length is smaller var0 or equal to integer 0,",if words and length <= 0 : ,if words and length <= 0 : 
"if x equals to integer 0,","if x equals to integer 0,",if x == 0 : ,if x == 0 : 
check if x is equal to the element n in shellcode converted into a bytearray,check if x is equal to element n in var0 converted into var1,if x == bytearray ( shellcode ) [ n ] : ,if x == var1 ( var0 ) [ n ] : 
check if xxx is greater or equals to 0,check if xxx is greater or equals to 0,if xxx >= 0 : ,if xxx >= 0 : 
"if y, m and d are all equal to string '0',","if y, m and d are all equal to string var0,",if y == m == d == '0' : ,if y == m == d == var0 : 
if z is equal to byte,if z is equal to byte,if z == byte : ,if z == byte : 
"convert the string byte to hex, then cast the result to int16 and then check if it is equal to variable z","convert string byte to hex, then cast result to var0 and then check if it is equal to variable z","if z == int ( byte . encode ( 'hex' ) , 16 ) : ","if z == int ( byte . encode ( 'hex' ) , 16 ) : "
import module struc.,import module var0 ,import struct,import var0t
import module subprocess.,import module var0 ,import subprocess,import var0
import module sys.,import module var0 ,import sys,import var0
import module tarfile.,import module var0 ,import tarfile,import var0
import module tempfile.,import module var0 ,import tempfile,import var0
inputs is an empty list.,inputs is empty list.,inputs = [ ],inputs = [ ]
substitute complain for insert.,substitute complain for insert.,insert = complain,insert = complain
generate a random integer between 1 and 2 then convert the random number into a hexadecimal and store the value in insertByte,generate random integer between 1 and 2 then convert random number into hexadecimal and store value in var0,"insertByte = hex ( random . randint ( 1 , 2 ) )","var0 = hex ( random . randint ( 1 , 2 ) )"
and unpacked dictionary kwargs.   instance.keyOrder is an empty list.,and unpacked dict var0 instance var3 is empty list.,instance . keyOrder = [ ],instance . var3 = [ ]
substitute _itervalues for itervalues.,substitute var0 for var1 ,itervalues = _itervalues,var1 = var0
compute the sum of i and magic modulus 256 and store in the variable j,compute sum of i and magic modulus 256 and store in variable j,j = ( i + magic ) % 256,j = ( i + magic ) % 256
"bring integer 36 to the power of factor, substitute the result for j.","bring integer 36 to power of factor, substitute result for var0",j = 36 ** factor,j = 36 ** factor
"call the function escape with an argument lead, substitute the result for lead, call the function escape with an argument trail,","call function escape with argument lead, substitute result for lead, call function escape with argument trail,","lead , trail = escape ( lead ) , escape ( trail )","lead , trail = escape ( lead ) , escape ( trail )"
"sum lead and opening, substitute the result for lead.","sum lead and opening, substitute result for lead.",lead = lead + opening,lead = lead + opening
set leader to the second command-line argument after casting it to an int,set leader to second command-line argument after casting it to var0,leader = int ( sys . argv [ 2 ] ),leader = var0 ( sys . argv [ 2 ] )
substitute length of values for len_values.,substitute length of values for var0 ,len_values = len ( values ),var0 = len ( values )
print the length of array of bytes of the string var,print length of array of bytes of string var,len(bytearray(var))),len(bytearray(var)))
substitute arg converted into a integer for length.,substitute var0 converted into integer for length.,length = int ( arg ),length = int ( var0 )
"store in the variable length_format_0x the number of "","" occurences in format_0x",store in variable var0 number of var4 var5 in var2,"length_format_0x = format_0x . count ( ', ' )","var0 = var2 . count ( ', ' )"
increment level by one.,increment level by one.,level += 1,level += 1
Declare an empty bytes literal and store it in the variable lit,Declare empty bytes literal and store it in variable lit,lit = b'',lit = b''
"m2m_value is an lambda function with value as an argument, return value is the result of the method value.natural_key.","var0 is lambda function with value as argument, return value is result of method value var2 ",m2m_value = lambda value : value . natural_key ( ),var0 = lambda value : value . var2 ( )
match is boolean True.,match is boolean var0 ,match = True,match = var0
matches is boolean False.,matches is boolean var0 ,matches = False,matches = var0
"multiply delta.days with an integer 86400 add to the result delta.seconds, if the result is greater than integer 0,","multiply var0 with integer 86400 add to result var1 if result is greater var2 integer 0,","max_age = max ( 0 , delta . days * 86400 + delta . seconds )","max_age = max ( 0 , var0 * 86400 + var1 )"
intialize the variable max_bits to an integer with the value of 8,var0 variable var1 to integer with value of 8,max_bits = 8,var1 = 8
"call the mw_class function, store the result in the mw_instance.","call var0 function, store result in var1 ",mw_instance = mw_class ( ),var1 = var0 ( )
n is equal to n bitwise and masked width,n is equal to n var0 and masked width,n &= mask ( width ),n &= mask ( width )
Convert the value of y to a hexadecimal then add it to the variable n,Convert value of y to hexadecimal then add it to variable n,n += '%02x' % y,n += '%02x' % y
increase n by 1,increase n by 1,n += 1,n += 1
"get the attribute '__name__' from the getattr, if it exists substitute it for m, if not, m is None.","get attribute var0 from var1 if it exists substitute it for m, if not, m is var2 ","n = getattr ( lookup_view , '__name__' , None )","n = var1 ( lookup_view , var0 , var2 )"
"convert idx to an integer, substitute it or n.","convert var0 to integer, substitute it or var1",n = int ( idx ),n = int ( var0 )
initialize an empty string variable called name,initialize empty string variable called name,name = '',name = ''
"in the variable encoded replace all occurrences of ""\\x"" with "",0x""",in variable encoded replace all occurrences of var0 with var1,"nasm = encoded . replace ( '\\x' , ',0x' )","nasm = encoded . replace ( '\\x' , ',var2' )"
set the variable nasm to all the elements in the variable nasm starting from index 1 until the end,set variable var0 to all elements in variable var0 starting from index 1 var2 end,nasm = nasm [ 1 : ],var0 = var0 [ 1 : ]
"call the value.natural_key method, substitute the result for natural.","call value var1 method, substitute result for natural.",natural = value . natural_key ( ),natural = value . var1 ( )
"call the method obj.natural_key, substitute the result for natural_key.",call method obj var1 substitute result for var1 ,natural_key = obj . natural_key ( ),var1 = obj . var1 ( )
set the variable nbits to the second command-line argument converted to integer,set variable var0 to second command-line argument converted to integer,nbits = int ( sys . argv [ 2 ] ),var0 = int ( sys . argv [ 2 ] )
"append orig_file to string '#: ', substitute it for new.","append var0 to string var2, substitute it for new.",new = '#: ' + orig_file,new = var2 + var0
set the variable new to not i bitwise and 0xff,set variable new to not i var0 and var1,new = ~ i & 0xff,new = ~ i & var1
set new to new xor the variable xor,set new to new xor variable xor,new = new ^ xor,new = new ^ xor
set new to new shifted left by shift,set new to new shifted left by shift,new = new << shift,new = new << shift
ORDERING_FIELD_NAME is a string 'ORDER'.,var0 is string var1.,ORDERING_FIELD_NAME = 'ORDER',var0 = var1
set orig to an empty list,set var0 to empty list,orig = [ ],var0 = [ ]
call the method cls.__dict__.copy substitute the result for orig_vars.,call method var0 substitute result for var1 ,orig_vars = cls . __dict__ . copy ( ),var1 = var0 ( )
append i to the variable orig,append i to variable var0,orig . append ( i ),var0 . append ( i )
"join tmpdir and sting 'original' into a file path name, substitute it for original_path.","join var0 and sting var1 into file path name, substitute it for var2 ","original_path = os . path . join ( tmpdir , 'original' )","var2 = os . path . join ( var0 , var1 )"
"convert the value x to a hexadecimal and append it to the string original_shellcode followed by the string ','",convert value x to hexadecimal and append it to string var0 followed by string var2,"original_shellcode += '%02x, ' % x","var0 += '%02x, ' % x"
close the process with an argument 0.,close process with argument 0.,os . _exit ( 0 ),os . _exit ( 0 )
exit the program with the code integer 1.,exit program with code integer 1.,os . _exit ( 1 ),os . _exit ( 1 )
feed data to the parser p.,feed data to parser var0,p . feed ( data ),var0feed ( data )
P is a string '\03335m',P is string var0,P = '\03335m',P = '\x1b35m'
"calculate negative length of s, by modulus integer 4, use the result as the number of '=' characters to be stored in pad.","calculate negative length of s, by modulus integer 4, use result as number of var0 characters to be stored in pad.",pad = b'=' * ( - len ( s ) % 4 ),pad = bvar0 * ( - len ( s ) % 4 )
assign the variable padding 4 minus the length of shellcode_original modulus 4,assign variable padding 4 minus length of var0 modulus 4,padding = 4 - ( len ( shellcode_original ) % 4 ),padding = 4 - len ( var0 ) % 4
remove 3 elements from r starting at the index 23.,remove 3 elements from r starting at index 23.,r = r [ : 23 ] + r [ 26 : ],r = r [ : 23 ] + r [ 26 : ]
set the variable r to a random integer between 10 and 255,set variable r to random integer between 10 and 255,"r = random . randint ( 10 , 255 )","r = random . randint ( 10 , 255 )"
raise an exception.,raise exception.,raise,raise
RAISE_ERROR is an instance of object class.,var0 is instance of object class.,RAISE_ERROR = object ( ),var0 = object ( )
random is an instance of random.SystemRandom class.,random is instance of random var0 class.,random = random . SystemRandom ( ),random = random . var0 ( )
assign the first two elements of op to res,assign first two elements of var0 to res,res = op [ 0 : 2 ],res = var0 [ 0 : 2 ]
increment res by element of to_digit at the digit index.,increment res by element of var0 at digit index.,res = to_digits [ digit ] + res,res = var0s [ digit ] + res
res is x xor y,res is x xor y,res = x ^ y,res = x ^ y
right shift by val2 the and operation between z and val1 and assign it to res1,right shift by var0 and operation between z and var1 and assign it to var2,res1 = ( ( z & val1 ) >> val2 ),var2 = ( z & var1 ) >> var0
perform the and operation between x shifted right by val2 and val1 and assign the result to res1,perform and operation between x shifted right by var0 and var1 and assign result to var2,res1 = ( x >> val2 ) & ( val1 ),var2 = x >> var0 & var1
assign the variable res2 variable x bitwise and val1,assign variable var0 variable x var1 and var2,res2 = ( x & val1 ),var0 = x & var2
assign res2 the value of res2 left shift by max_bits minus val2,assign var0 value of var0 left shift by var2 minus var3,res2 = res2 >> ( max_bits - val2 ),var0 = var0 >> var2 - var3
left shift x by max_bits plus val2 and assign the result to res2,left shift x by var0 plus var1 and assign result to var2,res2 = x << ( max_bits + val2 ),var2 = x << var0 + var1
"result is the concatenation of the string ""\\x"", the hexadecimal value of the length of array of bytes of the variable sc and the string ','","result is concatenation of string var0, hexadecimal value of length of array of bytes of variable sc and string var1","result = '\\x%02x, ' % len ( bytearray ( sc ) )","result = '\\x%02x, ' % len ( bytearray ( sc ) )"
"return a tuple with 3 elements: TYPE, outdict and stream.",return tuple with 3 elements: var0 var1 and stream.,"return ( TYPE , outdict , stream )","return var0 , var1 , stream"
return the result of bitwise left shift of n and temp bitwise and mask_value bitwise or with the bitwise right shift of n by the subtraction of temp from width,return result of var0 left shift of n and temp var0 and var4 var0 or with var0 right shift of n by subtraction of temp from width,return ( ( n << temp ) & mask_value ) | ( n >> ( width - temp ) ),return n << temp & var4 | n >> width - temp
return the result of bitwise right shift of n and rotations xor the bitwise left shift of n and subtract rotations from width bitwise and mask_value,return result of var0 right shift of n and rotations xor var0 left shift of n and subtract rotations from width var0 and var3,return ( n >> rotations ) ^ ( ( n << ( width - rotations ) ) & mask_value ),return n >> rotations ^ n << width - rotations & var3
return n right shift by rotations bitwise or with the result of n left shift by width bitwise and mask_value,return n right shift by rotations var0 or with result of n left shift by width var0 and var2,"return [ Warning ( 'BooleanField does not have a default value.' , hint = ( 'Django 1.6 changed the default value of BooleanField from False to None. ' 'See https://docs.djangoproject.com/en/1.6/ref/models/fields/#booleanfield ' 'for more information.' ) , obj = field , id = '1_6.W002' , ) for field in problem_fields ]","return [ Warning ( 'BooleanField does not have a default value.' , hint = 'Django 1.6 changed the default value of BooleanField from False to None.See https://docs.djangoproject.com/en/1.6/ref/models/fields/#booleanfield for more information.' , obj = field , id = '1_6.W002' ) for field in problem_fields ]"
return 2 to the power of n minus 1,return 2 to power of n minus 1,return 2 ** n - 1,return 2 ** n - 1
return i.,return var0,return i,return i
"if filename ends with string '.mo' return I18N_MODIFIED, otherwise return FILE_MODIFIED.",if filename ends with string var0 return var1 otherwise return var3 ,return I18N_MODIFIED if filename . endswith ( '.mo' ) else FILE_MODIFIED,return var1 if filename . endswith ( var0 ) else var3
return msgs.,return msgs.,return msgs,return msgs
return name.,return name.,return name,return name
"call the method self.expression, substitute the result for retval.",call method var0 substitute result for var1 ,retval = self . expression ( ),var1 = var0 ( )
substitute element at self.pos index of self.tokens for retval.,substitute element at self.pos index of var0 for var1 ,retval = self . tokens [ self . pos ],var1 = var0 [ self . pos ]
store in rev_suplx the reverse of the array suplX,store in var0 reverse of array var1,rev_suplx = suplX [ : : - 1 ],var0 = var1 [ : : - 1 ]
substitute complain for reverse.,substitute complain for reverse.,reverse = complain,reverse = complain
"and lambda function with 2 arguments: self and other, resulting boolean False if self is lesser than other or self is equal to other,   tuple with 2 elements: string '__le__',   and lambda function with 2 arguments: self and other, resulting boolean True if self is lesser than other or self is equal to other,   tuple with 2 elements: string '__ge__',   and lambda function with 2 arguments: self and other, resulting boolean False if self is lesser than other, for '__lt__',   list with 3 tuples: tuple with 2 elements: string '__ge__',   and lambda function with 2 arguments: self and other, resulting boolean False if self is lesser than or equal to other,   or self is equal to other, tuple with 2 elements: string '__lt__',   and lambda function with 2 arguments: self and other, resulting boolean True if self is lesser than or equal to other,   or self is not equal to other, tuple with 2 elements: string '__gt__',   and lambda function with 2 arguments: self and other, resulting boolean False if self is lesser than or equal to other, for '__le__',   list with 3 tuples: tuple with 2 elements: string '__lt__',   and lambda function with 2 arguments: self and other, resulting boolean False if self is greater than other or self is equal to other,   tuple with 2 elements: string '__ge__',   and lambda function with 2 arguments: self and other, resulting boolean True if self is greater than other or self is equal to other,   tuple with 2 elements: string '__le__',   and lambda function with 2 arguments: self and other, resulting boolean False if self is greater than other, for '__gt__',   and list with 3 tuples: tuple with 2 elements: string '__le__',   and lambda function with 2 arguments: self and other, resulting boolean True if self is not greater than or is not equal to other,   or self is equal to other, tuple with 2 elements: string '__gt__',   and lambda function with 2 arguments: self and other, resulting boolean True if self is greater than or not equal to other,   or self is not equal to other, tuple with 2 elements: string '__lt__',   and lambda function with 2 arguments: self and other, resulting boolean False if self is greater than or equal to other, for '__ge__',   convert cls to a dictionary, convert the result into a set and convert convert into a set, roots is a set of differences of the two previous sets.","and lambda function with 2 arguments: self and other, resulting boolean var0 if self is lesser var7 other or self is equal to other var19 tuple with 2 elements: string var42 var19 and lambda function with 2 arguments: self and other, resulting boolean var46 if self is lesser var7 other or self is equal to other var19 tuple with 2 elements: string var51 var19 and lambda function with 2 arguments: self and other, resulting boolean var0 if self is lesser var7 other, for var56 var19 list with 3 tuples: tuple with 2 elements: string var51 var19 and lambda function with 2 arguments: self and other, resulting boolean var0 if self is lesser var7 or equal to other var19 or self is equal to other, tuple with 2 elements: string var56 var19 and lambda function with 2 arguments: self and other, resulting boolean var46 if self is lesser var7 or equal to other var19 or self is not equal to other, tuple with 2 elements: string var63 var19 and lambda function with 2 arguments: self and other, resulting boolean var0 if self is lesser var7 or equal to other, for var42 var19 list with 3 tuples: tuple with 2 elements: string var56 var19 and lambda function with 2 arguments: self and other, resulting boolean var0 if self is greater var7 other or self is equal to other var19 tuple with 2 elements: string var51 var19 and lambda function with 2 arguments: self and other, resulting boolean var46 if self is greater var7 other or self is equal to other var19 tuple with 2 elements: string var42 var19 and lambda function with 2 arguments: self and other, resulting boolean var0 if self is greater var7 other, for var63 var19 and list with 3 tuples: tuple with 2 elements: string var42 var19 and lambda function with 2 arguments: self and other, resulting boolean var46 if self is not greater var7 or is not equal to other var19 or self is equal to other, tuple with 2 elements: string var63 var19 and lambda function with 2 arguments: self and other, resulting boolean var46 if self is greater var7 or not equal to other var19 or self is not equal to other, tuple with 2 elements: string var56 var19 and lambda function with 2 arguments: self and other, resulting boolean var0 if self is greater var7 or equal to other, for var51 var19 convert cls to dict, convert result into set and convert convert into set, roots is set of differences of two previous sets.",roots = set ( dir ( cls ) ) & set ( convert ),roots = set ( dir ( cls ) ) & set ( convert )
ROT is the first command-line argument converted to integer,ROT is first command-line argument converted to integer,ROT = int ( sys . argv [ 1 ] ),ROT = int ( sys . argv [ 1 ] )
assign rox_encoded_instruction res1 bitwise or res2,assign var0 var1 var2 or var3,rox_encoded_instruction = res1 | res2,var0 = var1 | var3
append string '\\x' followed by the conversion in hex of 0xFF to the string s,append string var0 followed by conversion in hex of var1 to string s,s += '\\x%02x' % 0xAA,s += '\\x%02x' % 0xAA
set s to the string 'hello',set s to string var0,s = 'hello',s = var0
assign sb the hexadecimal value of leader casted into an int16,assign sb hexadecimal value of leader casted into var0,"sb = int ( hex ( leader ) , 16 )","sb = int ( hex ( leader ) , 16 )"
append to sc a bytes object containing the value val2 packed according to the format string unsigned char,append to sc bytes object containing value var0 packed according to format string unsigned char,"sc . append ( struct . pack ( 'B' , val2 ) )","sc . append ( struct . pack ( 'B' , var0 ) )"
"call the function urlsplit with an argument url, assign the result to scheme, netloc, path, query and fragment, respectively.","call function var0 with argument url, assign result to scheme var1 path, query and fragment, respectively.","scheme , netloc , path , query , fragment = urlsplit ( url )","scheme , var1 , path , query , fragment = var0 ( url )"
call the method shell.mainloop.,call method var0 ,shell . mainloop ( ),var0 ( )
convert shellcode to a bytearray and store its length in the variable shell_n,convert var0 to var1 and store its length in variable var2,shell_len = len ( bytearray ( shellcode ) ),shell_len = len ( var1 ( var0 ) )
concatenate in the string shellcode the concatenation of '\\x' and the string byte encoded in hexadecimal,concatenate in string var0 concatenation of var1 and string byte encoded in hexadecimal,shellcode += '\\x' + byte . encode ( 'hex' ),var0 += var1 + byte . encode ( 'hex' )
Convert the value of x bitwise and 0xff to a hexadecimal then add it to the variable shellcode,Convert value of x var0 and var1 to hexadecimal then add it to variable var2,shellcode += '%02x' % ( x & 0xff ),var2 += '%02x' % ( x & var1 )
remove the first 3 items from shellcode,remove first 3 items from var0,shellcode = shellcode [ 3 : : ],var0 = var0 [ 3 : ]
Declare a string shellcode and add the string '\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x89\xe2\x53\x89\xe1\xb0\x0b\xcd\x80' into it,Declare string var0 and add string var1 into it,shellcode = '\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x89\xe2\x53\x89\xe1\xb0\x0b\xcd\x80',var0 = '\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x89\xe2\x53\x89\xe1\xb0\x0b\xcd\x80'
assign the variable shellcode_encoded_hex the hexadecimal values of shellcode_encoded separated by the string '\\x',assign variable var0 hexadecimal values of var1 separated by string var4,shellcode_encoded_hex = '' . join ( '\\x{:02x}' . format ( x ) for x in shellcode_encoded ),var0 = '' . join ( '\\x{:02x}' . format ( x ) for x in var1 )
"store in the variable shellcode_encoded_nasm the hexadecimal values of shellcode_encoded separated by the string '0x' and remove any trailing ','",store in variable var0 hexadecimal values of var1 separated by string var3 and remove any trailing var4,"shellcode_encoded_nasm = '' . join ( '0x{:02x}, ' . format ( i ) for i in shellcode_encoded ) . rstrip ( ', ' )","var0 = '' . join ( '0x{:02x}, ' . format ( i ) for i in var1 ) . rstrip ( ', ' )"
append to the variable shellcode_encoded the value of shellcode_original at index i xor the variable r,append to variable var0 value of var1 at index i xor variable r,shellcode_encoded . append ( shellcode_original [ i ] ^ r ),var0 . append ( var1 [ i ] ^ r )
append to the variable shellcode_encoded the value of shellcode_original at index i+1 xor the variable r,append to variable var0 value of var1 at index var3 xor variable r,shellcode_encoded . append ( shellcode_original [ i + 1 ] ^ r ),var0 . append ( var1 [ i + 1 ] ^ r )
"read the file f as a bytearray from hexadecimal values remove whitespaces and replace all occurences of the string '\\t' with ''"" and store the result in shellcode_original","read file f as var0 from hexadecimal values remove var1 and replace all var2 of string var3 with var4 "" and store result in var5","shellcode_original = bytearray . fromhex ( f . read ( ) . strip ( ) . replace ( '\\t' , '' ) )","var5 = var0 . fromhex ( f . read ( ) . strip ( ) . replace ( '\\t' , '' ) )"
assign the variable shellcode_original_hex the hexadecimal values of shellcode_original separated by the string '\\x',assign variable var0 hexadecimal values of var1 separated by string var4,shellcode_original_hex = '' . join ( '\\x{:02x}' . format ( x ) for x in shellcode_original ),var0 = '' . join ( '\\x{:02x}' . format ( x ) for x in var1 )
append 0x70 to shellcode,append 0x70 to var0,shellcode . append ( 0x70 ),var0 . append ( 112 )
shells is a list containing 2 elements: string 'ipython' and string 'bpython'.,shells is list containing 2 elements: string var0 and string var1.,"shells = [ 'ipython' , 'bpython' ]","shells = [ var0 , 'bpython' ]"
"if value is an instance of datetime and settings.USE_TZ if use_tz is None else use_tz and call to the function is_naive,",if value is instance of var0 and settings var1 if var2 is var6 else var2 and call to function var7 ,"should_convert = ( isinstance ( value , datetime ) and ( settings . USE_TZ if use_tz is None else use_tz ) and not is_naive ( value ) and getattr ( value , 'convert_to_local_time' , True ) )","should_convert = isinstance ( value , var0 ) and ( settings . var1 if var2 is var6 else var2 ) and not var7 ( value ) and getattr ( value , 'convert_to_local_time' , True )"
append string '0x' to str,append string var1 to var0,str += '0x',var0 += var1
"Convert the value of z bitwise and 0xff to a hexadecimal then add it to the variable str followed by ','",Convert value of z var0 and var1 to hexadecimal then add it to variable var2 followed by var3,"str += '%02x, ' % ( z & 0xff )","var2 += '%02x, ' % ( z & var1 )"
add the string value '0x' to the variable str,add string value var1 to variable var0,str += '0x',var0 += var1
str is an empty string,var0 is empty string,str = '',var0 = ''
initialize the variable str to an empty string,initialize variable var0 to empty string,str = '',var0 = ''
append str1 to str,append var0 to var1,str = str + str1,var1 = var1 + var0
add to str a bytes object containing the value xor_byte packed according to the format string unsigned char,add to var0 bytes object containing value var1 packed according to format string unsigned char,"str . append ( struct . pack ( 'B' , xor_byte ) )","var0 . append ( struct . pack ( 'B' , var1 ) )"
append string '0x' to str1,append string var0 to var1,str1 += '0x',var1 += var0
add the string value '\\x' to the variable str1,add string value var0 to variable var1,str1 += '\\x',var1 += '\\x'
str1 is a string containing the hexadecimal conversion of str,var0 is string containing hexadecimal conversion of var1,str1 = '%02x' % str,var0 = '%02x' % var1
"str1 is a string """"",var0 is string var1,str1 = '',var0 = ''
add to str1 a bytes object containing the value val4 packed according to the format string unsigned char,add to var0 bytes object containing value var1 packed according to format string unsigned char,"str1 . append ( struct . pack ( 'B' , val4 ) )","var0 . append ( struct . pack ( 'B' , var1 ) )"
"convert shift to hexadecimal and append it followed by ', ' to the string str4",convert shift to hexadecimal and append it followed by var0 to string var1,"str4 += '%02x, ' % shift","var1 += '%02x, ' % shift"
"convert val2 in hexadecimal and append it followed by ', ' to the string str5",convert var0 in hexadecimal and append it followed by var1 to string var2,"str5 += '%02x, ' % val2","var2 += '%02x, ' % var0"
substitute str for string_types.,substitute str for var0 ,"string_types = str ,","var0 = str ,"
"call the function allow_lazy with an argument strip_tags, substitute the result for strip_tags.",call function var0 with argument var1 substitute result for var1 ,strip_tags = allow_lazy ( strip_tags ),var1 = var0 ( var1 )
substitute style.ERROR for style.ERROR_OUTPUT.,substitute style var0 for style var1 ,style . ERROR_OUTPUT = style . ERROR,style . var0_OUTPUT = style . var0
"call the function get_commands, convert the result to a list, append string 'help' to it, substitute it for subcommands.","call function var0 convert result to list, append string var2 to it, substitute it for var3 ",subcommands = list ( get_commands ( ) ) + [ 'help' ],var3 = list ( var0 ( ) ) + [ var2 ]
substitute __setitem__ filed of the base class of the class SortedDict for super_set.,substitute var0 filed of base class of class var1 for var2 ,"super_set = super ( SortedDict , self ) . __setitem__","var2 = super ( var1 , self ) . var0"
supports_microseconds is boolean False.,var0 is boolean var1 ,supports_microseconds = False,var0 = var1
"separate every 2 characters of the string swapped with the separator "", """,separate every 2 characters of string swapped with separator var0,"swapped = ', ' . join ( swapped [ i : i + 2 ] for i in range ( 0 , len ( swapped ) , 2 ) )","swapped = ', ' . join ( swapped [ i : i + 2 ] for i in range ( 0 , len ( swapped ) , 2 ) )"
"add ""0x"" to every 2 characters of the string swapped",add var0 to every 2 characters of string swapped,"swapped = '0x' . join ( swapped [ i : i + 2 ] for i in range ( 0 , len ( swapped ) , 2 ) )","swapped = '0x' . join ( swapped [ i : i + 2 ] for i in range ( 0 , len ( swapped ) , 2 ) )"
convert the values of swapped to hexadecimals,convert values of swapped to var0,swapped = binascii . hexlify ( bytearray ( swapped ) ),swapped = binascii . hexlify ( bytearray ( swapped ) )
"open out_log file in append mode with buffering size of the input buffer, substitute the result for sys.stdout.","open var0 file in append mode with buffering size of input buffer, substitute result for var1 ","sys . stdout = open ( out_log , 'a' , buffering )","var1 = open ( var0 , 'a' , buffering )"
exit the program with code 0,exit program with code 0,sys . exit ( 0 ),sys . exit ( 0 )
"decrement t by integer 1,","decrement t by integer 1,",t -= 1,t -= 1
"call the method self.non_field_errors, substitute the result for top_errors.",call method self var1 substitute result for var2 ,top_errors = self . non_field_errors ( ),var2 = self . var1 ( )
"integer 0 and integer 0.   try,","integer 0 and integer 0 var0 try,",try :,try:
append to the string val the value (7 - (256 -x)) converted to hexadecimal,append to string var0 value (7 - (256 -x)) converted to hexadecimal,val += '%02x' % ( 7 - ( 256 - x ) ),var0 += '%02x' % ( 7 - ( 256 - x ) )
convert (x+7) to hexadecimal and append it to the string val,convert (x+7) to hexadecimal and append it to string var0,val += '%02x' % ( x + 7 ),var0 += '%02x' % ( x + 7 )
for each element in var convert the element to an integer representing the unicode then convert it to a hexadecimal ignore slice at index 2 until the end and join separating each element by the string '\\x',for each element in var convert element to integer representing var0 then convert it to hexadecimal ignore slice at index 2 var1 end and join separating each element by string var2,val = '' . join ( '\\x{}' . format ( hex ( ord ( x ) ) [ 2 : ] ) for x in var ),val = '' . join ( '\\x{}' . format ( hex ( ord ( x ) ) [ 2 : ] ) for x in var )
subtract 1 from 2 to the power of max_bits and assign the result to val1,subtract 1 from 2 to power of var0 and assign result to var1,val1 = 2 ** max_bits - 1,var1 = 2 ** var0 - 1
call the function func with the argument tmp and save the return value in val1,call function var0 with argument var1 and save return value in var2,val1 = func ( tmp ),var2 = var0 ( var1 )
assign val1 the hexadecimal value of the variable byte converted to int16  xor with the variable i,assign var1 hexadecimal value of variable byte converted to var2 xor with variable i,"val1 = int ( byte . encode ( 'hex' ) , 16 ) ^ i","var1 = int ( byte . encode ( 'hex' ) , var016 ) ^ i"
"call the method self.var1.resolve with 2 arguments: context and boolean True, substitute the result for val2.",call method var0 with 2 arguments: context and boolean var1 substitute result for var2 ,"val1 = self . var1 . resolve ( context , True )","val1 = var0 ( context , var1 )"
val2 is the result of the bitwise xor between the integer base 32 of the element i of chunk encoded to hex and xor_byte,var0 is result of var1 xor between integer base 32 of element i of chunk encoded to hex and var2,"val2 = int ( chunk [ i ] . encode ( 'hex' ) , 32 ) ^ xor_byte","var0 = int ( chunk [ i ] . encode ( 'hex' ) , 32 ) ^ var2"
"call the method parser.compile_filter with an argument, third element of bits, substitute the result for val2.","call method parser var1 with argument, third element of bits, substitute result for var2 ",val2 = parser . compile_filter ( bits [ 2 ] ),var2 = parser . var1 ( bits [ 2 ] )
add the string value '\\x' to the variable var,add string value var0 to variable var,var += '\\x',var += '\\x'
Convert the variable rand to a hexadecimal and add it to the variable var,Convert variable rand to hexadecimal and add it to variable var,var += '\\x%02x' % rand,var += '\\x%02x' % rand
append '0x' to var,append var0 to var,var += '0x',var += var0
"add the bytes literal ""\x0a\x1b\x2c\x3d\x4e\x5f\x6a\x10\x56\x57\x68\x99\xa5"" to the variable var",add bytes literal var0 to variable var,var += b'\x0a\x1b\x2c\x3d\x4e\x5f\x6a\x10\x56\x57\x68\x99\xa5',var += b'\x0a\x1b\x2c\x3d\x4e\x5f\x6a\x10\x56\x57\x68\x99\xa5'
"add the bytes literal ""\x5b\x37\x42\x01\xbd\x3c\x72\x7c\x02\x3d\x5f\xc1\xcf"" to the variable var",add bytes literal var0 to variable var,var += b'\x5b\x37\x42\x01\xbd\x3c\x72\x7c\x02\x3d\x5f\xc1\xcf',var += b'\x5b\x37\x42\x01\xbd\x3c\x72\x7c\x02\x3d\x5f\xc1\xcf'
"add the bytes literal ""\x90\x4a\x5c\xf3\x1e\x81\x69\x14\x75\x72\xde\xac\x77"" to the variable var",add bytes literal var0 to variable var,var += b'\x90\x4a\x5c\xf3\x1e\x81\x69\x14\x75\x72\xde\xac\x77',var += b'\x90\x4a\x5c\xf3\x1e\x81\x69\x14\x75\x72\xde\xac\x77'
"add the bytes literal ""\x99\xaf\xbb\xed\xbe\x46\x56\x4e\x88\x72\x53\x44\x68"" to the variable var",add bytes literal var0 to variable var,var += b'\x99\xaf\xbb\xed\xbe\x46\x56\x4e\x88\x72\x53\x44\x68',var += b'\x99\xaf\xbb\xed\xbe\x46\x56\x4e\x88\x72\x53\x44\x68'
"add the bytes literal ""\x0d\x01\xc7\xe2\xf2\x52\x57\x8b\x52\x10\x8b\x4a\x3c"" to the variable var",add bytes literal var0 to variable var,var += b'\xae\xf2\xc4\xbb\x03\x41\xcd\x8b\x52\x10\x8b\x4a\x3c',var += b'\xae\xf2\xc4\xbb\x03\x41\xcd\x8b\x52\x10\x8b\x4a\x3c'
"Convert the value of val1 to hexadecimal, then slice it between the indicies 2 and 3, convert it to an int16 and add its value to var1","Convert value of var0 to hexadecimal, then slice it between var1 2 and 3, convert it to var2 and add its value to var1","var1 = int ( hex ( val1 ) [ 2 : 3 ] , 16 )","var1 = int ( hex ( var0 ) [ 2 : 3 ] , 16 )"
visible_issue_count is an integer 0.,var0 is integer 0.,visible_issue_count = 0,var0 = 0
"endless loop,","endless loop,",while True : ,while True : 
"while x is greater than zero,","while x is greater var0 zero,",while x > 0 : ,while x > 0 : 
"subtract decimals from digits, substitute the result for whole_digits.","subtract decimals from digits, substitute result for var0 ",whole_digits = digits - decimals,var0 = digits - decimals
"open writer.path file in write mode, with file descriptor as fh, perform the following,","open var0 file in write mode, with file descriptor as var1 perform following,","with open ( writer . path , 'wb' ) as fh : ","with open ( var0 , 'wb' ) as var1 : "
append to the string x the hexadecimal conversion of the and operation between a and 0xff,append to string x hexadecimal conversion of and operation between and var0,x += '%02x' % ( a & 0xff ),x += '%02x' % ( a & var0 )
append to the string encoded the hexadecimal conversion of the and operation between y and 0xff,append to string encoded hexadecimal conversion of and operation between y and var0,x += '%02x' % ( a & 0xff ),x += '%02x' % ( a & var0 )
"perform the and operation between y and 0xff, then convert the result in hexadecimal and append it to the string x",perform and operation between y and var0 then convert result in hexadecimal and append it to string x,x += '%02x' % ( y & 0xff ),x += '%02x' % ( y & var0 )
add 1 to x,add 1 to x,x += 1,x += 1
"Convert the value of y to hexadecimal, then slice it at index 3 and add its value to x","Convert value of y to hexadecimal, then slice it at index 3 and add its value to x",x += hex ( y ) [ 3 : ],x += hex ( y ) [ 3 : ]
Slice y at index 3 and add its value to x,Slice y at index 3 and add its value to x,x += y [ 3 : ],x += y [ 3 : ]
"Convert the value of y to hexadecimal, then slice it at index 3 and add the value to x","Convert value of y to hexadecimal, then slice it at index 3 and add value to x",x += y [ 3 : ],x += y [ 3 : ]
Convert the variable x to a hexadecimal and store it in the variable x,Convert variable x to hexadecimal and store it in variable x,x = '%02x' % x,x = '%02x' % x
initialize an empty string variable called x,initialize empty string variable called x,x = '',x = ''
store the variable x the value of the function rol with x and rand as parameters,store variable x value of function var0 with x and rand as parameters,"x = rol ( x , rand )","x = var0 ( x , rand )"
"perform a left shift on x by n, then store the result in x","perform left shift on x by n, then store result in x",x = x << nbits,x = x << nbits
in x replace '\x45' with bytes object containing the value y packed according to the format string unsigned char,in x replace var0 with bytes object containing value y packed according to format string unsigned char,"x = x . replace ( '\x45' , struct . pack ( 'B' , y ) )","x = x . replace ( '\x45' , struct . pack ( 'B' , y ) )"
assign the variable x the value of x xor 0xDD,assign variable x value of x xor 0xDD,x = x ^ 0xDD,x = x ^ 221
assign xor_byte the value of the function find_valid_xor_byte with chunk and bad_chars as parameters,assign var0 value of function var1 with chunk and var3 as parameters,"xor_byte = find_valid_xor_byte ( chunk , bad_chars )","var0 = var1 ( chunk , var3 )"
"Take the absolute value of subfs then convert subfs to an integer, then cast to a hexadecimal, slice the variable rev_suplx between the indicies 0 and 2 then cast rev_suplx to the type int32, store the value of the summation in the variable xxx","Take absolute value of var0 then convert var0 to integer, then cast to hexadecimal, slice variable var2 between var4 0 and 2 then cast var2 to type var5 store value of summation in variable xxx","xxx = hex ( int ( abs ( subfs ) ) + int ( rev_suplx [ 0 : 2 ] , 32 ) )","xxx = hex ( int ( abs ( var0 ) ) + int ( var2 [ 0 : 2 ] , 32 ) )"
Convert the variable x to a hexadecimal and store it in the variable y,Convert variable x to hexadecimal and store it in variable y,y += '%02x' % x,y += '%02x' % x
append the value x converted in hex to the string y,append value x converted in hex to string y,y += '%02x' % x,y += '%02x' % x
assign the variable y the bytearray of the variable shellcode at index 0 bitwise xor bytearray of shellcode at index 1,assign variable y var0 of variable var2 at index 0 var4 xor var0 of var2 at index 1,y = bytearray ( shellcode ) [ 0 ] ^ bytearray ( shellcode ) [ 1 ],y = var0 ( var2 ) [ 0 ] ^ var0 ( var2 ) [ 1 ]
assign the variable y to x bitwise xor the bytearray of shellcode at index n,assign variable y to x var0 xor var1 of var2 at index n,y = x ^ bytearray ( shellcode ) [ n ],y = x ^ var1 ( var2 ) [ n ]
"Convert the variable x to a hexadecimal and add it to the variable z followed by ','",Convert variable x to hexadecimal and add it to variable z followed by var0,"z += '%02x, ' % x","z += '%02x, ' % x"
append the value y converted to hex to the string z,append value y converted to hex to string z,z += '%02x' % y,z += '%02x' % y
zbuf is an instance of BytesIO class.,var0 is instance of var1 class.,zbuf = BytesIO ( ),var0 = var1 ( )
