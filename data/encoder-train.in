get the value under the 'CONTENT_TYPE' key of environ dictionary, if the key doesnt exist get the empty string,
call the method os.path.splitext with an argument self.file, assign the result to _ and file_ext.
call the method cgi.parse_header with an argument content_disposition, assign the result to _ and params, respectively.
split into two parts token.contents by None, substitute the parts for _ and rest, respectively.
call the function os.path.basename with an argument fixture_file, use the result as an argument for the call to the method,
substitute v for value under the k-th element of m key of _ dictionary.
_ is an empty dictionary.
__all__ a tuple containing strings: 'Field', 'CharField', 'IntegerField', 'DateField', 'TimeField', 'DateTimeField', 'RegexField',
__all__ is a tuple of strings: 'Media', 'MediaDefiningClass', 'Widget', 'TextInput', 'EmailInput', 'URLInput', 'NumberInput',
__all__ is a tuple containing strings: 'ModelForm', 'BaseModelForm', 'model_to_dict', 'fields_for_model', 'save_instance',
__all__is an tuple with 2 elements: strings 'BaseForm' and 'Form'.
__all__ is a tuple containing strings 'BaseFormSet', 'formset_factory' and 'all_valid'.
__all__ is a tuple containing strings: 'LOCK_EX', 'LOCK_SH', 'LOCK_NB', 'lock' and 'unlock'.
__all__ is an tuple with 3 elements: strings 'MultiPartParser', 'MultiPartParserError' and 'InputStreamExhausted'.
__all__ is a tuple, containing strings 'NamedTemporaryFile' and 'gettempdir'.
__all__ is an tuple containing string 'SelectDateWidget'.
__all__ is a tuple containing strings: 'Storage', 'FileSystemStorage', 'DefaultStorage' and 'default_storage'.
import_library and libraries.   __all__  is a tuple containing 4 strings: 'Template', 'Context', 'RequestContext' and 'compile_string'.
__all__ is a tuple containing strings: 'UploadedFile', 'TemporaryUploadedFile', 'InMemoryUploadedFile' and 'SimpleUploadedFile'.
__all__ is a tuple containing 2 initial elements: strigs 'WSGIServer' and 'WSGIRequestHandler'.
__all__ is an list containing strings: 'activate', 'deactivate', 'override', 'deactivate_all', 'get_language',
DEFAULT_ATTACHMENT_MIME_TYPE, make_msgid, BadHeaderError and forbid_multi_line_headers into default name space.   __all__ is a list of strings, 'CachedDnsName', 'DNS_NAME', 'EmailMessage', 'EmailMultiAlternatives', 'SafeMIMEText',
__all__ is a list containing next strings, 'CheckMessage', 'Debug', 'Info', 'Warning', 'Error', 'Critical',
__all__ is an list containing 6 elements: 'get_cache', 'cache', 'DEFAULT_CACHE_ALIAS', 'InvalidCacheBackendError',
__all__ is a list of strings, 'SimpleCookie', 'parse_cookie', 'HttpRequest', 'QueryDict', 'RawPostDataException',
__all__ is a string containing strings: 'UploadFileException', 'StopUpload', 'SkipFile', 'FileUploadHandler',
__all__ is a list with 15 elements: strings 'utc', 'get_fixed_timezone', 'get_default_timezone', 'get_default_timezone_name',
__all__ is a list containing a string 'file_move_safe'.
__all__ is an list containing a string 'File'.
__all__ is an list with an element 'luhn'.
__all__ is an list containing string 'SelectDateWidget'.
__all__ is a list containing a string "runfastcgi".
__author__ is a string "Benjamin Peterson <benjamin@python.org>".
call the function new_method_proxy with an argument bool, substitute the result for __bool__.
call the function new_method_proxy with an argument bytes, substitute the result for __bytes__.
substitute serialize for __bytes__.
substitute serialize_headers for __bytes__.
substitute type.__call__ for __call__.
cal the method operator.attrgetter with an argument string "__class__", use the result as an argument for the call to the function,
substitute has_header for __contains__.
substitute has_key for __contains__.
call the function new_method_proxy with an argument operator.contains, substitute the result for __contains__.
__D is a raw string '(?P<day>\d{2})'.
__D2 is a raw string '(?P<day>[ \d]\d)'.
substitute complain for __delitem__.
call the function new_method_proxy with an argument operator.delitem, substitute the result for __delitem__.
substitute complain for __delslice__.
call the function new_method_proxy with an argument dir, substitute the result for __dir__.
__dispatch is None.
new_method_proxy, __class__ is an property object created with previous result as an argument.   call the function new_method_proxy with an argument operator.eq, substitute the result for __eq__.
call the function new_method_proxy with an argument getattr, substitute the result for __getattr__.
call the function new_method_proxy with an argument operator.getitem, substitute the result for __getitem__.
call the function new_method_proxy with an argument hash, substitute the result for __hash__.
substitute complain for __iadd__.
substitute the result for name.   call the function __import__ with an argument name.
call the function __import__ with an argument name.
substitute complain for __imul__.
substitute type.__init__ for __init__.
substitute _iterkeys for __iter__.
substitute xreadlines for __iter__.
call the function new_method_proxy with an argument len, substitute the result for __len__.
__M is a raw string '(?P<mon>\w{3})'.
call the function new_method_proxy with an argument operator.ne, substitute the result for __ne__.
call the function new_method_proxy with an argument bool, substitute the result for __nonzero__.
substitute complain for __setitem__.
call the function new_method_proxy with an argument operator.setitem, substitute the result for __setitem__.
substitute complain for __setslice__.
__slots__ is a string 'hashvalue'.
call the function new_method_proxy with an argument str, substitute the result for __str__.
substitute serialize for __str__.
substitute serialize_headers for __str__.
__T is a raw string '(?P<hour>\d{2}):(?P<min>\d{2}):(?P<sec>\d{2})'.
call the function new_method_proxy with an argument unicode, substitute the result for __unicode__.
__version__ is a string "0.1".
__version__ is a string "1.6.1".
__Y is a raw string '(?P<year>\d{4})'.
__Y2 is a raw string '(?P<year>\d{2})'.
call the method gettext_module.NullTranslations, substitute the result for _active.value.
call the method pytz.timezone with an argument timezone, substitute the result for _active.value.
substitute self.old_timezone for _active.value.
substitute timezone for _active.value.
of the _DJANGO_DEPRECATED_LOCALES dictionary, RemovedInDjango19Warning and stacklevel set to integer 2.   call the function translation with an argument language, substitute the result for _active.value.
call the method local, substitute the result for _active.
call the function local, substitute the result for _active.
call the function _add_doc with 2 arguments: b and string """Byte literal""".
call the function _add_doc with 2 arguments: get_unbound_function and string """Get the function out of a possibly unbound function""".
call the function _add_doc with 2 arguments: reraise and string """Reraise an exception.""".
call the function _add_doc with 2 arguments: u and string """Text literal""".
_anonymous_ is a list containing one string: '_offset_union'.
_anonymous_ is a list containing one string: '_offset'.
_assertCountEqual is a strnig "assertCountEqual".
_assertCountEqual is a strnig "assertItemsEqual".
_assertRaisesRegex is a strnig "assertRaisesRegex".
_assertRaisesRegex is a strnig "assertRaisesRegexp".
_assertRegex is a strnig "assertRegex".
_assertRegex is a strnig "assertRegexpMatches".
if six.PY2 is true, _BASE64_DECODE_ERROR is TypeError, if not, _BASE64_DECODE_ERROR is binascii.Error.
_BROWSERS_DEPRECATED_LOCALES is an dictionary with 2 initial entries: 'zh-hans' for 'zh-cn' and 'zh-hant' for 'zh-tw'.
_builtin_context_processors is a tuple containing a string 'django.core.context_processors.csrf'.
append new_filenames to _cached_filenames.
_cached_filenames is an empty list.
add elements from new_modules set to _cached_modules set.
_cached_modules is an empty set.
_CacheInfo is an instance of namedtuple class created with 2 arguments: string "CacheInfo" and a list with 4 elements: string 'hits',
__caches is an empty dictionary.
_called_from_command_line is boolean False.
_cookie_allows_colon_in_names is boolean False.
_cookie_allows_colon_in_names is a boolean True.
call the function http_cookies.SimpleCookie, on the return value call the value_encode method, with the argument character ';',
_dec.__name__ is a string 'method_decorator(%s)' formated with decorator.__class__.__name__.
_dec.__name__ is a string 'method_decorator(%s)' formated with decorator.__name__.
get '_decorated_function' attribute from the func object, substitute it for _dec._decorated_function, if it doesnt exist,
_default is None.
call the function translation with an argument settings.LANGUAGE_CODE, substitute the result for _default.
call the function func with 2 arguments: unpacked list resolved_args and unpacked dictionary resolved_kwargs, substitute the result for _dict.
substitute _BROWSERS_DEPRECATED_LOCALES for _DJANGO_DEPRECATED_LOCALES.
call the function re.compile with 2 arguments: string '^([a-z]):' and re.I, substitute the result for _drive_re.
_empty_value is an empty string.
_empty_value is an empty list.
_empty_value is None.
_encoding is None.
call the method re.compile with an argument raw string "&(#?[xX]?(?:[0-9a-fA-F]+|\w{1,8}));", substitute the result for _entity_re.
append filename to _error_files.
_error_files is an empty list.
call the method _ExpatParser.__init__ with arguments self, unpacked list args and unpacked dictionary kwargs.
call the method _ExpatParser.reset with an argumen sefl.
__expire_info is an empty dictionary.
_fields_ is a list containing 2 tuples: first tuple contains: string '_offset' and _OFFSET, second contains: string 'Pointer' and PVOID.
_fields_ is a list containing 4 tuples: first tuple contains: string 'Internal' and ULONG_PTR,
_fields_ is a list containing 2 tuples: first tuple contains: string 'Offset' and DWORD, second contains: string 'OffsetHigh' and DWORD.
close the _file file.
write the chunk to the file _file.
_file is None.
call the function os.fdopen with arguments fd and mode, substitute it for _file.
value under the cache_key key of the _format_cache dictionary is None.
substitute val for the value under the cache_key key of the _format_cache dictionary.
_format_cache is an empty dictionary.
_format_modules_cache is an empty dictionary.
_func_closure is a string "__closure__".
_func_closure is a string "func_closure".
_func_code is a string "__code__".
_func_code is a string "func_code".
_func_defaults is a string "__defaults__".
_func_defaults is a string "func_defaults".
_func_globals is a string "__globals__".
_func_globals is a string "func_globals".
call the function lazy with arguments _get_val and six.text_type, substitute the result for _get_val.
substitute frame.f_globals for _globs_.
and dictionary of arbitrary length **kwargs as arguments.   call the initialization method for the base class, _html_parser.HTMLParser.__init__ with self,
call the initialization method _html_parser.HTMLParser.__init__(self) for the base class.
compile the regex from the raw string "((^|[^%])(%%)*%[sy])", substitute the result for _illegal_formatting.
_iteritems is a string "items".
_iteritems is a string "iteritems".
_iterkeys is a string "iterkeys".
_iterkeys is a string "keys".
_iterlists is a string "iterlists".
_iterlists is a string "lists".
_iterkeys is a string "iterkeys".
_itervalues is a string "values".
\\u0027' for integer representation of string '\', '\\u0022' for integer representation of string '"',   '\\u003E' for integer representation of string '>', '\\u003C' for integer representation of string '<',   '\\u0026' for integer representation of string '%', '\\u003D' for integer representation of string '=',   '\\u002D' for integer representation of string '-', '\\u003B' for integer representation of string ';',   '\\u2028' for integer representation of string '\u2028' and '\\u2029' for integer representation of string '\u2029'.   for eery z in range of integers from 0 to 31, update _js_escapes dictionary with '\\u%04X' formated with z,
_js_escapes is a dictionary with 11 initial entries: '\\u005C' for integer representation of string '\\',
substitute len for _len.
call the function _load_serializers.
_localtime is an instance of LocalTimezone class.
_localtime is None.
call the method pytz.timezone with an argument settings.TIME_ZONE, substitute the result for _localtime.
__locks is an empty dictionary.
substitute _globs_ with an argument _locs_.
substitute if _locs_ is None for _locs_.
_meta is class Options class instance initialized with table argument.
_meth_func is a string "__func__".
_meth_func is a string "im_func".
_meth_self is a string "__self__".
_meth_self is a string "im_self".
call the method self._resolve, substitute the result for _module.
_moved_attributes is a list with 55 initial elements, 13 of them are the results of the call to the function MovedAttribute,
_moved_attributes is an empty list.
substitute _moved_attributes for _MovedItems._moved_attributes.
substitute mtime for the value under the filename key of _mtimes dictionary.
_mtimes is an empty dictionary.
_mutable is boolean True.
substitute prefix for _prefixes.values.
call the function local, substitute the result for _prefixes.
_PROTECTED_TYPES is a tuple containing next elements, six.integer_types, type of None, type of float, Decimal, detetime.datetime,
substitute module for the value under the format key of the _serializers dictionary.
django.core.serializers.python for "python", "django.core.serializers.json" for "json",   and "django.core.serializers.pyyaml" for "yaml".   _serializers is an empty dictionary.
substitute serializers for _serializers.
_standard_context_processors is None.
convert processors elements into a tuple, substitute it for _standard_context_processors.
call the function _super with 2 arguments: class SimpleLazyObject and self, call the method __init__ on the result.
substitute super for _super.
_supported is None.
_supported is an instance of OrderedDict class, created with an argument settings.LANGUAGES.
call the _tc.load method with the 'foo:bar=1' converted to string as an argument.
if the tuple result equals to tuple containing character ';' and string '"\\073"', respectively,   assign _cookie_encodes_correctly the boolean True value, otherwise assign it False.   assign return value of the call to the http_cookies.SimpleCookie function to _tc.
append templatetag_module to _templatetags_modules.
_templatetags_modules is an empty list.
_trans is an instance of Trans class.
_translations dictionary value, under the language key is an instance of DjangoTranslation class, created with an argument language.
_translations is an empty dictionary.
_upload_handlers is an empty list.
call the function re.compile with 2 arguments: string '^([a-z])[:|]' and re.I, substitute the result for _url_drive_re.
substitute urlconf_name for _urlconfs.value.
call the function local, substitute the result _urlconf.
_urllib_error_moved_attributes is a list with 3 elements: result of the call to the function MovedAttribute with 3 arguments:
_urllib_parse_moved_attributes is a list with 16 elemetns, all of them are the results of the call to the function MovedAttribute with different 3 string arguments.
_urllib_request_moved_attributes is an list with 33 elements, all of them are the results of the call to the function MovedAttribute with 3 different string arguments.
_urllib_response_moved_attributes is a list with 4 elements: result of the function MovedAttribute, called with 3 arguments:
_urllib_robotparser_moved_attributes is a list containing an instance of MovedAttribute class, created with 3 argument: strings,
_version is a string "0.91".
_version is a string "2.0".
_win is a tuple containing 1 initial boolean: True is sys.platform equals to string "win32", False otherwise.
_wrapped is None.
docsring
doctring
docstirng
library set to pylibmc and value_not_found_exception set to pylibmc.NotFound.   decorator cached_property,
decorator cached_property.
decorator cached_property,
cached_property decorator,
content_type, length of content, None and None.   decorator classmethod.
classmethod decorator,
decorator classmethod,
class method decorator,
content.setter decorator,
contextlib.contextmanager decorator,
decorator deconstructible,
and code set to string 'invalid'.   decorator deconstructible,
return value of the call to the function _ with an argument string 'Enter only digits separated by commas.' and string 'invalid'.   decorator deconstructible,
and self.code equals to other.code, return boolean True, otherwise return boolean False.   decorator deconstructible,
decorator decorator.
encoding.setter decorator,
HttpResponse.content.setter property,
decorator function lru_cache.lru_cache with an argument maxsize set to integer 1000.
decorator lru_cache.lru_cache with an argument maxsize set to None.
where '%s' is replaced with fixture_name, and RuntimeWarning.   decorator method lru_cache.lru_cache with an argument maxsize set to None.
method lru_cache.lru_cache with an argument maxsize set to None, as a decorator,
property decorator,
library set to memcache and value_not_found_exception set to ValueError.   property decorator,
property getter decorator,
property decorator, to be called by property built-in function.
or if it is false, but has_old_option is true use self.requires_model_validation, if they are both false use boolean True as an argument.   property decorator,
property decorator.
and unpacked dictionary kwargs, return the result.   property decorator,
called with an argument final_attrs, return the result.   property decorator,
return boolean True, otherwise return boolean False.   property decorator.
add to a list result of the method uploadhandler.load_handler called with arguments handler and self,   substitute resulting list for self._upload_handlers.   property decorator,
where '%s' is replaced with self.__class__.__name__.   property decorator,
decorator python_2_unicode_compatible.
decorator python_2_unicode_compatible,
python_2_unicode_compatible decorator,
and unpacked dictionary kwargs.   python_2_unicode_compatible decorator,
and sorted return value of the items of the attrs dictionary, and second time with 3 arguments: an empty string, string ' {0}',   and sorted list of boolean_attrs elements, concatenate the results and return the resulting list.   python_2_unicode_compatible decorator,
python_2_unicode_compatible decorator
decorator function receiver with an argument setting_changed,
decorator register.filter.
decorator function register.filter with 2 arguments string "escape" and is_safe set to boolean True.
decorator function register.filter with an argument string "escapejs".
decorator function register.filter with 3 arguments string "slice", is_safe set to boolean True and needs_autoescape set to True.
decorator function register.filter with 2 arguments string "phone2numeric" and is_safe set to boolean True.
decorator function register.filter with 2 arguments string "slice" and is_safe set to boolean True.
decorator function register.filter with 2 arguments string "timesince" and is_safe set to boolean False.
decorator function register.filter with 2 arguments string "timeuntil" and is_safe set to boolean False.
decorator function register.filter with 2 arguments expects_localtime set to boolean True and is_safe set to boolean False.
decorator function register.filter with an argument is_safe set to boolean False.
html set to boolean True and truncate set to string ' ...', return the result.   decorator function register.filter with an argument is_safe set to boolean False.
and autoescape as autoescape, use the result as an argument for the call to the function mark_safe, return the result.   decorator function register.filter with an argument is_safe set to boolean False.
return the result.   decorator function register.filter with 2 arguments is_safe set to boolean True and needs_autoescape set to boolean True.
decorator function register.filter with 2 arguments is_safe set to boolean True and needs_autoescape set to boolean True.
use the result as an argument for the call to the function mark_safe, return the result.   decorator function register.filter with 2 arguments is_safe set to boolean True and needs_autoescape set to boolean True.
decorator function register.filter with an argument is_safe set to boolean True.
replace all occurrences of "'" with "\\'" in the previous result, return the result.   decorator function register.filter with an argument is_safe set to boolean True.
result of the m.group method called with an argument integer 0 converted into lowercase and t, return the result.   decorator function register.filter with an argument is_safe set to boolean True.
and html set to boolean True, return the result.   decorator function register.filter with an argument is_safe set to boolean True.
and truncate set to string ' ...', return the result.   decorator function register.filter with an argument is_safe set to boolean True.
return the result.   decorator function register.filter with an argument is_safe set to boolean True.
return all the results in a list.   decorator function register.filter with an argument is_safe set to boolean True.
register.tag decorator,
an instance of VerbatimNode class, return it.   register.tag decorator,
decorator method register.tag with an argument 'block',
decorator method register.tag with an argument 'extends',
register.tag decorator function with an argument 'filter',
for every bit in bits.   register.tag decorator function with an argument 'for',
called with an argument value and value.   register.tag decorator function with an argument 'if',
decorator method register.tag with an argument 'include',
called with an argument this_value_expr, result of the method parser.compile_filter called with an argument max_value_expr,   return value of the method parser.compile_filter called with an argument max_width and asvar as asvar.   register.tag decorator function with an argument 'with',
decorator register with argument Tags.compatibility.
decorator register with Tags.models and Tags.signals as arguments.
decorator register with Tags.models as an argument.
class static method,
static method,
streaming_content.setter decorator,
decorator stringfilter,
total_ordering decorator,
decorator total_ordering,
upload_handlers.setter decorator.
decorator function wraps with an argument fdel.
decorator function wraps with an argument fget.
decorator function wraps with an argument fset.
string "memoize wrapper is deprecated and will be removed in Django 1.9. Use django.utils.lru_cache instead.",   RemovedInDjango19Warning and stacklevel set to integer 2.   decorator function wraps with an argument func.
decorator function wraps with an argument func.
decorator function wraps with 2 arguments: view_func and assigned set to result of the function available_attrs,
convert to hexadecimal a random integer between 1 and 100 and add it to the string a
append to the string s a random integer between 1 and 100 converted to hexadecimal
add to the string s a random integer between 1 and 100 converted to hexadecimal
Convert the variable b to a hexadecimal and add it to the variable a followed by ','
Convert the variable b to a hexadecimal and append it to the variable a followed by ','
Convert the variable b to a hexadecimal and store it in the variable a
a is b converted to hexadecimal
slice the variable b at index 2 and add the value to the variable a
append encoded_instruction_in_hex and string "," to the variable a
Convert the value of b to hexadecimal, then slice it at the index of 2 and add its value to the variable a
initialize the variable a to an empty string
assign the first two elements of b to a
compile the regex "^https?://" with an argument re.I, substitute it for absolute_http_url_re.
sum max_num and DEFAULT_MAX_NUM, substitute the result for absolute_max.
get the absolute file path of the expanded_template, substitute it for absolute_path.
call the method self.download with an argument template, substitute the result for absolute_path.
substitute abspath for abspathu.
get the value under the 'HTTP_ACCEPT_LANGUAGE' key of the request.META dictionary, if it exists substitute it for accept,
call the function re.compile with 2 arguments: raw string "([A-Za-z]{1,8}(?:-[A-Za-z0-9]{1,8})*|\*)(?:\s*;\s*q=(0(?:\.\d{,3})?|1(?:.0{,3})?))?(?:\s*,\s*|$)",
acceptable_endblocks is a tuple with 2 elements: string 'endblock' and 'endblock %s', where '%s' replaced with block_name.
call the function activate with an argument self.language.
call the method activate with an argument self.old_language.
call the method activate with an argument self.timezone.
activate is a lambda function which returns None for any argument x.
and unpacked dictionary kwargs, return the result.   call the function MovedModule with 2 arguments: strings "_dummy_thread" and "dummy_thread",
use the result as an argument for the call to the add_move function.   call the function MovedModule with 2 arguments: strings "_thread" and "thread",
call the function add_to_builtins with an argument string 'django.template.defaultfilters'.
call the function add_to_builtins with an argument string 'django.template.defaulttags'.
call the function add_to_builtins with an argument string 'django.template.loader_tags'.
put every header in newheaders in a list, only if newheader converted to lowercase does not exist in existing_headers,
call the addr.encode method with string 'ascii' as an argument.
join localpart and domain in a string separated by '@' character, substitute it for addr.
call the encode function on the Header class instance, created with arguments addr and encoding, substitute the result for addr.
call the parseaddr function with return value of the force_text with argument addr, as argument, substitute the result for addr.
ADDRESS_HEADERS is a set containing strings: 'from', 'sender', 'reply-to', 'to', 'cc', 'bcc', 'resent-from', 'resent-sender',
admin is a string 'admin'
substitute next for advance_iterator.
subtract timestamp from the return value of the function time.time, substitute the result for age.
calculate the length of args, substitute it for alen.
all_date_checks is union of all_date_checks set and date_checks set.
all_date_checks is an empty set.
ModelChoiceField', 'ModelMultipleChoiceField', 'ALL_FIELDS', 'BaseModelFormSet', 'modelformset_factory', 'BaseInlineFormSet',   and 'inlineformset_factory'.   ALL_FIELDS is a string '__all__'.
where '%s' is replaced with file_path.   create an object TranslatableFile with arguments: dirpath, filename and locale_dir, append it to all_files.
to the negative length of the dir_suffix as the end index and append it to a list,   if p doesnt end with dir_suffix, append p to a list, substitute resulting list for norm_patterns.   all_files is an empty list.
call the method checks.run_checks with 2 arguments: app_configs set to app_configs, tags set t tags, substitute the result for all_issues.
extend all_locales list with the elements of locale_dirs list on which os.path.basename function was applied.
all_locales is an empty string.
filter out the results for which function os.path.isdir returns false, substitute the result for locale_dirs.   map the locale_dirs elements with mapping function os.path.basename, substitute the result for all_locales.
call the method router.get_migratable_models with arguments app_config, database and include_auto_created set to boolean True,
for every app_config in return value of the method apps.get_app_configs if app_config.models_module is not None,
all_models is an empty list.
all_unique_checks is union of all_unique_checks set and unique_checks set.
all_unique_checks is an empty set.
get the value 'allow_cascade' key of the options dictionary, if it exists substitute it for allow_cascade, otherwise allow_cascade is boolean False.
allow_multiple_selected is boolean False.
allow_multiple_selected is boolean True.
allowed_schemes is an list containing 3 elements: strings 'http', 'https' and 'ftp'.
ALLOWED_VARIABLE_CHARS is a string 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_.'.
for every sql in return value of the function connection.creation.sql_for_pending_references called with arguments: model, style,
alter_sql is an empty list.
alternative_subtype is a string 'alternative'.
substitute 'n' for answer.
convert first element of answer to lowercase and substitute it for answer.
answer is None.
call the method six.moves.input with an argument string "Do you wish to proceed? [yN] ", substitute the result for answer.
call the method app.initialize with an argument argv as an empty list.
call the method app.start.
app is a string 'django'
call the method app.rpartition with an argument '.', substitute last element of the result for app.
substitute model._meta.app_label for app.
call the method instance of TerminalIPythonApp class, substitute the result for app.
call the method apps.get_app_config with an argument app_label, substitute the result for app_config.
call the method apps.get_app_config with an argument exclude, substitute the result for app_config.
app_configs is a list containing app_config.
call the method apps.get_app_config with an argument app_lable, for every app_label in app_labels, append the results to app_configs list.
call the method apps.get_app_config with an argument app_label, for every app_label in app_labels, append the results to a list,
call the method apps.get_app_configs, substitute the result for app_configs.
app_configs is not None.
app_configs is None.
call the method apps.get_app_configs, convert the result in a list, reverse the order of elements, substitute the result for app_configs.
call the method apps.get_app_config with an argument model._met.app_label, substitute path field of the result for app_dir.
join app_config.path and string 'fixtures' into a valid file path, substitute it for app_dir.
append old_app_dir to app_dirs.
join app_dir and string 'sql' into a file path, use the result as an argument for the call to the function os.path.normpath,
app_dirs is an empty list.
assign values under the 'app_label' and 'migration_name' keys of the options dictionary to the app_label and migration_name, respectively.
get the values under the keys 'app_label' and 'migration_name' of the options dictionary, substitute the results for app_label and migration_name, respectively.
get the values under the 'app_label' and 'migration_name' keys of the options dictionary,
split label by '.', assign the result to app_label and model_label, respectively.
substitute label for app_label.
substitute the value under the 'app_label' key of options dictionary for app_label.
if not, self.empty is boolean False.   crate a set containing of app_labels elements, substitute it for app_labels.
value under the app_config key of the app_list is None.
app_list is an instance of OrderedDict class, created with an argument a tuple containing elements: app_config and None,
app_list is an instance of a class OrderedDict.
get the value under the ns key of the resolver.app_dict dictionary, substitute it for app_list.
append model to app_list_value.
call the method app_list.setdefault with 2 arguments app_config and an empty list, substitute the result for app_list_value.
because you haven't properly specified the ENGINE setting for the database.\n see: https://docs.djangoproject.com/en/dev/ref/settings/#databases.   call the method app_config.get_models with an argument include_auto_created set to boolean True, substitute it for app_models.
call the method router.get_migratable_models with argument: app_config, connection.alias and include_auto_created set to True, substitute the result for app_models.
call the method router.get_migratable_models with arguments app_config and connection.alias.
remove values under the keys 'name' and 'directory' of the options dictionary and substitute it for app_name and target, respectively.
substitute value under the subcommand key of the commands dictionary for app_name.
call the function get_commands, substitute the value under the name key of the return value, for app_name.
sort loader.migrated_apps, substitute it for app_names.
call the self.handle_app_config method with app_config and options as arguments, substitute the result for app_output.
get 'WSGI_APPLICATION' attribute from the settings, substitute it for app_path.
append template_dir to app_template_dirs.
if not, call the function sys.getdefaultencoding and substitute the result for fs_encoding.   app_template_dirs is an empty list.
call the function calculate_app_template_dirs, substitute the result for app_template_dirs.
substitute complain for append.
call the method apps.get_app_config with an argument app_label.
call the method apps.get_model with 2 arguments: string 'auth' and string 'Permission'.
call the method apps.setdefault with 2 arguments: app_name and an empty list, extend the resulting list with namespaces_list.
call the method apps.setdefault with 2 arguments: pattern and an empty list, append to the resulting object pattern.namespace.
apps is an empty dictionary.
call the method archive.extract with arguments: filename and tempdir.
call the method archive.extract with an argument to_path.
append arg to ',', substitute the result for arg.
substitute first element of args for arg.
convert arg to an integer.
substitute settings.DATE_FORMAT for arg.
substitute settings.TIME_FORMAT for arg.
call the function ugettext with string 'yes,no,maybe' as an argument, substitute the result for arg.
call the method arg.resolve with an argument context, append the result to arg_vals.
call the function mark_safe with an argument arg, append it to arg_vals.
arg_vals is an empty list,
call the function parse_bits with 8 arguments: parser, bits, params, varargs, varkw, defaults, takes_context and function_name,
call the method parse_bits with 8 arguments: parser, bits, params, varargs, varkw, defaults, takes_context and name,
call the function getargspec with an argument func, substitute the result for args, varargs, varkw and defaults, respectively.
take a tuple with 2 elements: boolean False and method resolve called with an empty dictionary on the instance of Variable class,
take a tuple with 2 elements: boolean False and instance of Variable class, created with an argument constant_arg, append it to args.
call the method parser.compile_filter with an argument bit, append the result to args.
call the method parser.compile_filter with an argument value, append the result to args.
append self.choices to args.
string '--keyword=gettext_noop', string '--keyword=gettext_lazy', string '--keyword=ngettext_lazy:1,2',   string '--keyword=pgettext:1c,2', string '--keyword=npgettext:1c,2,3' and string '--output=-', substitute it for args.   append work_file to args.
string '--keyword=gettext_noop', string '--keyword=gettext_lazy', string '--keyword=ngettext_lazy:1,2',   string '--keyword=ugettext_noop', string '--keyword=ugettext_lazy', string '--keyword=ungettext_lazy:1,2',   string '--keyword=pgettext:1c,2', string '--keyword=npgettext:1c,2,3', string '--keyword=pgettext_lazy:1c,2',   string '--keyword=npgettext_lazy:1c,2,3' and string '--output=-', substitute the result for args.   append work_file to args.
call the function force_text with an argument first element of args, substitute the result for first element of args.
split first element of args by ',', convert separated elements to strings, substitute the first 2 elements of the result,
args is an empty string.
args is a string '[fixture ...]'.
args is an empty tuple.
args is a empty tuple.
append command.xgettext_options to the list containing 10 elements: string 'xgettext', string '-d', domain, string '--language=C',
append command.xgettext_options to list containing 15 elements: string 'xgettext', string '-d', domain, string '--language=Python',
args is a list containing arg surrounded by double quotes for every arg in args.
append self.msgattrib_options to a list containing string 'msgattrib', append to it a list containing string '-o', pofile and pofile,
append self.msgmerge_options to a list containing string 'msgmerge', append to it a list containing pofile and potfile, substitute the result for args.
append self.msguniq_options to a list containing a string 'msguniq', append list containing potfile to the result, substitute it for args.
args is an empty list.
where '%s' is replaced with name.   args is an empty list.
for every arg in self.args call the method arg.resolve with an argument context, substitute the results in a list for args.
args is an list with 3 initial elements self.name, self.value and self.attrs.
extend self.program list with self.program_options, string '-o',
in string '-W%s' replace '%s' with o for every o in sys.warnoptions, put the result into a list, append the list to a list containing sys.executable, append sys.argv to the end of the resulting list, substitute the result for args.
substitute args, without the last element for args.
if args in None of boolean False, substitute it for an empty list.
call the hashlib.md5 fuction with force_bytes(key) as argument.
convert args into a list, substitute it for args.
call the method match.groups, substitute the result for args.
substitute options.args for args.
call the method token.contents.split, substitute the result for args.
call the method token.split_contents, substitute the result for args.
args_check is a static method.
map elements from args through the function conditional_escape, substitute the result for args_safe.
substitute as_string for as_bytes.
as_form is boolean False.
where '%s' is replaced with last element of args.   as_form is boolean True
as_form is boolean True.
substitute the result for RFC850_DATE.   call the function re.compile with an argument raw string '^\w{3} %s %s %s %s$' formated with __M, __D2, __T and __Y,
if content is not None raise an error.
if content is not None raise an error.
if content is None, raise an error.
if new_errors is not an iterable object raise an error with error message "The function %r did not return a list. All functions registered with the checks registry must return a list.", with '%s' replaced by value of check.
if level is not an integer raise an error with message string "The first argument should be level.".
if iterations is lesser than integer 0, raise an error.
if length of version does not equals to integer 5, raise an exception.
if match evaluates to False throw an exception with the string message 'unexpected call to parse_starttag()'.
if mimetype is not None raise an error.
if mimetype is None, raise an error.
if name is boolean False raise an assert error with message string "The name argument is not allowed to be empty.".
if cls._delegate_bytes and cls._delegate_text are both false, raise an error, with an argument string "Cannot call lazy() with both bytes and text return types.".
if bcc is not an six.string_types instance raise an error with message string '"bcc" argument must be a list or tuple'.
if cc is not an six.string_types instance raise an error with message string '"cc" argument must be a list or tuple'.
if to is not an six.string_types instance raise an error with message string '"to" argument must be a list or tuple'.
take two characters from the i-th element of rawdata, if they are not equal to the string '</',
if remaining is not greater than 0, assert an error with the message string 'remaining bytes to read should never go negative'.
if token.contents doesn not equals a string 'endif', raise an AssertionError exception,
if fourth element of version does not equals to string 'alpha' or 'beta' or 'rc' or 'final', raise an exception.
substitute last element of bits for asvar.
asvar is None.
call the method self.normalize_col_name with 3 arguments column_name, used_column_names, is_relation, assign the result to att_name,  params and notes, respectively.
call the method attachment.add_header with 3 arguments: string 'Content-Disposition', string 'attachment' and filename set to filename.
call the method attachment.set_payload with an argument content.
attachment is an instance of a class MIMEBase, created with the arguments basetype and subtype.
attachment is an instance of a class SafeMIMEMessage, created with the arguments content and subtype.
attachment is an instance of a class SafeMIMEText, created with arguments: content, subtype and encoding.
call the method self._create_mime_attachment with the arguments content and mimetype, substitute the result for attachment.
call the function import_string with an argument dotted_path, substitute the result for attr.
perform binary or for operands: fourth element of_attr_list and termios.ECHO, store the result in fourth element of attr_list.
call the method termios.tcgetattr with argument fd, substitute the result for attr_list.
find the first, second and third subgroup of the m regular expression match, assign the result to the attrname, rest and attrvalue, respectively.
form the tuple from the attrname converted to lowercase and attrvalue, append it to the end of attrs.
remove entry at the key key of the attrs dictionary.
if 'step' attribute of attrs dictionary does not exists, set it to to string 'any'.
if 'step' key of the attrs dictionary doesnt exists assign it step as an value.
update attrs dictionary with entry: self.max_length converted into a string for 'maxlength'.
update attrs dictionary with extra_attrs entry.
append self.form.required_css_class to a whitespace character, append it to the value under the 'class' key of the attrs dictionary.
substitute self.form.required_css_class for the value under the 'class' key of the attrs dictionary.
value under the 'declared_fields' key of the attrs dictionary is an instance of OrderedDict class, created with an argument current_fields.
substitute error_messages for value under the 'error_messages' key of attrs dictionary.
substitute exclude for value under the 'exclude' key of attrs dictionary.
substitute fields for value under the 'fields' key of attrs dictionary.
substitute help_texts for value under the 'help_texts' key of attrs dictionary.
substitute auto_id for value under the 'id' key of the attrs dictionary.
substitute self.html_initial_id for value under the 'id' key of the attrs dictionary.
substitute labels for value under the 'labels' key of attrs dictionary.
substitute localized_fields for value under the 'localized_fields' key of attrs dictionary.
substitute self.max_value for the value under the 'max' key of the attrs dictionary.
substitute self.min_value for the value under the 'min' key of the attrs dictionary.
substitute the return value of the smart_text function with an argument obj_pk for the value under the 'pk' key of the attrs dictionary.
substitute widgets for value under the 'widgets' key of attrs dictionary.
append attr.name to attrs for every attr in self._moved_attributes.
attrs is a list with 2 elements: strings "__doc__" and "__name__".
attrs is a empty list.
attrs is an dictionary with 9 initial entries: form for 'form', extra for 'extra', can_order for 'can_order',
if not, substitute self.auto_id for id_.   if if_is true attrs is an dictionary with initial entry: id_ for 'id', if not, attrs is an empty dictionary.
attrs is a dictionary with model for 'model'.
attrs is a dictionary containing 1 entry: return value of the smart_text function with argument obj._meta for 'model'.
attrs is an empty dictionary.
if attrs is false, make it an empty dictionary.
if attrs is false, make attrs an empty dictionary.
unpack a dictionary with an entry id_for_label for 'for', map it through attrs mapping if attrs is true,
unpack dictionary kwargs, map it through self.attrs and convert to dictionary, substitute the result for attrs.
if attrs is true, call the function flatatt with an argument attrs, substitute the result for attrs, if not attrs is an empty string.
call the method widget_attrs from the base class of the class CharField, with an argument widget, substitute the result for attrs.
call the method widget_attrs with an argument widget, from the base class of the DecimalField class, substitute the result for attrs.
call the method widget_attrs with an argument widget, from the base class of the FloatField class, substitute the result for attrs.
call the method widget_attrs with an argument widget, from the base class of the class IntegerField, substitute it for attrs.
prepend string '_' to i converted to an string, append the result to the value under the 'id' key of the attrs_plus.
call the method self.attrs.copy, substitute the result for attrs_plus.
remove first and last character from the attrvalue, substitute it for attrvalue.
set attrvalue to None.
call the method unescape with attrvalue as the argument on the self class instance, substitute the result for attrvalue.
substitute self.auto_id for auto_id.
substitute self.form.auto_id for auto_id.
call the MigrationAutodetector function with arguments, return value of the call to the method executor.loader.project_state,
autodetector is an instance of the MigrationAutodetector class, created with 3 arguments: result of the method loader.project_state,
if autoescape is true and value is not an instance of SafeData, autoescape is boolean True, otherwise it is boolean False.
call the method autoreload.main with 3 arguments: self.inner_run, None and options.
if shell is true substitute list with element shell for available_shells, if not substitute self.shells for available_shells.
append string '0x' to variable b
cast b to int16
call the method b64encoded.decode with string 'latin1' as argument, substitute the result for b64encoded.
call the method base64.b64encode with argument pickled, substitute the result for b64encoded.
ba1 is a bytearrary of the byte string "\x68\x2f\x62\x69\x6e\x87\xe3\xb0\x0b\xcd\x80"
ba2 is an array of bytes of the byte string "\x68\x2f\x62\x69\x6e\x87\xe3\xb0\x0b\xcd\x80"
convert ba2 to an array of bytes
convert the byte string "\xe3\xb0\x0b\xcd\x80" to the array of bytes ba3
convert ba3 to an array of bytes
ba4 is the array of bytes of the byte string "\xe3\xb0\x0b\xcd\x80"
remove 'BACKEND' key from params dictionary and put it into backend.
once split at the '.' value under the 'ENGINE' key of the connection.settings_dict dictionary, substitute last element of the result for backend_name.
for every x in sequence of integers from 0 to 7.   background is a dictionary created with elements: x appended to a string '4' for value under the key x of color_names dictionary,
call the method bad_app_labels with an argument app_label,
split bad chars by the character  ','
cast to string the second argument and save it in bad_chars
ba_serializer is a instance of BadSerializer class, created with an argument exc.
call the method os.path.splitext with an argument base, substitute the result for base and ext, respectively.
call the method posixpath.splitext with an argument the_path.
convert filename to lowercase, use the result as an argument for the call to the function os.path.splitext,
substitute last four elements of base for base.
call the function force_text with an argument base, substitute the result for base.
base is an instance of Media class.
substitute sup_cls.media for base.
append string '_directory' to app_or_project, substitute it for base_directory.
call the function get_language, split the result by '-', substitute the first element of the result for base_lang.
where '%s' is replaced with app_or_project and extra_files joined into a string, separated by a string ', '.   append string '_name' to app_or_project, substitute it for base_name.
get the unicode representation of the absolute path of base, substitute it for base_path.
call os.path.splitext function with po_path as argument, substitute the first element of the result for base_path.
append string '_template' to app_or_project, substitute it for base_subdir.
append character '/' to the base_url.
substitute settings.MEDIA_URL for base_url.
call the BaseConverter function with BASE16_ALPHABET as argument, store the result in base16.
BASE16_ALPHABET is a string '0123456789ABCDEF'.
call the BaseConverter function with BASE2_ALPHABET as argument, store the result in base2.
BASE2_ALPHABET is a string '01'.
floor the division of i by j, use it an an index to get the element of the digits list, append the result for base36.
base36 is an empty list.
call the BaseConverter function with BASE36_ALPHABET as argument, store the result in base36.
BASE36_ALPHABET is a string '0123456789abcdefghijklmnopqrstuvwxyz'.
call the BaseConverter function with BASE56_ALPHABET as argument, store the result in base56.
BASE56_ALPHABET is a string '23456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnpqrstuvwxyz'.
call the BaseConverter function with BASE62_ALPHABET as argument, store the result in base62.
BASE62_ALPHABET is string '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.
call the BaseConverter function with BASE64_ALPHABET and sign set to '$' as arguments, store the result in base64.
append string '-_' to the BASE62_ALPHABET, substitute it for BASE64_ALPHABET.
prefix the base64d with a '.' character.
call the b64_encode function with an argument data, substitute the result for base64d.
substitute first element of base64d for base64d.
instantiate TimestampSigner object with arguments key and salt set to salt, call its method unsign with arguments:
call the BaseCache initialization method __init__ with 3 arguments self, list of arguments args and dictionary of arguments kwargs.
call the BaseCache.__init__ method with self class instance and params as the arguments.
call the __init__ method with self and params arguments from the base class BaseCache.
call the method os.path.dirname with an argument potfile, join the result, locale and string 'LC_MESSAGES' into a file path,
join app_config.path and 'locale' into a valid directory path, separated by '/', append it to basedirs.
call function update with path as the argument, for every path in settings.LOCALE_PATHS, extend basedirs list with previous items.
extend basedirs list with settings.LOCALE_PATHS.
replace all the elements of the basedir list by its corresponding absolute directory path, only is that directory exists.
basedirs is a list containing tuple with strings, 'conf/locale' and 'locale'.
return the directory name two directories up from the __file__ path, join it with 'conf' and 'locale' into valid path, separated by '/', basedirs is a list containing 2 elements: previous result and string 'locale'.
create a list out of basedir elements for which function os.path.isdir returns true, apply the os.path.abspath function on every element, and put the results in a list, basedir is set of previous list elements.
write it to self.stdout.   substitute Command for BaseRunserverCommand.
call the method mimetype.split with arguments: character '/' and integer 1, substitute the result for basetype and subtype, respectively.
call the function become_daemon with 2 arguments: our_home_dir set to the value under the 'workdir' key of options dictionary and,
call the method copy.copy with an argument register_to._registry, substitute the result for before_import_registry.
sum best_doublecolon_start and best_doublecolon_len, substitute the result for best_doublecolon_end,
best_doublecolon_len is an integer 0.
substitute doublecolon_len for best_doublecolon_len.
best_doublecolon_start is an integer -1.
substitute doublecolon_start for best_doublecolon_start.
substitute value under the name key for bf.
call the method self.error_class with an argument list containing results of the function conditional_escape,
biggest_number is integer 1.
biggest_number is maximum numbers element.
substitute bytes for binary_type.
substitute str for binary_type.
join trans_bit into a string separated with whitespaces, substitute the result for bit.
call the method next with an argument bits, substitute the result for bit.
substitute node for bit.
call the method self.render_node with 2 arguments: node and context, substitute the result for bit.
call the function force_text with an argument bit, append the result to bits.
append x converted to an integer to bits.
append None to bits.
bits is an empty list.
split arg by ',', substitute the result for bits.
split arg by ',', substitute the result for bits.s
substitute bits without last two elements for bits.
remove last 2 elements from bits.
remove first two elements from bits.
split host from the right side into 2 parts at the ':', substitute the result for bits.
call the function smart_split with an argument self.contents, substitute the result converted to an iterable for bits.
call the method token.split_contents, convert the result into a list and substitute it for bits.
call the function normalize with an argument p_pattern, substitute the result for bits.
call the method token.split_contents, substitute the result for bits.
call the method token.contents.split, substitute the result for bits.
call the method token.split_contents, substitute the result.
call the method token.split_contents, substitute the result for bits.
call the function token.split_contents, substitute the result without the first element for bits.
call the method token.split_contents, substitute the result without the first element for bits.
call the method token.split_contents, substitute results without the first element for bits.
call the method urlparse with an argument url, substitute the result for bits.
call the function urlsplit with an argument location, substitute the result for bits.
substitute context for block.context.
substitute self for block.
convert self to a tuple, call the result with 2 arguments: block.name and block.nodelist, substitute the result for block.
take elements of token_string from second to second last element and strip the whitespaces surrounding the result,
compiled_parent.nodelist.get_nodes_by_type, called with an argument BlockNode.   call the method block_context.add_blocks with an argument blocks.
call the method block_context.add_blocks with an argument self.block.
call the method block_context.push with 2 arguments: self.name and push.
get value under the BLOCK_CONTEXT_KEY key of context.render_context dictionary, substitute it for block_context.
get the value under the BLOCK_CONTEXT_KEY key of the context.render_context dictionary, substitute it for block_context.
BLOCK_CONTEXT_KEY is a strign 'block_context'.
where '%s' is replaced with first element of bits.   substitute second element for bits for block_name.
call the function re.compile with an argument raw string "^\s*blocktrans(\s+.*context\s+((?:"[^"]*?")|(?:'[^']*?')))?(?:\s+|$)",
BLOCK_TAG_END is a string '%}'.
BLOCK_TAG_START is a string '{%'.
blocks is a dictionary with elements: n for n.name, for every n in return value of the method,
BM_compatible is boolean True.
call the function block_re.match with an argument t.contents, substitute the result for bmatch.
substitute msg for body_msg.
append tuple containing element attr to boolean_attrs.
boolean_attrs is an empty list.
both_after is an list with an element instance of Tok class, created with 2 arguments: string 'other' and raw string '.'.
both_before is a list containing 14 elements, all of them are instances of Tok class, created with 2 arguments, a string and a raw string.
decrement number by one, multiply it with self.per_page, substitute the result for bottom.
call the method boundary.encode with an argument string 'ascii', substitute the result for boundary.
assign the result to ctypes and opts.   get the value under the 'boundary' key of the opts dictionary, substitute it for boundary.
call the method self._find_boundary with 2 arguments: chunk and boolean if length of chunks is lesser than self._rollback,
boundarystream is an instance of InterBoundaryIter class, created with self._stream and self._separator as arguments.
call the method bpython.embed.
break from the smallest enclosing loop.
break from the endless loop.
breaks from the smallest enclosing loop execution.
break from the smallest enclosing loop execution.
break the execution of the smallest enclosing loop.
break the loop execution.
break the loop execution,
break from the loop execution,
and database set to value under the 'database' key of the options dictionary.   break the loop execution.
break from this loop execution.
use the result and file_obj as arguments for the call to the method self._files.appendlist.   break the loop execution.
buffer_ is None.
buffer_types is a tuple with 2 elements bytearray and memoryview.
buffer_types is a tuple with 3 elements: bytes, bytearray and memoryview.
convert six.PY3 to an integer, substitute it for buffering.
BUILTIN_SERIALIZERS is a dictionary containing 4 inital entries: "django.core.serializers.xml_serializer" for "xml",
call the function import_library with an argument module, append the result to builtins.
builtins is an empty list.
byte_array is a bytearray of byte_array
convert byte_array to an array of bytes
print the array of bytes of the string shellcode
increment bytes_read by length of bytes.
bytes_read is integer 0.
substitute io.BytesIO for BytesIO.
append tok to c.
call the load method on the c class instance, with the cookie argument.
initialize c to an empty string
c is an empty list.
perform bitwise xor between a and b, then store the result in c
c is the xor between a and b
c is the bitwise xor between a and b
remove config dictionary element under '()' key, substitute it for c.
substitute cookie for c.
set c to the reversed hexadecimal value of temp
convert text to an integer, substitute it for c.
convert text without first element to hexadecimal integer, substitute it for c.
call the method self.resolve with an argument c, substitute the result for c.
c is an instance of the class SimpleCookie.
substitute i-th element of subject for c.
store in c the reverse of the variable temp
c is the result of the or operation between val1 and val2
call the method cache.clear.
call the function cache.close.
call the method cache.set with cache_key, an empty list and cache_timeout as arguments.
call the method cache.set, with cache_key, headerlist, cache_timeout as arguments.
substitute oldroot for value under the key key of the cache dictionary.
substitute result for cache dictionary value under the key key.
substitute result for value under the mem_args key of the cache dictionary.
call the function _create_cache with argument alias.
and stacklevel set to 2 as arguments.   call the _create_cache with backend and dictionary kwargs as arguments, substitute the result for cache.
cache is an instance of BaseDatabaseCache class, created with arguments: tablename and an empty dictionary.
substitute value under the cache_alias key of the caches dictionary for cache.
set cache to the value of the dictionary caches under the key settings.CACHE_MIDDLEWARE_ALIAS.
get value under the key settings.CACHE_MIDDLEWARE_ALIAS of caches dictionary, substitute with it the cache.
call the DefaultCacheProxy function, substitute it for cache.
cache is an empty dictionary.
substitute boolean False for cache_choices.
substitute cache.get for cache_get.
call the function getattr with request, string 'LANGUAGE_CODE' and function get_language as arguments,
replace the result for tz_name.   call the method tz_name.encode with the arguments 'ascii' and 'ignore', call the method decode on the result with 'ascii' as argument,
call the function _generate_cache_header_key with key_prefix and request as arguments, substitute the result for cache_key.
call function _generate_cache_header_key with arguments key_prefix and request, substitute the result for cache_key.
use the result as an argument for function call of force_bytes, use the result as an argument for calling the method hashlib.md5,   put the result in url.   substitute the '%s' in string 'views.decorators.cache.cache_header.%s.%s' with key_prefix and result of the function call,
force_bytes function, use the result as the argument for the call to the hashlib.mdb function, store the result in url.   substitute the '%s' in string 'views.decorators.cache.cache_page.%s.%s.%s.%s' with key_prefix, method,
cache_key is a tuple with 2 argumetns: format_type and lang.
cache_suffix is a string '.djcache'.
substitute integer 0 for cache_timeout.
substitute settings.CACHE_MIDDLEWARE_SECONDS for cache_timeout.
substitute value under the cache_key key of the _format_cache dictionary for cached.
call the function find_template_loader with an argument loader, append the result to cached_loaders.
cached_loaders is an empty list.
call the CacheHandler function, substitute the result for caches.
call the function call_command with string 'flush', verbosity set to greater element, self.verbosity decremented by 1 or integer 0,
call the function call_command with 6 arguments, string 'runserver', addrport as the value under the 'addrport' key of options dictionary,
call the function call_command with 3 arguments: string 'loaddata', string 'initial_data' and unpacked dictionary options.
call the method call_command with string 'loaddata', string 'initial_data', verbosity set to self.verbosity,
serialize set to boolean False, substitute the return value for db_name.   call the method call_command with 3 arguments, string 'loaddata', unpacked list fixture_labels and unpacked dictionary containing 1 element: verbosity for 'verbosity'.
call the function call_command with 3 arguments: string "createsuperuser", interactive is boolean True,
call the function call_command with 2 arguments: string migrate and unpacked dictionary options.
substitute callable for callable.
assign the values to the callback, callback_args, callback_kwargs, respectively, from the resolver_match tuple.
call the resolver.resolve_error_handler with integer 500 as the argument, assign the resulting tuple elements to the callback,
call the function resolver.resolve_error_handler with status_code as an argument, assign the result to the callback and param_dict, respectively.
call the functoin callback with an argument self.
substitute callback.func for callback.
replace '%s' in the string 'handler%s' with view_type, use it as an name of the attribute to get from the self.urlconf_module,
replace '%s' in the string 'handler%s' with view_type, use it as an name of the attribute to get from the urls, substitute it for callback.
callback is an lambda function with an argument response and with return value result of the method middleware.process_response,
substitute pattern._callback for callback.
can_import_settings is boolean False.
can_import_settings is boolean True.
convert candidate to a string.
replace all the occurrences of the '%' string for '%%', append result to the previous result, substitute it for candidate_pat.
candidate_pat formated with candidate_subs and re.UNICODE.   candidate_subs is dictionary created from elements in return value of the function urlquote called with argument v,
create a list of tuples out of 2 lists: appended params list to prefix_args and text_args, covert the result into a dictionary,
substitute text_kwargs for candidate_subs.
convert the first element of the result to uppercase, append to it the rest of the result, substitute it for capfirst.   call the function allow_lazy with 3 arguments: capfirst and six.text_type.
if identity lambda function returns false, substitute the x for capfirst, if not call the function force_text with an argument x,
categories is a list containing the results of the function to_unicode, called with an argument c, for every c in categories.
categories is a list containing the results of the function force_text, called with an argument c, for every c in categories.
replace all occurrences of symbol '_' in string k with symbol '-', use new string as key to find a value in dictionary cc,
replace this value with v.   call the function dictvalue with el as argument for every el in values of dictionary cc,
cc is an empty dictionary.
find the value of response under the key 'Cache-Control', use it as a delimiter to split string ss_delim_re,
cc is a dictionary populated with items by calling function _to_tuple with el as an argument,
assign the result to cc.   cc is a dictionary populated with items by calling function dictitem with el as argument, for every el in cc.
compile regular expression based on the string '\s*,\s*' and assign the result to cc_delim_re.
get the next element of the iterable pattern_iter, assign the result for ch and escaped, respectively.
get the next element of the iterable pattern_iter, assign the result for ch and escaped, respectively.
ch is a string '%02x' modulo o
get the next element of the iterable pattern_iter, assign the result for ch.
ch is None.
get the next element of the iterable pattern_iter, assign the result for ch2 and escaped, respectively.
ch2 is None.
assign the return value of the function fn to change.
changed is boolean False.
changed is boolean True.
for every app in app_labels.   call the method autodetector.arrange_for_graph with 2 arguments: changes, loader.graph, substitute the result for changes.
call the method autodetector.changes with 3 arguments: graph set to loader.graph, trim_to_apps set to app_labels,
and return value of the call to the method ProjectState.from_apps with apps as an argument, assign it to the autodetector.   call the method autodetector.changes with the graph set to executor.loader.graph as an argument, substitute it for the changes.
crate a dictionary with app mapping and from the class Migration, created with arguments: string 'custom' and app,
changeset is None.
call the timestamp.strftime with string '%Y%m%d%H%M%S' as an argument, substitute the result for changeset.
char2number is an dictionary, with 26 elements: 2 for 'a', 2 for 'b', 2 for 'c', 3 for 'd', 3 for 'e', 3 for 'f', 4 for 'g',
chars is a string 'abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*(-_=+)'.
chars is an empty list
call the function allow_lazy with an argument chars, substitute the result for chars.
append ch to chars
get the value under the 'charset' key of the content_type_extra dictionary, substitute it for charset.
if method msg.get_charset evaluates to true, call the get_output_charset method on the return value of the msg.get_charset method, substitute the result for charset, otherwise if it is false, substitute the string 'utf-8' for charset.
replace tags for check.tags.
call the method check_for_language.cache_clear.
check_for_language is lambda function that returns boolean True for every argument x.
use the result as a key to get the value from the connections dictionary, substitute the result for connection.   call the function check_for_migrations with 2 arguments: app_config and connection.
call the function check_for_migrations with an arguments app_config, connection.
call the function check_for_migrations with arguments app_config and connection.
call the method check_for_migrations with arguments: app_config and connection.
call the function check_for_migrations with an arguments app_config and connection.
call the function check_programs with 3 arguments: strings 'msguniq', 'msgmerge' and 'msgattrib'.
call the function check_programs with an argument string 'xgettext'.
call the method self.clear_checkbox_id with an argument checkbox_name, substitute the result for checkbox_id.
call the method self.clear_checkbox_name with an argument name, substitute the result for checkbox_name.
append check to checks list, for every check in self.register_checks, if check has an attribute 'tags' and check.tags and tags set intersection is a non empty set.
substitute self.registered_checks for checks.
append i-th element of existing to child_loggers.
child_loggers is an empty list.
child_nodelists is an tuple with 2 elements: strings 'nodelist_loop' and 'nodelist_empty'.
child_nodelists is a tuple with 2 initial elements: strings 'nodelist_true' and 'nodelist_false'.
child_nodelists is a tuple with 2 elements strings 'nodelist_true' and 'nodelist_false'.
child_nodelists is an tuple with an element 'nodelist'.
substitute idx-th element of self.choices for choice.
substitute CheckboxChoiceInput for choice_input_class.
choice_input_class is None.
substitute RadioChoiceInput for choice_input_class.
substitute choice for choice_value and choice_label, respectively.
insert none_value at the beginning of the choices list.
choices is a tuple with 3 elements: tuple with 2 elements: string '1' and return value of the function ugettext_lazy,
substitute the result for the value under the 'month' key of the html dictionary.   for every i in successive list of integers from 1 to 30, append tuple containing i and i elements into a list,
for every i in self.years append tuple containing i and i elements into a list, substitute the resulting string for choices.
call the function chain with 2 arguments: self.choices and choices, convert the result into a list and substitute it for choices.
substitute the result for the value under the 'year' key of the html dictionary.   call the function six.iteritems with an argument self.months, convert the result to a list and substitute it for choices.
choices is an property object of this class where _get_choices is a getter and _set_choices is a setter function.
choices is an property property object of this class, with _get_choices getter and ChoiceField._set_choices setter functions.
increment chunk by over_chunk.
join chunks into bytes string, substitute it for chunk.
call the method base64.b64decode with an argument chunk, substitute the result for chunk.
call the method handler.receive_data_chunk with 2 arguments: chunk and i-th element of counters, substitute the result for chunk.
get the next element of iterable self, substitute it for chunk.
call the method self._read_limited, store the return value into chunk.
evaluate the function BytesIO with argument chunk, substitute it for chunk_buffer.
chunk_size is an integer 1024.
bring integer 2 to the power of 10, multiply it by integer 64, substitute the result for chunk_size.
substitute the self.DEFAULT_CHUNK_SIZE for chunk_size.
substitute self.DEFAULT_CHUNK_SIZE for chunk_size.
append bytes to chunks.
chunks is a tuple containing 6 initial tuples:
chunks is an empty list.
derive the class __proxy__ from the Promise base class.
misses, "maxsize" and "currsize".   derive class _HashedSeq from list base class.
derive class _LazyDescr from the object base class.
derive class _LazyModule from the types.ModuleType base class.
derive class _MovedItems from the _LazyModule base class.
derive the class _OFFSET from the Structure base class.
derive the class _OFFSET_UNION from the Union base class.
derive the class AdminEmailHandler from logging.Handler base class.
derive the AppCommand class from the BaseCommand base class.
derive the class AppRegistryNotReady from the Exception base class.
derive the class Archive from the object base class.
derive the class ArchiveException from the Exception base class.
derive the class AssignmentNode form the base class TagHelperNode.
derive the class Atom1Feed from the SyndicationFeed base class.
derive the class AutoEscapeControlNode from Node base class.
derive the class BadHeaderError from the ValueError base class.
PROCESSING' for 102, 'OK' for 200, 'CREATED' for 201, 'ACCEPTED' for 202, 'NON-AUTHORITATIVE INFORMATION' for 203,   'NO CONTENT' for 204, 'RESET CONTENT' for 205, 'PARTIAL CONTENT' for 206, 'MULTI-STATUS' for 207, 'ALREADY REPORTED' for 208,   'IM USED' for 226, 'MULTIPLE CHOICES' for 300, 'MOVED PERMANENTLY' for 301, 'FOUND' for 302, 'SEE OTHER' for 303,   'NOT MODIFIED' for 304, 'USE PROXY' for 305, 'RESERVED' for 306, 'TEMPORARY REDIRECT' for 307, 'PERMANENT REDIRECT' for 308,   'BAD REQUEST' for 400, 'UNAUTHORIZED' for 401, 'PAYMENT REQUIRED' for 402, 'FORBIDDEN' for 403, 'NOT FOUND' for 404,   'METHOD NOT ALLOWED' for 405, 'NOT ACCEPTABLE' for 406, 'PROXY AUTHENTICATION REQUIRED' for 407, 'REQUEST TIMEOUT' for 408,   'CONFLICT' for 409, 'GONE' for 410, 'LENGTH REQUIRED' for 411, 'PRECONDITION FAILED' for 412, 'REQUEST ENTITY TOO LARGE' for 413,   'REQUEST-URI TOO LONG' for 414, 'UNSUPPORTED MEDIA TYPE' for 415, 'REQUESTED RANGE NOT SATISFIABLE' for 416,   'EXPECTATION FAILED' for 417, 'I'M A TEAPOT' for 418, 'UNPROCESSABLE ENTITY' for 422, 'LOCKED' for 423, 'FAILED DEPENDENCY' for 424,   'UPGRADE REQUIRED' for 426, 'PRECONDITION REQUIRED' for 428, 'TOO MANY REQUESTS' for 429, 'REQUEST HEADER FIELDS TOO LARGE' for 431,   'INTERNAL SERVER ERROR' for 500, 'NOT IMPLEMENTED' for 501, 'BAD GATEWAY' for 502, 'SERVICE UNAVAILABLE' for 503,   'GATEWAY TIMEOUT' for 504, 'HTTP VERSION NOT SUPPORTED' for 505, 'VARIANT ALSO NEGOTIATES' for 506, 'INSUFFICIENT STORAGE' for 507,   'LOOP DETECTED' for 508, 'NOT EXTENDED' for 510 and 'NETWORK AUTHENTICATION REQUIRED' for 511.   derive the class BadHeaderError from the ValueError base class.
derive the class BadSerializer from the object base class.
derive the class BadSignature from the Exception base class.
derive the class BaseArchive from the object base class.
derive the class BaseCache from the object base class.
use the result as an argument for the call to the function self._out.write.   derive the BaseCommand class from the object base class.
derive the class BaseConfigurator from object base class.
derive the class BaseContext from the object base class.
derive class BaseCOnverter from object base class.
derive class BaseDatabaseCache from BaseCache base class.
derive the class BaseEmailBackend from the object base class.
derive the class BaseForm from the base class object.
derive the class BaseFormSet from the object base class.
derive class BaseHandler, derive from the base class object, making this a new style class.
derive the class BaseInlineFormSet from the BaseModelFormSet base class.
derive the class BaseLoader from the object base class.
derive the class BaseMemcachedCache from base class BaseMemcachedCacheMethods and BaseCache.
derive the class BaseMemcachedCacheMethods from RenameMethodsBase the base class.
derive the class BaseModelForm from the BaseForm base class.
and form_class_attrs.   derive the class BaseModelFormSet from the BaseFormSet base class.
derive the class BaseTemporalField from the base class Field class.
derive the class BaseValidator form the object base class.
derive the class BlockContext from the Exception base class.
derive the class BlockNode from the Node base class.
derive the class BooleanField from the base class Field class.
derive the class BoundaryIter from the six.Iterator base class.
derive the class BoundField from the base class object.
derive the class CacheClass from the DatabaseCache base class.
derive the class CacheClass from the DummyCache base class.
derive the class CacheClass from the base class FileBasedCache.
derive the class CacheClass from the base class LocMemCache.
derive the class cached_property from the object base class.
derive class CachedDnsName from the object base class.
derive CacheEntry class from the object base class.
derive the class CacheHandler from the object base class.
derive class CacheKeyWarning from the DjangoRuntimeWarning base class.
derive the class CallbackFilter from logging.Filter base class.
derive the class CharField from the base class Field class.
derive the class CheckboxChoiceInput from the ChoiceInput base class.
derive the class CheckboxFieldRenderer from the ChoiceFieldRenderer base class.
derive the class CheckboxInput from the Widget base class.
derive the class CheckboxSelectMultiple from the RendererMixin and SelectMultiple base classes.
derive class CheckMessage from object base class.
derive the class CheckRegistry with object as base class.
 ' for 's', 'x' for 'S', 'x' for 'W', '!' for 'W' and None for 'Z'.   derive the class Choice from list base class.
derive the class ChoiceField from the base class Field class.
derive the class ChoiceFieldRenderer from the object base class.
derive the class ChoiceInput from the SubWidget base class.
 normal uploaded files. Check for malicious upload activity; if there is none, report this to the Django developers..   derive the class ChunkIter from the six.Iterator base class.
derive the class classonlymethod from the classmethod base class.
derive the class ClearableFileInput from the FileInput base class.
derive the class ComboField from the base class Field class.
derive the class Command from the AppCommand base class.
derive class Command from the base class AppCommand.
derive the class Command from the base class AppCommand.
derive the class Command from the BaseCommand base class.
derive class Command from base class BaseCommand.
for every k and v in return value of the method module.__dict__.items, only if result of the method omittable called with an argument k is false.   derive the class Command from the BaseCommand base class.
derive the class Command from the BaseCommands base class.
derive the class Command from the BaseCommand class.
derive the class Command from the base class BaseCommand.
derive class Command from the base class BaseCommand.
derive class Command from the BaseCommand base class.
derive class Command from CheckCommand base class.
derive the class Command from the TemplateCommand base class.
derive class Command from the TemplateCommand base class.
derive the class CommandError from the base class Exception.
derive the CommandParser class from the ArgumentParser base class.
derive the class CommentNode from Node base class.
derive the class ContentFile from File base class.
derive the class ContentNotRenderedError from the Exception base class.
derive the class Context from the BaseContext base class.
derive the class ContextDict from the dict base class.
derive the class ContextPopException from the Exception base class.
derive the class ConvertingDict from dict base class.
derive the class ConvertingList from list base class.
derive the class ConvertingTuple from tuple base class.
derive the class Critical from base class CheckMessage.
derive the class CsrfTokenNode from Node base class.
derive the class CycleNode from Node base class.
derive DatabaseCache from the BaseDatabaseCache base class.
derive the class date from the real_date base class.
derive the class DateField from the base class BaseTemporalField class.
derive the class DateFormat from the base class TimeFormat.
then the first element of the result of the function formats.get_format called with an argument self.format_key, return the result.   derive the class DateInput from the DateTimeBaseInput base class.
derive the class datetime from the real_datetime base class.
called with an argument final_attrs and return value of the function force_text called with an argument value, return the result.   derive the class DateTimeBaseInput from the TextInput base class.
and format, call the method time on the result, return the result.   derive the class DateTimeField from the base class BaseTemporalField class.
derive the class DateTimeInput from the DateTimeBaseInput base class.
derive the class Debug from base class CheckMessage.
derive the class DebugLexer from the Lexer base class.
derive the class DebugNode from Node base class.
derive the class DebugNodeList from the NodeList base class.
derive the class DebugParser from the Parser base class.
derive the class DebugVariableNode from the VariableNode base class.
derive the class DecimalField from the base class IntegerField class.
derive the class DeclarativeFieldsMetaclass from the base class MediaDefiningClass.
derive the class DefaultCacheProxy from the base class object.
derive the class DefaultStorage from the LazyObject base class.
derive the class DefusedExpatParser from the _ExpatParser base class.
derive the class DefusedXmlException from the ValueError base class.
derive the class DeserializationError from the Exception base class.
derive the class DeserializedObject from the object base class.
field.rel.__class__.__name__ for 'rel' and return value of the function smart_text with an argument field.rel.to._meta for 'to'.   derive the class Deserializer from the base.Deserializer base class.
derive the class Deserializer from the six.Iterator base class.
derive the class DictConfigurator from the BaseConfigurator base class.
derive the class DictWrapper from the dict base class.
derive the class DisallowedHost from the SuspiciousOperation base class.
derive the class DisallowedRedirect from the SuspiciousOperation base class.
third element of the return value of the function sys.exc_info.   define the class DjangoJSONEncoder from the json.JSONEncoder base class.
derive the class DjangoRuntimeWarning from the RuntimeWarning base class.
derive the class DjangoSafeDumper from the SafeDumper base class.
derive the class DjangoTranslation from gettext_module.GNUTranslations base class.
derive the class DjangoUnicodeDecodeError from the base class UnicodeDecodeError.
derive the class DTDForbidden from the DefusedXmlException base class.
define class dummy.
derive the class DummyCache from the base class BaseCache.
derive the class EmailBackend from the BaseEmailBackend base class.
derive the class EmailBackend from the ConsoleEmailBackend base class.
derive the class EmailField from the base class CharField class.
derive the class EmailInput from the TextInput base class.
derive the class EmailMessage from the object base class.
derive the class EmailMultiAlternatives from the EmailMessage base class.
derive the class EmailValidator form the object base class.
derive the class EmptyPage from the InvalidPage base class.
derive the class Enclosure from the object base class.
derive the class EndToken from the TokenBase base class.
derive the class EntitiesForbidden from the DefusedXmlException base class.
derive the class Error from base class CheckMessage.
derive the class ErrorDict from the dict base class.
derive the class ErrorList from the UserList and list base classes.
derive the class EscapeBytes from bytes and EscapeData base classes.
derive the class EscapeData from object base class.
derive the class EscapeText from six.text_type and EscapeData base classes.
derive the EventHandler class from the base class pyinotify.ProcessEvent.
derive the class ExtendsError from the Exception base class.
derive the class ExtendsNode from the Node base class.
derive the class ExternalReferenceForbidden from the DefusedXmlException base class.
EmailField', 'FileField', 'ImageField', 'URLField', 'BooleanField', 'NullBooleanField', 'ChoiceField', 'MultipleChoiceField',   'ComboField', 'MultiValueField', 'FloatField', 'DecimalField', 'SplitDateTimeField', 'IPAddressField', 'GenericIPAddressField',   'FilePathField', 'SlugField', 'TypedChoiceField', 'TypedMultipleChoiceField'.   derive the class Field from the base class object.
derive the class FieldError from the Exception base class.
derive the class File from the FileProxyMixin base class.
derive the class FileBasedCache from BaseCache base class.
derive the class FileField from the base class Field class.
derive the class FileInput from the Input base class.
derive the class FilePathField from the base class ChoiceField class.
derive class FileProxyMixin from the base class object, making it a new-style class.
derive the class FileSystemStorage from the Storage base class.
derive the class FileUploadHandler from the object base class.
substitute the result for filter_re.   derive the class FilterExpression form the base class object.
derive the class FilterNode from Node base class.
derive the class FirstOfNode from Node base class.
derive the class FixedOffset from the tzinfo base class.
Use django.utils.timezone instead., RemovedInDjango19Warning and stacklevel set to 2.   derive the class FixedOffset from the tzinfo base class.
derive the class FixUnicode from the base class fixer_base.BaseFix.
derive the class FloatField from the base class IntegerField class.
derive the class Form from the base classes DeclarativeFieldsMetaclass and BaseForm.
derive the class Formatter from object base class.
derive the class ForNode from Node base class.
derive the class GenericIPAddressField from the base class CharField class.
derive the class Group from list base class.
return the result.   derive the class HiddenInput from the Input base class.
derive the class HTMLParser from the base class HTMLParser located in the module _html_parser.
derive the class Http404 from the Exception base class.
derive the class HttpRequest from the object base class.
where '%s' is replaced with self.__class__.__name__.   derive the class HttpResponse from the HttpResponseBase base class.
derive the class HttpResponseBadRequest from the HttpResponse base class.
derive the class HttpResponseBase from the six.Iterator base class.
derive the class HttpResponseForbidden from the HttpResponse base class.
derive the class HttpResponseGone from the HttpResponse base class.
derive the class HttpResponseNotAllowed from the HttpResponse base class.
derive the class HttpResponseNotFound from the HttpResponse base class.
derive the class HttpResponseNotModified from the HttpResponse base class.
derive the class HttpResponsePermanentRedirect from the HttpResponseRedirectBase base class.
derive the class HttpResponseRedirect from the HttpResponseRedirectBase base class.
derive the class HttpResponseRedirectBase from the HttpResponse base class.
derive the class HttpResponseServerError from the HttpResponse base class.
derive the class IfChangedNode from Node base class.
derive the class IfEqualNode from Node base class.
derive the class IfNode from Node base class.
derive the class IfParser from the object base class.
derive the class ImageField from the base class FileField class.
derive class ImageFile from the base class File.
derive the class ImmutableList from the tuple base class.
derive the class ImproperlyConfigured from the Exception base class.
derive the class IncludeNode from the Node base class.
derive the class InclusionNode form the base class TagHelperNode.
derive the class Info from base class CheckMessage.
derive the class InlineForeignKeyField from the Field base class.
derive the InMemoryUploadedFile class from the UploadedFile base class.
derive the class Input from the Widget base class.
derive the class InputStreamExhausted from the Exception base class.
derive the class IntegerField from the base class Field class.
derive the class InterBoundaryIter from the six.Iterator base class.
derive class InvalidCacheBackendError from the ImproperlyConfigured base class.
derive the class InvalidPage from the Exception base class.
p and errors set to string 'replace', for p in self.params.   derive the class InvalidTemplateLibrary form the base class Exception.
derive the class IPAddressField from the base class CharField class.
derive the class Iterator from the base class object.
derive the class JsLexer from the Lexer base class.
derive the class JsonResponse from the HttpResponse base class.
derive the class JSONSerializer from the object base class.
derive the LabelCommand class from the BaseCommand base class.
derive the class lazy_property from the property base class.
derive the class LazyObject from the object base class.
derive the class LazyStream from the six.Iterator base class.
derive the class Lexer form the base class object.
and join the results into a string, separated with '|' character, return the result.   derive the class Lexer from the object base class.
derive the class Library form the base class object.
derive class LimitedStream from the object base class, making it a new-style class.
derive the class Literal from the TokenBase base class.
derive the class Loader from the BaseLoader base class.
derive the class LoaderOrigin from the Origin base class.
derive the class LoadNode from Node base class.
derive the class LocaleRegexProvider with object as base class.
arguments '%s' not found. %d pattern(s) tried: %s, replace '%s' with lookup_view_s, args, kwargs, length of patterns, patterns,  and respectively.   derive the class LocaleRegexURLResolver with RegexURLResolver as base class.
derive the class LocalTimezone from the ReferenceLocalTimezone base class.
derive the class LocalTimezone from the tzinfo base class.
derive the class LocMemCache from the base class BaseCache.
derive the class ManagementForm from the Form base class.
derive the class ManagementUtility from object base class.
derive the class MaxLengthValidator form the BaseValidator base class.
derive the class MaxValueValidator form the BaseValidator base class.
derive the class Media from the object base class.
derive the class MediaDefiningClass from the type base class.
derive the class MemcachedCache from the BaseMemcachedCache base class.
derive the class MemoryFileUploadHandler from the FileUploadHandler base class.
derive the class MergeDict from the object base class.
derive the class metaclass form the meta base class.
derive the class MiddlewareNotUsed from the Exception base class.
derive the class MIMEMixin.
derive the class MinLengthValidator form the BaseValidator base class.
derive the class MinValueValidator form the BaseValidator base class.
derive the class MLStripper from the HTMLParser base class.
and result of the method self.field.label_from_instance, called with an argument obj.   derive the class ModelChoiceField from the ChoiceField base class.
derive the class ModelChoiceIterator from object base class.
derive the class ModelForm from the base class in the return value of the method six.with_metaclass, called with 2 arguments:
if not self.error_messages is None.   derive the class ModelFormMetaclass from the DeclarativeFieldsMetaclass base class.
derive the class ModelFormOptions from object base class.
if the result is equal to the result of the call to the function force_text with data_value as an argument, return boolean True,   otherwise return boolean False.   derive the class ModelMultipleChoiceField from the ModelChoiceField base class.
assign it to value under the string ".moves.urllib_robotparser" appended to __name__ key of the sys.modules dictionary,   and to value under the string ".moves.urllib.robotparser" appended to __name__ key of the sys.modules dictionary.   derive class Module_six_moves_urllib from the types.ModuleType base class.
assign the result to the value under the string ".moves.urllib_parse" appended to __name__ key of the sys.modules dictionary,   and to the value under the string ".moves.urllib.parse" appended to __name__ key of the sys.modules dictionary.   derive class Module_six_moves_urllib_error from the _LazyModule base class.
and to value under the '.moves' appended to __name__ key of the sys.modules dictionary.   derive class Module_six_moves_urllib_parse from the _LazyModule base class.
assign the result to the value under the string ".moves.urllib_error" appended to __name__ key of the sys.modules dictionary,   and to the value under the string ".moves.urllib.error" appended to __name__ key of the sys.modules dictionary.   derive class Module_six_moves_urllib_request from the _LazyModule base class.
assign the result to the value under the string ".moves.urllib_request" appended to __name__ key of the sys.modules dictionary,   and to the value under the string ".moves.urllib.request" appended to __name__ key of the sys.modules dictionary.   derive class Module_six_moves_urllib_response from the _LazyModule base class.
assign it to value under the string ".moves.urllib_response" appended to __name__ key of the sys.modules dictionary,   and to value under the string ".moves.urllib.response" appended to __name__ key of the sys.modules dictionary.   derive class Module_six_moves_urllib_robotparser from the _LazyModule base class.
derive class MovedAttribute from the _LazyDescr base class.
derive class MovedModule from the _LazyDescr base class.
derive the class MultiPartParser from the object base class.
derive the class MultiPartParserError from the Exception base class.
derive the class MultipleChoiceField from the base class ChoiceField class.
derive the class MultipleHiddenInput from the HiddenInput base class.
derive the class MultipleObjectsReturned from the Exception base class.
derive the class MultiValueDict from the dict base class.
derive the class MultiValueDictKeyError from the KeyError base class.
derive the class MultiValueField from the base class Field class.
derive the class MultiWidget from the Widget base class.
derive the NoArgsCommand class from the BaseCommand base class.
derive the class Node form the base class object.
derive the class Node from object base class.
derive the class NodeList form the base class list.
derive the class NonCapture from list base class.
derive the class NoReverseMatch with Exception as base class.
derive the class NowNode from Node base class.
derive the class NullBooleanField from the base class BooleanField class.
derive the class NullBooleanSelect from the Select base class.
derive the class NullDevice.
derive the class NumberAwareString from the resultclass base class.
derive the class NumberInput from the TextInput base class.
derive the class ObjectDoesNotExist from the Exception base class.
derive the class Operator from the base class TokenBase.
derive class Options from the base class object.
derive the class OrderedSet from the object base class.
derive the class Origin form the base class object.
derive the OutputWrapper class from the object base class.
derive the class OVERLAPPED from the Structure base class.
derive the class override from the object base class.
derive the class Page from the collections.Sequence base class.
derive the class PageNotAnInteger from the InvalidPage base class.
derive the class Paginator from the object base class.
derive the class Parser from the base class object.
derive the class Parser form the base class object.
derive the class PasswordInput from the TextInput base class.
derive the class PermissionDenied from the Exception base class.
derive the class Promise from the object base class.
derive the class PyLibMCCache from BaseMemcachedCache base class.
derive the class QueryDict from the base class MultiValueDict.
derive the class RadioChoiceInput from the ChoiceInput base class.
if id_ is true id_attr set to return value of the function format_html, if not id_attr set to an empty string,   content set to result of the function mark_safe with an argument: string created by joining elements of outputs, with '\n' separator,   return the result.   derive the class RadioFieldRenderer from the ChoiceFieldRenderer base class.
derive the class RadioSelect from the RendererMixin and Select base classes.
derive the class RawPostDataException from the base class Exception.
derive the class ReferenceLocalTimezone from the tzinfo base class.
and format, return the result.   derive the class RegexField from the base class CharField class.
derive the class RegexURLPattern with LocaleRegexProvider as base class.
derive the class RegexURLResolver with LocaleRegexProvider as base class.
derive the class RegexValidator form the object base class.
derive the class RegroupNode from Node base class.
derive the class RemovedInDjango19Warning from DeprecationWarning base class.
derive the class RemovedInDjango20Warning from PendingDeprecationWarning base class.
derive the class RenameMethodsBase from type base class.
derive the class RenderContext from the BaseContext base class.
derive the class RendererMixin from the object base class.
derive the class RequestContext from the Context base class.
derive the class RequireDebugFalse from logging.Filter base class.
derive the class RequireDebugTrue from logging.Filter base class.
string '%s' with self._func_path, self.args, self.kwargs, self.url_name, self.app_name and self.namespaces, respectively.   derive the class Resolver404 with Http404 as base class.
derive the class ResolverMatch with object as base class.
derive the class Rss201rev2Feed from the RssFeed base class.
derive the class RssFeed from the SyndicationFeed base class.
derive the class RssUserland091Feed from the RssFeed base class.
derive the class RWLock from the object base class.
derive the class SafeBytes from bytes and SafeData base classes.
derive the class SafeData from object base class.
derive the class SafeMIMEMessage from the MIMEMixin and MIMEMessage base class.
derive the class SafeMIMEMultipart from the MIMEMixin and MIMEMultipart base class.
derive the class SafeMIMEText from the MIMEMixin and MIMEText base class.
derive the class SafeText from six.text_type and SafeData base classes.
derive the class Select from the Widget base class.
derive the class SelectDateWidget for the Widget base class.
boolean True for 'True', boolean False for '3', boolean False for 'False' and boolean False for boolean False,   return it if the key exists, if not return None.   derive the class SelectMultiple from the Select base class.
derive the class SerializationError from the Exception base class.
derive Serializer from the base.Serializer base class.
derive the class Serializer from the base.Serializer base class.
derive the class Serializer from the object base class.
define the class Serializer from the PythonSerializer base class.
derive the class Serializer from the PythonSerializer base class.
derive the class SerializerDoesNotExist from the KeyError base class.
derive the class SignatureExpired from the BadSignature base class.
derive the class Signer from the object base class.
derive class SimpleCookie from the base class http_cookies.SimpleCookie.
derive the class SimpleLazyObject from the LazyObject base class.
derive the class SimpleNode form the base class TagHelperNode.
derive the class SimplerXMLGenerator form the XMLGenerator base class.
derive the class SimpleTemplateResponse from the HttpResponse base class.
derive the SimpleUploadedFile class from the InMemoryUploadedFile base class.
derive class SingleZipReader for zipfile.ZipFile base class.
derive the class SkipFile from the UploadFileException base class.
derive the class SlugField from the base class CharField class.
derive the class SortedDict from the dict base class.
and self.format_string, return the result.   derive the class SpacelessNode from Node base class.
derive the class SplitDateTimeField from the base class MultiValueField class.
derive the class SplitDateTimeWidget from the MultiWidget base class.
derive the class SplitHiddenDateTimeWidget from the SplitDateTimeWidget base class.
derive the class SsiNode from Node base class.
derive the class StopFutureHandlers from the UploadFileException base class.
derive the class StopUpload from the UploadFileException base class.
derive the class Storage from the object base class.
derive the class StreamingBuffer from the object base class.
derive the class StreamingHttpResponse from the HttpResponseBase base class.
derive the class StringOrigin form the base class Origin.
derive the class SubWidget from the object base class.
derive the class SuspiciousFileOperation from the SuspiciousOperation base class.
derive the class SuspiciousMultipartForm from the SuspiciousOperation base class.
derive the class SuspiciousOperation from the Exception base class.
derive the class SyndicationFeed from the object base class.
derive the class TagHelperNode form the base class Node.
derive the class Tags with base class object.
derive the class TarArchive from the BaseArchive base class.
derive the class Template form the base class object.
derive the class TemplateCommand from the BaseCommand base class.
derive the class TemplateDoesNotExist form the base class Exception.
derive the class TemplateEncodingError form the base class Exception.
derive the class TemplateIfParser from IfParser base class.
derive the class TemplateLiteral from Literal base class.
derive the class TemplateResponse from the SimpleTemplateResponse base class.
derive the class TemplateSyntaxError form the base class Exception.
use the result as an argument for the call to the function strip_spaces_between_tags, return the result.   derive the class TemplateTagNode from Node base class.
derive class TemporaryFile from the base class FileProxyMixin.
derive the class TemporaryFileUploadHandler from the FileUploadHandler base class.
derive the TemporaryUploadedFile class from the UploadedFile base class.
derive the class Textarea from the Widget base class.
result of the function flatatt called with an argument final_attrs, return the result.   derive the class TextInput from the Input base class.
derive the class TextNode form the base class Node.
and format, call the method date on the result, return the result.   derive the class TimeField from the base class BaseTemporalField class.
derive the class TimeFormat from the base class Formatter.
derive the class TimeInput from the DateTimeBaseInput base class.
derive the class TimestampSigner from the Signer base class.
derive the class Tok from the object base class.
derive the class Token form the base class object.
derive the class TokenBase from the object base class.
derive the class TokenParser form the base class object.
derive the class Trans from the object base class.
derive the class TranslatableFile from the object class.
derive the class TranslatorCommentWarning from the SyntaxWarning base class.
derive the class Truncator form the SimpleLazyObject class.
derive the class TypedChoiceField from the base class ChoiceField class.
derive the class TypedMultipleChoiceField from the base class MultipleChoiceField class.
derive the class UnreadablePostError from the base class IOError.
derive the class UnrecognizedArchiveFormat from the ArchiveException base class.
derive the UploadedFile class from the File base class.
TemporaryFileUploadHandler', 'MemoryFileUploadHandler', 'load_handler' and 'StopFutureHandlers'.   derive the class UploadFileException from the Exception base class.
derive the class URLField from the base class CharField class.
derive the class URLInput from the TextInput base class.
derive the class URLNode from Node base class.
derive the class URLValidator form the RegexValidator base class.
derive the class UTC from the tzinfo base class.
derive the class ValidationError from the Exception base class.
derive the class Variable form the base class object.
derive the class VariableDoesNotExist form the base class Exception.
derive the class VariableNode form the base class Node.
derive the class VerbatimNode from Node base class.
derive the class ViewDoesNotExist from the Exception base class.
derive the class warn_about_renamed_method from object base class.
derive the class Warning from base class CheckMessage.
derive the class Widget from the base class in the return value of the six.with_metaclass called with an argument MediaDefiningClass.
derive the class WidthRatioNode from Node base class.
derive class WindowsError from Exception base class.
derive the class WithNode from Node base class.
derive the WSGIHandler class from the base class base.BaseHandler.
derive the class WSGIRequest from base class http.HttpRequest.
derive the class WSGIRequestHandler from simple_server.WSGIRequestHandler and object base classes.
derive the class WSGIServer from simple_server.WSGIServer and object base classes.
derive class X from the object base class.
derive the class ZipArchive from the BaseArchive base class.
substitute base.__name__ for class_name.
append string 'Form' to model.__name__, substitute the result for class_name.
class_types is a tuple with 2 elements: type and types.ClassType.
substitute type for class_types.
clean is a lambda function with self and x as arguments, return value is length of x.
clean is a lambda function with arguments self and x, return value is x.
call the method field.clean with an argument field_value, append the result to clean_data.
clean_data is an empty list.
call the method self.clean with value as argument, substitute the result for cleaned.
substitute form.cleaned_data for cleaned_data.
call the method self.clean, substitute the result for cleaned_data.
call the method comment_re.sub with an arguments: raw string '\1' and line, strip the whitespaces surrounding the result, return it.
call the function ugettext_lazy with an argument string 'Clear', substitute the result for clear_checkbox_label.
substitute self._options for client.behaviors.
call the method self._lib.Client with argument self._servers.
call the method closable.close.
substitute self.closed for close.
close is boolean True.
closed is a property object with _get_closed as a getter method.
call the method tag.groups, substitute the result for closing_tag, tagname and self_closing, respectively.
substitute cls.__bytes_cast for cls.__bytes__.
substitute method for value under the funcname key of the dictionary under the klass key of the cls.__dispatch dictionary.
value under the klass key of the cls.__dispatch dictionary is an empty dictionary.
value under the resultclass key of the cls.__dispatch dictionary is an empty dictionary.
cls.__dispatch is an empty dictionary.
substitute cls.__bytes_cast for cls.__str__.
substitute cls.__text_cast for cls.__str__.
substitute cls.__text_cast for cls.__text_cast.
if bytes is contained in resultclasses, cls._delegate_bytes is boolean True, otherwise it is boolean False.
if six.text_type is contained in resultclasses, cls._delegate_text is boolean True, otherwise it is boolean False.
get the value under the ext key of the extension_map dictionary, substitute it for cls.
substitute the result for base and tail_ext.   get the value under the tail_ext key of the extension_map dictionary, substitute it for cls.
cls is None.
call the method constant_re.match with first element of parts as an argument, substitute the result for cmatch.
call the function constant_re.findall with an argument t.contents, substitute the result for cmatches.
call the function vars with an argument options, substitute the result for cmd_options.
cmp_fmt is None.
substitute the last element of parts for cmp_fmt.
call the method self.compression_formats.keys, convert it to list, substitute it for cmp_fmts if cmp_fmt is None,
call the method code.interact with an argument local set to imported_objects.
code is a string 'invalid'
code is a string 'invalid'.
code is a string 'limit_value'
string 'Ensure this value has at most %(limit_value)d characters (it has %(show_value)d).' and string 'limit_value', substitute the result for message.   code is a string 'max_length'
code is a string 'max_value'
string 'Ensure this value has at least %(limit_value)d characters (it has %(show_value)d).' and string 'limit_value', substitute the result for message.   code is a string 'min_length'
code is a string 'min_value'
append value under the key v of background dictionary to code_list.
append value under the key v of foreground dictionary to code_list.
append value under the 0 key of the opt_dict dictionary to code_list.
code_list is an empty list.
get the value under the 'charset' key of content_params dictionary, use it to call the codec.lookup method.
otherwise assign string 'ascii' to encoding.   call the method lookup with the encoding as the argument.
extend collect list with _builtin_context_processors.
extend collect list with settings.TEMPLATE_CONTEXT_PROCESSORS.
collect is an empty list.
color_names is a tuple with 8 elements: strings 'black', 'red', 'green', 'yellow', 'blue', 'magenta', 'cyan' and 'white'.
call the function termcolors.parse_color_setting with DJANGO_COLORS as an argument, assign the result to color_settings.
reverse the order of colors elements,
remove first element from styles, split it by the '/' character, substitute the result for colors.
substitute first element of row for column_name.
combined is an instance of Media class.
and ip_address_validator_map converted to a list, respectively.   call the re.compile function with an argument raw string '^[\d,]+$', substitute the result for comma_separated_int_list_re.
remove the first element from self.command_stack, assign the result to command and source, respectively.
substitute '%s' is string 'processing file %s in %s\n' with self.file and self.dirpath, write it to command.stdout.
call the method command.stdout.write with an argument errors.
substitute app_namefor command.
call the function load_command_class with arguments: app_name and name, substitute the result for command.
split token.contents into separate words, substitute the first element of the result for command.
join management_dir and string 'commands' into a file path name, substitute it for command_dir.
call the method commands.update, with an argument dictionary containing entries: app_config_name for name, for every name in return value of the function find_commands, called with an argument path.
commands is an dictionary containing elements: string 'django.core' for every name in the function find_commands return value, called with first element of __path__ as an argument.
call the function get_commands, substitute it for commands.
append name to the value of under the app key of the commands_dict.
where '%s' is replaced with self.prog_name, an empty string and string "Available subcommands:".   call the method collections.defaultdict with a argument: lambda function without arguments that returns an empty list,
append t.contents to comment.
comment is an empty list.
comment_lineno_cache is None.
format with it a string '# %s', write it to out.   comment_lineno_cache is None,
substitute t.lineno for comment_lineno_cache.
append string 'AutoField?' to comment_notes.
extend comment_notes list with field_notes.
extend comment_notes list with notes.
comment_notes is an empty list.
call the function re.compile with an argument raw string "^((?:'[^']*'|[^'])*?)--.*$", substitute the result for comment_re.
COMMENT_TAG_END is a string '#}'.
COMMENT_TAG_START is a string '{#'.
substitute first element of level for common_ancestor.
common_ancestor is None.
common_prefix is None.
substitute prefix for common_prefix.
compare is a lambda function with arguments self, a and b, return value is boolean true if a is lesser than b, otherwise is false.
compare is a lambda function with arguments self, a and b, return value is boolean true if a is greater than b, otherwise is false.
compare is a lambda function with arguments self, a and b, return value is boolean True if a is not b, otherwise it is False.
compare_to is an list with elements generated by calling the var.resolve method with 2 arguments: context and boolean True,
call the method self.nodelist_true.render with an argument context, assign the result to compare_to and nodelist_true_output.
compare_to is None.
compatibility is a string 'compatibility'.
name set to function_name, and takes_context set to takes_context and node_class set to SimpleNode.   substitute func.__doc__ for compile_func.__doc__.
substitute func.__doc__ for compile_func.__doc__.
defaults set to defaults, name set to function_name, takes_context set to takes_context and node_class set to InclusionNode,   substitute the result for compile_func.   substitute func.__doc__ for compile_func.__doc__.
substitute __name__ field of the result for function_name, in not, substitute func.__name__ for function_name.   call the function partial with 8 arguments: generic_tag_compiler, params set to params, varargs set to varargs, varkw set to varkw,
substitute its __name__ field for function name, if it doesnt exists substitute func.__name__ for function_name.   call the function generic_tag_compiler, params set to params, varargs set to varargs, varkw set to varkw, defaults set to defaults,
substitute the value under the command key of self.tags dictionary for compile_func.
call the method self.get_parent with an argument context, substitute the result for compiled_parent.
call the function re.compile with arguments regex and re.UNICODE, substitute the result for compiled_regex.
call the method compile_func with 2 arguments self and token, substitute the result for compiled_result.
call the function zlib.compress with an argument data, substitute the result for compressed.
substitute obj._meta.concrete_model for concrete_model.
call the method parse from the instance of TemplateIfParser class, created with 2 arguments parser and bits, substitute the result for condition.
append a tuple with 2 elements: condition and nodelist to conditions_nodelists.
append a tuple with 2 elements: None and nodelist to conditions_nodelists.
conditions_nodelists is a list containing tuple with 2 elements condition and nodelist.
substitute value under the backend key of settings.CACHES dictionary for conf.
substitute factory for value under '()' key of config dictionary.
call the method self.as_tuple with an argument value under 'address' key of config dictionary,
remove config dictionary entry under 'format' key, substitute it for value under 'fmt' key of config dictionary.
call the method self.as_tuple with an argument value under 'mailhost' key of config dictionary,
get value under 'target' key of config dictionary, use it as a key to get the value from the dictionary,
substitute self.config for config.
confirm is a string 'yes'.
query a string 'Please enter either "yes" or "no": ' and store the result in confirm.
request user input from the standard input, assign it o confirm, with the query string: "You have requested a flush of the database."
call the method input with an argument msg and store the result in confirm.
call the executor.loader.detect_conflicts, substitute the result fr conflicts.
call the method loader.detect_conflicts, substitute the result for conflicts.
call the method connection.check_constraints with an arguments table_names set to table_names.
call the method connection.client.runshell.
call the method connection.close,
if connection exists dont modify it, if not call get_connection function with username set to auth_user, password set to auth_password, fail_silently set to fail_silently as arguments, assign it to connection.
if connection exists dont change it, if not call the get_connection function with username set to auth_user,
substitute value under the database key of the connections dictionary for connection.
substitute connections element at the index of the value db for connections.
get the value under the 'database' key of the options dictionary, if it doesnt exists use the DEFAULT_DB_ALIAS to address an element
get the value under the 'database' key of the options dictionary, use it as a key to access the element under the connections dictionary, substitute it for connection.
get the value under the 'database' key of the options dictionary,
get value under the 'database' key of the options dictionary, use it as a key to get the value from the connections dictionary,
get the value under the 'database' key of the options dictionary, use it as the key to get the value from the connections dictionary, substitute the result for connection.
extract the value under the key 'database' from the options dictionary, use the value for indexing connections list, substitute the result for connection.
get the value under the 'database' key of options dictionary, use it as a index to get connections list element, store it in connection.
get the value under the key 'database' of the options dictionary, use it as a index to get an element from connections, substitute it for connection.
get the value under the self.using key of the connections dictionary, substitute it for connection.
substitute smtplib.SMTP_SSL for connection_class if self.use_ssl is true, if not substitute smtplib.SMTP for connection_class.
set value under the 'timeout' key of the connection_params to self.timeout.
connection_params is a dictionary with 1 initial entry: return value of the function DNS_NAME.get_fqdn for 'local_hostname'.
get the value under the self.using key of the connections dictionary, call the method close on it.
call the method match.group with 2 arguments: strings "constant_arg" and "var_arg", substitute the result for constant_arg,
call the function re.compile with an argument raw string "_\(((?:".*?")|(?:'.*?'))\)", substitute the result for constant_re.
where 'strdq' is replaced with '"[^"\\]*(?:\\.[^"\\]*)*"', 'strsq' is replaced with "'[^'\\]*(?:\\.[^'\\]*)*'",   'i18n_open' is replaced with return value of function re.escape called with an argument string '_(',   'i18n_close' is replaced with return value of function re.escape called with an argument string ')'.   remove all occurrences of newline character from constant_string.
constant_string is a raw string "(?:%(i18n_open)s%(strdq)s%(i18n_close)s|%(i18n_open)s%(strsq)s%(i18n_close)s|%(strdq)s|%(strsq)s)",
and field _state.adding of value under the name key of self.cleaned_data dictionary is true,   append name to construct_instance_exclude list.
convert exclude elements to list, substitute it for construct_instance_exclude.
consume_next is boolean False.
consume_next is boolean True.
contains_nontext is boolean False.
content is an empty string.
join comment elements into a string, substitute it for content.
call the method content.decode with an argument string 'utf-8', substitute it for content.
call the method content.encode with an argument string 'utf-8', substitute it for content.
call the method content.message, substitute the result for content.
if content is empty, substitute it for an empty string.
read the whole file f, substitute the result for content.
content is a File object instance created with content argument.
call the function force_bytes with argument content, substitute it for content.
call the message_from_string function with an argument content, substitute the result for content.
call the method template.render with an argument context, substitute it for content.
call the method template.render with an argument context, substitute the result for content.
call the method template_file.read, substitute it for content.
call the function templatize with 2 arguments: src_data and sliced orig_file, without first 2 elements, substitute the result for content.
take elements of token_string from second to second last element and strip the whitespaces surrounding the result,
get the value under the 'content-disposition' key of the info dictionary, substitute it for content_disposition.
content_length is integer 0.
convert value under the 'CONTENT_LENGTH' key of the environ dictionary to an integer, substitute it for content_length.
convert value under the 'HTTP_CONTENT_LENGTH' key of the META dictionary to an integer of base of value under the 'CONTENT_LENGTH' key of META dictionary, if the key doesnt exists use 0 as the base, substitute the result for content_length.
convert to an integer first element of the value under the 'content-length' key of the meta_data dictionary, substitute it for content_length.
content_length is None.
content_subtype is a string 'plain'.
method, substitute the result for file_name.   get the value under the 'content-type' of the meta_data dictionary, if it exists assign it to content_type, content_type_extra,
replace '%s' in string "%s; charset=%s" with settings.DEFAULT_CONTENT_TYPE and self._charset, substitute it for content_type.
if not, content_type is an empty string and content_type_extra is an empty dictionary.   strip the content_type of the whitespaces, substitute it for content_type.
get the value under the 'content-type' key of the info dictionary, substitute it for content_type.
get the value from META dictionary, under the 'HTTP_CONTENT_TYPE' key, if the key doesnt exist,
call the function conditional_escape with an argument contents, substitute the result for contents.
if contents is false, substitute self.label for contents.
called with an argument string ':?.!'.   call the method format_html with 3 arguments: string '{0}{1}', contents and label_suffix, substitute the result for contents.
call the function format_html with 3 arguments string '<label{0}>{1}</label>', attrs and contents, substitute the result for contents.
call the method one_percent_re.sub with 2 arguments: string '%%' and t.contents, substitute the result for contents.
use_l10n set to None and use_tz set to None.   call the method Context.__init__ with 5 arguments: self, dict_, current_app as current_app, use_l10n as use_l10n, use_tz as use_tz.
substitute old_setting for context.autoescape.
substitute self.setting for context.autoescape.
append self to context.dicts.
remove the first element of context.
remove the first element from context.render_context.
call the method context.render_context.push.
value under the BLOCK_CONTEXT_KEY key of context.render_context dictionary is BlockContext class instance.
call the function itertools_cycle with an argument self.cyclevars, substitute the result for value under the self dictionary context.render_context.
call the method context.update with an argument unpacked_vars.
substitute block for value under the 'block' key of context dictionary.
substitute self for value under the 'block' key of context dictionary.
substitute result for value under the self.asvar key of context dictionary.
substitute url for value under the self.asvar key of context dictionary.
substitute item for value under the first element of self.loopvars key of the context dictionary.
call the function func with 2 arguments: unpacked list resolved_args and unpacked dictionary resolved_kwargs,
value under the self.var_name key of the context dictionary is an list with dictionary elements with 2 entries:
value under the self.var_name key of the context dictionary is an empty list.
substitute obj for value under the self.var_name key of the context dictionary.
substitute value for value under the self.variable_name key of the context dictionary.
context is an instance of a class Context, created with 2 arguments: dictionary created by apllying options to unpacked dictionary containing 3 entries:
call the method self.resolve_context with an argument self.context_data, substitute the result for context.
value under the 'debug' key of the context_extras dictionary is boolean True.
call the translation.get_language_bidi function, substitute the result for the value under the 'LANGUAGE_BIDI' key of the context_extras dictionary.
call the translation.get_language function, substitute the result for the value under the 'LANGUAGE_CODE' key of the context_extras dictionary.
substitute settings.LANGUAGES for the value under the 'LANGUAGES' key of the context_extras dictionary.
substitute connection.queries for value under the 'debug' key of the context_extras dictionary.
context_extras is an empty dictionary.
call the method bmatch.group with an argument integer 1, use the result as an argument for the call to the function context_re.match,
call the method imatch.group with an argument integer 2, use the result as an argument for the call to the method context_re.match,
call the function re.compile with an argument raw string "^\s+.*context\s+((?:"[^"]*?")|(?:'[^']*?'))\s*", substitute the result for context_re.
CONTEXT_SEPARATOR is a string "\x04".
skip this iteration of he smallest enclosing loop.
skip this loop execution,
skip this loop iteration.
skip this loop iteration,
dictionary keys converted into sets,   skip this loop iteration,
skip this loop execution.
and call to the method form.has_changed evaluates to false,   skip this loop iteration,
continue with the next iteration of the for loop.
skip this loop iteration,s
convert is a dictionary with 4 initial entries: list with 3 tuples: tuple with 2 elements: string '__gt__',
compile a regex from raw string '^(?P<prefix>[a-z]+)://(?P<suffix>.*)$', substitute it for CONVERT_PATTERN.
substitute connection.introspection.table_name_converter for converter.
get converter attribute from self object, substitute it for converter.
remove self.value_converters dictionary element under prefix key, if it exists substitute it for converter, if not, converter is None.
substitute value under the key key of the self.COOKIES dictionary, substitute it for cookie_value.
get the value filed from the return value of the call to the c.key with the argument key, add the value to the cookiedict under the key key.
cookiedict is an empty dictionary.
cookies is a string '<could not parse>'.
get is a tuple containing elements generated by the call to the function pformat with an argument COOKIES_override,
call the function copystat with old_file_name and new_file_name as arguments.
count is a property object with _get_count as a getter method.
divide since by seconds, store the floored result in count.
increment i-th element of counters by chunk_length.
counters is a list containing length of handlers number of zeros.
substitute Iterator for create_bound_method.
unpack the manifest.values function return value and feed it to the itertools.chain function, create_models is a set containing chanied list.
add model to created_models set.
create_models is an empty list.
use the result as an argument for the call to the self.stdout.write.   call the self.sync_apps method with connection and executor.loader.unmigrated_apps as arguments, substitute it for created_models.
created_models is a set.
creation_counter is an integer 0.
CRITICAL is integer 50.
and e.level is lesser than checks.CRITICAL.   append e to criticals list for every e in all_issues, if checks.CRITICAL is lesser than or equal to e.level.
context.autoescape for 'autoescape', context.autoescape for 'current_app', context.use_l10n for 'use_l10n',   and context.use_tz for 'use_tz', substitute the result for new_context.   call the function context.get with 2 argument 'csrf_token' and None, substitute the result for csrf_token.
get the value under the 'csrf_token' key of the context dictionary, if it exists substitute the result for csrf_token,
call the method bf.css_classes, substitute the result for css_classes.
call function force_bytes with value as argument, use the result to as the result for the call to the methgod ctx.update.
ctx is an hashlib object, for calculating hash function with md5 algorithm.
call the method boundary with an argument string 'ascii', use the result to call to the parse_header function,
call the options.get method with string 'CULL_FREQUENCY' and integer 3 as arguments, use the string 'cull_frequency' and previous result as the arguments for the call to the params.get method, substitute the result for cull_frequency.
divide num by self._cull_frequency, floor the result and substitute it for cull_num.
count occurrences of '\n' in t.contents, add the result to t.lineno, substitute the result for cur_lineno.
curr is an empty string.
substitute cwords element at the cword decremented by 1 index for curr.
substitute context for current.
call the function current, substitute the result for current.
substitute element at the bit index of current for current.
convert bit to an integer and use it as index to obtain an element for list current, substitute it for current.
get the bit attribute of current object, substitute it for current.
substitute settings.TEMPLATE_STRING_IF_INVALID for current.
substitute settings.TEMPLATE_STRING_IF_INVALID for current,
current_chunk is None.
read chunk_size bytes from the old_file file, substitute the result for current_chunk.
substitute the second element of result for current_expires.
convert current_expires to a string, use it as the argument for the call to the function typecast_timestamp, substitute the result for current_expires.
append a tuple with elements key and value to current_fields.
sort current_fields elements with key being a lambda function with argument x and return value creation_counter filed of first element of x.
current_fields is an empty list.
increment current_len by integer 1,
current_len is equal to integer 0.
call the method timezone.get_current_timezone, substitute the result for current_timezone.
call the function timezone.get_current_timezone, substitute the result for current_timezone.
format the string '{scheme}://{host}{path}' by replacing scheme with self.scheme, host with return value of the self.get_host method,
substitute version_info from module sys for surrent_version.
join full_statement into a string, separated by newlines, use it as an argument for the call to the method curs.execute.
execute statement on the database that curs points to.
call the cursor.close method.
call the method cursor.close,
evaluate the method connections[db].ops.cache_key_culling_sql, evaluate the result by table modulus, call the method cursor.execute,
call the method cursor.execute with string "DELETE FROM %s" as argument, substitute the '%s' with table.
with previous result and list containing cull_num, respectively as arguments.   call the method cursor.execute with string "DELETE FROM %s WHERE cache_key < %%s" as argument,
call the method cursor.execute with string "DELETE FROM %s WHERE cache_key = %%s" as argument,
call the method cursor.execute with string "DELETE FROM %s WHERE cache_key = %%s" as argument,
call the method cursor.execute with string "DELETE FROM %s WHERE expires < %%s" as argument,
call the method cursor.execute with string "INSERT INTO %s (cache_key, value, expires) VALUES (%%s, %%s, %%s)",
call the method cursor.execute with string "SELECT cache_key FROM %s WHERE cache_key = %%s and expires > %%s" as argument,
call the method cursor.execute with string "SELECT cache_key, expires FROM %s WHERE cache_key = %%s" as argument,
call the method cursor.execute with string "SELECT cache_key, value, expires FROM %s WHERE cache_key = %%s" as argument,
call the method cursor.execute with string "SELECT COUNT(*) FROM %s" as argument, substitute the '%s' with table.
substitute the '%s' with table and list containing return value of the method call ops.value_to_db_datetime with argument now on the object under the db key of connections dictionary, respectively.   call the method cursor.execute with string "SELECT COUNT(*) FROM %s" as argument, substitute the '%s' with table.
call the method cursor.execute with string "UPDATE %s SET value = %%s, expires = %%s WHERE cache_key = %%s" as argument,
call the method cursor.execute with an argument line.
call the method cursor.execute with an argument sql.
call the cursor.execute method with sql as argument.
call the method cursor.execute with sql as argument.
call the cursor.execute method with statement as argument.
call the connection.cursor method, substitute the result for cursor.
call the connection.cursor method, substitute it for cursor.
call the method connection.cursor, substitute the result for cursor.
cursor is None.
call the method custom_sql_for_model with model, no_style() and connection as arguments, substitute the result for custom_sql.
convert to an integer value under the 'COMP_CWORD' key of the os.environ dictionary, substitute it for cword.
slit by whitespace the value under the 'COMP_WORDS' key of the os.environ dictionary, substitute the result without the first element for cwords.
get the value under the self key of the context.render_context dictionary, substitute it for cycle_iter.
substitute val for value under the k key of dictionary d.
add the string '0x' to the variable d
call the function datetime_safe.new_datetime with an argument date, on the result call the method strftime with an argument,
d is an empty string.
d is an empty dictionary.
substitute value under idx key of dictionary d for d.
call the method m.groups, use the first element of the result as key for obtaining value from d dictionary,
substitute value under n key of dictionary d for d.
format self.day_field string with name, use it as the key for the data dictionary, substitute the result for d.
call the function datetime.datetime with 3 arguments, d.year, d.month and d.day, substitute the result for d.
d is an instance of class Decimal, created with result of the function force_text,
d is an instance of Decimal class created with an argument input_val.
call the get_deserializer function with an argument format, substitute the result for d.
call the method m.groupdict, substitute the result for d.
call the method m.groups, use the first element of the result as key for obtaining value from self.config dictionary,
substitute the value under the 'errlog' key of options dictionary for value under the 'err_log' key of daemon_kwargs dictionary.
substitute the value under the 'outlog' key of options dictionary for value under the 'out_log' key of daemon_kwargs dictionary.
convert the value under the 'umask' key of options dictionary into an integer of base 8, substitute it for value under the 'umask' key of daemon_kwargs dictionary.
daemon_kwargs is an empty dictionary.
if the value under the 'bindAddress' key of the wsgi_opts dictionary is not None, set daemonize to boolean True, if not, set it to boolean False.
daemonize is boolean False.
daemonize is boolean True.
DARK_PALETTE is a string 'dark'.
call the smart_text function with 2 arguments: return value of the obj._get_pk_val function and string_only set to boolean True,
value under f.name key of the dta dictionary is an empty list.
for every item in qu append item.pk to a list, substitute resulting list for value under f.name key of the data dictionary.
call the method f.value_from_object with an argument instance, substitute the result for value under the f.name key of the data dictionary.
call the method qs.values_list with 2 arguments: string 'pk' and flat set to boolean True, put the results in a list,
all the method field.rel.to._meta.get_field with field.rel.field_name as argument, call the to_python method on the result with,
value under the field.attname key of the data dictionary is None.
call the method self._handle_fk_field_node with field_node and field as arguments, substitute the result for the value under the
unpacked list field_value as an argument, substitute the result for value.   substitute value for value under the field.attname key of the data dictionary.
call the field.to_python method with field_value, substitute the result for field.name key of the data dictionary.
call to the field.to_python method, substitute the result for value.   substitute value for value under the field.name key of the data dictionary.
call the method node.getAttribute with an argument string 'pk', use the result as the argument for the call to the method,  Model._meta.pk.to_python with, substitute the result for value under the Model._meta.pk.attname key of the data dictionary.
call the method Model._meta.pk.to_python with one argument: value under the 'pk' key of dictionary d, or None if previous doesnt exists,
create a tuple out of elements under the key field of the form.cleaned_data dictionary, add elements of date_data to it,
data is an empty list.
data is an dictionary with 2 initial entries: return value of the smart_text function with the argument obj._meta for 'model',
data is an empty dictionary,
data is an empty dictionary.
call the method b64_decode with an argument base64, substitute the result for data.
call the function base64.b64decode with an argument raw_data, substitute the result for data.
convert data into boolean and substitute it for data.
data is an instance of BytesIO class, created with an argument: self._body.
substitute compressed for data.
call the function conditional_escape with an argument arg, call the method join on the result with an argument value,
call the method data.encode with 2 arguments: fp.encoding and errors, substitute the result for data.
call the method data.replace with an argument microsecond set to integer 0, substitute the result for data.
call the method data, substitute the result for data.
if data is true, substitute it for data, otherwise data is an empty list.
call the method field_stream.read, substitute the result for data.
read chunk_size bytes from file and store it in data.
serialize data to JSON format with cls set to encoder, substitute it for data.
call the function method with 3 arguments: self, unpacked list args and unpacked dictionary kwargs, substitute the result for data.
data is None.
remove element under '_data' key of obj_dict dictionary, if it exists substitute it for data, if not data is an empty list.
substitute raw_data for data.
substitute self for data.
call the method self._archive.read with an argument name, substitute the result for data.
call the method self._coerce with an argument data, substitute the result for data.
call the method self._prepare_data with an argument data, substitute the result for data.
call the method self.field.bound_data with 2 arguments: self.data and value under the self.name key of the dictionary,
call the method self.flo.read with an argument self.chunk_size, substitute the result for data.
get the value under the self.name key of the self.form.initial dictionary, if it exists, substitute it for data,
call the self.read method with argument chunk_size, substitute the result for data.
call the function self.to_python with an argument data, substitute the result for data.
call the serializer function, call the dumps method on the result with an argument obj, substitute result for data.
convert data to string, substitute it for data.
call the function zlib.decompress with an argument data, substitute the result for data.
for every value in data call the function force_text with an argument value, add the results into a set, substitute the resulting set for data_set.
for every value in result of the method self.prepare_value called with an argument initial.   data_set is set created out of return values of the function force_text called with an argument value,
substitute data for data_value if data is not None, otherwise data_value is an empty list.
if data is not None, substitute data for initial_value, otherwise data_value is an empty string.
call the method field.widget.value_from_datadict with 3 arguments: self.data, self.files, prefixed_name, substitute the result for data_value.
substitute value under the 'database' key of the options dictionary for database.
databases is a list containing 2 elements: self.using and None.
call the method datetime_safe.new_datetime with an argument date, substitute the result for date.
call the function datetime_safe.new_datetime with an argument date, substitute the result for date.
substitute value under the unique_for key of form.cleaned_data dictionary for date.
date_data is a tuple with 3 elements: date.year, date.month and date.day.
date_data is a tuple with an entry: attribute lookup from the value under the unique_for key of the form.cleaned_data dictionary.
date_keys is a tuple with 2 arguments: strings 'updateddate' and 'pubdate'.
compile regex from raw string '(?P<year>\d{4})-(?P<month>\d{1,2})-(?P<day>\d{1,2})$', substitute it for date_re.
call the function datetime.date with 3 arguments: y, m and d all converted into a integers, substitute the result for date_value.
call the method datetime_safe.new_date with an argument date_value, substitute the result for date_value.
substitute it for time_re.   compile regex from raw string '(?P<year>\d{4})-(?P<month>\d{1,2})-(?P<day>\d{1,2})[T ](?P<hour>\d{1,2}):(?P<minute>\d{1,2})'
substitute DjangoJSONEncoder for DateTimeAwareJSONEncoder.
method MONTHS.index, increment the result by integer 1, substitute it for month.   call the method m.group with an argument string 'fay', convert the result into a string, substitute it for day.
day_field is a string '%s_day'.
call the method self.z, substitute the result for day_of_year.
days is a tuple with 7 elements: strings 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat' and 'Sun'.
get value under the 'database' key of the options dictionary, substitute it for db.
get the value under the key 'database' of the options dictionary, substitute it for db.
remove the value under the 'using' key from the options dictionary, assign it to the db, if the entry doesnt exists,
call the method router.db_for_read with self.cache_model_class as argument, substitute the result for db.
call the method router.db_for_write with argument self.cache_model_class, substitute the result for db.
call the method router.db_for_write with argument self.cache_model_class, substitute the result for db.
db_module is a string 'django.db'.
call the method connection.creation.create_test_db with verbosity set to verbosity, autoclobber set to inverse value of interactive,
call the method deactivate.
deactivate and deactivate_all are lambda functions returning None.
call the function deactivate_all.
DEBUG is integer 10.
subtract length of dec_part from decimal_pos, multiply the number of character '0' by the result,
add decimal_sep and dec_part, substitute the result for dec_part.
decimal_digits is a string '0123456789'.
call the function get_format with an argument string 'DECIMAL_SEPARATOR', substitute the result for decimal_separator.
substitute absolute value of the exponent for decimals.
remove entry at the attr key of the declared_fields dictionary.
decompress is boolean True.
and instance of Name class created with an argument string 'python_2_unicode_compatible'.   decorated is an instance of class Node, created with 3 arguments: syms.decorated, list with 2 arguments: decorator and klass,
decorator is an instance of class Node, created with 2 arguments: instance of Leaf class created with 2 arguments: token.AT and "@',
define the method __add__ with arguments self and other.
define the method __add__ with 2 arguments self and rhs.
define the method __bool__ with argument self.
define the method __bool__ with an argument self.
define the method __bytes_cast with an argument self.
define the __call__method with arguments self, unpacked list args and unpacked dictionary kwargs.
define private method __call__ with self class instance, environ and start_response as the arguments.
define the method __call__ with 2 arguments: self and f.
define the method __call__ with 3 arguments: self, template_name and template_dirs set to None.
define the method __call__ with arguments self and value.
use the result as an argument for the call to the function bytes, return the result.   define the method __cast with an argument self.
define the method __contains__ with an argument self.
define the method __contains__ with 2 arguments: self and item.
define the method __contains__ with self and key as arguments.
define the private method __contains__ with self class instance and key as arguments.
define the method __contains__ with 2 arguments: self and key.
define the method __contains__ with 2 arguments: self and other.
define the method __copy__ with an argument self.
called with 2 arguments: value and memo, for every key and value in result for the method self.items, return the result.   define the method __copy__ with an argument self.
define the method __deepcopy__ with arguments self and memo.
define the method __deepcopy__ with 2 arguments: self and memo.
define the method __deepcopy__ with 3 arguments: self and memo.
and result of the method self.__getstate__.   define the method __deepcopy__ with 2 arguments self and memo.
define the method __deepcopy__ with 2 arguments self and memo.
for every k and v in result of method the self.lists.   define the method __deepcopy__ with 2 arguments: self and memo set to None.
define the method __deepcopy__ with 2 arguments: self and memodict.
define __del__ method with self as the argument.
define the method __delattr__ with self and name as arguments.
define the method __delattr__ with 2 arguments self and name.
define the method __delitem__ with 2 arguments: self and header.
define the method __delitem__ with 3 arguments: self and key.
define the method __delitem__ with 2 arguments: self and key.
define the method __dir__ with an argument self.
define the method __enter__ with argument self.
define __enter__ method with self as the argument.
define the method __enter__ with an argument self.
define the method __eq__ with self and other as arguments.
define private method __eq__ with self class instance and other as arguments.
define the method __eq__ with self and other arguments:
define the method __eq__ with arguments self and other.
define the method __eq__ with an argument self.
define the method __eq__ with 2 arguments: self and other.
define the method __ne__ with 2 arguments: self and other.
define the method __exit__ with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.
define method __exit__ with self, exc, value and tb as the arguments.
define the method __exit__ with self, exc_type, exc_value and tb as arguments.
define the method __exit__ with arguments: self, exc_type, exc_value and traceback.
define the method __exit__ with 4 arguments: self, exc_type, exc_value and traceback.
define the method __exit__ with 4 arguments self, exc_type, exc_value and traceback.
define the method __get__ with 3 arguments: self, instance and owner.
define the method __get__ with 3 arguments: self, instance and name type to None.
define the method __get__ with 3 arguments: self, obj and tp.
define private method __getattr__ with self class instance and attr as the arguments.
define the method __getattr__ with 2 arguments: self and attr set to None.
define the method __getattr__ with self and name as arguments.
define the method __getattr__ with arguments self and name.
define the method __getattr__ with 2 arguments: self and real_name.
define the method __getinitargs__ with an argument self.
define the __getitem__ method with self and alias arguments.
define the method __getitem__ with 2 arguments: self and header.
define the method __getitem__ with an argument self.
define the method __getitem__ with 2 arguments: self and idx.
define the method __getitem__ with arguments self and index.
substitute it for self.view_name.   define the method __getitem__ with arguments self and index.
define the method __getitem__ with an argument self.
define the method __getitem__ with 2 arguments: self and key.
if it doesnt exists return otherwise.   define the method __getitem__ with 2 arguments: self and key.
and a result of the method __repr__ called from instance of base class of the MultiValueDict class.   define the method __getitem__ with 2 arguments: self and key.
define the method __getitem__ with 2 arguments: self and name.
define the method __getitem__ with arguments self and name.
define the method __getstate__ with an argument self.
define the method __hash__ with an argument self.
define the method __html__ with an argument self.
define the method __init__ with 6 arguments: self, _subtype set to string 'mixed', boundary set to None, _subparts set to None,
define initialization method __init__ with self class instance, unpacked list args, unpacked dictionary kwargs as arguments.
define the method __init__ with arguments self, argument list args and dictionary of arguments kwargs.
define the __init__ method with arguments: self, unpacked list args and unpacked dictionary kwargs.
define the method __init__ with arguments: self, unpacked list args and unpacked dictionary kwargs.
define the method __init__ with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.
define the method __init__ with arguments self, unpacked list args and unpacked dictionary kwargs.
define the __init__ method with 3 arguments: self, unpacked list args and unpacked dictionary **kwargs.
No file was submitted. Check the encoding type on the form. for 'invalid', return value of the function _ called with an argument,   string "No file was submitted." for 'missing', return value of the function _ called with an argument "The submitted file is empty.",   for 'empty', return value of the function ungettext_lazy called with 3 arguments:   string 'Ensure this filename has at most %(max)d character (it has %(length)d).',   string 'Ensure this filename has at most %(max)d characters (it has %(length)d).' and string 'max' for 'max_length',   and return value of the function _ called with an argument string,   'Please either submit a file or check the clear checkbox, not both.' for 'contradiction'.   define the method __init__ with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.
define the method __init__ with 3 arguments: self unpacked list args and unpacked dictionary kwargs.
define the method __init__ with 3 arguments: self,unpacked list args and unpacked dictionary kwargs.
define the method __init__ with 2 arguments: self and unpacked list dicts.
define the method __init__ with 3 arguments: self, args and kw.
define the method __init__ with arguments: self class instance and argv set to None.
define the method __init__ with 3 arguments: self, attrs set to None and check_test set to None.
define the method __init__ with 3 arguments: self, attrs set to None and choices set to an empty tuple.
define the method __init__ with 4 arguments: self, attrs set to None, date_format set to None and time_format set to None.
define the method render with 4 arguments: self, attrs set to None, date_format set to None and time_format set to None.
define the method __init__ with 3 arguments: self, attrs set to None and format is None.
define the method __init__ with 3 arguments: self, attrs set to None and render_value set to boolean False.
define the method __init__ with 5 arguments: self, attrs set to None, years set to None, months set to None and empty_label set to None.
define the method __init__ with arguments self and attrs set to None.
define the method __init__ with 2 arguments: self and attrs set to None.
define the method __init__ with 2 arguments: self and callback.
define the method __init__ with 4 arguments: self, children set to None, connector set to None and negated set to boolean False.
Select a valid choice. %(value)s is not one of the available choices.' for 'invalid_choice'.   define the method __init__ with 9 arguments: self, choices set to an empty tuple, required set to boolean True, widget set to None,
deifne the method __init__ with 5 arguments: self, class_name, old_method_name, new_method_name and deprecation_warning.
define the method __init__ with arguments: self, cmd and unpacked dictionary kwargs.
define the method __init__ with 2 arguments: self and conditions_nodelists.
define the method __init__ with 2 arguments: self and config.
define the method __init__ with arguments self and connection_reset defaulting to boolean False.
define the method __init__ with arguments self, content and name defaulting to None.
define the method __init__ with 2 arguments: self and content.
define the method __init__ with 4 arguments: self, content set to an empty list, unpacked list args and unpacked dictionary kwargs.
define the method __init__ with 4 arguments: self, content_type set to None, status set to None, reason set to None.
define the method __init__ with 4 arguments: self, context, unpacked list args and unpacked dictionary kwargs.
define the method __init__ with arguments self, context, base, sysid and pubid.
define the initialization method __init__, with self instance of this class, convert_charrefs set to boolean False,
define the method __init__ with 4 arguments: self, cyclevars, variable_name set to None and silent set to boolean False.
define the method __init__ with 5 arguments: self, data, encoder set to DjangoJSONEncoder, safe set to boolean True,
define the method __init__ with 4 arguments: self, data, func and prefix.
define the method __init__ with 10 arguments: self, data set to None, files set to None, auto_id set to string 'id_%s',
define the method __init__ with 4 arguments: self, data set to None, files set to None, auto_id is an string 'id_%s', prefix is None,
define the method __init__ with 7 arguments: self, data set to None, files set to None, auto_id set to an string 'id_%s',
define the method __init__ with 7 arguments: self, data set to None, files set to None, auto_id set to string 'id_%s',
define the method __init__ with 8 arguments: self, data set to None, files set to None, instance set to None,
define the method __init__ with 2 arguments: self and data set to None.
define the method __init__ with 6 arguments: self, dict_ set to None, autoescape set to True, current_app set to None,
define the method __init__ with 2 arguments: self and dict_ set to None.
define the initialization function with self class instance, digits and sign defaulting to '-' as arguments.
define the initialization method __init__ with arguments: self class instance, dir and params.
define the method __init__ with 4 arguments: self, dirpath, file_name and locale_dir.
define the method __init__ with 5 arguments: self, display_name, loader, name and dirs.
define the method __init__ with 2 arguments self and dt.
define the initialization method __init__ with self class instance and environ as arguments.
define the __init__method with arguments self and exception.
define the method __init__ with arguments: self, fail_silently set to boolean False and unpacked dictionary kwargs.
define the method __init__ with 2 arguments: self and field.
define the method __init__ with arguments: self, fields set to an empty tuple, unpacked list args and unpacked dictionary kwargs.
Enter a list of values.' for 'invalid' and return value of the function _ called with an argument string,   'Enter a complete value.' for 'incomplete'.   define the method __init__ with arguments self, fields set to an empty ilst, unpacked list args and unpacked dictionary kwargs.
define the method __init__ with 8 arguments: self, file, field_name, name, content_type, size, charset and content_type_extra set to None.
define the method __init__ with self class instance, file, and name defaulting to None as arguments.
define the method __init__ with 2 arguments self and file.
define the method __init__ with 7 arguments: self, file set to None, name set to None, content_type set to None, size set to None, charset set to None and content_type_extra set to None.
define the method __init__ with 3 arguments: self, filepath and parsed.
define the method __init__ with 3 arguments: self, filter_expr and nodelist).
define the method __init__ with 2 arguments: self and filter_expression.
define the method __init__ with arguments self, flo and chunk_size set to integer 64 multiplied by integer 1024.
define the method __init__ with 4 arguments: self, form, field and name.
define the method __init__ with 2 arguments: self and format_string.
define the __init__ method with 7 arguments: self, func, args, kwargs, url_name set to None, app_name set to None and namespaces set to None.
define the method __init__ with 3 arguments: self, func and name set to None.
define the method __init__ with 2 arguments self and func.
define initialization method __init__ with 4 arguments: self, host, list of arguments args and dictionary of arguments kwargs.
define the method __init__ with arguments: self, host set to None, port set to None, username set to None, password set to None,
define the method __init__ with 3 arguments: self, include_html set to boolean False and email_backend set to None.
define the method __init__ with 3 arguments: self, initlist set to None and error_class set to None.
for 'invalid_date' and return value of the function _ called with an string 'Enter a valid time.', for 'invalid_time.   define the method __init__ with 3 arguments: self, input_date_formats set to None, input_time_formats set to None,
define the method __init__ with arguments self, input_formats set to None, unpacked list args and unpacked dictionary kwargs.
define the method __init__ with 2 arguments: self and iterable set to None.
define the method __init__ with 4 arguments: self, key set to None, sep set to ':' and salt set to None.
define the method __init__ with 2 arguments: self and key_to_list_mapping set to an empty tuple.
define the method __init__ with 3 arguments: self, language and deactivate set to boolean False.
define the method __init__ with 2 arguments: self and language.
define initialization method __init__ with self class instance, level, msg, hint defaulting to None, obj defaulting to None and if defaulting to None as arguments.
define the method __init__ with 2 arguments: self and lexer.
define the method __init__ with self and limit_value as arguments.
define the method __init__ with 2 arguments: self and loaders.
define the method __init__ with 5 arguments: self, location set to None, base_url set to None, file_permissions_mode set to None,
define the method __init__ with 6 arguments: self, loopvars, sequence, is_reversed, nodelist_loop and nodelist_empty set to None.
define the method __init__ with 5 arguments: self, max_length set to None, min_length set to None, unpacked list args,
Enter a whole number.' for 'invalid'.   define the method __init__ with 5 arguments: self, max_value set to None, min_value set to None, unpacked list args and unpacked dictionary kwargs.
Enter a number.' for 'invalid', return value of the function ungettext_lazy called with 3 string arguments:   'Ensure that there are no more than %(max)s digit in total.', 'Ensure that there are no more than %(max)s digits in total.',   and 'max' for 'max_digits', return value of the function ungettext_lazy called with 3 string arguments:   'Ensure that there are no more than %(max)s decimal place.', 'Ensure that there are no more than %(max)s decimal places.' and 'max',   for 'max_decimal_places' and return value of the function ungettext_lazy called with 3 string arguments:   'Ensure that there are no more than %(max)s digit before the decimal point.',   'Ensure that there are no more than %(max)s digits before the decimal point.' and 'max' for 'max_whole_digits'.   define the method __init__ with 7 arguments: self, max_value set to None, min_value set to None, max_digits set to None,
define the method __init__ with 3 arguments: self, media set to None and unpacked dictionary kwargs.
define the method __init__ with 4 arguments: self, message, code set to None and params set to None.
define the __init__ method with 4 arguments: self, message set to None, code set to None and whitelist set to None.
define the method __init__ wiht 5 arguments: self, META, input_data, upload_handlers and encoding set to None.
define method __init__ with self class instance, mode string 'w+b', bufsize set to integer -1, suffix and prefix set to empty strig,
define the method __init__ with 3 arguments: self, msg and params set to an empty tuple.
define the method __init__ with 4 arguments: self, name, content and content_type defaulting to a string 'text/plain'.
define the __init__ method with 6 arguments: self, name, content_type, size, charset and content_type_extra set to None.
define the method __init__ with 4 arguments: self, name, nodelist, parent set to None.
define the method __init__ with 4 arguments: self, name, old and new set to None.
define the method __init__ with 6 arguments: self, name, old_mod, new_mod, old_attr set to None, new_attr set to None.
define the initialization method __init__ with 3 arguments: self, name and params.
define the method __init__ with 4 arguments: self, name, regex and next set to None.
define the method __init__ with arguments self, name, sysid and pubid.
define the method __init__ with 6 arguments: self, name, value, attrs, choice and index.
define the method __init__ with 5 arguments: self, name, value, attrs and choices.
define the method __init__ with arguments self, name, value, base, sysid, pubid and notation_name.
define the method __init__ with 2 arguments: self and name.
define the method __init__ with 4 arguments: self, nodelist, parent_name and template_dirs set to None.
define the method __init__ with 2 arguments: self and nodelist.
define the method __init__ with 4 arguments: self, nodelist_true, nodelist_false and unpacked list varlist.
define the private method __init__, with self instance of this class, obj and list of arbitrary length *args as arguments.
define the method __init__, with 3 arguments: self, m2m and data set None.
define the method __init__ with 2 arguments: self and obj.
define the method __init__ with 4 arguments: self, object_list, number, and paginator.
def the method __init__ with 5 arguments: self, object_list, per_page, orphans set to integer 0 and allow_empty_first_page set to boolean True.
define the method __init__ with 2 arguments: self and offset.
define the method __init__ with 3 arguments: self, offset set to None, name set to None.
define the method __init__ with arguments: self and options set to None.
define the method __init__ with 4 arguments: self, out, style, func set to None and endings set to newline character.
define the initialization function __init__ with self class instance and params as arguments.
string 'The inline foreign key did not match the parent instance primary key.' for 'invalid_choice'.   define the method __init__ with 4 arguments: self, parent_instance, unpacked list args and unpacked dictionary kwargs.
define the method __init__ with 6 arguments self, parent_widget, name, value, attrs and choices.
define the method __init__ with 4 arguments: self, parser, unpacked list args and unpacked dictionary kwargs.
define the method __init__ with 13 arguments: self, path, match set to None, recursive set to boolean False,
define the method __init__ with 4 arguments: self, permitted_methods, unpacked list args and unpacked dictionary kwargs.
define the method __init__ with 3 arguments: self, producer and length set to None.
define the method __init__ with 5 arguments: self, protocol set to string 'both', unpack_ipv4 set to boolean False,
define the method __init__ with 4 arguments: self, query_string is None, mutable is boolean False and encoding set to None.
string 'Enter a list of values.' for 'list', return value of the function _ called with an argument,   string 'Select a valid choice. %(value)s is not one of the available choices.' for 'invalid_choice',   and return value of the function _ called with an argument string '"%(pk)s" is not a valid value for a primary key.' for 'invalid_pk_value'.   define the method __init__ with 10 arguments: self, queryset, cache_choices set to None, required set to boolean True,
string 'Select a valid choice. That choice is not one of the available choices.' for 'invalid_choice'.   define the method __init__ with 13 arguments: self, queryset, empty_label set to a string  "---------", cache_choices set to None,
define the method __init__ with 4 arguments: self, redirect_to, unpacked list args and unpacked dictionary kwargs.
define the method __init__ with 5 arguments: self, regex, callback, default_args set to None and name set to None.
define the method __init__ with 7 arguments: self, regex, max_length set to None, min_length set to None, error_message set to None,
define the method __init__ with 6 arguments: self, regex, urlconf_name, default_kwargs set to None, app_name set to None and namespace set to None.
define the method __init__ with arguments self and regex.
define the method __init__ with 6 arguments: self, regex set to None, message set to None, code set to None,
define the method __init__ with 7 arguments: self, request, dict_ set to None, processors set to None, current_app set to None,
define the method __init__ with 7 arguments: self, request, template, context set to None, content_type set to None,
define the method __init__ with arguments self and request defaulting to None.
define the function __init__ with 11 arguments: self, required set to boolean True, widget set to None, label set to None,
define the method __init__ with 2 arguments: self and s.
define the method __init__ with 3 arguments: self, schemes set to None and unpacked dictionary kwargs.
define the method __init__ with, self, server, params, library, value_not_found_exception as arguments.
define the method __init__ with argument self, server and params.
define the method __init__ with self, server and params as arguments.
define the method __init__ with 3 arguments: self, setting and nodelist.
define the method __init__ with 2 arguments: self and source.
define the method __init__ with 3 arguments self, states and first.
define the method __init__ with arguments self, stream and boundary.
def initialization method __init__ with self class instance, stream, limit and buf_size set to integer value of the product 64*1024*1024.
define the method __init__, with 3 arguments: self, stream_or_string and unpacked dictionary options.
define the method __init__ with 3 arguments: self, stream_or_string and unpacked dictionary options.
define the method __init__ with 4 arguments: self, result of the function streaming_content=(), unpacked list args,
define the function next_space_index with 2 arguments: self and subject.
define the method __init__ with 11 arguments: self, subject set to an empty string, body set to an empty string,
define the method __init__ with 10 arguments: self, subject set to an empty string, body set to an empty string,
define the initialization method __init__ with self, table and params as arguments.
define the initialization method __init__ with self class instance and table as arguments.
VARIABLE_TAG_START for 'openvariable', VARIABLE_TAG_END for 'closevariable', SINGLE_BRACE_START for 'openbrace',   SINGLE_BRACE_END 'closebrace', COMMENT_TAG_START 'opencomment' and COMMENT_TAG_END for 'closecomment'.   define the method __init__ with 2 arguments: self and tagtype.
define the function __init__ with 5 arguments: self, takes_context, args, kwargs and target_var.
define the method __init__ with 4 arguments: self, takes_context, args and kwargs.
define the method __init__ with 4 arguments: self, target, expression and var_name.
define the method __init__ with 4 arguments: self, template, unpacked list args and unpacked dictionary kwargs.
define the method __init__ with 5 arguments: self, template, context set to None, content_type set to None and status set to None.
define the method __init__ with 3 arguments: self, template_string and origin.
define the method __init__ with 4 arguments: self, template_string, origin set to None and name set to None.
define the __init__ method with arguments: self, text, subtype and charset.
define the method __init__ with 2 arguments: self and text.
define the method __init__ with 2 arguments: self and timezone.
define the method __init__ with 15 elements: self, title, link, description, language set to None, author_email set to None,
define the function __init__ with 3 arguments: self, token and parser.
define the method __init__ with 3 arguments: self, token_type and contents.
define the method __init__ with 2 arguments: self and token.
define the method __init__ with 2 arguments: self and tokens.
define the method __init__ with 3 arguments: self, tup and hash set to hash.
define the method __init__ with 4 arguments: self, url, length and mime_type.
define the __init__ method with 5 arguments: self, urlconf_name, default_kwargs set to None, app_name set to None and  namespace set to None.
define the method __init__ with 5 arguments: self, val_expr, max_expr, max_width and asvar set to None.
define the method __init__ with 3 arguments: self, value and text.
define the method __init__ with 2 arguments: self and value.
define the method __init__ with 5 arguments: self, var, name, nodelist and extra_context set to None.
define the method __init__ with 2 arguments self and var.
define the method __init__ with 6 arguments: (self, var1, var2, nodelist_true, nodelist_false and negate.
define the method __init__ with 2 arguments: self and variables.
define the method __init__ with 5 arguments: self, view_name, args, kwargs and asvar.
define the method __init__ with 3 arguments: self, widgets and attrs set to None.
define the __init__ method with argument self.
define initialization method __init__ with argument self.
define initialization method __init__, with self class instance as the argument.
define the method __init__ with an argument self.
define the method with reload with an argument self.
define initialization method __init__ with self instance of the class as an argument.
result of the function literals called with an argument string "/= /" and next as a string 'reg', to the both_before,   appended both_after to the previous result, for 'div' and appended list with an element instance of a class Tok,   created with 3 arguments: string "regex",   raw string '/([^*\\/[]|\\.|\[(   [^\]\\]|   \\.)*\])(   [^\\/[]|   \\.|   \[(   [^\]\\]|   \\.)*\])*/[a-zA-Z0-9]*',   and next as a string 'div', to the both_before, appended both_after to the previous result for 'div'.   define the method __init__ with an argument self.
define the method __iter__ with an argument self.
define the method __iter__ with argument self.
define iterator method __iter__ with self as the argument.
define the method _iter with an argument self.
separated with string ', ', substitute '%s' with self.sequence, substitute '%d' with length of self.nodelist_loop,   substitute '%s' with reversed_text.   define the method __iter__ with an argument self.
define the method __len__ with argument self.
define the method __len__ with an argument self.
define the mehod __lt__ with self and other.
define the method __lt__ with 2 arguments: self and other.
define the method __mod__ with 2 arguments: self and rhs.
define the method __ne__ with self and other as arguments.
return boolean True, otherwise return boolean False.   define private method __ne__ with self class instance and other as arguments.
and self.regex.flags equals to other.regex.flags and self.message equals to other.message and self.code equals to other.code,   and self.inverse_match equals to other.inverse_match, return the result.   define the method __ne__ with arguments self and other.
define the method __ne__ with an argument self.
define the method __ne__ with 2 arguments: self and other.
define the method __new__ with 3 arguments: cls, unpacked list args and unpacked dictionary kwargs.
define the method __new__ with 5 arguments: cls, fget set to None, fset set to None, fdel set to None and doc set to None.
define the method __new__ with 4 arguments: cls, name, bases and attrs.
define the method __new__ with 4 arguments: cls, name, this_bases and d.
define the method __new__ with 4 arguments: mcs, name, bases and attrs.
define the method __new__ with 4 arguments mcs, name, bases and attrs.
define the method __newobj__ with 2 arguments cls and unpacked list args.
define the method __next__ with an argument self.
define the method __nonzero__ with argument self.
define the method __nonzero__ with an argument self.
define the method __prepare_class__ with an argument self.
define the method __promise__ with 4 arguments: cls, klass, funcname and method.
define the method __reduce__ with an argument self.
define the method __reduce_ex__ with 2 arguments self and proto.
define private method __repr__ with argument self.
define the method __repr__ with an argument self.
define the method __repr__ with argument self.
define the method __repr__with an argument self.
called with an argument BlockNode.   define the method __repr__ with an argument self.
for every c in self.children.   define the method __repr__ with an argument self.
and placed into 2 character spaces, and '%02d' is replaced with reminder of the division of absolute offset by integer 60,   and placed into 2 character spaces.   define the method __repr__ with an argument self.
define the method __reversed__ with an argument self.
define the method __setattr__ with self, name and value as arguments.
define the method __setattr__ with 3 arguments: self, name and value.
define the method __setitem__ with 3 arguments: self, header and value.
define the method __setitem__ with 3 arguments: self, key and value.
define the method __setitem__ with 3 arguments: self, kay and value.
define the method __setitem__ with arguments self, name and val.
define the method __setstate__ with 2 arguments: self and obj_dict.
define the method __setstate__ with 2 arguments: self and state.
define private method __str__ with argument self.
define the method __str__ with an argument self.
define the method __str__ with argument self.
join all of the results into a string separated by newline character, return the result.   define the method __str__ with an argument self.
with an argument: value under the name key of the media_attrs dictionary, if it exists, if not use None as an argument.   define the method __str__ with an argument self.
choice and idx, return the result.   define the method __str__ with an argument self.
define the method with reload with an argument self.
define the private method __str__, with self instance of this class as the only argument.
define the method __text_cast with an argument self.
define the function __wrapper__ with 2 arguments: unpacked list args and unpacked dictionary kw.
define the method __wrapper__ with 3 arguments: self, unpacked list args and unpacked dictionary kw.
define the function _add_doc with 2 arguments: func and doc.
define the method _add_fallback with an argument self.
define the method _add_installed_apps_translations with an argument self.
define the method _add_local_translations with an argument self.
define the method _archive_cls with an argument file.
define the method _assert_mutable with an argument self.
define the protected method _base_set with 4 arguments, self class instance, key, value and timeout set to DEFAULT_TIMEOUT.
define protected method _BaseCookie__set with self class instance, key, real_value and coded_value as arguments.
define the function _bin_to_long with an argument x.
define the method _cache with argument self.
define the method _cache with self class instance as an argument.
define the function _check_boolean_field_default_value with app_config set to None and kwargs dictionary as arguments.
define the function _check_middleware_classes with app_config set to None and kwargs dictionary as arguments.
define the function _check_test_runner with app_config set to None and kwargs dictionary as arguments.
define the function _checkLevel with an argument level.
define the method _clean_fields with an argument self.
define the method _clean_form with an argument self.
slice the filename from the previous result as start index to the end, strip it of white spaces from both ends,   if the result is not an empty string and filename is not an empty string, return boolean True, otherwise return boolean False.   define the method _close_files with an argument self.
from the base class of the class TypedChoiceField.   define the method _coerce with arguments self and value.
from the base class of the class TypedMultipleChoiceField.   define the method _coerce with arguments self and value.
define the method _construct_form with 3 arguments: self, i and unpacked dictionary kwargs.
define the method _convert_to_charset with 4 arguments: self, value, charset and mime_encode set to boolean False.
define the method _create_alternatives with arguments self and msg.
define the method _create_attachment with 4 arguments: self, filename, content and mimetype set to None.
define the method _create_attachments with arguments self and msg.
define the function _create_cache with backend and dictionary pair of elements kwargs as arguments.
define the method _create_message with arguments self and msg.
define the method _create_mime_attachment with arguments self, content and mimetype.
define the method _createdir with argument self.
define the protected method _cull with self class instance, db, cursor and now as arguments.
define the method _cull with argument self.
define the function _curried with 2 arguments: unpacked list moreargs and unpacked dictionary morekwargs.
define the method _dec with 2 arguments: unpacked list args and unpacked dictionary kwargs.
define the function _dec with an argument func.
substitute the middleware.   define the function _decorator with an argument view_func.
define the method _delete with self and fname as arguments.
define the method _delete with arguments self and key.
define the method _existing_object with 2 arguments: self and pk.
define the function _explode_shorthand_ip_string with an argument ip_str.
define the _fd function with argument f.
define the method _find_boundary with an arguments self, data and eof set to boolean False.
define the function _findall with 2 arguments text and substr.
define the method _format_value with 2 arguments: self and value.
define the funtion _generate_cache_header_key with key_prefix and request as arguments.
define function _generate_cache_key, with request, method, headerlist and key_prefix as arguments.
define the function _generator.
define the method _get_choices with an argument self.
define the method _get_closed with argument self.
define the method _get_context_stack_frame with 2 arguments: self and context.
define the method _get_count with an argument self.
define the method _get_filename with argument self.
define _get_files method with self class instance as the argument.
define the function _get_foreign_key with 4 arguments: parent_model, model, fk_name set to None and can_fail set to boolean False.
define method _get_height with self class instance as the argument.
define the method _get_image_dimensions with self class instance as the argument.
define the method _get_media with an argument self.
define the function _get_model with an argument model_identifier.
with an argument string 'object', return the result.   define the method _get_model_from_node with arguments self, node and attr.
define the method _get_name with argument self.
define the method _get_num_pages with an argument self.
define the method _get_page with self class instance, unpacked list args and unpacked dictionary kwargs as arguments.
define the method _get_page_range with an argument self.
def _get_post method with self class instance as the argument.
define the method _get_queryset with an argument self.
define the method _get_regex an argument self.
define the method _get_request with self class instance as argument.
define the method _get_scheme with self class instance as argument.
define the method _get_scheme with an argument self.
define the method _get_size with argument self.
define the method _get_size_from_underlying_file with argument self.
define the function _get_timezone_name with an argument timezone.
define the method _get_to_python with 2 arguments: self and field.
define the function _get_val.
define the method _get_validation_exclusions with an argument self.
define method _get_width with self class instance as the argument.
define the method _handle_fk_field_node with arguments self, node and field.
with field_value as an argument, return the result.   define the method _handle_m2m_field_node with arguments self, node and field.
define the method _handle_object with arguments self and node.
define the method _has_changed with arguments self, initial and data.
define the method _has_changed with arguments self, data and initial.
code set to an string 'invalid_choice' and dictionary params with an entry: val for 'value'.   define the method _has_changed with arguments self, initial and data.
define the method has_changed with arguments self, initial and data.
define the method _has_changed with 3 arguments: self, initial and data.
define the method _has_expired with self and key as arguments.
define the function _helper with 2 arguments list and tabs set to integer 1.
define the method _html_output with 6 arguments: self, normal_row, error_row, row_ender, help_text_html and errors_on_separate_row.
define function _i18n_cache_key_suffix, with request and cache_key as arguments.
define the function _import_module with an argument name.
define the method _init_translation_catalog with an argument self.
define the method _initialize_handlers with an argument self.
define the method _ipython with an argument self.
dest as a string 'interface' and help as a string 'Specify an interactive interpreter interface. Available options: "ipython" and "bpython"'.   define the method _ipython_pre_011 with an argument self.
define the method _ipython_pre_100 with an argument self.
define the method _is_expired with self and f as arguments.
define the function _is_shorthand_ip with an argument ip_str.
define the method _isdst with 2 arguments: self and dt.
define the method _isdst with 2 arguments self and dt.
define the method _iteritems with an argument self.
define the method _iterkeys with an argument self.
define the method _iterlists with an argument self.
define the method _itervalues with an argument self.
substitute '%s' with self._dir converted to a string.   define the method key_to_file with self class instance, key and version defaulting to None as arguments.
define the function _lazy_proxy_unpickle with 4 arguments: func, args, kwargs and unpacked list resultclasses.
define the method _list_cache_files with argument self.
define the method _load_post_and_files with an argument self.
define the function _load_serializers.
define the function _long_to_bin with 2 arguments: x and hex_format_string.
define the function make_decorator with 2 arguments: unpacked list m_args and unpacked dictionary m_kwargs.
define the function _make_key with 9 arguments: args, kwds, typed, kwd_mark as a tuple with an element result of the function object,
if the key doesnt exists substitute boolean False for self.ignore.   define the method _make_parser with an argument self.
define the method_mark_post_parse_error with an argument self.
define the method _media with an argument self.
define the method _new_gnu_trans with 3 arguments: self, localedir and use_null_fallback set to boolean True.
define the method _new_instance with 4 arguments: (cls, children set to None, connector set to None and negated set to boolean False.
or settings.FILE_UPLOAD_DIRECTORY_PERMISSIONS if it is.   define the method _open with arguments self, name and mode defaulting to string 'rb'.
define the function _parse_date_fmt.
define the method _parse_header with an argument line.
define the function _parse_header_params with an argument s.
self.namespace and self.regex.pattern, respectively. return it.   define the method _populate with an argument self.
define the method _post_clean with an argument self.
define the method _prepare_data with 2 arguments: self and data.
define the method _proxy_method with 3 arguments self, unpacked list args and unpacked dictionary kwargs.
self.error_class called with an argument error_class set to string 'nonfield'.   define the method _raw_value with 2 arguments: self and fieldname.
define the method _read_limited with self class instance and size set to None as arguments.
define the method _render with 2 arguments self and context.
define the function _replace_entity with an argument match.
define the method _reset_dicts with 2 arguments: self and value set to None.
define the method _resolve with an argument self.
define the method _resolve_lookup with 2 arguments: self and context.
RemovedInDjango19Warning and stacklevel set to integer 2.   define the function _resolve_name with 3 arguments: name, package and level.
define the method _reverse_with_prefix with arguments self, lookup_view, _prefix, unpacked list args and unpacked dictionary kwargs.
define the function _samefile with arguments src and dst.
define the function _sanitize_ipv4_mapping with an argument ip_str.
define the method _save with arguments self, name and content.
define the method _send with arguments self and email_message.
define the method _set with 4 arguments, self class instance, key, value and timeout set to DEFAULT_TIMEOUT.
define the method _set_choices with arguments self and value.
define the method _set_name with arguments self and name.
define the _set_post method with self class instance and post as the arguments.
define the method _set_queryset with 2 arguments: self and queryset.
define the method _set_regex with arguments self and regex.
define the function _set_response_etag, with response as an argument.
define the method _set_size with arguments self and size.
define the _setup method with argument self.
define the method _setup with an argument self.
define the method _should_delete_form with an argument self.
define the function _split_statements with an argument content.
define the method _start_relational_field with arguments self and field.
define the function _string_concat with an argument unpacked list strings.
define the function _strip_once with an argument value.
define the method _text_chars with 5 arguments: self, length, truncate, text and truncate_len.
define the method _text_words with 3 arguments: self, length and truncate.
define function _to_tuple with s as an argument.
define the method _truncate_html with 6 arguments: self, length, truncate, text, truncate_len and words.
define the function _unpack_ipv4 with an argument ip_str.
define the method _update_errors with 2 arguments: self and errors.
define the method _update_unget_history with arguments self and num_bytes.
called with an argument view_func.   define the function _wrapped_view with 3 arguments: request, unpacked list args and unpacked dictionary kwargs.
define the method _wrapper with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.
define the method a with an argument self.
format_html called with 3 arguments: string '<link href="{0}" type="text/css" media="{1}" rel="stylesheet" />',   return value of the function self.absolute_path called with an argument path and medium,   for every medium in media and for every path in value under the medium key of the self._css dictionary.   define the method absolute_path with 3 arguments self, path and prefix set to None.
define the function abspathu with an argument path.
define the method accessed_time with arguments self and name.
plural set to plural and number set to number, return the result.   define the function activate with an argument language.
define the function activate with an argument language.
define the function activate with an argument timezone.
define the method add with 4 arguments: self, data, conn_type and squash set to boolean True.
if iterable is true, otherwise use an empty list as an argument.   define the method add with 2 arguments: self and item.
define the method add with 5 arguments, self, key, value, timeout defaulting to DEFAULT_TIMEOUT and version defaulting to None.
define the method add with 5 arguments, self class instance, key, value, timeout set to DEFAULT_TIMEOUT and version set to None.
define the method add with 5 arguments: self, key, value, timeout set to DEFAULT_TIMEOUT and version set to None.
define the function add with 2 arguments value and arg.
define the method add_arguments with an argument self and parser.
define the method add_arguments with self and parser as arguments.
define the method add_arguments with arguments self and parser.
define method add_arguments with self class instance and parser as arguments.
define the method add_arguments with self and parser.
define the method add_arguments with 2 arguments self and parser.
format (using each model's default manager unless --all is specified)..   define the method add_arguments with arguments self and parser.
migrations. Unmigrated apps will also have their initial_data fixture reloaded. Does not achieve a "fresh install" state.'   define the add_arguments with arguments self and parser.
path of at least one fixture in the command line.   define the method add_arguments with 2 arguments: self and parser.
define the method add_arguments with 2 arguments: self and parser.
define the method add_arguments with self class instance and parse as the arguments.
define method add_arguments with class instance self and parser as the input arguments.
define method add_arguments with self class instance and parser as the arguments.
define the method add_arguments with self class instance and parser as the arguments.
def method add_arguments with self class instance and parser as the arguments.
define the method add_arguments, with 2 arguments self and parser.
define the method with self class instance and parser as arguments.
define the method add_aguments with arguments self and parser.
define the method self and blocks.
define the method add_css with arguments self and data.
define the method add_error with 3 arguments: self, field and errors.
if not return boolean False.   define the method add_fields with 3 arguments: self, form and index.
define the method add_fields with 2 arguments: self, form and index.
define the method add_fields with 3 arguments: self, form and index.
define the method add_filters with 3 arguments: self, filterer and filters.
define the method add_handlers with 3 arguments: self, logger and handlers.
define the method add_initial_prefix with 2 arguments: self and field_name.
define the method add_item with 17 arguments: self, title, link, description, author_email set to None, author_name set to None,
define the method add_item_elements with 2 arguments, handler self and item.
define the method add_item_elements with 3 arguments: self, handler and item.
define the method __getitem__ with arguments self and name.
define the function add_library with 2 arguments: self and lib.
define the function add_metaclass with an argument metaclass.
substitute it for value under the string ".moves.urllib" appended to __name__ key of the sys.modules dictionary.   define the function add_move with an argument move.
define function add_never_cache_headers, with response as an argument.
define the method add_post_render_callback with 2 arguments: self and callback.
define the method add_prefix with 2 arguments: self and field_name.
label set to return value of the function _ called with an string 'Delete' and required as boolean False.   define the method add_prefix with an argument self.
use it as an argument for the call to the force_str function, return the result.   define the method add_prefix with arguments self and prefix.
define the method add_root_elements with 2 arguments self and handler.
define the method add_root_elements with 2 arguments: self and handler.
define the function add_to_builtins with an argument module.
define the method addQuickElement with 4 arguments: self, name, contents set to None and attrs set to None.
define the function address_string with an argument self.
define the function addslashes with an argument value.
define the function advance_iterator with an argument it.
define the method all with argument self.
define the function all_locale_paths.
is derived from the formset base class and with fields contained in attrs, return an instance of the obtained class.   define the function all_valid with an argument formsets.
and unpacked dictionary kwargs.   define the function allow_lazy with 2 arguments: func and unpacked list resultclasses.
define the method app_dict with an argument self.
define the method appendlist with 3 arguments: self, key and value.
define the method apply_response_fixes with self class instance, request and response as the arguments.
define the method args_check with 3 arguments: name, func and provided.
define the method as_bytes with arguments self and unixfrom set to boolean False.
define the method as_data with an argument self.
define the method as_text with an argument self.
define the method as_hidden with 3 arguments: self, attrs set to None and unpacked dictionary kwargs.
for every f and e in list of tuples of self dictionary key, pair entries.   define the method as_json with 2 argumens self and escape_html set to boolean False.
define the method as_json with 2 arguments self and escape_html set to boolean False.
<li%(html_class_attr)s>%(errors)s%(label)s %(field)s%(help_text)s</li>', error_row set to a a string '<li>%s</li>',   row_ender set to a string '</li>', help_text_html set to a string, ' <span class="helptext">%s</span>',   and errors_on_separate_row set to boolean False.   define the method as_p with an argument self.
separated by newline, use it as an argument for the call to the function mark_safe, return the result.   define the method as_p with an argument self.
define the method as_string with arguments self and unixfrom set to boolean False.
define the method as_table with an argument self.
use it as an argument for the call to the function force_text, return the result.   define the method as_text with 3 arguments: self, attrs set to None and unpacked dictionary kwargs.
format_html_join, called with 3 arguments: empty string, string '<li>{0}{1}</li>', tuple containing tuples with 2 elements:   k and result of the function force_text with an argument v, for every k and v in items of the dictionary self, return the result.   define the method as_text with an argument self.
format_html_join, called with 3 arguments: empty string, string '<li>{0}</li>', tuple containing results of the function,   force_text with an argument e, for every e in self, return the result.   define the method as_text with an argument self.
define the method as_textarea with 3 arguments: self, attrs set to None and unpacked dictionary kwargs.
define the method as_tuple with 2 arguments: self and value.
<tr%(html_class_attr)s><th>%(label)s</th><td>%(errors)s%(field)s%(help_text)s</td></tr>', error_row set to a a string,   '<tr><td colspan="2">%s</td></tr>', row_ender set to a string '</td></tr>', help_text_html set to a string,   '<br /><span class="helptext">%s</span>' and errors_on_separate_row set to boolean False.   define the method as_ul with an argument self.
separated by newline, use it as an argument for the call to the function mark_safe, return the result.   define the method as_ul with an argument self.
with an argument escape_html for f, for every f and e in list of tuples of self dictionary key, pair entries, return the result.   define the method as_ul with an argument self.
use the result as an argument for the call to the json.dumps function, return the result.   define the method as_text with an argument self.
if not evaluate the method self.form.error_class and return the result.   define the method as_widget with 4 arguments: self, widget set to None, attrs set to None, only_initial set to boolean False.
define the function assertCountEqual with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.
and unpacked dictionary kwargs, return the result.   define the function assertRaisesRegex with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.
and unpacked dictionary kwargs, return the result.   define the function assertRegex with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.
define the method assignment_tag with 4 arguments: self, func set to None, takes_context set to None and name set to None.
define the method attach with 4 arguments: self, filename set to None, content set to None and mimetype set to None.
define the method attach_alternative with arguments self, content and mimetype.
define the method attach_file with arguments self, path and mimetype set to None.
define the method auto_id with an argument self.
define the method autocomplete with an argument self.
define the function autodiscover_modules with 2 arguments unpacked list args and unpacked dictionary kwargs.
define the function autoescape with 2 arguments: parser and token.
define the function available_attrs with an argument fn.
define the function avoid_wrapping with an argument value.
define the function b with an argument s.
define the method B with an argument self.
integer 212, integer 243, integer 273, integer 304 and integer 334.   define the method b with an argument self.
define the function b64_decode with an argument s.
define the function b64_encode with an argument s.
define the method back with an argument self.
define the functionbase36_to_int with an argument s.
define the function b64_hmac with arguments salt, value and key.
define the function become_daemon with 4 arguments: our_home_dir set to '.', out_log set to a string '/dev/null',
define the function become_daemon with 4 argument: our_home_dir set to '.', out_log set to None, err_log set to None,
define the function blankout with 2 arguments: src and char.
define the method body with an argument self.
define the function boolean_check with an argument v.
define the method bound_data with arguments self, data and initial.
define the function bound_func with 2 arguments: unpacked list args2 and unpacked dictionary kwargs2.
define the method bpython with an argument self.
define the method build_absolute_uri with an arguments self and location set to None.
define the method build_attrs with 3 arguments: self, extra_attrs set to None and unpacked dictionary kwargs.
define the function build_instance with 3 arguments: Model, data and db.
define the method build_potfiles with an argument self.
define the function build_request_repr with arguments: request, path_override set to None, GET_override set to None,
define the function byte2int with an argument bs.
where '%s' is replaced with request.__class__.__name__, path, return value of the function six.text_type called with an argument get,   return value of the function six.text_type called with an argument post, return value of the function six.text_type,   called with an argument cookies and return value of the function six.text_type called with an argument meta.   define the function bytes_to_text with 2 arguments s and encoding.
define the method c with an argument self.
value under the MISSES key of the stats dictionary, maxsize and length of cache.   define the function cache_clear.
define the function cache_info.
define the method cache_key with 3 arguments: self, template_name and template_dirs.
define the function calculate_app_template_dirs.
define the function call_command with 3 arguments: name, unpacked list args and unpacked dictionary options.
define the function callable with an argument obj.
define the method callback with an argument self.
define the function camel_case_to_spaces with an argument value.
define the function capfirst with an argument value.
define the function catalog.
define the function center with 2 arguments value and arg.
define the method cfg_convert with 2 arguments: self and value.
define the method changed_data with an argument self.
define the method chars with 4 arguments: self, num, truncate set to None, html set to boolean False.
define the method check with 4 arguments: self, app_configs set to None, tags set to None, display_num_errors set to boolean False.
define the function check_1_6_compatibility with argument kwargs dictionary.
define the function check_1_7_compatibility with argument kwargs dictionary.
define the function check_all_models with app_configs defaulting to None and unpacked dictionary kwargs as arguments.
define the function check_errors with argument fn.
define the function check_for_language with an argument lang_code.
define the function check_for_migrations with 2 arguments: app_config and connection.
define the method check_migrations with an argument self.
define the function check_model_signals with app_config defaulting to None and unpacked dictionary kwargs as arguments,
define the method check_programs with an argument unpacked list programs.
define the method choice with 2 arguments: self and obj.
define the method chunks with arguments self and chunk_size defaulting to None.
define the method chunks with arguments self ad chunk_size set to None.
define the method clean with arguments self, data and initial set to None.
define the method clean with arguments self and value.
define the method clean with 2 arguments self and value.
and unpacked dictionary kwargs.   define the method clean with 2 arguments: self and value.
define the method clean with 2 arguments: self and value.
define the method clean with an argument self.
define the function clean_ipv6_address with 3 arguments: ip_str, unpack_ipv4 set to boolean False and error_message,
define the method cleaned_data with an argument self.
define the function cleanup_url with an argument url.
define the method clear with self class instance as the argument,
substitute the '%s' with table and list containing first element of cursor.fetchone method, respectively.   define the method clear with argument self.
define the method clear with argument self.
define the method clear with an argument self.
joining string '%r: %r' formated with k and v into a string, separated with ', ', use it to format a string '{%s}', return it.   define the method clear with an argument self.
define method clear_cdata_mode, with self class instance as an argument.
define the method clear_checkbox_id with 2 arguments: self and name.
define the method clear_checkbox_name with 2 arguments: self and name.
define the function clear_script_prefix.
define the function clear_url_caches.
define the close method with 2 arguments, self and dictionary of argument pairs kwargs.
define the method close with self and dictionary pairs of elements kwargs.
define the method close with argument self.
define the method close with self class instance as the argument.
define the method close with an argument self.
self._files is an instance of class MultiValueDict.   define the method close with an argument self.
define the function close_caches with dictionary pair of elements kwargs as argument.
define the method closed with self as the argument.
define the function code_changed.
define function color_style, without input arguments.
and '8' for 'conceal'.   define the method colorize with 3 arguments: text set to an empty string, opts set to an empty tuple and unpacked dictionary kwargs.
define the method combine with 3 arguments: cls, date and time.
define the function comment with 2 arguments: parser and token.
define the method common_logger_config with 4 arguments: self, logger, config and incremental set to boolean False.
define the function compare_ordering_key with an argument k.
define the function compile_filter with 2 arguments: self and token.
where '%s' is replaced with parse_until elements joined into a string, separated with ', '.   define the method compile_filter_error with 3 arguments: self, token and e.
define the method compile_filter_error with 3 arguments: self, token and e.
substitute __name__ field of the result for function_name, in not, substitute func.__name__ for function_name.   define the function compile_func with 2 arguments: parser and token.
define the method compile_function_error with 3 arguments: self, token and e.
define compile_messages method with self class instance and locations as a arguments.
define the method compile_string with 2 arguments: template_string and origin.
define the method complain with 3 arguments: self, unpacked dictionary wargs and unpacked dictionary kwargs.
define the method compress with arguments self and data_list.
define the function compress_sequence with an argument sequence.
define the function compress_string with an argument s.
define the function conditional_content_removal with request and response as the arguments.
define the function conditional_escape with an argument text.
define the method configure with an argument self.
define the method configure_custom with 2 arguments: self and config.
define the method configure_filter with 2 arguments: self and config.
define the method configure_formatter with 2 arguments: self and config.
define the method configure_handler with 2 arguments: self and config.
define the method configure_logger with 4 arguments: self, name, config, incremental set to boolean False.
and 3 additional pairs of dictionaries for string.   define the function configure_logging with 2 arguments: logging_config and logging_settings.
define the method configure_root with 3 arguments: self, config and incremental set to boolean False.
and connection as the result of the method self.connection.   define the connection with an argument self.
define the function constant_time_compare with 2 arguments: val1 and val2.
call the function constant_time_compare with 2 arguments: val1 and val2.
define the function construct_instance with 4 arguments: form, instance, fields set to None and exclude set to None.
define the function contains with 2 arguments source and inst.
define the method content with 2 arguments: self and value.
define the method content with self and value.
define the method content with an argument self.
define convert method with self class instance, number, from_digits, to_digits and sign as arguments.
define the method convert with 2 arguments: self and value.
define the function convert_old_style_list with an argument list_.
and list with results of the function force_str with an argument i, for every i in v, only if v is a list or a tuple,   otherwise second element is result of the function force_str with an argument v, for every k and v in query,   and doseq, return the result.   define the function cookie_date with an argument epoch_seconds set to None.
define COOKIES method with self as the argument.
define the method copy with an argument self.
define the method copy_plural_forms with arguments self, msgs and locale.
define the function copystat with arguments src and dst.
define the function create_bound_function with 2 arguments: func and obj.
define the method create_nodelist with an argument self.
define the method create_parser with 3 arguments: self, prog_name and subcommand.
define the method id_for_label with arguments self, name, field, value, val, choices and none_value.
define the method create_table with arguments self, database and tablename.
define the method create_token with 3 arguments: self, token_string and in_tag.
define the method create_token with 4 arguments: self, token_string, source and in_tag.
define the method create_var with 2 arguments: self and value.
define the method create_variable_node with 2 arguments: self and contents.
define the method create_variable_node with 2 arguments self and filter_expression.
define the method created_time with arguments self and name.
use the result as an argument for the call to the function datetime.fromtimestamp, return the result.   define the method created_time with arguments self and name.
define the function csrf with an argument request.
define the function csrf_token with 2 arguments: parser and token.
define the method css_classes with 2 arguments: self and extra_classes set to None.
define the function curry with 3 arguments: _curried_func, unpacked list args and unpacked dictionary kwargs.
define the function custom_sql_for_model with 3 arguments: app_config, style and connection.
define the function cut with 2 arguments value and arg.
define the function cycle with 2 arguments: parser and token.
define the method d with an argument self.
define the method data with an argument self.
and time.tzinfo, return the result.   define the method date with an argument self.
define the function date with 2 arguments value and arg set to None.
define the function date_format with 3 arguments: value, format set to None and use_l10n set to None.
define the function deactivate.
define the function deactivate_all.
define the function debug with 2 arguments: parser and token.
define the function debug with an argument request.
define the function dec with an argument func,
define the function dec with an argument func.
and name set to None.   define the function dec with an argument func.
define the decode method with self class instance and s as arguments.
define the method decompress with 2 arguments: self and value.
define the function deconstruct with an argument obj.
define the function deconstructible with 2 arguments: unpacked list args and unpacked dictionary kwargs.
define the function decorating_function with an argument user_function.
define the function decorator with an argument klass.
define the function decorator_from_middleware with an argument middleware_class.
define the function decorator_from_middleware_with_args with an argument middleware_class.
define the method decr with arguments self, key, delta defaulting to integer 1 and version defaulting to None.
define the method decr with self, key, delta defaulting to integer 1 and version defaulting to None as arguments.
define the method decr_version with 4 arguments, self, key, delta defaulting to integer 1 and version defaulting to None.
define the method defalt with arguments self and o.
define the function default with 2 arguments value and arg.
define the function default_if_none with 2 arguments value and arg.
define the function default_key_func with 3 arguments, key, key_prefix and version.
define delete method with self class instance, key and version set to None, as arguments.
define the method delete with self class instance, key and version set to None as arguments.
define the method delete with 3 arguments: self, key, and version set to None.
define the method delete with self class instance, key and version defaulting to None as arguments.
define the method delete with self, key and version set to None as arguments.
define the method delete with arguments self and name.
define the method delete_cookie with 4 arguments: self, key, path set to character '/' and domain set to None.
define the method delete_first_token with an argument self.
define the method delete_many with arguments self, keys and version defaulting to None.
define the method delete_many with 3 arguments: self, keys, and version set to None.
define the function delete_many with self, keys and version set to None as arguments.
define the method deleted_forms with an argument self.
define the function deserialize with 3 arguments: format, stream_or_string and unpacked dictionary options.
define the function Deserializer with arguments object_list and unpacked dictionary options.
define the function Deserializer with arguments stream_or_string and unpacked dictionary options.
define the function Deserializer with 2 arguments: stream_or_string and unpacked dictionary options.
define the method dict with an argument self.
define the function dictConfig with an argument config.
define function dictitem with s as an argument.
define the function dictsort with 2 arguments value and arg.
define the function dictsortreversed with 2 arguments value and arg.
define function dictvale, with an argument t.
define the method discard with 2 arguments: self and item.
define the method display with an argument self.
where '%s' is replaced with self.id.   define the method display with an argument self.
define the function divisibleby with 2 arguments value and arg.
define the function do_block with 2 arguments parser and token.
define the function do_extends with 2 arguments parser and token.
define the function do_filter with 2 arguments: parser and token.
define the function do_for with 2 arguments: parser and token.
define the function do_if with 2 arguments: parser and token.
define the function do_ifequal with 2 arguments: parser, token and negate.
define the function do_include with 2 arguments parser and token.
define the function do_ntranslate with 4 arguments: singular, plural, number and translation_function.
define the function do_translate with 2 arguments: message and translation_function.
define the function do_with with 2 arguments: parser and token.
and '%s' is replaced with app_or_project and message, respectively.   define the method download with arguments self and url.
define the method dst with 2 arguments self and dt.
define the method dst with 2 arguments: self and dt.
define the method utcoffset with 2 arguments: self and dt.
define the function dummy with 2 arguments: unpacked list args and unpacked dictionary kwargs.
define the function dumps with 5 arguments: obj, key set to None, salt set to string 'django.core.signing',
define the method dumps with arguments self and obj.
define the method e with an argument self.
define the method emit with 2 arguments: self and record.
define the method emit_post_migrate with arguments verbosity, interactive and database.
app set to app_config.models_module, create_models set to create_models, verbosity set to verbosity, interactive set to interactive,   and db set to db.   define the function emit_post_migrate_signal with 4 arguments: created_models, verbosity, interactive and db.
define the function emit_pre_migrate_signal with 4 arguments: create_models, verbosity, interactive and db.
define the method empty_block_tag with 2 arguments: self and token.
define the method empty_form with an argument self.
define the method empty_variable with 2 arguments: self and token.
define the method encode with self class instance and i as arguments.
define the method encoding with arguments self and val.
define the method encoding with arguments self and value.
define the method encoding with an argument self.
define the method end_index with an argument self.
define the method end_object with argument self and obj.
define the method end_object with arguments self and obj.
define the method end_serialization with an argument self.
define the method endChannelElement with 2 arguments: self and handler.
define ensure_echo_on function.
define the method enter_command with 3 arguments: self, command and token.
define the method entity_decl with arguments self, name, is_parameter_entity, value, base, sysid, pubid and notation_name.
define the method error with arguments self and message.
define the method enter_command with 3 arguments: self, token and msg.
define the method error with 3 arguments: self, token and msg.
define the method errors with an argument self.
define the function escape with an argument text.
define the function escape_filter with an argument value.
define the function escape_quotes with an argument m.
for integer representation of z converted into a string.   define the function escapejs with an argument value.
define the function escapejs_filter with an argument value.
define the method eval with 2 arguments: self and context.
define the method eval with 2 arguments self and context.
define the method evalu with 2 arguments self and context.
define the function exec with 3 arguments: _code_, _globs_ set to None and _locs_ set to None.
define the method execute with 3 arguments: self, unpacked list args and unpacked dictionary options.
define the method execute with 3 arguments self, unpacked list args and unpacked dictionary options.
define the method execute with an argument self,
define the function execute_from_command_line with an argument argv set to None.
define the function exhaust with an argument stream_or_iterable.
define the method exists with arguments self and name.
define the method exit_command with an argument self.
define the method expression with 2 arguments: self and rbp set to integer 0.
define the method ext_convert with 2 arguments: self and value.
define the method extend_nodelist with 4 arguments: self, nodelist, node and token.
define the method external_entity_ref_handler with arguments self, context, base, sysid and pubid.
define the method extra_forms with an argument self.
define the function extract with 2 arguments path and to_path set to empty string.
define the function with arguments self and filename.
define the method extract with 2 arguments self and to_path.
define the method extract with 2 arguments: self and to_path set to an empty string.
define the method list with an argument self.
define the function F with an argument i.
define the method f with an argument self.
define the method fastcgi_help with an argument message set to None.
define the function fdel with 2 arguments: instance and name set to fdel.__name__.
define the method fetch_command, with arguments self and subcommand.
define the function fget with 3 arguments: instance, instance_type set to None and name set to fget.__name__.
define the function fields_for_model with 9 arguments: model, fields set to None, exclude set to None, widgets set to None,
define the method file_complete with arguments: self and file_size.
define the method file_complete with arguments self and file_size.
define the function file_complete with arguments self and file_size.
define the function file_move_safe with 4 arguments: old_file_name, new_file_name, chunk_size set to multiple of integers 1024 and 64,
and with safe set to bytes string "/#%[]=:;$&()+,!?*@'~", return the result.   define function filepath_to_uri with path as the argument.
define the function filesizeformat with an argument bytes.
define the method filter with 4 arguments: self, name set to None, filter_func set to None and unpacked dictionary flags.
define the method filter with 2 arguments: self and record.
where '%r' is replaced with name and filter_func, respectively.   define the method filter_function with 3 arguments: self, func and unpacked dictionary flags.
define the function find_command with 3 arguments: cmd, path set to None and pathext set to None.
define the function find_commands with an argument management_dir.
define the method find_potfiles with an arguments self and root.
define the function find_filter with 2 arguments: self and filter_name.
define the method find_fixtures with arguments: self and fixture_label.
define the function find_template with 2: template_name and dirs set to None.
define the method find_template with 3 arguments: self, name, dirs set to None.
define the function firstof with 2 arguments: parser and token.
define the function fix with an argument match.
define function fix_location_header with request and response as arguments.
define the method fixture_dirs with an argument self.
define the function flatatt with an argument attrs.
define the method flatten with an argument self.
define the function flatten_result with an argument source.
define the function floatformat with 2 arguments text and arg set to integer -1.
where '%s' is replaced with self.__class__.__name__.   define the method flush with an argument self.
define the method flush with an argument self.
define the function foo with input parameters a and b
resent-to', 'resent-cc' and 'resent-bcc'.   define the function forbid_multi_line_headers with arguments: name, val and encoding.
define function force_bytes with s, encoding set to 'utf-8', strings_only set to False and errors set to 'strict' as arguments.
define the function force_escape with an argument value.
define the function force_text, with s, encoding set to 'utf-8', strings_only set to False, errors set to string 'strict' as arguments.
define the function format with 6 arguments: number, decimal_sep, decimal_pos set to None, grouping set to integer 0,
define the function format with 2 arguments self and formatstr.
define the function format with 2 arguments: value and format_string.
define the function format_html with 3 arguments: format_string, unpacked list args and unpacked dictionary kwargs.
use the result as an argument for the call to the function mark_safe, return the result.   define the function format_html_join with 3 arguments: sep, format_string and args_generator.
files and string created with concatenation of: name, string '_' and i converted into a string, return the results in a list.   define the method format_output with 2 arguments: self and rendered_widgets.
define the method format_subject with 2 arguments: self and subject.
define the method forms with an argument self.
separated by newline, use it as an argument for the call to the function mark_safe, return the result.   define the function formset_factory with 9 arguments: form, formset set to BaseFormSet, extra set to integer 1,
define the function from_current_timezone with an argument value.
define the method from_dict with argument cls and file_dict.
define the function fset with 3 arguments: instance, valse to None and name set to fset.__name__.
define the method full_clean with an argument self.
define the method g with an argument self.
define the function gen_filenames with an argument only_new defaulting to boolean False.
define the method generic_tag_compiler with 9 arguments: parser, token, params, varargs, varkw, defaults, name, takes_context,
define the method get with 3 arguments: self, header and alternate set to None.
define the method get with 4 arguments, self, key, default set to None and version set to None.
define the method get with 4 arguments, self class instance, key, default set to None and version set to None.
define the method get with 4 arguments: self, key, default set to None and version set to None.
define the method get with 5 arguments, self class instance, key, default set to None and version set to None.
define the method get with 3 arguments: self, key and default set to None.
define the method got with 3 arguments: self, key and otherwise set to None.
define the method get with 3 arguments: self, key and otherwise set to None.
define method GET with self class instance as an argument.
define the method get_available_name with arguments self and name.
define the method get_backend_timeout with self class instance and timeout set to DEFAULT_TIMEOUT as arguments,
define the method get_backend_timeout with self and timeout set to DEFAULT_TIMEOUT as arguments.
define the method get_block with 2 arguments self and name.
define the function get_bytes_from_wsgi with environ, key and default as arguments.
define the function get_cache with backend and dictionary pair of elements kwargs as arguments.
define the function get_cache_key, with request key_prefix set to None, method set to 'GET' and cache set to None as arguments.
define the function get_callable with arguments lookup_view and can_fail set to boolean False.
define the function get_commands.
define the function get_complete_version with in argument version, defaulting to None.
SafeMIMEMultipart', 'DEFAULT_ATTACHMENT_MIME_TYPE', 'make_msgid', 'BadHeaderError', 'forbid_multi_line_headers',   'get_connection', 'send_mail', 'send_mass_mail', 'mail_admins' and 'mail_managers'.   define function get_connection with backend set to None, fail_silently set to boolean False and dictionary kwds as arguments.
define the method get_connection with arguments self and fail_silently set to boolean False.
use the result as an argument for the call to the b64_encode function, return the result.   define the function get_cookie_signer with an argument salt set to string 'django.core.signing.get_cookie_signer'.
define the function get_current_timezone.
define the function get_current_timezone_name.
define the method get_data with an argument self.
where '%(field)s' is replaced with return value of the get_text_list function called with 2 arguments:   unique_check and return value of the function six.text_type called with return value of the function _ with an argument string 'and',   return the result.   define the method get_date_error_message with 2 arguments: self and date_check.
define the function get_declared_fields with 3 arguments: bases, attrs and with_base_fields set to boolean True.
define the method get_default_prefix with an argument cls.
define the function get_default_timezone.
define the function get_default_timezone_name.
only if v.Serializer.internal_use_only is false, return the resulting list.   define the function get_deserializer with an argument format.
define the function get_digit with 2 arguments value and arg.
define the method get_dump_object with arguments self and obj.
define method get_exception_response, with self class instance, request, resolver and status_code as the arguments.
define the method get_field_type with 4 arguments: self, connection, table_name and row.
define the function get_fixed_timezone with an argument offset.
the %(lookup)s in %(date_field)s.", where '%(field_name)s' is replaced with third element of data_check,   '%(date_field)s' is replaced with fourth element of date_check and '%(lookup)s' is replaced with result of the function,   six.text_type called with second element of date_check as an argument, return the result.   define the method get_form_error with an argument self.
define the function get_format with 3 arguments: format_type, lang set to None and use_l10n set to None.
define the function get_format_modules with 2 arguments: lang set to None and reverse set to boolean False.
define the method get_fqdn with argument self.
define the method get_full_path with an argument self.
define the function get_git_changeset.
dest set to string 'use_reloader', default set to boolean True and help is a string 'Tells Django to NOT use the auto-reloader.'.   def get_handler with 3 arguments: self, unpacked list args and unpacked dictionary options.
define the method get_host with an argument self.
define the function get_image_dimension with file_or_path and close set to boolean False as the arguments.
define the funtion get_internal_wsgi_application.
define the method get_json_data with 2 arguments self and escape_html set to boolean False.
define the function get_key_func with argument key_func.
define the function get_language.
define the function get_language_bidi.
define the function get_language_from_path with 2 arguments: path and strict set to boolean False.
define the function get_language_from_path with an argument path.
define the function get_language_from_path with an argument request.
define the function get_language_from_request with 2 arguments: request and check_path set to boolean False.
define the function get_language_info with an argument lang_code.
define the function get_library with an argument library_name.
define the method get_limit_choices_to with arguments self.
define the function get_major_version with an argument version defaulting to None.
define the get_many method with self class instance, keys and version set to None as arguments.
define the method get_many with 3 arguments: self, keys, and version set to None.
define the method get_many with self class instance, keys and version defaulting to None as arguments.
define function get_max_age with response as an argument.
define the method get_meta with arguments self and table_name.
define the function get_mod_func with an argument callback.
define the method get_nodes_by_type with 2 arguments: self and nodetype.
define the function get_ns_resolver with arguments ns_pattern and resolver.
define the function get_objects.
define the method get_parent with 2 arguments self and context.
define the get_path_info function with environ as the argument.
define the function get_public_serializer_formats.
define the function get_quantifier with 2 arguments ch and input_iter.
define the method get_queryset with an argument self.
and digestmod set to hashlib.sha1, return the result.   define the function constant_time_compare with 2 arguments: length set to integer 12,
define the method get_renderer with 5 arguments: self, name, value, attrs set to None and choices set to an empty tuple.
define the method get_resolved_arguments with 2 arguments: self and context.
define the function get_resolver with an argument urlconf.
define the method get_response, with self class instance and request as the arguments.
define get_script_name function with environ as an argument.
define the function get_script_prefix.
define the function get_serializer with an argument format.
define the function get_serializer_formats.
called with value under the 'QUERY_STRING' key of the self.META dictionary and append it to string '?',   append the result th the self.path converted into a string and return it,   if the value under the 'QUERY_STRING' key of the self.META dictionary is false, return self.path converted into a string.   def the method get_signed_cookie with 5 arguments: self, key, default set to RAISE_ERROR, salt as an empty string,
define the function get_standard_processors.
use the result as an argument for the call to the function datetime.fromtimestamp, return the result.   define the function get_storage_class with argument import_path=None defaulting to None.
define the get_str_from_wsgi function with environ, key and default as arguments.
define the function get_supported_language_variant with 2 arguments: lang_code and strict set to boolean False.
call the function quote with the result and with the safe set to bytes string "/~!*()'", return the function result.   define the function get_system_encoding without the input arguments.
define the function get_tag_uri with 2 arguments: url and date.
define the function get_template with 2: template_name and dirs set to None.
define the function get_template_from_string with 3: source, origin set to None and name set to None.
define the method get_template_sources with 3 arguments: self, template_name, template_dirs set to None.
define the method get_template_source with 3 arguments: self, template_name, template_dirs set to None.
define the function get_templatetags_modules.
define the function get_text_list with 2 arguments: list_ and last_word set to result of the function ugettext_lazy called with an argument string 'or'.
define the function get_unbound_function with an argument unbound.
define the method get_unique_error_message with 2 arguments: self and unique_check.
define the function get_urlconf with an argument default set to None.
define the function get_valid_filename with an argument s.
define the method det_valid_name with arguments self and name.
define the method get_version with an arguments self.
define the function get_version with version set to None as argument.
define the function get_wsgi_application.
where '%s' is replaced with node.nodeName and attr.   define the function getInnerText with an argument node.
define the method getlist with 3 arguments: self, key and default set to None.
define the method getlist with 2 arguments: self and key.
define the function gettext_noop with an argument message.
define the function gettext with an argument message.
define the function gettext_noop with an argument message.
define the function locale with an argument locale.
define the method getvalue with an argument self.
of the obj object, append the results in a list, substitute it for value under the field.name key of the self._current dictionary.   define the method getvalue with an argument self.
define the method h with an argument self.
and help set to string 'One or more application label.'.   define the method handle with 3 arguments: self, unpacked list app_labels and unpacked dictionary options.
dest set to string 'list_tags' and help set to string 'List available tags.'.   define method handle with arguments self, unapcked list app_labels and unpacked dictionary options.
and help is a string 'Specifies file to which the output is written.'.   define the method handle with arguments self, unpacked list app_labels and unpacked dictionary options.
dest as a string 'interactive', default set to boolean True,   and help as a string 'Tells Django to NOT prompt the user for input of any kind.'.   define the method handle with 3 arguments: self, unpacked list app_labels and unpacked dictionary options.
define the method handle with 3 arguments: self, unpacked args and unpacked dictionary options.
define the method handle with 3 arguments: self, unpacked list args and unpacked dictionary options.
dest as a string 'keep_pot', default as boolean False and help as a string "Keep .pot file after making messages. Useful when debugging."   define the method handle with 3 arguments: self, unpacked list args and unpacked dictionary options.
default set to False, help containing string 'Show a list of all known migrations and which are applied' as arguments.   define the method handle with self instance of a class, list args, dictionary options as arguments.
default set to False and help set to string'Creates SQL to unapply the migration, rather than to apply it' as arguments.   define the method handle with self class instance, list of arguments args and options dictionary as the arguments.
dest as a string 'ignore', default set to boolean False and help set to string 'Ignores entries in the serialized data for fields that do not currently exist on the model.'.   define the method handle with 3 arguments: self, unpacked list fixture_labels and unpacked dictionary options.
default set to boolean False and help set to string 'Tells Django to use an IPv6 address.'.   define the method handle with self class instance, list of arguments fixture_labels and dictionary options as arguments.
define the method handle with 3 arguments: self, unpacked list labels and unpacked dictionary options.
default set to DEFAULT_DB_ALIAS and help set to a string:   'Nominates a database onto which the cache tables will be installed. Defaults to the "default" database.'   define the method handle with arguments self, unpacked list tablenames and unpacked dictionary options.
define the method handle with 3 arguments: self, unpacked list test_labels and unpacked dictionary options.
default as an empty list and help as an string 'Locales to exclude. Default is none. Can be used multiple times.'.   define the handle method with self class instance and dictionary **options as arguments.
default set to DEFAULT_DB_ALIAS and help set to string 'Nominates a database onto which to open a shell. Defaults to the "default" database.'.   define the method handle with arguments self and unpacked dictionary options.
default set to boolean False and help set to a string 'Display all settings, regardless of their value. Default values are prefixed by "###".'   define the method handle with arguments self and unpacked dictionary options.
dest set to string 'load_initial_data', default=True and help as a string 'Tells Django not to load any initial data after database synchronization.'.   define the method handle with arguments self and unpacked dictionary options.
default set to DEFAULT_DB_ALIAS and help as a string 'Nominates a database to introspect. Defaults to using the "default" database.'.   define the method handle with 2 arguments: self and unpacked dictionary options.
define the method handle with 3 arguments: self and unpacked dictionary options.
Nominates a database to print the SQL for. Defaults to the "default" database.' as the arguments.   define the method handle with self class instance and dictionary options as the arguments.
dest as a string 'interactive', default as boolean True help as a string 'Tells Django to NOT prompt the user for input of any kind.'.   define the method handle with 3 arguments: self and unpacked dictionary options.
define the method handle with 2 arguments: self and unpacked dictionary options.
define the method handle with arguments self and unpacked dictionary options.
and help set to string 'Nominates a database to synchronize. Defaults to the "default" database.'.   define the method handle with 2 arguments: self and unpacked dictionary options.
define the method handle with self class instance and dictionary pair of elements options as arguments.
action set to string 'append', default as an empty list and help set to a string:   'The file name(s) to render. Separate multiple extensions with commas, or use -n multiple times.'.   define the method handle with 5 arguments: self, app_or_project, name, target set to None and unpacked dictionary options.
define the method handle_app_config with 3 arguments: self, app_config and unpacked dictionary options.
and help set to a string 'Nominates a database to print the SQL for. Defaults to the "default" database.'.   define the method handle_app_config with 3 arguments: self, app_config and unpacked dictionary options.
Nominates a database to print the SQL for. Defaults to the "default" database.' as the arguments.   define method handle_app_config with self class instance, app_config and dictionary options as arguments.
and help set to string 'Nominates a database to print the SQL for. Defaults to the "default" database.'.   define the handle_app_config with 3 arguments self, app_config and unpacked dictionary options.
and help as a string 'Nominates a database to print the SQL for. Defaults to the "default" database.', as arguments.   define the method handle_app_config with self class instance, app_config and dictionary options as arguments.
and help set to string 'Nominates a database to print the SQL for. Defaults to the "default" database.'.   define the method handle_app_config with 3 arguments: self, app_config and unpacked dictionary options.
define the method handle_charref with 2 arguments self and name.
define the method handle_data with 2 arguments self and d.
define the function handle_default_options with an argument options.
define the method handle_entityref with 2 arguments self and name.
DEFAULT_LOCALE_ENCODING and strings_only set to boolean True and p.returncode.   define the function handle_extensions with 2 arguments: extensions set to tuple containing string 'html' and ignored set to tuple containing string 'py'.
define the method handle_field with argument self, obj and field.
define handle_field method with self, obj and field arguments.
define the method handle_field with arguments self, obj and field.
define the method handle_file_complete with 3 arguments: self, old_field_name and counters.
define the method handle_fk_field with argument self, obj and field.
define the method handle_fk_field with self, obj and field arguments.
define the method handle_fk_field with arguments self, obj and field.
define the method handle_inspection with 2 argument: self and options.
define the method handle_label with 3 arguments: self, label and unpacked dictionary options.
define the function handle_m2m with an argument value,
define the method handle_m2m_field with argument self, obj and field.
define the method handle_m2m_field with self, obj and field arguments.
define the method handle_m2m_field with arguments self, obj and field.
define the method handle_merge with arguments self, loader and conflicts.
define the method handle_noargs with 2 arguments: self and unpacked dictionary options.
define the method handle_raw_input with arguments: self, input_data, META, content_length, boundary and encoding set to None.
define the method handle_template with 3 arguments: self, template and subdir.
define the method handle_uncaught_exception with self class instance, request, resolver and exec_info as arguments.
define the function has_bom with fn as argument.
define the method has_changed with an argument self.
define the method has_error with 3 arguments: self, field and code set to None.
define the method has_header with 2 arguments: self and header.
define method has_key with self class instance, key and version set to None as arguments.
substitute the '%s' with table and list containing key, respectively.   define the method has_key with self class instance, key and version defaulting to None as arguments.
define the method has_key with 3 arguments: self, key, and version set to None.
define the method has_key with self class instance, key and version defaulting to None as arguments.
define the method has_key with 2 arguments: self and key.
define the method has_leading_dir with 2 arguments self and paths.
define the method has_next with an argument self.
define the method has_other_pages with an argument self.
define the method has_previous with an argument self.
substitute it for value of dictionary response under the key 'Vary'.   define function has_vary_header, with response and header_query as arguments.
define the method hidden_fields with an argument self.
and elements of rfcdate from 12-th to the 25-th index.   define the function http_date with an argument epoch_seconds set to None.
define the function humanize with an argument dirname.
define the method i with an argument self.
define the function i18n with an argument request.
define the method id_for_label with arguments self and id.
define the method id_for_label with 2 arguments: self and id.
define the method id_for_label with 2 arguments: self and id_.
return the result.   define the method id_for_label with 2 arguments: self and id_.
define the method id_for_label with an argument self.
define the method IE_sanitize with arguments self and filename.
define the function ifchanged with 2 arguments: parser and token.
define the function ifequal with 2 arguments: parser and token.
define the function ifnotequal with 2 arguments: parser and token.
and third element of result of the function sys.exc_info.   define the function import_by_path with 2 arguments dotted_path and error_prefix set to an empty string..
define the function import_library with an argument taglib_module.
define the function import_module with 3 arguments: name and package set to None.
define the function import_string with an argument dotted_path.
define the function include_is_allowed with an argument filepath.
define the method inclusion_tag with 5 arguments: self, file_name, context_class set to Context, takes_context set to boolean False,
define the method incr with 4 arguments, self class instance, key, delta defaulting to integer 1 and version defaulting to None.
define the method incr with self class instance, key, delta set to integer 1 and version set to None, as arguments.
define the method incr with self, key, delta defaulting to integer 1 and version defaulting to None as arguments.
call the function warnings.warn with previous string and CacheKeyWarning as arguments.   define the method incr_version with 4 arguments, self, key, delta defaulting to integer 1 and version defaulting to None.
define the method indent with argument self and level.
define the function indexbytes with 2 arguments buf and i.
define the function infix with 2 arguments bp and func.
define the method initial_form_count with an argument self.
queryset set to qs and unpacked dictionary kwargs.   define the method initial_form_count with an argument self.
define the method initial_forms with an argument self.
define the function inlineformset_factory with 20 arguments: parent_model, model, form set to ModelForm,
define the method inner with argument check.
define the method inner with 2 arguments: self and unpacked list args.
define the method inner_run with 3 arguments: self, unpacked list args and unpacked dictionary options.
define the function inotify_code_changed.
define the function int_to_base36 with an argument i.
define the function int2byte with an argument i.
define the method invalid_block_tag with 4 arguments: self, token, command and parse_until as None.
tuple containing 2 elements: list with an element validate_ipv4_address and return value of the function _ with an argument string,   'Enter a valid IPv4 address.' for 'ipv4' and tuple containing 2 elements: list with an element validate_ipv6_address,   and return value of the function _ with an argument string 'Enter a valid IPv6 address.' for 'ipv6'.   define the function ip_address_validators with arguments protocol and unpack_ipv4.
define the method ipython with an argument self.
define the function iri_to_uri with iri as an argument.
define the function iriencode with an argument value.
define the method is_ajax with an argument self.
define the function is_aware with an argument value.
and self.choice_label, return the result.   define the method is_checked with an argument self.
substitute set of the results for self.value.   define the method is_checked with an argument self.
define the method is_hidden with an argument self.
define the function is_ignored with arguments path and ignore_patterns.
define the function is_iterable with an argument x.
define the function is_library_missing with an argument name.
define the method is_multipart with an argument self.
return boolean True, otherwise return boolean False.   define the function is_naive with an argument value.
datetime.date and datetime.time.   define the function is_protected_type with obj as the only argument.
define the method is_rendered with an argument self.
define the function is_safe_url with 2 arguments url and host set to None.
define the method is_secure with an argument self.
replace all the '%r' with self.level, self.msg, self.hint. self.obj and self.id, respectively, return the result.   define the method is_serious with argument self.
define the method is_silence with argument self.
define the method is_url with arguments self and template.
define the method is_valid with an argument self.
define the function is_valid_ipv6_address with an argument ip_str.
define the function is_valid_path with arguments path and urlconf set to None.
of if sample starts with codecs.BOM_UTF16_LE or sample starts with codecs.BOM_UTF16_BE, return the evaluated boolean expression.   define the function is_writable with path as argument,
define the method item_attributes with 2 arguments self and item.
define the method items with an argument self.
define the function iter_format_modules with 2 arguments: lang and format_module_path set to None.
define the function iterbytes with an argument buf.
return it.   define the function iteritems with 2 arguments: d and unpacked dictionary  kw.
define the function iterkeys with 2 arguments: d and unpacked dictionary  kw.
return it.   define the function iterlists with 2 arguments: d and unpacked dictionary  kw.
return it.   define the function itervalues with 2 arguments: d and unpacked dictionary  kw.
define the method j with an argument self.
define the function javascript_quote with 2 arguments: s and quote_double_quotes set to boolean False.
define the function join with 3 arguments: value, arg and autoescape set to None.
define the function join_tokens with 2 arguments: tokens and trim set to boolean False.
define the function jython_reloader with main_func, args and kwargs as arguments.
define the method keys with an argument self.
return resulting list.   define the method keys with an argument self.
define the method l with an argument self.
define the method label_from_instance with 2 arguments: self and obj.
define the method label_tag with 4 arguments: self, contents set to None, attrs set to None and label_suffix set to None.
define the method language with an argument self.
define the function last with an argument value.
define the method latest_post_date with an argument self.
define the function lazy with 2 arguments: func and unpacked list resultclasses.
define the function lazy_number with 4 arguments: func, resultclass, number set to None and unpacked dictionary kwargs.
define function learn_cache_key with request, response, cache_timeout set to None, key_prefix set to None, cache set to None as arguments.
where '%s' is replaced with self.id.   define the method led with 3 arguments: self, left and parser.
define the method led with 3 arguments self, left and parser.
define the function length with an argument value.
define the function length_is with 2 arguments value and arg.
define the method lex with 2 arguments self and text.
separated with result of the function conditional_escape with an argument sep, for every args in args_generator,   use the result as an argument for the call to the function mark_safe, return the result.   define the function linebreaks with 2 arguments: value and autoescape set to boolean False.
define the function linebreaks_filter with 2 arguments value and autoescape set to None.
define the function linebreaksbr with 2 arguments value and autoescape set to None.
define the function linenumbers with 2 arguments value and autoescape set to None.
define the method __init__ with 3 arguments self and unpacked list args and unpacked dictionary kwargs.
define the method list with 3 arguments: self and unpacked list args and unpacked dictionary kwargs.
define the method list with an argument self.
define the method listdir with arguments self and path.
define the method lists with an argument self.
define the function literals with 3 arguments: choices, prefix set to an empty string and suffix set to an empty string.
define the function ljust with 2 arguments value and arg.
define the function load with 2 arguments: parser and token.
define the method load with self class instance and rawdata as arguments.
define the function load_command_class with arguments: app_name and name.
name set to self.file_name, content_type set to self.content_type, size set to file_size, charset set to self.charset,   and content_type_extra set to self.content_type_extra, return it.   define the function load_handler with arguments: path, unpacked list args and unpacked dictionary kwargs.
substitute '%d' with self.loaded_object_count, self.fixture_object_count and self.fixture_count.   define the method load_label with self and fixture_label as arguments.
define method load_middleware with class instance self as the argument.
define the method load_template with 3 arguments: self, template_name and template_dirs set to None.
define the method load_template with 3 arguments: self, template_name, template_dirs set to None.
define the method load_template_source with 3 arguments: self, template_name and template_dirs set to None.
define the method load_template_source with 3 arguments: self, template_name, template_dirs set to None.
define the method loaddata with 2 arguments self and fixture_labels.
define the method loaders with an argument self.
define the function loads with 5 arguments: s, key set to None, salt set to string 'django.core.signing',
call the encode method on the result with string 'latin-1' as an argument, return the result.   define the method loads with arguments self and data.
string 'DECIMAL_SEPARATOR', lang and use_l10n set to use_l10n, decimal_pos, result of the function get_format called with 3 arguments:   string 'NUMBER_GROUPING', lang and use_l10n as use_l10n, result of the function get_format called with an argument:   string 'THOUSAND_SEPARATOR', lang and use_l10n as use_l10n and force_grouping as force_grouping, return the result.   define the function localize with 2 arguments value and use_l10n set to None.
define the function localize_input with 2 arguments value and default set to None.
define the function localtime with 2 arguments: value and timezone set to None.
define the function lock with arguments f and flags.
define the function server_bind with an argument self.
define the function lower with an argument value.
define the function lru_cache with 2 arguments maxsize set to integer 100 and typed set to boolean False.
define the function luhn with an argument candidate.
define the method m with an argument self.
define the function m2m_convert with an argument n,
define the function m2m_convert with an argument value.
define the function mail_admins with subject, message, fails_silently set to boolean False, connection set to None,
define the function mail_managers with subject, message, fails_silently set to boolean False, connection set to None,
define the function main, with main_func, args defaulting to None and kwargs defaulting to None as arguments.
define the method  main_help_text with arguments: self class instance and commands_only set to boolean False.
return boolean True, otherwise return boolean False.   define the function make_aware with 2 arguments: value and timezone.
expires as a string 'Thu, 01-Jan-1970 00:00:00 GMT', return the result.   define the method make_bytes with 2 arguments: self and value.
define the function make_key with self class instance, key and version set to None as arguments.
define the method make_key with self class instance, key and version defaulting to None as arguments.
define the function make_list with an argument value.
define the function make_middleware_decorator with an argument middleware_class.
define the function make_msgid with argument idstring set to None.
define the function make_naive with 2 arguments: value and timezone.
define the function make_origin with 4 arguments: display_name, loader, name and dirs.
return the string.   define the function make_style with 2 arguments: opts set to an empty tuple and unpacked dictionary kwargs.
define the function make_template_fragment_key with fragment_name and vary_on defaulting to None as arguments.
define the method make_view_atomic, with self class instance and view as the arguments.
define the method make_writeable with arguments self and filename.
define the method management_form with an argument self.
define the function mark_for_escaping with an argument s.
define the method media with an argument self.
define the function media_property with an argument cls.
define the function memoize with 3 arguments: func, cache and num_args.
define the method merge with 2 arguments self and other.
define the method message with argument self.
define the method message_dict with an argument self.
define the messages with an argument self.
define the function method_decorator with an argument decorator.
define the method migration_progress_callback with self class instance, action, migration and fake set to boolean False as arguments.
and app_config.label is contained in app_labels, create a tuple containing app_config.label and return value of the method   router.get_migratable_models called with app_config, connection.alias and include_auto_created set to True, append the tuple to the list all_models.   define the method model_installed with model as an argument.
define the function model_to_dict with 3 arguments: instance, fields set to None and exclude set None.
define the function modelform_defines_fields with an argument form_class.
define the function modelform_factory with 10 arguments: model, form set to ModelForm, fields set to None, exclude set to None,
define the function modelformset_factory with 18 arguments: model, form set to ModelForm, formfield_callback set to None,
define the method modified_time with arguments self and name.
use the result as an argument for the call to the function datetime.fromtimestamp, return the result.   define the method modified_time with arguments self and name.
define the function module_has_submodule with 2 arguments: package and module_name.
define the function module_to_dict with 2 arguments: module and omittable as a lambda function with an argument k,
define the method more with an argument self.
define the method __multiple_chunks__ with arguments self and chunk_size defaulting to None.
define the method multiple_chunks with arguments self and hunk_size set to None.
define the method n with an argument self.
define the method namespace_dict with an argument self.
define the method needs_multipart_form with an argument self.
define the method negate with an argument self.
define the method new with 2 arguments: self and values set to None.
define the function new_date with an argument d.
define the function new_datetime with an argument d.
define the method new_file with arguments: self, unpacked list args and unpacked dictionary kwargs.
define the method new_file with arguments: self, field_name, file_name, content_type, content_length, charset set to None,
and unpacked dictionary kwargs.   define the method new_file with arguments: self, file_name, unpacked list args and unpacked dictionary kwargs.
define the function new_method_proxy with an argument func.
define the method next with an argument self.
define the function next_char with an argument input_iter.
define the method next_page_number with an argument self.
define the next_space_index with 2 arguments: subject and i.
define the method next_token with an argument self.
define the function ngettext with 3 arguments: singular, plural and number.
define the function ngettext_lazy with 3 arguments: singular, plural and number set to None.
define function no_style, without input arguments.
define the method nodelist with an argument self.
<p%(html_class_attr)s>%(label)s %(field)s%(help_text)s</p>', error_row set to a a string '%s', row_ender set to a string '</p>',   help_text_html set to a string, <span class="helptext">%s</span>' and errors_on_separate_row set to boolean True.   define the method non_field_errors with an argument self.
define the method non_form_errors with an argument self.
define the function normalize with an argument pattern.
define the method normalize_col_name with 4 arguments: self, col_name, used_column_names and is_relation.
define the function normalize_newlines with an argument text.
define the function now.
define the function now with 2 arguments: parser and token.
define the function npath with an argument path.
define the function npgettext with 4 arguments: context, singular, plural and number.
define the function ngettext with 4 arguments: context, singular, plural and number.
and number set to number, return the result.   define the function npgettext_lazy with 4 arguments: context, singular, plural and number set to None.
define the method nud with 2 arguments: self and parser.
define the method nud with 2 arguments self and parser.
define the method num_items with an argument self.
format, if its true, otherwise string 'TIME_FORMAT' and use_l10n as use_l10n, return the result.   define the function number_format with 4 arguments: value, decimal_pos set to None, use_l10n set to None,
define the method O with an argument self.
define the method open with arguments self and mode defaulting to None.
define the method open with arguments self and mode set to None.
define the method open with arguments self, name and mode defaulting to string 'rb'.
define the method open with argument self.
define the method ordered_forms with an argument self.
reminder of the division of floored result of division of seconds by 60, by integer 60.   define the method P with an argument self.
define the method page with self class instance and number as arguments.
define the emethod parse with 2 arguments: self and parse_until set to None.
define the method parse with an argument self.
define the function parse_accept_lang_header with an argument lang_string.
define the method parse_args with 3 arguments: self, args set to None and namespace set to None.
define the function parse_bits with 8 arguments: parser, bits, params, varargs, varkw, defaults, takes_context and name.
define the function parse_boundary_stream with arguments stream and max_header_size.
define the function parse_color_setting with an argument config_string.
define the function parse_cookie with cookie as the argument.
(?::(?P<second>\d{1,2})(?:\.(?P<microsecond>\d{1,6})\d{0,6})?)?(?P<tzinfo>Z|[+-]\d{2}(?::?\d{2})?)?$', substitute it for datetime_re.   define the function parse_date with an argument value.
define the function parse_datetime with an argument value.
define the method parse_endtag with self class instance and i as the arguments.
define the function parse_etags with an argument etag_str.
define the method parse_file_upload with 3 arguments: self, META and post_data.
define the function parse_header with an argument line.
define the function parse_http_date with an argument date.
%r is not a valid date formated with date and third element of the result of the function sys.exc_info.   define the function parse_http_date_safe an argument date.
define the method parse_name with arguments self and fixture_name.
define method parse_starttag with self class instance and i as the arguments.
define the function parse_time with an argument value.
define the function partition with 2 arguments: predicate and values.
define the function parts.
define function patch_cache_control, with response and dictionary set of arguments, kwargs, as arguments.
define the function patch_response_headers, with response and cache_timeout with None as default value, as arguments.
define function patch_vary_headers, with response and newheaders as arguments.
define the method path with arguments self and name.
define the method path with an argument self.
define the function pbkdf2 with 5 arguments: password, salt, iterations, dklen set to integer 0 and digest set to None.
define the function pgettext with 2 arguments: context and message.
return the result.   define the function pgettext with 2 arguments: context and message.
define the function phone2numeric with an argument phone.
define the function phone2numeric_filter with an argument value.
define the method pk_is_not_editable with an argument pk.
define the function pluralize with 2 arguments value and arg set to character 's'.
define the method pop with 2 arguments: self and idx set to negative integer 1.
define the method pop with 3 arguments: self, k and unpacked list args.
define the method pop with 3 arguments: self, key and unpacked list args.
define the method pop with 3 arguments: self, key and default set to None.
define the method self and name.
define the method pop with an argument self.
define the function popen_wrapper with 2 arguments: args and os_err_exc_type set to CommandError.
define the method popitem with an argument self.
define the function pprint with an argument value.
define the function prefix with 2 arguments bp and func.
define the function prepare_js_for_gettext with an argument js.
define the method prepare_value with arguments: self and value.
define the method prepare_value with arguments self and value.
define the method prepare_value with 2 arguments: self and value.
define the function prepend_token with 2 arguments: self and token.
define the function pretty_name with an argument name.
define the method previous_page_number with an argument self.
define the function print_ with 2 arguments: unpacked list args and unpacked dictionary kwargs.
define the method print_help with 3 arguments: self, prog_name and subcommand.
define the method process with 3 arguments: self, command and domain.
define the method process_default with self class instance and event as arguments.
define the method push with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.
define the method push with 3 arguments: self, name and block.
and replace %r with self.obj, return the result.   define function python_2_unicode_compatible, with klass as an argument.
define the function python_reloader with main_func and kwargs as arguments.
define the function quote_etag with an argument etag.
define the method r with an argument self.
define the function random with an argument value.
define the method read with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.
define the method read with self class instance and size set to None as arguments.
define the method read with arguments self and size set to None.
define the method read with an argument self.
define the method reader with an argument self.
define the method reader_enters with an argument self.
define the method reader_leaves with an argument self.
third element of the result of the function sys.exc_info.   define the method readline with 3 arguments: self, unpacked list args and unpacked list kwargs.
define method readline with self class instance and size set to None.
define the method __init__ with an argument self.
define the method receive_data_chunk with arguments: self, raw_data and start.
self.charset and self.content_type_extra.   define the method receive_data_chunk with arguments: self, raw_data and start.
define the function receive_data_chunk with arguments self, raw_data and start.
define the method recipients with argument self.
define the method regex with an argument self.
define the method register with self ans unpacked list tags as arguments.
define the function register_serializer with 3 arguments: format, serializer_module and serializers set to None.
define the function regroup with 2 arguments: parser and token.
define the method reload with an argument self.
define the method with reload with an argument self.
define the function reloader_thread.
define the method remove with 2 arguments: self and item.
define the function remove_move with an argument name.
define the method  remove_potfiles with an argument self.
define the function remove_tags with 2 arguments: html and tags.
define the function removetags with 2 arguments value and arg.
define the method render with 2 arguments self and context.
define the method render with 2 arguments: self and context.
string 'ascii' and errors set to a string 'replace', return the result.   define the method render with 2 arguments: self and context.
and for every _, nodelist in self.conditions_nodelists.   define the method render with 2 arguments: self and context.
and unpacked dictionary kwargs.   define the method render with 2 arguments self and context.
define the method render with 5 arguments: self, name, value, attrs set to None and choices set to an empty tuple.
define the method render with 4 arguments: self, name, value and attrs set to None.
define the method render with 5 arguments: self, name set to None, value set to None, attrs set to None and choices set to an empty tuple.
define the method render with an argument self.
string '<script type="text/javascript" src="{0}"></script>' and absolute file path of the path, for every path is self._js.   define the method render_css with an argument self.
and use it as the name of the attribute to get from the self object,   call the result and append it to a list for every name in MEDIA_TYPES, join all the results into a string with newline separator,   use the result as an argument for the call to the function mark_safe, return the result.   define the method render_js with an argument self.
define the method render_node with 3 arguments: self, node and context.
return the result.   define the method render_option with 4 arguments: self, selected_choices, option_value and option_label.
result of the function force_text with an argument option_label, return the result.   define the method render_options with 3 arguments: self, choices and selected_choices.
define the function render_to_string with 4 arguments: template_name, dictionary set to None, context_instance set to None and dirs set to None.
define the function render_value_in_context with 2 arguments: value and context.
define the method rendered_content with an argument self.
define the method represent_decimal with arguments self and data.
define the function request with an argument request.
define the function reraise with 3 arguments: tp, value and tb set to None.
define the method reset with an argument self.
define the function reset_cache with an argument unpacked dictionary kwargs.
tuple with 3 elements: strings '%H:%M:%S', '%H:%M:%S.%f' and '%H:%M' for 'TIME_INPUT_FORMATS',   tuple with 4 elements: strings '%Y-%m-%d %H:%M:%S', '%Y-%m-%d %H:%M:%S.%f', '%Y-%m-%d %H:%M' and '%Y-%m-%d' for 'DATETIME_INPUT_FORMATS'.   define the function reset_format_cache.
define the function reset_translation.
define the function resolve with arguments path and urlconf set to None.
define the method resolve with 3 arguments: self, context and ignore_failures set to boolean False.
define the method resolve with 2 arguments: self and context.
define the method resolve with arguments self and path.
define the method resolve with an argument self.
define the method resolve with 2 arguments: self and s.
define the method resolve_context with 2 arguments: self and context.
define the method resolve_error_handler with arguments self and view_type.
define the method resolve_expression with 3 arguments: self, obj and context.
define the method resolve_template with 2 arguments: self and template.
define the method resolve_variable with 2 arguments: path and context.
define the function restart_with_reloader.
define the method reverse with arguments self, lookup_view, unpacked list args and unpacked dictionary kwargs.
define the function reverse with 6 arguments: viewname, urlconf set to None, args set to None, kwargs set to None,
define the method reverse_dict with an argument self.
define the function rfc2822_date with an argument date.
define the function rfc3339_date with an argument date.
define the function rjust with 2 arguments value and arg.
define the function run with 5 arguments: addr, port, wsgi_handler, ipv6 set to boolean False and threading set to boolean False.
define the method run with 3 arguments: self and unpacked dictionary options.
define the method run_checks with self class instance, app_configs defaulting to None, tags defaulting to None as argument.
define the method run_from_argv with arguments self and argv.
define the method run_shell with an arguments self and shell set to None.
define the method run_validators with arguments self and value.
define the function runfastcgi with 2 arguments: argset set to an empty list and unpacked dictionary kwargs.
define the method s with an argument self.
define the function safe with an argument value.
define the function safe_join with 2 arguments base and unpacked dictionary paths.
define the function safeseq with an argument value.
define the function salted_hmac with 3 arguments: key_salt, value and secret set to None.
is replaced with '\\"'.   define the function same_origin with 2 arguments url1 and url2.
define the function sanitize_address with arguments addr and encoding.
define the function sanitize_separators with an argument value.
define the method save with 2 arguments: self and commit set to boolean True.
define the method save with arguments self, name and content.
self.object._meta.object_name and self.object.pk, respectively.   define the method save, with 3 arguments: self, save_m2m set to boolean True and using set to boolean True.
define the method save_existing with 4 arguments: self, form, instance and commit set to boolean True.
define the method save_existing_objects with 2 arguments: self and commit set to boolean True.
define the function save_instance with 7 arguments: form, instance, fields set to None, fail_message as string 'saved',
where '%s' is replaced with opts.object_name and fail_message, respectively.   define the function save_m2m.
define the function save_m2m.
define the method save_new with 3 arguments: self, form and commit set to boolean True.
call the method get_accessor_name on the result, substitute all occurrences of '+' in the result with an empty string, return it.   define the method save_new with 3 arguments: self, form and commit set to boolean True.
define the method save_new_objects with 2 arguments: self and commit set to boolean True.
define the method scheme with an argument self.
define the function select_template with 2 arguments: template_name_list and dirs set to None.
define the method send with arguments self and fail_silently set to boolean False.
define send_mail funtion with subject, message, from_email, recipient_list, fail_silently set to boolean False,
define the function send_mass_mail with, datatuple, fail_silently set to False, auth_user set to None, auth_password set to None,
define the method send_messages with arguments self and email_messages.
define the method send_messages with arguments self and email_message.
define the method send_messages with arguments self and messages.
define the function serializer with 3 arguments: format, queryset and unpacked dictionary options.
define the method serialize with 3 arguments: self, queryset and unpacked dictionary options.
define the serialize content with an argument self.
define the method serialize_headers with an argument self.
define the function server_bind with an argument self.
define the method set with 5 arguments, self, key, value, timeout set to DEFAULT_TIMEOUT and version set to None.
use the result as the argument for the function call to the pickle.loads, return the result.   define the method set with 5 arguments, self class instance, key, value, timeout set to DEFAULT_TIMEOUT and version set to None.
define the method set with 5 arguments: self, key, value, timeout set to DEFAULT_TIMEOUT and version set to None.
define the method set with 5 arguments, self class instance, key, value, timeout set to DEFAULT_TIMEOUT and version set to None.
define the method get with 5 arguments, self class instance, key, value, timeout set to DEFAULT_TIMEOUT and version set to None.
define method set_cdata_mode, with self class instance and tag as the arguments.
if it exists return the second element of the result, if not, return alternate.   define the method set_cookie with 9 arguments: self, key, value set to an empty string, max_age set to None, expires set to None,
define the method set_many with arguments, self, data, timeout defaulting to DEFAULT_TIMEOUT and version set to None.
define the method set_many with 4 arguments: self, data, timeout set to DEFAULT_TIMEOUT and version set to None.
define the method set_many with self, data, timeout set to DEFAULT_TIMEOUT and version set to None as arguments.
define the function set_script_prefix with an argument prefix.
define the method set_signed_cookie with 5 arguments: self, key, value, salt as an empty string and unpacked dictionary kwarg.
define the function set_urlconf with an argument urlconf_name.
define the method setdefault with 3 arguments: self, key and default.
define the method setdefault with 3 arguments: self, key and default set to None.
define the method setlist with 3 arguments: self, key and list_.
define the method setlistdefault with 3 arguments: self, key and default_list set to None.
define show_migration_list with self class instance, connection and app_names set to None, as arguments.
define the method sign with arguments self and value.
self.__class__.__module__ and self.__class__.__name__, respectively, substitute the result for self.salt.   define the method signature with arguments self and value.
define the method simple_tag with 4 arguments: self, func and None, takes_context and None and name set to None.
define the method size with arguments self and name.
define the method skip_past with 2 arguments: self and endtag.
define the function slice_filter with 2 arguments value and arg.
define the function slugify with an argument value.
define function smart_bytes with s, encoding set to string 'utf-8', strings_only set to False and errors set to string 'strict', as arguments.
and re.VERBOSE, substitute the result for smart_split_re.   define the function smart_split with an argument text.
define the function smart_text, with s, encoding set to string 'utf-8', strings_only set to False, errors set to 'strict' as arguments.
define the function smart_urlquote with an argument url.
define the function sort_dependencies with an argument app_list.
define the method source_error with 3 arguments: self, source and msg.
define the function spaceless with 2 arguments: parser and token.
define the method split_contents with an argument self.
define the function split_domain_port with an argument host.
define the method split_leading_dir with 2 arguments self and path.
define the function split_url with an argument url.
define the method splitext with arguments self and the_path.
define the function sql_all with 3 arguments: app_config, style and connection.
define the function sql_create with 3 arguments: app_config, style and connection.
define the function sql_custom with 3 arguments: app_config, style and connection.
define the function sql_delete with 4 arguments: app_config, style, connection and close_connection set to boolean True.
define the function sql_destroy_indexes with 3 arguments: app_config, style and connection.
define the function sql_flush with 4 arguments: style, connection, only_django set to boolean False,
define the function sql_indexes with 3 arguments: app_config, style and connection.
define the function ssi with 2 arguments: parser and token.
define the method start_doctype_decl with an arguments self, name, sysid, pubid and has_internal_subset.
define the method start_index with an argument self.
define the method start_object with argument self and obj.
define the method start_object with arguments self and obj.
define the method start_serialization with an argument self.
define the function static with an argument request.
define the method streaming_content with 2 arguments: self and value.
define the method serialize_headers with an argument self.
define the function strftime with 2 arguments dt and fmt.
define the method strftime with 2 arguments: self and fmt.
define the method stringfilter with an argument func.
define the function stringformat with 2 arguments value and arg.
define the function strip_entities with an argument value.
define the function strip_spaces_between_tags with an argument value.
define the function strip_tags with an argument value.
define the function striptags with an argument value.
define the method strptime with arguments self, value and format.
define the method subwidgets with 5 arguments: self, name, value, attrs set to None and choices set to an empty tuple.
and unpacked dictionary kwargs.   define the method subwidgets with 5 arguments: self, name, value, attrs set to None and choices set to an empty tuple.
define the method super with an argument self.
define the function supports_color, without arguments.
define the method symlinks_supported.
define the method sync_apps with self class instance, connection and app_labels as arguments.
define the method T with an argument self.
define the method tag with 3 arguments: self, name set to None and compile_function set to None.
define the method tag with an argument self.
define the method tag_exists with self class instance and tag as arguments.
substitute '%r' with name and compile_function.   define the method tag_function with 2 argument: self and func.
define the method tags_available with argument self.
define the method tell with an argument self.
define the function template_localtime with 2 arguments: value and use_tz set to None.
define the function templatetag with 2 arguments: parser and token.
define the function templatize with 2 arguments: src and origin set to None.
define the method temporary_file_path with argument self.
define the function time with 2 arguments value and arg set to None.
format, if its true, otherwise string 'DATE_FORMAT' and use_l10n as use_l10n, return the result.   define the function time_format with 3 arguments: value, format set to None and use_l10n set to None.
define the function time_format with 2 arguments: value and format_string.
define the function timesince with d, now defaulting to None, reversed defaulting to False as arguments.
define the function timesince_filter with 2 arguments value and arg set to None.
define the method timestamp with an argument self.
define the function timeuntil with 2 arguments, d and now defaulting to none.
define the function timeuntil_filter with 2 arguments value and arg set to None.
define the function title with an argument value.
define the function to_bytes with arguments val and encoding.
define the function to_current_timezone with an argument value.
define the function to_language with an argument locale.
define the method to_language with an argument self.
define the function to_locale with 2 arguments language and to_lower set to boolean False.
define the function to_locale with an argument language.
define the method to_python with arguments self and data.
"Upload a valid image. The file you uploaded was either not an image or a corrupted image."' for 'invalid_image'.   define the method to_python with arguments self and data.
define the method to_python with arguments self and value.
Enter a number.' for 'invalid'.   define the method to_python with arguments self and value.
unpacked list args and unpacked dictionary kwargs.   define the method to_python with arguments self and value.
define the method to_python with arguments self and data.
Select a valid choice. %(value)s is not one of the available choices.' for 'invalid_choice',   and return value of the function _ called with an argument string 'Enter a list of values.' for 'invalid_list'.   define the method to_python with arguments self and value.
define the method to_python with 2 arguments: self and value.
cache_choices, required, widget, label, initial, help_text, unpacked list args and unpacked dictionary kwargs.   define the method to_python with 2 arguments: self and value.
define the method token_kwargs: bits, parser and support_legacy set to boolean False.
define the method tokenize with an argument self.
define the method top with an argument self.
define the method total_error_count with an argument self.
define the method total_form_count with an argument self.
define the function total_ordering with an argument cls.
define the method transform with 3 arguments: self, node and results.
define the method translate_token with 2 arguments: self and token.
define the function translation with an argument language.
define the function trim_url with 2 arguments: x and limit set to trim_url_limit.
define the function trim_whitespace with an argument s.
define the function truncatechars with 2 arguments value and arg.
define the function truncatechars_html with 2 arguments value and arg.
define the function truncatewords with 2 arguments value and arg.
define the function truncatewords_html with 2 arguments value and arg.
define the function tz with an argument request.
define the method tzname with 2 arguments self and dt.
define the method tzname with 2 arguments: self and dt.
define the function u with an argument s.
define the method u with an argument self.
format string '%02d' with the second element of the result, return it.   define the method U with an argument self.
define the method ugettext with an argument message.
define the function ugettext with an argument message.
return the result.   define the method unclosed_block_tag with 2 arguments: self and parse_until.
define the method unclosed_block_tag with 2 arguments: self and parse_until.
define the function unescape_entities with an argument text.
define the function unescape_string_literal with an argument s.
define the method unget with arguments self and bytes.
define the function ungettext with 3 arguments: singular, plural and number.
and number set to number, return the result.   define the function ungettext_lazy with 3 arguments: singular, plural and number set to None.
define the function unlock with argument f.
define the function unordered_list with 2 arguments value and autoescape set to None.
define the method unparsed_entity_decl with arguments self, name, base, sysid, pubid and notation_name.
define the function unregister_serializer with an argument format.
define the method unsign with arguments self and signed_value.
define the method unsign with arguments self, value and max_age set to None.
define the function upath with an argument path.
define the method update with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.
define the method update with 2 arguments: self and dict_.
define the method update with 2 arguments: self and other_dict.
define the method update_error_dict with arguments self and error_dict.
define the method update_watch with sender defaulting to None and dictionary pair of elements kwargs.
define the method upload_complete with argument self.
define the method upload_handlers with arguments: self and upload_handlers.
define the method upload_handlers with an argument self.
define the function upper with an argument value.
define the function url with 2 arguments: parser and token.
define the method url with arguments self and name.
define the method url_patterns with an argument self.
define the method urlconf_module with an argument self.
define the function urlencode with 2 arguments query and doseq set to integer 0.
define the method urlencode with 3 arguments: self and safe set to None.
define the function urlencode with 2 arguments value and safe set to None.
define the function urlize with 4 arguments: text, trim_url_limit set to None, nofollow set to boolean False,
define the function urlize with 2 arguments value and autoescape set to None.
define the function urlizetrunc with 3 arguments value, limit and autoescape set to None.
substitute the result for ASCTIME_DATE.   define the function urlquote with 2 arguments: url and safe set to '/'.
define the function urlquote_plus with 2 arguments: url and safe set to an empty string.
define the function urlsafe_base64_decode with an argument s.
define the function urlsafe_base64_encode with an argument s.
define the function urlunquote with an argument quoted_url.
define the function urlunquote with an argument quoted_url.
define the method usage with arguments self and subcommand.
define the method usage with 2 argument: self and subcommand.
define the method use_argparse with an argument self,
define the method utcoffset with 2 arguments self and dt.
define the method utcoffset with 2 arguments: self and dt.
define the function valid_ident with an argument s.
code set to an string 'invalid_choice' and dictionary params with an entry: value for 'value'.   define the method valid_value with arguments self and value.
define the method with 3 arguments: self, app_config  set to None and display_num_errors set to boolean False.
define the method to_python with arguments self and value.
define the method validate with arguments self and value.
define the method validate with 2 arguments: self and value.
define the method validate_domain_part with arguments self and domain_part.
define the method validate_host with 2 arguments: host and allowed_hosts.
define the function validate_integer with an argument value.
define the function validate_ipv46_address with an argument value.
return value of the call to the function _ with an argument string 'Enter a valid IPv4 address.' and string 'invalid'.   define the function validate_ipv6_address with an argument value.
define the method validate_key with self class instance and key as arguments.
define validate_name with 3 arguments: self, name and app_or_project.
define the method validate_number with self class instance and number as arguments.
define the method validate_unique with an argument self.
define the method value with an argument self.
define method value_encode with self class instance and val as arguments.
define the method id_for_label with arguments self, data, files and name.
define the method render with 4 arguments: self, name, value and attrs set to None.
return the result.   define the method value_from_datadict with 4 arguments: self, data, files and name.
define the method value_from_datadict with 4 arguments: self, data, files and name.
and result of the function flatatt, called with an argument final_attrs.   define the method value_from_datadict with 4 arguments: self, data, files and name.
use it as an argument for the call to the mark_safe function, return the result.   define the method value_from_datadict with 4 arguments: self, data, files and name.
define the method value_from_datadict with 2 arguments: self, data, files and name.
define the method values with an argument self.
define the function verbatim with 2 arguments: parser and token.
define the method visible_fields with an argument self.
return result converted into an integer.   define the method w with an argument self.
define the method W with an argument self.
define the function walk_to_end with 2 arguments ch and input_iter.
define the method widget_attrs with arguments self and widget.
define the function widthratio with 2 arguments: parser and token.
define the function with_metaclass with 2 arguments meta and unpacked list bases.
define the function wordcount with an argument value.
define the method words with 4 arguments: self, num, truncate set to None, html set to boolean False.
define the function wordwrap with 2 arguments value and arg.
define the function wrap with 2 arguments text and width.
define the function wrapped with 2 arguments: unpacked list args and unpacked dictionary kwargs.
define the function wrapper with list args, and dictionary pair of values kwargs as arguments.
define the function wrapper with 2 arguments: unpacked list args and unpacked dictionary kwargs.
define the function wrapper with 2 arguments: unpacked list args and unpacked dictionary kwds.
define the function wrapper with an argument unpacked list args.
define the function wrapper with an argument cls.
define the function write with an argument data.
define the method write with 2 arguments: self and value.
define the method write with 2 arguments: self and content.
define the method write with 4 arguments: self, msg, style_func with None and ending set None.
define the method write with 3 arguments self, outfile and encoding.
define the method write with 3 arguments: self, outfile and encoding.
define the method write with 2 arguments: self and s.
define the method write with 2 arguments: self and val.
define the method write_items with 2 arguments: self and handler.
define the method write_message with arguments self and message.
define the method write_migration_files with arguments self and changes.
define the method write_po_file with arguments self, potfile and locale.
define the function write_pot_file with 2 arguments potfile and msgs.
define the method writer with an argument self.
define the method writer_enters with an argument self.
define the method writer_leaves with an argument self.
define the method writeString with 2 arguments self and encoding.
third element of the result of the function sys.exc_info.   define the method __init__ with an argument self.
define the method y with an argument self.
define the function yesno with 2 arguments value and arg set to None.
define the method Z with an argument self.
default is a string 'DEFAULT'.
call the method bytes_to_text with 2 arguments: default and self.encoding, substitute the result for default.
DEFAULT_ATTACHMENT_MIME_TYPE is a string 'application/octet-stream'.
update default_attrs dictionary with attrs entry.
default_attrs is an dictionary with 2 initial entries: string '40' for 'cols' and string '10' for 'rows'.
CacheKeyWarning' and 'BaseCache'   DEFAULT_CACHE_ALIAS is a string 'default'.
bring integer 2 to the power of 10, multiply it by 64, substitute the result for DEFAULT_CHUNK_SIZE.
bring integer 2 to the power of 10, multiply it by integer 64, substitute the result for DEFAULT_CHUNK_SIZE.
default_error_messages is an dictionary with an entry: return value of the function _ called with an argument string,
default_error_messages is an dictionary with an entry: return value of the function _ called with an argument string,
default_error_messages is a dictionary with an entry, result of the call to the function _ with an argument,
default_error_messages is an dictionary with an entry: return value of the function _ called with an argument,
default_error_messages is an dictionary with 2 entries: return value of the function _ called with an string 'Enter a valid date.',
default_error_messages is an dictionary with an entry: return value of the function _ called with an argument string,
default_error_messages is an dictionary with 2 entries: return value of the function _ called with an argument string,
default_error_messages is a dictionary with 4 initial entries: return value of the function _ called with string as an argument,
default_error_messages is an dictionary with an initial entry: result of the function _ called with an argument string,
default_error_messages is an dictionary with an entry: return value of the function _ called with an argument string 'Enter a valid date.' for 'invalid'.
default_error_messages is an dictionary with an entry: return value of the function _ called with an argument string 'Enter a valid date/time.' for 'invalid'.
default_error_messages is an dictionary with an entry: return value of the function _ called with an argument string 'Enter a valid time.' for 'invalid'.
default_error_messages is an dictionary with an entry: return value of the function _ called with an argument string 'Enter a valid URL.' for 'invalid'.
default_error_messages is an dictionary with an initial entry: result of the function _ called with an argument string,
default_error_messages is an dictionary with 5 initial entries: return value of the function _ called with an argument string,
default_error_messages is an dictionary with 3 entries: return value of the function _ called with an argument,
default_error_messages is an dictionary containing entry: return value of the function _ called with an string 'This field is required.' for 'required'.
default_list is an empty list.
evaluate the function get_system_encoding(), substitute the return vale for DEFAULT_LOCALE_ENCODING.
DEFAULT_LOGGING is a dictionary with 5 initial entries: 1 for 'version', False for 'disable_existing_loggers',
DEFAULT_MAX_NUM is an integer 1000.
DEFAULT_MIN_NUM is an integer 0.
a dictionary with 18 pairs of dictionary value and string keys for DARK_PALETTE,   and a dictionary with 18 pairs of dictionary value and string keys for LIGHT_PALETTE.   substitute DARK_PALETTE for DEFAULT_PALETTE.
"(?P<ipv6>\[[a-fA-F0-9:]+\]) | (?P<fqdn>[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*) ):)?(?P<port>\d+)$", re.X   DEFAULT_PORT is a string "8000".
call the function module_to_dict with an argument global_settings, substitute it for default_settings.
call the DefaultStorage method, substitute the result for default_storage.
DEFAULT_TIMEOUT is a instance of the class object.
call the function translation with an argument settings.LANGUAGE_CODE, substitute the result for default_translation.
default_validators is an empty list.
default_validators is a list with an element, return value of the validators.URLValidator method.
default_validators is a list with an element validators.validate_email.
default_validators is an list containing validators.validate_ipv4_address.
default_validators is an list containing validators.validate_slug.
substitute Rss201rev2Feed for DefaultFeed.
call the method parser.parse_args with an arguments args set to an empty list, assign the result for defaults and _, respectively.
update defaults dictionary with kwargs.
substitute self.data for value under the 'data' key of the defaults dictionary.
and i is greater than or equal to self.min_num,   value under the 'empty_permitted' key of the defaults dictionary is boolean True.
substitute self.files for value under the 'files' key of the defaults dictionary.
substitute i-th element of self.initial for value under the 'initial' key of the defaults dictionary.
defaults is an dictionary with 3 initial entries: self.auto_id for 'auto_id', result of the call to the method self.add_prefix,
if not self.initial_extra is None.   defaults is a dictionary with 4 entries: data for 'data', files for 'files', auto_id for 'auto_id' and prefix for 'prefix'.
create dictionary out of the unpacked dictionary options, using defaults.__dict__ as a mapping function, substitute the result for defaults.
create dictionary out of the unpacked dictionary options, using defaults._get_kwargs as a mapping function, substitute the result for defaults.
call the method parser.parse_args with an argument args set to args, substitute the result for defaults.
substitute last element of colors for value under the 'bg' key of definition dictionary.
substitute fg for value under the 'fg' key of definition dictionary.
substitute opts for value under the 'opts' key of definition dictionary.
definition is an empty dictionary,
get the attribute 'Media' of the cls object, if it exists substitute it for definition, if not definition is None.
delete _active.value.
remove the first occurrence of the filename value in the _error_files list.
delete _prefixes.values.
delete the _serializers dictionary entry at the format key.
delete _urlconfs.value.
substitute attr for the obtained value.   delete attr.
delete attr.
delete entry under the attr key of the attrs dictionary.
delete first element of bits.
delete first 3 elements of bits.
delete entry under the oldkey key of the cache dictionary.
delete dictionary item 'private' from cc.
delete dictionary item 'public' from cc.
delete value under the 'args' key of the cmd_options dictionary.
delete the form.cleaned_data dictionary entry under the field key.
substitute the result for the value under the NON_FIELD_ERRORS key of form._errors dictionary.   delete entry from form.cleaned_data dictionary under the field key.
delete frame.
delete element under 'warning' key of kwargs dictionary.
delete logging._handlerList list.
delete entry under the name key of the moves.__dict__ dictionary.
delete entry under the attr key of obj_dict dictionary.
delete the value under the 'liveserver' key of the options dictionary.
delete the value under key key of self._cache dictionary.
delete the value under the key key of self._cache dictionary.
delete the value under key key of self._expire_info.
delete the value under the key key of self._expire_info dictionary.
delete the value under the key key of the self._expire_info dictionary.
delete self._get.
delete the value under the header converted to lowercase key of the self._headers dictionary.
del self._post
delete the entry of self.cleaned_data dictionary under the key field.
delete entry under item key of self.dict dictionary.
delete value under the key key of dictionary at last element of self.dicts.
delete the first element of self.tokens.
delete the value under the 'Content-Transfer-Encoding' key of self dictionary.
and unpacked dictionary kwargs.   delete the value under the 'content-type' key of the self dictionary.
delete self entry under the key key.
delete Trans.
delete X.
delete name attribute of the _MovedItems object.
delete self.name attribute from the obj.__class__ object.
delete name attribute from self._wrapped object.
DELETION_FIELD_NAME is a string 'DELETE'.
if reversed is True substitute difference of d and now for delta, if not substitute the difference of now and d for delta.
subtract year from integer 2000, substitute the result for delta.
call the method datetime.timedelta with an argument seconds set to integer 1, increment delta by it.
call the method expires.utcnow, subtract the result from expires, substitute the result for delta.
substitute third element of renamed_method for deprecation_warning.
append rel_model to deps.
deps is an empty list.
for every dep in deps call the method apps.get_model with an argument dep, and append the result to the list, substitute it for deps.
get 'dependencies' attribute of the model.natural_key, substitute it for deps, if the attribute doesnt exist, deps in an empty list.
description is a string "An instance of the '%s' class" with '%s' replaced by value of receiver.__class__.__name__.
description is a string "The '%s' function" replaced by value of receiver.__name__.
df is an instance of DateFormat class, created with an argument value.
get config dictionary element under 'datefmt' key, if it exists substitute it for dfmt, if not, dfmt is None.
call the method dict.__setitem__ with 3 arguments: result, result of the function copy.deepcopy, called with 2 arguments: key,
call the private dict.__setitem__ method with self class instance, key and result of the function http_cookies.Morsel() as arguments.
call the private dict.__setitem__ method with self class instance, key and M as arguments.
call the method dictConfigClass with an argument config, call the method configure on the result.
substitute DictConfigurator for dictConfigClass.
join printable representation of d into a string separated with ', ', for every d in self.dicts, substitute the result for dictreprs.
call the function inner.copy, substitute the result for dig1, call the function outer.copy, substitute the result for dig2.
call the method dig1.update with an argument u.
call the method dig1.digest, use the result as an argument for the call to the function dig2.update.
substitute hashlib.sha256 for digest.
calculate reminder of division of x by length to_digits, substitute it for digit.
compile a regex from raw string '^\d+$', substitute it for DIGIT_PATTERN.
append '-' to digits.
append '0' to digits.
insert '.' to digits at negative exponent index.
digits is a string "0123456789abcdefghijklmnopqrstuvwxyz".
call the method as_tuple on the result, substitute the result for sign, digits and exponent, respectively.   append result of method six.text_type called with an argument digit to an list, for every digit in reversed order of digits,
substitute decimals for digits.
substitute length of digittuple for digits.
call the os.path.split with argument name, assign the result to the dir_name and file_name respectively.
if any resulting element is true, return boolean True, otherwise return boolean False.   convert os.sep into a string and append '*' to it, substitute the result for dir_suffix.
directories, files are empty lists.
append entry to the directories list.
call the function os.path.dirname with argument full_path, substitute the result for directory.
value under the all_label key of the directory_created dictionary is boolean True.
directory_created is an empty dictionary.
get the directory name of filename, substitute it for dirname.
get the directory name of filename, substitute the result for dirname.
use the result as an argument for the call to the os.path.join function,   use the result and the norm_patterns as arguments for the call to the is_ignored function, if it evaluates to true,   remove dirname from the dirnames.
remove dirname from the dirnames.
append an empty string to dirs list.
append app_dir to dirs list.
convert settings.FIXTURE_DIRS to a list, extend dirs by it.
remove dirname key from dirs.
dirs is an empty dictionary.
dirs is a list containing basedir.
join basedir, l and string 'LC_MESSAGES' into a path separated by '/' for every l in locales, assign the list to dirs.
call the function os.path.realpath with an argument d, use the result as an argument for the call to the function os.path.abspath,
remove config dictionary element under 'disable_existing_loggers' key, if it exists substitute it for disable_existing, if not,
append '/' to tmp, substitute it for display_url.
substitute url for display_url.
get the value under the 'content-disposition' key of the meta_data dictionary, substitute second element of it for disposition.
call the method django.setup.
call the django.setup method.
get the value under the key 'DJANGO_COLORS' of os.environ dictionary, if key doesnt exists return empty string, assign the result to DJANGO_COLORS.
call the function os.path.dirname with an argument django.__file__, join the result into a path,
join into a file path: django_dir, 'conf', 'locale', locale, 'LC_MESSAGES' and string '.po' appended to domain, substitute the result for django_po.
call the method DjangoSafeDumper.add_representer with arguments decimal.Decimal and DjangoSafeDumper.represent_decimal.
substitute hlen for dklen.
dklen is None.
substitute the length of defaults for dlen.
DNS_NAME is a instance of CachedDnsName class.
convert first 2 elements of django.VERSION into a strings, join them together, separated by a '.', substitute the result for docs_version.
docs_version is a string 'dev'.
call the function split_domain_port with an argument host, assign the result to domain and port, respectively.
call the decode function with argument string 'ascii' on the return value of the method domain.encode with argument string 'idna' substitute the result for domain.
call the method domain.encode with an argument string 'idna', call the method decode on the result with an argument string 'ascii',
call the method domain_part.encode with an argument string 'idna', on the return value call the decode method with string 'ascii' as argument, substitute the result for domain_part.
|^([\001-\010\013\014\016-\037!#-\[\]-\177]|\\[\001-\011\013\014\016-\177])*"$)" and re.IGNORECASE, substitute the result for user_regex.    call the re.compile function with 2 arguments: raw string '(?:[A-Z0-9](?:[A-Z0-9-]{0,247}[A-Z0-9])?\.)+(?:[A-Z]{2,6}|[A-Z0-9-]{2,}(?<!-))$',
domain_whitelist is a list containing string 'localhost'.
domains is a tuple with element string 'django'.
domains is a tuple with 2 elements: strings 'djangojs' and 'django'.
for every i and k in enumerated values of self._cache, if i is divisible by self._cull_frequency, append k to doomed list.
call the method callback.rindex with an argument character '.', substitute the result for dot.
substitute length of package for dot.
call the method package.rindex with 3 arguments: string '.', integer 0 and dot, substitute the result for dot.
compile a regex from raw string '^\.\s*(\w+)\s*', substitute it for DOT_PATTERN.
call the function re.compile with an argument raw string '\S', substitute it for dot_re.
tuple with 2 elements: '[' and ']', tuple with 2 elements: '&lt' and '&gt', tuple with 2 elements: '"' and '"',   and tuple with 2 elements: '\'' and '\''.   DOTS is a list with 6 elements: strings '&middot;', '*', '\u2022', '&#149;', '&bull;' and '&#8226;'.
increment doublecolon_len by integer 1,
doublecolon_len is an integer 0.
doublecolon_len is integer 0.
doublecolon_start is an integer -1.
doublecolon_start is integer -1.
substitute index for doublecolon_start.
call the method date.weekday, use the result as an key to obtain the value from the days dictionary, substitute it for dow.
increment doy by integer 1.
append self.data.day to the value under the self.data.month key of the self.year_days dictionary, substitute the result for doy.
hard copy list self.dicts to duplicate.dicts.
call the function copy with an argument self.render_context, substitute the result for duplicate.render_context.
call the function copy with an argument base class of the class BaseContext, substitute the result for duplicate.
call the the method __copy__ from the base class of the class Context, substitute the result for duplicate.
call the method sys.exc_info, substitute the result without the first element for e and tb.
e.args is a tuple containing string "Could not load %(app_label)s.%(object_name)s(pk=%(pk)s): %(error_msg)s,
e.args is a tuple containing string "Problem installing fixture '%s': %s", where '%s' is replaced with fixture_file, e.
e.args is a tuple, containing 1 element: string "Problem installing fixtures: %s", where '%s' is replaced with e.
substitute node.source for e.django_template_source.
substitute self.source for e.django_template_source.
substitute source for e.django_template_source.
substitute token.source for e.django_template_source.
get the value under the e.code key of the self.error_messages dictionary, substitute the result for e.message.
replace '%s' in string ', HTTP response headers must be in %s format' for charset, append it to e.reason.
e is an instance of TemplateSyntaxError class, created with an argument msg.
otherwise if result of the call to the function _len with an argument cache is greater than or equal to maxsize,
otherwise if _locs_ is None,
otherwise if ':' is not contained in middle and result of the function simple_email_re.match called with an argument middle,
otherwise if '\\' is contained in path,
otherwise if '=' is contained in part,
if 'HTTP_HOST' is contained in self.META,
if cc contains item 'public' and kwargs contains item 'private',
otherwise, if first and the last character of attrvalue are '\' charter  or first and last character of attrvalue are '"' character,
otherwise if action equals to string 'apply_success',
otherwise if action equals to string 'unapply_start'.
otherwise if action equals to string "unapply_success".
if second from the end element of args equals a string 'as',
otherwise if first element of second row of args equals a string '1',
otherwise if first element of second row of args equals a string '3',
otherwise if first element of second row of args equals a string '4',
otherwise if second element of args equals a string '304',
otherwise if second element of args equals a string '404',
otherwise if auto_id is true,
otherwise if autoescape is true,
otherwise if basetype equals a string 'message' and subtype equals a string 'rfc822',
otherwise if bmatch is true,
filesize_number_format with result of division of bytes by KB as an argument, substitute the result for value.   otherwise if bytes is smaller than GB,
replace '%(size)d with bytes, substitute the result for value.   otherwise if bytes is smaller than MB,
filesize_number_format with result of division of bytes by GB as an argument, substitute the result for value.   otherwise if bytes is smaller than PB,
filesize_number_format with result of division of bytes by MB as an argument, substitute the result for value.   otherwise if bytes is smaller than TB,
otherwise if func is callable object,
otherwise if func is callable,
otherwise if ch equals a string 'P',
otherwise if ch equals a string ':',
otherwise if ch equals a string '.',
otherwise if ch equals a string '(',
otherwise if ch equals a string ')',
otherwise if ch equals a string '[',
otherwise if ch equals a string '|',
otherwise if ch equals a string '$',
otherwise if ch equals a string '^',
otherwise if ch is contained in string "*?+{",
otherwise id change equals to I18N_MODIFIED,
otherwise if cahr equals a string '\\',
otherwise if char is contained in string 'bEFMmNn',
otherwise if char is contained in string 'dj',
otherwis if char is contained in string 'Yy',
otherwise if child.nodeType equals to child.ELEMENT_NODE,
otherwise if closing_tag is true,
otherwise if cls._delegate_bytes is true,
otherwise if cmatches is true,
where '%s' are replaced by sel.file and errors, respectively.   if command.verbosity is greater than integer 0,
otherwise if common_prefix is None,
otherwise if count is greater than integer 1,
otherwise if first element of cwords is contanied in tuple with 8 entries: 'dumpdata', 'sql', 'sqlall', 'sqlclear', 'sqlcustom',
with an argument curr, sort the result and join it in a list separated with blank spaces, print it to the standard output.   otherwise if first element of cwords is contanied in subcommands and is not equal to string 'help',
otherwise if dirname equals string 'locale',
otherwise if disable_existing is true,
otherwise if domains equals a string django' and, file_ext equals '.py' or file_ext is contained in command.extensions,
otherwise if f.unique is true,
otherwise if field.rel is true and field.rel is an instance of the models.ManyToOneRel object,
otherwise, if field.rel is true and field.rel is an instance of models.ManyToOneRel,
otherwise if field.required is true,
otherwise if field is contained in the result of the call to the method self._errors.keys,
otherwise if field is contained in self.fields,
otherwise if field_type equals a string 'IntegerField(' and connection.features.can_introspect_autofield is false,
otherwise if call to the method finder.find_module with an argument name evaluates to true,
otherwise if form.has_changed method evaluates to true,
otherwise if first element of g equals a string "'",
otherwise, get the 'alters_data' attribute of current object, if it exists and is true,
otherwise, if pattern has an '_callback' attribute.
otherwise if query has an attribute 'items',
otherwise, if s has an attribute '__unicode__',
otherwise if i is smaller than list_length decremented by one,
otherwise if, if value under the 'unique' key of the dictionary contained under the column_name key of the dictionary indexes is true,
else if timeout converted into an integer equals to integer 0,
otherwise if intrans is true,
otherwise if message is an instance of the list type.
otherwise if o is an instance of datetime.date object,
otherwise if o is an instance of datetime.time object,
otherwise if o is an instance of decimal.Decimal object,
otherwise if obj is an instance of EscapeData,
otherwise if rhs is an instance of SafeBytes,
otherwise if self.object is an instance of the models.base.ModelBase class,
otherwise is template is six.string_types instance,
otherwise if timezone is an instance of six.string_types and pytz is not None,
return the result.   otherwise if value is an instance of decimal.Decimal, float or six.integer_types,
otherwise if value is an instance of datetime.date,
otherwise if value is an instance of datetime.datetime,
otherwise if value is an instance of datetime.time,
otherwise if vale is an instance of value,
formated with value under 'target' key of config dictionary and e.   otherwise if klass is a subclass of logging.handlers.SMTPHandler and string 'mailhost' is contained in config,
substitute the result for value under 'mailhost' key of config dictionary.   otherwise if klass is subclass of logging.handlers.SysLogHandler class, and string 'address' is contained in config,
formated with values under the 'author_email' and 'author_name' keys of item dictionary.   otherwise if value under the "author_email" key of the item dictionary is true,
otherwise if value under the "author_name" key of the item dictionary is true,
data, encoding and errors as a string 'replace'.   otherwise if item_type equals FILE,
otherwise if k equals a string 'bg',
otherwise if length of app_labels is greater than integer 1,
otherwise if length of bits equals integer 6,
fk_name, parent_model._meta.app_label and parent_model._meta.object_name, respectively.   otherwise if length of fks_to_parent is zero,
otherwise if length of fks_to_parent is zero,
otherwise if length of key equals integer 1 and type of first element of key is contained in fasttypes,
otherwise, length of options.args is lesser than integer 1,
otherwise if maxsize is None,
otherwise if, first element of message_context is equal to "'",
otherwise if first element of message_context equals to character "'",
otherwise if msg is true,
otherwise if msg and visible_issue_count are true,
else if name is equal to 'abcd'
otherwise if name equals a string 'id'.
otherwise if name starts with a string 'string',
otherwise if name is contained in lib.filters,
otherwise if name is not None and compile_function is None,
otherwise if name is not None and compile_function is not None,
otherwise if name is not None and filter_func is None,
otherwise if name is not None and filter_func is not None,
otherwise if base_url does not ends with '/' character,
otherwise if formfield_callback is not callable object,
alternatively, if six.PY3 is true check if message does not have an attribute 'message', if six.PY3 is false, check if message doesnt have an attribute 'code', perform the following,
otherwise if content is not an instance of Message class,
otherwise if end is not an instance of string type,
otherwise if file_name is not an instance of six.string_types and call to the function is_iterable with an argument file_name,
otherwise if sep is not an instance of string type,
otherwise if value is not an instance of list ot tuple type,
otherwise if vale is not an instance of ConvertingList and value is an instance of list type,
otherwise if vale is not an instance of ConvertingTuple and value is an instance of tuple type,
if values under the 'socket', 'host' and 'port' keys of the options dictionary are false,
otherwise if self.file_path file path doesnt exists,
and code set to string 'required.   otherwise if self.required is false and value is false,
otherwise if ns is not contained in app_list,
where '%s' is replaced with first element of bits.   otherwise if options equals 'only',
otherwise if value under the key 'all' of the options dictionary is true,
otherwise if value under the 'app_label' key of options dictionary is true,
otherwise if value under the 'method' key of optins dictionary equals to string 'thread' or 'threaded',
convert the value under the 'daemonize' key of options dictionary to lowercase, if it equals to string 'false', 'no' or 'f',
of the options dictionary and value under the 'port' key of the options dictionary converted into an integer.   if value under the 'socket' key of the options dictionary is true and values under the 'host' and 'port' keys of the options dictionary are false,
where '%s' are replaced with name and param.   otherwise if param is contained in kwargs,
append the result to pieces.   otherwise if piece is true,
otherwise if pluralmatch is true,
otherwise if prefix is not equal to common_prefix,
otherwise if safe_input is true,
otherwise if self._delegate_text is true,
otherwise if self._meta.exclude is true and field is not contained in self._meta.exclude,
otherwise if self._meta.fields is true and field is not contained in self._meta.fields,
if self.argv, without the first element is contained in a tuple with 2 entries: a list containing a string '--help',
otherwise if self.fixture_object_count equals self.loaded_object_count,
otherwise if value under the 'CONTENT_TYPE' key of hte self.META dictionary starts with 'application/x-www-form-urlencoded',
otherwise if self.name exists and self.name file path exists,
otherwise if self.nodelist_false is true,
otherwise if self.reason_phrase is None,
otherwise if self.required is true,
otherwise if self.use_ipv6 is true and _fqdn is false,
otherwise if self.verbosity equals integer 3,
otherwise if self.verbosity is greater than integer 0,
otherwise if self.waiting_readers is not equal to integer 0,
otherwise is settings.USE_TI is true,
otherwise if call the method simple_url_2_re.match with an argument middle evaluates to true,
otherwise if size is less than length of self.buffer,
otherwise if level converted into a string equals level,
with 2 arguments: self.prog_name and first element of options.args.   otherwise if subcommand equals a string 'version' or self.argv, without the first element equals a list containing a string '--version'
otherwise if t.contents equals a string 'comment',
otherwise if t.token_type equals TOKEN_COMMENT,
if t.token_type == TOKEN_TEXT:
formated with t.contents, filemsg and t.lineno.   otherwise if t.token_type equals TOKEN_VAR,
otherwise if t.token_type equals TOKEN_VAR,
otherwise if template_tuple is None,
else if timeout equals to integer 0,
and token.   otherwise if token.token_type equals integer 1,
otherwise if token.token_type equals integer 2,
and elements of token_string from second to second last element wiht the whitespaces striped from the both sides.   otherwise if token_string starts with BLOCK_TAG_START,
otherwise if token_string starts with COMMENT_TAG_START,
otherwise if total_forms is grater than self.max_num is grater or equal to integer 0,
otherwise if, type of s doesnt equal to six.text_type,
otherwise if tzinfo is not None,
otherwise if value under the key key of the user_settings dictionary is not equal to the value under the key key of the default_settings dictionary,
otherwise if value is boolean False, string 'False' or string '0'
otherwise if value is boolean False,
otherwise if var is None,
created with an argument constant_arg, append it to args.   otherwise if var_arg is true,
else if x is equal to 5
else if x is equal to y
substitute the '%s' with table and 3 elements of a list: b64encoded, exp and key, respectively.   if not,
It looks like this project was generated using Django 1.5 or earlier. You should ensure your tests are all running & behaving   as expected. See https://docs.djangoproject.com/en/dev/releases/1.6/#new-test-runner for more information.",   obj set to None and id set to a string '1_6.W001', put the result into a list and return it.   if not,
Django 1.7 changed the global defaults for the MIDDLEWARE_CLASSES. django.contrib.sessions.middleware.SessionMiddleware,   django.contrib.auth.middleware.AuthenticationMiddleware, and django.contrib.messages.middleware.MessageMiddleware were removed   from the defaults. If your project needs these middleware then you should configure this setting., obj set to None, and   id set to a string '1_7.W001', put the result into a list and return it.   if not,
if not.
subtype and charset, respectively.   if not,
and evaluated boolean expression s_opt.nargs doesnt equal to integer 0, for every s_opt in parser._actions,   only if s_opt.option_strings is true,   if not,
if the key doesnt exists use sys.stderr as an argument.   if not,
substitute the resulting list for app_config.   if not,
for every app_config in return value of the method apps.get_app_configs, only if app_config.models_module is not None,   and app_config is not contained in excluded_apps.   if not,
This will IRREVERSIBLY DESTROY all data currently in the %r database, and return each table to an empty state.   "Are you sure you want to do this?"Type 'yes' to continue, or 'no' to cancel: ", where '%s' is replaced with value under the 'NAME' key of the connection.settings_dict dictionary.   if not,
otherwise, value under the 'decimal_places' key of the field_params is integer 5.   if not
where '%d' is replaced with self.loaded_object_count and self.fixture_count, respectively.   if not,
replace '%s' with: elements of last element of parts joined into a string and last element of parts.   if not,
separated by newline, substitute it for msgs.   if not,
write it to self.stdout.   if not,
if it does append it to targets list.   if not,
if set is empty return string '(none)' instead, append the previous to the string " Apply all migrations: ",   use the previous string as the argument for the call to the method self.style.MIGRATE_LABEL,   use the result as an argument for the call to the method self.stdout.write.   if not,
use the it as an argument for the call to the self.style.MIGRATE_LABEL method, use the result to cal the self.stdout.write method.   if not,
string joined from invalided_apps list and separated with string ', '.   if not,
in not,
if not, substitute used_name for guessed_filename.   if not,
with unpacked list value as an argument, return the pk field of the result.   if not,
smart_text function, return the result.   if not,
unpacked list field_value as an argument, substitute the result for value of under the field.attname key of the data dictionary.   if not,
field.attname of the data dictionary.   if not,
with unpacked list field_value as an argument, substitute the field pk of the result for obj_pk.   if not,
and an empty dictionary, substitute the result for httpd_cls.   if not,
for 'maxSpare', value under the key 'minspare' of options dictionary converted to an integer for 'minSpare',   and value under the key 'maxchildren' of options dictionary converted to an integer, for 'maxThreads'.   if not,
where string '%s' is replaced by lookup_view and mod_name, respectively.   if not,
substitute it for candidate_subs.   if not,
respectively replace '%s' with key and elements of the resolved_path joined into a string, separated by ':'.   if not,
convert the result to a lowercase string, substitute it for step.   if not,
substitute the result for last element of output.   if not,
substitute the result for value under the field key of the self._errors dictionary.   if not,
ManagementForm data is missing or has been tampered with' and code as a string 'missing_management_form'.   if not,
and self.absolute_max, return the result.   if not,
label set to return value of the function _ called with an string 'Order', initial set to index incremented by 1,   and required as boolean False.   if not,
substitute the result for value under the f.name key of data dictionary.   if not,
where '%(field)s' is replaced with first element of unique_check, return the result.   if not,
widget is an instance of HiddenInput class.   if not,
model._meta.app_label, model._meta.object_name, fk_name, respectively.   if not,
model._meta.app_label, model._meta.object_name, parent_model._meta.app_label, parent_model._meta.object_name, respectively.   if not,
RemovedInDjango19Warning and stacklevel set to integer 2.   if not,
and sub_widgets set to return value of the function sub_ul_renderer.render, append the result to output.   if not,
self._files is an instance of class MultiValueDict.   if not,
return value of the function quote called with arguments k and safe, and with return value of the function quote called with arguments v and safe.   if not,
convert the result into a string and substitute it for value.   if not,
substitute it for max_age, if not, max_age is integer 0.   if not,
substitute the result for value.   if not,
substitute the result for new_obj.   if not,
if else,
where '%s' are replaced with name and param.   if not,
substitute the result for i-th element of lines.   if not,
filesize_number_format with result of division of bytes by TB as an argument, substitute the result for value.   if not,
and csrf_token, return the result.   if not,
for every var in self._varlist.   if not,
where '%s' is replaced with taglib and e.   if not,
use the result as the argument for the call to the function hashlib.sha1, call the hexdigest method on the result,   join template_name and previous final result into a string, separated with '-', return it.   if not,
and result of the function force_bytes called with an argument val2, return the result.   if not,
iterations and dklen, return the result.   if not,
return result converted into an integer.   if not,
substitute the result for s.   if not,
and self.ns for "xmlns".   if not,
format the string  '<p>%s</p>' with the result, for every p in paras, substitute list of results for paras.   if not,
substitute the result for i-th element of words.   if not,
convert_charrefs set to convert_charrefs and dictionary **kwargs as the arguments.   if not,
substitute the result for offset.   if not,
otherwise return boolean False.   if not,
if nor,
substitute the result for proxy.   if not,
determine whether string is singular or plural.', where '%s' is replaced with number.   if not,
convert slice of language string from (p+1)-th index to the end to uppercase, append it to the previous result, return the resulting string.   if not,
covert to lowercase language elements from (p+1)-th index to the end, append it to the previous result, return it.   if not,
covert to uppercase language elements from (p+1)-th index to the end, append it to the previous result, return it.   if not,
covert to lowercase locale elements from (p+1)-th index to the end, append it to the previous result, return it.   if not,
called with 2 arguments: singular and trimmed and result of the function join_tokens called with 2 arguments: plural and trimmed,   write the result to out.   if not,
called with 2 arguments: singular and trimmed, write the result to out.   if not,
if the 'fake' key doesnt exists set fake to boolean False, as arguments.   call the method emit_post_migrate_signal with created_models, self.verbosity, self.interactive and connection.alias as arguments.
extend all_models list with the result.   call the function emit_post_migrate_signal with 4 arguments: all_models converted into a set, verbosity, interactive and database.
call the emit_pre_migrate_signal with create_models, self.verbosity, self.interactive. connection.alias as arguments.
create list of first remaining elements of chunk, substitute it for emitting.
empty is an instance of object class.
incremental is boolean False.   EMPTY_DICT is an empty dictionary.
en_byte is a string ""
en_byte is a random element of the list chars between 0 and the lenght of chars - 1
set enc to the reversed hexadecimal value of dec
encode is an lambda function with 2 arguments k and v, return value is the result of the function urlencode, called with an argument:
append '\\x'' to encoded
concatenate the string '\\x' and the conversion to hex of a random integer between 1 and 255, then append it to encoded
concatenate the string '\\x' and the conversion to string the value en_byte and append it to encoded
append '\n' to encoded
Convert the variable y to a hexadecimal. Concatenate the result with the string ','and add the result to the variable encoded
append string '%02x' modulo x to encoded
append to encoded the conversion to hex of xor_rot
append string '%02x' modulo repeat to encoded
put the double qoutes around encoded.
in encoded, replace all the occurrences of unicode character "\\054" with ',' character and "\\073" with ';' characters.
encoded is the result of the or operation between val1 and val2
Convert the value of z to a hexadecimal then add it to the variable encoded1 followed by the string ', '
Convert the value of z bitwise and 0xaa to a hexadecimal then add it to the variable encoded1 followed by the string ','
Convert the variable w to a hexadecimal. Concatenate the result with the string ',' and add the result to the variable encoded1
Convert the value of z to a hexadecimal then add it to the variable encoded1 followed by the string ', '
Convert the variable z to a hexadecimal. Concatenate the result with the string ',' and add the result to the variable encoded1
convert the value z to hex, concatenate the result with ',' and append it to the string encoded1
convert (8 +(128 + z)) to hexadecimal, concatenate the result with the string ',' and append it to the string encoded1
Convert the value of z bitwise and 0x1f to a hexadecimal, concatenate the result with the string ',' and then add it to the variable encoded1
convert (z-7) to hexadecimal, concatenate the result with the string ',' and append it to the string encoded1
Convert the value of z to a hexadecimal, concatenate the result with the string ',' and then add it to the variable encoded1
concatenate the string '0x' with the hexadecimal conversion of 0xff and append the result to the string encoded1
concatenate the string '0x' with the hexadecimal conversion of tmp and append the result to the string encoded1
encoded1 is the concatenation of the string "0x" with the hexadecimal conversion of the lenght of the array of bytes of str1
append string '%02x,' modulo repeat to encoded2
append string '%02x,' modulo x to encoded2
append to encoded2 the conversion to hex of xor_rot
append string '0x' to the string encoded2
concatenate the string '\\x' and the conversion to hex of a random integer between 1 and 255, then append it to encoded2
concatenate the string '\\x' and the conversion to string the value en_byte and append it to encoded2
append string '\\x' to encoded3
append string '0x' to encoded3
append '0x' to encoded3
encoded3 is a string ""
evaluate the function getdefaultlocale from the module locale, if second element of return value exists assign it to encoding,
encoding is None.
define lambda function that returns self.file.encoding field, use it as an argument for property function, put the result in encoding.
substitute self._encoding for encoding.
if self.encoding exists substitute it for encoding, if not substitute settings.DEFAULT_CHARSET for encoding.
substitute settings.DEFAULT_CHARSET for encoding.
decrement end by one.
substitute index for end.
remove 'end' key from the kwargs dictionary, if it exists substitute it for end, if not end is None.
substitute length of s for end.
substitute length of text for end.
substitute space for end.
slice the rawdata string from the k-th to the endpos-th index, remove the whitespaces from the start and the end of the string, substitute it for end.
is an even number,   call the method s.find with 2 arguments: bytes string ';' and end incremented by one, substitute the result for end.
call the method s.find with an argument bytes string ';', substitute the result for end.
substitute i for end_index.
end_index is None.
where '%r' is replaced with first element of bits.   append first element of bits to 'end'. substitute the result for end_tag.
end_text_pos is equal to integer 0.
substitute pos for end_text_pos.
call the method parser.next_token, substitute the result for endblock.
substitute the result for block_re.   call the function re.compile with an argument raw string "^\s*endblocktrans$", substitute the result for endblock_re.
call the function endblock_re.match with an argument t.contents, substitute the result for endbmatch.
if ending is None substitute self.ending for ending.
call the method self.check_for_whole_start_tag with i as an argument, substitute result for the endpos.
substitute the result for starttag_re.   call the function re.compile with an argument string '</%s>' formated with tags_re, substitute the result for endtag_re.
EndToken is an instance of EndToken class.
call the function ensure_echo_on.
entropy is the cast to integer of the first argument
replace every occurrence of string '\r\n' in message with '\n', replace every occurrence of string '\r',
error is an dictionary with an initial entry error.error_list for filed if true, or NON_FIELD_ERRORS if not.
ERROR is integer 40.
substitute error.error_dict for error.
substitute i-th element of self.data for error.
append string ".moves.urllib_error" to __name__, use it as an key to get the value from the sys.modules dictionary, substitute it for error.
error is an instance of ValidationError created with an argument error.
substitute TemplateSyntaxError for error_class.
substitute ValueError for error_class.
call the method extend with an argument error_list on the return value of the method error_dict.setdefault called with 2 arguments: field and an empty list.
call the method extend with an argument error_list on the return value of the method error_dict.setdefault called with 2 arguments: NON_FIELD_ERRORS and an empty list.
error_messages is an empty dictionary.   substitute error_message for value under the 'invalid' key of the error_messages dictionary.
get the value under the 'error_messages' key of the kwargs dictionary, if it exists substitute it for error_messages, if not,
substitute value under the NON_FIELD_ERRORS key of opts.error_messages dictionary for error_messages.
get the value under the field key of self.fields dictionary, substitute error_messages field of the result for error_messages.
append string " Got this from the '%s' variable." to error_msg, where '%s is replaced with self.parent_name.token.
error_msg is a string "Invalid template name in 'extends' tag: %r.", where '%s' is replaced with parent.
err_msg is a string "Tried %s", where '%s' is replaced with tried.
error_msg is a string "Your TEMPLATE_DIRS setting is empty. Change it to point to at least one template directory.".
get the value under the e.errno key of the ERRORS dictionary, substitute it for error_text.
convert e to a string, substitute it for error_text.
call the Error function with 4 arguments, string "%s was connected to the '%s' signal with a lazy reference to the '%s' sender,
append to errors list a dictionary created with 2 etries, if escape_html is true, return value of the function escape
get the value under the 'incomplete' key of the field.error_messages dictionary, append it to errors.
call the method self.get_date_error_message with an argument date_check, append the result to errors.
call the method self.get_unique_error_message with an argument unique_check, append the result to errors.
call the function _check_boolean_field_default_value with dictionary kwargs as argument, use the result as an argument for the call to the function errors.extend.
call the function _check_middleware_classes with dictionary kwargs as argument, use the result as an argument for the call to the function errors.extend.
call the function _check_test_runner with dictionary kwargs as argument, use the result as an argument for the call to the function errors.extend.
extend errors list with e.error_list.
extend errors list with m for every m in e.error_list, only if m is not in errors.
call the method errors.extend with argument new_errors.
get the value under the 'error_messages' key of the kwargs dictionary, update errors dictionary with it.
errors is a string "strict".
errors is an empty list
errors is an empty list.
and e.level is lesser than checks.WARNING and result of the method e.is_silenced in false.   append e to errors list for every e in all_issues, if checks.ERROR is lesser than or equal to e.level,
call the model.check method with unpacked dictionary kwargs for every model in return value of function apps.get_models,
ERRORS is a dictionary with 3 initial entries: string "You don't have permission to access that port." for errno.EACCES,
get 'errors' attribute from fp object, substitute it for errors if it exists, if not errors is None.
and errors set to the result of self.default_error_messages.copy.
every occurrence of '<' with '&lt;', every occurrence of '>' with '&gt;', every occurrence of '"' with '&quot;',   and every occurrence of "'" with '&#39;', call the function mark_safe with the previous result as an argument, return the result.   call the function allow_lazy with 2 arguments: escape, six.text_type, substitute the result for escape.
ESCAPE_MAPPINGS is an dictionary with 10 initial entries: None for 'A', None for 'b', None for 'B', '0' for 'd', 'x' for 'D',
escaped is boolean False.
escaped is boolean True.
use the result as an argument for the call to the mark_safe function, return the result.   call the function allow_lazy with 2 arguments: escapejs, six.text_type, substitute the result for escapejs.
substitute conditional_escape for escaper.
escaper is an identity lambda function.
substitute EscapeBytes for EscapeString.
substitute EscapeText for EscapeString.
substitute EscapeText for EscapeUnicode.
call the sys.exc_info function, assign the result to et, ev and tb, respectively.
call the function re.compile with an argument raw string '(?:W/)?"((?:\\.|[^"])*)"', substitute the result for ETAG_MATCH.
for every e in etags call the method e.encode with an argument string 'ascii', call the method decode on the result with an argument,
call the method ETAG_MATCH.findall with an argument etag_str, substitute the result for etags.
for every c in reversed order of candidate, convert c into an integer, sum all the results and substitute the result for evens.
EventHandler.modified_code is FILE_MODIFIED.
EventHandler.modified_code is I18N_MODIFIED.
exc_info is an tuple with 3 elements: None, result of method record.getMessage and None.
substitute record.exc_info for exc_info.
call the function sys.exc_info with an argument exc_info.
get the type of the exc object, substitute it for exc_type.
substitute the result for exc_value.   substitute exc for exc_value.__cause__.
call the function exc_type with an argument string "Unsupported value: %r. You should install pytz.", replace '%s' with dt,
if _BASE64_DECODE_ERROR exception is caught,
if an exception occurred,
otherwise if any other exception is caught,
if any exception is caught,
if exception is caught,
is exception is caught,
if archive.ArchiveException or IOError, renamed to e, exception are caught,
if TypeError or AttributeError exceptions are caught,
if AttributeError or UnsupportedOperation exception occurred.
if DatabaseError or IntegrityError, renamed to e, exceptions are caught,
if HTMLParseError or UnboundLocalError exceptions are caught,
if ImportError or AttributeError exception occurred,
if ImportError, AttributeError, renamed to e, exceptions are caught,
if ImportError, IndentationError, NameError, SyntaxError, TypeError or AttributeErrorexception is caught,
if IndexError, ValueError, KeyError or TypeError exceptions are caught,
if IndexError, TypeError or ValueError exception is caught,
if IOError or OSError exceptions occurred,
if KeyError or AttributeError, renamed to exc, exceptions are caught,
if KeyError, IndexError and AttributeError exception is caught,
if KeyError and TypeError exceptions are caught,
pad the rest of the field with bytes string '=', use the result as an argument for the call to the method base64.urlsafe_b64decode,   return the result.   if LookupError or BinasciiError, renamed to e, exceptions are caught.
if LookupError or ImportError, renamed to e, exceptions are caught,
if LookupError or TypeError exceptions are caught,
if OSError or IOError exceptions were raised,
if OSError, NotImplementedError or AttributeError exceptions are caught,
if OSError or TypeError errors occurred.
if OSError exception was raised,
if OverflowError or ValueError exceptions are caught,
if OverflowError or ValueError, renamed to exc, exceptions are caught,
if ssl.SSLError or smtplib.SMTPServerDisconnected exception occurred,
if TypeError, AttributeError, KeyError or ValueError exceptions are caught,
if TypeError and AttributeError exceptions are caught,
if TypeError, ValueError or UnicodeDecodeError exceptions are caught,
if TypeError or ValueError exceptions are caught,
if TypeError or VariableDoesNotExist exceptions are caught,
called with an argument text converted into a floating point number.   if ValueError, InvalidOperation, TypeError or UnicodeEncodeError exceptions are caught,
if OverflowError or ValueError exceptions are caught,
if ValueError, OverflowError or InvalidOperation exceptions are caught,
if ValueError or self.queryset.model.DoesNotExist exception is caught,
if ValueError, TypeError or OverflowError exceptions are caught,
if ValueError, TypeError or ValidationError exception is caught,
if ValueError or TypeError exceptions occurred,
if exception ValueError or TypeError is caught,
if ValueError or TypeError exceptions are caught,
if ValueError or TypeError are caught,
if TypeError or ValueError exceptions are caught,
if exception ValueError or TypeError is raised,
if AmbiguityError exception is caught,
if AmbiguityError exception is raised,
if AppRegistryNotReady exception is caught,
except if AttributeError is caught,
if AttributeError exception is caught,
if AttributeError exception is caught.
if AttributeError exception is raised,
substitute the result for data.   if AttributeError exception is caught,
if base.DeserializationError exception is caught,
if CommandError exception is caught,
substitute the '%s' with table and 3 elements of a list: b64encoded, exp and key, respectively.   if DatabaseError exception is caught,
if DatabaseError, renamed to e, exception is caught,
if DecimalException exception is caught,
if Exception exception is caught,
if GET_override is not None, or otherwise generated with the call to the function pformat with an argument request.GET.   if Exception exception is caught,
if POST_override is not None, or otherwise generated with the call to the function pformat with an argument request.POST.   if Exception exception is caught,
if COOKIES_override is not None, or otherwise generated with the call to the function pformat with an argument request.COOKIES.   if Exception exception is caught,
if META_override is not None, or otherwise generated with the call to the function pformat with an argument request.META.   if Exception exception is caught,
if the Exception exception is caught,
if Exception exception is caught.
as the arguments, substitute the result for response.   if Exception, renamed to e, exception is caught,
if Exception, renamed to e, exception is caught,
if exception of class Exception, as e, is caught,
if exception of the class Exception, as e, is caught,
if GeneratorExit exception is caught,
if exception GeneratorExit is caught,
if HTMLParseError exception is caught,
if exception http.Http404 as e is caught,
if http_cookies.CookieError exception is caught,
if http_cookies.CookieError exception is raised.
if http_cookies.CookieError exception is raised,
if ImportError exception occurred,
if ImportError exception is caught,
if ImportError exception is caught.
if imoportError exception is caught,
yield the result.   if ImportError exception is caught,
except ImportError.
if ImportError, renamed to e, exception is caught,
if ImportError, renamed to e, is caught,
if ImportError, rename it to e, exception is caught,
if ImportError, renamed to exc, exception is caught,
if ImproperlyConfigured exception is caught,
if ImproperlyConfigured renamed to exc, exception is caught,
if IndexError exception is caugh,
if IndexError exception is caught,
substitute it for value under the 'initial' key of kwargs dictionary.   if IndexError exception is caught,
if InputStreamExhausted exception is caught,
if InvalidOperation exception is caught,
use the result as an argument for the call to the mark_safe function, return the result.   if InvalidOperation exception is caught,
if InvalidTemplateLibrary, renamed to e, exception is caught,
if IOError exception is caught,
previous result and filepath.   if IOError exception is caught,
if IOError, renamed to e, exception is caught,
if IOErro, renamed to e, exception is caught,
if IOError, substituted to e, exception is caught,
if KeyboardInterrupt exception is caught,
if KeyError exception is caught,
except if KeyError exception is caught,
with '%s' substituted for migration_name and app_label, respectively, as arguments.   if KeyError exception is caught,
if KeyError exception is caught.
with all '%s' strings replaced with migration_name and app_label, respectively, as an argument.   if KeyError exception is raised,
where '%s' is replaced with migration_name and app_label.   if KeyError exception is caught,
and '3' for '3', substitute it for value.   if KeyError exception is caught,
if NameError exception is caught,
if KeyError, renamed to key, exception is caught,
if exception LookupError is caught,
if LookupError exception is caught,
if LookupError exception is caught.
if MiddlewareNotUsed exception is raised,
an unpacked list natural_key as argument, substitute the pk filed of the resulting object for obj.pk.   if Model.DoesNotExist exception is caught,
if MultiPartParserError exception is caught,
if NameError exception is caught,
substitute the result for url.   if NoReverseMatch exception is caught,
current_app as context.current_app, substitute the result for url.   if NoReverseMatch exception is caught,
if NotImplementedError exception is caught,
if NotImplementedError exception,
if exception OSError occurred,
if OSError exception is caught,
if exception OSError, renamed to e, is caught,
if OSError, renamed to e, exception is caught,
if OSError, renamed to e, is caught,
if exception OSError, renamed to e, occurred,
if OSError renamed to e, exception is caught,
stderr set to PIPE, close_fds set to boolean True is os.name is not equal to 'nt', universal_newlines set to boolean True.   if OSError, renamed to e, exception is caught,
if OSError, renamed to err, is caught,
if OverflowError exception is caught,
if exception PermissionDenied is caught,
if pickle.PickleError exception is caught,
if re.error, renamed to e, is caught,
if Resolver404 exception is caught,
if Resolver404, renamed to e, exception is caught,
if self.LibraryValueNotFoundException exception is caught,
if serializers.SerializerDoesNotExist exception is caught,
with arguments cookie_value and max_age set to max_age.   if signing.BadSignature exception is caught,
if SkipFile exception is caught,
if smtplib.SMTPException exception is caught,
if socket.error, renamed to e, exception is caught,
if StandardError, renamed to e, exception is caught,
substitute the result for formatters dictionary value under name key.   if StandardError, renamed to e, exception is caught,
substitute the result for filters dictionary value under name key.   if StandardError, renamed to e, exception is caught,
use the result as an argument for the call to the method filterer.addFilter.   if StandardError, renamed to e, exception is caught,
under the 'handlers' key of self.config dictionary, substitute the result for value under 'target' key of config dictioanry.   if StandardError, renamed to e, exception is caught,
if StopFutureHandlers exception is caught.
if StopIteration exception,
if StopUpload, renamed to e, exception is caught,
if exception SuspiciousOperation as e is caught,
if SystemExit exception is caught,
if TemplateDoesNotExist exception is caught,
source and previous result.   if TemplateDoesNotExist exception is caught,
if TemplateDoesNotExist, renamed to e, exception is caught,
if TemplateSyntaxError, replaced with e, exception is caught,
if TemplateSyntaxError, renamed to e, exception is caught,
if TypeError exception is caught,
if TypeError, renamed to te, exception is caught,
if UnicodeDecodeError exception is caught,
if except UnicodeDecodeError exception is caught,
return the result.   if UnicodeDecodeError exception is caught,
if an exception of the type UnicodeDecodeError, renamed to e, is caught,
if UnicodeEncodeError exception is caught,
if the UnicodeEncodeError exception is caught,
if UnicodeError exception is caught,
substitute the result for netloc.   if UnicodeError exception is caught,
substitute the result for domain.   if UnicodeError exception is caught,
if UnicodeError, renamed to e, exception is caught,
if ValidationError exception is caught,
use the result as an argument for the call to the field.to_python method, substitute the result for initial_value.   if ValidationError exception is caught,
if ValidationError, renamed to e, is caught,
if ValidationError, substituted for e, exception is caught,
if ValidationError renamed to e, exception is caught,
if ValidationError, renamed to e, exception is caught,
if ValueError exception is caught,
substitute the result for self.literal.   if ValueError exception is caught,
if ValueError exception is caught.
if VariableDoesNotExist exception is not caught,
if VariableDoesNotExist exception is caught,
except statement
exception
append f.name to exclude.
append name to exclude.
exclude is an empty list.
call the method form._get_validation_exclusions, substitute the result for exclude.
get the value under the key 'exclude' of the options dictionary, substitute it for exclude.
get the value under the 'exclude' key of the options dictionary, substitute it for exclude.
call the method self._get_validation_exclusions, substitute the result for exclude.
add app_config to excluded_apps set.
excluded_apps is an empty set.
add model to excluded_models set.
excluded_models is an empty set.
get the value under the 'exclude' key of the options dictionary, substitute the result for exclude.
substitute fist and second element of exc_info for exctype and value, respectively.
execute code statement """exec _code_ in _globs_, _locs_""".
compile the handle.read in mode 'exec' source is read from file pythonrc, execute the compiled script with imported_objects variables.
call the function exec_ with an argument string """def reraise(tp, value, tb=None):    raise tp, value, tb""".
get 'exec' attribute from the moves.builtins object, substitute it for exec_.
call the executor.migrate method with, targets, plan and fake set to the value under the 'fake' key of options dictionary,
if exists, if not use None as the second argument, return the result.   call the function MigrationExecutor with connection and self.migration_progress_callback as arguments, substitute the result fro executor.
call the MigrationExecutor with the connection as the argument, substitute it for executor.
call the function exhaust with an argument stream.
remove name from existing.
sort elements of list existing.
convert root.manager.loggerDict into a list, substitute it for existing.
existing_headers is a set of lowercase headers for every header in vary_headers.
existing_headers is a set containing lowercase strings header for every header in vary_headers.
terminate the program with exit code 6
terminate the program with exit code 7
substitute the datetime.max for exp.
call the function datetime.utcfromtimestamp with argument timeout, substitute it for exp.
instantiate class Decimal with string '1.0' as argument, divide it by product of instance of Decimal class created with integer 10,
exp is an instance of Decimal, created with an argument integer 1.
call the exp.replace with microsecond set to integer 0, substitute the result for exp.
call the function pickle.load with argument f, substitute the result for exp.
call the method self._expire_info.get with key and integer -1 as arguments, substitute the result for exp.
call the method path.expanduser with an argument template, substitute it for expanded_template.
call the method path.normpath with an argument expanded_template, substitute it for expanded_template.
expires is None.
substitute third element of row list for expires.
call the method timezone.make_naive with arguments: expires, timezone.utc, substitute the result for expires.
and expires is not an instance of datetime.   convert expires to a string, use it as argument for the call to the function typecast_timestamp, substitute the result for expires.
call the method self.get_backend_timeout with argument timeout, substitute it for expiry.
concatenate var_name, VARIABLE_ATTRIBUTE_SEPARATOR and fourth element of bits, use the result as an argument for the call the method,
take last four elements of base and append ext to it, substitute result for ext.
substitute the first 255 elements of ext for ext.
call the method mimetypes.guess_extension with an argument content_type, substitute result for ext.
call the method self.splitext with an argument guessed_filename, substitute the second element of the result for ext.
delete all the whitespaces from ext, split it by ',' character, extend ext_list with the result.
prepend '.' to the i-th element of the ext_list.
ext_list is an empty list,
substitute complain for extend.
get the attribute 'extend' of the cls object, if it exists substitute it for extend, if not extend is boolean True.
extension_map is a dictioanry with 6 initial elntries: TarArchive for '.tar', TarArchive for '.tar.bz2', TarArchive for '.tar.gz',
get the value under the 'extensions' key of the options dictionary, substitute it for extensions.
where '%s' is replaced with top_dir.   call the function handle_extensions with 2 arguments: value under the 'extensions' key of the options dictionary,
substitute the value under the ns key of the resolver.namespace_dict dictionary for extra and resolver, respectively.
call the method self.widget_attrs with an argument widget, substitute the result for extra_attrs.
add self.form.error_css_class to extra_classes set.
add self.form.required_css_class to extra_classes set.
split extra_classes into words, by whitespaces, substitute the result for extra_classes.
if extra_classes is not empty put its elements into a set, substitute it for extra_classes, if not extra_classes is an empty set.
call the function token_kwargs with 3 arguments: remaining_bits, parser and support_legacy set to boolean True, substitute the result for extra_context.
split file by ',' character, apply on its every element a lambda function which takes an argument x,
and ignored as an empty tuple, convert the result into a tuple and substitute it for extensions.   extra_files is an empty list.
field_notes, respectively.   add field_params to extra_params dictionary.
add params to extra_params dictionary.
value under the 'blank' key of the extra_params dictionary is boolean True.
value under the 'null' key of the extra_params dictionary is boolean True.
value under the 'primary_key' key of the extra_params dictionary is boolean True,
value under the 'unique' key of the extra_params dictionary is boolean True,
extra_params is an instance of the class OrderedDict.
call the method extracted.close.
call the method self._archive.extractfile with an argument member, substitute the result for extracted.
if extensions is false, substitute it for exts, otherwise exts is a list containing 2 elements: string 'html' and string 'txt'.
if extensions is false, substitute it for exts, otherwise exts is a list containing string 'js'.
call close method on a file stream.
second element of l for every l in return value of the self._files.lists   call the method f.close.
if 'incomplete' key of the f.error_messages doesnt exists, assign it the value under the 'incomplete' key of the self.error_messages dictionary.
call the function f.process with 2 arguments: self and self.domain.
f.required is boolean False.
call the method f.save_form_data with 2 arguments: instance and value under the f.name key of cleaned_data dictionary.
call the method f.seek with an argument integer 0.
call the function pickle.dumps with expiry and integer -1 as arguments, use the result as the argument for the call to f.write function.
call the function pickle.dumps with argument value, use the result and integer -1 as arguments for the call to the function zlib.compress, use the result as an argument for the call to the f.write method.
join p and cmd into a file path, substitute it for f.
join root and f into a file, substitute it for f.
join root and f in path, substitute the result for f.
substitute first end elements of s for f.
call the method to_python with an argument data from the base class of the class ImageField, substitute the result for f.
decrement factor by one.
increment factor by one.
factor is integer 0.
substitute c for factory.
substitute config dictionary value under '()' key for factory.
substitute the result for value under 'address' key of config dictionary.   substitute klass for factory.
fail_message is a string changed'.
fail_message is a string 'created'.
call the method tempfile.mkstemp with dir set to self._dir, substitute result for fd and tmp_path, respectively.
binary or 'O_BINARY' attribute of the os object, or integer 0 if it doesnt exists.   call the os.open function with full_path, flags and octal number 0o666 as arguments, substitute the result for fd.
evaluate the binary expression with 4 operands: os.O_WRONLY, binary or os.O_CREATE, binary or 'O_BINARY' attribute of object os,
call the method pyinotify.INotifyWrapper.create, on the return value call the inotify_init method, substitute the result for fd.
substitute sys.stdin for fd.
add ext to f, substitute the result for fext.
remove the first element from colors, substitute it for fg.
write migration_string to file fh.
call the method writer.as_string, write the result to fh file.
call the method writer.as_string, write the result to file fh.
call the method Field.__init__ with 8 arguments: self, required, widget, label, initial, help_text, unpacked list args,
increment Field.creation_counter by one.
FIELD is a field".
substitute f.name for field.
call the method field.rel.get_related_field, substitute the result for field.
settings.DEFAULT_CHARSET if the key doesnt exists and strings_only set to boolean True.   call the Model._meta.get_field method with an argument field_name, substitute the result for field.
call the method Model._meta.get_field with an argument field_name, substitute it for field.
substitute the value under the fieldname key of the self.fields dictionary for field.
get the value under the name key of the self.fields dictionary, substitute it for field.
join elements of comment_notes into a string, separated by whitespaces, append it to the string ' #', append the result to field_desc.
append string ', ' to field_desc.
in string '%s=%s' replace '%s' with k and return value of the function strip_prefix with an argument printable representation of v,
for every k and v in return value of the extra_params.items method, join all results into a string separated by a string ', ',   substitute it for field_desc.   append string ')' to field_desc.
field_desc is a string '%s = %s%s', where '%s' is replaced with: att_name, an empty string if '.' is contained in field_type,
for every f in fields, if exclude is false, or if exclude is true and f is not contained in exclude, and only if f is not in ignored,
field_dict is an instance of OrderedDict class, created with an argument field_list.
append a tuple with 2 elements: f.name and formfield to field_list.
field_list is an empty list.
get the value under the 'name' key of the disposition dictionary, strip it of whitespaces, substitute the result for field_name.
call the method field_node.getAttribute with an argument string 'name', substitute the result for field_name.
call the function force_text with 3 arguments: field_name, encoding and errors as a string 'replace', substitute the result for field_name.
append string 'max_digits and decimal_places have been guessed, as this database handles decimal fields as float' to field_notes.
append string 'Field name made lowercase.' to field_notes.
append string "Field renamed because it was a Python reserved word." to field_notes.
append string "Field renamed because of name conflict." to field_notes.
append string 'Field renamed to remove unsuitable characters.' to field_notes.
append a string 'This field type is a guess.' to field_notes.
append string "Field renamed because it contained more than one '_' in a row." to field_notes.
append string "Field renamed because it ended with '_'." to field_notes.
append string "Field renamed because it started with '_'." to field_notes.
append string "Field renamed because it wasn't a valid Python identifier." to field_notes.
field_notes is an empty list.
and return value of the function f.db_type called with an argument connection set to connection.   if f.null is false, append string append "NOT NULL" to field_output, otherwise append "NULL" to field_output.
append string "PRIMARY KEY" to field_output.
append string "UNIQUE" to field_output.
field_output is an list containing 2 elements: return value of the function qn called with an argument f.name,
call the method field_params.update with an argument new_params.1
substitute col_name for value under the 'db_column' key of the field_params dictionary.
substitute sixth element of row for value under the 'decimal_places' key of the field_params.
otherwise, value under the 'max_digits' key of the field_params is integer 10.   if sixth element of row is not None, substitute it for value under the 'decimal_places' key of the field_params,
substitute fifth element of row for value under the 'max_digits' key of the field_params.
if fifth element of row is not None, substitute it for value under the 'max_digits' key of the field_params,
convert fourth element of row to an integer, substitute it for value under the 'max_digits' key of the field_params.
field_params is an empty dictionary.
field_params is an instance of a class OrderedDict.
call the method self.get_field_type with 3 arguments connection, table_name and row, assign the result to field_type, field_params,
substitute field_type for field_type and new_params, respectively.
append '(' to field_type.
append rel_to to string 'ForeignKey(, substitute the result for field_type.
field_type is a string 'NullBooleanField('
field_type is a string 'TextField'.
append rel_to to string 'ForeignKey(, append character "'" to it, substitute the result for field_type.
call the method connection.introspection.get_field_type with 2 arguments: second element of row and row, substitute the result for field_type.
call the function getInnerText with argument k, on the result call the method strip, for every k in keys, append the results to field_value list.
call the function getInnerText with an argument node, call the strip method on the result, substitute the result for field_value.
field_value is None.
get the value under the field key of the self.cleaned_data dictionary, if it exists substitute it for field_value,
call the smart_text function with 3 arguments: field_value, value under the 'encoding' key of the options dictionary or,
substitute i-th element of value for field_value.
if obj is an instance of Field, append to a list a tuple with 2 elements: field_name,   and poped value under the field_name key of the attrs dictionary, substitute the resulting list for fields.   sort fields elements with key being a lambda function with argument x and return value creation_counter filed of first element of x.
update fields dictionary with new_class.declared_fields.
fields is an tuple containing 3 entries: return value of the method models.CharField called with 4 arguments:
fields is an tuple containing instances of the class DateField, created with 3 arguments: input_formats set to input_date_formats,
RemovedInDjango19Warning, stacklevel set to integer 2.   for field_name every obj in list created from the elements of the return value of the function six.iteritems with an argument attrs.
call the function fields_for_model with 9 arguments: opts.model, opts.fields, opts.exclude, opts.widgets, formfield_callback,
call the method six.iteritems with an argument base.base_fields, convert it to a list and append fields to it, substitute the result for fields.
call the method six.iteritems with an argument base.declared_fields, convert it to a list and append fields to it, substitute the result for fields.
substitute new_class.declared_fields for fields.
close file file.
set the file position pointer at the beginning.
set the file position pointer at file_pos.
FILE is a file".
file is an instance of BytesIO class created with an argument: return value of the method data.read.
file is an instance of BytesIO class created with an argument: value under the 'content' key of the data dictionary.
substitute the result of the function data.temporary_file_path for file.
substitute file_or_path for file.
open file named file_or_path for reading, store the file object handle in file.
call the method tempfile.NamedTemporaryFile with arguments: suffix set to string '.upload' and dir set to settings.FILE_UPLOAD_TEMP_DIR.
call the method tempfile.NamedTemporaryFile with argument suffix set to string '.upload'.
call the method imp.find_module with 2 arguments: module_name and list containing element entry, assign the result to file_, _,
close file_ file descriptor.
append f to file_field_list.
file_field_list is an empty list.
FILE_INPUT_CONTRADICTION is an instance of object class.
call the method self.find_files with an argument string '.', substitute the result for file_list.
FILE_MODIFIED is integer 1.
call the function file_move_safe with content.temporary_file_path function result and full_path.
call the function file_move_safe with tmp_path, fname, allow_overwrite set to boolean True as arguments.
substitute data.name for file_name.
get the value under the 'filename' key of the disposition dictionary, substitute it for file_name.
call the function force_text with 3 arguments: file_name, encoding and errors set to string 'replace',
substitute the result for file_name.   call the function unescape_entities with an argument file_name, use the result as an argument for the call to the self.IE_sanitize,
call the method handler.file_complete with i-th element of counters as an argument, substitute the result for file_obj.
join dirpath and filename into path, use it as an argument for the call to the function os.path.normpath, substitute it for file_path.
get the position in bytes from the start of the file, store it in file_pos.
call the os.path.splitext with argument file_name, assign the result to the file_root and file_ext respectively.
substitute data.size for file_name.
sum _cached_filenames, new_filenames and _error_files, store the result in filelist.
for every fname in return value of the glob.glob1 function called with 2 arguments: self._dir and ,
substitute new_filenames for filelist.
divide num_entries by self._cull_frequency, convert the result to an integer, call the random.sample function with filelist and previous result as arguments, substitute the result for filelist.
call the self._list_cache_files method, substitute the result for filelist.
filemsg is an empty string.
filemsg is a string 'file %s, ', where '%s' is replaced with origin.
call the function cleanup_url with an argument url, assign the result to filename and display_url, respectively.
call the method filename.encode with an argument string 'ascii'
filename is a tuple containing 3 initial elements: string 'utf-8', and empty string and filename.
substitute ev.filename for filename.
substitute file for filename.
substitute file.name for filename.
call the method filename.encode with an argument string 'utf-8', substitute the result for filename.
truncate the last element of filename.
truncate last 9 elements of filename and append it string ".py".
call the os.path.basename with path as argument, substitute the result for filename.
call the function os.path.basename with an arguments path, substitute the result for filename.
join to_path and name into a valid system path, substitute the result for filename.
join to_path and name into a file path, substitute the result for filename.
split tmp at '/' character, substitute the last element of the result for filename.
call the traceback.extract_tb method with argument tb, substitute the first element of last row of the result to filename.
append filename to filenames.
filenames is an empty list.
define lambda function that returns self.file.fileno field, use it as an argument for property function, put the result in fileno.
return the absolute path of file path filepath, substitute it for filepath.
where '%s' is replaced with first element of bits.   call the method parser.compile_filter with second element of bits as an argument, substitute the result for filepath.
call the function self.filepath.resolve with an argument context, substitute the result for filepath.
append entry to files list.
_get_files is getter function for FILES attribute of this class.
filesize_number_format is an lambda function with an argument value, return value is the result of the method formats.number_format,
fill_to is an integer 7.
fill_to is an integer 8.
of the request.META dictionary is contained in settings.INTERNAL_IPS, otherwise use string 'EXTERNAL',   and result of the method record.getMessage.   call the function get_exception_reporter_filter with an argument request, substitute the result for filter.
FILTER_ARGUMENT_SEPARATOR is a string ':'.
call the method parser.compile_filter with an argument string "var|%s", where '%s' is replaced with rest, substitute the result for filter_expr.
call the method self.compile_filter with an argument token.contents, substitute the result for filter_expression.
substitute name for filter_func._filter_name.
call the method parser.find_filter with an argument filter_name, substitute the result for filter_func.
get '_filter_name' attribute of the func object, if it exists, substitute it for filter_name, if not, filter_name is None.
call the methof match.group with an argument "filter_name", substitute the result for filter_name.
filter_raw_string is a raw string "^(?P<constant>%(constant)s)|^(?P<var>[%(var_chars)s]+|%(num)s)| (?:\s*%(filter_sep)s\s*
(?P<filter_name>\w+)(?:%(arg_sep)s(?:(?P<constant_arg>%(constant)s)|(?P<var_arg>[%(var_chars)s]+|%(num)s)))?)",   where 'constant' is replaced with constant_string, 'num' with raw string '[-+\.]?\d[\d\.e]*', 'var_chars' with string "\w\.",   'filter_sep' with result of the function re.escape called with an argument FILTER_SEPARATOR,   anbd 'arg_sep' with result of the function re.escape called with an argument FILTER_ARGUMENT_SEPARATOR.   call the function re.compile with 2 arguments: filter_raw_string and result for bitwise OR on 2 operands re.UNICODE and re.VERBOSE,
and 'Comment' for TOKEN_COMMENT.   FILTER_SEPARATOR is a string '|'.
get the value under f key of dictionary under 'filters' key of self.config dictionary,
append a tuple with 2 arguments: filter_func and args to filters.
call the method self.configure_filter with an argument value under name key of filters dictionary,
filters is an empty list.
get config dictionary element under 'filters' key, if it exists substitute it for filters, if not, filters is EMPTY_DICT.
get value under the 'filters' key of the config dictioanry, if it exists substitute it for filters, if not filters is None.
remove config dictionary element under 'filter' key, if it exists substitute it for filters, if not, filters is None.
substitute string 'checked' for value under the 'checked' key of final_attrs dictionary.
call the method self._format_value with an argument value, use the result as an argument for the call to the function force_text,
call the function force_text with an argument value, substitute the result for value under the 'value' key of the final_attrs.
call the dict function with 2 arguments: final_attrs and id set to string '%s_%s', where '%s' is replaced with id_ and i,
call the method dict with 4: self.attrs, type as self.input_type, name as self.name, value as self.choice_value,
call the method self.build_attrs with 2 arguments: attrs and name set to name, substitute the result for final_attrs.
call the method self.build_attrs with arguments attrs, name as name, substitute the result for final_attrs.
call the method self.build_attrs with 3 arguments: attrs, type as a string 'checkbox', name as name, substitute the result for final_attrs.
call the method self.build_attrs with 3 arguments: attrs, type as self.input_type, name as name, substitute the result for final_attrs.
call the method self.build_attrs with 3 arguments: attrs, type set to self.input_type, name set to name,
call the method self.build_attrs with an argument attrs, substitute the result for final_attrs.
append string '-- The following references should be added but depend on non-existent tables:' to the final_output.
extend final_output with alter_sql.
use the result as an argument for the call to the method final_output.extend.   call the method connection.creation.sql_for_pending_references with 3 arguments: refo, style and pending_references,
call the method connection.creation.sql_for_pending_references with 3 arguments: refo, style and pending_references,
call the method final_output.extend with an argument output.
final_output is an empty list.
execute regardless of the exception being raised,
append the result to the '\n' string, write it to self.stdout.   finally perform,
use_natural_foreign_keys set to use_natural_foreign_keys, use_natural_primary_keys set to use_natural_primary_keys,   and stream set to stream, if the stream is true, otherwise stream set to self.stdout.   finally perform,
finally, perform,
with all occurrences of '%s' replaced with app_name and model._meta.object_name and e, respectively.   finally perform,
finally,
call the function hook with an argument entry, substitute the result for finder.
substitute the value under the entry key of the sys.path_importer_cache dictionary for finder.
substitute 3 successive elements starting from the i-th index of pieces for first, lang and priority, respectively.
first and second are None.
substitute list_ for first_item and second_item, respectively.
call the method fixture.close.
call the function open_method with arguments: fixture_file and mode, substitute the result for fixture.
call the method os.path.dirname with an argument fixture_name, append it to a list, substitute resulting list for fixture_dirs.
join dir_ and return value of the function os.path.dirname called with an argument fixture_name into a valid file path,
substitute self.fixture_dirs for fixture_dirs.
fixture_name and result of the function humanize called with an argument fixture_dir.   extend fixture_files list with fixture_files_in_dir.
fixture_files is an empty list.
append tuple containing 3 elements: candidate, fixture_dir and fixture_name to list fixture_files_in_dir.
where '%s' is replaced with result of the function humanize, called with an argument fixture_dir.   fixture_files_in_dir is an empty list.
call the method self.parse_name with an argument fixture_label, substitute the result for fixture_name, ser_fmt, cmp_fmt, respective.
call the method os.path.basename with an argument fixture_name, substitute the result for fixture_name.
append it to a list, perform the previous for every dir_ in fixture_dirs, substitute the resulting list for fixture_dirs.   call the method os.path.basename with an argument fixture_name, substitute the result for fixture_name.
call the function _get_foreign_key with 3 arguments: parent_model, model and fk_name=fk_name, substitute the result for fk.
substitute first element of fks_to_parent for fk.
fks_to_parent is a list containing f for every f in opts.fields, only if f is an instance of ForeignKey,
fks_to_parent is a list containing f, for every f in opts.fields if f.name equals fk_name.
evaluate binary expression with 4 operands: os.O_WRONLY, binary or os.O_CREAT, binary or os.O_EXCL,
flags is a integer 0.
update flat dictionary with d.
flat is an empty dictionary,
for 'maxSpare', value under the key 'minspare' of options dictionary converted to an integer for 'minSpare',   value under the key 'maxchildren' of options dictionary converted to an integer, for 'maxChildren',   and value under the key 'maxrequests' of options dictionary converted to an integer, for 'maxRequests'.   append string '_fork' to flup_module.
append value under the 'protocol' key of the options dictionary to the string 'server.', substitute it for flup_module.
define lambda function that returns self.file.flush field, use it as an argument for property function, put the result in flush.
get config dictionary element under 'format' key, if it exists substitute it for fmt, if not, fmt is None.
call the function get_format with an argument string 'DATE_FORMAT', substitute it for fmt.
call the function fn with list of arguments args and dictionary of argument values kwargs.
substitute code_changed for fn.
substitute inotify_code_changed for fn.
fname is a string "%s-%s.log", with '%s' replaced by timestamp and absolute value of the return value of the function id with argument self, respectively.
call the function self._key_to_file with key and version as arguments, substitute it for fname.
for every _ and nodelist in self.conditions_nodelists,
for every __ in iterator,
for every __ in range of integers from 0 up to sep subtracted from fill_to,
for every field_name and field_value in return value of the function six.iteritems called with value under the 'fields' key of dictionary d,
for every k and v in items of dictionary kwargs, respectively,
for every k and v in result of the call to the method type_.__dict__.items,
loop through shellcode converted into a bytearray
loop through z converted into a bytearray
if not accept is an empty string.   call the function parse_accept_lang_header with an argument accept, for every accept_lang and unused in the result,
for every accessor_name and object_list is return value of the method self.m2m_data.items.
for every alternative in self.alternatives,
for every app in sorted return value of the commands_dict.keys function,
for every app_config and model_list in app_list,
for eery app_config in app_configs,
apps registry is ready. Check that you don't make non-lazy gettext calls at import time..   for every app_config in app_configs,
for every app_config in return value of the method apps.get_app_configs,
for ever app_config in return value of the method apps.get_app_configs,
for every app_config in return value of the call to the function apps.get_app_configs,
for app_config in return value of the method apps.get_app_configs,
call the function apps.get_app_configs, for every app_config in result,
call the method apps.get_app_configs, for app_config in the result,
call the method apps.get_app_configs, for every app_config in the result,
for every app_config in reversed list created out of the return value of the function apps.get_app_configs,
for app_config in reversed list of apps.get_app_configs() elements,
for every app_dir in app_dirs,
for every app_label and app_migrations in result of the method changes.items,
boolean True for 'ask_merge'.   for every app_label and migration_names in result of the method conflicts.items,
for every app_label in app_labels,
for every app_label in bad_app_labels,
for every app_name and model_list in return value of manifest.items function,
for every app_name and mode_list in return value of manifest.items method,
for every app_name and model_list in return value of manifest.items method,
for every app_name and namespace_list in pattern.app_dict.items method return value,
for every app_name is app_names,
for every app_name in app_names.
for every arg in args,
for arg in argv list without the first two elements,
call the function six.itervalues with an argument kwargs, convert the result to a list and append it to a list containing args,
for every attachment in self.attachments,
call the method base.__dict__.items, for every attr and value in the result,
convert items of attrs dictionary to list of tuples, for every attr and value in it,
with different 3 string arguments, the others are results of the call to the function MovedModule called with 3 string arguments.   for every attr in _moved_attributes,
strings "URLError", "urllib2", "urllib.error", result of the call to the function MovedAttribute with 3 arguments:   strings "HTTPError", "urllib2", "urllib.error" and result of the call to the function MovedAttribute with 3 arguments:   strings "ContentTooShortError", "urllib", "urllib.error".   for every attr in _urllib_error_moved_attributes,
for every attr in _urllib_parse_moved_attributes,
for every attr in _urllib_request_moved_attributes,
strings "addbase", "urllib" and "urllib.response", result of the function MovedAttribute, called with 3 arguments:   strings "addclosehook", "urllib", "urllib.response", result of the function MovedAttribute, called with 3 arguments:   strings "addinfo", "urllib", "urllib.response" and result of the function MovedAttribute, called with 3 arguments:   strings "addinfourl", "urllib", "urllib.response".   for every attr in _urllib_response_moved_attributes,
RobotFileParser, "robotparser", "urllib.robotparser".   for every attr in _urllib_robotparser_moved_attributes,
for every attr in tuple with 3 arguments: strings 'expects_localtime', 'is_safe' and 'needs_autoescape',
for every attr in self.child_nodelists,
for every attr in self.rendering_attrs,
loop through shellcode converted into a bytearray
for every base in reversed order of bases,
call the method inspect.getmro with an argument new_class, for every base in the result,
for every base in new_class.__mro__ in reversed order,
for every basedir in basedirs,
for every bit in bits,
for bit in self.lookups,
iterate each byte of the array of bytes of sc starting from the index 16
declare a for loop with an iterator byte for each element in sh starting from index 12 converted into a bytearray
for every c in return value of the method response.cookies.values,
for every c in reversed order of self.__class__.__mro__,
for every cache in return value of the function caches.all.
for every cache_alias in settings.CACHES,
for every d in deps, if d is not contained in models and d is contained in model_list add boolean True to a tuple,
join fixture_dir, fixture_name with appended character '*' into a valid file path,
field url of the value under the 'enclosure' key of the item dictionary for 'url',   field length of the value under the 'enclosure' key of the item dictionary for 'length',   and field mime_type of the value under the 'enclosure' key of the item dictionary for 'type'.   for every cat in value under the 'categories' key of the item dictionary,
enclosure for 'rel', field url of value under the "enclosure" key of item dictionary for 'href',   field length of value under the "enclosure" key of item dictionary for 'length',   and field mime_type of value under the "enclosure" key of item dictionary for 'type'.   for every cat in value under 'categories' key of item dictionary,
for every cat in value under the 'categories' key of the self.feed dictionary.
and MEMCACHE_MAX_KEY_LENGTH, call the function warnings.warn with previous string and CacheKeyWarning as arguments.   for every char in key,
for every char in result of the self.add_truncation_text, called with 2 arguments: an empty string and truncate.
for every character in name,
for every check in checks,
for every child in node.childNodes,
for every obj in result of the method self.queryset.all.   for every choice in self.field.choice_cache,
for every choice in value,
for every chunk in content.chunks function return value,
for every chunk in field_stream,
for every chunk in return value of the method self.chunks,
for every closable in self._closable_objects,
for every cmatch in cmatches,
for every cnt and digit in enumerated list int_part with reversed ordering of elements,
for every code in tuple with 2 elements: lang_code and generic_lang_code,
for every condition and nodelist in self.conditions_nodelists,
substitute boolean False for ignore.   for every d in object_list,
for every d in reversed list self.dicts,
for every d in self.dicts,
for every d in last element of self.dicts,
for every date_check in all_date_checks,
for every date_key in date_keys,
call the method connections.all(), perform the following for every db in the result,
for every dict_ in self.dicts,
for every digit in number coverted to a string,
for every dirpath, dirnames and filenames in the result,   for every dirname in list dirnames,
for dirname in dirs,
for dirpath, dirnames and filenames, respectively, in directory tree tuple starting from the ldir,
call the function os.walk with 3 arguments: root, topdown set to boolean True, followlinks set to self.symlinks,
for every dirpath, dirnames and locale_filenames in directory tree starting at the basedir directory.
for every domain in domains,
for every elt in source,
for every entry in os.listdir function return value called with the argument path,
for every entry in package_path,
call the method self.as_data, for every error in the result.
for every error in self.error_list,
call the method self.errors.as_data, for every error for value under the filed key of the returned dictionary,
for every event and node in self.event_stream,
for every exclude in excludes,
for every ext in extensions,
for ext in pathext,
for every ext in pathext,
for every f in return value of the return value of the method chain.from_iterable called with argument:
for every f in files,
for every f in fields,
for every f in file_field_list,
for f in file_list,
for every f in files,
for every f in filters,
concatenate opts.concrete_fields, opts.virtual_fields and opts.many_to_many, for every f in the result,
for every f in opts.fields,
for every f in opts.local_fields,
append opts.virtual_fields to opts.many_to_many, for every f in the result,
for every f in post_sql_fields,
for every f in self.instance._meta.fields,
concatenate opts.concrete_fields, sortable_virtual_fields and opts.many_to_many, for every f in sorted result,
for f in sorted list of the files in the self.path directory,
call the method error.items, for every field and error_list in the result,
for every field, error_list in self.error_dict.items method return value,
for every field, errors in self.error_dict.items method return value,
call the method self.items, for every field and errors in the result.
for every field, initial and data in list of tuples tuple containing elements of self.fields, initial and data, respectively,
call the function errors.error_dict.items, for every field and messages in the result,
for every field, messages in return value of the message.items method,
for every field in return value of the function _parse_date_fmt,
for every field in concrete_model._meta.local_fields,
for every field in concrete_model._meta.many_to_many,
for every field in model._meta.fields,
for every field in model._meta.many_to_many,
for every field in self.fields,
call the method self.fields.values, for every field in result,
substitute the result for value under the NON_FIELD_ERRORS key of the form._errors dictionary.   for every field in unique_check,
error_class, label_suffix and empty_permitted.   for every field_name in self.fields,
for every field_node in return value of the method node.getElementsByTagName with an argument string 'field'.
for every file in value under the 'files' key of the options dictionary.
for every filename is filelist,
for every filename in filenames,
for every filename in files,
for every filename in gen_filenames(),
for every filenam in locale_filenames,
call the method self.get_template_sources with 2 arguments template_name and template_dirs, for every filepath in the result,
for every finder in sys.meta_path,
for every first_select in return value of the function _parse_date_fmt.
for every fixture_dir in fixture_dirs,
for every fixture_file, fixture_dir and fixture_name in return value of the method self.find_fixtures called with an argument fixture_label,
for every fixture_label in fixture_labels,
call the method constant_re.findall with an argument t.contents, for every fmatch in the result,
for every fname in filelist,
if fname is contained in self._list_cache_files method return value,
for every form in self.extra_forms,
for every form in self.initial_forms,
for every form in self.saved_forms,
and form is not contained in forms_to_delete, substitute the resulting list for valid_forms.   for every form in valid_forms,
for every form in valid_forms,
for every format in BUILTIN_SERIALIZERS,
for every format in self.input_formats,
for every format in settings.SERIALIZATION_MODULES,
for every formset in formsets,
for every frag in name.
for every func and args in self.filters,
for every func and unused in filter_expr.filters,
for every func in self.response_fixes,
for every h in handlers,
for every h in elements of logger.handlers list,
for every handler in handlers,
for every handler in self._upload_handlers,
for every header in list of strings compiled by splitting string cc_delim_re with value under the key 'Vary' of response dictionary as a delimiter.
for every header in headerlist,
split ip_str into parts by ':', for every hextet in the result,
for every hextet in new_ip,
for every hook in sys.path_hooks,
for every i and tuple containing dirpath and f, in enumerated list of locations,
for every i and tuple containing 2 elements: seconds and name, in enumerated chunks,
for every i and arg in enumerated iterable args,
for every i and char in enumerated text,
for every i and choice in enumerated iterable self.choices,
for every i and ext in enumerated iterable ext_list,
for every i and field in enumerated iterable self.fields,
and third element of the result of the function sys.exc_info.   for every i and handler in enumerated iterable handlers,
for every i and handler in enumerated iterator self._upload_handlers,
for every i and item in enumerated iterable values,
for every i and line in enumerated iterable lines,
for every i and line in enumerated iterable table_output,
call the function force_text with an argument formatstr, use the result as an argument for the call to the method,
for every i and row in enumerated result of the method connection.introspection.get_table_description called with arguments: cursor and table_name,
for every i and v in enumerated iterable value,
iterate each element i of the array of bytes of sc starting from the index 8
loop through shellcode converted into a bytearray
iterate i over 96 random numbers between 1 and 128
iterate i over 96 random numbers between 32 and 128
for every i in sequence of integers, from 0 to the result of the method self.total_form_count,
iterate i over a range between 1 and the value repeat+1
initialize a for loop with an iterator i with a range starting from 16 until the length of shellcode with a step of 2
iterate i over a sequence of number from 2 to 10
initialize a for loop with an iterator i with a range starting from 3 until the value of val1
initialize a for loop with an iterator i with a range starting from 8 until the length of sh with a step of 4
for every ip in tuple containing 3 elements: self._ipython, self._ipython_pre_100 and self._ipython_pre_011,
get the value under the if iso_input not in val key of the ISO_INPUT_FORMATS dictionary, if it doesnt exists return an empty tuple,
infos, 'INFOS'   for every issues and group_name in sorted_issues,
zip elements of result and result_args into a list of tuples, for every item and args in the result,
for every item in elt,
for every item in self.items,
for every item in sequence,
call the function six.iteritems with an argument dict_, for every item in the result,
for every item in sorted_items,
for every item in values,
call the Parser object with stream and self._boundary, for every item_type, meta_data and field_stream in return value,
iterate each element j of the array of bytes of sc starting from the index 1
declare a for loop with an iterator j for each element in sh starting from index 2 converted into a bytearray
initialize a for loop with an iterator j with a range starting from 1 until the value of val2
iterate j over a sequence of number from 4 to 12
dictionary containing element v for k.   for every k and list_ in return value of the method self.lists,
call the method data.items, for every k and v in the result,
for every k and v in return value of the function defaults.items,
for every k and v in return value of the ret.items function,
call the method self._iteritems, for every k and v in the result,
for every k and v in self.choices,
call the method six.iteritems with an argument dict_, for every k and v in the result,
call the function six.iteritems with an argument kwargs, for every k and v in the result,
for every k in doomed,
for every k in keys,
for every k2 and v2 in v,
and lambda function with 3 arguments context, x and y, returns boolean True if x.eval(context) or y.eval(context) is True, for 'or',   result of the function inflix called with 2 arguments, integer 7,   and lambda function with 3 arguments context, x and y, returns boolean True if x.eval(context) and y.eval(context) is True for 'and',   result of the function prefix called with 2 arguments, integer 8,   and lambda function with 2 arguments context and x, returns boolean True if x.eval(context) is True for 'not',   result of the function inflix called with 2 arguments, integer 9,   and lambda function with 2 arguments context and x, returns boolean True if x.eval(context) is contained in y.eval(context) for 'in',   result of the function inflix called with 2 arguments, integer 9,   and lambda function with 2 arguments context and x, returns boolean True if x.eval(context) is not contained in y.eval(context),   for 'not in', result of the function inflix called with 2 arguments, integer 10,   and lambda function with 3 arguments context, x and y, returns boolean True if x.eval(context) equals y.eval(context) for '=',   result of the function inflix called with 2 arguments, integer 10,   and lambda function with 3 arguments context, x and y, returns boolean True if x.eval(context) equals y.eval(context) for '==',   result of the function inflix called with 2 arguments, integer 10,   and lambda function with 3 arguments context, x and y, returns boolean True if x.eval(context) doesnt equals y.eval(context) for '!=',   result of the function inflix called with 2 arguments, integer 10 and,   lambda function with 3 arguments context, x and y, returns boolean True if x.eval(context) is greater than y.eval(context) for '>',   result of the function inflix called with 2 arguments, integer 10 and and lambda function with 3 arguments context, x and y,   returns boolean True if x.eval(context) is greater than or equal to y.eval(context) for '>=',   result of the function inflix called with 2 arguments, integer 10 and and lambda function with 3 arguments context, x and y,   returns boolean True if x.eval(context) is smaller than y.eval(context) for '<',   result of the function inflix called with 2 arguments, integer 10 and and lambda function with 3 arguments context, x and y,   returns boolean True if x.eval(context) is smaller than or equal to y.eval(context) for '<=',   call the function OPERATORS.items, for every key and op in result,
for every key and value in data,
for every key and value in data.items method return value,
for every key and value in data.items function return value,
for every key and value in items of dictionary self,
for every key and value in list created out of the elements of the result of the call to the method attrs.items,
for every key and value in items of other_dict dictionary,
for every key and value in return value of the parse_qsl with 3 arguments: query_string is it exists or an empty string if not,
for every key and value in parse_gsl with query_string is it exists or an empty string if not and keep_blank_values set to boolean True.
call the function six.iteritems with an argument kwargs, for every key and value in the result,
for key and value in return value of the six.iterlists function called with an argument self,
for key and value in result of the function six.iterlists called with an argument,
call the method other_dict.lists, for every key and value_list in result,
for every key in return value of the method c.keys call,
for every key in keys,
for every key in self,
for every key is self.bad_cookies,
for every key in self.keyOrder,
for every key in sorted list of user_settings,
for every key_value in natural,
for every key_value in related,
for every label in app_labels,
for every label in labels,
for every ldir in dirs,
for m in merge_migrations append m.ancestry to a list, zip the resulting list into tuples of pairs, for every level in result,
for every lib in builtins,
for every line in chunk_buffer,
split content by newline character, for every line in result,
split header string at string '\r\n', for every line in result,
split msgs by newline characters, for every line in result,
for every line in return value of the method self.handle_inspection called with an argument options,
for every line in sequence_sql,
call the method text.splitlines with an argument boolean True, for every line in the result,
for every lineno and line is enumerated result of the method content.splitlines, called with an argument boolean True,
for every loader in self._loaders,
for every loader in self.loaders,
for every loader in template_source_loaders,
for every loader_name in settings.TEMPLATE_LOADERS,
for every loc in locales,
for every locale in locales,
reverse settings.LOCALE_PATHS element order, for every localedir in the result,
for every location in format_locations,
for every log in existing,
for every lookup and arg in args,
for every match in matches,
get the value under the state key of the regexes dictionary, call the method finditer on the result with 2 arguments: text and start,
call the method tag_re.finditer with an argument self.template_string, for every match in result,
for every matches, pat and defaults in return value of the method pattern.reverse_dict.getlist called with an argument name,
call the method data.items, for every medium and paths in the result.
for every medium in extend,
for every member in members,
for every message in email_messages,
for every message in email_messages:
for every message is message,
for every message in messages,
for meta_line in return value of the method self.get_meta called with an argument table_name.
for every middleware_method in self._exception_middleware,
for every middleware_method in self._request_middleware,
for every middleware_method in self._response_middleware,
for every middleware_method in self._template_response_middleware,
for every middleware_method in self._view_middleware,
for every middleware_path in settings.MIDDLEWARE_CLASSES:
use it as an argument for the call to the method self.style.MIGRATE_HEADING, write the result to self.stdout.   for every migration in app_migrations,
for every migration in merge_migrations,
use it as an argument for the call to the method self.style.MIGRATE_HEADING, write the result to self.stdout.   for every migration in merge_migrations,
write it to self.stdout.   for every migration in migrations_to_squash,
for every migration in migrations_to_squash,
for every migration_name in migration_names,
for every model in app_models,
for every model in model_list,
for model in model_list,
for every model in not_installed_models,
for every model in return value of the function router.get_migratable_models, called with arguments:
for model in router.get_migratable_models method return value, called with 3 arguments: app_config, connection.alias,
for model in return value of the method router.get_migratable_models with arguments app_config, connection.alias,
call the method app_list.items, use the result as an argument for the call to the function sort_dependencies, for every model in result,
call the function get_format_modules with an argument lang, for every module in the result,
for every module in templatetags_modules,
for every module_to_search in args,
substitute the result for commands_dict.   for every name and app in return value of the function six.iteritems calle with return argument of function get_commands as an arugment,
call the function  six.iteritems with an argument blocks, for every name and block in result,
call the method self.fields.items, for every name and field in return value,
call the method self.fields.items, for every name and field in result,
call the method self.fields.items, for every name and field in the result,
call the method lexer.lex with an arguments js, for every name and tok in the result,
for every name and value in items of props dictionary,
for every name and value in return value of the method self.extra_headers.items,
for every name in bits from the start index 1 to the end index negative 2,
for name in attributes of models_signals object,
for every name in filters,
for every name in formatters,
for every name in handlers,
for every name in loggers,
for every name in MEDIA_TYPES,
for every name in namelist,
for every name in pattern.reverse_dict,
for every name in self.fields,
for every name in sorted value under the app key of the commands_dict dictionary,
sort elements of handlers, for every name in result,
and dictionary created by applying defaults mapping on the pattern.default_kwargs dictionary.   for every namespace and tuple containing: prefix and sub_pattern, in return value of the method pattern.namespace_dict.items,
for every node in compiled_parent.nodelist,
for every node in return value of the graph.leaf_nodes method called with the app_name argument,
for every node in nodelist,
for every node in self,
for every node in self.nodelist,
for every node in self.nodelist_empty,
for every node in self.nodelist_loop,
for every node_app and node_name in migration.branch,
for every o in opts,
loop from 0 to 256
and ignorenonexistent set to self.ignore, substitute the result for objects.   for every obj in objects,
for every obj in PythonDeserializer called with arguments objects and unpacked dictionary options,
for every obj in return value of the PythonDeserializer created with 2 arguments: return value of the function yaml.load,
for every obj in queryset,
for every obj in result of the method queryset.iterator,
for every obj in result of the call to the method self.queryset.all,
for every opening and closing in WRAPPING_PUNCTUATION,
use it as an argument for the call to the method self.style.MIGRATE_HEADING, write the result to self.stdout.   for every operation in migration.merged_operations,
write the result to self.stdout.   for every operation in migration.operations,
get the value under the root key of the convert dictionary, for every opname and opfunc in the result,
assign the result to opts and new_class._meta.   for every opt in list containing 3 elements: strings 'fields', 'exclude' and 'localized_fields',
dest set to string 'no_color' default set to boolean False and help set to a string "Don't colorize the command output.".   for every opt in self.option_list,
called with an argument option_value, append the result to output.   for every option in option_label,
sort the result and substitute it for options.   for every option in options,
call the function chain with arguments self.choices and choices, for every option_value and option_label in the result,
for every p in parts without the first element,
for every p in path,
for every p in plist,
for every part in parts,
for every part in plural,
and trimmed and result of the function join_tokens called with 2 arguments: plural and trimmed, write the result to out.   for every part in singular,
and trimmed, write the result to out.   for every part in singular,
call the function all_locale_paths, for every path is the result,
for every path in collect,
for every path in data,
for every path in format_module_path,
pyinotify.IN_MOVED_FROM, pyinotify.IN_MOVED_TO and pyinotify.IN_CREATE, store the result in mask.   for every path in return value of the call to the function gen_filenames with argument only_new set to boolean True,
for every path in paths,
for every path in self.locale_paths,
for every path_to_remove in self.paths_to_remove,
for every pattern in allowed_hosts:
for every pattern in reversed list self.url_patterns,
for every pattern in self.url_patterns,
for every pk in value,
for every plan_node in return value of the graph.forwards_plan method called with node as argument.
for every pos and elt in enumerated iterable source,
substitute the fitst element of the result for prefix_norm and prefix_args, respectively.   for every possibility, pattern and defaults in possibilities,
for every post_callback in self._post_render_callbacks,
for every potfile in potfiles,
call the function get_standard_processors, append processors to the result, for every processor is the result,
for every program in programs,
for every punctuation in TRAILING_PUNCTUATION,
for every pythonrc in tuple containing 2 elements: return value of the function os.environ.get called with a string "PYTHONSTARTUP",
for every receiver, _ and _ in receivers,
for every reference and receivers in return value of the call of obj.unresolved_references.items method,
for every refto and refs in return value of references.items method.
for every refto and refs in return value of the method references.items,
for every regex in tuple with 3 elements: RFC1123_DATE, RFC850_DATE and ASCTIME_DATE,
return value of the function smart_text with return value of the method value._get_pk_val as an argument for 'pk'.   for every relobj in iterator generated from the field.name attribute of the obj object.
for every renamed_method in cls.renamed_methods,
call the function unicodedata.normalize with 2 arguments: string 'NFKD' and thousand_sep, put the result and thousand_sep into a set,
for every result and params in possibility,
for every resultclass in resultclasses,
for every role in termcolors.PALETTES list at the index termcolors.NOCOLOR_PALETTE,
for every root, dirs and files in subdirectory tree starting from the base dir template_dir,
for root, dirs and files in sorted list of the directory tree starting from the directory self.path,
for every root in settings.ALLOWED_INCLUDE_ROOTS,
for every shell in available_shells,
for every site in sites,
if site is contained in sites1,
for every slots_var in slots,
for every smigration in migrations_to_squash,
for every sql in custom_sql,
for every sql in index_sql,
for every sql in sql_list,
for every sql_file in sql_files,
call the method states.items, for every state and rules in the result,
tablename and return value of the function force_text called with an argument e, respectively.   for every statement in index_output,
for statements is sql,
for every statements in sql_statements:
for every sub_stream in boundarystream,
for every sublist in second_item,
for every subnode in node,
call the method self.field.widget.subwidgets with 3 arguments: self.html_name, return value of the method self.value and attrs,
for every supported_code in _supported,
instantiate Lexer class with 2 argumets src and origin, call the method tokenize from it, for every t in the result,
get the type of res, call the method mro on the result, for every t in the result,
for every table_name in return value of the method connection.introspection.table_names called with an argument cursor,
for every tablename in tablenames,
for every tag in open_tags,
for every taglib in bits without the first element,
for every template_dir in template_dirs,
for every template_name in template_name_list,
for every app_config in result of the method apps.get_app_configs, append the resulting list to templatetags_modules_candidates.   for every templatetag_module in templatetags_modules_candidates,
for every tok in rules,
call the method resultclass.mro, reverse the order of elements, for every type_ in the result.
for every uclass, unique_check in all_unique_checks,
for every v in self.validators,
and code set to an string 'required'.   for every val in value,
for every o in opts.   for every val in value,
joined into a string, separated by whitespaces, substitute the result for loopvars.   for every var in loopvars,
for every var in self.vars,
for every w in self.widgets,
call the method self.get_renderer with 4 arguments: name, value, attrs and choices, for every widget in result,
for every bwidget in self.widgets,
for every widget in self.widgets:,
zip val1 and va2 into list of tuples, for every x and y in the result,
split arg by ':', for every x in result,
loop through the variable code converted into a bytearray using an iterator x
loop through the variable decoded_shell converted into a bytearray using an iterator x
loop through the variable decoded_shellcode converted into a bytearray using an iterator x
loop through the variable encoded_shell converted into a bytearray using an iterator x
loop through sc converted into a bytearray
Make a for loop for each x in the bytearray of sc2
iterate x over the array of bytes of the string sh4
iterate over x in the array of bytes of the string shellcode
loop through the variable shellcode converted into a bytearray using an iterator x
loop through the variable y converted into a bytearray using an iterator x
loop through decoded_shellcode converted into a bytearray
loop through encded_shellcode converted into a bytearray
loop through the variable shellcode converted into a bytearray using an iterator y
loop through f converted into a bytearray
loop through shellcode converted into a bytearray
substitute force_text for force_str.
substitute force_text for force_unicode.
foreground is a dictionary created with elements: x appended to a string '3' for value under the key x of color_names dictionary,
call the method self.error_class with an argument list with a element: result of the method self.get_form_error,
call the method self.error_class with an argument list with one element, return value of the method self.get_form_error,
append self.fk.name to form._meta.fields.
form._meta.fields is a list created out of form._meta.fields elements.
call the method form.add_prefix with an argument self._pk_field.name,
use the result as an key to get the value of the form.data dictionary, assign it value None.   call the method form.add_prefix with an argument self.fk.name,
value under the DELETION_FIELD_NAME key of the form.fields is an instance of BooleanField class, created with 2 arguments:
value under the name key of the form.fields dictionary is an instance of InlineForeignKeyField created with 2 arguments:
value under the ORDERING_FIELD_NAME key of the form.fields is an instance of IntegerField class, created with 3 arguments:
value under the ORDERING_FIELD_NAME key of the form.fields is an instance of IntegerField class, created with 2 arguments:
value under the self._pk_field.name key of form.fields dictionary is an instance of ModelChoiceField class,
call the function form.save_m2m.
call the method form.save_m2m.
substitute save_m2m for form.save_m2m.
form is an instance of ManagementForm class, created with 3 arguments: auto_id as self.auto_id, prefix as self.prefix,
form is an instance of ManagementForm class, created with 3 arguments: self.data, auto_id as self.auto_id and prefix as self.prefix.
explicitly is prohibited."   call the function modelform_factory with 10 arguments: model, form as form, fields as fields, exclude as exclude,
call the function empty_form with 3 arguments: auto_id as self.auto_id, prefix set to the return value of the self.add_prefix method,
call the method self.form with unpacked dictionary defaults as an argument, substitute it for form.
substitute i-th element of self.forms for form.
call the method _construct_form from the base class of the class BaseInlineFormSet, with 2 arguments: i,
form_class_attrs is a dictionary with 2 entries: Meta for 'Meta' and formfield_callback for 'formfield_callback'.
substitute value under the field key of the self.fields dictionary for form_field.
assign the value of the dictionary color_settings under the key role to format, if key doesnt exist assign the empty dictionary.
call the function force_str with an argument: default if it is true, or if not, first element of the result of the function,
call the function force_str with an argument: default if it is true, or if not, first element of the result of the function,
call the function force_str with an argument: default if it is true, or if not, first element of the result of the function,
append string '0' to format_0x
append string '0xxx' to format_0x
append the string ","  and encoded_instruction_in_hex to format_0x
append the string ","  and the variable encoded_instruction_in_hex to format_0x
append  the variable encoded and string "," to format_0x
initialize the variable format_0x to an empty string
format_key is a string 'DATE_INPUT_FORMATS'.
format_key is a string 'DATETIME_INPUT_FORMATS'.
format_key is a string 'TIME_INPUT_FORMATS'.
append string 'django.conf.locale.%s' to format_locations.
concatenate path and string '.%s', append the result to format_module_path.
format_locations is an empty list.
format_module_path is a list containing an element format_module_path.
substitute settings.FORMAT_MODULE_PATH for settings.FORMAT_MODULE_PATH.
format_slash_x is an empty string
initialize format_slash_x as a string 
call the function force_str with an argument format_type, substitute the result for format_type.
append string '0x' to formatted
initialize formatted to an empty string
sort elements formatted, join them in the list separated with newline character, substitute the result for formatted.
if e.is_serious method evaluates to true, call the function color_style, on the result call the method ERROR with result of the  force_str called with an argument e, if not call the function color_style on the result call the method ERROR with result of the  force_str called with an argument e, for every e in issues, formatted is a tuple containing the previous result.
replace every occurrence of '\n' in subject with '\\n' and replace every occurrence of '\r' in subject with '\\r',
remove config dictionary element under 'formatter' key, if it exists substitute it for formatter, if not, formatter is None.
get the value under formatter key of dictionary under 'formatters' key of self.config dictionary, substitute the result for formatter.
call the method self.configure_filter with an argument value under name key of formatters dictionary,
get config dictionary element under 'formatters' key, if it exists substitute it for formatters, if not, formatters is EMPTY_DICT.
call the method formfield.queryset.complex_filter with an argument limit_choices_to, substitute the result for formfield.queryset.
call the method f.formfield with an argument, unpacked dictionary kwargs, substitute the result for formfield.
call the method formfield_callback with 2 arguments: f and unpacked dictionary kwargs, substitute the result for formfield.
substitute value under the field_name key of the self.fields dictionary for formfield.
remove entry under the 'formfield_callback' key of the attrs dictionary, if it exists substitute if for formfield_callback,
for every form in self call the form.as_p method, join the results in a string, separated by an empty string.
for every form in self call the form.as_table method, join the results in a string, separated by an empty string.
for every form in self call the form.as_ul method, join the results in a string, separated by an empty string.
for every i in sequence of integers from 0 to result of the method self.total_form_count, call the method self._construct_form,
substitute self.deleted_forms for forms_to_delete.
call the method form.is_valid, perform bitwise and with the result and forms_valid as operands, substitute the result for forms_valid.
forms_valid is True.
substitute fk for FormSet.fk.
can_order as can_order, can_delete as can_delete, validate_min as validate_min, validate_max as validate_max,   substitute the result for form.   substitute model for FormSet.model.
formfield_callback as formfield_callback, widgets as widgets, localized_fields as localized_fields, labels as labels,   help_texts as help_texts and error_messages as error_messages, substitute the result for form.   call the function formset_factory with 10 arguments: form, formset, extra as extra, min_num as min_num, max_num as max_num,
extra for 'extra', can_delete for 'can_delete', can_order for 'can_order', fields for 'fields', exclude for 'exclude',   min_num for 'min_num', max_num for 'max_num', widgets for 'widgets', validate_min for 'validate_min',   validate_max for 'validate_max', localized_fields for 'localized_fields', labels for 'labels', help_texts for 'help_texts',   and error_messages for 'error_messages'.   call the function modelformset_factory with 2 arguments: model and unpacked dictionary kwargs, substitute the result for FormSet.
found is boolean False.
get frag attribute from found object, substitute it for found.
call the method self.importer with an argument used, substitute the result for found.
found is boolean True.
call the method fp.write with an argument string '%d\n", with '%d' replaced by os.getpid function return value.
and encoding set to string 'utf-8' as arguments, with the result renamed to fp, perform the following:   call the method fp.write with an argument content.
write data to fp.
with the result renamed to fp, perform the following:   call the method fp.write with an argument msgs.
with the result renamed to fp, perform the following:   write msgs to fp.
with the result renamed to fp, perform the following:   call the method fp.write with an arguments src_data.
remover 'file' key from the kwargs dictionary, if it exists substitute it for fp, if not substitute sys.stdout for fp.
fp is a instance of a class six.BytesIO.
fp is a instance of a class six.StringIO.
call the method sys._getframe with an argument 1, substitute the result for frame.
from __future__ import absolute_import into default name space.
from __future__ import absolute_ into default name space.
from __future__ import unicode_literals into default name space.
from module __future__ import unicode_literals to default name space.
from _systemrestart import SystemRestart into default name space.
from .. import Warning, register and Tags into default name space.
from .base import CommandError into default name space.
from .html_parser import HTMLParser and HTMLParseError into default name space.
from . import Error, Tags and register into default name space.
from . import six into default name space.
from .messages import CheckMessage, Debug, Info, Warning, Error, Critical, DEBUG, INFO, WARNING, ERROR and CRITICAL into default name space.
from .registry import register, run_checks, tag_exists and Tags into default name space.
from argparse import ArgumentParser into default name space.
from binascii import Error as BinasciiError into default name space.
from collections import defaultdict into default name space.
from collections import namedtuple.
from collections import OrderedDict into default name space.
from collections import UserList into default namespace.
from copy import copy into default name space.
from ctypes.wintypes import BOOL, DWORD and HANDLE into default name space.
from ctypes import sizeof, c_ulong, c_void_p, c_int64, Structure, Union, POINTER, windll and byref into default name space.
from datetime import date as real_date and datetime as real_datetime into default name space.
from datetime import datetime into default name space.
from datetime import datetime,  timedelta and tzinfo into default name space.
from datetime import timedelta and tzinfo into default name space.
from decimal import Decimal into default name space.
from decimal import Decimal and DecimalException into default name space.
from decimal import Decimal, InvalidOperation, Context and ROUND_HALF_UP into default name space.
from django.apps import apps into default name space.
from django.apps import apps.
from django.conf.locale import LANG_INFO.
from django.conf import settings into default name space.
from django.conf import settings into default namespace,
from django.conf import settings into default namespace.
return value of the function os.path.basename called with first element of sys.argv as an argument, and second element of sys.argv.   from django.conf import settings into default namespace.
and RemovedInDjango19Warning.   from django.conf import settings into default namespace.
name for base_name, top_dir for base_directory and docs_version for 'docs_version' and autoescape set to boolean False.   from django.conf import settings into a default name space,
from django.conf import settings object to the default name space.
from django.conf import settings.
from django.conf import settings, global_settings into default name space.
from django.conf import urls into default name space,
from django.contrib.auth import get_user_model into default name space.
from django.core.cache.backends.base import InvalidCacheBackendError, CacheKeyWarning and BaseCache into default name space.
from django.core.cache.backends.base import BaseCache and DEFAULT_TIMEOUT into default name space.
from django.core.cache.backends.db import BaseDatabaseCache into default name space.
from django.core.cache import caches into default name space.
from django.core.cache import caches to the default name space.
from django.core.checks.registry import registry into default name space.
django.core.exceptions import ImproperlyConfigured, ValidationError, NON_FIELD_ERRORS and FieldError into default namespace.
from django.core.exceptions import AppRegistryNotReady into default name space.
from django.core.exceptions import DisallowedHost and ImproperlyConfigured into default name space.
from django.core.exceptions import DisallowedRedirect into default name space.
from django.core.exceptions import ImproperlyConfigured into default name space.
from django.core.exceptions import ImproperlyConfigured and DjangoRuntimeWarning into default name space.
from django.core.exceptions import ImproperlyConfigured and ViewDoesNotExist into default name space.
from django.core.exceptions import MiddlewareNotUsed, PermissionDenied and SuspiciousOperation into default name space.
from django.core.exceptions import SuspiciousFileOperation into default name space.
from django.core.exceptions import SuspiciousMultipartF into default name space.
from django.core.exceptions import ValidationError into default name space.
from django.core.exceptions import ValidationError and NON_FIELD_ERRORS into default name space.
from django.core.files.base import File into default name space.
from django.core.files.move import file_move_safe into default name space.
from django.core.files.uploadedfile import TemporaryUploadedFile and InMemoryUploadedFile into default name space.
from django.core.files.uploadhandler import StopUpload,  SkipFile and StopFutureHandlers into default name space.
from django.core.files.utils import FileProxyMixin into default name space.
from django.core.files import File into default name space.
from django.core.files import locks into default name space.
from django.core.files import locks and File into default name space.
from django.core.files import temp as tempfile into default name space.
from django.core.files import uploadhandler into default name space.
from django.core.handlers.wsgi import WSGIHandler into default name space.
from django.core.handlers import base into default name space.
from django.core.mail.backends.base import BaseEmailBackend into default name space.
from django.core.mail.backends.console import EmailBackend as ConsoleEmailBackend into default name space.
from django.core.mail.message import EmailMessage, EmailMultiAlternatives, SafeMIMEText, SafeMIMEMultipart,
from django.core.mail.message import sanitize_address into default name space.
from django.core.mail.utils import CachedDnsName and DNS_NAME into default name space.
from django.core.mail.utils import DNS_NAME into default name space.
from django.core.mail import get_connection into default name space.
from django.core.management.base import BaseCommand, CommandError, CommandParser and handle_default_options into default name space.
from django.core.management.base import AppCommand into default name space.
from django.core.management.base import BaseCommand into default name space.
from django.core.management.base import BaseCommand and CommandError into default name space.
from django.core.management.base import CommandError into default name space.
from django.core.management.base import CommandError and BaseCommand into default name space.
from django.core.management.color import color_style into default name space.
from django.core.management.color import color_style and no_style into default name space.
from django.core.management.color import no_style into default name space.
from django.core.management.commands.check import Command as CheckCommand into default name space.
from django.core.management.sql import check_for_migrations into default name space.
from django.core.management.sql import custom_sql_for_model, emit_post_migrate_signal and emit_pre_migrate_signal into default name space.
from django.core.management.sql import sql_all into default name space.
from django.core.management.sql import sql_create into default name space.
from django.core.management.sql import sql_custom into default name space.
from django.core.management.sql import sql_delete into default name space.
from django.core.management.sql import sql_destroy_indexes into default name space.
from django.core.management.sql import sql_flush into default name space.
from django.core.management.sql import sql_flush and emit_post_migrate_signal into default name space.
from django.core.management.sql import sql_indexes into default name space.
from django.core.management.templates import TemplateCommand into default name space.
from django.core.management.utils import handle_extensions, find_command and popen_wrapper into default name space.
from django.core.management.utils import find_command and popen_wrapper into default name space.
from django.core.management.utils import handle_extensions into default name space.
from django.core.management import call_command into default name space.
from django.core.serializers.base import DeserializationError into default name space.
from django.core.serializers.base import SerializerDoesNotExist into default name space.
from django.core.serializers.json import DjangoJSONEncode into default name space.
from django.core.serializers.python import Deserializer as PythonDeserializer into default name space.
from django.core.serializers.python import Serializer as PythonSerializer into default name space.
from django.core.serializers import base into default name space.
from django.core.servers.basehttp import get_internal_wsgi_application into default name space.
from django.core.servers.basehttp import run and get_internal_wsgi_application into default name space.
from django.core.servers.fastcgi import FASTCGI_HELP into default namespace.
from django.core.servers.fastcgi import FASTCGI_OPTIONS into default namespace,
from django.core.servers.fastcgi import runfastcgi into default namespace.
from django.core.signals import request_finished into default name space.
from django.core.urlresolvers import reverse, NoReverseMatch.
from django.core.urlresolvers import set_script_prefix into default name space.
from django.core.validators import EMPTY_VALUES into default name space.
from django.core.validators import validate_ipv4_address.
from django.core.wsgi import get_wsgi_application into default name space.
from django.core import checks into default name space.
from django.core import mail into default name space.
from django.core import serializers into default name space.
from django.core import signals into default name space.
from django.core import signing into default name space.
from django.core import urlresolvers into default name space.
from django.core import validators into default name space.
from django.db.backends.utils import typecast_timestamp into default name space.
from django.db.migrations.autodetector import MigrationAutodetector into default name space.
from django.db.migrations.executor import MigrationExecutor into default name space.
from django.db.migrations.loader import AmbiguityError into default name space.
from django.db.migrations.loader import MigrationLoader into default name space.
from django.db.migrations.loader import MigrationLoader and AmbiguityError into default name space.
from django.db.migrations.optimizer import MigrationOptimizer into default name space.
from django.db.migrations.questioner import MigrationQuestioner and InteractiveMigrationQuestioner into default name space.
from django.db.migrations.state import ProjectState into default name space.
from django.db.migrations.writer import MigrationWriter into default name space.
from django.db.migrations import Migration into default name space.
from django.db.models.fields.related import ManyToManyField.
from django.db.models.fields.related import RelatedObject into default namespace.
from django.db.models.fields import Field as ModelField.
from django.db.models import AutoField, OneToOneField and ForeignKey.
from django.db.models import ForeignKey.
from django.db.utils import DatabaseError into default name space.
from django.db import connections, router, transaction, DEFAULT_DB_ALIAS, IntegrityError and DatabaseError into default name space.
from django.db import connection into default name space.
from django.db import connections and DEFAULT_DB_ALIAS into default namespace.
from django.db import connections and DEFAULT_DB_ALIAS into default name space.
from django.db import connections,  DEFAULT_DB_ALIAS and migrations into default name space.
from django.db import connections, router, transaction and DEFAULT_DB_ALIAS into default name space.
from django.db import connections,  router,  transaction and DEFAULT_DB_ALIAS into default name space.
from django.db import connections, router, transaction, models and DEFAULT_DB_ALIAS into default name space.
from django.db import connections and transaction into default name space.
from django.db import connections, transaction, router and DatabaseError into default name space.
from django.db import DEFAULT_DB_ALIAS into default name space.
from django.db import models into default name space.
from django.db import models into default namespace.
from django.db import models and DEFAULT_DB_ALIAS into default name space.
from django.db import models and router into default name space.
from django.db import router and DEFAULT_DB_ALIAS into default name space.
from django.dispatch import receiver into default name space.
from django.dispatch import Signal into default name space.
from django.forms.extras.widgets import SelectDateWidget into default name space.
from django.forms.fields import everything into default name space.
from django.forms.fields import Field and ChoiceField into default name space.
from django.forms.fields import Field and FileField into default name space.
from django.forms.fields import IntegerField and BooleanField into default name space.
from django.forms.forms import everything into default name space.
from django.forms.forms import DeclarativeFieldsMetaclass and BaseForm into default name space.
from django.forms.formsets import everything into default name space.
from django.forms.formsets import BaseFormSet and formset_factory into default name space.
from django.forms.models import everything into default name space.
Use django.forms.utils instead., RemovedInDjango19Warning and stacklevel set to an integer 2.   from django.forms.utils import everything into default name space.
from django.forms.utils import ErrorList into default name space.
from django.forms.utils import flatatt,  ErrorDict and ErrorList into default name space.
from django.forms.utils import flatatt and to_current_timezone into default name space.
from django.forms.utils import from_current_timezone and to_current_timezone into default name space.
from django.forms.widgets import TextInput, NumberInput, EmailInput, URLInput, HiddenInput, MultipleHiddenInput, ClearableFileInput,
from django.forms.widgets import SelectMultiple, HiddenInput, MultipleHiddenInput into default namespace.
from django.forms.widgets import everything into default name space.
from django.forms.widgets import HiddenInput into default name space.
from django.forms.widgets import Media,  MediaDefiningClass,  TextInput and Textarea into default name space.
from django.forms.widgets import Widget and Select into default name space.
from django.forms import Form into default name space.
from django.http.cookie import SimpleCookie into default name space.
from django.http.cookie import SimpleCookie and parse_cookie into default name space.
from django.http.multipartparser import MultiPartParser and MultiPartParserError into default name space.
from django.http.request import HttpRequest, QueryDict, RawPostDataException, UnreadablePostError and build_request_repr into default name space.
from django.http.response import HttpResponse, StreamingHttpResponse, HttpResponseRedirect, HttpResponsePermanentRedirect,
from django.http.response import REASON_PHRASES as STATUS_CODE_TEXT  # NOQA into default name space.
HttpResponseNotModified, HttpResponseBadRequest, HttpResponseForbidden, HttpResponseNotFound, HttpResponseNotAllowed, HttpResponseGone,   HttpResponseServerError, Http404, BadHeaderError, JsonResponse into default name space.   from django.http.utils import fix_location_header and conditional_content_removal into default name space.
from django.http import Http404 into default name space.
from django.http import HttpResponse into default name space.
from django.http import QueryDict into default namespace.
from django.middleware.csrf import get_token into default name space.
from django.template.base import ALLOWED_VARIABLE_CHARS, BLOCK_TAG_END, BLOCK_TAG_START, COMMENT_TAG_END, COMMENT_TAG_START,
Template, TextNode, Token, TokenParser, Variable, VariableNode, constant_string and filter_raw_string.   from django.template.base import compile_string, resolve_variable, unescape_string_literal and generic_tag_compiler.
TemplateSyntaxError and VariableDoesNotExist.   from django.template.base import Context, FilterExpression, Lexer, Node, NodeList, Parser, RequestContext, Origin, StringOrigin,
FILTER_ARGUMENT_SEPARATOR, FILTER_SEPARATOR, SINGLE_BRACE_END, SINGLE_BRACE_START, TOKEN_BLOCK, TOKEN_COMMENT, TOKEN_TEXT, TOKEN_VAR,   TRANSLATOR_COMMENT_MARK, UNKNOWN_SOURCE, VARIABLE_ATTRIBUTE_SEPARATOR, VARIABLE_TAG_END, VARIABLE_TAG_START, filter_re and tag_re.   from django.template.base import ContextPopException, InvalidTemplateLibrary, TemplateDoesNotExist, TemplateEncodingError,
from django.template.base import Library, add_to_builtins, builtins, get_library, get_templatetags_modules, get_text_list,
from django.template.base import Node, NodeList, Template, Context, Library, TemplateSyntaxError, VariableDoesNotExist,
from django.template.base import Lexer, Parser, tag_re, NodeList, VariableNode and TemplateSyntaxError into default name space.
from django.template.base import Origin,  Template,  Context and TemplateDoesNotExist into default name space.
from django.template.base import TemplateDoesNotExist into default name space.
from django.template.base import TemplateSyntaxError, Library, Node, TextNode, token_kwargs and Variable into default namespace.
from django.template.base import Variable, Library and VariableDoesNotExist into default name space.
from django.template.context import BaseContext, Context, RequestContext and ContextPopException into default namespace.
from django.template.debug import DebugLexer and DebugParser.
from django.template.defaultfilters import date into default name space.
from django.template.loader import BaseLoader into default name space.
from django.template.loader import BaseLoader, get_template_from_string, find_template_loader and make_origin into default name space.
from django.template.loader import get_template into default name space.
from django.template.loader import get_template, select_template.
validTemplateLibrary, BLOCK_TAG_START, BLOCK_TAG_END, VARIABLE_TAG_START, VARIABLE_TAG_END, SINGLE_BRACE_START, SINGLE_BRACE_END,   COMMENT_TAG_START, COMMENT_TAG_END, VARIABLE_ATTRIBUTE_SEPARATOR, get_library, token_kwargs, kwarg_re and render_value_in_context.   from django.template.smartif import IfParser and Literal into default name space.
from django.template import Lexer, TOKEN_TEXT, TOKEN_VAR, TOKEN_BLOCK, TOKEN_COMMENT and TRANSLATOR_COMMENT_MARK.
from django.template import loader,  Context and RequestContext into default name space.
from django.template import Template and Context into default name space.
from django.test.signals import setting_changed into default name space.
from django.test.utils import get_runner into default name space.
from django.test.utils import get_runner into default namespace.
from django.utils._os import npath and upath into default name space.
from django.utils._os import rmtree_errorhandle into default name space.
from django.utils._os import safe_join into default name space.
from django.utils._os import safe_join and abspathu into default name space.
from django.utils._os import upath into default name space.
from django.utils.crypto import constant_time_compare and salted_hmac into default name space.
from django.utils.crypto import get_random_string into default name space.
from django.utils.daemonize import become_daemon into default name space.
from django.utils.datastructures import MultiValueDict into default name space.
from django.utils.datastructures import MultiValueDict and ImmutableList into default name space.
from django.utils.datastructures import MultiValueDict and MergeDict into default name space.
from django.utils.dateformat import format and time_format into default name space.
from django.utils.dates import MONTHS into default name space.
from django.utils.dates import MONTHS, MONTHS_3, MONTHS_ALT, MONTHS_AP, WEEKDAYS and WEEKDAYS_ABBR into default name space.
from django.utils.deconstruct import deconstructible into default name space.
from django.utils.deprecation import RemovedInDjango19Warning into default name space.
from django.utils.deprecation import RemovedInDjango19Warning and RemovedInDjango20Warning into default name space.
from django.utils.deprecation import RemovedInDjango20Warning into default name space.
from django.utils.deprecation import RemovedInNextVersionWarning into default name space.
from django.utils.deprecation import RenameMethodsBase and RemovedInDjango19Warning into default name space.
from django.utils.encoding import force_bytes into default name space.
from django.utils.encoding import force_bytes, force_str and force_text into default name space.
from django.utils.encoding import force_bytes,  force_text,  force_str and iri_to_uri into default name space.
from django.utils.encoding import force_bytes,  force_text and iri_to_uri into default name space.
from django.utils.encoding import force_bytes and python_2_unicode_compatible into default name space.
from django.utils.encoding import force_str into default name space.
from django.utils.encoding import force_st into default name space.
from django.utils.encoding import force_str and force_text into default name space.
from django.utils.encoding import force_str,  force_text and DEFAULT_LOCALE_ENCODING into default name space.
from django.utils.encoding import force_str, force_text and iri_to_uri into default name space.
from django.utils.encoding import force_text into default name space.
from django.utils.encoding import force_text and DEFAULT_LOCALE_ENCODING into default name space.
from django.utils.encoding import force_text and filepath_to_uri into default name space.
from django.utils.encoding import force_text and force_str into default name space.
from django.utils.encoding import force_text and iri_to_uri into default name space.
from django.utils.encoding import force_text and python_2_unicode_compatible into default name space.
from django.utils.encoding import force_text and smart_text into default name space.
from django.utils.encoding import force_unicode.
from django.utils import iri_to_uri, force_bytes, force_text to the default name space.
from django.utils.encoding import python_2_unicode_compatible into default name space.
from django.utils.encoding import python_2_unicode_compatible and force_st into default name space.
from django.utils.encoding import smart_text into default name space.
from django.utils.encoding import smart_text, force_str and force_text into default name space.
from django.utils.encoding import smart_text and force_text into default name space.
from django.utils.encoding import smart_text,  force_text and python_2_unicode_compatible into default name space.
from django.utils.encoding import smart_text and is_protected_type into default name space.
from django.utils.formats import get_format into default name space.
from django.utils.formats import localize into default name space.
from django.utils.functional import allow_lazy into default name space.
from django.utils.functional import allow_lazy and SimpleLazyObject into default name space.
from django.utils.functional import cached_property into default name space.
from django.utils.functional import curry and Promise into default name space.
from django.utils.functional import lazy into default name space.
from django.utils.functional import LazyObject into default name space.
from django.utils.functional import Promise into default name space.
from django.utils.functional import total_ordering into default name space.
from django.utils.html import conditional_escape, escapejs, escape, urlize as _urlize, linebreaks, strip_tags, avoid_wrapping,
from django.utils.html import avoid_wrapping into default name space.
from django.utils.html import conditional_escape and format_html into default name space.
from django.utils.html import escape into default name space.
from django.utils.html import format_html into default name space.
from django.utils.html import format_html, format_html_join and escape into default name space.
from django.utils.html import strip_spaces_between_tags.
from django.utils.http import cookie_date into default name space.
from django.utils.http import http_date to the default name space.
from django.utils.http import urlquote into default name space.
and remove_tags.   from django.utils.http import urlquote into default name space.
from django.utils.ipv6 import clean_ipv6_address into default name space.
from django.utils.ipv6 import is_valid_ipv6_address into default name space.
from django.utils.itercompat import is_iterable into default name space.
from django.utils.jslex import prepare_js_for_gettext into default name space.
from django.utils.module_loading import import_string into default name space.
from django.utils.module_loading import module_has_submodule into default name space.
from django.utils.regex_helper import normalize into default name space.
from django.utils.safestring import SafeData, EscapeData, mark_safe and mark_for_escaping into default namespace.
from django.utils.safestring import mark_safe into default name space.
from django.utils.safestring import mark_safe and SafeData into default name space.
from django.utils.safestring import mark_safe, SafeData and mark_for_escaping into default name space.
from django.utils.safestring import SafeData and EscapeData into default name space.
from django.utils.safestring import SafeData and mark_safe into default name space.
from django.utils.six.moves.urllib.parse import quote, quote_plus, unquote, unquote_plus, urlparse, urlencode as original_urlencode.
from django.utils.six.moves.urllib.parse import parse_qsl,  urlencode,  quote,  urljoin and urlsplit into default name space.
from django.utils.six.moves.urllib.parse import quote into default name space.
from django.utils.six.moves.urllib.parse import quote, unquote, urlsplit and urlunsplit into default name space.
from django.utils.six.moves.urllib.parse import urljoin into default name space.
from django.utils.six.moves.urllib.parse import urlparse into default name space.
from django.utils.six.moves.urllib.parse import urlsplit and urlunsplit into default name space.
from django.utils.six.moves.urllib.request import urlretrieve into default name space.
from django.utils.six.moves import _dummy_thread as thread into default name space.
from django.utils.six.moves import _thread as thread into default name space.
from django.utils.six.moves import copyreg into default name space.
from django.utils.six.moves import cPickle as pickle, into default namespace.
from django.utils.six.moves import cPickle as pickle into default name space.
from django.utils.six.moves import html_entities into default name space.
from django.utils.six.moves import html_parser as _html_parse into default name space.
from django.utils.six.moves import http_cookies into default name space.
from django.utils.six.moves import input into default name space.
from django.utils.six.moves import map into default name space.
from django.utils.six.moves import reduce into default name space.
from django.utils.six.moves import socketserver into default name space.
from django.utils.six.moves import xrange into default name space.
from django.utils.six.moves import zip into default name space.
from django.utils.six import StringIO into default name space.
from django.utils.synch import RWLock into default name space.
from django.utils.text import smart_split, unescape_string_literal and get_text_list into default namespace.
from django.utils.text import get_text_list into default name space.
from django.utils.text import get_text_list and capfirst into default name space.
from django.utils.text import get_valid_filename into default name space.
from django.utils.text import normalize_newlines into default name space.
from django.utils.text import normalize_newlines and slugify as _slugify into default name space.
from django.utils.text import Truncator, wrap and phone2numeric into default name space.
from django.utils.text import unescape_entities into default name space.
from django.utils.timesince import timesince and timeuntil into default name space.
from django.utils.timezone import get_current_timezone_name to the default name space.
from django.utils.timezone import get_default_timezone, is_aware and is_naive into default name space.
from django.utils.timezone import is_aware into default name space.
from django.utils.timezone import is_aware and utc into default name space.
from django.utils.timezone import template_localtime into default name space.
from django.utils.timezone import utc and get_fixed_timezone into default name space.
from django.utils.translation import get_language into default name space.
from django.utils.translation import get_language to the default name space.
from django.utils.translation import get_language, to_locale and check_for_language into default name space.
from django.utils.translation import templatize into default namespace.
from django.utils.translation import trans_null as trans.
from django.utils.translation import trans_real into default namespace.
from django.utils.translation import trans_real as trans.
from django.utils.translation import TranslatorCommentWarning, trim_whitespace and LANGUAGE_SESSION_KEY into default name space.
from django.utils.translation import ugettext and ungettext into default name space.
from django.utils.translation import ugettext and ungettext_lazy into default name space.
from django.utils.translation import ugettext as _ into default name space.
from django.utils.translation import ugettext_lazy into default name space.
from django.utils.translation import ugettext_lazy and pgettext_lazy into default name space.
from django.utils.translation import ugettext_lazy,  ugettext as _ and pgettext into default name space.
from django.utils.translation import ugettext_lazy as _ into default name space.
from django.utils.translation import ugettext_lazy as _ and pgettext_lazy into default name space.
from django.utils.translation import ugettext_lazy as _ and ugettext into default name space.
from django.utils.translation import ugettext_lazy as _ and ungettext_lazy into default name space.
from django.utils.translation import ungettext and ugettext as _ into default name space.
from django.utils.xmlutils import SimplerXMLGenerator into default name space.
from django.utils import archive into default name space.
from django.utils import autoreload into default name space.
from django.utils import baseconv into default name space.
from django.utils import datastructures into default name space.
from django.utils import dateformat, numberformat and datetime_safe into default name space.
from django.utils import datetime_safe into default name space.
CheckboxInput, Select, NullBooleanSelect, SelectMultiple, DateInput, DateTimeInput, TimeInput, SplitDateTimeWidget,   SplitHiddenDateTimeWidget and FILE_INPUT_CONTRADICTION.   from django.utils import formats into default name space.
from django.utils import formats into default name space.
from django.utils import formats and six into default name space.
from django.utils import lru_cache into default name space.
from django.utils import six into default name space.
from django.utils import six and lru_cache into default name space.
from django.utils import six and timezone into default name space.
from django.utils import termcolors into default name space.
from django.utils import timezone into default name space.
from django.utils import timezone and six into default name space.
from django.utils import translation into default name space.
(%s) and 'can_import_settings' (%s) command options., replace '%s' with self.leave_locale_alone and self.can_import_settings.   from django.utils import translation into default namespace.
from django.utils import translation into default namespace.
django.utils import translation into default namespace.
from django.views.debug import ExceptionReporter and get_exception_reporter_filter into default name space.
from django.views import debug into default name space.
from django import http into default name space.
from django import VERSION as version into default name space.
from email.header import Header into default name space.
from email.message import Message into default name space.
from email.mime.base import MIMEBase into default name space.
from email.mime.message import MIMEMessage into default name space.
from email.mime.multipart import MIMEMultipart into default name space.
from email.mime.text import MIMEText into default name space.
from email.utils import formatdate into default name space.
from email.utils import formatdate,  getaddresses,  formataddr and parseaddr into default name space.
from email import charset as Charset, encoders as Encoders, message_from_string and generator.
from functools import lru_cache.
from functools import partial into default name space.
from functools import reduce into default name space.
from functools import total_ordering.
from functools import update_wrapper.
from functools import wraps into default name space.
from functools import wraps, update_wrapper and WRAPPER_ASSIGNMENTS into default name space.
from gzip import GzipFile into default name space.
from importlib.util import find_spec as importlib_find.
from importlib import find_loader as importlib_find.
from importlib import import_module into default name space.
from importlib import import_module.
from inspect import getargspec and getcallargs into default name space.
from io import BytesIO into default name space.
from io import BytesIO,  StringIO and UnsupportedOperation into default name space.
from io import StringIO into default name space.
from IPython.frontend.terminal.ipapp import TerminalIPythonApp into default namespace.
from IPython.Shell import IPShell into default namespace.
from IPython import start_ipython into default namespace.
from itertools import chain into default name space.
from itertools import dropwhile into default name space.
from itertools import groupby and cycle as itertools_cycle into default name space.
from itertools import product into default name space.
from lib2to3.fixer_util import find_indentation, Name, syms and touch_import into default name space.
from lib2to3.pgen2 import token into default name space.
from lib2to3.pytree import Leaf and Node into default name space.
from lib2to3 import fixer_base into default name space.
from logging.config import dictConfig.
from logging import _checkLevel.
from logging import NullHandler.
from math import ceil into default name space.
from optparse import OptionParser into default name space.
from os.path import join, normcase, normpath, abspath, isabs, sep and dirname into default name space.
from os import path into default name space.
from PIL import Image into default namespace.
from PIL module import ImageFile as PillowImageFile.
from pkg_resources import resource_string into default name space.
from pprint import pformat into default name space.
from pprint import pformat.
from shutil import copystat into default name space.
from subprocess import PIPE and Popen into default name space.
from threading import local into default name space.
from threading import Lock into default name space.
from threading import RLock.
from unittest import import everything.
from unittest2 import everything.
from UserList import UserList into default namespace.
from wsgiref.util import FileWrapper
from wsgiref import simple_server into default name space.
from xml.dom import pulldom into default name space.
from xml.sax.expatreader import ExpatParser as _ExpatParser into default name space.
from xml.sax.saxutils import XMLGenerator into default name space.
from xml.sax import handler into default name space.
yaml import CSafeDumper as SafeDumper into default name space.
from yaml import CSafeLoader as SafeLoader into default name space.
from yaml import SafeLoader, SafeDumper into default name space.
call the function sanitize_address with arguments email_message.from_email and email_message.encoding, substitute the result for from_email.
call the function sys.getfilesystemencoding, if it evaluates to true, substitute the result for fs_encoding,
call the function sys.getfilesystemencoding if it evaluates to true, substitute its result for fs_encoding,
join self.path and f in path, substitute the result for full_file.
concatenate package_name, string '.' and module_name, substitute it for full_module_name.
substitute result of the self.path function with argument name for full_path.
call the method self.path with argument name, substitute the result for full_path.
replace %s in string '    %s%s' with: line and character ',' if i is lesser than length of table_output decremented by one,
or with an empty string if its not, append the resulting string to full_statement.   append string ');' to full_statement.
full_statement is a list containing: string "CREATE TABLE %s (", where %s is replaced by result of the function qn called with an argument tablename.
substitute doc for func.__doc__.
call the function func with an argument path.
get the '_decorated_function' attribute from func object, if it exists substitute it for func.
call the function import_string with an argument path, substitute the result for func.
function-based loader.", where '%s' is replaced with loader.   substitute TemplateLoader for func.
func is an instance of TemplateLoader class, created with unpacked list args.
if name is true, substitute it for function_name, if not get attribute '_decorated_function' from func object,
if name is true, substitute it for function_name, if not get '_decorated_function' attribute from func object, if it exists,
call the method g.flatten with arguments self and unixfrom set to unixfrom.
strip g of '"' from both ends,
strip g of "'" from both ends,
g is an instance of a class generator.BytesGenerator called with fp and mangle_from_ set to False.
g is an instance of a class generator.Generator called with fp and mangle_from_ set to False.
call the method imatch.group with an argument integer 1, substitute the result for g.
call the method one_percent_re.sub with 2 arguments: string '%%' and g, substitute the result for .
move integer 1 left for 30 bits, substitute the result for GB.
split lang_code by character '-', substitute the first element of the result for generic_lang_code.
split lang_code by '-', substitute the first element of the result for generic_lang_code.
get is a string '<could not parse>'.
get is a tuple containing elements generated by the call to the function pformat with an argument GET_override,
call the function get_callable.cache_clear.
call the function lazy with 4 arguments: get_format, six.text_type, list and tuple, substitute the result for get_format_lazy.
call the method operator.attrgetter with an argument _func_closure, substitute the result for get_method_closure.
call the method operator.attrgetter with an argument _func_code, substitute the result for get_method_code.
call the method operator.attrgetter with an argument _func_defaults, substitute the result for get_method_defaults.
call the method operator.attrgetter with an argument _func_globals, substitute the result for get_method_globals.
substitute changeset for get_git_changeset.cache.
get_language is a lambda function returning settings.LANGUAGE_CODE.
get_language_bidi is lambda function returning boolean True if settings.LANGUAGE_CODE is contained in settings.LANGUAGES_BIDI.
call the method operator.attrgetter with an argument _meth_func, substitute the result for get_method_function.
call the method operator.attrgetter with an argument _meth_self, substitute the result for get_method_self.
call the function get_ns_resolver.cache_clear.
call the function get_resolver.cache_clear.
call the method get_supported_language_variant.cache_clear.
separated by result of the function _ called with an argument string ', ', for every i in list_ without last element,   result of the function force_text called with an argument last_word, result of the function force_text called with an argument:   last element of list_.   call the function allow_lazy with 2 arguments: get_text_list and six.text_type, substitute the result for get_text_list.
call the function allow_lazy with 2 arguments: get_valid_filename and six.text_type, substitute the result for get_valid_filename.
name appended to string '_', as the name of the attribute to get from self object, or if the previous doesnt exist, None.   append name to 'add_' use it as the name of the attribute to get from combined object , call the result with an argument:
append name to 'add_' use it as the name of the attribute to get from combined object , call the result with an argument:
append name to string 'add_' use it as the name of the attribute to get from object self, call the result as an function,
get attribute 'error_dict' from the self object.
call the function getcallargs with an argument current,
substitute logging.getLogger for getLogger.
substitute tempfile.gettempdir for gettempdir.
gettext._translations is an empty dictionary.
call the function lazy with 2 arguments: gettext and str, substitute gettext_lazy.
call the method gettext_module.GNUTranslations.__init__ with an argument self.
substitute gettext for gettext_noop, gettext_lazy and _.
call the function get_git_changeset, store the result in git_changeset.
call the subprocess.Popen function with, 'git log --pretty=format:%ct --quiet -1 HEAD', stdout set to subprocess.PIPE,
declare that we use global variables cached_modules and _cached_filenames in this function.
use global variable _default.
use global variables _format_cache and _format_modules_cache.
use global variable _localtime.
use the global variables _mtimes and _win in this function.
use the global variable _serializers.
use global variable _standard_context_processors.
use global variable _supported.
use global variable _translations.
use global variable invalid_var_format_string.
use global variable template_source_loaders.
use global variable templatetags_modules.
get the value under the settings.__module__ key of the sys.modules dictionary, use its __file__ field as an argument,
got_request_exception is a instance of a Signal class, created with an argument providing_args as the list containing string 'request'.
substitute loader.graph for graph.
groupid is a string "t%d" formated with tok.id.
append ext to guessed_filename.
get the value under the 'filename' key of the params dictionary, if the key exists substitute it for guessed_filename,
substitute used_name for guessed_filename.
join tempdir and guessed_filename into a file path, substitute it for guessed_path.
covert to string value under the 'unique_id_is_permalink' key of the item dictionary, convert it to lowercase,
guid_attrs is an empty dictionary.
h is the sum of y and x modulo 128
h is the sum of y and x modulo 2
h is the sum of y and z modulo 256
and args, respectively.   call the method handle_default_options with an argument options.
call the function handle_default_options with an argument options.
call the function handle_m2m with an argument relobj.
call the method handler.addQuickElement with 2 arguments: string 'published' and result of the function rfc3339_date,
call the method handler.addQuickElement with 2 arguments: string 'updated' and result of the function rfc3339_date,
call the method handler.addQuickElement with 3 arguments: string 'atom:link', None and dictionary with 2 entries: 'self' for 'rel',
call the method handler.addQuickElement with an argument string "author", "%s (%s)",
call the method handler.addQuickElement with 2 arguments: string 'author' and value under the 'author_email' key of the item dictionary.
call the method handler.addQuickElement with 3 arguments: string 'category', an empty string and a dictionary with an entry:
call the method handler.addQuickElement with 3 arguments: string 'link', an empty string and a dictionary with an entry:
call the method handler.addQuickElement with 2 arguments: string "category" and cat.
call the method handler.addQuickElement with 2 arguments: string 'category' and cat.
call the method handler.addQuickElement with 2 arguments: string 'comments' and value under the 'comments' key of the item dictionary.
call the method handler.addQuickElement with 2 arguments: string 'copyright' and value under the 'feed_copyright' key of the self.feed dictionary.
call the method handler.addQuickElement with 3 arguments: string 'dc:creator',
call the method handler.addQuickElement with 2 arguments: string 'description' and value under the 'description' key of item dictionary.
call the method handler.addQuickElement with 2 arguments: string 'description' and value under the 'description' key of the item dictionary.
call the method handler.addQuickElement with 2 arguments: string 'description' and value under the 'description' key of the self.feed dictionary.
call the method handler.addQuickElement with 2 arguments: string 'email' and value under the 'author_email' key of the item dictionary.
call the method handler.addQuickElement with 2 arguments: string 'email' and value under the 'author_email' key of the self.feed dictionary.
call the method handler.addQuickElement with 3 arguments: string 'title', an empty string and a dictionary with 3 entries:
substitute the result for value under the 'isPermaLink' key of the guid_attrs dictionary.   call the method handler.addQuickElement with 3 arguments: string 'guid', value under the 'unique_id' key of the item dictionary,
self' for 'rel' and value under the 'feed_url' key of self.feed dictionary for 'href'.   call the method handler.addQuickElement with 2 arguments: string 'title' and value under the 'title' key of the self.feed dictionary.
call the method handler.addQuickElement with 2 arguments: string 'id' and unique_id.
call the method handler.addQuickElement with 2 arguments: string 'language' and value under the 'language' key of the self.feed dictionary.
call the method handler.addQuickElement with 2 arguments: string 'lastBuildDate' and result of the function rfc2822_date,
call the method handler.addQuickElement with 3 arguments: string 'link', an empty string and a dictionary with 4 entries:
call the method handler.addQuickElement with 3 arguments: string 'link', an empty string and a dictionary with 2 entries:
call the method handler.addQuickElement with 3 arguments: string 'link', an empty string and a dictionary with 2 entries:
call the method handler.addQuickElement with 3 arguments: string 'link', an empty string and a dictionary with 2 entries:
call the method handler.addQuickElement with 2 arguments: string 'link' and value under the 'link' key of the item dictionary.
call the method handler.addQuickElement with 2 arguments: string 'link' and value under the 'link' key of the self.feed dictionary.
call the method handler.addQuickElement with 2 arguments: string 'name' and value under the 'author_name' key of the item dictionary.
call the method handler.addQuickElement with 2 arguments: string 'name' and value under the 'author_name' key of the self.feed dictionary.
call the method handler.addQuickElement with 2 arguments: string 'pubDate' and result of the function rfc2822_date,
call the method handler.addQuickElement with 2 arguments: string 'rights' and value under the 'item_copyright' key of the item dictionary.
call the method handler.addQuickElement with 2 arguments: string 'rights' and value under the 'feed_copyright' key of the self.feed dictionary.
call the method handler.addQuickElement with 2 arguments: string 'subtitle' and value under the 'subtitle' key of the self.feed dictionary.
call the method handler.addQuickElement with 3 arguments: string 'summary', value under the 'description' key of item dictionary,
call the method handler.addQuickElement with 2 arguments: string 'title' and value under the 'title' key of the item dictionary.
call the method handler.addQuickElement with 2 arguments: string 'title' and value under the 'title' key of the self.feed dictionary.
call the method handler.addQuickElement with 2 arguments: string 'ttl' and value under the 'ttl' key of the item dictionary.
call the method handler.addQuickElement with 2 arguments: string 'ttl' and value under the 'ttl' key of the self.feed dictionary.
call the method handler.addQuickElement with 2 arguments: string 'updated' and result of the function rfc3339_date,
call the method handler.addQuickElement with 2 arguments: string 'uri' and value under the 'author_link' key of the item dictionary.
call the method handler.addQuickElement with 2 arguments: string 'uri' and value under the 'author_link' key of the self.feed dictionary.
call the method handler.endElement with an argument string 'author'.
call the method handler.endElement with an argument string 'channel'.
call the method handler.endElement with an argument string 'entry'.
call the method handler.endElement with an argument string 'feed'.
call the method handler.endElement with an argument string 'item'.
call the method handler.endElement with an argument string 'rss'.
call the method handler.file.close.
substitute name for handler.name.
call the method handler.new_file with 6 arguments: field_name, file_name, content_type, content_length, charset and  content_type_extra.
call the function _checkLevel with an argument level, use the result as an argument for the call to the function handler.setLevel.
call the method handler.startDocument.
call the method handler.startElement with 2 arguments: string 'feed' and result of the method self.root_attributes.
call the method handler.startElement with 2 arguments: string "item" and result of the method self.item_attributes with an argument item.
call the method handler.startElement with 2 arguments: string 'author' and an empty dictionary.
call the method handler.endElement with 2 arguments: string 'author' and an empty dictionary.
call the method handler.startElement with 2 arguments: string "channel" and result of the method self.root_attributes.
call the method handler.startElement with 2 arguments: string 'entry' and result of the function self.item_attributes,
call the method handler.startElement with 2 arguments: string "rss" and result of the method self.rss_attributes.
substitute value under name key of logging._handlers dictionary for handler.
call the method logging.StreamHandler, substitute the result for handler.
call the method self.configure_handler with an argument value under name key of handlers dictionary, substitute the result for handler.
call the method self.get_handler with 2 arguments unpacked list args and unpacked dictionary options, substitute the result for handler.
handler is an instance of SimplerXMLGenerator class, created with 2 arguments: outfile and encoding.
substitute value under name key of handlers dictionary for handler_config.
substitute handler for value under name key of handlers dictionary.
get config dictionary element under 'handlers' key, if it exists substitute it for handlers, if not, handlers is EMPTY_DICT.
get value under the 'handlers' key of the config dictioanry, if it exists substitute it for handlers, if not handlers is None.
substitute self._upload_handlers for handlers.
raw string '(?:<br clear="all">|<i><\/i>|<b><\/b>|<em><\/em>|<strong><\/strong>|<\/?smallcaps>|<\/?uppercase>)' and re.IGNORECASE,   substitute the result for html_gunk_re.   call the function re.compile with 2 arguments: raw string '((?:<p>(?:%s).*?[a-zA-Z].*?</p>\s*)+)',
has_bz2 is boolean False.
has_bz2 is boolean True.
if self has an 'requires_system_checks' attribute, has_new_option is boolean True, otherwise it is boolean False.
if self has an 'requires_model_validation' attribute, has_old_option is boolean True, otherwise it is boolean False.
assign the settings.SECURE_PROXY_SSL_HEADER to header and value, respectively.
substitute first header_end elements of chunk list for header.
convert string header to uppercase and replace all occurrences of '-' with '_', substitute it for header.
call the method self._convert_to_charset with arguments: header and string 'ascii', substitute the result for header.
call the method chunk.find with an argument bytes string '\r\n\r\n', substitute the result for header_end.
call the key.lower method for every key in self.extra_headers, join the results into a header_names.
append header to the string 'HTTP_', append the result to the list headerlist.
call method sort on the headerlist.
headerlist is an empty list.
get the value of dictionary cache under the key cache_key, if key is not available return None, substitute it for headerlist.
for every key and value in return value of the self._headers.values method, call the function to_bytes with 2 arguments: key,
get property attribute _get_height, and substitute it for width.
help is an empty string.
help is string 'Compiles .po files to .mo files for use with builtin gettext support.'.
concatenate CheckCommand.help to string 'Deprecated. Use "check" command instead. ', substitute it for help.
help is a string 'Discover and run tests in the specified modules or the current directory.'.
help is an string 'Installs the named fixture(s) in the database.'.
help is a string 'Prints the SQL statements for resetting sequences for the given app name(s).'.
help is a string 'Runs a development server with data from the given fixture(s).'.
help is a string "Checks the entire Django project for potential problems.".
help is a string "Creates new migration(s) for apps.".
help is an string "Creates the tables needed to use the SQL cache backend.".
help is a string "Deprecated - use 'migrate' instead.".
help is an string "Introspects the database tables in the given database and outputs a Django model module.".
help is a string "Prints the CREATE INDEX SQL statements for the given model module name(s).".
help is a string "Prints the CREATE TABLE SQL statements for the given app name(s).".
help is a string "Prints the CREATE TABLE, custom SQL and CREATE INDEX SQL statements for the given model module name(s).".
help is a string, "Prints the custom table modifying SQL statements for the given app name(s).".
help is an string "Prints the DROP INDEX SQL statements for the given model module name(s).".
help is a string "Prints the DROP TABLE SQL statements for the given app name(s).".
help is a string "Prints the SQL statements for the named migration."
help is a string, containing "Returns a list of the SQL statements required to return all tables in the database to the state they were in just after they were installed.".
help is a string "Runs a Python interactive interpreter. Tries to use IPython or bpython, if one of them is available.".
help is a string "Runs this project as a FastCGI application. Requires flup.".
help is a string "Squashes an existing set of migrations (from first until specified) into a single new one.".
help is a string "Starts a lightweight Web server for development.".
help is a string "Updates database schema. Manages both apps with migrations and those without.".
help is a tuple containing a string: 'Removes ALL DATA from the database, including data added during '
help is a tuple containing a string "Creates a Django app directory structure for the given app name in the current directory or optionally in the given directory.".
help is a tuple containing string "Creates a Django project directory structure for the given "
help is a tuple containing a string "Output the contents of the database as a fixture of the given "
help is a string "Runs over the entire source tree of the current directory and "
help is a tuple containing a string "Runs the command-line client for specified database, or the default database if none is provided.".
label is an empty string.
call the function force_text with an argument field.help_text, format help_text_html with it, substitute the result for help_text.
hex_format_string is a string "%%0%ix" formated with hlen multiplied with integer 2.
split ip_str by '::', substitute it for hextet.
replace hextets list from the best_doublecolon_start index to best_doublecolon_end index with an empty string.
value under the index key of the hextets dictionary is a string '0'.
get the value under the index key of the hextets dictionary, remove the leading '0' characters,
append an empty string to list hextets.
prepend an empty string to hextets list.
split ip_str into parts by ':', substitute the result for hextets.
split ip_str by ':', substitute the result for hextets.
call the function msvcrt.get_osfhandle with return value of the _fd(f) function as argument, substitute the result for hfile.
divide absolute offset by module 60, use the result to format string '%02d%02d', substitute it for hhmm.
and '%(error)s' is replaced with return value of the force_text function called with an argument e,   extend the top_errors with the result.   call the function six.text_type with an argument bf, append the result to hidden_fields.
call the method field.hidden_widget, substitute the result for field.hidden_widget.
substitute HiddenInput for hidden_widget.
substitute MultipleHiddenInput for hidden_widget.
substitute SplitHiddenDateTimeWidget for hidden_widget.
if self.hint exists, replace '%s' in a string "\n\tHINT: %s" with value of self.hint, substitute it for hint, otherwise hint is an empty string.
HITS and MISSES are integer 0 and 1, respectively.
get greater value between integer 1 and result of subtraction of self.orphans from self.count, substitute it for hits.
Convert the variable encoded to a hexadecimal and store it in the variable hopcode
Convert x to a hexadecimal and store it in the variable hopcode
Convert x to a hexadecimal and store in hopcode
convert host to lowercase.
if host ends with '.', remove the last element from host.
substitute the value under the 'HTTP_HOST' key of the self.META dictionary, substitute it for host.
get the value under the 'HTTP_X_FORWARDED_HOST' key of the self.META dictionary, substitute the result for host.
substitute the value under the 'SERVER_NAME' key of the self.META dictionary, substitute it for host.
compile the regex "^([a-z0-9.-]+|\[[a-f0-9]*:[a-f0-9:]+\])(:\d+)?$", substitute it for host_validation_re.
substitute the result for timezone.   divide timezone by integer 60, substitute the quotient of the division for hour and reminder for minute.
and integer 60, substitute the result for timezone.   divide timezone by integer 60, substitute the quotient of the division for hour and reminder for minute.
call the method m.group with an argument string 'hour', convert the result into a string, substitute it for hour.
substitute the resulting string for choices.   call the method self.create_select with 6 arguments: name, self.year_field, value, day_val, choices and self.day_none_value,
call the method self.create_select with 6 arguments: name, self.month_field, value, month_val, choices and self.month_none_value,
call the method self.create_select with 6 arguments: name, self.year_field, value, year_val, choices and self.year_none_value,
assign the result for year_val, month_val and day_val, respectively.   html is an empty dictionary.
call the function endtag_re.sub with 2 arguments: an empty string and html, substitute the result for html.
call the function starttag_re.sub with 2 arguments: an empty string and html, substitute the result for html.
replace "%s" from the string ' class="%s"' with css_classes, substitute it for html_class_attr.
html_class_attr is an empty string.
call the function re.compile with 2 arguments:
unpacked list exc_info.   if self.include_html is true, call the method reporter.get_traceback_html and substitute the result for html_message,
html4_singlets is a tuple with 9 elements: strings 'br', 'col', 'link', 'base', 'img', 'param', 'area', 'hr' and 'input'.
or if current_version is greater than (3,0), but smaller than (3,2,3), otherwise set use_workaround to boolean False.   substitute HTMLParseError from the module _html_parser for HTMLParseError.
call the method HTMLParser.__init__ with 2 arguments: self and strict set to boolean False.
call the method HTMLParser.__init__ with an argument self.
substitute HTMLParser from the module _html_parser for HTMLParser.
httpd.daemon_threads is boolean True.
call the method httpd.serve_forever.
call the method httpd.set_app with an argument wsgi_handler.
call the httpd_cls function with 4 arguments: server_address, WSGIRequestHandler and ipv6 set to ipv6, substitute the result for httpd.
call the function type with 3 arguments: string 'WSGIServer', tuple containing 2 elements: socketserver.ThreadingMixIn and WSGIServer,
substitute WSGIServer for httpd_cls.
call the method HttpResponse.content.fset with 2 arguments: self and value.
increment i by integer 1.
increment i by one.
where '%d' is replaced with i and '%s' is replaced with subject.   increment i by one.
increment i by integer 1,
where '%d' is replaced with i and '%s' is replaced with subject.   increment i by integer 1,
increment i by integer 1,.
increment the variable i by 1
i is integer 365.
i is integer 366.
get the index of first occurrence of name in existing, substitute it for i.
i is the reminder of the division of i by j.
increment i by integer 1, substitute the result for i.
add j and integer 1, substitute the result for i.
call the function next_space_index with 2 arguments: subject and i, substitute the result for i.
call the function next_space_index with 2 arguments subject and i, substitute the result for i.
get the index of the first occurrence of tagname, substitute it for i.
call the method p.find with bytes string '=' as an argument, substitute the result for i.
initialize i as an integer with the value of 0
if self.id exists, convert self.id to a string, surround it with round brackets, substitute id for it, otherwise id is an empty string.
id is a string "literal".
id is None.
append string '_0' to id_.
substitute '%s' in string 'id_%s' with name, return it.
substitute the result for final_attrs.   get the value under the 'id' key of final_attrs dictionary, substitute if for id_ if the key doesnt exists, id_ is None.
get the value under the 'id' key of the final_attrs dictionary, substitute it for id_, if it doesnt exists, id_ is None.
get the value under the 'id' key of the self.attrs dictionary, substitute it for id_ if the key exists, if not id_ is None.
get the value under the 'id' key of the attrs dictionary, substitute the return value field of the self object for id_.
get the value under the 'id' key of the self.field.widget.attrs dictionary, if the key exists substitute it for id_,
get the value under the 'id' key of the widget.attrs dictionary, if the key exists substitute it for id_,
call the method widget.id_for_label with an argument id_, substitute the result for id_for_label.
compile regex from string '^[a-z_][a-z0-9_]*$' in case insensitive mode, substitute it for IDENTIFIER.
substitute DNS_NAME for idhost.
append idstring to the '.' character, substitute it for idstring.
idstring is an empty string.
call the method m.groups, substitute the first element of the result for idx.
if __name__ equals a string '__main__'.
if _cached_modules equals to module_values,
if _cookie_encodes_correctly and _cookie_allows_colon_in_names are boolean True,
if _default is None
if _default is None,
if _file is None,
if _file is not None,
if _globs_ is None,
if _ipv6 is true,
if _localtime is None,
if _locs_ is None,
if call to the function _samefile with old_file_name and new_file_name evaluates to boolean True,
if _standard_context_processors is None,
if _supported is None,
if _time.daylight is true,
if _win is true,
if string '__str__' is not contained in __dict__ field of klass,
if '_' is contained in locale,
if string '--commands' is contained in args,
if character '-' is not contained  in lang_code,
if ',' is contained in second element of args,
if ',' is not contained in arg,
if string ':::' is contained in ip_str,
if '::' is not contained in ip_str and number of occurrences of ':' in ip_str is not equal to integer 7,
if ':' is not contained in ip_str.
if character ':' is not contained in template,
if '.' is contained in exclude,
if '.' is contained in last elements of hextets,
split ip_str into parts by ':', if '.' is contained in the last element of the result,
if '.' is not contained in str_number,
if '.' is contained in words or '@' is contained in word or ':' is contained in word,
if '.' is not contained in var and 'e' is not contained in var converted into lowercase,
if string '()' is contained in config,
if character '@' is contained in addr,
if '/' is contained in path, and only if '\\' is contained in path and index of the first occurrence of '/' in path is lesser than,
if characters '\n' or '\r' are contained in val,
if string '%(truncated_text)s' is contained in truncate,
if 'args' is contained in options,
use it to call the cgi.parse_header method, assign the result to the _ and content_params respectively.   if string 'charset' is contained in content_params,
if 'class' is contained in attrs,
if 'date' is not in header_names,
if string 'DJANGO_AUTO_COMPLETE' is not contained in os.environ,
if string 'django.middleware.clickjacking.XFrameOptionsMiddleware' is not contained in settings.MIDDLEWARE_CLASSES set,
if 'error_messages' is contained in kwargs,
if 'file_path' is contained in kwargs,
if string 'forloop' is contained in context,
if 'id' is contained in self.attrs,
if string 'id' is contained in self.attrs,
if 'Location' is contained in response and function request.get_host evaluates to True,
for every el in split string cc_delim_re, with delimiter being the value of dictionary response under the key 'Cache-Control'.   if cc contains item 'max-age',
if cc contains item 'max-age' and kwargs contains item 'max_age',
if 'media' is not contained in attrs,
if message-id' is not in header_names,
if string 'noreset' is not contained in opts,
if 'pk' is contained in d,
if it is smaller than the value of dictionary kwargs under the key 'max_age', substitute kwargs value under the key 'max-age' by it.   if cc contains item 'private' and kwargs contains item 'public',
if string 'version' is not contained in config,
if 'warning' is contained in kwargs,
if string "'format'" is not contained in e converted into a string,
if "'stream'" is not contained in te converted into a string,
if encoded contains string "\\" and if encoded doesnt start with the double quote symbol,
if self.__stattag_text contains newline character,
if string "0x0,aec" is in format_0x
if self.allow_files is true and full_file is a file, or if self.allow_folders is true and full_file is an directory,
if context.autoescape is true and value is not an instance of SafeData, or value is an instance of EscapeData,
if ip_str starts with ':, but it doesnt starts with '::', or if ip_str ends with ':, but it doesnt ends with '::',
call the function os.stat with an argument path, perform bitwise and on 2 operands st_mode field of the result and stat.S_IREAD,
if integers 3 and 2 in a tuple are smaller than the sys.version_info and sys.version_info is smaller than integers 3,4 and 4 in a tuple, respectively,
if attr equals any of the strings "__file__", "__name__" or "__path__" and self.mod is not contained in sys.modules,
if BLOCK_CONTEXT_KEY is contained in render_context and call to the method get_block with an argument self.name from the object,
if features.needs_datetime_string_cast field of object under the db key of connections dictionary is true and current_expires is not an instance of datetime object.
if context.autoescape is true and output is not an instance of SafeData class or output is an instance of EscapeData class,
if value under the key 'ATOMIC_REQUESTS of db.settings_dic dictionary is True and db.alias is not present in the non_atomic_requests,
if domain_part is not contained in self.domain_whitelist and method self.validate_domain_part with an argument domain_part evaluates to false,
if field equals NON_FIELD_ERRORS and opts.error_messages is true and NON_FIELD_ERRORS is contained in opts.error_messages,
if form.cleaned_data is true and value under the field key of form.cleaned_data dictionary is not None,
if 'fields' attribute of meta is None, or if it doesnt exists if fields is None and if 'exclude' attribute of meta is None,
if 'fields' attribute of Meta object is None and 'exclude' attribute of Meta object is None,
if self.cmd has an attribute 'missing_args_message' and next statement is not true: args is true or any arg doesnt start with '-' for arg in args,
if value has an attribute '__iter__' and value is not an instance of six.text_type and value doesnt have an attribute '_meta',
subtract day_of_year from i, if the result is smaller than the result of subtraction of weekday from integer 4,
if first element of args is an instance of SafeData, and 'is_safe' attribute of dec._decorated_function object is true,
if data is an instance of datetime.datetime or datetime.time classes, and supports_microseconds field of self.field.widget is false,
if data is instance of Node and data.negated is false, and if data.connector equals conn_type or length of data equals integer 1,
if fp is an instance of file and data is an instance of unicode and fp.encoding is not None,
if message is an instance of ValidationError class and message.code is contained in error_messages,
evaluate the boolean expression: locale is None and exclude is false and process_all is false,
if middle ends with closing and count of occurrence of closing in middle equals count of occurrence of opening in middle incremented by one,
if return value of the function normcase called with an argument final_path doesnt starts with result of the function normcase,
if obj.pk is None, and Model has an 'natural_key' attribute, and Model._default_manager has and 'get_by_natural_key',
code set to string 'max_decimal_places' and params set to a dictionary with an entry: self.decimal_places for 'max'.    if self.max_digits is not None and self.decimal_places is not None and whole_digits is grater than the difference of,
if self.negate is true and val1 is not equal to val2, or if, self.negate is false and val1 equals val2,
if self.requires_system_checks is true and values under the 'skip_validation' and 'skip_checks' keys of the options dictionary are false,
if self.validate_max is true, and length of self.deleted_forms subtracted from the return value of the method self.total_form_count,
check if the length of execve_shellcode is not divisible by 3
check if the length of z is not divisible by 100
check if the following expression is true r bitwise xor c at index i is not equal to 0 and r bitwise xor c at index i+1 does not equal 0 and r bitwise xor c at index i+2 does not equal 0 and r bitwise xor c at index i+3 does not equal 0
check if r bitwise xor shellcode_original at index i, i+1, i+2, and i+3 are not equal to 0 
if variable a modulo 2 is equal to 0
if action equals to string "apply_start",
if age is greater than max_age,
if alias is not contained in setting.CACHES,
if all_issues is true,
and pending_references append sql to the string '-- ', put the results in a list, extend alter_sql with the result.   if alter_sql,
if answer equals a string 'y',
if visible_issue_count equals to integer 0, or for string "1 issue" if visible_issue_count equals integer 1,   or for string "%s issues", with '%s' replaced by visible_issue_count, subtract visible_issue_count from length of all_issues,   and substitute it for second '%s' in the stirting string.   if any element in the return value of the e.is_serious method is true, and if return value of the method e.is_silenced is false,
split ip_str into parts by ':', for every x in the result, calculate length of x, if any is smaller than integer 4,
if app equals a string 'django.core',
if app_config.label is contained in loader.migrated_apps,
RemovedInDjango19Warning and stacklevel set to integer 2.   if app_config.models_module is None,
if app_config.models_module is None,
if app_config.models_module is None.
if app_config.models_module is None or app_config is contained in excluded_apps,
if app_config.models_module is None or app_config is contained in excluded_apps
if app_config is None,
if app_label is not contained in executor.loader.migrated_apps,
if app_labels is true,
if app_list_value is not None,
if app_name is not contained in loader.migrated_apps,
if app_names is not empty,
if app_output is true,
if app_path is None,
if arg is true,
if arg starts with options,
if arg is smaller than integer 1,
if arg is None,
if arg is None
if arg is not string 'on' or 'off',
if args is true,
if args in true,
if last element of args is not equal to a string "silent",
if third element from the end of the args equals string 'as',
if first element of the second row of args equals a string '2',
if args and kwargs are both true,
if args is None,
if as_ is not equal to string 'as',
if as_form is true,
if att_name equals string 'id' and extra_params equals a dictionary with 1 entry: boolean True for 'primary_key',
if attr is contained in flags,
if attr is contained in obj_dict,
if attrs is true,
if attrs is None,
if attrs is not None,
if attrvalue is not an empty string,
if auto_id is true and '%s' is contained in result of the call to the function smart_text with an argument auto_id,
if auto_id is true and 'id' is not contained in attrs and 'id' is not contained in widget.attrs,
if autoescape is true,
if autoescape is true and safe_input is false,
if bad_app_labels is true,
convert base to lowercase, if it ends with string '.tar',
if base_url is None,
if first element of base64d equals to a '.' character,
substitute the result for new_class.   if bases equals a tuple with an element: class BaseModelForm.
if basetype equals a string 'text',
if bcc is true,
if best_doublecolon_end equals length of hextets,
if best_doublecolon_len is greater than integer 1,
if best_doublecolon_start equals integer 0,
called with an argument error, for every error in bf.errors, substitute the result for bf_errors.   if bf.is_hidden is true,
if bf.label is true,
if bf_errors is true,
if bit is true,
if bit starts with '_("' ot bit starts with "_('",
if first element of bits is not equal to string 'and',
if third element of bits is not equal to a string 'by',
if third element of bits equals a string 'parsed',
if fift element of bits is not equal to a string 'as',
if in_index-th element of bits equals to string 'in',
if bits is true and kwarg_format is false,
if block is None,
if first nine elements of block_content is string 'verbatim' or 'verbatim ',
if block_context is None,
if BLOCK_CONTEXT_KEY is not contained in context.render_context,
if block_name is contained in parser.__loaded_blocks,
call the method bmatch.group with an argument integer 1, if it evaluates to true,
or boolean False if not, substitute the result for boundary.   if boundary is true,
if buffer_ is true,
if buffer_ is not None,
if bytes is smaller than KB,
if bytes_read is greater than rollback,
if cache is None,
if cache_choices is not None,
if cache_timeout is lesser than integer 0,
if cache_timeout equals to None,
if cache_timeout is None,
if cached is not None,
call the function calendar.isleap with an argument self.data.year, if it evaluates to true,
if callback is an callable object,
where '%s' is replaced with bit and '%r' is replaced with current.   if current is callable object,
if not, substitute self.field.initial for data.   if data is an callable object,
get 'getvalue' attribute of the self.stream object, if it exists and is callable,
if not substitute field.initial for initial_value.   if initial_value is an callable object,
if key_function is callable object,
if limit_choices_to is callable object,
if lookup_view is a callable object,
if name is callable object,
if self.limit_choices_to object is callable,
if can_fail is true,
if can fail is true,
called with 2 arguments: s and string_only as boolean True.   if categories is true,
if cc is true,
if ch is not in bad_chars
if ch is true,
if ch is not equal to a sring '?' or escaped is true,
if ch is not equal to string '\\'.
if ch equals a string '?',
if ch equal a string '(',
if ch equals string '+',
if ch equals a string '<',
if ch is contained in string '*?+',
if ch is contained in string "iLmsu#",
if ch is not equal to string '<' or string '=',
if ch2 equals string '?',
if change equals to FILE_MODIFIED,
if character is not equal to a string '.',
if charset equals to string 'utf-8',
if check is not contained in self.registered_checks.
if check_path is true,
if child.nodeType equals to child.TEXT_NODE or child.nodeType equals to child.CDATA_SECTION_NODE,
if chunk is None,
if cleaned_data is not None,
if cleaned_line ends with ';' character,
if close is True,
if cls._delegate_text is true,
if cmatch is true,
if cmd ends with ext,
if cnt is true and remained of dividing cnt with grouping is zero,
if code is contained in _supported and call to the function check_for_language with an argument code evaluates to true,
if code is None,
if code is not None,
if code is not None
if return value of the code_changed function is true,
if col_name is not equal to new_name and field_notes is true,
convert col_name to lowercase, on the result call the method find with an argument string '__', if the result is greater of equal to integer 0,
if color_setting is True,
if colors is true and last element of colors is contained in color_names,
if column_name is contained in indexes,
if command.use_argparse is true,
if command.verbosity is greater than integer 1,
if command is contained in parse_until,
if commands_only is true,
if comment_lineno_cache equals cur_lineno.
if comment_lineno_cache is not None,
if comment_notes is true,
if commit is true,
of the obj object.   if commit is true,
if commit is true and form has an attribute 'save_m2m',
if common_ancestor is None,
if compare_to is not equal to value under the self key of state_frame.
if compress is true,
if condition is not None,
if config dictionary value under 'version' key is not equal to integer 1,
if confirm equals a string 'yes',
if confirm equals string 'yes',
if confirm is not equal to string 'yes' or string 'no',
if conflicts is true,
if conflicts is true and self.merge is false,
if return value of the function connection.introspection.table_name_converter called with an arugment: model._meta.db_table is contained in table_names
from the connections list, substitute it for connection.   call the method connection.ops.start_transaction_sql, if it evaluates to true,
if value under the 'ENGINE' key of the connection.settings_dict dictionary equals a string 'django.db.backends.dummy',
if features.needs_datetime_string_cast field of the object represented stored under the db key of connections dictionary is true,
if constant is true,
and var_arg, respectively.   if constant_arg is true,
call the function constant_time_compare with 2 arguments: sig and return value of the self.signature method with an argument value,  if it evaluates to true,
if construct is true,
if consume_next is true,
call the function contains with 2 arguments: elt and inst, if it evaluates to true,
if call to the function contains with 2 arguments: last element of result and Group, evaluates to true,
if content_disposition is true,
if content_length is lesser than integer 0,
if content_length is greater than settings.FILE_UPLOAD_MAX_MEMORY_SIZE,
if contents is not None,
if CONTEXT_SEPARATOR is contained in result,
if converter is true,
check if count is not divisble by 2 
if count is not even
if count is equal to integer 0.
if counter is even 
if variable counter is divisible by 2
if csrf_token equals string 'NOTPROVIDED',
if csrf_token is not None,
if css_classes is true,
if current_app and is true and current_app is contained in app_list,
if current_len is smaller than or equal to length,
if current_len equals truncate_len,
if tuple current_version elements are greater or equal to (3, 4), respectively,
if cursor is true,
if both cursor and close_connection are true,
if cursor is true and return value of the function connection.introspection.table_name_converter called with an arugment:  model._meta.db_table is contained in table_names,
if custom_sql is empty,
if cword equlals a integer 1,
if first element of cwords equals a string 'runfcgi',
if daemonize is true,
if data is true,
element of data at the index last equals to newline bytes character.
element of data at the index last equals to carriage return bytes character.
if data is not None or FILE_INPUT_CONTRADICTION,
substitute it for data.   if data is contained in seen_data,
if data is contained in self.children,
if data in self.empty_values is true,
if data is boolean False,
if data is bound to the same object as FILE_INPUT_CONTRADICTION,
if data is None,
RemovedInDjango19Warning and stacklevel set to integer 2.   if data is None or data is an instance of dict type,
if data is not None,
if data_list is true,
if first element of data_list is contained in self.empty_values,
if second element of data_list is contained in self.empty_values,
if date is not None,
if day_of_year is smaller than or equalt to jan1_weekday subtracted from integer 8 and jan1_weekday is greater than integer 4,
append the resulting string to dec_part, substitute it for dec_part.   if dec_part is true,
if decimal_pos is not None,
if decimal_pos is not None
if decimal_separator is contained in value,
if decimals is greater than digits,
if decompress is true,
if default is None,
if default is true and RAISE_ERROR is false,
if DEFAULT_CACHE_ALIAS is not contained in settings.CACHES,
if default_list is None,
where '%s' is replaced with name.   if defaults is not None,
if definition is true,
if delta is smaller than integer 0,
if delta is smaller than integer 0.
if deps is true,
if digest is None,
if dirname starts with character '.' or dirname equals a string '__pycache__',
if dirname is true and dirname directory doesnt exists,
if dirname is true and dirname path doesnt exists,
if display_num_errors is true,
if second last element of django.VERSION is not equal to a string 'final',
bring intger 2 to integer 32, decrement the result by 1, multiply it with hlen, if dklen is greater than the previous result,
if domain is true,
if domain equals a string 'djangojs' and file_ext is contained in command.extensions,
if domain is true and return value of the function validate_host called with 2 arguments: domain and settings.ALLOWED_HOSTS, evaluates to true,
if domain is not None,
if doublecolon_len is greater than best_doublecolon_len,
if doublecolon_start equals integer -1,
if dt.year is greater than or equal to integer 1900,
if e.args list first element starts with string "Error -5",
if first element of e.args is not contained in not_found,
if e.errno is not equal to errno.EEXIST,
if e.errno does not equals to errno.ENOENT,
if e.errno equals to errno.EEXIST,
if e.errno is not equal to errno.ENOENT,
if e.errno equals to errno.EEXIST,
if e.errno equals errno.EEXIST,
if e.errno equals to errno.ENOENT,
if empty_label is not None,
if encoding equals to string 'utf-8'.
with it replace %r in the string "junk characters in start tag: %r",   call the method self.error with the resulting string as an argument.   if string end ends with string '/>',
if end is lesser than integer 0,
if end is None
if end is not None,
if end is not a '>' or '/>' character,
if end_index is None and s_len is greater than truncate_len,
if endblock.contents is not contained in acceptable_endblocks,
if endbmatch is true,
if ending is true and msg doesnt end with ending,
if endpos is lesser than zero,
if err_log is true,
if error.code equals code,
if error.params is true,
if error_class is None,
if error_message is not None,
if error_messages is true and f.name is contained in error_messages,
if error_messages is not None,
if errors is True,
if errors is None,
if errors_on_separate_row and bf_errors are both true,
if escaped is true,
if event.path ends with string '.mo',
if event equals a string "START_ELEMENT" and node.nodeName equals a string 'object',
if exclude is true and f.name is contained in exclude,
if exclude is not None,
if exctype is not WindowsError or string 'Access is denied' is not contained in value converted into a string,
if exit_code is not equal to integer 3.
if exit_code is lesser than integer 0,
if exp is None or exp is greater than the return value of the call to the function time.time,
if exp is not None and exp is lesser than return value of the function time.time,
if expires is lesser than now,
if expires is not None,
if ext is true,
if extend is true,
if extend is boolean True,
if extra_attrs is true,
or with string 'models.' if it is not and field_type.   if extra_params is true,
if extracted is true,
if f.db_index is true,
if f.name is contained in cleaned_data,
if f.primary_key is true,
if f.rel and f.rel.to are not contained in to_delete,
if f equals to string '__pycache__',
if f is None,
if failures is true,
if fake is true,
evaluate the fd.isatty method, if the result is true,
if fd is greater or equal to integer 0.
if fdel is not None,
if fg is contained in color_names,
if fget is not None,
if field is not equal to NON_FIELD_ERRORS and field is not contained in self.fields,
call the method field._has_changed with 2 arguments: return value of the function field.to_python called with an argument initial,
call the method field._has_changed with 2 arguments: initial_value and data_value, if it evaluates to true,
get the value under the 'incomplete' key of the field.error_messages dictionary, if it is not contained in errors,
if field.help_text is true,
if field.rel.through._meta.auto_created is true,
if field.rel.to._meta.pk.rel is true,
if field.rel is true, and field.rel is an instance of models.ManyToManyRel,
if field.rel is true and field.rel is an instance of models.ManyToManyRel,
if field.rel is None,
if field.serialize is true,
if field.widget.needs_multipart_form is true,
if field equals NON_FIELD_ERRORS,
if field is contained in form.cleaned_data,
if field is contained in self.cleaned_data,
if field is contained in self.errors,
if field is not None,
if field is not contained in self.errors,
if field is not contained in self.fields,
call the method field_node.getElementsByTagName with an argument string 'None', if it evaluates to true,
if field_type equals a string 'AutoField(',
if field_type equals a string 'BooleanField(',
if field_type equals a string CharField' and fourth element of row is true,
if field_type equals a string 'DecimalField',
if field_type is not equal to string 'TextField(' or string 'CharField(',
if field_value is cotained in self.empty_values,
if field_value is not None,
if fields is true,
if fields is true and f.name is not contained in fields,
if fields is not None,
if fields is not None and f.name is not contained in fields,
and _, respectively.   if file_ is true,
if file_obj is true,
if filename is true,
if filename ends with string '.mo',
if filename ends with string ".pyc" or it ends with ".pyo",
if filename ends with string "$py.class",
if filename ends with '.pyo', '.pyc' or '.py.class',
if filename ends with '/' or with '\\',
if filename ends with extensions or filename is contained in extra_files,
if filename is true and filename path doesnt exist,
if filename is not contained in _error_files,
if filename is not contained in _mtimes,
if filepath starts with root,
if every filter_name in strings 'escape' or 'safe',
if filter_name is contained in self.filters,
if filters is true,
call the function find_command with an argument program, if it evaluates to None,
if evaluation of the function find_command with self.program as argument equals to None,
if call to the method finder.find_module with 2 arguments: name and package_path evaluates to true,
if call to the method finder.find_module with an argument name evaluates to true,
if finder is None,
if first is true,
if fixture_name is not equal to string 'initial_data' and fixture_files is false,
if fk.unique is boolean true,
if fk_name is true,
if flags is not None,
convert value to an floating point number if it is not equal to integer 1,
call the function force_text with an argument val, if the result is not contained in pks,
if return values of the function force_text called two times with 1 argument, with value, and with orig, are equal,
self.instance and unpacked dictionary kwargs.   if form._meta.fields is true,
if form._meta.widgets is true,
if form.errors is true,
if form.is_bound is true,
if form is contained in forms_to_delete,
if format is not contained in _serializers,
if format is not contained in return value of the method serializers.get_public_serializer_formats,
if format_module_path is true,
if format_module_path is None.
if formatter is true,
if formfield is true,
if formfield_callback is None,
if found is true,
if fp is None,
if fset is not None,
if func is None,
if first element of g equals a string '"',
get the 'do_not_call_in_templates' attribute of current object, if it exists and is true,
get the 'silent_variable_failure' attribute of e object, if it exists and is true,
if attribute 'winerror' of object e is not equal to integer 32 and if 'errno' attribute is not equal to integer 13,
if 'filename' attribute of ev is None,
if 'expects_localtime' attribute of func object exists and is true,
if 'is_safe' attribute of func object exists and is true and obj is an instance of SafeData,
if 'needs_autoescape' attribute of func object exists and is true,
and return value of the field.get_internal_type method for 'type'.   if field.name attribute of obj is not None,
if self object has an attribute '_client',
if attribute '_client' of the self object is None,
call the method gettext_module.find with 3 arguments: string 'django', path and list with an element: result of the function,
if git_changeset is true,
if replaces filed of graph.nodes element at the plan_node index is true,
if handlers is true,
evaluate function has_bom with po_path as argument.
tuple with 2 arguments: gzip.GzipFile and string 'rb' for 'gz', tuple with 2 arguments: SingleZipReader and string 'r' for 'gzip'.   if has_bz2 is true,
if has_old_option is true,
in favor of "requires_system_checks".' and RemovedInDjango19Warning.   if has_old_option and has_new_option are both true,
if active has an attribute 'value',
if _active has an attribute "value",
if _urlconfs has an attribute 'value',
if base has an attribute 'base_fields'.
if base has an 'declared_fields' attribute,
if base has an attribute 'declared_fields',
if cls has an attribute k,
if content has an attribute 'temporary_file_path',
if data has an attribute 'read',
if data has an 'temporary_file_path' attribute,
called with an argument decorator.   if decorator has an attribute 'process_view',
if e has an attribute 'code' and e.code is contained in self.error_messages,
if error has an attribute 'error_dict',
if extra_classes has an attribute 'split',
value under the 'invalid_image' key of the self.error_messages dictionary and code set to a string 'invalid_image',   and third element of the return value of the function sys.exc_info.   if f has an attribute 'seek' and if f.seek is an callable object,
if field.rel has an 'to' attribute,
if field.rel.to._default_manager has an attribute 'get_by_natural_key',
if field.rel.to._default_manager has an 'get_by_natural_key' attribute,
if field.rel.to._default_manager has an atttribute 'get_by_natural_key',
if field_value has an attribute '__iter__' and is not an instance of six.text_type object,
if file object has an attribute 'mode',
if file_or_path has an attribute 'read',
if filter_func has an attribute "_decorated_function",
if form has an attribute 'Meta',
if formfield has an attribute 'queryset',
if get_git_changeset has an attribute 'cache',
if handler has an attribute 'file',
use the result as an argument for the call to the function binascii.unhexlify, return the result.   if hashlib had an instance "pbkdf2_hmac",
join the results into a string, return it.   if hmac has an attribute "compare_digest",
if message has an 'error_dict' attribute,
if middleware has an attribute 'process_exception',
if middleware has an attribute 'process_request',
if middleware has an attribute 'process_response',
if middleware has an attribute 'process_response',
if middleware has an attribute 'process_view',
if model has an 'natural_key' attribute,
if mw_instance has an attribute named 'process_exception'.
if mw_instance has an attribute named 'process_request'.
if mw_instance has an attribute named 'process_response'.
if mw_instance has an attribute named 'process_template_response'.
if mw_instance has an attribute named 'process_view'.
if os has an attribute 'chmod',
if os has an attribute 'utime',
if os.path has an attribute 'samefile',
if out has an 'isatty' argument and return value of the function out.isatty is true,
if parent has an attribute 'render',
if pattern has an attribute '_callback_str',
if rel_model has an attribute 'natural_key' and rel_model is not equal to model,
if rel_model has an 'natural_key' attribute and rel_model is not equal to model,
if request has an attribute 'session',
if request has an attribute named 'urlconf',
with the name of the module callback is in and the view_name, respectively, use it as the argument for the ValueError exception raise.   if response has an attribute named 'render' and response.render is a callable function,
if object response has an attribute 'render' and if response.render is callable object,
if response has an attribute 'render' and response.render is a callable object,
if self has an attribute '_body',
if self has an attribute '_choices',
if self has an attribute '_coerce',
if self has an '_files' attribute.
if self has an attribute '_files',
if self has an '_get' attribute,
if self has an '_post' attribute,
if self has an '_regex_validator' attribute and self._regex_validator is contained in self.validators,
if self has an attribute '_size'.
if self has an attribute 'clean_%s', where '%s' is replaced with name,
if self has an 'error_dict' attribute,
if self has an attribute 'error_dict',
is self.data has an attribute 'tzinfo' and self.data.tzinfo is true,
if self.file has an attribute 'name',
if self.file has an attribute 'size',
if self.file has an attribute 'tell' and an attribute 'seek',
if setting has an "SERIALIZATION_MODULES" attribute,
if signal has an attribute 'SIGTTOU',
if TemplateLoader has an attribute 'load_template_source',
test management command has changed in Django 1.8. Please create an add_arguments class method to achieve this.   if test_runner_class has an attribute 'add_arguments',
if test_runner_class has an 'option_list' attribute,
if text has an '__html__' attribute,
if timezone has an attribute 'localize',
if timezone has an attribute 'normalize',
if value has an '__iter__' attribute and value is not an instance of bytes or six.string_types class.
if value has an attribute '__iter__' and value is not an instance of six.text_type,
if value has an attribute '_meta',
if value has an 'close' attribute,
if value has an attribute 'close',
if header equals a string 'ACCEPT_LANGUAGE' and is_accept_language_redundant is boolean True,
if header_end equals integer negative 1,
if header list is not None,
if help_texts is true and f.name is contained in help_texts,
if help_texts is not None,
if count of occurrence of '.' in ip_str is equal to integer 3,
if value under the index key of the hextets dictionary equals to string '0',
if hidden_fields is true,
if last element of host equals character ']',
if html is true,
if html_message is True,
message, settings.SERVER_EMAIL, list of second elements of a for every a in settings.Managers and connection set to connection,   as arguments, assign the result to mail.   if html_message is true,
if httponly is true,
if i is true,
re_formatchars.split, for every i and piece in enumerated result,   if i is even number,
if i incremented by 1 is lesser than length of chunks,
if i is smaller than integer 0,
if i is lower than the length of z
if i is smaller than result of the method self.initial_form_count and key 'instance' is not contained in kwargs,
check if i is equal to the string byte converted to hex, then casted to int16
if i is greater than sys.maxint,
if i is greater or equal to integer 0,
if i is greater than or equal to length of subject.
if i is greater than, or equal to subject,
if i is greater than or equal to length of subject,
if i is greater than length of subject,
if i is greater than, or equal to the result of the call to the method self.initial_form_count,
if i is greater than or equal to the result of the method self.initial_form_count,
if i is greater or equal to the result of the method self.initial_form_count and self.initial_extra is true,
if not, substitute self.auto_id for id_.   if id_ is true,
substitute the result input_attrs.   if id_,
if id_ is true,
if id_for_label is true,
if idstring is None,
if ignore is true,
if ignore is true and field_name is not contained in model_fields,
if ignore_failures is true,
if illegal_formatting is true,
if imatch is true,
call the method imatch.group with an argument integer 1, if it evaluates to true,
if in_tag and is not contained in self.verbatim,
if in_tag is true and token_string starts with BLOCK_TAG_START.
if incomment is true,
if incremental is true,
if indent is true,
if index is lesser than integer 0,
if index is not None,
if index is not None and index is smaller than return value of the method self.initial_form_count,
if index_sql is not empty,
if value under the 'primary_key' key of the dictionary contained under the column_name key of the dictionary indexes is true,
if initial equals a string 'False',
if initial is None,
if initial is not None,
if initial_forms is grater than self.max_num is grater or equal to integer 0,
if inplural is true,
if input_formats is not None,
if every input_val in special_floats,
if instance.pk is None,
if instance is None,
save_as_new set to boolean False, prefix set to None, queryset set to None and unpacked dictionary kwargs.   if instance is None,
if instance is not None,
if hextet converted to hexadecimal number is smaller than hexadecimal 0, or hextet converted to hexadecimal number is smaller than hexadecimal FFFF,
reset_sequences set to reset_sequences, allow_cascade set to allow_cascade, substitute the result for sql_list.   if interactive is true,
if invalid_apps in not empty,
if invalid_var_format_string is true,
if invalid_var_format_string is None,
if inverse_match is not None,
if count of occurrence of '::' in ip_str equals integer 1,
if count of occurrence of '::' in ip_str is greater than integer 1,
if count of occurrence of ':' in ip_str is greater than integer 7,
if count of occurrence of '.' in ip_str is not equal to integer 3,
if ipv4_unpacked is true,
if iri is not initialized,
call the function is_aware with an argument date, if it evaluates to true,
call the function is_aware with an argument o, if it evaluates to true,
call the function is_aware with an argument value, if it evaluates to true,
if is_compressed is true,
call the function is_ignored, with arguments: file_path and self.ignore_patterns, if it evaluates to true,
join dirpath and dirname into a file path, use is as an argument for the call to the function os.path.join,
call the function is_library_missing with an argument taglib_module, if it evaluates to true,
call the function is_naive with an argument obj.
call the function is_protected_type with an argument value, if it evaluates to true,
if is_relation is true,
if is_relation,
if is_templatized is true,
if addr is a instance of six.string_types,
if app_name is an instance of BaseCommand,
if app_name is an instance of BaseCommands.
for every arg in the result,   if arg is an instance of Promise class,
if arg is an instance of unicode,
if attachment is an instance of MIMEBase,
if attr is an instance of MovedModule.
if boundary is an instance of six.text_type class,
if cache is an instance of BaseDatabaseCache,
if callback is an instance of functools.partial object,
if callback is of instance types.FunctionType,
if choice_label is an instance of tuple or list,
if content is an instance of a EmailMessage class,
if context is an instance of Context,
if context is an instance of Context class.
if current is an instance of BaseContext and bit attribute of type of current is true,
if d is an instance of real_datetime class,
if data is an instance of MultiValueDict or MergeDict class,
if data is an instance of MultiValueDict or MergeDict,
if data is an instance of bytes,
if data is an instance of bytes.
if elt is an instance of Choice or NonCapture classes,
if elt is an instance of Group class,
if elt is an instance of NonCapture class,
if elt is an instance of six.string_types class,
if empty_label is an instance of list or tuple type,
if end is an instance of unicode,
if error is an instance of ValidationError,
if expires is an instance of datetime.datetime class,
if f is an instance of ManyToManyField,
if f is an instance of models.FileField,
if field is an instance of FileField,
if field is an instance of InlineForeignKeyField class,
if field is an instance of models.TimeField and filed.name attribute of obj is not None,
if field_value is an instance of the str type,
if file is an instance of six.string_types.
if file_name is an instance of Template class.
if filename is an instance of MIMEBase,
if form._meta.fields is an instance of tuple type,
if format_module_path is an instance of six.string_types,
if value object the 'unique_id_is_permalink' key of the item dictionary is an instance of bool type,
if level is an instance of int type,
if loader is an instance of tuple or list,
if loader is an instance of six.string_types,
if message is an instance of dict type,
if message is an instance of SafeData.
if message is an instance of SafeData,
if message is an instance of ValidationError class,
if node is an instance of Node,
if nodelist is an instance of NodeList and node is not an instance of TextNode class.
if number is an instance of int type.
if number is an integer and use_grouping is false and decimal_pos is false,
if o is an instance of datetime.datetime object.
if obj is an instance of datetime.datetime,
if obj is instance of models.signals.ModelSignal class,
if offset is an instance of timedelta class,
Use django.utils.timezone.get_fixed_timezone instead. and RemovedInDjango19Warning.   if offset is an instance of timedelta class,
if option_label is an instance of list or tuple,
if other is an instance of BaseContext class,
if other is an instance of Promise class,
if other is an instance of Promise,
if other_dict is an instance of MultiValueDict.
if path is an instance of six.string_types,
if pattern is an instance of RegexURLResolver class,
if pk is an instance of OneToOneField or ForeignKey classes,
if query is an instance of MultiValueDict class,
if query_string is an instance of bytes,
if receiver is an instance of types.FunctionType type,
if regex is an instance of six.string_types class,
if rhs is an instance of dict type and number is true,
if rhs is an instance of SafeData.
if rhs is an instance of SafeText,
if s is an instance of SafeData or EscapeData,
if s is an instance of six.text_type or Promise,
if s is an instance of bytes class,
if s is an instance of object bytes,
if s is an instance of an object bytes.
if s is an instance of bytes or Promise and s._delegate_bytes is true,
if s is an instance of the subclass Exception,
if s is instance of a class Promise,
if s is an instance of an object Promise.
if s is an instance of SafeData.
if s is an instance of an object six.memoryview.
if s is the instance of the object six.text_type,
if self is an instance of nodetype,
if self.regex is not an instance of six.string_types,
if self.data is an instance of datetime.datetime and result of the function is_aware called with an argument self.data evaluates to true,
if self.regex is not an instance of a six.string_types type,
if self.urlconf_name is an instance of a list type and its length is not zero.
if self.var is an instance of Variable class,
if self.warning is an instance of Exception class,
if sep is an instance of unicode,
if server is an instance of six.string_types,
if settings.TIME_ZONE is an instance of six.string_types and pytz is not None,
if slots is an instance of str,
if source is an instance of Group class,
if source is an instance of inst class,
if source is an instance of NonCapture class,
if stream_or_string is instance of bytes type,
if stream_or_string is an instance of bytes,
if stream_or_string is an instance of six.string_types type.
if stream_or_string is an instance of the six.string_types,
if template is an instance of list or tuple types,
if template_name is an instance of list or tuple types,
if timezone is an instance of tzinfo,
if title is an instance of list or tuple,
if unicode_value is an instance of six.text_type,
if v is an instance of list or tuple type,
if val is an instance of tuple,
otherwise if value is an instance of decimal.Decimal, float or six.integer_types,
if value is an instance of bool.
if value is an instance of bytes class,
if value is an instance of datetime.date class,
if value is an instance of datetime.date,
if value is an instance of datetime.datetime class,
if value is an instance of datetime.datetime,
if value is an instance of datetime.time,
if value is an instance of Field class,
if value is an instance of list type,
if valu is an instance of list type,
if value is an instance of six.string_types,
if value is an instance of six.string_types class,
if value is an instance of six.string_types and value is not equal to ALL_FIELDS,
if value is an instance of six.string_types and value converted to lowercase is not equal to strings 'false' or '0',
if value is an instance of six.text_type class,
if value is an instance of str type,
if widget is an instance of the NumberInput,
if widget is an instance of the NumberInput class, and string 'step' is not contained in widget.attrs,
if widget is an instance of NumberInput and string 'step' is not contained in widget.attrs.
if widget is an instance of type class,
for every iso_input in the result,   if iso_input is not contained in val,
substitute the result for klass.   if klass is a subclass of logging.handlers.MemoryHandler base class and string 'target' is contained in config,
if issues is true,
if value under the 'author_email' key of the item dictionary is not None,
if value under the 'author_link' key of the item dictionary is not None,
called with an argument value under the 'updateddate' key of the item dictionary.   if value under the 'author_name' key of the item dictionary is not None,
called with value under the 'pubdate' key of the item dictionary.   if value under the 'comments' key of the item dictionary is not None,
if value under the 'description' key of the item dictionary is not None,
if value under the 'enclosure' key of the item dictionary is not None,
and dictionary with an entry: 'html' for 'type'.   if value under the 'enclosure' key of the item dictionary is not None,
cat for 'term'.   if value under the 'item_copyright' key of the item dictionary is not None,
value under the 'author_name' key of the item dictionary and dictionary with an entry: "http://purl.org/dc/elements/1.1/" for "xmlns:dc".   if value under the 'pubdate' key of the item dictionary is not None,
value under the 'link' key of item dictionary for 'href' and "alternate" for "rel".   if value under the 'pubdate' key of the item dictionary is not None,
and guid_attrs.   if value under the 'ttl' key of the item dictionary is not None,
if value under the 'unique_id' key of the item dictionary is not None,
called with an argument value under the 'pubdate' key of the item dictionary.   if value under the 'updateddate' key of the item dictionary is not None,
if values under "author_name" and "author_email" keys of the item dictionary are both true,
if item_date is true,
if item_type equals FIELD,
if iterator is None,
if j equals to integer -1,
if jan1_weekday equals integer 5, or if jan1_weekday equals integer 6 and call to the function calendar.isleap,
if jan1_weekday is greater than integer 4,
call the method json.__version__.split with an argument '.', if the result is respectively greater than list containing strings '2', '1' and '3',
if second element of k is None,
if k equals a string 'fg',
if k is contained in seen,
if key starts with self.prefix.
if key is contained in cache,
if key is contained in d,
if key is contained in dict_,
if key is not contained in default_settings,
if key is not contained in self,
if key is not contanied in self,
if key_func is not of None type,
if key_prefix is None,
if keys is true,
call the method keyword.iskeyword with an argument new_name, if it evaluates to true,
if klass is not contained in cls.__dispatch,
if value under the 'microsecond' key of the kw dictionary is true,
if kwarg is true,
if kwarg_format is true,
if kwargs is true,
get the value under the 'localize' key of the kwargs dictionary, if it is true and self.widget equals to NumberInput,
if the value of the kwargs dictionary under the key k is not equal to v,
pop value under the 'ipv6' key of the kwargs dictionary, if it is true,
if value under the 'setting' key of the kwargs dictionary is equal to string 'LANGUAGES' or strnig 'LANGUAGE_CODE',
if kwargs is None,
if kwds is true,
if label_output is true,
otherwise substitute self.form.label_suffix for label_suffix.   if label_suffix and contents are both true and last element of contents is not contained in the result of the function _,
if label_suffix is None,
if labels is true and f.name is contained in labels,
if labels is not None,
if lang is None,
if lang_code is true,
if lang_code is contained in _supported and lang_code is not None and result of the function check_for_language,
if lang_code is not None,
if lang_code is not contained in _supported and replacement is contained in _supported,
if language is contained in _DJANGO_DEPRECATED_LOCALES,
if language is not contained in _translations,
if language_code is not containsed in self._app_dict
if language_code is not contained in self._namespace_dict,
if language_code is not contained in self._regex_dict,
if language_code is not contained in self._reverse_dict
if las equals integer 1,
if las equals integer 2,
if las equals integer 3,
if last_bit is true,
if latest_date is None or item_date is greater than latest_date,
if leading is true,
if length of app_labels equals integer 0,
if length of app_labels is equal to integer 1,
if length of app_labels is greater than integer 1 and primary_keys is true,
if length of args is not equal to integer 2,
if length of args is not equal to the sum of the lengths of params and prefix_args,
if length of args is smaller than integer 2,
for second and third element of args, respectively.   if length of args equals integer 2,
if length of args is greater than integer 1,
if length of args is greater than 4.
if length of bits is not zero,
if length of bits is not equal to integer 2,
if length of bits is not equalt to integer 2,
if length of bits is not equal to integer 3,
if length of bits is not equal to integer 6,
if length of bits is smaller than integer 1,
if length of bits is lesser than integer 2,
if length of bits is smaller than integer 2 or second last element of bits is not equal to 'as',
if length of bits is lesser than integer 3 or second element of bits is not equal to string 'as',
if length bits is smaller than intger 4,
if length of bits equals integer 2,
if length of bits equals integer 3,
if length of bits equals integer 4,
if length of bits is greater than integer 2,
if length of bits is greater or equal to intger 2 and second last element of bits is equal to string 'as',
if length of bits is greater or equal to integer 4 and second last element of bits equals sting 'from',
if length of bits is not integer 2 or 3,
if length of compressed is lesser than length of data decremented by 1,
and result of the function humanize called with an argument fixture_dir.   if length of fixture_files_in_dir is greater than 1,
if length of fks_to_parent equals integer 1.
and, if f.rel.toequals parent_model or f.rel.to is contained in result of the call to the method parent_model._meta.get_parent_list.   if length of fks_to_parent is integer 1,
if length of hextet is greater than integer 1,
if lengths of initial and data are not the same,
if lengths of initial and data are equal,
if length of key is greater than MEMCACHE_MAX_KEY_LENGTH,
slice language from (p+1)-th index to the end, calculate the length of the obtained segment, if it is greater than integer 2,
is length of list_ equals integer 0,
if length of list_ equals integer 1,
if length of name is greater than integer 255,
if lengths of new_operations and operations are the same,
if length of parts is greater than integer 1.
if length of parts is greater than integer 1 and last element of parts is contained in self.compression_formats,
if length of password is greater than inner.block_size,
if length of s is greater than integer 13,
if length of self._cache is greater or equal to self._max_entries,
if length of self.dicts is equal to an integer 1,
call the method self.namelist, if the length of the result is not integer 1,
if length of t equals to integer 2,
if length of t is greater than integer 1,
if length of tablenames is greater than zero,
if length of unique_check equals integer 1,
if lengths of val1 and val2 are not equal,
if length of value is not equal to integer 1,
Use SplitDateTimeField instead.', RemovedInDjango19Warning and stacklevel set to integer 2.   if length of value is not equal to integer 2,
if length of value is greater or equal to integer 2 and first and last elements of value are an empty string,
if length of words is greater than length,
if the length of variable m is not divisable by 4
Check if the length of the variable shell is greater than or equal to 100 
check if command-line arguments are not 3
check if there are not 3 command-line arguments
if the number of  system arguments is lower than 2
if the number of arguments is lower than 3
if the number of arguments is less than 3
if the number of arguments is greter than 3
if level is not None,
if level is not contained in logging._levelNames,
if lib is true,
if limit is None or length of x is lesser than or equal to limit,
if limit_choices_to is not None,
if line is true,
call the method line.lstrip, if the result starts with TRANSLATOR_COMMENT_MARK,
if last element of line is newline or carriage return character,
if link is not None,
if literal_match is true,
if loader is not None,
if locales in not empty,
if locales is true,
if localized_fields equals ALL_FIELDS, or if localized_fields is true and f.name is contained in localized_fields,
if localized_fields is not None,
and directory_permissions_mode set to None.   if location is None,
if location is None,
if locations is not empty,
if log is contained in child_loggers,
if logging_config is true,
if logging_settings is true,
and value under the unique_for key of form.cleaned_data dictionary is not None,   if lookup equals a string 'date',
if lookup_view is contained in self._callback_strs,
if m is true,
call the function m.group, if the result evaluates to true,
if m is None,
if m is not None,
if m and n are not None,
if match is true,
host ends with '.' and host ends with pattern or host is equal to all but first elements of pattern,   substitute boolean true for match, otherwise substitute boolean False for match.   if match is true,
if max_age is not None,
if max_length is not None,
if max_num is None,
if max_value is not None,
if maxsize equals integer 0,
if media is true,
if mem_args is contained in cache,
if member is a directory,
if memo is None,
if message is true,
if message is not None,
if message is not None
if message_context is true,
if first element of message_context equals to character '"',
if meta is None,
if middle ends with punctuation,
if middle starts with opening,
if migration.replaces is true,
with '%s' substituted for app_label, as arguments.   if migration_name equals to string 'zero',
if mime_encode is true,
if mimetype is None,
if min_length is not None,
if min_num is None,
if min_value is not None,
new_class.declared_fields.keys.   if missing_fields is true,
if model is contained in created_models,
if model is contained in excluded_models,
if mode is not contained in app_list_value,
if model_list is None,
if call to the function module_has_submodule with app_config.module and "management" evaluates to True.
if call to the function module_has_submodule with 2 arguments: app_config.module and module_to_search evaluates to true,
if months is true,
if msg is true,
if msgs is true,
if name is true,
if name converted to lower case equals to string 'subject',
convert name to lower case if it equals to string 'from' or 'to,
convert name to lower case, if it is contained in ADDRESS_HEADERS,s
if name starts with an string '.',
if name equals a string 'content-disposition',
if name equals a string 'regex',
if name equals string "_wrapped",
if name is contained in existing,
if name is contained in lib.filters.
if name is contained in lib.tags,
if name is contained in MEDIA_TYPES,
if name is None,
otherwise name is None.   if name is None,
if name is None and compile_function is None,
if name is None and filter_func is None,
if name is not None,
if name is not contained in data,
if name is not contained in logging._handlers,
where '%s' is replaced with name.   if name is not contained in parser._namedCycleNodes,
if namespaces is true,
if neg is true,
if new is None,
if new_attr is None,
if new_conn_created is true,
if new_mod is None,
if new_name is not equal to col_name,
if new_name ends with a string '_',
if new_name ends with string '_id',
call the method new_name.find, with an argument string '__', if it evaluates to greater or equal than integer 0,
if new_name starts with a string '_',
if first element of new_name is digit,
if new_name is contained in used_column_names,
if new_value equals value,
if newretval is not None,
if next_item is true and next_item is an instance of list or tuple type,
call the method node.getElementsByTagName with an argument string 'None', if it evaluates to true,
call the method node.hasAttribute with string 'pk' as an argument, if it evaluates to true,
if node.must_be_first is true and nodelist is true,
if nodelist is true,
if nodelist.contains_nontext is true,
call the method nodelist.get_nodes_by_type with an argument ExtendsNode, if it evaluates to true,
if nodelist_empty is None,
if _cached_filenames is empty and settings.USE_I18N is True,
if _cookie_allows_colon_in_names is False,
if _cookie_encodes_correctly is boolean False,
call the function _is_shorthand_ip with an argument ip_str, if it evaluates to false,
if _serializers is false,
f _serializers is false,
do not perform the following only if bits.scheme and bits.netloc are both true,
if self.data and self.files are both False,
if self.inverse_match equals to return value of the self.regex.search method converted to boolean, called with argument force_text(value),
if value is boolean False or boolean True or value is None or value is an empty string, do not perform the following,
if allow_overwrite is boolean False and call to the os.access function with arguments new_file_name and os.F_OK evaluates to boolean True,
if answer is false,
if app_config.path is true,
if app_labels is false,
if args is true,
if fourth element of attr_list and termios.ECHO are both true,
use length of result as an argument for the call to the function six.text_type, substitute the result for width.   if autoescape is false, if value is an instance of SafeData,
if basedirs is empty,
if bits is false,
if boundary is false or return value of the method cgi.valid_boundary called with an argument boundary evaluates to false,
if buf is false,
if bytes is false,
get 'render' attribute of template object, if it is callable,
if original_lookup and lookup_view are not callable objects,
if view_function is not a callable function,
substitute it for callback, if the attribute doesnt exists, callback is None.   if not callback,
otherwise add boolean False, for every candidate in the result perform following,   if candidate is false,
if changed is false,
if it exists or None if not and convert_apps set to app_labels, if it exists or None if not, substitute the result for changes.   if changes is false and self.verbosity is greater than, or equal to iteger 1,
call the function check_for_language with an argument lang, if it evaluates to false,
if chunk is empty,
slice chunk list to get the last rollback elements, if the new list is not empty,
if chunk_size is false,
if chunks is false,
if cleaned_line is false,
if cls is false,
if commit is true,
if commit is false,
if config_string is false,
if content_type is false,
return the value under the 'CONTENT_TYPE' of the META dictionary, if it doesnt exist return an empty string,   substitute the result for content_type.   if content_type doesnt start with string 'multipart/',
if context_instance is false,
if data is false,
if data is empty.
if data is false and initial is true,
if dictionary is false,
if digest is false,
get the value under the app_label key of the directory_created dictionary, if exists and it is false,
if dklen is false,
if e.connection_reset is false,
call the email_message.recipients method, if it evaluates to false,
if email_messages is false,
if encoding is false.
if etags is false,
if expires is false,
if ext doesnt start with '.' character,
if ext is false and content_type is true,
if extra_context is false,
if not field_value is None.   if f.blank is false and form_field.required is false and field_value is contained in form_field.empty_values,
if f.editable is true and f is an instance of models.AutoField, or f.name is not contained in cleaned_data,
if field.show_hidden_initial is false,
if field_desc doesnt end with '(',
if field_name is false,
if file_name is false,
if filename is empty,
if fname doesnt start with self._dir and fname file path doesnt exists,
if function form.has_changed evaluates to false,
call the form.is_valid method, if it evaluates to false,
call the function formset.is_valid, if it evaluates to false,
if found is false and, line is false or return value of the function plural_forms_re.search called with an argument line is false,
func.is_usable in false,
if func_name is false,
get 'editable' attribute from object f, if it doesnt exists or its true,
get 'nodelist' attribute from self object. if it doesnt exists return boolean False, if the result evaluates to false,
if c doesnt have an attribute '__call__' and types has an 'ClassType' attribute and type of c is not equal to types.ClassType,
if c doesnt have an attribute '__call__', and types has an attribute 'ClassType', and type of c is not equal to types.ClassType,
if callback doesnt have '__name__' attribute,
if content has an 'chunks' attribute,
if e doesnt have an 'django_template_source' attribute,
if f doesnt has an 'save_form_data' attribute,
if func doesnt have a attribute '__name__',
if mail doesnt have an 'outbox' attribute,
if '_meta' is not an attribute of obj,
if other_dict doesnt have an '__getitem__' attribute,
if package doesnt have an 'rindex' attribute,
if parser doesnt have an '_namedCycleNodes' attribute,
if self doesnt have an '_body' attribute,
if self doesnt have an '_deleted_form_indexes' attribute,
if self does not have an attribute named '_dimensions_cache'.
if self does not have '_files' attribute,
if self doesnt have an attribute '_fqdn',
if self has an attribute '_object_dict',
where '%s' is replaced with self.__class__.__name__.   if self doesnt have an '_ordering' attribute,
if self does not has an '_post' attribute.
if self doesnt have '_queryset' attribute,
RemovedInDjango19Warning and integer 2 as arguments.   if self does not have an '_request' attribute,
if self does not have 'bad_cookies' attribute,
if template has an attribute 'render',
if template doesnt have a 'render' attribute,
languages set to a list with an element self.__locale, codeset set to a string 'utf-8' and fallback set to use_null_fallback,   substitute the result for translation.   if translation has an attribute '_catalog',
if values has an attribute '__len__',
substitute the result for value under the index key of the hextets dictionary.   get the value under the index key of the hextets dictionary, if it is false,
call the method host_validation_re.match with an argument host.
call the function include_is_allowed with an argument filepath, if it evaluates to false,
if incremental is true,
if indent is false,
and third element of the return value of the function sys.exc_info.   if inhibit_post_migrate is false,
convert ip_str to lowercase, if it doesnt start with a string '0000:0000:0000:0000:0000:ffff:',
split ip_str by ':', if last element of the result is not equal to hextet.
call he function is_valid_ipv6_address with an argument ip_str, if it evaluates to false,
call the function is_valid_ipv6_address with an argument value, if it evaluates to false,
call the function isabs with an argument path, if it evaluates to false,
if candidate is not an instance of six.string_types,
if cookie is not an instance of http_cookies.BaseCookie,
result of multiplication of integers: 60,60,24,365, and return value of ungettext_lazy with 2 arguments: '%d year', '%d years',   result of multiplication of integers: 60,60,24,30, and return value of ungettext_lazy with 2 arguments: '%d month', '%d month',   result of multiplication of integers: 60,60,24,7, and return value of ungettext_lazy with 2 arguments: '%d weeks', '%d weeks',   result of multiplication of integers: 60,60,24, and return value of ungettext_lazy with 2 arguments: '%d days', '%d days',   result of multiplication of integers: 60,60, and return value of ungettext_lazy with 2 arguments: '%d hours', '%d hours',   result of multiplication of integers: 60, and return value of ungettext_lazy with 2 arguments: '%d minutes', '%d minutes',   if d is not an instance of datetime.datetime,
if data is not an instance of basestring,
if e is not an instance of CommandError class,
if error is not an instance of ValidationError,
if fk is not an instance of ForeignKey class, or fk.rel.to is not equal to parent_model,
if i is not an instance of six.integer_types class,
if index is not an instance of six.integer_types or tuple type,
if initial is not an instance of the list type,
if item is not an instance of list or tuple class,
if list_ is not an instance of tuple or list types and length of list_ is not equal to integer 2,
if message is not an instance of the ValidationError class,
if messages is not an instance of the ValidationError class,
if node is not an instance of ExtendsNode,
if node is not an instance of TextNode,
if s is not an instance of the object Exception,
if s is not an instance of the object six/string_types,
if s is not an instance of the object six.string_types,
if self.file_path is not an instance of six.string_types,
if self.object is not an instance of list type,
if stream_or_string is not an instance of bytes or six.string_types,
if urlconf_name is not an instance of six.string_types class,
if value is not an instance of bytes or six.text_type classes,
if value is not an instance of list or tuple types,
if vale is not an instance of ConvertingDict and value is an instance of dict type,
if value is not an instance of list type,
if var is not an instance of six.string_types,
if viewname is not an instance of the six.string_types object,
otherwise it is boolean False.   if kwarg_format is false,
call the method language_code_re.search with an argument accept_lang, if it evaluates to false,
call the method language_code_re.search with an argument lang_code, if it evaluates to false,
if last_row doesnt ends with row_ender,
if length of empty_label is not equal to integer 3.
if length of self.backout is greater than zero,
if lib is false,
if locale_dir is false,
if lookup is false,
if m is false,
if m is not False, None is considered False,
if m is false and p is lesser than integer 0,
if match is true,
if there is no match,
check if matched_a_byte is equal to 0
if matches is false,
if model._meta.proxy is false and return value of the function router.allow_migrate called with arguments using and model is true,
if model_identifier is false,
if name is false,
if nesting is false,
if new_method is false and old_method is true,
if now is false,
if old_method is false and new_method is true,
if old_style_list is false,
if only_initial is false,
get the value under the 'addrport' key of the options dictionary, if it is false,
get the value under the 'no_startup' key of the options dictionary, if it evaluates to false,
if call to the method os.access with arguments: filename and os.W_OK, evaluates to false,
replace '%s' with self.file_path and err, respectively.   if self.file_path file is not writable,
if call to the function os.path.exists with argument directory evaluates to boolean False,
if filename path doesnt exists,
if potfile file path doesnt exist,
if self._dir path doesnt exists,
if self._dir file path does not exists,
if self.default_locale_path directory doesnt exists,
if file path top_dir doesnt exists,
substitute it for basedir.   if basedir is not a directory,
if directory is not an directory,
if migrations_directory is not a directory,
if init_path is not a file,
if pythonrc is not a file,
if package is false,
if parent is false,
if target_dir path doesnt exists,
if path_info is empty,
if plan is not true,
if prefix is false,
if prefix doesnt end with character '/',
if prefix is false, and self doesnt have '_callback_str' attribute,
if priority is false,
and string '~/.pythonrc.py' as tuples second element.   if pythonrc is true,
if qs.ordered is false,
call the method re.search with 2 arguments: raw string '^[_a-zA-Z]' and name, if it evaluates to false,
and app_or_project if app_or_project equals to string 'app', if not, it is replaced with 'a' and app_or_project.   call the method re.search with 2 arguments: raw string '^[_a-zA-Z]\w*$' and name, if it evaluates to false,
if regex_match is false,
if renamed is boolean False,
if the result to the method call response.has_header, with string 'Cache-Control' as an argument is boolean False,
for value of dictionary response under the key 'Last-Modified'.   if call to the function response.has_header with 'Expires' as argument returns boolean False,
if call to the function response.has_header with string 'Last-Modified' as an argument returns boolean False,
if return value of function response.has_header with string 'Vary' as argument is boolean False,
if response.streaming is boolean False,
if rest is not False, None is considered False,
if roots is false,
call the method router.allow_migrate with 2 arguments: database and cache.cache_model_class, if it evaluates to false,
if script_url is false,
if self is false,
if self._cached_loaders is false,
if call to the method self._css.get with an argument medium evaluates to false,
evaluate the method self._has_expired with argument key, if it as False,
if call to the _has_expired method with argument key evaluates to boolean False,
evaluate self._is_expired method with f as argument, if the result is false,
if self._is_rendered is false,
if self._is_rendered is false.
if not self._mutable,
if self._populated is false,
if self._upload_handlers is false,
if self.activated is boolean False,
if self.addr is false,
if self.allow_empty_file and file_size are both false,
if self.allow_multiple_selected is false,
if self.can_import_settings is false,
if self.close_called is False,
if file self is not closed,
call the method self.compile_filter_error with 2 arguments: token and e, if it evaluates to false,
call the method self.compile_function_error with 2 arguments token and e, if it evaluates to false,
if self.connection is false,
if self.data is false,
match rest string with self.DIGIT_PATTERN regex, if it evaluates to false,
if self.dry_run is false,
if self.fail_silently is boolean False,
if self.fail_silently is false,
if self.first is false,
if self.form.is_bound is false,
if self.initial_forms is false,
if self.invoked_for_django is false,
if self.is_bound is false,
if self.is_required is false,
called with an argument value, substitute the result for value under the 'initial' key of the substitutions dictionary.   if self.is_required is false,
called with 3 arguments: data, files and name, substitute the result for upload.   if self.is_required is boolean false and call to the method value_from_datadict from the instance of CheckboxInput class,
call the method self.is_valid, if it evaluates to false,
if call to the method self.is_valid, evaluates to false or self.can_delete is boolean false,
if call to the self.is_valid method evaluates to false or self.can_order is false,
if self.keep_pot is false,
if self.leave_locale_alone is false,
call the method self.port.isdigit, if it evaluates to false,
call the method self.recipients, if it evaluates to false,
if self.render_value is false,
if self.required is false,
if self.timezone is false,
if self.timezone is true,
if self.use_argparse is false,
and self._current for 'fields'.   if self.use_natural_primary_keys is false or obj doesnt have a 'natural_key' attribute.
if self.use_natural_primary_keys is false and obj doesnt have 'natural_key' argument.
and unpacked dictionary connection_params.   if self.use_ssl and self.use_tls are false,
call the self.user_regex.match method with an argument user_part, if it evaluates to false,
call the method self.valid_value with an argument val, if it evaluates to false,
if settings.ADMINS is false,
if settings.configured is false,
if not settings.DEBUG is true and settings.ALLOWED_HOSTS is false,
call the function settings.is_overridden with argument string 'MIDDLEWARE_CLASSES', if the result is boolean False,
if call to the settings.is_overridden with string 'TEST_RUNNER' evaluates to boolean False.
if settings.MANAGERS does not exist,
if shown is an empty set,
if squash is false,
if strict is false,
if support_legacy is false,
if supported_platform is False or is_a_tty is False,
call the function supports_color, if evaluates to False,
if sys.warnoptions is false,
call the function table_name_filter with an argument table_name, if it evaluates to true,
substitute the result for tag.   if tag is false or current_len is greater or equal to truncate_len,
if template_dirs is false,
if template_name_list is false,
if templatetags_modules is false,
if token.contents is false,
call the method unicodedata.combining with an argument char, if it evaluates to false,
if unused_char is false,
if url is false,
if first element of the url_fields is false,
if second element of url_fields is false,
if url_info.netloc is false and url_info.scheme is true,
if use_workaround is boolean False,
if return value of the method UserModel._default_manager.exists is false and value under the 'interactive' key of the options dictionary is true,
if using_sysrandom is false,
if value is false,
if value is true,
if value is false and self.required is true,
if value is false or character '@' is not contained in value,
if value is false or value is not an instance of list or tuple types,
if value is false or for every v in value every v is contained in self.empty_values,
if var is false or whitespaces are contained in var,
if want_unicode is false,
if widget is false,
if not_installed_models is true,
if now equals to boolean True and now is not an instance of datetime.datetime,
if ns_pattern is true,
if num is greater than self._max_entries,
if num_entries is lesser than self._max_entries,
if num_loopvars is not equal to len_item,
if num_repl is greater than integer 0,
if number is lesser than integer 1,
if number equals integer 1,
if number equals a integer 1 and self.allow_empty_first_page is true,
if number is greater than self.num_pages,
substitute the length of the resulting list for number_equal.   if number_equal is greater than integer 40,
if o.microsecond is true,
if o is contained in opt_dict,
if obj.pk is None,
if obj_list is None,
if obj_pk is not None,
if objects_in_fixture equals integer 0,
if offset is not None,
if old_attr is None,
if old_field_name is true,
if old_handler is not None,
if old_style_list is true,
if only_django,
if only_new is true,
if opname is not contained in roots,
if second element of options is true,
where '%r' is replaced with options.   if option equals a string 'with',
if option is contained in options,
if option_value is contained in selected_choices,
if option_value is None,
if options is true,
if value under the 'list_tags' key of options dictionay is true,
if value under the 'liveserver' key of the options dictionary is not None,
if value under the 'load_initial_data' key of the options dictionary is true,
if the key doesnt exists use sys.stdout as an argument.   if value under the 'no_color' key of the options dictionary.
get the value under the 'no_location' key of the options dictionary, if it is true,
get the value under the 'no_wrap' key of the options dictionary, if it is true,
get the value under the 'use_default_ignore_patterns' key of the options dictionary, if it is true,
get the value under the 'list' key of options dictionary, if key doesnt exist return False, if the return value is True,
if the value under the 'test_flush' key of the options dictionary exists,
if options.pythonpath is true,
if options.settings is true,
if options.traceback is true or e is not CommandError instance,
if values under the 'app_label' and 'migration_name' keys of the options dictionary are True,
if value under the 'errlog' key of options dictionary is true,
if value under the 'method' key of the options dictionary equals to string 'perfork' or 'fork',
if value under the 'outlog' key of options dictionary is true,
if value under 'plain' key of the options dictionary is true,
if value under the 'umask' key of options dictionary is true,
if value under the 'verbosity' key of the options dictionary is greater than zero,
convert the value under the 'daemonize' key of options dictionary to lowercase, if it equals to string 'true', 'yes' or 't',
if value under the 'daemonize' of options dictionary is None,
if value under the 'socket' key of the options dictionary is false and values under the 'host' and 'port' keys of the options dictionary are true,
unpacked dictionary daemon_kwargs.   if value under the 'pidfile' of options dictionary exists,
if opts is true,
or the 'exclude' attribute is prohibited; form %s needs updating., where '%s' is replaced with name.   if opts.fields equals ALL_FIELDS,
if opts.fields is None and opts.exclude is None,
if opts.managed is true,
if opts.model is true,
if opts.model is None.
if ascii value of char is smaller than integer 33 or is equal to integer 127,
if origin is true,
if value under the 'DJANGO_SETTINGS_MODULE' key of os.environ dictionary exists.
if value under the "RUN_MAIN" key of the os.environ dictionary equals to string "true",
fork a child process, if the result equals integer 0,
if os.name equals to 'nt',
if module os field name equals to string 'nt',
if os.name equals string 'nt',
if os.name equals string 'posix',
call the function os.path.abspath with an argument dirpath, if it starts with return value of the method os.path.dirname,
use it as an argument for the call to the glob.iglob, for every candidate in result,   call the method os.path.basename with an argument candidate, is result is contained in targets,
if django_po file path exists,
if file filename exists,
if fname file path exists,
if os.path.exists function with argument name, evaluates to boolean True,
append the result to old_app_dirs.   if file path old_app_dir exists,
if pofile path exists,
if pot_path file path exists,
if potfile fie exists,
if self.file_path file path exists and it is not a directory,
if file path sql_file exists,
if fixture_name is an absolute file path,
if 'locale' is a directory,
if app_dir is a directory,
if entry is a directory,
join 'conf' and 'locale' into a file path, if it is a directory,
join path and entry into a file path, if it exists,
if template_dir is directory,
if f is a file,
if fext is a file,
if os.path.sep is contained in fixture_name,
if out_log is true,
if output is true,
if over_bytes is true,
find index of the occurrence of string ':_(' in p, if its greater or equal to integer 0,
if p.image is not empty,
use the result as an argument for the call to the function mark_safe, return the result.   if p equals integer 0,
if p is greater or equal to integer 0,
if padding does not equal 0
if padding is equal to True
check if padding is equal to True
if padding is True
if palette equals value under the NOCOLOR_PALETTE key of the PALETTES dictionary,
if param is true,
if param is contained in unhandled_params,
substitute first element of the result for param and value.   if param is not in params and varkw is None,
get the value under the 'filename' key of the params dictionary, if it is true,
if first element of params equals a string 'context',
if parse_until is true,
if parse_until is None,
substitute the result for parsed.   if parsed.scheme is true and parsed.scheme is not contained in self.allowed_schemes,
if part is contained in PALETTES,
if last element of parts is contained in self.serialization_formats,
if file path absolute_path exists,
into a file path, substitute it for new_path.   if new_path file path exists,
if expanded_template is a directory,
if path_to_remove is file,
if path starts with string 'http://' or string 'https://' or with string '/',
if path is None,
if path is not initialized,
sum of the result of the function time.time and max_age, substitute it for 'expires' key of the previously returned dictionary.   if path is not None,
if path is not contained in self._js,
if pathext is None,
if pattern.app_name is true,
and pattern.default_args.   if pattern.name is not None,
if pattern.namespace is true,
if pickled is not None.
if last element of pieces is true,
and pk.rel.parent_link is true and function pk_is_not_editable called with an argument pk.rel.to._meta.pk evaluates to true,   if function pk_is_not_editable called with an argument pk evaluates to true, or pk.name is not contained in form.fields,
if pks is true,
if plan is true,
if plan_node is contained in loader.applied_migrations,
if plan_node is not contained in shown and first element of plan_node equals to app_name,
if plen is lesser than difference of alen and dlen, or if plen is greater than alen,
if pop_context is true,
if pos is greater than or equal to last,
if prefix is None,
if primary_keys is true,
substitute the result for queryset.   if primary_keys is true,
if print_ is None,
if priority is true,
if process_all is true,
if processors is None,
if propagate is not None,
if props is true,
if proto is greater than or equal to integer 2,
if protocol is not equal to string 'both' and unpack_ipv4 is true,
if push is not None,
if PY3 is true,
return it.   if PY3 is true,
if qs._result_cache is not None,
if queryset is None,
call the method questioner.ask_merge with an argument app_label, if it evaluates to true,
if quote_double_quotes is true,
if r ends with string '+00:00',
call the function re.search with 3 arguments: string '^%s%s', with '%s' replaced for prefix_norm and pattern, respectively,
if reason is not None,
if record.exc_info is true,
if recursive is true,
apply operator.eq function to elements of level iterable, until level is reduced to a single value, if the result is true,
if refto is contained in known_models,
if refto is contained in seen_models,
inverse_match set to None and flags set to None.   if regex is not None,
if register_to is true,
otherwise call the method table2model with second element of the i-th row of relations and substitute it for rel_to.   if rel_to is contained in known_models,
if related is true,
if related_att is not None,
if relative_dir is true,
if remaining is None,
where '%r' is replaced with first element of bits.   if remaining_bits is true,
if renderer is true,
if representative is None,
if request._post_parse_error is true,
if request.method equals to string 'HEAD',
required set to boolean True, widget set to None, label set to None, initial set to None, help_text set to an empty string,   to_field_name set to None, limit_choices_to set to None, unpacked list args and unpacked dictionary kwargs.   if required is true and initial is not None,
if resolved_path is true,
if resolver.urlconf_module is None:
if resource_string is not None,
if response is True,
if call to the method response.has_header with string 'Cache-Control' as an argument returns boolean True,
if call to the function response.has_header with argument 'Vary' returns boolean True,
if call to the function response.has_header with string 'Vary' as an argument returns True,
if response.streaming is True,
if response is None,
if result is true,
if mode equals to string 'add' and current_expires is lesser than now, or mode equals to string 'set', and result is true,
and encoding, substitute the result for result.   if result is not None,
if result is not None,
if result is not root,
if ret is true.
if retval is true,
iter_format_modules called with 2 arguments: lang and settings.FORMAT_MODULE_PATH, substitute the result for modules.   if reverse is true,
check if rot is less than the value of 1
if seventh element of row is true,
if row is None,
returns the result of the call the method d._get_pk_val, if not return d, put all the generator items into a tuple row_data.   if row_data is true and None is not contained in row_data,
if row_data is contained in seen_data,
use the result as an argument for the call to the self.stdout.write method.   if run_syncdb and executor.loader.unmigrated_apps exist,
append it to the string "  Target specific migration: ", use it as the argument for the call to the self.style.MIGRATE_LABEL method,   call the self.stdout.write method with previous return value as an argument.   if run_syncdb and executor.loader.unmigrated_apps is true,
if first element of s is not contained in "\"'" or last element of s is not equal to first element of s,
if s equals a string '"',
if s_len is greater than length,
if safe is true,
if safe is true and arg is not equal to string ';',
and unpacked dictionary kwargs.   if safe is true and data is not an instance of dict type.
if safe is not None,
if safe_input is true,
if saved_locale is not None,
if scheme is not contained in self.schemes,
if schemes is not None,
if script_url is true,
if second_item is an empty list,
if secret is None,
if secure is true,
if self.__dispatch is None.
if self.__language equals settings.LANGUAGE_CODE,
if self.__language equals settings.LANGUAGE_CODE or self.__language equals a string "en-us",
if self._callback is not None,
if self._changed_data is None,
if self._content_length equals integer 0,
if self._count is None,
if self._cull_frequency equals to integer 0.
if self._delegate_bytes is true,
if self._delegate_bytes and six.PY2 are both true,
if self._done is true,
if self._encoding is None,
if self._errors is None,
if self._fname is None:
evaluate self._has_expired with argument key, if the result is True,
if self._is_rendered is true,
call the method self._isdst with an argument dt, if it evaluates to true,
call the nethod self._isdst with an argument dt, if it evaluates to true,
if self._leftover is true,
if self._non_form_errors is None,
if self._num_pages is None,
if self._options exists,
if self._pk_field equals self.fk,
if self._read_started is true,
if self._read_started is true and self doesnt have an '_body' attribute.
if self._request_middleware is None,
call the method self._should_delete_form with an argument form, if it evaluates to true,
call the method self._should_delete_form with an argument, if it evaluates to true,
if self._validate_unique is true,
if self._varlist is true,
if self._wrapped is contained in empty,
if self._wrapped is empty,
if self.activated is boolean True,
if self.active_readers equals integer 0 and self.waiting_writers is not equal to integer 0,
if self.active_writers and self.waiting_writers both equal to integer 0,
if self.active_writers equals integer 0 and self.waiting_writers equals integer 0 and self.active_readers equals integer 0,
if self.addr is true,
if self.allow_files is true,
if self.allow_folders is true,
if self.alternatives is true,
if self.app_label is true and app_config.label is not equal to self.app_label,
default is boolean False, and help is a string "Don't colorize the command output.".   if self.args is true,
if self.asvar is true,
if self.asvar is None,
if self.attachments is true,
if self.base_url is None,
if self.body is true,
call the method self.callback with an argument record, if the result evaluates to true,
if self.can_delete is true,
label set to return value of the function _ called with an string 'Order' and required as boolean False.   if self.can_delete is true,
if self.can_delete is true and call to the method self._should_delete_form with an argument form, evaluates to true,
if self.can_delete is true and call to the function self._should_delete_form with an argument form evaluates to true,
if self.can_import_settings is true,
if self.can_order is true,
substitute the result for value under the 'To' key of msg dictionary.   if self.cc is true,
if self.cdata_tag is not None,
call the method self.check_test with an argument value, if it evaluates to true,
if self.choices is true,
if value under the name key of self.cleaned_data dictionary is not None,
if self.cmd._called_from_command_line is true,
call the self.compare method with arguments cleaned and self.limit_value, if it evaluates to true,
if self.connection is true,
if self.connection is None,
if self.connection_reset is true,
if self.connector equals conn_type,
if self.count equals a integer 0 and self.allow_empty_first_page is false,
if self.current_token is not EndToken,
if self.data.day equals integer 11, 12 or 13,
if self.data.hour equals integer 0,
if self.data.hour is greater than integer 11,
if self.data.hour is greater than inreger 12,
if self.data.minute equals integer 0,
if self.data.minute equals integer 0 and self.data.hour equals integer 0,
if self.data.minute equals integer 0 and self.data.hour equals integer 12,
if self.deactivate is true,
if self.decimal_places is not None,
code set to string 'max_digits' and params set to a dictionary with an entry: self.max_digits for 'max'.   if self.decimal_places is not None and decimals is grater than self.decimal_places:
if self.directory_permissions_mode is not None,
if self.domain equals to string 'djangojs',
use it as an argument for the call to the function os.path.normpath, substitute the result for django_dir.   if self.domain equals a string 'djangojs',
if self.domain is not equal to string 'django' or string 'djangojs',
call the self.domain_regex.match method with an argument domain_part, if it evaluates to true,
result of the method ProjectState.from_apps with an argument apps and result of the method InteractiveMigrationQuestioner,   called with 2 arguments specified_apps set to app_labels and dry_run set to self.dry_run.   if self.empty is true,
if self.empty_permitted is true and call to the method self.has_changed evaluates to false,
if self.errors is true and self.form has an attribute 'error_css_class',
if self.fail_silently is boolean True,
if value under the 'author_email' key of the self.feed dictionary is not None,
if value under the 'author_link' key of the self.feed dictionary is not None,
called with an argument result of the method self.latest_post_date.   if value under the 'author_name' key of the self.feed dictionary is not None,
if value under the 'feed_copyright' key of the self.feed dictionary is not None,
cat for 'term'.   if value under the 'feed_copyright' key of the self.feed dictionary is not None,
if value under the 'feed_url' key of the self.feed dictionary is not None,
alternate' for 'rel' and value under the 'link' key of self.feed dictionary for 'href'.   if value under the 'feed_url' key of the self.feed dictionary is not None,
value under the 'feed_url' key of the self.feed dictionary for 'href'.   if value under the 'language' key of the self.feed dictionary is not None,
if value under the 'language' key of the self.feed dictionary is not None,
if value under the 'subtitle' key of the self.feed dictionary is not None,
called with an argument result of the method self.latest_post_date.   if value under the 'ttl' key of the self.feed dictionary is not None,
if self.field.cache_choices is true,
if self.field.choice_cache is None,
if self.field.empty_label is not None,
if self.field.label is None,
if self.field.localize is true,
and convert it again to the dictionary, if attrs is false, leave it alone, substitute the result for attrs.   if self.field.required is true and self.form has an attribute 'required_css_class',
if self.field.required is true and self.form has an attribute 'required_css_class' ,
if self.field.show_hidden_initial is true,
if self.file_permissions_mode is not None,
if self.first is true,
if self.fixture_count equals integer 0 and self.hide_empty is true,
if it doesnt exists return value of the function capfirst with an argument self.fk.verbose_name for 'label'.   if self.fk.rel.field_name is not equal to self.fk.rel.to._meta.pk.name,
if self.flags is true and self.regex is not an instance of a six.string_types type,
if self.forms is true,
call the method self.has_header with string 'Content-Encoding' as an argument, if it evaluates to true,
evaluate method self.has_key with key and version as arguments, if the result is true,
if self.help is true,
self.id_for_label is true,
if self.ignore is true and field_name is not contained in model_fields,
if self.initial is true and 'initial' key is not contained in kwargs,
if self.instance.pk is None,
if self.instance.pk is not None,
if self.interactive is true,
if self.is_bound is true,
with an argument i, for 'prefix' and self.error_class for 'error_class'.   if self.is_bound is true,
if self.is_bound is true and i is smaller than self.initial_form_count,
substitute the result for final_attrs.   call the method self.is_checked, if it evaluates to true,
if self.is_localized is true,
if self.is_reversed is true,
call the method self.is_url with an argument template, if it evaluates to true,
for every name and var in return value of the function six.iteritems called with an argument self.extra_context.   if self.isolated_context is true,
if call to the method self.L evaluates to true, and result of the call to the method self.data.month is greater than integer 2,
if self.language is not None,
if self.load_initial_data is not empty,
if self.loaded_object_count is greater than zero,
if self.locale_paths is true,
if self.localize is true,
if self.lookups is not None,
if self.m2m.data and save_m2m are true,
if self.match is None or call to the method self.match_re.search with an argument f, evaluated to true,
if self.match is not None,
if self.max_digits is not None and digits is grater than self.max_digits,
if self.max_length is not None,
if self.max_length is not None and length of file_name is grater than self.max_length,
if self.max_value is not None,
if self.merge and conflicts are both true,
with name_str, use it as an argument to throw an CommandError exception.   if self.merge is true and conflicts is false,
if self.message_context is true,
get the value under the 'CONTENT_TYPE' key of the self.META dictionary, if it starts with a string 'multipart/form-data',
if value under the header key of the self.META dictionary is equal to value,
if self.method is not equal to string 'POST',
if self.min_value is not None,
if self.negated,
if self.no_obsolete is true,
if self.number equals to self.paginator.num_pages,
if self.obj is None,
if self.old_timezone is None,
if value under the 'indend' key of the options dictionary exists and is not None,
get the value under the 'indent' key of self.options dictionary, if it is true,
if value under the 'indent' key of the self.options dictionary is true,
if self.output_transaction is true,
if self.paginator.count equals a integer 0,
if not self.to_field is None.   if self.parent_instance is not None,
if self.parent_name.filters is true or self.parent_name.var is an instance of Variable.
if self.parsed is true,
with new_path and self.style.NOTICE, respectively, write it to self.stderr stream.   if self.paths_to_remove is true,
if self.pk_field,
if self.pos is greater than or equal to self.tokens,
if self.queryset is not None,
if self.require_all_fields is true,
if self.require_all_fields is boolean true,
if self.required is true,
if self.required is boolean true,
required set to required, widget set to widget, label set to label, initial st to initial, help_text set to help_text,   unpacked list args, unpacked dictionary kwargs.   if self.required is true,
if self.required is true and value is false,
if self.save_as_new is true,
and unpacked dictionary kwargs, substitute the result for form.   if self.save_as_new is true,
if self.selected_fields is None or last three elements of field.attname are contained in self.selected_fields:
if self.selected_fields is None or field.attname is contained in self.selected_fields
if self.selected_fields is None or field.attname is contained in self.selected_fields,
if self.sep is not contained in signed_value,
if self.setting is true,
if self.settings_exception is not None,
with all occurrences of '%s' replaced with app_name and model._meta.object_name and e, respectively.   if self.show_traceback is true,
if self.silent is true,
if self.stream is None:
if self.stream is not None,
if self.takes_context is true,
if self.timeout is not None,
if self.timezone is true and call to the method self.timezone.dst with an argument self.data, evaluates to true,
if self.timezone is None,
if self.to_field is true,
if self.to_field_name is true,
if self.translate is true,
if self.use_argparse is true,
if self.use_ipv6 is true and socket.has_ipv6 is false,
if self.use_natural_foreign_keys is true and field.rel.to has an 'natural_key' attribute.
if self.use_natural_foreign_keys is true and field.rel.to has an 'natural_key' attribute,
if self.use_natural_foreign_keys is true and field.rel.to has an attribute 'natural_key',
if the key doesnt exists substitute boolean False for self.use_natural_keys.   if self.use_natural_keys is true,
if self.use_ssl and self.use_tls are boolean True,
if self.username and self.password are true,
if method self.validate_domain_part with an argument domain_part evaluates to true,
if self.variable_name is true.
substitute the result for block_content.   if self.verbatim is true and block_content equals self.verbatim,
if self.verbosity is greater than integer 0,
if self.verbosity is greater than integer 1,
with arguments al and mn, for every al, mn in executor.loader.graph.forwards_plan method return value called with 2 arguments:   migration.app_label, migration.name, only if al equals migration.app_label.   if self.verbosity is greater than integer 0 or self.interactive is true,
if self.verbosity is greater than integer 1,
if self.verbosity is integer 1,
substitute the result for plural_form_line.   if self.verbosity is greater than integer 1,
if self.verbosity is greater of equal to integer 1,
if self.verbosity is greater or equal to integer 1,
if self.verbosity is greater or equal to integer 1.
interactive set to boolean False, database set to db, reset_sequences set to boolean False, inhibit_post_migrate set to boolean True.   if self.verbosity is greater or equal to integer 1,
if self.verbosity is greater or equal than integer 1,
with all occurrences of '%s' replaced with app_name and model._meta.object_name, respectively.   if self.verbosity is greater or equal to integer 1,
use the result as the argument for the call to the sql.extend method.   if self.verbosity is greater or equal than integer 1 and sql is true,
if self.verbosity is grater than, or equal to integer 2,
if self.verbosity is greater or equal to integer 2,
otherwise ser_fmts is a list containing ser_fmt.   if self.verbosity is greater or equal to integer 2,
if self.verbosity is greater or equals to integer 2.
and returns x striped of the surrounding whitespaces, extend the extra_files with the mapped list.   if self.verbosity is greater or equal to integer 2,
if self.verbosity is greater or equal to integer 2.
if self.verbosity is greater or equals integer 2 and fixture_files_in_dir is false,
if self.verbosity is greater or equal to 3,
if self.verbosity is greater or equal to integer 3,
if self.waiting_writers is not equal to integer 0,
if self is not contained in context.render_context,
if self is not contained in state_frame,
if self_closing is true or tagname is contained in html4_singlets,
if sender is true and sender attribute 'handles_files' is also True,
if sent is true,
if sep is None,
if sep is not None,
substitute the result for sequence_sql.   if sequence_sql is true,
if serializers is None,
if serializers is None and _serializers is false,
if return value of the self.is_secure method is true and server_port is not equal to string '443',
if the union of the kwargs and defaults dictionary keys converted into sets is not the same as the union of the defaults and prefix
if settings.configured is true,
if settings.configured,
and 'request with value request, respectively use the previous as the arguments for the call to the logger.warning function.   if settings.DEBUG is True,
status code' with integer value of 400 and 'request' with value request, respectively use the previous to call the function security_logger.error.   if settings.DEBUG is True,
extra is an dictionary with two pairs of elements 'status_code' with value 500, and 'request with value request,   respectively use the previous as the arguments for the call to the logger.error function.   if settings.DEBUG is True,
if settings.DEBUG is true,
if settings.DEBUG is true and value of the request.META dictionary under the 'REMOTE_ADDR' key is contained in settings.INTERNAL_IPS,
if settings.DEBUG_PROPAGATE_EXCEPTIONS is True,
if settings.FILE_UPLOAD_TEMP_DIR is true,
if settings.FORCE_SCRIPT_NAME is not None,
call the function settings.is_overridden with argument string 'ADMINS', if it evaluates to boolean True,
call the function settings.is_overridden with argument string 'MANAGERS', if it evaluates to boolean True,
call the function settings.is_overridden with argument string 'TEMPLATE_LOADERS', if it evaluates to boolean True,
if settings.SECURE_PROXY_SSL_HEADER is true,
if settings.SETTINGS_MODULE is true,
if settings.STATIC_URL is None,
if settings.TEMPLATE_DEBUG is true,
if settings.TEMPLATE_DEBUG and display_name are both true,
if settings.TEMPLATE_DEBUG is true and origin is None,
if settings.TEMPLATE_STRING_IF_INVALID is true,
if settings.USE_ETAGS is True and function call response.has_header with string 'ETag' as argument returns boolean False,
if settings.USE_I18N is true,
if eather one of settings.USE_I18N or settings.USE_L10N is True,
if settings.USE_L10N is true,
if settings.USE_L10N is true and value is an instance of six.string_types,
if settings.USE_THOUSAND_SEPARATOR is true,
if settings.USE_TZ is true,
append the result at the end of string '.', append it all at the end of string cache_key.   if settings.USE_TZ is True,
if settings.USE_TZ is true and value is not None and call to the function timezone.is_aware with an argument value, evaluates to true,
if settings.USE_TZ is true and value is not None and call to the function timezone.is_naive with an argument value, evaluates to true,
if settings.USE_X_FORWARDED_HOST is true and 'HTTP_X_FORWARDED_HOST' is contained in self.META.
if show_traceback is true,
if shutdown_message is true,
if sign is true,
if sign is contained in self.digits,
call the method simple_url_re.match with an argument middle, if it evaluates to true,
if since is lesser or equal to integer 0,
if site is contained in sites2,
if six.PY2 is boolean True,
if six.PY2 is true,
if field PY2 of the module six is boolean True,
substitute the result for time_str.   if six.PY2 is true,
if six.PY2,
if six.PY2 is true and rawdata is an instance of the type six.text_type.
if six.PY2 is true and path is not an instance of byes type,
if six.PY2 is true and path is not an instance of six.text_type type,
if six.PY2 is true and value is greater than sys.maxint,
if six.PY3 is true,
if six.PY3 is boolean True,
if PY3 filed of six is boolean True,
if PY3 field of six is boolean True,
if PY3 field of module six is boolean True,
if six.PY3 is true and val1 and val2 are an instances of bytes,
otherwise call the function sys.getdefaultencoding and substitute its result for fs_encoding.   if six.PY3 is true or os.name equals a string 'nt',
if size is not zero,
if size is not empty,
if size equals to integer zero.
if size is None,
if size is None or size is greater than self.remaining,
if size of c_ulong does not equals to size of c_void_p,
if slots is not None,
if second element of source is None,
if source is None,
add integer 1 to it, substitute the result for space.   if space equals integer 0,
if space equals integer 0,
if start is greater than upto,
if status is True,
if status is not equal to STATUS_OK,
if statue is not equal to STATUS_OK.
if status is not None.
convert '\n' to a string, if it is contained in value or '\r' converted to an string is contained in value,
convert number to string, if first element equals to sign,
if first element of str_number equals a string '-'.
if stream is true,
if stream_created is true,
if the boolean return vale of the call to the function is_protected_type(s) and string_onlys are boolean True,
check if the bytes object containing my_value is packed according to the format string unsigned char is not equal to 0
check if the bytes object containing temp xor i are packed according to the format string unsigned char is equal to the variable byte
compute temp bitwise xor i then pack the result according to the format string unsigned char then check if the result is equal to the variable byte
check if the bytes object containing the variable val1 xor i are packed using the parameter 'B' is equal to bad_byte
check if the bytes object containing val1 xor i are packed according to the format string unsigned char is equal to the variable byte
check if the bytes object containing val1 bitwise xor z are packed according to the format string unsigned char is equal to the variable bad_byte
check if the bytes object containing val1 bitwise xor z are packed according to the format string unsigned char is not equal to 0
check if the bytes object containing the variable z is packed according to the format string unsigned char is not equal to 0
check if the bytes object containing z is packed according to the format string unsigned char is not equal to 0
if sub_tried is not None,
if subcommand equals to a string 'help'.
if subcommand is contained in no_settings_commands,
if subcommand_cls.use_argparse is true,
if i-th element of subject is '"' character or "'" character,
where '%s' is replaced with subject.   if i-th element of subject is '"' character or "'" character,
if sublist_item is true,
if submod is true and return value of the function module_has_submodule called with 2 arguments: result of the function:
append '-' to generic_lang_code, if supported_code starts with it,
if sys.platform starts with string 'java',
if sys.platform starts with a string 'java',
if sys.platform starts with string 'java',
if sys.platform equals to string "win32",
if first two elements of sys.version_info equal to integers 2 ant 7, respectively,
if fist and second element of sys.version_info equals to integer 3 and 2, respectively,
if first and second element of sys.version_info are both equal to integer 3,
if first and second element of sys.version_info are equal to integers 3 and 4, respectively,
if second element of sys.version_info is smaller than or equal to integer 1,
if sys.version_info is greater than or equal to a tuple with 3 elements: integers 2, 7 and 2, respectively,
strip t.contents from the left side of whitespaces, if the result starts with TRANSLATOR_COMMENT_MARK,
if t.token_type is not equal to TOKEN_COMMENT,
if t.token_type equals TOKEN_BLOCK,
if t.token_type equals TOKEN_BLOCK and t.contents equals 'endcomment',
if second element of t is boolean True,
if t is contained in self.__dispatch,
if t is not None,
if t is not None
if table_name_filter is not None and table_name_filter is callable object,
if tablename is contained in return value of the method connection.introspection.table_names,
convert tag to lowercase if it is not equal to self.cdata_tag,
if tag is contained in self.CDATA_CONTENT_ELEMENTS,
if tag is not contained in TemplateTagNode.mapping,
if tags exists and if all elements in the return value of the method checks.tag_exists called with an argument tag,
if tags is not None.
if takes_context is true,
if target is None,
use it as an argument for the call to the self.style.MIGRATE_LABEL method, use the result of the previous method as an argument for the call to the self.stdout.write method.   if target_app_labels_only is true,
if element of targets in first row and second column is None,
if template starts with a string 'file://',
if template is None,
if template_dirs is true,
if template_source_loaders is None,
if template_tuple is contained in TemplateDoesNotExist,
if terminal_char is not equal to string ')',
if termios is true,
if text ends with truncate,
if first element of text equals '#',
if first element of text is contained in 'xX'.
if text is an empty string and length of opts equals integer 1 and first element of opts equals string 'reset',
if this_bases is None,
if threading is true,
if timeout equals to DEFAULT_TIMEOUT,
if timeout is greater than integer 2592000,
if timeout is None,
if timeout is not None,
call the method timezone.is_aware with an argument expires, if it evaluates to true,
if timezone is None,
if to is true,
if to_lower is true,
if tok.next is true,
if tok starts with "'",
if token.contents equals a string 'else',
if token.contents equals string 'else',
if token.contents equals string 'empty',
if token.token_type equals integer 0,
if token.token_type equals TOKEN_BLOCK and token.contents equals endtag,
if token equals a string "not" and i incremented by 1 is lesser than l,
if token is None,
call the method token_string.find with an argument TRANSLATOR_COMMENT_MARK, if it evaluates to true,
if token_string starts with VARIABLE_TAG_START,
if sum of the top and self.orphans is greater or equal to self.count,
for 'errors', return value of the function force_text with an argument label for 'label', return value of the function six.text_type,   with an argument bf, for 'field', help_text for help_text, html_class_attr for 'html_class_attr' and bf.html_name for 'field_name'.    if top_errors is true,
if the variable total does not equal 2
call the method transaction.get_autocommit with an argument self.using, if it evaluates to true,
if transfer_encoding equals a string 'base64',
if transfer_encoding equals string 'base64',
if transfer_encoding is not None,
if translators_comment_start is not None and lineno is greater than or equal to translators_comment_start,
if tried is true,
if trim is true,
if truncate is None,
if truncate_len equals integer 0.
if truncate_text is true,
if ttl is not None,
if field_type is a tuple,
if type of result is ConvertingDict, ConvertingList or ConvertingTuple,
return the result.   if type of s equals bytes,
if TYPE equals to RAW,
if typed is true,
substitute the result for offset.   if first element of tzinfo equals '-',
if tzinfo equals a string 'Z',
if unhandled_params is true,
call the function unicodedata.combining with an argument char, if it evaluates to true,
if unpack is true,
if unpack_ipv4 is true,
with 3 arguments: data, files and return value of the function self.clear_checkbox_name called with an argument name,   evaluates to true,   if upload is true,
if upto is not equal to length of token,
if upto is not equal to start.
if url is true,
if url ends with '/' character,
if url starts with '///',
if urlconf is None,
prefix set to None, current_app set to None.   if urlconf is None,
if urlconf_name is true,
if use_base_manager is true,
if use_func is true,
if use_grouping is true,
if USE_INOTIFY is true,
if use_l10n is true, or if use_l10n is None and settings.USE_L10N is true,
if use_l10n is true, or use_l10n is None and settings.USE_L10N is true,
if use_natural_keys is true,
if use_reloader is true,
if used_name is not equal to guessed_filename,
if val equals an empty list.
if val is None,
if val is not None,
if value is true,
if value,
if value is not equal to an empty string,
if value is not equal self.empty_value,
if value is not equal to value or value equals return value of the call to Decimal with argument 'Inf',
if value is Nan, or value is contained in return value of the Decimal called twice with string 'Inf' and with string '-Inf',
if value.__traceback__ is not tb,
if first and second elements of value are contained in self.empty_values,
if value equals k or text_value equals return value of the function force_text called with argument k,
if value equals k2 or text_value equals return value of the function force_text called with argument k2,
if value equals self.empty_value or value is contained in self.empty_values,
if value is true and character ':' is contained in value,
substitute the result for value under the 'input' key of the substitutions dictionary.   if value is true and value has an attribute 'url',
if value is true and method self.valid_value called with an argument value evaluates to false,
if vale is None or an empty string,
if value is boolean True, string 'True' or string '1',
if value is contained in self.empty_values,
if value in self.empty_values,
if value is contained in self.empty_values and self.required is true,
if value is None,
if value is None and attr is contained in declared_fields,
if value is not None,
if value is not contained in result,
if value is boolean True,
if values is None,
if var ends with '.',
call the function var.find with an argument: '_' appended to VARIABLE_ATTRIBUTE_SEPARATOR, if the result is greater than integer -1,
if var starts with '_(' and var ends with ')',
where '%s' is replaced with first upto elements of token string, token string elements from upto to start index,   and token string elements from start index to the end.   if var_obj is None,
if varargs is None,
if vary_on is None,
if verbosity is greater or equal to integer 2,
if fourth element of version equals to string 'alpha' and fight element of version equals to integer 0,
if version is None,
if want_unicode is true,
if weight is greater or equal to integer 6,
if whitelist is not None
if widgets is true and f.name is contained in widgets,
if widgets is not None,
convert shellcode into a bytearray then check if it is equal to the variable x
convert shellcode into a bytearray then obtain the element at index n from and check if it is equal to the variable x
convert shellcode into a bytearray then obtain the element at index n from and check if it is equivalent to x
convert the variable shellcode into a bytearray object, then obtain the element at index n from the bytearray object and check if it is equal to the variable x
convert shellcode into a bytearray then obtain the element at index i from the bytearray object and check if it is equal to the variable z
convert shellcode into a list then obtain the element at index n from it and check if it is equal to the variable x
obtain the element at index n from shellcode and check if it is equal to the variable x
if y and m and d are all true,
if year is lesser than integer 100,
if year is lesser than integer 70,
if years is true,
if z is equal to a
if z is True
ignore is a lambda function with pattern as an argument, return value is the return value of the function fnmatch.fnmatchcase,
substitute DEFAULT_DB_ALIAS for db.   remove the value under the 'ignorenonexistent' key from the options dictionary, assign it to the ignore, if the entry doesnt exists,
append list containing 4 elements: 'CVS', '.*', '*~' and '*.pyc', to ignore_patterns.
get the value under the 'ignore_patterns' key of the options dictionary, substitute it for ignore_patterns.
append f.name to ignored list.
ignored  is an empty list.
call the method _illegal_formatting.search with an argument fmt, substitute the result for illegal_formatting.
call the method Image.open with an argument file, on the result call the verify method
call the function inline_re.match with an argument t.contents, substitute the result for imatch.
import module argparse.
import module argparse
import module base64.
import module binascii.
import bpython.
import bz2.
import module calendar.
import module cgi.
import code.
import module codecs.
import module collections.
import module contextlib.
import module copy.
import module datetime.
import module decimal.
import module django.
import module django.core.checks.compatibility.django_1_6_0.
import module django.core.checks.compatibility.django_1_7_0.
import module django.core.checks.model_checks.
import dummy_threading as threading.
import module errno.
import fcntl.
import flup
import module fnmatch.
import module functools.
import gettext module.
import module gettext as gettext_module.
import module glob.
import module gzip.
import module hashlib.
import hashlib module.
import module hmac.
import imp.
import module importlib.
import module inspect.
import module io.
import io.
import module itertools.
import module json.
import module keyword.
import module locale.
import module logging.
RemovedInDjango19Warning and stacklevel set to integer 2.   import module logging.handlers.
import memcache.
import module mimetypes.
import msvcrt.
import module operator.
import module opera.
import module os.
import pickle.
import module pickle.
import module posixpath.
import pyinotify module.
import pylibmc.
import pytz.
import module random.
import module random as random_module.
import module re.
import re module.
import readline.
import rlcompleter.
import module shutil.
import module signal.
import module smtplib.
import module socket.
import module ssl.
import stat.
import module stat.
import module sta.
import StringIO.
import termios module.
import module threading.
import threading module.
import threading.
import module time.
import time module.
import module time as _time.
import module traceback.
import module types.
import module unicodedata.
import module warnings.
import warnings.
import module yaml.
import module zipfile.
import module zlib.
call the function import_module with 2 arguments: string .management and app_config.name.
import module '.management' from the package app_config.name.
call the function import_module with an argument string '%s.%s', where '%s' is replaced with app_config.name and module_to_search.
call the function import_module with an argument app_name.
call the function import_module with an argument project_name.
call the function import_module with an argument templatetag_module.
call the function import_string with argument backend.
imported_objects is an empty dictionary.
substitute __import__ for importer.
if index is negative inter 3, if is_reversed, substitute it for in_index, if not, in_index is negative integer 2.
in_tag is boolean False.
in_tag is boolean True if in_tag is False, otherwise is boolean False.
incomment is boolean False.
incomment is boolean True.
get config dictionary element under 'incremental' key, if it exists substitute it for incremental, if not,
indent contain tabs number of tab character.
get the value under the 'indent' key of the options dictionary, substitute the result for indent.
get the value under the 'indent' key of the self.options dictionary, substitute it for indent.
call the method data.find with an argument self._boundary, substitute the result for index.
replace '%s' in string "CREATE %sINDEX %s ON %s (%s);" with: unique, return value of the function qn called with an argument:
index_output is an empty list.
compile a regex from raw string '^\[\s*(\w+)\s*\]\s*', substitute it for INDEX_PATTERN.
call the connection.creation.sql_indexes_for_model with model and no_style() as arguments, substitute the result for index_squl.
substitute operator.getitem for indexbytes.
indexes is an empty dictionary.
call the method connection.introspection.get_relations with 2 arguments cursor, table_name and substitute the result for indexes.
INFO is integer 20.
append e to infos list for every e in all_issues, if checks.INFO is lesser or equal to e.level,
get the value 'inhibit_post_migrate' key of the options dictionary, if it exists substitute it for inhibit_post_migrate, otherwise inhibit_post_migrate is boolean False.
join migrations_directory and string "__init__.py" into a file path, substitute it for init_path.
for every x in sequence of integer from integer 0 to length of data, append an empty string to a list, substitute the resulting list for initial.
initial is an empty list.
convert initial into boolean and substitute it for initial.
initial is boolean False.
get the value under the name key of the self.initial dictionary, if it exists substitute it for initial,
call the method self.widget.decompress with an argument initial, substitute the result for initial.
INITIAL_FORM_COUNT is a string 'INITIAL_FORMS'.
if self.initial is true, substitute the length of self.initial for initial_forms, if not, initial_forms is integer 0.
call the method self.initial_form_count, return the result initial_forms.
call the method self.add_initial_prefix with an argument name, substitute the result for initial_prefixed_name.
for every value in initial call the function force_text with an argument value, add the results into a set, substitute the resulting set for initial_set.
initial_set is set created out of return values of the function force_text called with an argument value,
call the function ugettext_lazy with an argument string 'Currently', substitute the result for initial_text.
call the method (hidden_widget.value_from_datadict with 3 arguments: self.data, self.files and initial_prefixed_name,
substitute initial for initial_value, if initial is not None, if not, initial_value is an empty string.
if initial is not None, substitute initial for initial_value, otherwise initial_value is an empty string.
call the function initial_value, substitute the result for initial_value.
get the value under the name key of the self.initial dictionary, if it exists substitute it for initial_value,
evaluate function Lock() assign the result to initLock.
call the function re.compile with an argument string "^\s*trans\s+((?:"[^"]*?")|(?:'[^']*?'))(\s+.*context\s+((?:"[^"]*?")|(?:'[^']*?')))?\s*", substitute the result for inline_re.
call the function digest twice, substitute the results for inner, outer, respectively.
append the result to password.   call the method password.translate with an argument hmac.trans_36, update inner dictionary with the result.
inner is an instance of NonCapture, created with elements of result from start index to the end.
extend list inner_args with args.
inner_html is a string '<li>{choice_value}{sub_widgets}</li>'.
inner_result and inner_args are empty lists.
extend list inner_result with res.
append child.data to the inner_text list.
call the function getInnerText with an argument child, use the result as an argument for the call to the method inner_text.extend.
inner_text is an empty list.
inplural is boolean False.
inplural is boolean True.
replace '%s' in string '%s_%s' with id_ and i, substitute the result for input_attrs dictionary value under the 'id' key.
unpack dictionary final_attrs, map the values through force_text function with an argument v and convert it to a dictionary, again,
call the function get_format with an argument string 'DATE_INPUT_FORMATS', substitute the first element of the result for input_format.
call the method formats.get_format_lazy with an argument string 'DATE_INPUT_FORMATS', substitute the result for input_formats.
call the method formats.get_format_lazy with an argument string 'DATETIME_INPUT_FORMATS', substitute the result for input_formats.
call the method formats.get_format_lazy with an argument string 'TIME_INPUT_FORMATS', substitute the result for input_formats.
call the function ugettext_lazy with an argument string 'Change', substitute the result for input_text.
input_type is a string 'checkbox'.
input_type is a string 'email'.
input_type is a string 'file'.
input_type is a string 'hidden'.
input_type is a string 'number'.
input_type is a string 'password'.
input_type is a string 'radio'.
input_type is a string 'text'.
input_type is a string 'url'.
input_type is None.
call the function force_text with an argument text, substitute the result for input_val.
call the function format_html with 2 arguments: string '<input{0} />', return value of the function flatatt, called with an argument,
convert 243 into a hexadecimal and store the value in insertByte
generate a random integer between 1 and 222 then convert the random number into a hexadecimal and store the value in insertByte
generate a random integer between 1 and 255 then convert the result into a hexadecimal and store the value in insertByte
generate a random number between 1 and 360 then convert the random number into a hexadecimal and store the value in insertByte
generate a random integer between 1 and 255 then store the value in insertByte
call the method instance.save.
call the function construct_instance with 4 arguments form, instance, fields, exclude and substitute the result for instance.
call the method __new__ from the base class of the class SortedDict, with 3 arguments: cls, unpacked list args,
convert value into an integer.
substitute str_number and an empty string for int_part and dec_part.
split str_number by '.', substitute the result for int_part and dec_part, respectively.
invert the ordering of elements of int_part_gd, substitute it for int_part.
append digit to int_part_gd.
increment int_part_gd by thousand_sep.
int_part_gd is an empty string.
substitute chr for int2byte.
call the method operator.methodcaller with 3 arguments: string 'to_bytes', integer 1 and string 'big', substitute the result for int2byte.
integer_types is a tuple with 2 elements int and long.
substitute int for integer_types.
substitute value under the 'interactive' key of the options dictionary for interactive.
get the value under the key 'interactive' of options dictionary, substitute it for interactive.
internal_use_only is boolean False.
internal_use_only is a boolean False.
internal_use_only is boolean True.
intrans is boolean False.
intrans is boolean True.
append app_name to the invalid_apps.
invalid_apps is an empty list.
for every tag in tags, are false,   for every tag in tags, if return value of the method checks.tag_exists called with an argument tag, evaluates to false,
if '%s' is contained in settings.TEMPLATE_STRING_IF_INVALID, invalid_var_format_string is boolean True, otherwise it is False.
invalid_var_format_string is None.
inverse_match is boolean False.
call the function ip.
call the method literal_match.group with an integer 1, substitute the result for ip_address.
ip_address_validator_map is a dictionary containing 3 initial entries: tuple containing 2 elements: list with an element,  validate_ipv46_address and return value of the function _ with an argument string 'Enter a valid IPv4 or IPv6 address.' for 'both',
call the function _explode_shorthand_ip_string with an argument ip_str, substitute the result for ip_str.
call the function _explode_shorthand_ip_string with an argument ip_str, substitute the result for ip_str.
ipv4_address is a string "%d.%d.%d.%d" formated with first 2 elements of seventh element of hextets converted into hexadecimal number,
_ with an argument string "Enter a valid 'slug' consisting of letters, numbers, underscores or hyphens.",   and string 'invalid'.   call the re.compile function with an argument raw string '^(25[0-5]|2[0-4]\d|[0-1]?\d?\d)(\.(25[0-5]|2[0-4]\d|[0-1]?\d?\d)){3}$',
call the function _unpack_ipv4 with an argument ip_str, substitute the result for ipv4_unpacked.
or string 'ANICON' is in os.environ, substitute the evaluated boolean for supported_platform.   if sys.stdout has an attribute named 'isatty' and call to the sys.stdout.isatty returns boolean True, substitute True for is_a_tty.
if eather of settings.USE_I18N or settings.USE_L10N is True, set is_accept_language_redundant to True.
is_compressed is boolean False.
is_compressed is boolean True.
if dt is None, is_dst is boolean False, otherwise call the method _isdst with an argument dt, substitute the result for is_dst.
if dt is None is_dst is boolean False, otherwise call the method self._isdst with an argument dt, substitute the result for is_dst.
is_localized is boolean False.
if i is contained in relations, is_relation is boolean True, otherwise is_relation is boolean False.
is_required is boolean False.
where '%s' is replaced with token.contents.   assign the string 'reversed' to is_reversed and bits last elements.
if file_ext is contained in command.extensions, is_templatized is boolean True, otherwise it is boolean False.
is_templatized is boolean True.
is_usable is boolean False.
if resource_string is not None, is_usable is boolean True, otherwise is_usable is boolean False.
is_usable is boolean True.
define lambda function that returns self.file.isatty field, use it as an argument for property function, put the result in isatty.
ISO_8859_1 is a string 'iso-8859-1', UTF_8 is a string 'utf-8'.
ISO_INPUT_FORMATS is a dictionary with 3 entries: tuple with an element string '%Y-%m-%d' for 'DATE_INPUT_FORMATS',
get the value under the key 'only' of the options dictionary, if it exists substitute the result for isolated_context,
call the function convert_old_style_list with an argument sublist, substitute the result for item and old_style_list.
result of the function iri_to_uri called with an argument link for 'link',   result of the function to_unicode called with an argument description for 'description',   result of the function to_unicode called with an argument author_email for 'author_email',   result of the function to_unicode called with an argument author_name for 'author_name',   result of the function iri_to_uri called with an author_link link for 'author_link', pubdate for 'pubdate',   updateddate for 'updateddate', result of the function to_unicode called with an comments author_name for 'comments',   result of the function to_unicode called with an argument unique_id) for 'unique_id)',   unique_id_is_permalink for 'unique_id_is_permalink', enclosure for 'enclosure',    if true, categories is value for 'categories' key, if not, empty tuple is value for 'categories' key,   result of the function to_unicode called with an argument item_copyright for 'item_copyright', ttl for 'ttl'.   update dictionary item with an argument kwargs.
item is a dictionary with 15 initial entries: result of the function to_unicode called with an argument title for 'title',
get the value under the date_key key of the item dictionary, substitute it for item_date.
substitute _iteritems for items.
call the function iter with an argument patterns.
convert second item to an iterable,
create an iterator out of x.
iterator is an instance of ChunkIter class, created with arguments: stream_or_iterable and integer 16384.
iterator is iterator created out of stream_or_iterable.
iterator is None.
substitute object for Iterator.
substitute iter for iterbytes.
substitute _iteritems for iteritems.
substitute _iterkeys for iterkeys.
substitute _iterlists for iterlists.
sum the variables i and magic then store the result in j
sum the variables i and magic then modulus the result with 2 then store the result in j
sum the variables i and magic then modulus the result with 256 then store the result in j
sum the variables i and z then modulus the result with 250 then store the result in j
sum day_of_year, result of the subtraction of weekday from integer 7 and subtraction of integer 1 from jan1_weekday.
compute the modulus of the variables magic and 250 then sum the result with i then store the result in j
modulo the variables magic and 256 then sum the result and i then store the result in j
find the ending position of the regular expression match of the object match, substitute the result for j.
call the method text.find with 2 arguments: substr and i, substitute the result for j.
call the method self.data.replace with 2 arguments: month as integer 1 and day as integer 1, on the result call the method,
call the function allow_lazy with 2 arguments: javascript_quote and six.text_type, substitute the result for javascript_quote.
call the json.dump function with 4 arguments: return value of the method self.get_dump_object called with an argument obj,  self.stream, cls set to DjangoJSONEncoder and unpacked dictionary self.json_kwargs.
substitute x for k and boolean True for v.
call the x.split method with arguments: character '=' and integer 1, store the result in k and v, respectively.
call the function force_bytes with arguments k and self.encoding, substitute the result for k.
substitute first element of item for k.
find the ending position of the regular expression match of the object match, substitute the result for k.
find the ending position of the regular expression match of the object match, substitute the result for k.
called with 2 arguments: value rounded to 1 decimal point and integer 1.   move integer 1 left for 10 bits, substitute the result for KB.
substitute third and first element of bits for key and value, respectively.
call the method match.groups with 2 arguments: key and value.
increment key by item.
increment key by kwd_mark.
create a tuple out of types of v, for every k and v in sorted_items, extend key tuple with the result.
create a tuple out of types of v, for every v in args, extend key tuple with the result.
call the function urlquote with argument var for every var in vary_on, join the results into a string separated by ':', substitute it for key.
substitute args for key.
call the method bytes_to_text with 2 arguments: key and self.encoding, substitute the result for key.
call the method bytes_to_text with an arguments key and self.encoding, substitute the result for key.
call the force_bytes function with an argument settings.SECRET_KEY, substitute the result for key.
evaluate the function force_str with key as the argument, substitute it for key.
call the method hashlib.sha1 with an argument secret appended to key_salt, call the method digest on the result, return the result.
key is a list with elements of list key from length of self.prefixes index to the end,
call the function make_key with 3 arguments: args, kwds and typed, substitute the result for key.
if kwds is true or typed is true, call the function make_key with 3 arguments: args, kwds and typed, substitute the result for key,
pop the first element from plist, convert it to lowercase, call the method decode on it, with string 'ascii' as an argument,
call the method self.cache_key with 2 arguments name and dirs, substitute the result for key.
get the value under the template_name key of the self.cache_key dictionary, if it exists, substitute it for key,
call the method self.make_key Whit key and version set to version as arguments, substitute the result for key.
call the method self.make_key with key and version set to version as arguments, substitute the result for key.
call the self.make_key with key and version set to version as arguments, substitute the result for key.
call the method self.make_key with key and version set to version as arguments, substitute it for key.
substitute self.to_field_name, if exists, for key, if not substitute string 'pk' for key.
and code set to string 'list.   substitute self.to_field_name, if true, for key, or if not, substitute string 'pk' for key.
substitute settings.CACHE_MIDDLEWARE_KEY_PREFIX for key_prefix.
call the function force_bytes with an argument key_salt, substitute the result for key_salt.
substitute _iterkeys for keys.
call the method n.getElementsByTagName with string 'natural' as argument, substitute result for keys.
call the method node.getElementsByTagName with the argument string 'natural', substitute the result for keys.
and obj.__class__.__name__, first element of obj._constructor_args and second element of obj._constructor_args.   klass.__new__ is a static method of the function __new__.
define lambda function with self class instance as the argument, lambda function body encapsulates the call to the method,
to %s because it doesn't define __str__()., replace %s with string value of klass.__name__.   substitute __str__ filed of klass for __unicode__ field of klass.
substitute deconstruct for klass.deconstruct.
call the method find_indentation with an argument node, append the result to newline, substitute the result for klass.prefix.
substitute app_name for klass.
call the function import_string with backend if exists or settings.EMAIL_BACKEND if not, store the result into klass.
call the function load_command_class with arguments app_name and subcommand, substitute the result for klass.
call the method node.clone, substitute the result for klass.
remove config dictionary element under 'class' key, use it as an argument for the call to the method self.resolve,
use the result as an argument for the call to the method final_output.extend.   add model to known_models set.
table2model with an argument table_name.   call the function table2model with an argument table_name, append the result to known_models.
known_models is an empty list.
if model is not contained in app_models for every model in return value of the connection.introspection.installed_models function return value,
extend list kw with a list with 5 elements: d.hour, d.minute, d.second, d.microsecond and d.tzinfo.
left justify value under the 'microsecond' key of the kw dictionary, in the field of width 6, fill the rest with '0',
called with an argument kw, only if v is not None, substitute the result for kw.   substitute tzinfo for value under the 'tzinfo' key of the kw dictionary.
kw is a list with 3 elements: d.year, d.month and d.day.
substitute the result for value under the 'microsecond' key of the kw dictionary.   update a dictionary with an entry v converted to an integer for k, for every k and v in result of the function six.iteritems,
update a dictionary with an entry v converted to an integer for k, for every k and v in result of the function six.iteritems,
call the method match.groupdict, use the result as an argument for the call to the function six.iteritems,
call the method match.groupdict, substitute the result for kw.
call the function
if match is true and call to the method match.group with an argument integer 1 evaluates to true, kwarg_format is boolean True,
call the function re.compile with an argument raw string "(?:(\w+)=)?(.+)", substitute the result for kwarg_re.
if 'content_type' key doesnt exist in kwargs, set its value to 'application/json'.
if 'widget' key of the kwargs dictionary doesnt exists assign it widget field of the base class of the IntegerField class value.
call the method kwargs.update with an argument self.default_args.
substitute error_messages for value under the ''error_messages' key of the kwargs dictionary.
substitute value under the f.name key of the error_messages dictionary for value under the 'error_messages' key of kwargs dictionary.
substitute value under the f.name key of the help_texts dictionary for value under the 'help_text' key of kwargs dictionary.
subtract result of the method self.initial_form_count from i, use the result as an index to get the element from self.initial_extra,
call the method self._existing_object with an argument pk, substitute the result for value under the 'instance' key of kwargs.
call the method self.get_queryset, substitute i-th element of the result for value under the 'instance' key of kwargs dictionary.
substitute value under the f.name key of the labels dictionary for value under the 'label' key of kwargs dictionary.
value under 'localize' key of kwargs dictionary is boolean True.
convert to integer value of dictionary cc under the key 'max-age',
substitute number for value under the 'number' key of the kwargs dictionary.
substitute number_value for kwargs dictionary value under the 'number' key.
substitute safe for value under the 'safe' key of kwargs dictionary.
set value under the 'stream' key of kwargs dictionary to None.
remove element under 'stream' key of kwargs dictionary, substitute the result for value under 'strm' key of kwargs dictionary.
substitute self.fk.rel.field_name for value under the 'to_field' key of the kwargs dictionary.
substitute value under the f.name key of the widgets dictionary for value under the 'widget' key of kwargs dictionary.
get self.to_field attribute of self.parent_instance object, substitute it for value under the 'initial' key of the kwargs dictionary.
substitute self.parent_instance.pk for value under the 'initial' key of the kwargs dictionary.
value under the 'required' key of the kwargs dictionary is boolean False.
call the method parser.compile_filter with an argument value, substitute the result for value under the key key of kwargs dictionary.
call the method parser.compile_filter with an argument value, substitute the result for value under the name key of kwargs dictionary.
convert param to a string, use it as a key to get the value from kwargs dictionary, assign it value.
kwargs is a dictionary with 17 entries: form for 'form', formfield_callback for 'formfield_callback', formset for 'formset',
kwargs is a dictionary with an entry: attribute 'label' of the object under the name key of the form.fields dictionary for 'label',
kwargs is a dictionary with boolean True for 'pk_field'.
kwargs is an empty dictionary,
kwargs is an empty dictionary.
kwargs is a empty dictionary.
kwargs is a dictionary with elements: config dictionary element under k key for k, for every k in result of function valid_ident,
kwargs is a dictionary created with tuples with 2 elements: k and value under k key of config dictionary,
kwargs is an dictionary, populated for every k and v in result of the method self.kwargs.items with:
if args in None of boolean False, substitute it for an empty dictionary.
call the method match.groupdict, substitute the result for kwargs.
kwargs_safe is a dictionary created for every k and v in result of the function six.iteritems called with an argument kwargs,
divide negative dklen with hlen, substitute floored result for l.
l is lambda function with argument x, that calls the method self.make_key with x and version set to version as arguments.
substitute length of tokens for l.
label is an empty string.
label is a string 'label'
call the function bf.label_tag with an argument label, if the result is true substitute it for label, otherwise label is an empty string.
call the function force_text with an argument bf.label, use the result as an argument for the call to the function conditional_escape, substitute the result label.
label_for is an empty string.
call the function format_html with 2 arguments: string ' for="{0}"' and self.id_for_label, substitute the result for label_for.
call the method self.handle_label with 2 arguments: label and unpacked dictionary options, substitute the result for label_output.
if self.field.label_suffix is not None, substitute self.field.label_suffix for label_suffix,
call the function get_language, substitute the result for lang.
lang is None.
call the function get_language_from_path with an argument request.path_info, substitute it for lang_code.
call the method regex_match.group with an argument integer 1, substitute the result for lang_code.
get the value under the settings.LANGUAGE_COOKIE_NAME key of the request.COOKIES dictionary, substitute it for lang_code.
get the value under the LANGUAGE_SESSION_KEY key of the request.session dictionary, substitute it for lang_code.
call the function get_language, substitute the result for language_code.
call the method get_language, substitute the result for language_code.
substitute the result for language_code_re.   call the function re.compile with an argument raw string '^/([\w-]+)(/|$)', substitute the result for language_code_prefix_re.
and re.VERBOSE, substitute the result for accept_language_re.   call the function re.compile with 2 arguments: raw string '^[a-z]{1,8}(?:-[a-z0-9]{1,8})*$' and re.IGNORECASE,
get_language_from_request', 'get_language_info', 'get_language_bidi', 'check_for_language', 'to_locale', 'templatize',   'string_concat', 'gettext', 'gettext_lazy', 'gettext_noop', 'ugettext', 'ugettext_lazy', 'ugettext_noop', 'ngettext', 'ngettext_lazy',   'ungettext', 'ungettext_lazy', 'pgettext', 'pgettext_lazy', 'npgettext', 'npgettext_lazy' and 'LANGUAGE_SESSION_KEY'.   LANGUAGE_SESSION_KEY is an string '_language'.
substitute link for value under the NEXT key of the last dictionary, for value under the PREV key of the root dictionary,
substitute link for values under the NEXT key of the last dictionary and PREV key of the root dictionary.
substitute greater element between integer 0 and end decremented by one for last.
increment pos by one, substitute the result for last.
substitute value under the PREV key of the root dictionary for last.
divide self.data.day by 10, substitute reminder of the result for last.
substitute elements of self.template_string list from upto index to the end for last_lit.
format string normal_row with an dictionary containing 5 entries: an empty string for 'errors', empty string for 'label',
substitute last element of output for last_row.
substitute item_date for latest_date.
latest_date is None.
lbp is integer 0.
lbp is an integer 0.
substitute bp for lbp.
substitute empty string, word an empty string for lead, middle and trail, respectively.
set leader to the 1st command-line argument after casting it to an int
set leader to the 2nd command-line argument after casting it to an int
set leader to the third command-line argument after casting it to an int
set the variable leader to the 3rd command-line argument after casting it to an int
call the method self.has_leading_dir with an argument namelist, substitute the result for leading.
only if member.name is not equal to string 'pax_global_header'.   call the method self.has_leading_dir with an argument list, with elements x.name for every x in members, substitute the result for leading.
leave_locale_alone is boolean False.
leave_locale_alone is boolean True.
leave_locale_alone is boolean True
call the method t.led with 2 arguments left and self.
call the method t.nud with an argument self, substitute the result for left.
instantiate class X, get its length.
len_item is integer 1.
substitute length of item for len_item.
convert the variable shellcode into a bytearray object then compute its length then print it.
print the length of the string shellcode
substitute arg converted into an integer for length.
convert num to an integer, substitute it for length.
convert num to an integer, substitute the result for length.
store in the variable length_format_0x the count of "," in format_0x
compute the count of "," in the variable format_0x and store the outcome in the variable length_format_0x
compute the count of "a" in the variable format_0x and store the outcome in the variable length_format_0x
compute the count of "z" in the variable format_0x and store the outcome in the variable length_format_0x
level is an integer 0.
get value under the 'level' key of the config dictioanry, if it exists substitute it for level, if not level is None.
remove config dictionary element under 'level' key, if it exists substitute it for level, if not, level is None.
get handler_config dictionary element under 'level' key, if it exists substitute it for level, if not, level is None.
lexer is an instance of JsLexer class.
call the method lexer_class with an arguments template_string and origin, substitute the result for lexer.
substitute DebugLexer and DebugParser for lexer_class and parser_class.
substitute Lexer and Parser for lexer_class and parser_class.
call the function get_library with an argument taglib, substitute the result for lib.
call the function import_library with an argument taglib_module, substitute the result for lib.
get the value under the library_name key of the libraries dictionary, if it exists, substitute it for lib, if not, lib is None.
substitute lib for value under the library_name key of libraries dictionary.
return value of the function re.escape called with an argument BLOCK_TAG_START,   return value of the function re.escape called with an argument BLOCK_TAG_END,   return value of the function re.escape called with an argument VARIABLE_TAG_START,   return value of the function re.escape called with an argument VARIABLE_TAG_END,   return value of the function re.escape called with an argument COMMENT_TAG_START,   and return value of the function re.escape called with an argument COMMENT_TAG_END, substitute the result for tag_re.   libraries is an empty dictionary.
LIGHT_PALETTE is a string 'light'.
substitute formfield.limit_choices_to for limit_choices_to.
call the function limit_choices_to, substitute the result for limit_choices_to.
line is an empty string.
append newline to plural_form_line, substitute the result for line.
increment line by buffer_.
remove all the elements from space index of line.
call the sio.readline method, substitute the result for line.
call the sio.readline method with size as an argument, substitute the result for line.
call the function allow_lazy with 2 arguments: linebreaks, six.text_type, substitute the result for linebreaks.
evaluate the self.getpos() and assign the result to the lineno and offset respectfully.
increment the lineno by the count of the newlines in self.__starttag_text.
call the method lineno_comment_map.setdefault with 2 arguments: t.lineno and an empty list, append t.contents to the result.
value under the comment_lineno_cache key of the lineno_comment_map dictionary is an empty string.
lineno_comment_map is an dictionary.
append line to lines.
concatenate string '%0', width and string "d. %s", format the previous string with i incremented by 1,
concatenate string '%0', width and string "d. %s", format the previous string with i incremented by 1 and line,
lines is an empty list.
split value by newline characters, substitute the result for lines.
substitute root for value under the NEXT key of the link dictionary.
substitute last for value under the PREV key of the link dictionary.
link is a list with 4 elements: last, root, key and result.
call the function cache_get with an argument key, substitute the result for link.
substitute link_prev for value under the PREV key of the link_next dictionary.
substitute link for link_prev, link_next, key and result, respectively.
substitute link_next for value under the NEXT key of the link_prev dictionary.
call the function re.compile with raw string '(<a [^>]*?)target=[^\s>]+', substitute the result for link_target_attribute_re.
for every elt in list_ call the method bytes_to_text with 2 argument: elt and self.encoding, append the result into a list,
call the method __getitem__ from the base class of the class MultiValueDict, with an argument key, substitute the result for list_.
substitute length of list_ for list_length.
substitute _iterlists for lists.
Declare an empty bytes literal and store it in lit
Declare an empty bytes literal and assign it to the variable lit
Declare an empty bytes literal and assign it to lit
Lit is an empty bytes literal
The variable lit is an empty bytes literal
evaluate method self.literal_regex.match with an argument domain_part, substitute the result for literal_match.
and re.IGNORECASE, substitute the result for domain_regex.   call the re.compile function with 2 arguments: raw string '\[([A-f0-9:\.]+)\]$' and re.IGNORECASE, substitute the result for literal_regex.
load_template_source.is_usable is boolean True.
increment loaded_objects_in_fixture by one.
loaded_objects_in_fixture is integer 0.
substitute first element of loader for loader and loader without the first element for args.
call the function find_template_loader with an argument loader_name, substitute the result for loader.
loader is instance of MigrationLoader initialized with connection as an argument.
loader is an instance of MigrationLoader class, created with an argument connection.
loader is an instance of MigrationLoader class, created with 2 arguments: None and ignore_no_migrations set to boolean True.
append loader to loaders.
loaders is an empty list.
evaluates to true,   split middle into two parts from the right by '@' character, assign the resulting parts to local and domain.
call the method self.build_attrs with an argument id set to field modulus id_, substitute the result for local_attrs.
get the value under the key 'locale' of the options dictionary, substitute it for locale.
get the value under the 'locale' key of the options dictionary, substitute it for locale.
call the function to_locale with an argument lang, substitute the result for locale.
locale_dir is None.
called with an argument path,   substitute path for locale_dir.
substitute self.default_locale_path for locale_dir.
locale_dirs is a list of elements from the list of path names that maths the basedir path with '/*' wild card characters for which call to the os.path.isdir returned true, assign it to locale_dirs.
call the function glob.glob with an argument: string '/*' appended to self.default_locale_path converted into a string,
join app_config.path and string 'locale' into a file path, substitute it for localedir.
use its __file__ field as an argument for the call to the function upath, substitute the result for settingsfile.   call the function os.path.dirname with an argument settingsfile, join the result an string 'locale' into a file path,
call the method LocaleRegexProvider.__init__ with arguments self and regex.
split locale by '_', append the first element of the result to locales.
locales is a list with an element locale.
substitute all_locales for locales.
take locale or all_locales, whichever is not empty, respectively, and substitute it for locales.
if locale is not false or None, substitute it for locales, otherwise substitute all_locales for locales.
locales is relative complement of set exclude in set locales.
locales is a difference between the locales and exclude sets.
get the value under the 'localize' key of the kwargs dictionary, substitute it for localize, if the key doesnt exists, substitute the result for localize.
call the addr.split method with character '@' and integer 1 as arguments, substitute the result for localpart and domain, respectively.
instantiate Header class with localpart and encoding, convert it to a string, substitute the result for localpart.
call the method self.get_full_path, append the result to string '//', substitute it for location.
remove 'LOCATION' key from kwargs dictionary and put it into location, or use an empty string if key doesnt exists.
remove 'LOCATION' key from kwargs dictionary and put it into location, or use an empty string if key doesnt exists.
substitute the settings.MEDIA_ROOT for location.
and path with self.path, substitute the result for current_uri.   call the function urljoin with arguments current_uri and location, substitute the result for location.
extend locations with tuple containing dirpath and f, for every f in filenames, only if it ends with string '.po'.
locations is an empty list.
lock is an instance of RLock class.
LOCK_EX is a hexadecimal 2.
substitute fcntl.LOCK_EX for LOCK_EX.
LOCK_EX, LOCK_SH and LOCK_NB are all equal to integer 0.
LOCK_NB is a hexadecimal 1.
substitute fcntl.LOCK_NB for LOCK_NB.
LOCK_SH is a integer 0.
substitute fcntl.LOCK_SH for LOCK_SH.
LockFileEx.argtypes is a list containing 6 elements: HANDLE, DWORD, DWORD, DWORD, DWORD and LPOVERLAPPED.
substitute BOOL for LockFileEx.restype.
substitute windll.kernel32.LockFileEx for LockFileEx.
call the function locks.lock with arguments fd and locks.LOCK_EX.
call the function locks.lock with fd and locks.LOCK_EX as arguments.
call the function locks.unlock with fd as argument.
call the function locks.unlock with argument fd.
call the method logger.addHandler with an argument handler.
call the method logger.addHandler with an argument: h-th element of value under 'handlers' key of self.config dictionary.
logger.disabled is boolean True.
substitute '%s' in 'Internal Server Error: %s' with request.path, exc_info set to exc_info,
logger.handlers is an empty list.
substitute logging.NOTSET for logger.level.
substitute propagate for logger.propagate.
logger.propagate is boolean True.
call the method logger.removeHandler with an argument h.
call the method logger.removeHandler with an argument handler.
call the function _checkLevel with an argument level, use the result as an argument for the call to the method logger.setLevel.
substitute '%s' in 'Forbidden (Permission denied): %s' with request.path, extra is an dictionary with two pairs of elements,
call the logger.warning method with string 'Bad Request (UnicodeDecodeError)', exec_info set to sys.exec_info() and dictionary extra
substitute '%s' in 'Not Found: %s' with request.path, extra is an dictionary with two pairs of elements 'status_code' with value 404,
call the function logging.getLogger with string 'django.request' as the argument, assign the return object handle to logger.
call logging.getLogger method with string 'django.request' as argument, store the result in logger.
call the method logging.getLogger with an argument string 'py.warnings', substitute the result for logger.
call the method logging.getLogger with an argument name, substitute the result for logger.
get the value under log key of root.manager.loggerDict dictionary, substitute it for logger.
get config dictionary element under 'loggers' key, if it exists substitute it for loggers, if not, loggers is EMPTY_DICT.
call the method logging._acquireLock.
disable_existing is boolean True.   call the method logging._handler.clear.
call the method logging._releaseLock.
call the method logging.captureWarnings with an argument boolean True.
call the method logging.Handler.__init__ with an argument self.
call the function logging_config_func with an argument DEFAULT_LOGGING.
call the function logging_config_func with an argument logging_settings.
call the function import_string with an argument logging_config, substitute the result for logging_config_func.
join callback.__module__, character "." and callback.__class__.__name__ together, substitute the result for lookup_str.
join together callback.__module__, character "." and callback.__name__, substitute the result for lookup_str.
call the function get_callable with arguments lookup_view and boolean True, substitute the result for lookup_view.
join m and n into a string, separated by '.', substitute the result for lookup_view_s.
substitute lookup_view for lookup_view_s.
call the method lookups.appendlist with 2 arguments: name and a tuple containing 3 elements: new_matches, sum of p_pattern and pat,
call the method lookups.appendlist with 2 arguments: pattern.callback and a tuple containing 3 elements: bits, p_pattern,
call the method lookups.appendlist with 2 arguments: pattern.name and a tuple containing 3 elements: bits, p_pattern,
lookups is an instance of the MultiValueDict class.
substitute i incremented by 1 for value under the 'counter' key of the loop_dict dictionary.
substitute i for value under the 'counter0' key of the loop_dict dictionary.
if i is equal to integer 0, value under the 'first' key of the loop_dict dictionary is boolean True, otherwise it is False.
if i is equal to len_values decremented by 1, value under the 'last' key of the loop_dict dictionary is boolean True, otherwise it is False.
subtract i from len_values, substitute the result for value under the 'revcounter' key of the loop_dict dictionary.
subtract i from len_values, decrement the result by integer 1, substitute it for value under the 'revcounter' key of the loop_dict dictionary.
loop_dict and value under the 'forloop' key of the context dictionary are dictionaries with an entry: parentloop for 'parentloop'.
where '%s' is replaced with token.contents.   call the method re.split with 2 arguments: raw string ' *, *' and elements of bits from 1 index to in_index index,
second contains: string 'InternalHigh and ULONG_PTR, third: '_offset_union' and _OFFSET_UNION, forth 'hEvent' and HANDLE.   call the function POINTER with argument OVERLAPPED, substitute the result for LPOVERLAPPED.
lst is an empty list
declare an empty list lst1
lst2 is an empy list
LUHN_ODD_LOOKUP is a tuple with 10 elements: integers 0, 2, 4, 6, 8, 1, 3, 5, 7 and 9.
call the M.set method with the key, real_value, coded_value as the arguments.
match the rawdata from the position k, with attrfind pattern, assign the result to the m.
substitute base for m.
format self.month_field string with name, use it as the key for the data dictionary, substitute the result for m.
zip together new_keys and keys, convert it to dictionary, assign it to m.
get the attribute '__module__' from the getattr, if it exists substitute it for m, if not, m is None.
match string s with regex IDENTIFIER, substitute the result for m.
convert d into a integer, subtract d from it, substitute the result for m.
sum m and value under the medium key of the base dictionary, substitute it for m.
m is an instance of Media class.
with the result renamed to fp, perform the following:   read data from file fp, use the result as an argument for the call to the function plural_forms_re.search, substitute it for m.
call the method re.match with 2 arguments: naiveip_re and value under the 'addrport' key of the options dictionary, substitute the result for m.
call the method regex.match with an argument date, substitute the result for m.
call the method regex.search with 2 arguments: text and pos.
match value string with regex self.CONVERT_PATTERN, substitute the result for m.
match rest string with self.DOT_PATTERN regex, substitute the result for m.
get the value under the key of the dictionary self, if key does not exists return evaluated result of the function Morsel, substitute it for M.
match rest string with self.INDEX_PATTERN regex, substitute the result for m.
match rest string with self.WORD_PATTERN regex, substitute the result for m.
m2m_convert is an lambda function with an argument n, return value is the return value of the method field.rel.to._meta.pk.to_python,
m2m_convert is a lambda function with an argument v, return value is the result of the function smart_text called with an argument:
return value of the method field.rel.to._meta.pk.to_python called with an argument v.   call the m2m_convert function with pk as argument, for every pk in field_value, substitute the value under the field.name key of the m2m_data dictionary.
call the method self._handle_m2m_field_node with an argument field_node and field, substitute the result for value under the field.name key of m2m_data dictionary.
substitute the result for the value under the Model._meta.pk.attname key of data dictionary.   m2m_data is an empty dictionary.
m2m_data is an empty dictionary.
m2m_value is a lambda function with an argument value, return value is the result of the function smart_text called with arguments:
call the mail.attach_alternative method with html_message and string 'text/html' as arguments.
call method mail.attach_alternative as html_message and string 'text/hmtl' as arguments.
otherwise html_message is None.   call the method mail.mail_admins with 5 arguments: subject, message, fail_silently as boolean True, tml_message as html_message,
call the method mail.outbox.extend with messages.
mail.outbox is an empty list.
call the mail.send method with fail_silently=fail_silently as argument.
call the mail.send method with fail_silently set to fail_silently as argument.
call the function EmailMultiAlternatives with settings.EMAIL_SUBJECT_PREFIX and subject converted to strings and concatenated,
call the function EmailMultiAlternatives with settings.EMAIL_SUBJECT_PREFIX and subject converted to strings and concatenated,
call the EmailMultiAlternatives function with, subject, message, from_email, recipient_list and connection set to connection, as arguments, assign the result to mail.
call the function parse_header with an argument line, substitute the result for main_value_pair and params, respectively.
convert x into a string for every x in list of version elements up to the parts index, join the previous into a string separated by '.', assign the result to major.
call the get_major_version wit version as argument, store the result in major.
substitute _make_key for make_key.
or opts.auto_created is True and return value of converter function with opts.auto_created._meta.db_table is contained in tables,   invert the evaluated expression and return it.   manifest is OrderDict class instance, created with tuple of two elements, app_name and list of elements of model_list for which model_installed function returned true, for every app_name and model_list in all_modules.
call the method self.translate_token with an argument token, append the result to mapped_tokens.
mapped_tokens is an empty list.
mapping is a dictionary with 3 initial entries: 'a' for 'alpha', 'b' for 'beta' and 'c' for 'rc'.
mapping is an dictionary with 8 initial entries: BLOCK_TAG_START for 'openblock', BLOCK_TAG_END for 'closeblock',
perform the bitwise or operation on the next 6 operands pyinotify.IN_MODIFY pyinotify.IN_DELETE, pyinotify.IN_ATTRIB,
throw an exception with string "unexpected call to parse_endtag" as the message.   search anywhere in the rawdata string starting from the (i+1)-th element for the _html_parser.endendeag, replace the result for match.
match the rawdata from the position i, with _html_parser.endtagfind pattern, assign the result to the match.
if pattern equals '*' or pattern starts with '.' or pattern equals host, and only if:
call the method condition.eval with an argument context, substitute the result for match.
match regex date_re with value, substitute the result for match.
match regex datetime_re with value, substitute the result for match.
call the method kwarg_re.match with an argument bit, substitute it for match.
call the method kwarg_re.match with an argument first element of bits, substitute the result for match.
match is None.
call the method RE_DATE.match with an argument value, substitute the result for match.
call the method self.regex.search with an argument path, substitute the result for match.
call the function self.regex.search with an argument path, substitute the result for match.
match the rawdata from the position i+1, with tagfind pattern, assign the result to the match.
match regex time_re with value, substitute the result for match.
call the method filter_re.finditer with an argument token, substitute the result for matches.
matches is boolean True,
call the options.get method with string 'MAX_ENTRIES' and integer 300 as arguments, use the string 'max_entries' and previous result as the arguments for the call to the params.get method, substitute the result for max_entries.
max_num is integer 1.
substitute DEFAULT_MAX_NUM for max_num,
MAX_NUM_FORM_COUNT is a string 'MAX_NUM_FORMS'.
convert max_value into an floating point number, substitute it for max_value.
call the method self.max_expr.resolve with an argument context, substitute the result for max_value.
call the method self.max_width.resolve with an argument context, convert the result to an integer and substitute it for max_width.
if line ends with a new line character substitute width incremented by integer 1 for max_width, if not substitute width for max_width.
bitwise shift integer 1 to the left by 31 spaces, substitute integer 1 from the result, convert the result to a integer, substitute it for MAXSIZE.
bitwise shift integer 1 to the left by 63 spaces, substitute integer 1 from the result, convert the result to a integer, substitute it for MAXSIZE.
substitute sys.maxsize for MAXSIZE.
move integer 1 left for 20 bits, substitute the result for MB.
media is an instance of Media class.
append field.widget.media to media, substitute the result for media.
sum media and w.media, substitute the result for media.
media is a property object of the current class, with _get_media as getter function.
call the method self._css.keys, sort the result and substitute it for media.
substitute kwargs for media_attrs.
substitute media.__dict__ for media_attrs.
PasswordInput', 'HiddenInput', 'MultipleHiddenInput', 'ClearableFileInput', 'FileInput', 'DateInput', 'DateTimeInput', 'TimeInput',   'Textarea', 'CheckboxInput', 'Select', 'NullBooleanSelect', 'SelectMultiple', 'RadioSelect','CheckboxSelectMultiple', 'MultiWidget',   'SplitDateTimeWidget' and 'SplitHiddenDateTimeWidget'.   MEDIA_TYPES is a tuple with 2 strings: 'css' and 'js'.
mem_args is a list containing of first num_args elements of args list.
members is a list with elements member for every member in the result of the function self._archive.getmembers,
MEMCACHE_MAX_KEY_LENGTH is integer 250.
substitute obj for the value of the memo dictionary at the identity of the self object key.
substitute result for the value of the memo dictionary, with identity of the self object as an key.
get the identity of the self object, use it as a key to get the value of the memo dictionary, substitute result for it.
substitute result for value under the id of self key of memo dictionary.
get the id of the self object, use it as a key to obtain the value from the memo dictionary, substitute self with it.
get the id of the self object, use it as a key to obtain the value from the memo dictionary, substitute self with it.
memo is an empty dictionary.
substitute buffer for memoryview.
substitute memoryview for memoryview.
substitute the result for migration.ancestry.   append migration to merge_migrations.
merge_migrations is an empty list.
substitute message.message, message.code, message.params for message, code and params, respectively.
call the method message.message.
substitute error_messages under the message.code key of error_messages dictionary for message.message.
divide message by error.params, substitute the residue of the division for message.
call the function _ with an argument string '%(datetime)s couldn\'t be interpreted in time zone %(current_timezone)s; it '
call the function _ with the argument string 'Ensure this value is %(limit_value)s (it is %(show_value)s).', substitute the result for message.
call the function _ with an argument string 'Ensure this value is greater than or equal to %(limit_value)s.', substitute the result for message.
call the function _ with an argument string 'Ensure this value is less than or equal to %(limit_value)s.', substitute the result for message.
call a function _ with a string 'Enter a valid value.' as an argument, substitute the result for message.
(?:[A-Z]{2,6}\.?|[A-Z0-9-]{2,}(?<!-)\.?)|\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}|\[?[A-F0-9]*:[A-F0-9:]+\]?)(?::\d+)?(?::\d+)?(?:/,   "?|[/?]\S+)$" and re.IGNORECASE, substitute the result for regex.   call a function _ with a string 'Enter a valid value.' as an argument, substitute the result for message.
call a function _ with a string 'Enter a valid value.' as an argument, substitute the result for message.
join tokens elements into a string, substitute it for message.
message is a string 'make sure the name begins with a letter or underscore'.
message is an string 'Unknown field(s) (%s) specified for %s'.
message is a string 'use only numbers, letters and underscores'.
replace '%s' in string "'%s' already exists" with top_dir, substitute it for message.
message is an string "%s\n\nRequest repr(): %s"  formated with the result of the metod self.format with an argument record,
substitute e for message.
call the function email_message.message, substitute the result for message.
substitute error.message for message.
convert elements of error into a list, substitute the first element for message.
substitute message.error_dict for message.
substitute message.error_list for message.
join missing_fields into a string separated by string ', ', use it and opts.model.__name__ to format message, substitute the result for message.
call the function trim_whitespace with an argument message, substitute the result for message.
call the function ungettext_lazy with 3 arguments: string 'Ensure this value has at least %(limit_value)d character (it has %(show_value)d),
call the function ungettext_lazy with 3 arguments: string 'Ensure this value has at most %(limit_value)d character (it has %(show_value)d),
message is an instance of the ValidationError class created with an argument message.
substitute the result for context_match.   call the method context_match.group with an argument integer 1, substitute the result for message_context.
strip message_context of '"' characters from both ends, substitute the result for message_context.
strip message_context of "'" characters from both ends, substitute the result for message_context.
message_context is None.
use the result as the argument for the call to the messages.update function.   update messages dictionary with error_messages, if it exists, if not don't update it.
get 'default_error_messages' from the c object, if it doesnt exists return an empty dictionary,
password set to auth_password, fail_silently set to fail_silently as arguments, assign the result to connection.   call the EmailMessage function wit subject, message, sender, recipient and connection set to connection,
messages is an empty dictionary.
messages is an instance of the ValidationError class created with an argument messages.
meta is a string '<could not parse>'.
get is a tuple containing elements generated by the call to the function pformat with an argument META_override,
get 'Meta' attribute from form object, if it exists substitute it for meta, if not meta is None.
meta is an instance of a class named 'Meta', derived from the object base class, without any fields.
Meta is an instance of class with name 'Meta', parent base class and fields attrs.
call the method cls.__promise__ with 3 arguments: resultclass, k and v, substitute the result for meth.
remove kwargs dictionary element under the 'method' key, substitute it for method.
substitute the result for trimmed.   middle is a string '<a href="%s"%s>%s</a>' formated with url, nofollow_attr and trimmed.
substitute elements of middle from the beginning to the negative length of closing, for middle.
substitute elements of middle from the beginning to the negative length of punctuation, for middle.
substitute elements of middle from length of opening index to the end, for middle.
call the function middleware_class with 2 arguments: unpacked list m_args and unpacked dictionary m_kwargs,
call the method loader.graph.forwards_plan with argument a tuple, with 2 elements: app_label and migration_name,
call the method migration.ancestry.index with an argument common_ancestor, increment the result by one,
call the method loader.get_migration with arguments node_app and node_name, extend the migration.merged_operations with the operations field of the result.
slice migration.ancestry list from the last result as an starting index to the end, substitute the slice for migration.branch.   migration.merged_operations is an empty list.
call the executor.loader.get_migration_by_prefix with app_label and migration_name, substitute the result for migration.
call the executor.loader.get_migration_by_prefix with app_label and migration_name with arguments, substitute the result fr migration.
call the method executor.loader.get_migration_by_prefix with arguments app_label, migration_name, substitute the result for migration.
call the method loader.get_migration with arguments app_label and migration_name, substitute the result for migration.
call the method writer.as_string, substitute the result for migration_string.
call the function os.path.dirname with an argument writer.path, substitute the result for migrations_directory.
where '%s' is replaced with migration_name and app_label.   migrations_to_squash is a list created dynamically with elements: return value of the method executor.loader.get_migration called,
mime_type is a string 'application/atom+xml; charset=utf-8'.
mime_type is a string 'application/rss+xml; charset=utf-8'.
call the method MIMEMessage.__setitem__ with arguments self, name and val.
call the method MIMEMultipart.__init__ with 5 arguments: self, _subtype, boundary, _subparts and unpacked dictionary _params.
call the method MIMEMultipart.__setitem__ with arguments self, name and val.
call the method MIMEText.__init__ with 4 arguments: self, text, subtype and charset.
call the method MIMEText.__init__ with 4 arguments: self, text, subtype and None.
call the method MIMEText.__setitem__ with arguments self, name and val.
call the mimetypes.guess_type with an argument filename, assign the result to the mimetype and _, respectively.
substitute DEFAULT_ATTACHMENT_MIME_TYPE for mimetype.
call the method m.group with an argument string 'min', convert the result into a string, substitute it for min.
substitute DEFAULT_MIN_NUM for min_num,
MIN_NUM_FORM_COUNT is a string 'MIN_NUM_FORMS'.
substitute string "Enter at least one %s.", with '%s' replaced by label, for missing_args_message.
missing_args_message is an string "Enter at least one application label.".
project name in the current directory or optionally in the given directory..   missing_args_message is a string "You must provide a project name.".
missing_args_message is a string "You must provide an application name.".
missing_args_message is a tuple containing a string "No database fixture specified. Please provide the "
substitute the resulting list for none_model_fields.   missing_fields is difference between set containing none_model_fields and set containing result of the method,
mixed_subtype is a string 'mixed'.
call the function import_module with an argument mod_name.
call the function import_module with an argument taglib_module, substitute the result for mod.
call the function get_mod_func with an argument lookup_view, store the result in mod_name and func_name, respectively.
mode is a string 'wb' is chunk is instance of the type bytes, otherwise mode is a string 'wt'.
call the function stat.S_IMODE with argument st.st_mode, substitute the result for mode.
remove first element from model_dependencies, assign it to model and deps, respectively.
call the function _get_model with an argument value under the 'model' key of the d dictionary, substitute the result for Model.
call the method app_config.get_model with an argument model_label, substitute the result for model.
call the method apps.get_model with exclude as an argument, substitute it for model.
model is None.
call the method self._get_model_from_node with arguments node and string 'model'.
substitute self.obj for model.
append a tuple containing 2 elements: model and deps to model_dependencies.
call the methof model_dependencies.reverse.
model_dependencies is an empty list.
model._meta.app_label and model._meta.object_name joined into a string, with separator '.',   result joined into a string, separated by string ', ' for every model and deps in sorted list of elements skipped sorted by key:   return value of the lambda function with an argument obj, and result the __name__ field of the first element of obj.   substitute skipped for model_dependencies.
call the method Model._meta.get_all_field_names, substitute the result for model_fields.
call the method node.getAttribute with an argument attr, substitute the result for model_identifier.
append model to model_list.
model_list is an empty list.
call the method app_config.get_models, substitute the result fr model_list.
add model to models set.
call the models.Model.save_base method with arguments self.object, using as using and raw set to boolean True.
call the method models.signals.post_migrate.send with 5 arguments: sender set to app_config, app_config set to app_config,
verbosity set to verbosity, interactive set to interactive and using set to db.   call the method models.signals.post_syncdb.send with 6 arguments: sender set to app_config.models_module,
call the method models.signals.pre_migrate.send with 5 arguments: sender set to app_config, app_config set to app_config,
verbosity set to verbosity, interactive set to interactive and using set to db.   call the method models.signals.pre_syncdb.send with 6 arguments: sender set to app_config.models_module,
models is a string 'models'
call the method app_config.get_models with include_auto_created set to boolean True, substitute the result for models.
models is an empty set.
modified_code is None.
call the function _import_module with an argument self.mod, substitute the result for module.
replace '%s' in string '%s.management.commands.%s' with app_name and name, respectively, use it as an result for the call to the
and third element of result of the function sys.exc_info.   call the function import_module with an argument module_path, substitute the result for module.
call the function importlib.import_module with 2 arguments: flup_module converted to string and appended to '.' character, and string 'flup', substitute the result for module.
call the function importlib.import_module with an argument serializer_module, substitute it for module.
create a instance of a class BadSerializerModule from the object base class, with elements Deserializer set to bad_serializer and Serializer set to bad_serializer.
split dotted_path into two parts from the right at the '.' character, assign the result to module_path and class_name, respectively.
substitute _urllib_error_moved_attributes for Module_six_moves_urllib_error._moved_attributes.
substitute _urllib_parse_moved_attributes for Module_six_moves_urllib_parse._moved_attributes.
substitute _urllib_request_moved_attributes for Module_six_moves_urllib_request._moved_attributes.
substitute _urllib_response_moved_attributes for Module_six_moves_urllib_response._moved_attributes.
substitute _urllib_robotparser_moved_attributes for Module_six_moves_urllib_robotparser._moved_attributes.
module_values is a set created from the elements of sys.modules.values method return value.
call the method _format_modules_cache.setdefault with 2 arguments: lang and list created out of the results of the function,
call the method m.group with an argument string 'mon', convert the result to lowercase, use it as an argument for the call to the,
decrement date.month by integer 1, use the result as an key to obtain the value from the months dictionary, substitute it for month.
month_field is a string '%s_month'.
MONTHS is a list with 12 elements: strings 'jan', 'feb', 'mar', 'apr', 'may', 'jun', 'jul', 'aug', 'sep', 'oct', 'nov', and 'dec'.
months is a tuple with 12 elements: strings 'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov' and 'Dec'.
MONTHS is an dictionary with 12 entries: result of the call to the function _ with an argument string 'January' for 1,
result of the call to the function _ with an argument string 'February' for 2,   result of the call to the function _ with an argument string 'March' for 3,   result of the call to the function _ with an argument string 'April' for 4,   result of the call to the function _ with an argument string 'May' for 5,   result of the call to the function _ with an argument string 'June' for 6,   result of the call to the function _ with an argument string 'July' for 7,   result of the call to the function _ with an argument string 'August' for 8,   result of the call to the function _ with an argument string 'September' for 9,   result of the call to the function _ with an argument string 'October' for 10,   result of the call to the function _ with an argument string 'November' for 11,   and result of the call to the function _ with an argument string 'December' for 12.   MONTHS_3 is an dictionary with 12 entries: result of the call to the function _ with an argument string 'jan' for 1,
result of the call to the function _ with an argument string 'feb' for 2,   result of the call to the function _ with an argument string 'mar' for 3,   result of the call to the function _ with an argument string 'apr' for 4,   result of the call to the function _ with an argument string 'may' for 5,   result of the call to the function _ with an argument string 'jun' for 6,   result of the call to the function _ with an argument string 'jul' for 7,   result of the call to the function _ with an argument string 'aug' for 8,   result of the call to the function _ with an argument string 'sep' for 9,   result of the call to the function _ with an argument string 'oct' for 10,   result of the call to the function _ with an argument string 'nov' for 11,   result of the call to the function _ with an argument string 'dec' for 12.   MONTHS_3_REV is an dictionary with 12 entries: 1 for 'jan', 2 for 'feb', 3 for 'mar', 4 for 'apr', 5 for 'may', 6 for 'jun',
result of the function pgettext_lazy with 2 arguments: strings 'abbrev. month' and 'Feb.' for 2,   result of the function pgettext_lazy with 2 arguments: strings 'abbrev. month' and 'March' for 3,   result of the function pgettext_lazy with 2 arguments: strings 'abbrev. month' and 'April' for 4,   result of the function pgettext_lazy with 2 arguments: strings 'abbrev. month' and 'May' for 5,   result of the function pgettext_lazy with 2 arguments: strings 'abbrev. month' and 'June' for 6,   result of the function pgettext_lazy with 2 arguments: strings 'abbrev. month' and 'July' for 7,   result of the function pgettext_lazy with 2 arguments: strings 'abbrev. month' and 'Aug.' for 8,   result of the function pgettext_lazy with 2 arguments: strings 'abbrev. month' and 'Sept.' for 9,   result of the function pgettext_lazy with 2 arguments: strings 'abbrev. month' and 'Oct.' for 10,   result of the function pgettext_lazy with 2 arguments: strings 'abbrev. month' and 'Nov.' for 11,   result of the function pgettext_lazy with 2 arguments: strings 'abbrev. month' and 'Dec.' for 12,   MONTHS_ALT is an dictionary with 12 entries: result of the function pgettext_lazy with 2 arguments: 'alt. month' and 'January' for 1,
7 for 'jul', 8 for 'aug', 9 for 'sep', 10 for 'oct', 11 for 'nov' and 12 for 'dec'.   MONTHS_AP is an dictionary with 12 entries: result of the function pgettext_lazy with 2 arguments: 'abbrev. month' and 'Jan.' for 1,
substitute http_cookies.Morsel for Morsel.
append string '.moves' to __name__, use it as an argument to instantiate _MovedItems class, assign it to moves,
call the method msg.attach with an argument attachment.
call the method msg.attach with an argument body_msg.
call the msg.attach with an argument body_msg.
call the method self._create_attachment with an unpacked list attachment as an argument, use the result as an argument for the call to the msg.attach method.
call the method self._create_mime_attachment with unpacked list alternative as an argument, use the result as an argument for the call to the msg.attach method.
join elements of self.cc into a string separated by ', ', substitute the result for value under the 'Cc' key of msg dictionary.
call the formatdate function, substitute it for value under the 'Date' key of msg dictionary.
call the method self.extra_headers.get with string 'From' and self.from_email as arguments, substitute the result for value under the 'From' key of msg dictionary.
call the make_msgid function, substitute it for value under the 'Message-ID' key of msg dictionary.
substitute self.subject for value under the 'Subject' key of msg dictionary.
call the method self.extra_headers.get with arguments: string 'To' and joined string from self.to elements separated by ', ',
substitute value for value under name key of msg dictionary.
append newline character to msg.
substitute '%s' in the string '\n%s:\n%s\n', with group_name and formatted, substitute the result for msg.
append string " The domain name provided is not valid according to RFC 1034/1035." to msg.
append string " You may need to add %r to ALLOWED_HOSTS." to msg, where '%s' is replaced with domain.
append string "System check identified %s (%s silenced)." to msg, replace first '%s' for: string "no issues",
append ending to msg.
msg is a string '%sError importing module %s: "%s"', where '%s' is replaced with error_prefix, dotted_path and e, respectively.
msg is a string 'Module "%s" does not define a "%s" attribute/class' formated with dotted_path and class_name, respectively.
msg is an empty string.
msg is a string "[%s] %s\n", where '%s' are replaced with return value of the method self.log_date_time_string and formated args.
msg is a string "%s doesn't look like a module path" formated with dotted_path.
msg is a string "Could not decode base64 data: %r", where '%r' is replace with e.
msg is a string "Execution of %s failed: %s", with '%s' replaced by self.program and errors.
msg is a string "Execution of %s failed", with '%s' replaced by self.program.
msg is a string "Invalid HTTP_HOST header: %r.", replace '%r' with host.
replace '%s' in string "System check identified some issues:\n%s" with msg, substitute it for msg.
msg is an string "Unclosed tag '%s'. Looking for one of: %s ", where '%s' is replaced with command,
msg is an string "django.utils.text.javascript_quote() is deprecated. Use django.utils.html.escapejs() instead.".
msg is a string ""The included urlconf '{name}' does not appear to have any patterns in it.
msg is a tuple containing one initial entry: a string "WSGI application '%(app_path)s' could not be loaded; Error importing module: '%(exception)s'", where '%(app_path)s' is replaced by app_path and '%(exception)s' is replaced by e.
msg is a tuple containing string "\nYou have installed Django's auth system, and don't have any superusers defined.\nWould you like to create one now? (yes/no): ".
msg is a string "%(model)s.Meta.%(opt)s cannot be a string. Did you mean to type: ('%(value)s',)?", where '%(model)s' is replaced,
msg is a string "The use of the language code '%s' is deprecated. Please use the '%s' translation instead.".
call the method message.message, substitute the result for msg.
msg is an instance of a class SafeMIMEMultipart, created with the arguments: _subtype set to self.alternative_subtype and encoding set to encoding.
msg is an instance of a class SafeMIMEMultipart, created with arguments: _subtype set to self.mixed_subtype and encoding set to encoding.
msg is a instance of a SafeMIMEText class created with arguments: self.body, self.content_subtype and encoding.
call the self._create_message method with argument msg, substitute it for msg.
call the self.style.HTTP_BAD_REQUEST with an argument msg, substitute it for msg.
call the self.style.HTTP_INFO with an argument msg, substitute it for msg.
call the self.style.HTTP_NOT_FOUND with an argument msg, substitute it for msg.
call the self.style.HTTP_NOT_MODIFIED with an argument msg, substitute it for msg.
call the self.style.HTTP_REDIRECT with an argument msg, substitute it for msg.
call the self.style.HTTP_SERVER_ERROR with an argument msg, substitute it for msg.
call the self.style.HTTP_SUCCESS with an argument msg, substitute it for msg.
increment msg_count by one.
increment mes_count by one.
msg_count is an integer 0.
msg_count is integer 0.
call the method msg.as_bytes, substitute the result for msg_data.
call the method msg_data.decode with argument charset, substitute the result for msg_data.
convert to strings and concatenate context, CONTEXT_SEPARATOR and message, substitute the result for msg_with_ctxt.
msgattrib_options is an list with elements: string '--no-obsolete'.
msgid is a string '<%s.%s.%s%s@%s>', replace '%s' with utcdate, pid, randint, idstring and idhost, respectively.
msgmerge_options is an list with elements: strings '-q' and '--previous'.
call the function popen_wrapper with argument args, assign the result to msgs, errors and status.
call the function popen_wrapper with an argument args, assign the result to msgs, errors and status, respectively.
call the function popen_wrapper with an argument args, assign the result to msgs, errors and status.
substitute the result for args.   call the function popen_wrapper with an argument args, assign the result to msgs, errors and status, respectively.
call the function dropwhile with 2 arguments: function len and msgs spit into parts at newlines, join the result into a string,
join elements of lines into a string, separated by newline characters, substitute it for msgs.
with the result renamed to fp, perform the following:   read file fp and substitute the result for msgs.
call the method msgs.decode with an argument string 'utf-8', substitute the result for msgs.
call the method msgs.decode with an argument string 'utf-8', substitute it for msgs.
substitute '%s' in string "#. #-#-#-#-#  %s.pot (PACKAGE VERSION)  #-#-#-#-#\n" with self.domain,
replace every occurrence of string 'charset=CHARSET' for string  'charset=UTF-8' in msgs, substitute the result for msgs.
replace every occurrence of old for new in msgs, substitute the result for msgs.
call the method self.copy_plural_forms with arguments: msgs and locale, substitute it for msgs.
msgs_with_ctxt is a tuple containing 2 elements: string created by concatenating context, CONTEXT_SEPARATOR and singular,
msguniq_options is an list with elements: string '--to-code=utf-8'.
decrement mtime by stat.st_ctime.
substitute stat.st_mtime for mtime.
must_be_first is boolean False.
must_be_first is boolean True.
evaluate the function import_string with middleware_path as argument, substitute the result for my_class.
store in the variable n the result of the bitwise and operation between n and the variable width
convert shellcode to a bytearray and store it in the variable n
store in the variable n the bytearray of shellcode
store in the variable n the length of the bytearray of shellcode
set the variable n to the length of the variable shellcode converted to bytearray
n is equal to the length of shellcode
set the variable n to the length of shellcode
call the method re.compile with 2 arguments: raw string """^(?: (?P<addr> (?P<ipv4>\d{1,3}(?:\.\d{1,3}){3}) |"""
call the method _parse_header with an argument line, assign the result to name and tuple with 2 elements: value and params, respectively.
call the os.path.splitex with argument name, assign the result to name and ext, respectively.
call the function forbid_multi_line_headers with 3 arguments: name, val and string 'ascii', substitute the result for name and val, respectively.
call the function forbid_multi_line_headers with 3 arguments: name, val and self.encoding, substitute the result for name and val, respectively.
split into two parts string main_value_pair at character ':', substitute the parts for name and value, respectively.
call the method match.groups, assign the result to name and value, respectively.
append ch to result.
call the function _resolve_name with 3 arguments: name list elements from the level index to the end, package and level,
join elements of parts into a string, separated with '.', substitute it for name.
name is a string "_%d" formated with num_args.
join package.__name__ and module_name into a string separated with '.', substitute it for name.
name is an empty string
surname is an empty string
name is an empty list.
substitute the last element of args for name.
substitute second element of args for name.
remove config dictionary element under 'name' key, if it exists substitute it for name, if not, name is an empty string.
substitute content.name for name.
get 'name' attribute from the file object, if it doesnt exists use None, substitute it for name.
get "_decorated_function" attribute from func object, if it exists substitute __name__ field of the result for name,
for every match in the result,   substitute match.lastgroup for name.
substitute member.name for name.
subtract length of the ext from the integer 255, take first elements of the name list up to the previous result index,
call the function os.path.basename with argument name, substitute the result for name.
substitute '%s' in string "%s_%s%s" with: file_root, next(count) and file_ext, join the dir_name and previous string into a valid file path, substitute it for name.
take the first i elements of string p, strip the whitespaces from the both sides, convert it to lowercase and apply on it the method,
name is a property object with _get_name as a getter method and _set_name as a setter method.
split s into parts by '.', substitute the result for name.
substitute self._pk_field.name for name.
call the method self._save with arguments name and content, substitute it for name.
substitute self.fk.name for name.
call the method self.format with an argument string '0', substitute the result for name.
call the method self.get_available_name with argument name, substitute it for name.
call the method self.get_available_name with argument name, substitute the result for name.
substitute self.html_initial_name for name.
substitute self.html_name for name.
call the self.path with argument name, substitute it for name.
call the method self.split_leading_dir with an argument name, substitute the first element of result for name.
call the method self.split_leading_dir with an argument name, substitute the second element of the result for name.
if self.timezone is true, call the method self.timezone.tzname with an argument self.data, substitute the result for name,
sum sign and hhmm, substitute the result for name.
for every app and names in result of the method conflicts.items, join names into a string, separated by ', ',
for every app and names in key, value tuple pairs of conflicts dictionary join names into a string separated by commas,
substitute tempfile.NamedTemporaryFile for NamedTemporaryFile.
substitute TemporaryFile for NamedTemporaryFile.
call the method self._archive.namelist, substitute the result for namelist.
if not, isolated_context is boolean False.   get the value under the 'width' key of the options dictionary, if it exists, substitute it for namemap, if not namemap is an empty dictionary.
substitute tuple containing 2 elements: sum of p_pattern and prefix, and sub_pattern for value under the namespace key of the namespace dictionary.
substitute the tuple containing 2 elements p_pattern and pattern for value under the pattern.namespace key of the namespaces dictionary.
namespaces is an empty dictionary.
divide 10 to the power of 400 by 10 to the power of 400, substitute the result for nan.
set the variable nasm to the variable encoded after replacing all occurrences of "z" with "zzz" in it
replace all "z" with "zzz" in the variable encoded and store in the variable nasm
set the variable nasm to all the elements in the variable nasm excluding the last 1 element
exclude the last element from the variable nasm
exclude the last 2 elements from the variable nasm
exclude the last 3 elements from the variable nasm
substitute elements of nasm from the index 2 to end for nasm
set the variable nasm to all the elements in the variable nasm starting from index 3 until the end
cast encoded to string and replace all occurrences of "\\x" with ",0x" in it
set the variable nbits to the second command-line argument casted to string
set the variable nbits to the second command-line argument
set the variable nbits to the third command-line argument
needs_multipart_form is boolean False.
needs_multipart_form is boolean True.
call the self.convert method with i, self.decimal_digits, self.digits and '-' as arguments, assign the result to the neg and value, respectively.
call the self.convert method with s, self.decimal, self.decimal_digits and self.sign as arguments, assign the result to the neg and value, respectively.
neg is integer 0.
neg is integer 1.
multiply 10 to the power of 200, with 10 to the power of 200, negative, substitute the result for neg_inf.
decrement nesting by one.
increment nesting by one.
nesting is integer 0.
nesting is integer 1.
call the method netloc.encode with an argument string 'idna', on the return value call the decode method with string 'ascii' as argument, substitute the result for netloc.
call the method netloc.encode with an argument string 'idna', call the method decode on the result with an argument 'ascii',
set new to new bitwise xor the variable xor
set new to new xor the variable xor
set the variable new to the variable new bitwise xor the variable xor
assign new to new bitwise xor the variable xor
append orig_file to string '#: ', substitute it for new.
new is not i bitwise and 0xff
set the variable new to not i and 0xff
set the variable new to i and 0xff
set the variable new to i bitwise and 0xff
substitute name for new.
new is new xor c
new is new xor temp
set the variable new to bitwise xor of the variables new and xor 
update the value of the variable new with left shifting with the variable shift
assign the variable new the value of new left shift with the variable shift
new is new shifted left by temp
assign the variable new the value of new right shift with the variable shift
assign the variable new the value of z left shift with the variable shift
append i_args to args, append new_args with the result.
new_args is an empty list.
substitute name for new_attr.
substitute old_attr for new_attr.
substitute declared_fields for new_class.base_fields.
substitute fields for new_class.base_fields.
substitute declared_fields for new_class.declared_fields.
call the method media_property with an argument new_class, substitute the result for new_class.media.
call the method __new__ from the base class of the class DeclarativeFieldsMetaclass, with 4 arguments: mcs, name, bases and attrs.
call the method __new__ from the base class of the class MediaDefiningClass, called with 4 arguments: mcs, name, bases and attrs.
if not formfield_callback is None.   call the method __new__ from the base class of the class ModelFormMetaclass, with 4 arguments: mcs, name, bases and attrs,
call the method __new__ with 4 arguments: cls, name, bases and attrs, from the base class of the class RenameMethodsBase.
call the method self.open, substitute the result for the new_conn_created.
call the method new_context._reset_dicts values.
substitute csrf_token for value under the 'csrf_token' key of new_context dictionary.
call the function context_class with 2 arguments: _dict and unpacked dictionary containing 4 entries:
call the function copy with an argument self, substitute the result for new_context.
value under the "RUN_MAIN" key of new_environ dictionary is a string 'true'.
call the method os.environ.copy, substitute the result for new_environ.
call the check function with argument app_config set to app_config, substitute the result for new_errors.
write content to new_file file.
join dirpath and filename into a path separated by '/', append it to new_filenames.
create the list of paths from which filename module was included for every filename in new_modules, only is filename has '__file__' attribute, substitute the resulting list for new_filenames.
append string '0000' to new_ip.
split second element of hextet into parts by ':', append them to new_ip.
new_ip is an empty list,
split first element of hextet into parts by ':', append them to new_ip.
split ip_str into parts by ':', substitute the result for new_ip.
call the method self.key_function with key, self.key_prefix and version as arguments, substitute the result for new_key.
define the method get_many with 3 arguments, self class instance, keys and version set to None.
call the method normalize with sum of parent_pat and pat as an argument, substitute the result for new_matches.
get the value under the new_method_name key of the base.__dict__ dictionary, substitute it for new_method.
substitute second element of renamed_method for new_method_name.
dependencies set to a list of tuples with 2 elements: app_label and migration.name for every migration in merge_migrations.   call the method subsclass with 2 arguments: string "%04i_merge", replace '%04i' with biggest_number incremented by one,
dependencies set to new_operations and replaces set to replaces.   call the function subclass with 2 arguments string "0001_squashed_%s", where '%s' is replaced with migration.name and app_label,
substitute name for new_mod.
subtract _cached_modules from module_values, assign the result to new_modules.
new_msg is a tuple containing a string: "Database %s couldn't be flushed. Possible reasons:\n"
cal the method re.subn with 3 arguments: raw string '\W', string '_' and new_name.
append string '_field' to new_name.
in string '%s_%d', replace '%s' with new_name and '%d' with num, substitute the result for new_name.
convert new_name to a string and append string 'field' to it, substitute the result for new_name.
convert new_name to a string and append it to string 'field', substitute the result for new_name.
convert new_name to a string and append it to string 'number_', substitute the result for new_name.
convert col_name to lowercase, substitute the result for new_name.
replace all the occurrences of '__' with '_' in new_name.
substitute new_name, without the last 3 elements for new_name.
call the function func with 2 arguments: obj and unpacked list arg_vals, substitute the result for new_obj.
call the function func with 3 arguments: obj, autoescape set to context.autoescape and unpacked list arg_vals,
call the method optimizer.optimize with 2 arguments operations and migration.app_label, substitute the result for new_operations.
join top_dir, relative_dir and return value of the function filename.replace called with 2 arguments: base_name and name,
slice the path list from the result of the match.end method as the start index to the end, substitute it for new_path.
call the method stat.S_IMODE with an argument st.st_mode, calculate binary OR with the result and stat.S_IWUSR, as operands,
sum item and i_item together, append the result to new_result.
new_result is an empty list.
extend new_second_item with item.
new_second_item is an empty list.
call the method self.coerce with an argument choice, append the result to new_value.
call the function _strip_once with an argument value, substitute the result for new_value.
new_value is an empty list.
add value and delta together, substitute the result for new_value.
new_value is a sum of value and delta.
substitute newline character for newline.
convert newline character to unicode and substitute the result for newline.
define lambda function that returns self.file.newlines field, use it as an argument for property function, put the result in newlines.
call the function post_callback with an argument retval, substitute the result for newretval.
substitute klass.__dict__ for next.
sum index and length of self._boundary, substitute the result for next.
substitute (i+1)-th element of list_ for next_item.
substitute ngettext for ngettext_lazy.
nm and addr are addr.
call the encode function on the Header class instance, created with arguments nm and string 'utf-8', substitute the result for nm.
call the encode function on the Header class instance, created with arguments nm and encoding, substitute the result for nm.
no_settings_commands is a list containing entries: 'help', 'version', '--help', '--version', '-h', 'compilemessages', 'makemessages',
opts and unpacked dictionary kwargs.   NOCOLOR_PALETTE is a string 'nocolor'.
and prefix as node.prefix.   call the method node.replace with an argument decorated.
substitute token.source for node.source.
append the results into a list, substitute it for value.   node is an instance CycleNode class, created with  values,name and silent set to silent.
append the results into a list, substitute it for value.   node is an instance of CycleNode class, created wiht an argument values.
call the method node.render with an argument context, append the result to the nodelist.
append node to nodelist.
nodelist.contains_nontext is boolean True.
nodelist is an empty list.
get attr attribute of self object, if it exists substitute it for nodelist, if not nodelist is None.
call the method parser.parse with an argument tuple with 3 elements: strings 'elif', 'else' and 'endif', substitute the result for nodelist.
call the method parser.parse with an argument tuple with 3 elements strings 'elif', 'else' and 'endif', substitute the result for nodelist.
call the method parser.parse with an argument tuple with an element string 'endautoescape', substitute the result for nodelist.
call the method parser.parse with an argument tuple with one element string 'endblock', substitute the result for nodelist.
where '%s' is replaced with filter_name.   call the method parser.parse with an argument tuple with an element string 'endfilter', substitute the result for nodelist.
call the method parser.parse with an argument tuple with an element string 'endif', substitute the result for nodelist.
call the method parser.parse with an argument tuple with an element string 'endspaceless', substitute the result for nodelist.
call the method parser.parse with an argument tuple with an element string 'endverbatim', substitute the result for nodelist.
first element of bits and first element of remaining_bits.   call the method parser.parse with an argument tuple, with an element string 'endwith', substitute the result for nodelist.
call the method parser.parse, substitute the result for nodelist.
call the method self.create_nodelist, substitute the result for nodelist.
nodelist_empty is None.
call the method parser.parse with an argument tuple with an element string 'endfor', substitute the result for nodelist_empty.
nodelist_false is an instance of NodeList class.
nodelist_false is an instance of NodeList.
call the method parser.parse with an argument tuple with an element string 'endifchanged', substitute the result for nodelist_false.
call the method parser.parse with an argument tuple with an element end_tag, substitute the result for nodelist_false.
call the method parser.parse with an argument tuple with an element string 'else' and end_tag, substitute the result for nodelist_true.
substitute the result for sequence.   call the method parser.parse with an argument tuple with 2 elements strings 'empty' and 'endfor', substitute the result for nodelist_loop.
call the method parser.parse with an argument tuple with 2 elements strings: 'else' and 'endfilter', substitute the result for nodelistelse.
nodelist_true_output is None.
append self to nodes.
call the method node.get_nodes_by_type with an argument nodetype, extend nodes with it.
call the method nodelist.get_nodes_by_type with an argument nodetype, extend nodes with the result.
nodes is an empty list.
modes is an empty list.
if nofollow is true nofollow_attr is a string ' rel="nofollow"', otherwise nofollow_attr is an empty string.
nofollow_attr is an empty string.
get attribute '_non_atomic_requests' from the view object, if the attribute doesnt exist return the empty set, substitute the result for non_atomic_requests.
append length of result to non_capturing_groups.
non_capturing_groups is an empty list.
NON_FIELD_ERRORS is an string '__all__'.
opts.localized_fields, opts.labels, opts.help_texts and opts.error_messages, substitute the result for fields.   for every k and v in return value of the function six.iteritems called with an argument fields, if n is false, append it to a list,
none_value is a tuple containing 2 elements: integer 0 and string '---'.
nonlocal_root is an list with an element root.
for p in self.ignore_patterns if p ends with dir_suffix take sliced list p from the start,
call the function allow_lazy with 2 arguments: normalize_newlines and six.text_type, substitute the result for normalize_newlines.
append first element of e.args to not_found list.
not_found is an empty list.
call the method pending_references.keys, put the result into a set and substitute it for not_installed_models.
call the method notifier.check_events with argument timeout set to None.
call the method notifier.process_events.
call the method notifier.read_events.
call the method notifier.stop.
call the method pyinotify.Notifier with wm and EventHandler() as arguments, assign the result to notifier.
call the function datetime.datetime with utc as argument if call to the is_aware(d) returns True, if not None is the argument, store the result in now.
call the function datetime.datetime with 3 arguments, now.year, now.month and now.day, substitute the result for now.
call the function datetime.now, substitute the result to now.
call the function datetime.now, on the result call the method strftime with an argument string '%B %d, %Y - %X', substitute the result for now.
call the function datetime.utcnow, substitute the result for now.
call the method now.decode with an argument string 'utf-8', substitute the result for now.
call the function now.replace with microseconds set to integer 0, substitute the result for now.
call the method now.replace with the argument microsecond set to integer 0, substitute the result for now.
call the method now.replace with argument tzinfo set to None, substitute it for now.
call the timezone.now function, substitute the result for now.
ns is a string "http://www.w3.org/2005/Atom".
substitute first element of app_list for ns.
substitute current_app for ns.
pop the element form the path as substitute the result for ns.
ns_pattern is an empty string.
add ns_pattern and extra, substitute the result for ns_pattern.
ns_resolver is class instance of a class RegexURLResolver, created with 2 arguments: ns_pattern and resolver.url_patterns.
increment num by one.
num is an integer 0.
the variable num is integer 3
num is integer 3
assign 3 to num
assign 3 to the variable num
fetch one record from the database cursor points at, substitute the first element of return value for num.
fetch next entry for the database that cursor points into, substitute first element of it for num.
increment num_args by one.
num_args is an integer 0.
num_entries is length of filelist.
substitute length of existing for num_existing.
substitute length of self.loopvars for num_loopvars.
num_pages is a property object with _get_num_pages as a getter method.
increment num_sent by one.
num_sent is an integer 0.
reverse element order of dicts, join them in a string, substitute the result for number.
convert number into an integer and substitute it for number
call the method self.validate_number with an argument number, substitute it for number.
convert number to a string, truncate first element.
append current_number to a list for current_number in self._unget_history, if current_number is equal to num_bytes,
substitute rhs for number_value.
substitute value under the number key of the rhs dictionary for number_value.
numbers is a list containing return value of the MigrationAutodetector.parse_number method called with an argument migration.name,
substitute cls for obj.__class__.
substitute self.__class__ for obj.__class__.
obj._constructor_args is a tuple with 2 elements: args and kwargs.
call the method self.attrs.copy, substitute the result for obj.attrs.
call the function copy.deepcopy with 2 arguments: self.children and memodict, substitute the result for obj.children.
call the method obj.delete.
call the method Model._default_manager.db_manager with an argument db, on the result call the get_by_natural_key with,
call the method obj.save.
call the method obj.save with an argument using set to self.using.
call the method copy.deepcopy with an argument self.widgets, substitute the result for obj.widgets.
convert app and model._meta.object_name to strings, join them with separating '.' character, substitute it for obj.
obj is a string "?".
call the method base.build_instance with arguments Model, data and db, substitute the result for obj.
call the method base.build_instance with arguments Model, data and self.db, substitute the result for obj.
call the method copy.copy, substitute the result for obj.
call the method field.rel.to._default_manager.db_manager with db as argument, call the get_by_natural_key method on the result with,
call the method field.rel.to._default_manager.db_manager with an argument self.db, on the result call the method get_by_natural_key,
call the function force_str with argument self.obj, substitute the result for obj.
substitute form.instance for obj.
call the method form.save, with an argument commit set to boolean False, substitute the result for obj.
get models.signals name attribute, store it in obj.
call the function mark_for_escaping with an argument new_obj, substitute the result for obj.
call the function mark_safe with an argument new_obj, substitute the result for obj.
obj is an instance of Model class, created with an unpacked dictionary data as argument.
substitute new_obj for obj.
obj is an instance of Node class, created with 3 arguments: children, connector and negated.
obj is an instance of Node class, created with 2 arguments: connector set to self.connector and negated set to self.negated.
obj is None,
call the method self._new_instance with 3 arguments: self.children, self.connector and self.negated, substitute the result for obj.
substitute self.var for obj.
call the method self.var.resolve with an argument context, substitute it for obj.
substitute settings.TEMPLATE_STRING_IF_INVALID with obj.
call the method __new__ with an argument cls from the base class of the klass function.
call the method __deepcopy__ from the base class of the class MultiWidget, with an argument memo, substitute the result for obj.
call the function template_localtime with 2 arguments: obj and context.use_tz, substitute the result for obj.
value under '_data' key of obj_dict is a dictionary created with tuples containing 2 elements: k and result of the function,
call the method self.__dict__.copy, substitute the result for obj_dict.
call the __getstate__ method from the base class of the class SimpleTemplateResponse, substitute the result for obj_dict.
call the method self.target.resolve with 2 arguments: context and boolean True, substitute it for obj_list.
call the method field.rel.to._default_manager.db_manager with an argument self.db, on the result call the method get_by_natural_key,
call the field.rel.to._meta.get_field method with an field.rel.field_name argument, on the result call the method to_python,
call the method n.getAttribute with string 'pk' as argument, use the result as an argument for the call to the field.rel.to._meta.pk.to_python method, substitute the result for obj_pk.
with unpacked list field_value as an argument, substitute the result for obj.   get the field.rel.field_name from the obj, substitute it for obj_pk.
substitute return value of the method obj._get_pk_val for obj_pk.
substitute obj_pk.pk for obj_pk.
update object_data dictionary with initial.
object_data is an empty dictionary.
call the method model_to_dict with 3 arguments: instance, opts.fields, opts.exclude and substitute the result for object_data.
call the function json.loads with an argument stream_or_string, substitute the result for objects.
substitute model._base_manager for objects.
substitute model._default_manager for objects.
substitute '%s' with ser_fmt, fixture_name and return value of the function humanize called with an argument fixture_dir.   call the method serializers.deserialize with 4 arguments: ser_fmt, fixture, using set to self.using,
increment objects_in_fixture by one.
objects_in_fixture is integer 0.
for every c in candidate without the last element and in reversed order, convert c into an integer,
floor the division of delta by integer 100 and delta by integer 400, sum the two results, multiply integer 6 by it, substitute the result for off.
multiply offset by integer -1.
find the last index of newline occurrence in self.__starttag_text, subtract it from total length of self.__starttag_text,
substitute the result for offset_mins, otherwise offset_mins is integer 0.   convert elements of tzinfo from indexes 1 to 3 to an integer, multiply it by integer 60 and increment it by offset_mins,
call the method date.tzinfo.utcoffset with an argument date, substitute the result for offset.
substitute offset.seconds for offset.
increment the offset by the length of self.__starttag_text.
substitute self.__offset.seconds for offset.
call the method self.timezone.utcoffset with an argument self.data, substitute the result for offset.
if length of tzinfo is greater than integer 3, convert elements of tzinfo from indexes 1 to 3 to an integer,
append work_file to string '#: ', substitute it for old.
append work_file to string '#: ', substitute it for old.
append the result to app_dirs.   join app_dir and string 'models/sql' into a file path, use the result as an argument for the call to the function os.path.normpath,
substitute name for old_attr.
substitute field_name for old_field_name.
assign the handle to stream.   old_field_name is None.
old_field_name is None.
old_handler is None.
call the signal.signal method with signal.SIGTTOU and signal.SIG_IGN as arguments, store the result in old_handler.
get the value under the old_method_name key of the base.__dict__ dictionary, substitute it for old_method.
substitute first element of renamed_method for old_method_name.
join root and filename into a file path, substitute it for old_path.
substitute context.autoescape for old_setting.
old_style_list is boolean True.
call the os.umask function with argument integer 0, substitute the result for old_umask.
substitute value under the KEY key of the root dictionary for oldkey.
substitute key for value under the KEY key of the oldroot dictionary.
substitute result for value under the RESULT key of the oldroot dictionary.
substitute root for oldroot.
substitute value under the RESULT key of the root dictionary for oldvalue.
call the function re.compile with an argument raw string "(?<!%)%(?!%)", substitute the result for one_percent_re.
substitute key for op.id.
substitute OPERATORS dictionary element under token key for op.
crate a file named init_path.
self.parse_name, assign the result to _, ser_fmt and cmp_fmt, respectively.   get the value under the cmp_fmt key of the self.compression_formats dictionary, assign it to open_method and mode.
insert tagname at the beginning of open_tags.
open_tags is an empty list.
create a list out of open_tags elements form (i+1)-th index to the end, substitute it for open_tags.
call the method operations.extend with an argument smigration.operations.
operations is an empty list.
OPERATORS is an dictionary with 12 initial entries: result of the function inflix called with 2 arguments, integer 6,
get opname attribute from int object, substitute its field __doc__ for opfunc.__doc__.
substitute opname for opfunc.__name__.
opt_dict is an dictionary with 5 elements: '1' for 'bold', '4' for 'underscore', '5' for 'blink', '7' for 'reverse',
append '=' to opt_label.
substitute first element of options for opt_label.
optimizer is an instance of MigrationOptimizer class.
option is a string '--testrunner='.
remove first element from remaining_bits, substitute the result for option.
options_list is an empty tuple.
option_value is an empty string.
call the function force_text with an argument option_value, substitute the result for option_value.
call the method parser.parse_args with argv, without the first 2 elements, substitute the result for options and args.
call the method parser.parse_known_args wiht an argument self.argv, without the first two elements, assign the result for options,
call the options.update method with an argument kwargs.
call the function get_random_string with 2 arguments: integer 50 and chars, substitute it for value under the 'secret_key' of the options dictionary.
substitute v for value under the k converted to lower case key of options dictionary.
substitute value for value under the options key of options dictionary.
append tuple containing two entries: app_config.label and integer 0 to options, for every app_config in app_configs.
append tuple containing two entries: k and integer 1 to options, for every k in FASTCGI_OPTIONS.
append to options a tuple containing 2 entries: result of the method s_opt.get_opt_string and s_opt.nargs,
append to options a tuple containing 2 entries: firs element of sorted list of the s_opt.option_strings,
options is a list containing a tuple with 2 entries: string '--help' and None.
split x by character '=' and append first element of the result to the prev_opts list.   for every opt in options, if first element of opt is not contained in prev_opts, append opt to the list, substitute it for options.
where '%r' is replaced with first element of bits.   options is an empty dictionary.
call the method FASTCGI_OPTIONS.copy, substitute the result for options.
call the params.get with string 'OPTIONS' and empty dictionary as arguments, substitute the result for options.
call the method parser.parse_args with argv, without the first 2 elements, substitute the result for options.
and return value of the function flatatt called with an argument final_attrs, substitute the result for output.   call the method self.render_options with 2 arguments: choices and list with an entry, value, substitute the result for options.
string '<select multiple="multiple"{0}>' and result of the function flatatt called with an argument final_attrs.   call the method self.render_options with 2 arguments: choices and value, substitute the result for options.
append tuple containing 2 elements: k and v to a list, for every k and v in options, only if k starts with curr,
opts.fields is None.
substitute instance._meta for opts.
substitute model._meta for opts.
instantiate class ModelFormOptions with argument: attribute 'Meta' of the new_class object. if it exists or None, if not,
prefix set to None, initial set to None, error_class set to ErrorList, label_suffix set to None,   empty_permitted set to boolean False, instance set to None.   substitute self._meta for opts.
substitute self._meta for opts.
opts is a tuple created out of elements s, for every s in styles is s is in the keys of the opt_dict dictionary.
create a variable orig and set it to an empty list
get self.to_field attribute of self.parent_instance, substitute it for orig.
substitute self.parent_instance.pk for orig.
join self.dirpath and self.file into a file path, substitute it for orig_file.
remove '__dict__' key from the orig_vars dictionary.
remove '__weakref__' key from the orig_vars dictionary.
remove slots_var key from the orig_vars dictionary.
call the function make_origin with 4 arguments: display_name, self.load_template_source, template_name and template_dirs,
origin is an instance of StringOrigin class created with an argument template_string.
call the method UnicodeDecodeError.__str__, with self as the argument, substitute the result for original.
substitute lookup_view for original_lookup,
append to the variable original_shellcode the hexadecimal value of the variable x followed by a '- ' 
append to the variable original_shellcode the hexadecimal value of the variable x followed by a ', ' 
call the method os._exit with an argument integer 1.
call the method os.chdir with an argument our_home_dir.
call the function os.chmod with arguments dst and mode.
substitute the result for new_permission.   call the function os.chmod wiht arguments filename and new_permissions.
call the function os.chmod with arguments full_path and self.file_permissions_mode.
change access mode of path to stat.S_IWRITE mode.
close the file fd.
close fd file.
close fd file descriptor.
call the method os.dup2 with 2 arguments: result of the method se.fileno and result of the method sys.stderr.fileno.
call the method os.dup2 with 2 arguments: result of the method si.fileno and result of the method sys.stdin.fileno.
call the method os.dup2 with 2 arguments: result of the method so.fileno and result of the method sys.stdout.fileno.
substitute value under the 'liveserver' key of the options dictionary for value under the 'DJANGO_LIVE_TEST_SERVER_ADDRESS' key of the os.environ dictionary.
substitute options.settings for value under the 'DJANGO_SETTINGS_MODULE' key of the os.environ dictionary.
call the function os.kill with os.getpid() and negative exit_code as arguments.
make basedir directory,
call the os.makedirs function with directory and self.directory_permissions_mode as arguments.
call the function os.makedirs with argument directory.
create directories from the elements in filename.
create directories from the elements in filename.
make a directory named original_path.
call os.makedirs function with self._dir and hexadecimal 0o700 as arguments.
create a directory self.default_locale_path.
call the os.makedirs with argument self.file_path.
make a directory top_dir.
make a directory migrations_directory.
make target_dir directory,
call the function os.remove with argument fname.
call the os.remove function with argument name.
remove the old_file_name file.
remove file path_to_remove,
remove symlink_path file.
remove file tmp_path.
call the os.rename function with arguments old_file_name and new_file_name.
remove original_path directory.
remove tmpdir directory.
call the method os.setsid.
make a system symbolic link between original_path and symlink_path.
call the os.umask function with argument old_umask.
call the function os.umask with an argument umask.
call the method os.umask with an argument umask.
call the method os.unlink with an argument pot_path.
call the function os.unlink with an argument work_file.
call the os.utime function with arguments dst and tuple containing 2 elements: st.st_atime and st.st_mtime.
call the os.utime unction, with path and None as arguments.
write current_chunk to file fd.
call the method other.__cast, substitute the result for other.
substitute first args for other_dict.
call the method cmatch.group with an argument integer 1, format with the result string ' _(%s) ', write it to out.
format string ' _(%s) ', with fmatch, write it to out.
format string ' _(%s) ', with fmatch, write it to out.
substitute '%s' in string ' # %s' with line, write it to out file.
write string ' #\n' to out file.
split p into two parts at the first ':', use the second element of the result to format string ' _(%s) ', write it to out.
format string ' gettext(%r) ' with g, write it to out.
substitute '%r' in string ' gettext(%r) ' with  result of the function join_tokens, called with 2 arguments: singular,
substitute '%r' in string ' ngettext(%r, %r, count) ' with result of the function join_tokens, called with 2 arguments: singular,
substitute '%r' in string ' npgettext(%r, %r, %r,count) ' with message_context, result of the function join_tokens,
substitute '%r' in string ' pgettext(%r, %r) ' with message_context and result of the function join_tokens,
format string ' pgettext(%r, %r) ' with message_context and g, write it to out.
join lineno_comment_map dictionary value under the comment_lineno_cache key into a string, separated with ' | ',
call the function blankout with 2 arguments: p and 'F', write the result to out.
call the method blankout with 2 arguments: part and 'P', write the result to out.
call the method blankout with 2 arguments: part and 'S', write the result to out.
call the function blankout with 2 arguments: t.contents and 'B', write the result to out.
call the function blankout with 2 arguments: t.contents and 'X', write the result to out.
replace '%s' in string '</%s>' with tag, append the result to out.
append truncate_text to out.
for x in a list containing 3 elements: self.id, self.first and self.second, if x is not None,
join result of the parts function into a bytes string, substitute it for out.
call the method self.compress with an argument clean_data, substitute the result for out.
out is an instance of StringIO class, created with an empty string as an argument.
create a list out of fist end_text_pos text elemnts, substitue it for out.
assign value and params to the value under the name key of the outdict dictionary.
outdict is an empty dictionary.
call the method password.translate with an argument hmac.trans_5C, update outer dictionary with the result.
outer_html is a string '<ul{id_attr}>{content}</ul>'.
write data bytes to outfile.
return value of the npath function with string '.mo' appended to the base_path as argument,   and return value of the npath function with string '.po' appended to the base_path as argument, substitute it for args.   call the popen_wrapper with args as the argument, assign the result to the output, errors and status, respectively.
called with string as an argument 'Error executing %s: %s', where '%s' is replaced by: first element of args and strerror, respective,   and third element of the result of the function sys.exc_info.   call the method p.communicate, assign the result to output and errors, respectively.
output and hidden_fields are both empty lists.
app_config, connection.alias and include_auto_created set to boolean True.   call the method connection.creation.sql_create_model with arguments model, style and known_models, substitute the result for output and references.
convert field into a string and concatenate it to a string '* ', append the result to output.
for every e in errors convert e into a string and append it to a string '  * ',
append 2 consecutive newlines to output.
substitute every '%s' in string '%s<li>%s%s</li>' with indent, with result of the function escaper called with an argument:
append string '</optgroup>' to output.
append string '</select>' to output.
replace '%s' in string "### %s = %s" with key and value under the key key of the user_setting dictionary, append it to the output.
replace '%s' in string "%s = %s  ###" with key and value under the key key of the user_setting dictionary, append it to the output.
replace '%s' in string "%s = %s" with key and value under the key key of the user_setting dictionary, append it to the output.
append app_output to output.
call the function force_text with an argument bf_errors, format the error_row string with the result, append it to the output.
call the function format_html with 2 arguments: string '<optgroup label="{0}">' and return value of the function force_text,
choice and i, substitute the result for w.   call the function format_html with 3 arguments: self.inner_html, choice_value set to result of the function force_text,
call the function format_html with 3 arguments: self.inner_html, choice_value set to choice_value,
get the value under the field key of the html dictionary, append it to output.
append label_output to output.
empty string for 'field', empty string for 'help_text' and html_class_attr for html_class_attr.   append last_row to output.
format string normal_row with an dictionary containing 6 entries: return value of the function force_text with an argument bf_errors,
append options to output.
call the function pformat with an argument sys.modules, append the result for output.
call the method self.render_option with 2 arguments: selected_choices and unpacked list option, append the result to output.
call the method self.render_option with 3 arguments: selected_choices, option_value and option_label, append the result to output.
append str_hidden to output.
substitute the result for final_attrs.   call the method widget.render with 3 arguments: string created by concatenation from: name, string '_' and i, widget_value,
for every v in list_ append to a list result of the function encode, called with arguments: k and result of the function force_bytes,
and include_auto_created set to boolean True,   call the method connection.creation.sql_destroy_indexes_for_model with arguments model and style, extend the output with the result.
call the method connection.creation.sql_destroy_model with arguments: model, references_to_delete and style, extend with the result the list output.
and include_auto_created set to boolean True,   call the method connection.creation.sql_indexes_for_model with arguments model and style, extend output with the result.
call the method connection.ops.prepare_sql_script with 2 arguments: return value of the function fp.read,
call the function custom_sql_for_model with 3 arguments: model, style and connection, extend the output with the result.
call the method f.post_create_sql with arguments: style and model._meta.db_table, extend the output with the result.
call the function force_text with an argument top_errors, format error_row with it, insert it at the beginning of output.
create list out of last_row elements from the start to the last length of row_ender element, append str_hidden and row_ender to it,
output is an empty string.
output is an empty list.
output is an empty string.
outut is an empty list.
substitute the result for the value under the 'day' key of the html dictionary.   output is an empty list.
substitute the resulting set for selected_choices.   output is an empty list.
output is a list containing an entry: result of the function format_html called with 2 arguments:
output is a list containing an element: result of the function format_html called with 2 arguments: string '<select{0}>',
output is an list with initial elements generated with call to the function pformat with an argument val, for every val in context.
call the function force_text with an argument output, substitute the result for output.
read file fp, substitute the read data for output.
call the function localize with 2 arguments: output and use_l10n set to context.use_l10n, substitute the result for output.
get the next element of the self._producer iterable, substitute it for output.
get the value under the 'output' key of the options dictionary, substitute the result for output.
substitute self._leftover for output.
call the method self.filter_expression.resolve with an argument context, substitute the result for output.
call the method self.handle with 2 arguments unpacked list args and unpacked dictionary options, substitute the result for output.
call the method self.nodelist.render with an argument context, substitute the result for output.
call the method self.nodelist.render with an argument context, substitute the result output.
call the function template_localtime with 2 arguments: output and use_tz set to context.use_tz, substitute the result for output.
output_transaction is boolean False.
output_transaction is boolean True.
substitute True for output_transaction.
calculate length of chunk modulo integer 4, substitute the result for over_bytes.
call the method field_stream.read with an argument: over_bytes subtracted from integer 4, substitute the result for over_chunk.
call the OVERLAPPED function, substitute the result for overlapped.
set the variable P to a string value '\033[35m'
assign the variable P the string '\033[35m'
assign the variable P the string value '\033[35m'
where '%s' is replaced with subject.   substitute i for p.
substitute i for p.
convert arg to an integer, substitute it for p.
find position of '-' in the index of the language, substitute the result for p.
find first index of occurrence of character '-' in language, substitute it for p.
find first index of occurrence of character '-' in locale, substitute it for p.
p is image parser object, set by calling the PillowImageFile.Parser method.
p is a instance of Popen class, created with 6 arguments: args, shell set to boolean False, stdout set to PIPE,
remove the first element from p_pattern.
substitute pattern.regex.pattern for p_pattern.
substitute result of the function urlparse with an argument ur1 for p1 and result of the function urlparse with an argument ur2 for p2.
call the function import_module with an argument path, substitute it for package.
substitute package.__name__ for package_name.
substitute package.__path__ for package_path.
set the variable padding equal to 4 minus the length of temp modulus 4
set the variable padding equal to 4 minus the length of shellcode_original
set the variable padding equal to 4 minus the length of shellcode_original modulus 4
set the variable padding equal to the length of shellcode_original modulus 4
page_range is a property object with _get_page_range as a getter method.
get the value under the part key of the PALETTES dictionary, update with it palette dictionary.
substitute definition for value under the role key of palette dictionary.
get value under the config_string key of the PALETTES dictionary, call the copy method on the result and substitute it for palette.
PALETTES is a dictionary containing 3 elements, a dictionary with 18 pairs of dictionary value and string keys for NOCOLOR_PALETTE,
call the method six.iteritems with an argument kwarg, convert the result into a list,
join elements of name into a string, substitute it for param.
substitute second element of elt for param.
param is None.
call the function getargspec with an argument func, substitute the result for params, varargs, varkw and defaults, respectively.
call the function getargspec with an argument func, substitute the result for params, varargs, varkw and defaults.
call the function params.update with argument kwargs.
params is an empty list,
params is a list with second element of source as a element.
may be ambiguous or it may not exist.', substitute the result for message.   params is an dictionary containing 2 initial entries: value for 'datetime' and current_timezone for 'current_timezone'.
params is a dictionary with 2 initial entries: self.limit_value for 'limit_value' and cleaned for 'show_value'.
params is a dictionary with 2 initial entries: self.max_length for 'max' and length of file_name for 'length'.
call the function conf.copy, substitute it for params.
substitute kwargs for params.
substitute params without the first element for params.
call the function escape with an argument p, replace every occurrence of '\n' in the result for '<br />',
replace every occurrence of '\n' in p for '<br />',
call the method re.split with 2 arguments: string '\n{2,}' and value, substitute the result for paras.
parent is a tuple with 2 arguments: form.Meta and object.
parent is a tuple with 1 element, object.
call the method self.parent_name.resolve with an argument context.
call the method parser.compile_filter with an argument second element for bits, substitute the result for parent_name.
substitute pattern.regex.pattern for parent_pat.
parentloop is an empty dictionary.
substitute value under the the 'forloop' key of the context dictionary for parentloop.
call the function get_mod_func with an argument mod_name, store the result in parentmod and submod, respectively.
append string ".moves.urllib_parse" to __name__, use it as an key to get the value from the sys.modules dictionary, substitute it for parse.
parse_until is an empty list,
parsed is boolean False.
parsed is boolean True.
call the function force_text with an argument redirect_to, use the result as an argument for the call to the function urlparse,
substitute '%s' with first element of bits and block_name, respectively.   append block_name to parser.__loaded_blocks.
substitute list with an element block_name for parser.__loaded_blocks.
substituet node for value under the name key of the parser._namedCycleNodes dictionary.
parser._namedCycleNodes is an empty dictionary.
default set to boolean True and help set to string 'Tells Django to NOT prompt the user for input of any kind.'.   call the parser.add_argument with string '--addrport', default set to an empty string and help as string 'Port number or ipaddr:port to run the server on.'.
dest set to string 'domain' and help as a string 'The domain of the message files (default: "django").'.   call the method parser.add_argument with 6 arguments: string '--all', string '-a', action as a string'store_true',
call the method parser.add_argument with 5 arguments: string '--all', action set to string 'store_true', dest set to string 'all',
default set to DEFAULT_DB_ALIAS and help as a string 'Nominates a specific database to load fixtures into. Defaults to the "default" database.'   call the method parser.add_argument with 5 arguments: string '--app', action as a string 'store', dest as a string 'app_label',
call the add_argument method on the parser object with string '--backwards', asction set to 'store_true', dest set to 'backwards',
and help set to a string 'Optional table names. Otherwise, settings.CACHES is used to find cache tables.' .   call the method parser.add_argument with 5 arguments: string '--database', action set to string 'store', dest as a string 'database',
dest set to string 'interactive', default set to boolean True, help as a string 'Tells Django to NOT prompt the user for input of any kind.'.   call the method parser.add_argument with 5 arguments: string '--database', action set to string 'store', dest as a string 'database',
type set to int and help is a string 'Specifies the indent level to use when pretty-printing output.'.   call the method parser.add_argument with 5 arguments: string '--database', default set to string 'store', dest set to 'database',
call the method parser.add_argument with arguments: string '--database', action set to string 'store', dest set to string 'database',
call the method parser.add_argument with 5 arguments: string '--database', action set to string 'store', dest as a string 'database',
dest set to string 'load_initial_data', default set to True,   help containing string 'Tells Django not to load any initial data after database synchronization.' as arguments.   call the method parser.add_argument with string '--database', action containing string 'store', dest set to string 'database',
and help set to 'Fixture labels.'.   call the method parser.add_argument with 5 arguments: string '--database', action set to string 'store', dest as a string 'database',
call the add_argument method on the parser object, with string '--database', default set to DEFAULT_DB_ALIAS and help set to string 'Nominates a database to create SQL for. Defaults to the default" database.' as arguments.
call the method parser.add_argument with 3 arguments: string '--database', default set to DEFAULT_DB_ALIAS,
call the parser.add_argument method with the string '--database', default set to DEFAULT_DB_ALIAS and help containig string,
call the add_argument method on parser object, use string '--database', default set to DEFAULT_DB_ALIAS and help set to string,
call parse.add_argument method, with string '--database', default set to DEFAULT_DB_ALIAS,
dest set to string 'load_initial_data', default set to boolean True,   and help as a string 'Tells Django not to load any initial data after database synchronization.'   call the method parser.add_argument with 3 arguments: string '--database', default set to DEFAULT_DB_ALIAS,
dest as a string 'exclude', action as a string 'append' and help as a string 'Locales to exclude. Default is none. Can be used multiple times.'.   call the method parser.add_argument with 5 arguments: string '--domain', string '-d', default as a string 'django',
and help as a string 'Specify the app label(s) to create migrations for.'.   call the method parser.add_argument with 5 arguments: string '--dry-run', action as a string 'store_true', dest as string 'dry_run',
default set to boolean False and help set to a string "Enable fixing of migration conflicts.".   call the method parser.add_argument with 5 arguments: string '--empty', action as a string 'store_true', dest as a string 'empty',
dest as a string 'locale', action as a string 'append' and help as a string,   'Creates or updates the message files for the given locale(s) (e.g. pt_BR). Can be used multiple times.'.   call the method parser.add_argument with 5 arguments: string '--exclude', string '-x', default as a empty list,
default as an empty list and help as an string 'Locale(s) to process (e.g. de_AT). Default is to process all. Can be used multiple times.'.   call the method parser.add_argument with string '--exclude', string '-x', dest set to string 'exclude', action set to string 'append',
call the method parser.add_argument with 6 arguments: string '--extension', string '-e', dest set to string 'extensions',
dest as a string 'all' default as boolean False and help as a string 'Updates the message files for all existing locales.'.   call the method parser.add_argument with 5 arguments: string '--extension', string '-e', dest set to string 'extensions',
default set to boolean True, help set to string 'Tells Django to NOT prompt the user for input of any kind.'.   call the method parser.add_argument with 5 arguments: string '--failfast', action set to string 'store_true', dest set to 'failfast',
default set to DEFAULT_DB_ALIAS, help containing string 'Nominates a database to synchronize. Defaults to the "default" database.' as arguments.   call the method parser.add_argument with string '--fake', action containing string 'store_true', dest set to string 'fake',
nargs set to '*' and help is a string 'Restricts dumped data to the specified app_label or app_label.ModelName.'.   call the method parser.add_argument with 4 arguments: string '--format', default set to string 'json',
dest as a string 'symlinks', default as boolean False and help as a string 'Follows symlinks to directories when examining '   'source code and templates for translation strings.'.   call the method parser.add_argument with 7 arguments: string '--ignore', string '-i', action as a string 'append',
default set to None, help is a string 'Only look for fixtures in the specified app.'.   call the method parser.add_argument with 6 arguments: string '--ignorenonexistent', string '-i', action as a string 'store_true',
dest set to 'format' and help is a string 'Specifies the output serialization format for fixtures.'.   call the method parser.add_argument with 5 arguments: string '--indent', default set to None, dest set to 'indent',
call the method parser.add_argument with 6 arguments: string '--ipv6', string '-6', action set to string 'store_true',
call parser.add_argument method with '--ipv6', string '-6', action set to string 'store_true', dest set to string 'use_ipv6',
dest as a string 'no_obsolete', default as boolean False and help as a string "Remove obsolete message strings.".   call the method parser.add_argument with 5 arguments: string '--keep-pot', action as a string 'store_true',
dest set to string 'tags' and help set to string 'Run only checks labeled with given tag.'.   call the method parser.add_argument with 4 arguments: string '--list-tags', action set to string 'store_true',
default set to False, help containing string 'Mark migrations as run without actually running them' as arguments.   call the method parser.add_argument with string '--list', string '-l', action contains string 'store_true', dest set to string 'list',
and help set to a string 'Tells Django to use specified test runner class instead of the one specified by the TEST_RUNNER setting.'.   call the method parser.add_argument with 5 arguments: string '--liveserver', action set to string 'store', dest set to 'liveserver',
call the method parser.add_argument with 6 arguments: string '--locale', string '-l', default as an empty list,
call the method parser.add_argument with string '--locale', string '-l', dest set to string 'locale', action set to string 'append',
default set to boolean False, help as a string "Just show what migrations would be made; don't actually write them.".   call the method parser.add_argument with 5 arguments: string '--merge', action as a string 'store_true', dest as a string 'merge',
action set to 'append', default is a list containing string 'py' and help set to string:   'The file extension(s) to render (default: "py"). Separate multiple extensions with commas, or use -e multiple times.'.   call the method parser.add_argument with 6 arguments: string '--name', string '-n', dest set to string 'files',
default is boolean False and help is a string 'Use natural keys if they are available (deprecated: use --natural-foreign instead).'.   call the method parser.add_argument with 5 arguments: string '--natural-foreign', action set to string 'store_true',
dest is string 'use_natural_foreign_keys', default is boolean False and help is a string 'Use natural foreign keys if they are available.'.   call the method parser.add_argument with 5 arguments: string '--natural-primary', action set to 'store_true',
and help set to string 'Raise on exception'.   call the method parser.add_option with 5 arguments: string '--no-color', action is string 'store_true', dest is string 'no_color',
dest as a string 'ignore_patterns', default as an empty list, metavar as a string 'PATTERN',   and help as a string 'Ignore files or directories matching this glob-style pattern. Use multiple times to ignore more.'.   call the method parser.add_argument with 5 arguments: string '--no-default-ignore', action as a string 'store_false',
default set to DEFAULT_DB_ALIAS and help as a string 'Nominates a database to flush. Defaults to the "default" database.'.   call the method parser.add_argument with 5 arguments: string '--no-initial-data', action set to string 'store_false',
default set to True, help containing string 'Tells Django to NOT prompt the user for input of any kind.' as arguments.   call the method parser.add_argument with string '--no-initial-data', action containing string 'store_false',
dest set to string 'interactive', default set to boolean True and help as 'Tells Django to NOT prompt the user for input of any kind.'   call the method parser.add_argument with 5 arguments: string '--no-initial-data', action set to string 'store_false',
default as boolean False and help as a string "Don't break long message lines into several lines.".   call the method parser.add_argument with 5 arguments: string '--no-location', action set to string 'store_true',
dest set to string 'no_location', default as boolean False and help as a string "Don't write '#: filename:line' lines.".   call the method parser.add_argument with 5 arguments: string '--no-obsolete', action as a string 'store_true',
and help is a string 'Migrations will be squashed until and including this migration.'.   call the method parser.add_argument with 5 arguments: string '--no-optimize', action as a string 'store_true',
and help is a string 'Tells Django to use plain Python, not IPython or bpython.'.   call the method parser.add_argument with 4 arguments: string '--no-startup', action as a string 'store_true',
dest as a string 'use_default_ignore_patterns', default set to boolean True,   and help as a string "Don't ignore the common glob-style patterns 'CVS', '.*', '*~' and '*.pyc'.".   call the method parser.add_argument with 5 arguments: string '--no-wrap', action as a string 'store_true', dest as a string 'no_wrap',
and help is a string 'Module paths to test; can be modulename, modulename.TestCase or modulename.TestCase.test_method'.   call the method parser.add_argument with 5 arguments: string '--noinput', action set to 'store_false', dest set to 'interactive',
call the method parser.add_argument with 5 arguments: string '--noinput', action set to string 'store_false',
default set to boolean False and help as a string "Create an empty migration.".   call the method parser.add_argument with 5 arguments: string '--noinput', action as a string 'store_false',
Database state will be brought to the state after that migration.' as arguments.   call the method parser.add_argument with string '--noinput', action containing string 'store_false', dest set to string 'interactive',
dest as a string 'no_optimize', default set to boolean False and help as a string 'Do not try to optimize the squashed operations.'.   call the method parser.add_argument with 5 arguments: string '--noinput', action set to string 'store_false',
call parser.add_argument method with '--noinput', action set to string 'store_false', dest set to string 'interactive',
dest set to string 'use_threading', default set to boolean True and help set to 'Tells Django to NOT use threading.'.   call the method parser.add_argument with 5 arguments: string '--noreload', action set to string 'store_false',
dest set to string 'use_ipv6', default set to boolean False and help set to string 'Tells Django to use an IPv6 address.'.   call the method parser.add_argument with 5 arguments: string '--nothreading', action set to string 'store_false',
dest is 'use_base_manager', default is boolean False and help is a string '(use multiple --exclude to exclude multiple apps/models).'.   call the method parser.add_argument with 3 arguments: string '--pks', dest set to string 'primary_keys',
call the method parser.add_argument with 4 arguments: string '--plain', action set to string 'store_true', dest as a string 'plain',
call the method parser.add_option with 2 arguments: string '--pythonpath' and help set to a string 'A directory to add to the Python  path, e.g. "/home/djangoprojects/myproject".'
call the method parser.add_argument with an argument string '--pythonpath'.
dest set to string 'verbosity', default set to string '1', type set to int, choices is a list, containing integers: 0, 1, 2 and 3,   call the method parser.add_option with 2 arguments: string '--settings' and help as a string 'The Python path to a settings module,  e.g. "myproject.settings.main". If this isn\'t provided, the DJANGO_SETTINGS_MODULE environment variable will be used.'
call the method parser.add_argument with an argument string '--settings'.
help set to a string 'The file extension(s) to examine (default: "html,txt", or "js" '   'if the domain is "djangojs"). Separate multiple extensions with commas, or use -e multiple times.' and action as a string 'append'.   call the method parser.add_argument with 6 arguments: string '--symlinks', string '-s', action as a string 'store_true',
call the method parser.add_argument with 5 arguments: string '--tag', string '-t', action set to string 'append',
call the method parser.add_argument with 2 arguments: string '--template' and help set to string 'The path or URL to load the template from.'.
default set to boolean False and help  set to string 'Tells Django to stop running the test suite after first failed test.'.   call the method parser.add_argument with 4 arguments: string '--testrunner', action set to string 'store', dest set to 'testrunner',
call the method parser.add_option with 3 arguments: string '--traceback', action set to a string 'store_true',
os.path.basename(prog_name) and subcommand, separated by whitespace and description set to self.help, if exists, or None, otherwise.   call the method parser.add_option with 3 arguments: string '--version', action set to string 'version',
dest is 'use_natural_primary_keys', default is boolean False and help is a string 'Use natural primary keys if they are available.'.   call the method parser.add_argument with 6 arguments: string '-a', string '--all', action set to 'store_true',
add set to DEFAULT_DB_ALIAS and help is 'Nominates a specific database to dump fixtures from. Defaults to the "default" database.'.   call the method parser.add_argument with 6 arguments: string '-e', string '--exclude', dest set to 'exclude', action set to 'append',
dest as a string 'no_startup' and help as a string 'When using plain Python, ignore the PYTHONSTARTUP environment variable and ~/.pythonrc.py script.'.   call the method parser.add_argument with 5 arguments: string '-i', string '--interface', choices set to string self.shells,
default is a an empty list and help is a string '(use multiple --exclude to exclude multiple apps/models).'.   call the method parser.add_argument with 6 arguments: string '-n', string '--natural', action is string 'store_true', dest is string 'use_natural_keys',
and help is a string "Only dump objects with given primary keys. Accepts a comma separated list of keys. "   "This option will only work when you specify one model.".   call the method parser.add_argument with 5 arguments: string '-o', string '--output', default is None, dest set to string 'output',
and version set to result of the method self.get_version.   call the method parser.add_option with 8 arguments: string '-v', string '--verbosity', action set to string 'store',
call the method parser.add_argument with 3 arguments: string 'addrport', nargs='?' and help as a string 'Optional port number, or ipaddr:port'.
call the add_argument method on the parser object, with string 'app_label', and help set to string 'App label of the application containing the migration.' as arguments.
call the method parser.add_argument with 2 arguments: string 'app_label',
call the method parser.add_argument with string 'app_label', nargs set to charcter '?', help containing string,
call the method parser.add_argument with 4 arguments: string 'args', metavar set to string 'app_label', nargs set to character'*',
call the method parser.add_argument with 3 arguments: string 'args', metavar set to string 'app_label' and nargs set to '*'.
call the method parser.add_argument with 4 arguments: string 'args', metavar set to 'app_label', nargs set to '+',
call the method parser.add_argument with 4 arguments: string 'args', metavar set to string 'app_label[.ModelName]',
call parser.add_argument method with 'args', metavar set to string 'fixture', nargs set to string '*' and help set to string 'Path(s) to fixtures to load before running the server.'.
call the method parser.add_argument with 4 arguments: string 'args', metavar set to string 'fixture', nargs set to '+',
call the method parser.add_argument with 4 arguments: string 'args', metavar set to string 'table_name', nargs set to '*' character,
call the method parser.add_argument with 4 arguments: string 'args', metavar set to string 'test_label', nargs set to string '*',
call the method parser.add_argument with 3 arguments: string 'args', metavar set to self.label and nargs set to '+'.
call the method parser.add_argument with arguments: string 'args' and nargs set to '*'.
call the method parser.add_argument with 2 arguments: string 'args' and nargs set to '*'.
call the method parser.add_argument with 3 arguments: string 'args', nargs set to argparse.REMAINDER and help as a string 'Various KEY=val options.'
call the method parser.add_argument with 3 arguments: string 'directory', nargs set to '?' and help set to string 'Name of the application or project.'.
call the add_argument method on the parser object, with string 'migration_name', and help set to string 'Migration name to print the SQL for.' as arguments.
and help is a string 'App label of the application to squash migrations for.'.   call the method parser.add_argument with 2 arguments: string 'migration_name',
App label of an application to synchronize the state.' as arguments.   call the method parser.add_argument with string 'migration_name', nargs set to charcter '?', help containing string,
call the method parser.add_argument with 2 arguments: string 'name' and help set to string 'Name of the application or project.'.
call the method parser.add_library with an argument lib.
where '%s' is replaced with name and taglib.   call the method parser.add_library with an argument temp_lib.
and help='Raise on exception'.   call the method parser.add_option with 5 arguments: string '--no-color', action set to a string 'store_true',
call the method parser.add_option with 2 arguments: string '--pythonpath' and help set to string 'A directory to add to the Python path, e.g. "/home/djangoprojects/myproject".'.
dest set to string 'verbosity', default set to string '1', type set to string 'choice', choices is a list containing elements: '0', '1', '2', '3', and help as a string 'Verbosity level; 0=minimal output, 1=normal output, 2=verbose output, 3=very verbose output'.   call the method parser.add_option with 2 arguments: string '--settings' and help as a string 'The Python path to a settings module, e.g. "myproject.settings.main". If this isn\'t provided, the DJANGO_SETTINGS_MODULE environment variable will be used.'.
call the method parser.add_option with 3 arguments: string '--traceback', action set to a string 'store_true',
usage set to return value of the method self.usage called with an argument subcommand, version set to return value of the method self.get_version.   call the method parser.add_option with 8 arguments: string '-v', string '--verbosity', action set to string 'store',
call the method parser.add_option with an argument opt.
call the method parser.delete_first_token.
substitute self.entity_decl for parser.EntityDeclHandler.
substitute self.external_entity_ref_handler for parser.ExternalEntityRefHandler.
call the method parser.invalid_block_tag with 3 arguments: endblock, 'endblock' and acceptable_endblocks.
call the method parser.print_help.
call the method parser.skip_past with an argument string 'endcomment'.
substitute self.start_doctype_decl for parser.StartDoctypeDeclHandler.
substitute self.unparsed_entity_decl for parser.UnparsedEntityDeclHandler.
parser is the return of ArgumentParser function of the module argparse
all the method command.create_parser with arguments: empty and name, substitute the result for parser.
parser is an instance of CommandParser class, created with 3 arguments, None, usage as a string "%(prog)s subcommand [options] [args]" and add_help set to boolean False.
parser is an instance of CommandParser class, created with 3 arguments: self, prog as a string created by joining:
and warning as a string "You cannot alter upload handlers after the upload has been processed.".   parser is an instance of MultiPartParser class, created with 4 arguments: META, post_data, self.upload_handlers and self.encoding.
is deprecated, use ArgumentParser instead and RemovedInDjango20Warning.   parser is an instance of the object OptionParser, created with arguments: prog set to prog_name,
call the method lexer.tokenize, use it as an argument for the call to the parser_class function, substitute the result for parser.
substitute self._parser for parser.
call the method self.create_parser with first and second element of argv, substitute the result for parser.
call the method self.create_parser with arguments prog_name and subcommand.
call the method subcommand_cls.create_parser with 2 argument an empty string an first element of cwords, substitute it for parser.
format a string "(?P<%s>%s)" with groupid and tok.regex, append it to the parts.
append decimals to parts.
append value to parts.
call the method parts.reverse.
parts is an empty list.
assign integer 2 to parts if third element of version equals to zero, otherwise assign it integer 3.
convert config_string to lowercase and split it by ';' character, substitute the result for parts.
call the method fixture_name.rsplit with 2 arguments: character '.' and integer 2, substitute the result for parts.
substitute the last element of parts for parts.
split t.contents by '|' symbol, substitute the result for parts,
call the method viewname.split, with an argument ':', substitute the result for parts.
do nothing.
do nothing
do nothig.
ModelFormMetaclass and BaseModelForm.   do nothing.
do nothing,
decrement by length of password, create bytes string with previous result number of characters '\x00',
call the function digest with an argument password, call the method digest on the result, substitute the result or password.
call the function force_bytes with an argument password, substitute the result for password.
and substitute the return value for value under the key 'Expires' of dictionary response.   call the function patch_cache_control, with response and max_age set to cache_timeout as arguments.
call the function patch_response with response and cache_timeout decremented by integer 1 as arguments.
split string name into two parts from the right side by the separator '.', substitute parts for path and module, respectively.
path is an list containing path.
call the function force_text with an argument path, substitute the result for path.
get the unicode representation of current working directory, join it and path into a string, substitute the result for path.
remove elements under the 'path' key of the kwargs dictionary, if it exists substitute it for path, if not path is None.
call the function os.environ.get with 2 arguments: string 'PATH' and an empty string, split the result at the os.pathsep, substitute the result for path.
join app_config.path and string 'management' into a file path, substitute it for path.
substitute parts, without the first element, for path.
strip path of all leading '/' and '\\' characters, substitute the result for path.
substitute path_override for path if path_override is not None, otherwise substitute request.path for path
call the safe_join function with arguments self.location and name, substitute it for path.
call the self.path function with argument path, substitute it for path.
convert path to a string, substitute the result for path.
path_info is a character '/'.
call the get_bytes_from_wsgi function with environ, string 'PATH_INFO' and empty strings as arguments, substitute the result for path_info.
call the function get_bytes_from_wsgi with environ, string 'PATH_INFO' and character '/' as arguments, substitute the result for path_info.
call the get_path_info function with environ as argument, substitute the result for path_info.
slice root starting from the prefix_length index to the end, substitute it for path_rest.
pathext is an list containing an empty string.
call the method os.environ.get with 2 arguments: strings 'PATHEXT' and '.COM;.EXE;.BAT;.CMD', split the result at os.pathsep, substitute it for pathext.
paths is a list containing results of the function force_text called with an argument p, for every p in paths.
PATTERN is a string  "classdef< 'class' any+ ':'suite< any*funcdef< 'def' unifunc='__unicode__'parameters< '(' NAME ')' > any+ >any* > >".
convert pattern to lowercase, substitute it for pattern.
call the function next_char with an argument iterator pattern, substitute the result for pattern_iter.
append pattern into a list patterns, for every possibility, pattern and defaults in possibilities.
get attribute "urlpatterns" form the self.urlconf_module, substitute it for patterns, if the attribute doesnt exist,
call the method text.encode with argument utf8_charset.output_charset, substitute the result for payload.
move integer 1 left for 50 bits, substitute the result for PB.
substitute value for the vale under the name key of the pdict dictionary.
substitute the result for key.   pdict is an empty dictionary.
call the method extend with refs as argument, on the result call the pending_references.setdefault method with refto and empty list as arguments.
call the method pending_references.setdefault with 2 arguments: refto and an empty list, extend the result with refs.
pending_references is a empty dictionary.
add model to a set, substitute the result for known_models.   pending_references is an empty dictionary.
substitute length of prefixed for pflen.
call the function lazy with 2 arguments: pgettext and six.text_type, substitute pgettext_lazy.
call the function allow_lazy with an argument phone2numeric, substitute the result for phone2numeric.
substitute None for pickled.
call the function pickle.dumps with value and pickle.HIGHEST_PROTOCOL as the arguments, substitute the result for pickled.
call the method pickle.dumps with value and pickle.HIGHEST_PROTOCOL as arguments, substitute it for pickled.
call the pickle.dumps function with value and pickle.HIGHEST_PROTOCOL as arguments.
call the function pickle.dumps with value and pickle.HIGHEST_PROTOCOL as the arguments, substitute the result for pickled.
substitute value under the key key of self._cache dictionary for pickled.
pid is integer 1.
call the function os.getpid, substitute it for pid.
increment piece by firs element of elt.
join elements of list source from index last to the end into a string, substitute it for piece.
join source list elements from last till pos indexes into a string, substitute the result for piece.
get attribute piece of the self object, call it and use the result as an argument for the call to the function force_text,
call the method re_escaped.sub with 2 arguments: raw string '\1' and piece, append the result to pieces.
pieces is an empty list.
convert lang_string to lowercase, split by the result string accept_language_re, substitute the result for pieces.
and self.model._meta.pk.name.   substitute the value under the pk_key key of the self.data dictionary for pk.
call the function to_python with an argument pk, substitute the result for pk.
substitute self.model._meta.pk for pk_field.
pk_key is a string "%s-%s", where '%s' is replaced with: result of the method self.add_prefix called with an argument i,
substitute form.instance.pk for pk_value.
get self.instance
pk_value is None.
call the method self.get_queryset, substitute field pk under the result at the index index for pk_value.
concatenate string 'templates/' and template_name, substitute the result for pkg_name.
get the value under the 'primary_keys' key of the options dictionary, substitute the result for pks.
substitute the result for qs.   pks is a set containing results of the call to the function force_text with an argument, key attribute of the o object,
get executor.loader.graph.nodes list item at the index of the first element of targets list, get the value under the 'backwards' key of options dictionary, put previous two elements is a tuple, tuple is contained in a plan list.
call the method executor.migration_plan wiht return value of te method executor.loader.graph.leaf_nodes as argument, substitute it for plan.
call the executor.migration_plan method with targets as the argument, substitute the result for plan.
substitute sys.platform for plat.
calculate length of provided and increment it by one, substitute the result for plen.
strip f of whitespaces and append it to plist.
append line to bytes string ';', use it as an argument for the call to the function _parse_header_params, substitute the result for plist.
plist is an empty list.
append string '%%(%s)s' to plural, where '%s' is replaced with t.contents.
append contents to plural.
plural is an empty list.
call the method m.group with an argument string 'value', use the result as an argument for the call to the force_str,
call the method re.compile with 2 arguments: raw string '^(?P<value>"Plural-Forms.+?\\n")\s*$',
call the function re.compile with an argument raw string "^\s*plural$", substitute the result for plural_re.
call the function plural_re.match with an argument t.contents, substitute the result for pluralmatch.
po_path is a string containing joined directory path from dirpath and f.
convert self.domain into a string and append string '.po' to it, join basedir and result in file path, substitute it for pofile.
substitute complain for pop.
pop_context is boolean False.
pop_context is boolean True.
pos is equal to integer 0.
pos and last are integer 0.
call the method m.end with an argument integer 0, substitute the result for pos.
get the position of the self.file file pointer, substitute it for pos.
multiply 10 to the power of 200, with itself, substitute the result for pos_inf.
original_lookup, RemovedInDjango20Warning and stacklevel set to integer 3.   call the method self.reverse_dict.getlist with an argument lookup_view, substitute the result for possibilities.
for every x in upload_handlers if x.chunk_size is true, append x.chunk_size to a list, substitute the result for possible_sizes.
post is a string '<could not parse>'.
get is a tuple containing elements generated by the call to the function pformat with an argument POST_override,
_get_post is a getter function and _set_post is a setter function for POST attribute of this class.
for every f in opts.local_fields that has an 'post_create_sql' attribute, append f to a list, substitute the resulting list for post_sql_fields.
join into a file path: path and string '%s.pot', where '%s' is replaced with self.domain converted into a string, substitute the result for pot_path.
join into a path: path and string '%s.pot', where '%s' is replaced with self.domain converted into a string.
join into a file path: self.locale_dir and string '.pot' appended to domain converted to string, substitute it for potfile.
append potfile to potfiles.
potfiles is an empty list.
call the method self.build_potfiles, substitute the result for potfiles.
sum absolute p with units an integer 1, substitute the result for prec.
call the method self.split_leading_dir with an argument path, assign the result to prefix and rest, respectively.
append '/' to prefix.
replace '%s' in string 'django_%s_template_' with self.app_or_project.
replace '%s' in string 'django_%s_template_' with self.app_or_project, substitute it for prefix.
substitute value under the 'prefix' key of dictionary d, substitute it for prefix.
call the function get_script_prefix, substitute the result for prefix.
call the method self.add_prefix with an argument fieldname, substitute it for prefix.
substitute settings.MEDIA_URL for prefix.
substitute settings.STATIC_URL for prefix.
increment length of template_dir by one and substitute it for prefix_length.
call the function urlquote with an argument _prefix, use the result as an argument for the call to the normalize function,
append '.' to name, substitute the result for prefixed.
call the method self.add_prefix with an argument name, substitute the result for prefixed_name.
substitute integers 0, 1, 2 and 3 for PREV, NEXT, KEY and RESULT, respectivley.
for every s_opt in parser.option_list.   for every x in slice of cwords from the second element to the element at the cword decremented by 1 index,
primary_keys is an empty list.
split string pks by ',', substitute the result for primary_keys.
filter all the subcommands element through the lambda function with an argument x, that evaluates the method x.startswith,
append flup_module to string "Can't import flup.", print it to the standard output.
print a string "In the tar file %s the member %s is invalid: %s", where '%s' is substituted with: name, member.name and exc, respectively.
replace '%s' in string "Running post-migrate handlers for application %s" with app_config.label, print it to the standard output.
replace '%s' in string "Running pre-migrate handlers for application %s" with app_config.label, print it to the standard output.
print FASTCGI_HELP to the standard output.
print message to the standard output.
print opt_label to the standard output.
get attribute 'print' from the moves.builtins object, if it exists substitute it for print_, if not print_ is None.
priority is floating point number 1.0.
convert priority into a floating point integer, substitute it for priority.
append field to problem_fields list for every model in apps.get_models with argument kwargs dictionary, only if app_configs is None,
get the value under the 'all' key of the options dictionary, substitute it for process_all.
append func to processors.
processors is an empty tuple.
processors is an empty list.
convert processors into a tuple and substitute it for processors.
program is string 'msgfmt'
program_options is list containing string '--check-format'.
remove the elements from the 'name' and 'dictionary' keys of the options dictionary, substitute them for project_name and target, respectively.
split settings.SETTINGS_MODULE by '.' character, substitute the first element of the result for project_name.
get value under the 'propagate' key of the config dictioanry, if it exists substitute it for propagate, if not propagate is None.
remove config dictionary element under '.' key, if it exists substitute it for props, if not, props is None.
convert provided into a list and substitute it for provided.
call the function lazy with 2 arguments: func and resultclass, call the result with an argument, unpacked dictionary kwargs,
call the function lazy with 2 arguments: lambda function with unpacked dictionary kwargs as an argument and return value an instance of NumberAwareString class and NumberAwareString, call the result with an argument unpacked dictionary kwargs, substitute the result for proxy.
call the method block_context.pop with an argument self.name, assign the result to push and block.
substitute c_void_p for PVOID.
if first element of sys.version_info equals integer 2, PY2 is boolean True, otherwise it is boolean False.
if first element of sys.version_info equals integer 3, PY3 is boolean True, otherwise it is boolean False.
call the function os.path.expanduser with an argument pythonrc, substitute the result for pythonrc.
pytz is None.
substitute connection.ops.quote_name for qn.
call the method f.value_from_object with an argument instance, substitute the result for qs.
call the method pk.rel.to._default_manager.get_queryset, substitute the result for qs.
call the method qs.order_by with argument self.model._meta.pk.name, substitute the result for qs.
call the method qs.using with an argument form.instance._state.db, substitute the result for qs.
call the method queryset.filter with an argument unpacked dictionary containing self.instance for self.fk.name, substitute the result for qs.
call the method queryset.none, substitute it for qs.
call the method self.model._default_manager.get_queryset with an argument qs.
substitute self.queryset for qs.
code set to string 'invalid_pk_value and params with an entry: pk for 'pk'.   call the method self.queryset.filter with an argument, unpacked dictionary with an entry: value for string '__in' appended to key,
append ch to quant.
quant is an empty list.
remove last element for quant.
call the method query.items, substitute the result for query.
call the method query.lists, substitute the result for query.
call the method query_string.decode, substitute the result for query_string.
call the method objects.using with an argument using, call the method order_by on the result with an argument model._meta.pk.name,
queryset is an property object of this class, with _get_queryset getter and _set_queryset setter functions.
call the method queryset.filter with an argument pk__in set to primary_keys, substitute the result for queryset.
substitute self.model._default_manager for queryset.
substitute Paginator for QuerySetPaginator.
questioner is an instance of a InteractiveMigrationQuestioner class.
questioner is an instance of a InteractiveMigrationQuestioner class, created with an argument: defaults set to dictionary with entry:
if not, shutdown_message is an empty string.   if sys.platform equals string win32', substitute string 'CTRL-BREAK' for quit_command, if not substitute string 'CONTROL-C' for quit_command.
substitute first element of s for quote.
decrement l by integer 1, multiply it with hlen, subtract the result from dklen, substitute the result for r.
call the method o.isoformat substitute the result for r.
cut the last 6 elemetns from r, append character 'Z' to it, substitute the result for r.
substitute first 12 elements of r for r.
set the variable r to a random integer between 1 and 255 minus 6
raise the exception.
re raise an exception.
where '%(app_label)s' is replaced for obj.object._meta.app_label, '%(object_name)s' is replaced with obj.object._meta.object_name,   '%(pk)s' is replaced with obj.object.pk and '%(error_msg)s' is replaced with result of the function force_text with an argument e.   raise an exceptions
raise an exception,
if it is not equal to stat.S_IREAD,   raise an exception.
rais an AppRegistryNotReady exception with an argument string "The translation infrastructure cannot be initialized before the "
raise AttributeError exception,
raise an AttributeError exception.
raise an AttributeError exception with an argument string: "'%s' object has no attribute 'cleaned_data'",
raise an AttributeError exception with an argument string: "'%s' object has no attribute 'ordered_forms'",
raise an AttributeError with an argument string "%s could not be imported ", formated with self.name.
raise an AttributeError with an argument string "no such move, %r", formated with a tuple with an element name.
raise an AttributeError with an argument string "This %s instance has no `content` attribute. "Use `streaming_content` instead.",
raise an AttributeError exception with an argument string "This method is available only on the view class.".
raise an AttributeError with an argument string "This QueryDict instance is immutable".
raise an AttributeError exception with string "Unable to determine the file's size." as argument.
raise an AttributeError exception with an argument string "You cannot set content to a 304 (Not Modified) response".
raise an AttributeError exception with an argument string "You cannot set the upload handlers after the upload has been processed.".
raise an AttributeError with an argument attr.
raise an raise self.warning with an argument self.warning.
raise an BadHeaderError exception  with argument string "Header values can't contain newlines (got %r for header %r)",
raise an BadHeaderError exception with an argument string "Header values can't contain newlines (got %r)", where '%r' is replaced with value.
raise an BadSignature exception with an argument string 'No "%s" found in value', where '%s' is replaced by self.sep.
raise an BadSignature exception with an argument string 'Signature "%s" does not match', where '%s' is replaced by sig.
raise an base.DeserializationError exception with an argument string "<%s> node has invalid model identifier: '%s'",
raise an base.DeserializationError exception with an argument string "<%s> node is missing the required '%s' attribute",
raise an base.DeserializationError exception with string "<field> node is missing the 'name' attribute" as argument.
raise an base.DeserializationError exception with an argument string "Invalid model identifier: '%s'", where '%s' is replaced with model_identifier.
raise an base.SerializationError exception with argument string "Non-model object (%s) encountered during serialization",
raise an CommandError with an argument string "AppCommand cannot handle app '%s' in legacy mode because it doesn't have a models module.", where '%s' is replaced by app_config.label.
raise an CommandError with an argument string "Cache table '%s' could not be created.\nThe error was: %s.", replace '%s' with:
raise an CommandError with an argument string "errors happened while running msgattrib\n%s", where '%s' is replaced with errors.
raise an CommandError with an argument string "errors happened while running msgmerge\n%s", where '%s' is replaced with errors.
raise an CommandError exception with an argument string "errors happened while running msguniq\n%s", where '%s' is replaced with errors.
raise an CommandError exception with an argument string "errors happened while running xgettext on %s\n%s",
raise an CommandError exception with an argument string "Multiple fixtures named '%s' in %s. Aborting.", where '%s' is replaced with:
raise an CommandError with an argument string "Problem installing fixture '%s': %s is not a known serialization format.",
raise an CommandError with an argument string "Unable to find a locale path to store translations for file %s",
raise an CommandError exception with an argument string '"%s" is not a valid IPv6 address.' where '%s' is replaced with self.addr.
raise an CommandError exception with an argument string '"%s" is not a valid port number or address:port pair.',
use tag as an argument to call the iterator method next, substitute the result for invalid_tag.   raise an CommandError exception with an argument string 'There is no system check with the "%s" tag.', where '%s' is replaced with invalid_tag.
raise CommandError with an argument string 'Unknown app in excludes: %s', where '%s' is replaced with exclude.
raise an CommandError exception with an argument string 'Unknown model in excludes: %s', where '%s' is replaced with exclude.
raise an CommandError exception with an argument string 'You appear not to have the %r program installed or on your path.',
raise an CommandError exception with an argument string 'You must set settings.ALLOWED_HOSTS if DEBUG is False.'.
raise an CommandError exception with an argument string 'Your Python does not support IPv6.'.
raise an exception CommandError, with argument string "%r conflicts with the name of an existing Python module and cannot be used as a project name. Please try another name.", where '%r' is replaced with project_name.
raise an CommandError exception with an argument string "%r conflicts with the name of an existing Python module and cannot be used "
raise an CommandError with an argument string "%r is not a valid %s name. Please %s.", were '%r' is replaced with name,
raise an CommandError exception with an argument string "%r is not a valid port number.", where '%r' is repaced with self.port.
raise a CommandError exception with an argument:
raise an CommandError with an argument string "%s. Are you sure your INSTALLED_APPS setting is correct?", with '%s' replaced by e.
raise an CommandError with an argument string "App '%s' does not have migrations (so squashmigrations on it makes no sense)",
raise CommandError exception with "App '%s' does not have migrations (you cannot selectively sync unmigrated apps)",
raise a exception of CommandError class, with string "App '%s' does not have migrations" with '%s' replaced with app_label as the argument.
raise an CommandError exception, with an arguent: string "App '%s' has migrations. Only the sqlmigrate and sqlflush commands can be used when an app has migrations.", where '%s' is replaced for app_config.label.
raise an CommandError exception with an argument "Can't find %s. Make sure you have GNU gettext tools 0.15 or newer installed.",  where '%s' is replaced with program.
raise CommandError exception, with sring "Can't find %s. Make sure you have GNU gettext tools 0.15 or newer installed." as argument, substitute '%s' with self.program.
raise an CommandError with argument: string "Can't resolve dependencies for %s in serialized app list.", where '%s' is replaced with:
raise a exception of CommandError class, with string "Cannot find a migration matching '%s' from app '%s'. Is it in INSTALLED_APPS?",
raise CommandError exception with "Cannot find a migration matching '%s' from app '%s'.",
raise an CommandError with an argument string "Cannot find a migration matching '%s' from app '%s'.",
raise an CommandError exception with an argument string "Command doesn't accept any arguments".
join it with app into a string, separated with string '; ', substitute it for name_str.   substitute '%s\ in string "Conflicting migrations detected (%s).\nTo fix them run 'python manage.py makemigrations --merge'",
in "%s in %s" substitute '%s' with names string and app, respective, join all the previous pairs into a string separated by ';',   substitute it for name_str.   raise CommandError exception, with "Conflicting migrations detected (%s).\nTo fix them run 'python manage.py makemigrations --merge'",
raise an CommandError exception with an argument string "couldn't download URL %s to %s: %s", where '%s' is replaced with url,
raise an CommandError with an argument string "couldn't extract file %s to %s: %s", where '%s' is replaced with filename, tempdir and e.
raise an CommandError exception with an argument string "couldn't handle %s template %s.", replace '%s' with self.app_or_project and template.
raise an CommandError exception with an argument string "currently makemessages only supports domains 'django' and 'djangojs'".
raise an CommandError exception with an argument "Database inspection isn't supported for the currently selected database backend.".
raise an CommandError exception with an argument string "Destination directory '%s' does not exist, please create it first.",
raise an CommandError exception with an argument string "Django doesn't know which syntax to use for your SQL statements,\n"
raise an CommandError exception with an argument string "Error: %s", with '%s' replaced by message.
raise an CommandError exception with an argument string, "Incompatible values of 'leave_locale_alone' "
raise CommandError exception with "More than one migration matches '%s' in app '%s'. Please be more specific.",
raise a exception of ComandError class with string "More than one migration matches '%s' in app '%s'. Please be more specific.",
raise an CommandError with an argument string "More than one migration matches '%s' in app '%s'. Please be more specific.",
raise a CommandError exception, with string "No migrations present for: %s" as argument, substitute '%s' in previous string with,
raise CommandError exception with string "The %s file has a BOM (Byte Order Mark). Django only supports .po files encoded in UTF-8 and without any BOM.", with '%s' replaced with po_path, as argument.
raise CommandError exception with string "This script should be run from the Django Git checkout or your project or app tree, or with the settings module specified.", as argument.
if the result is true or self.domain is not None,   raise an CommandError exception with an argument string "Type '%s help %s' for usage information.", where '%s' are replaced by:
raise CommandError with an argument string "Unable to serialize database: %s", where '%s' is replaced with e.
raise CommandError with an argument string 'Unknown app in excludes: %s', where '%s' is replaced with exclude.
raise CommandError with an argument string 'Unknown application: %s', where '%s' is replaced with app_label.
raise an CommandError exception with an argument string "Unknown command: %r", with '%r' replaced by name.
raise CommandError with an argument string 'Unknown model: %s', where '%s' is replaced with app_label and model_label, respectively.
raise CommandError with an argument string 'Unknown serialization format: %s', where '%s' is replaced with format.
raise an CommandError exception with an argument string "You can only use --pks option with one model".
raise an CommandError exception with an argument string "you must provide %s %s name", where '%s' is replaced with string 'an',
raise an CommandError with an argument string "You must supply at least one app label when using --empty.".
raise an CommandError exception with an argument message.
for every e in all_issues,   raise an CommandError with argument msg,
raise CommandError exception with msg as argument.
raise an ContentNotRenderedError exception with an sring 'The response content must be rendered before it can be accessed.'.
raise an ContentNotRenderedError exception with an string 'The response content must be rendered before it can be iterated over.'.
raise an ContentNotRenderedError exception with an argument string 'The response content must be rendered before it can be pickled.'.
raise an ContextPopException.
raise an DisallowedHost exception with an argument msg.
raise an DisallowedRedirect exception with an argument string "Unsafe redirect to URL with protocol '%s'",
raise an exception DjingoUnicodeDecodeError, with s and list of arguments *args from object e, as the arguments.
raise an DTDForbidden exception with arguments name, sysid and pubid.
raise an exception e.
raise an EmptyPage exception with string 'That page contains no results' as an argument.
raise an EmptyPage exception with string 'That page number is less than 1' as an argument.
raise an EntitiesForbidden exception with arguments name, None, base, sysid, pubid and notation_name.
raise an EntitiesForbidden exception with arguments name, value, base, sysid, pubid and notation_name.
raise an EnvironmentError exception with string "Cache directory '%s' does not exist and could not be created" as argument,
raise an Exception exception with an argument string "This %s instance cannot tell its position",
raise an Exception exception with an argument string "This %s instance is not writable",
raise an ExternalReferenceForbidden exception with arguments context, base, sysid and pubid.
raise an FieldError exception with an argument message.
raise an ImportError exception.
raise an ImportError exception with an argument string "Could not import '%s'. The path must be fully qualified.",
raise an ImportError exception with an argument string "No IPython".
raise an ImproperlyConfigured exception with argument string '"%s" is not a valid regular expression: %s',
raise an ImproperlyConfigured exception wiht an argument string 'Command %s defines both "requires_model_validation" '
raise an ImproperlyConfigured with an argument string "Calling modelform_factory without defining 'fields' or 'exclude' explicitly is prohibited."
or if it doesnt exists if exclude is None.   raise an ImproperlyConfigured with an argument string "Calling modelformset_factory without defining 'fields' or 'exclude',
raise an ImproperlyConfigured exception with an argument string "Creating a ModelForm without either the 'fields' attribute,
raise an ImproperlyConfigured exception with argument string 'Could not create directory for saving email messages: %s (%s)',
raise an ImproperlyConfigured exception with argument string 'Could not write to directory: %s', replace '%s' with self.file_path.
raise an ImproperlyConfigured with an argument string 'Loader does not define a "load_template" callable template source loader'.
raise an ImproperlyConfigured exception with argument string 'Path for saving email messages exists, but is not a directory: %s',  replace '%s' with self.file_path.
raise an ImproperlyConfigured exception with argument string 'Path for saving emails is invalid: %r', replace '%r' with self.file_path.
raise an ImproperlyConfigured exception with an argument string 'The SECURE_PROXY_SSL_HEADER setting must be a tuple containing two values.'.
raise an ImproperlyConfigured exception with an argument string "Error importing template source loader %s - can't pass arguments to
raise an exception ImproperlyConfigured with string "You must define a '%s' cache" as argument, with '%s' replaced with DEFAULT_CACHE_ALIAS converted into a string.
If you see valid patterns in the file then the issue is probably caused by a circular import."   raise an ImproperlyConfigured exception with an argument: return value of the method msg.format, called with an argument name set to self.urlconf_name.
raise an InputStreamExhausted exception,
aise and exception InvalidCacheBackendError with string "Could not find backend '%s': %s" as argument, replace '%s' with backend and e, respectively.
raise and exception InvalidCacheBackendError with string "Could not find config for '%s' in settings.CACHES" as argument, replace '%s' with alias.
raise and exception InvalidCacheBackendError with string "Could not find backend '%s': %s" as argument, replace '%s' with backend and e, respectively.
raise an InvalidTemplateLibrary exception with an argument string "ImportError raised loading %s: %s",
raise an InvalidTemplateLibrary exception with an argument string "Template library %s does not have a variable named 'register'",
raise an InvalidTemplateLibrary exception with an argument string "Template library %s not found, tried %s",
raise an InvalidTemplateLibrary exception with an argument string ("Unsupported arguments to Library.filter: (%r, %r)",
raise an InvalidTemplateLibrary exception with an argument string "Unsupported arguments to Library.tag: (%r, %r)",
raise an IOError exception with argument string "%s exists and is not a directory.", where '%s' is replaced by directory.
raise an IOError exception with string "Destination file %s exists and allow_overwrite is False" as argument, where '%s' is replaced by new_file_name.
raise an KeyError with an argument string "Key %r not found in '%s'", substitute '%s' with name and self.__class__.__name__.
attribute of the self object for name converted into a string.   raise an KeyError with an argument string 'Unknown media type "%s"', where '%s' is replaced with name.
raise an KeyError with an argument string 'Your dictionary lacks key \'%s\'. Please provide it, because it is required to '
raise an KeyError with an argument string "Unknown language code %s and %s.", where '%s' is replaced with lang_code,
raise an KeyError with an argument "Unknown language code %s.", where '%s' is replaced with lang_code.
raise KeyError exception with an argument key.
rise an KeyError exception with an argument key.
raise an LookupError with an argument lang_code.
raise an MultiPartParserError with an argument string 'Invalid boundary in multipart: %s' is replaced with boundary.
raise an MultiPartParserError with an argument string 'Invalid Content-Type: %s', where '%s' is replaced with content_type.
raise an MultiPartParserError with an argument string 'multipartparser.exhaust() was passed a non-iterable or stream parameter'.
raise an MultiPartParserError with an argument string "Invalid content length: %r", where '%r' is replaced with content_length.
raise an MultiValueDictKeyError exception with printable representation of key.
raise an NoReverseMatch exception with an argument string "%s is not a registered namespace inside '%s'",
raise an NoReverseMatch exception with an argument string "%s is not a registered namespace", with '%s' replaced with key.
raise an NoReverseMatch exception with an argument string "Error importing '%s': %s.", where '%s' is replaced with lookup_view and e, respectively.
raise an NoReverseMatch exception with an argument string "Reverse for '%s' with arguments '%s' and keyword ",
raise an NotImplementedError with an argument string "Subclasses of AppCommand must provide a handle_app_config() method.".
raise an NotImplementedError exception with an argument string 'Awaiting Implementation'.
raise an NotImplementedError exception with an argument string 'may be implemented in a future release'.
raise an NotImplementedError with an argument string 'Subclasses must define this method.'.
raise an NotImplementedError with an argument string 'Subclasses must implement this method.'.
raise NotImplementedError exception with an argument string 'Subclasses must implement this method.'.
raise an NotImplementedError exception with an argument string 'subclasses of BaseArchive must provide a list() method'.
raise an NotImplementedError exception with an argument string 'subclasses of BaseArchive must provide an extract() method'.
raise an exception NotImplementedError with string 'subclasses of BaseCache must provide a clear() method' as argument.
raise an exception of class NotImplementedError, with string 'subclasses of BaseCache must provide a delete() method' as argument.
raise an exception of class NotImplementedError, with string 'subclasses of BaseCache must provide a get() method' as argument.
raise an exception of class NotImplementedError, with string 'subclasses of BaseCache must provide a set() method' as argument.
raise an exception of class NotImplementedError with string 'subclasses of BaseCache must provide an add() method' as argument.
raise an NotImplementedError exception with an argument string 'subclasses of BaseCommand must provide a handle() method'.
raise an NotImplementedError exception with argument string 'subclasses of BaseEmailBackend must override send_messages() method'.
raise an NotImplementedError with an argument string 'subclasses of BaseLoader must provide a load_template_source() method'.
raise a NotImplementedError with an argument string 'subclasses of Deserializer must provide a __next__() method'.
raise an NotImplementedError with argument string 'subclasses of FileUploadHandler must provide a file_complete() method'.
raise an NotImplementedError with argument string 'subclasses of FileUploadHandler must provide a receive_data_chunk() method'.
raise an NotImplementedError exception with an argument string 'subclasses of LabelCommand must provide a handle_label() method'.
raise an NotImplementedError exception with an argument sting 'subclasses of LazyObject must provide a _setup() method'.
raise an NotImplementedError with an argument string 'subclasses of NoArgsCommand must provide a handle_noargs() method'.
raise an NotImplementedError exception with an argument string 'subclasses of Origin must provide a reload() method'.
raise a NotImplementedError with an argument string 'subclasses of Serializer must provide a start_object() method'.
raise a NotImplementedError with an argument string 'subclasses of Serializer must provide a start_serialization() method'.
raise a NotImplementedError with an argument string
raise a NotImplementedError with an argument string
raise a NotImplementedError with an argument string 'subclasses of Serializer must provide an handle_m2m_field() method'.
raise an NotImplementedError exception with argument string 'subclasses of Storage must provide a created_time() method'.
raise an NotImplementedError exception with argument string 'subclasses of Storage must provide a delete() method'.
raise an NotImplementedError exception with argument string 'subclasses of Storage must provide a listdir() method'.
raise an NotImplementedError exception with argument string 'subclasses of Storage must provide a modified_time() method'.
raise an NotImplementedError exception with argument string 'subclasses of Storage must provide a size() method'.
raise an NotImplementedError exception with argument string 'subclasses of Storage must provide a url() method'.
raise an NotImplementedError exception with argument string 'subclasses of Storage must provide an accessed_time() method'.
raise an NotImplementedError exception with argument string 'subclasses of Storage must provide an exists() method'.
raise an NotImplementedError with an argument string 'subclasses of SyndicationFeed must provide a write() method'.
raise an NotImplementedError with an argument string 'subclasses of Tokenparser must provide a top() method'.
raise an NotImplementedError with an argument string 'subclasses of Widget must provide a render() method'.
raise an NotImplementedError exception with argument string "This backend doesn't support absolute paths.".
raise an OverflowError exception with an argument string 'dklen too big'.
raise an exception PageNotAnInteger with string 'That page number is not an integer' as an argument.
raise an exception parser.error_class with an argument string "Not expecting '%s' as infix operator in if tag.",
raise an exception parser.error_class with an argument string "Not expecting '%s' in this position in if tag.",
raise an exception parser.error_class with an argument string "Unexpected end of expression in if tag.".
raise an RawPostDataException exception with an argument string "You cannot access body after reading from request's data stream".
raise an Resolver404 exception with an argument dictionary containing 1 entry: path for 'path'.
raise an Resolver404 exception with an argument dictionary containing 2 entries: new_path for 'path' and tried for 'tried'.
raise an RuntimeError exception with an argument string "The method to extend accepted command-line arguments by the "
raise an self.error with 2 arguments: None and string "Unclosed tags: %s ",
call the method self.error with 2 arguments: token and string "Empty block tag", return the result.
call the method self.error with 2 arguments: token and string "Empty variable tag", return the result.
raise an self.error exception with 2 arguments: token and string  "Invalid block tag: '%s', expected %s",
where '%s' is replaced with command and result of the function get_text_list called with an argument list,   with p converted into a string and surrounded with single quotes for every p in parse_until.   call the method self.error with 2 arguments: token and string "Invalid block tag: '%s'", where '%s' is replaced with command,
raise an exception self.error_class with an argument string ""Unused '%s' at end of if expression",
raise an self.exception exception.
and elements of parse_until joined into a string, separated by string ', '.   raise an self.source_error exception with 2 arguments: source and msg.
raise self.warning.
raise a SerializerDoesNotExist exception with an argument format.
raise an SignatureExpired exception with an argument string 'Signature age %s > %s seconds', where '%s' is replaced by age and max_age, respectively.
raise an exception StopFutureHandlers.
raise an StopIteration exception.
raise an StopIteration exception.
raise an StopIteration.
raise an StopIteration exception,
raise an SuspiciousFileOperation exception with string "Attempted access to '%s' denied." as argument, replace '%s' with name.
raise SuspiciousMultipartForm exception with an argument string, "The multipart parser got stuck, which shouldn't happen with"
raise an SyntaxError with an argument string "Translation blocks must not include other block tags: %s (%sline %d)",
raise an SystemRestart exception,
raise an TemplateDoesNotExist exception.
raise an TemplateDoesNotExist exception with an argument, elements of not_found joined into a string, separated with ', '
raise an TemplateDoesNotExist exception with an argument string "No template names provided".
raise an TemplateDoesNotExist exception with an argument error_msg.
raise an TemplateDoesNotExist exception with an argument name.
raise an TemplateDoesNotExist exception with an argument template_name.
raise an TemplateEncodingError exception with an argument "Templates can only be constructed from unicode or UTF-8 strings.".
raise TemplateSyntaxError(
raise an TemplateSyntaxError exception "'%s' is decorated with takes_context=True so it must have a first argument of 'context'",
raise an TemplateSyntaxError exception with an argument string "'%s' received multiple values for keyword argument '%s'",
raise an TemplateSyntaxError exception with an argument string "'%s' received some positional argument(s) after some keyword argument(s)", where '%s' is replaced with name.
raise an TemplateSyntaxError exception with an argument string "'%s' received too many positional arguments",
raise an TemplateSyntaxError exception with an argument "'%s' received unexpected keyword argument '%s'",
raise an TemplateSyntaxError exception with an argument string, "'%s' tag takes at least 2 arguments and the second last argument
raise an TemplateSyntaxError exception with an argument string '"filter %s" is not permitted.  Use the "autoescape" tag instead.',
raise an TemplateSyntaxError exception with an argument string '"with" in %r tag needs at least one keyword argument.',
raise an TemplateSyntaxError exception with an argument string 'The %r option was specified more than once.',
raise an TemplateSyntaxError with an argument string 'Unknown argument for %r tag: %r.', where '%r' is replaced with first element of bits and options.
raise an TemplateSyntaxError exception with an argument string "'%s' cannot appear more than once in the same template",
raise an TemplateSyntaxError exception with an argument string "'%s' is not a valid tag library: %s",
raise an TemplateSyntaxError exception with an argument string "'%s' is not a valid tag or filter in tag library '%s'",
raise an TemplateSyntaxError exception with an argument string "'%s' tag takes only one argument",
raise an TemplateSyntaxError exception with an argument string "'%s' tag with name '%s' appears more than once",
raise an TemplateSyntaxError exception with an argument string "'%s' takes at least one argument (path to a view)",
raise an TemplateSyntaxError exception with an argument string "'%s' takes one argument", where '%s' is replaced with first element of bits.
raise an TemplateSyntaxError exception with an argument string "'autoescape' argument should be 'on' or 'off'".
raise an TemplateSyntaxError with an argument string "'autoescape' tag requires exactly one argument.".
raise an TemplateSyntaxError exception with an argument string "'cycle' tag requires at least two arguments".
raise an TemplateSyntaxError exception with an argument string "'firstof' statement requires at least one argument".
raise an TemplateSyntaxError exception with an argument string "'for' statements should have at least four words: %s",
raise an TemplateSyntaxError exception with an argument string "'for' statements should use the format 'for x in y': %s",
raise an TemplateSyntaxError exception with an argument string "'for' tag received an invalid argument: %s",
raise an TemplateSyntaxError exception with an argument string "'now' statement takes one argument".
raise an TemplateSyntaxError exception with an argument string "'regroup' tag takes five arguments".
raise an TemplateSyntaxError exception with an argument string "'ssi' tag takes one argument: the path to the file to be included".
raise an TemplateSyntaxError exception with an argument string "'templatetag' statement takes one argument".
raise an TemplateSyntaxError exception with an argument string "%r expected at least one variable assignment",
raise TemplateSyntaxError("%r must be the first tag in the template.", where '%s' is replaced with node.
raise an TemplateSyntaxError exception with an argument string "%r received an invalid token: %r", where '%r' is replaced with,
raise an TemplateSyntaxError with an argument string "%r tag takes at least one argument: the name of the template to be included.",
raise an TemplateSyntaxError exception with an argument string "%r takes two arguments",
raise an TemplateSyntaxError exception with an argument string "%s requires %d arguments, %d provided",
raise an TemplateSyntaxError exception with an argument string "back called without some previous parsing".
raise an TemplateSyntaxError exception with an argument "Could not find variable at start of %s.", replace '%s' with token.
raise an TemplateSyntaxError exception with an argument string "Could not parse some characters: %s|%s|%s",
raise an TemplateSyntaxError exception with an argument string "Could not parse the remainder: '%s' from '%s'",
raise an TemplateSyntaxError exception with an argument string "expected another tag, found end of string: %s",
raise an TemplateSyntaxError exception with an argument string "Invalid arguments provided to assignment_tag".
raise an TemplateSyntaxError exception with an argument string "Invalid arguments provided to simple_tag".
raise an TemplateSyntaxError with an argument string "Invalid filter: '%s'", substitute '%s' with filter_name.
raise an TemplateSyntaxError exception with an argument string "Invalid syntax in widthratio tag. Expecting 'as' keyword".
raise an TemplateSyntaxError exception with an argument string "Invalid templatetag argument: '%s'. Must be one of: %s",
raise an TemplateSyntaxError exception with an argument string "Malformed arguments to url tag".
raise an TemplateSyntaxError exception with an argument string "Named cycle '%s' does not exist", where '%s' is replaced with name.
raise an TemplateSyntaxError exception with an argument string "next-to-last argument to 'regroup' tag must be 'as'".
raise an TemplateSyntaxError exception with an argument string "No named cycles in template. '%s' is not defined",
raise an TemplateSyntaxError exception with an argument string "Only 'silent' flag is allowed after cycle's name, not '%s'.",
raise an TemplateSyntaxError exception with an argument string "Searching for value. Unexpected end of string in column %d: %s",
raise an TemplateSyntaxError exception with an argument "Searching for value. Expected another value but found end of string: %s",
raise an TemplateSyntaxError exception with an argument string "Searching for value. Unexpected end of string in column %d: %s",
raise an TemplateSyntaxError exception with an argument string "Second (optional) argument to %s tag must be 'parsed'",
raise an TemplateSyntaxError exception with an argument string "second argument to 'regroup' tag must be 'by'".
or first element of var equals '_',   raise an TemplateSyntaxError exception with an argument string "Variables and attributes may not begin with underscores: '%s'",
raise an TemplateSyntaxError exception with an argument string "widthratio final argument must be a number".
raise an TemplateSyntaxError exception with an argument string "widthratio takes at least three arguments".
raise an TemplateSyntaxError exception with an argument error_msg.
raise a TypeError exception,
raise an TypeError with an argument string "The argument `field` must be `None` when the `error`argument contains errors for multiple fields.".
raise an TypeError exception with an argument string "Variable must be a string or number, got %s", replace '%s' with type of var.
raise an TypeError with an string 'formfield_callback must be a function or callable'.
raise an TypeError exception with an argument string 'In order to allow non-dict objects to be serialized set the safe parameter to False'.
raise an TypeError exception with an argument string 'Level not an integer or a valid string: %r' formated with level.
raise an TypeError exception with an argument string 'other_dict must be a mapping (dictionary-like) object.'.
raise an TypeError exception with an argument sting "can't delete _wrapped.".
raise an TypeError exception with an argument string "end must be None or a string".
raise an TypeError exception with an argument string "If the flags are set, regex must be a regular expression string.".
raise an TypeError exception with an argument string "invalid keyword arguments to print()".
unpacked list args and unpacked dictionary kw, return the result.   raise an TypeError exception with an argument sting "Lazy object returned unexpected type.".
raise an TypeError exception with an argument string "Non-integer base36 conversion input.".
raise an TypeError with an argument string "relative imports require the 'package' argument".
raise an TypeError exception with an argument string "sep must be None or a string".
raise an TypeError exception with an argument: result of the method illegal_formatting.group called with an argument,
raise an TypeError with an argument string "update expected at most 1 arguments, got %d" formated with length of args.
with new_class.__name__, '%(opt)s' is replaced with opt and '%(value)s' is replaced with value.   raise an TypeError exception with an argument msg.
raise an TypeError with an argument s.
raise an UnrecognizedArchiveFormat exception with an argument string "File object not a recognized archive format.".
raise an UnrecognizedArchiveFormat exception with an argument string "Path not a recognized archive format: %s",
raise an v exception.
raise ValidationError with 2 arguments: return value of the function _ called with an argument string,
raise an ValidationError with 3 arguments: value under the 'invalid_choice' key of the self.error_messages dictionary,
raise an ValidationError with 3 arguments: value under the 'invalid_choice' key of the self.error_messages dictionary,
raise an ValidationError with 3 arguments: dictionary self.error_messages value under the key 'invalid_choice',
raise an ValidationError with 3 arguments: value under the 'invalid_choice' key of the self.error_messages dictionary,
raise an ValidationError with 3 arguments: dictionary self.error_messages value under the key 'invalid_pk_value',
raise an ValidationError with 3 arguments: value under the 'max_decimal_places' key of the self.error_messages dictionary,
raise an ValidationError with 3 arguments: value under the 'max_digits' key of the self.error_messages dictionary,
self.max_digits and self.decimal_places,   raise an ValidationError with 3 arguments: value under the 'max_whole_digits' key of the self.error_messages dictionary,
raise a ValidationError exception with 2 arguments: return value of the function _ with an string argument 'Enter a valid integer.',
raise a ValidationError exception with 2 arguments: return value of the function _ called with an argument string 'Enter a valid IPv4 or IPv6 address.', and code set to string 'invalid'.
raise a ValidationError exception with 2 arguments: return value of the function _ called with an argument string 'Enter a valid IPv6 address.', and code set to string 'invalid'.
raise an ValidationError exception with 2 arguments: error_message and code as a string 'invalid'.
raise an ValidationError exception with an argument errors,
raise an ValidationError with an argument errors.
raise an ValidationError exception with an argument errors.
raise an ValidationError with 2 arguments: value under the 'contradiction' key of the self.error_messages dictionary and code set to 'contradiction'.
raise an ValidationError with 2 arguments: value under the 'empty' key of the self.error_messages dictionary and code set to 'empty'.
raise an ValidationError with 2 arguments: self.error_messages dictionary value under the 'invalid_choice' key,
raise an ValidationError exception with 2 arguments: value under the 'invalid_choice' key of the self.error_messages dictionary,
raise an ValidationError with 2 arguments: value under the 'invalid_date' key of the self.error_messages dictionary and code set to string 'invalid_date'.
raise an ValidationError with 2 arguments: value under the 'invalid_list' key of the self.error_messages dictionary and code set to 'invalid_list'.
raise an ValidationError with 2 arguments: value under the 'invalid_time' key of the self.error_messages dictionary and code set to string 'invalid_time'.
raise an ValidationError with 2 arguments: value under the 'invalid' key of the self.error_messages dictionary and code set to 'invalid'.
or value equals return value of the call to Decimal with argument '-Inf'   raise an ValidationError with 2 arguments: value under the 'invalid' key of the self.error_messages dictionary and code set to 'invalid'.
raise an ValidationError with 2 arguments: dictionary self.error_messages value under the key 'list',
raise an ValidationError with 2 arguments: value under the 'max_length' key of the self.error_messages dictionary and code set to 'max_length'.
raise an ValidationError with 2 arguments: value under the 'required' key of the self.error_messages dictionary and code set to string 'required'.
raise an ValidationError with 2 arguments: value under the 'required' key of the self.error_messages dictionary and code set to 'required'.
raise an ValidationError with 3 arguments: value under the 'required' key of the self.error_messages dictionary,
raise an ValidationError with 2 arguments: dictionary self.error_messages value under the key 'required',
raise a ValidationError exception with arguments self.message, code set to self.code and params set to params.
raise a ValidationError exception with arguments self.message and code set to self.code.
is greater than self.max_num, or if value under the TOTAL_FORM_COUNT key of the self.management_form.cleaned_data dictionary,   is grater than self.absolute_max,   raise an ValidationError with 2 arguments: return value of the function ungettext with 3 arguments:
is smaller than self.min_num,   raise an ValidationError with 2 arguments: return value of the function ungettext with 3 arguments:
raise an exception value.
raise an value.with_traceback exception with an argument tb.
raise an ValueError exception.
raise an ValueError with an argument string "'%s.%s' has more than one ForeignKey to '%s.%s'.", where '%s' is replaced with,
raise an ValueError with an argument string "'%s.%s' has no field named '%s'.", where '%s' is replaced with,
raise an ValueError with an argument string "'%s.%s' has no ForeignKey to '%s.%s'.", where '%s' is replaced with,
raise an ValueError with an argument string "'%s' has no field named '%s'.", with '%s' replaced with self.__class__.__name__ and field, respectively.
substitute '%s' is "%s.process_response didn't return an HttpResponse object. It returned None instead.",
replace '%s' in the string  "%s.process_template_response didn't return an HttpResponse object. It returned None instead.",
raise an ValueError exception with argument string "EMAIL_USE_TLS/EMAIL_USE_SSL are mutually exclusive, so only set one of those settings to True.".
and fk.rel.to is not contained in result of the call to the method parent_model._meta.get_parent_list.   raise an ValueError with an argument string "fk_name '%s' is not a ForeignKey to '%s.%'.", where '%s' is replaced with,
raise an ValueError exception with an argument string "make_aware expects a naive datetime, got %s", where '%s' is replaced with value.
raise a ValueError exception with an argument "You can only use `unpack_ipv4` if `protocol` is set to 'both'".
raise an ValueError with an argument string 'empty_label list/tuple must have 3 elements.'.
raise an ValueError with an argument string 'ModelForm has no model class specified.'.
raise an ValueError exception with an argument string 'must define at least one ordering operation: < > <= >='.
raise an ValueError exception with an argument string 'No handler found with name %r' formated with name.
raise an ValueError exception with an argument string 'Not a valid Python identifier: %r' formated with s.
raise ValueError exception with string 'Sign character found in converter base digits.' as an argument.
called with sep appended to base_path as an argument and results of the function normcase called twice with final_path,   and base_pah are not equal and directory name of the result of the function normcase called with an argument base_path,   if not equal to the result of the function normcase called with an argument base_path.   raise an ValueError with an argument string 'The joined path (%s) is located outside of the base path component (%s)',
raise an ValueError exception with an argument string 'Unable to add filter %r: %s' formated with f and e.
raise an ValueError exception with an argument string 'Unable to add handler %r: %s' formated with h and e.
raise an ValueError exception with an argument string 'Unable to configure filter %r: %s' formated with name and e.
raise an ValueError exception with an argument string 'Unable to configure formatter %r: %s' formated with name and e.
raise an ValueError exception with an argument string 'Unable to configure handler %r: %s' formated with name and e.
raise an ValueError exception with an argument string 'Unable to configure logger %r: %s' formated with name and e.
raise an ValueError exception with an argument string 'Unable to configure root logger: %s' formated with e.
raise an ValueError exception with an argument string ''Unable to configure root logger: %s' formated with e.
raise an ValueError exception with an argument string 'Unable to convert %r at %r' formated with value and rest.
raise an ValueError exception with an argument string 'Unable to set formatter %r: %s' formated with formatter and e.
raise an ValueError exception with an argument string 'Unable to set target handler %r: %s',
raise an ValueError exception with an argument string 'Unknown level: %r' formated with level.
raise an ValueError with an argument string "'package' not set to a string".
raise the exception ValueError, with string as argument, "@python_2_unicode_compatible cannot be applied",
raise an ValueError exception with an argument string "%r is not in a valid HTTP date format" formated with date.
raise an ValueError with an argument string "attempted relative import beyond top-level package".
raise an ValueError exception with an argument string "Base36 conversion input too large.".
raise an ValueError exception with an argument string "Base36 input too large".
raise an ValueError with an argument string "Could not find common ancestor of %s", where '%s' is replaced with migration_names.
raise an ValueError exception with an argument string "dictionary doesn't specify a version".
raise an ValueError exception with an argument string "Don't mix *args and **kwargs in call to reverse()!".
raise an ValueError with an argument string "Invalid header: %r", where '%s' is replaced with line.
raise an ValueError with an argument string "Invalid timezone: %r", substitute '%r' with timezone.
raise a ValueError exception with an argument string "JSON can't represent timezone-aware times.".
raise an exception of class ValueError, with string "Key '%s' not found" as argument, where '%s' is substituted for key.
raise an exception of the class ValueError with string "Key '%s' not found" as argument, '%s' is substituted for key.
raise an ValueError exception with string "Key '%s' not found" as argument, substitute '%s' with key converted into a string.
raise an ValueError exception with string "Key '%s' not found" as argument, substitute '%s' for key.
raise an ValueError with an argument string "MultiValueDict.update() takes either a MultiValueDict or dictionary".
raise an ValueError exception with an argument string "Negative base36 conversion input.".
raise an ValueError with an argument string "Non-reversible reg-exp portion: '(?%s'" formated with ch.
raise an ValueError with an argument string "Non-reversible reg-exp portion: '(?P%s'" formated with ch.
raise an ValueError exception wit an argument string "Not a string literal: %r", where "%r" is replaced with s.
raise an ValueError with an argument string "The %s could not be %s because the data didn't validate.",
raise an ValueError exception with string "The file cannot be reopened." as an argument.
raise a ValueError exception with an argument "The protocol '%s' is unknown. Supported: %s", replace '%s' with protocol,
substitute the '%s' in the string "The view %s.%s didn't return an HttpResponse object. It returned None instead.",
raise an ValueError with string "This file is not accessible via a URL." as argument.
raise an ValueError exception with an argument string "Unable to convert %r" formated with value.
raise an ValueError exception with an argument string "Unsupported version: %s" formated with value under 'version' key of config dictionary.
raise an ValueError with an string "Zip-compressed fixtures must contain one file.".
raise an ValueError exception with an argument e.
raise an VariableDoesNotExist exception with an argument string "Failed lookup for key [%s] in %r",
raise an ViewDoesNotExist exception with an argument string "Could not import '%s.%s'. View is not callable.",
import_module called with an argument parentmod and submod, evaluates to false.   raise an ViewDoesNotExist exception with an argument string "Could not import '%s'. Parent module %s does not exist.",
raise an ViewDoesNotExist exception with an argument string "Could not import '%s'. View does not exist in module %s.",
call the function random.randrange with argument integer 100000, substitute the result for randint.
format string "%s%s%s" with 3 elements: result of the function random.getstate, result of the call the the function time.time,
divide value by max_value, multiply the result with max_width, substitute it for ratio.
RAW is a string "raw".
call get_str_from_wsgi function with self.environ, string 'HTTP_COOKIE' and empty string as arguments, substitute it for raw_cookie.
call the method field_stream.read, substitute the result for raw_data.
call the get_bytes_from_wsgi function with self.environ, string 'QUERY_STRING' and empty string as arguments, substitute the return value for raw_query_string.
call the function force_str with raw data as an argument and substitute it for rawdata.
substitute self.rawdata for rawdata.
call the function re.compile with an argument raw string '(((?<=[a-z])[A-Z])|([A-Z](?![A-Z]|$)))', substitute the result for re_camel_case.
re.U and re.S, substitute the result for re_words.   call the function re.compile with 2 arguments: raw string '<.*?>|(.)' and bitwise OR performed with 2 operands,
compile regex from the raw string '(\d{4})-(\d\d?)-(\d\d?)$', substitute it for RE_DATE.
compile regex from a string '\\(.)', substitute it for re_escaped.
compile regex from a string '(?<!\\)([aAbBcdDeEfFgGhHiIjlLmMnNoOPrsStTUuwWyYzZ])', substitute it for re_formatchars.
re.U and re.S, substitute the result for re_chars.   call the function re.compile with an argument raw string '\r\n|\r', substitute the result for re_newlines.
re.U and re.S, substitute the result for re_chars.   call the function re.compile with 2 arguments: raw string '<(/)?([^ ]+?)(?:(\s*/)| .*?)?>' and bitwise OR performed with 2 operands,
call the function re.compile with 2 arguments: raw string '<.*?>|((?:\w[-\w]*|&.*?;)+)' and bitwise OR performed with 2 operands,
define lambda function that returns self.file.read field, use it as an argument for property function, put the result in read.
define lambda function that returns self.file.readinto field, use it as an argument for property function, put the result in readinto.
call the method readline.parse_and_bind with an argument string "tab:complete".
call the method rlcompleter.Completer with an argument imported_objects, use the complete field of the result as an argument for the call to the method readline.set_completer.
define lambda function that returns self.file.readline field, use it as an argument for property function, put the result in readline.
define lambda function that returns self.file.readlines field, use it as an argument for property function, put the result in readlines.
reason_phrase is None.
REASON_PHRASES is a dictionary containing 59 initial entries: 'CONTINUE' for 100, 'SWITCHING PROTOCOLS' for 101,
call the function sanitize_address with arguments addr and email_message.encoding, for every addr in return value of the function email_message.recipients, store the results in a recipients list.
call the method references_to_delete.setdefault with arguments: r.rel.to and an empty list, append to the result tuple with 2 entries: model and f.
references_to_delete is an empty dictionary.
regex is an empty string.
call the function force_text with arguments self and _regex, substitute the result for regex.
regex is an property object of this class, with _get_regex getter and _set_regex setter function.
call the re.compile function with 2 arguments: raw string "^(?:[a-z0-9\.\-]*)://(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\.)+",
call the function re.compile with 2 arguments regex, re.UNICODE and substitute the result for regex.
if words is true, substitute re_words for regex, if not substitute re_chars for regex.
substitute self._regex for regex.
call the function re.compile with 2 arguments, string '^%s/', where '%s' is replaced with language_code and re.UNICODE, substitute the result for regex_compiled.
call the function language_code_prefix_re.match with an argument path, substitute it for regex_match.
substitute self.regexes for regexes.
register is an instance of Library class.
substitute registry.register for register.
call the function register_serializer with 3 arguments: format, value under the format key of the BUILTIN_SERIALIZERS dictionary and serializers.
call the function register_serializer with 3 arguments: format, value under the format key of the settings.SERIALIZATION_MODULES dictionary and serializers.
substitute before_import_registry for register_to._registry.
get value under the 'register_to' key of the kwargs dictionary, substitute it for register_to.
call the function CheckRegistry, substitute the result for registry.
substitute field.rel.to with rel_model.
substitute field.rel.to for rel_model.
if second element of the i-th row of relations equals table_name, rel_to is string 'self',
get field.name from the obj, substitute it for related.
get field.name attribute of the obj, substitute it for related.
call the method related.natural_key, substitute the result for related.
evaluate the field.get_attname, use the result as the name of the obj attribute to get, substitute it for related_att.
relations is an empty dictionary.
call the method connection.introspection.get_relations with 2 arguments cursor, table_name and substitute the result for relations.
call the method path_rest.replace with arguments base_name and name, substitute the result for relative_dir.
call the function reloader with wrapped_main_func, args and kwargs as arguments.
substitute jython_reloader for reloader.
substitute python_reloader for reloader.
call the function reloader_thread.
decrement remaining by length of emitting.
if size is None substitute self._remaining for remaining, if not, substitute size for remaining.
substitute bits without the first element for remaining_bits.
substitute bits, without the first two elements, substitute the result for remaining_bits.
substitute complain for remove.
call the function allow_lazy with 2 arguments: remove_tags, six.text_type, substitute the result for remove_tags.
substitute RemovedInDjango19Warning for RemovedInNextVersionWarning.
renamed is boolean False.
renamed is boolean True.
renamed methods is a tuple containing 3 elements: '_get_memcache_timeout', 'get_backend_timeout' and RemovedInDjango19Warning.
renamed_methods is an tuple.
substitute self.context.render_context for render_context.
substitute CheckboxFieldRenderer for renderer.
remove entry under 'render' key of the kwargs dictionary and substitute it for renderer, if the key doesnt exists, renderer is None.
renderer is None.
substitute RadioFieldRenderer for renderer.
rendering_attrs is a list containing 3 strings: 'template_name', 'context_data' and '_post_render_callbacks'.
append list with 2 strings: '_request' and '_current_app' to SimpleTemplateResponse.rendering_attrs, substitute the result for rendering_attrs.
repeat is an integer 0
repeat is a random integer between 1 and the value entropy
get the value under the lang_code key of the _BROWSERS_DEPRECATED_LOCALES dictionary, substitute it for replacement.
append tuple with 2 elements: migration.app_label and migration.name to replaces.
extend replaces list with migration.replaces,
write it to self.stdout stream.   replaces is an empty list.
get the absolute path of the __file__, repo_dir is name of the directory two leveles above it.
and request_repr, respectively.   reporter is an instance of ExceptionReporter class, created with 3 arguments: request, is_email as boolean True,
substitute self._setupfunc for repr_attr.
substitute self._wrapped for repr_attr.
get the value under ch key of the ESCAPE_MAPPINGS dictionary, if it exists substitute it for representative, if not substitute ch for representative.
substitute resolver_match for request.resolver_match.
request is None.
_get_request is getter function for REQUEST attribute of this class.
substitute record.request for request.
call the self.request_class method with environ as an argument, substitute the result for request.
append string ".moves.urllib_request" to __name__, use it as an key to get the value from the sys.modules dictionary, substitute it for request.
substitute WSGIRequest for request_class.
call the method request_finished.connect with argument update_watch.
request_finished is a instance of a Signal class.
append mw_instance.process_request at the end of request_middleware.
request_middleware is an empty list.
request_queue_size is integer 10.
call the method filter.get_request_repr with an argument request, format string '\n{0}' with the result, substitute the result for request_repr.
request_repr is a string "unavailable".
request_started is a instance of a Signal class.
requires_system_checks is boolean False.
pulls out all strings marked for translation. It creates (or updates) a message    "file in the conf/locale (in the django tree) or locale (for projects and "   "applications) directory.\n\nYou must run this command with one of either the "   "--locale, --exclude or --all options.".    requires_system_checks is boolean False.
call the function flatten_result with an argument item, assign the result to res and args, respectively.
res is an empty string.
concatenate the string "\\x", the hexadecimal conversion of the leght of the bytearray of the variable sc and "\". Store the result in the string res
concatenate "\\x", the hexadecimal conversion of the leght of the array of bytes of sc and "\", and save the final string in res
res is the concatenation of the string "\\x", the hexadecimal value of the length of array of bytes of the variable tmp and the string ',' 
res is the sum of variables op1 and op2 modulo 128
call the function func with 2 arguments: unpacked list self.__args and unpacked dictionary self.__kw, substitute the result for res.
call the function self.func with an argument instance, substitute the result for res and value under the self.name key of the instance.__dict__ dictionary.
slice op from index 0 to 2, then assign the result to res
substitute subject elements from p-th to i-th index for res.
substitute first element of to_digits for res.
res is x bitwise xor y
left shift val2 the and operation between x and val1 and assign it to res1
assign the variable res1 the right shift of x bitwise and val1 and the variable val2
compute x bitwise and val1 and then right shift with val2 and assign the result to the variable res1
x shifted left by val2 and val1 and assign the result to res1
left shift the variable x by val2 then bitwise and with val1 then store in res1
res1 is x left shift by val2 bitwise and val1
assign the variable res1 left shift x by val2 bitwise and val1
perform the xor operation between x shifted left by val2 and val1 then assign the result to res1
res1 is x left shift by val2 bitwise xor val1
perform the xor operation between x shifted right by val2 and val1 and assign the result to res1
res1 is x bitwise and val1
assign the variable res2 variable t bitwise and val1
assign the variable res2 variable x bitwise and not val1
assign the variable res2 variable x and val1
assign the variable res2 variable not x bitwise and m
left shift res2 by max_bits times val2
right shift res2 by max_bits times val2
right shift res2 by max_bits plus val2
assign res2 the value of res2 left shift by max_bits minus val2
assign the variable res2 variable x bitwise and val1
assign the variable res2 variable x and val1
assign the variable res2 variable x modulus and val1
assign res2 left shift x by max_bits minus val2
res2 is equal to left shift x by max_bits minus val2
left shift x by max_bits divided by val2 and assign the result to res2
assign the variable res2 variable not x bitwise and val1
for every x in sequence of integers from 0 to 7.   RESET is a string '0'.
get the value 'reset_sequences' key of the options dictionary, if it exists substitute it for reset_sequences, otherwise reset_sequences is boolean True.
call the function reset_translations.
call the function resolve with arguments path and urlconf.
call the method self.get_resolved_arguments with an argument context, substitute the result for resolved_args and resolved_kwargs.
call the method self.get_resolved_arguments with context as an argument, substitute the result for resolved_args and resolved_kwargs.
append resolved_args to a list containing context element, substitute it for resolved_args.
resolved_args is an list with elements, return value of the method var.resolve with an argument context, for every var in self.args.
resolved_kwargs is dictionary with elements: return value of the method v.resolve called with an argument context, for k,
call the method resolved_path.append with an argument ns.
resolved_path is an empty list.
call the function get_ns_resolver with arguments ns_pattern and resolver, substitute the result for resolver.
call the function get_resolver with an argument urlconf, substitute the result for resolver.
call the method urlresolvers.RegexURLResolver with raw literal string '^/' and urlconf as the arguments, substitute the result for resolver.
call to the resolver.resolve method with request.path_info as an argument.
call the method resource.decode with an argument settings.FILE_CHARSET, substitute the result for resource.
call the function resource_string with 2 arguments app_config.name and pkg_name, substitute the result for resource.
resource_string is None.
as the arguments, substitute the result for response.   append the request to the end of the protected class member response._closable_objects.
substitute self.__class__ for response._handler_class.
call the method response.add_post_render_callback with _set_response_etag as argument.
called with 2 arguments: request and response.   call the method response.add_post_render_callback with an argument callback.
response.content is bytes empty string.
response.streaming_content is an empty list.
join the resulting sequence in a string with comma as separator, assign the string to cc.   substitute response dictionary value under the key 'Cache-Control' for cc.
substitute char '0' for the value under the 'Content-Length' key of the response dictionary.
create md5 hash from string response.content in hexadecimal format, surround the hash with double quotes,
sum return value of the function call time.time() and cache_timeout, use it as an argument for function call of http_date,
call the function http_date with no arguments, and substitute its return value
modify value at the key 'Location' of the dictionary response by applying function request.build_absolute_uri on it.
substitute this list for additional_headers.   join all of the elements of vary_headers and additional_headers in a string delimited by a comma,
substitute return value of call to the function _set_response_etag with response as an argument, for response.
call the callback function with request and dictionary argument param_dict as the arguments, substitute it for response.
call the function debug.technical_404_response with request and e as arguments, assign the result to response.
call the function func with request and response as arguments, assign the result to response.
with one entry 'status_code' is integer 400, as arguments.   call the http.HttpResponseBadRequest function, assign the result to the response.
call the method middleware.process_template_response with 2 arguments: request and response, substitute the result for response.
call the middleware_method with request, callback, callback_args and callback_kwargs as the arguments, substitute the result for response.
call the middleware_method with request and e as the arguments, substitute the result for response.
call the function middleware_method with the request and response as the arguments, assign the result to response.
call the function middleware_method with request and response as the arguments, substitute the result for response.
call the middleware_method with the request as an argument, substitute the result for response.
set response to None.
with name of the class type of the middleware_method instance, use it as the argument for call to the ValueError exception raise.   call the response.render() method and assign the return to the response.
with the name of the type of the self class instance of the middleware_method, raise the ValueError with the previous as the argument.   call the method self.apply_response_fixes with the request and response as the arguments, substitute the result for response.
status code set to integer 400, return the result.   call the method self.get_exception_response with the request, resolver and integer 400 as the arguments, substitute the result for response.
status_code' with value 403, and 'request with value request,   respectively use the previous as the arguments for the call to the logger.warning function.   call the method self.get_exception_response with request, resolver and integer 403 as the arguments, assign the result to response.
call the method self.get_exception_response with request, resolver and integer 404 as the arguments, assign the result to response.
call the self.get_response with request as the argument, substitute the result for response.
call the method self.handle_uncaught_exception with request, resolver and return value of the function sys.exec_info as the arguments.
call to the self.handle_uncaught_exception method with request, resolver and value of the evaluated function sys.exec_info,
append string ".moves.urllib_response" to __name__, use it as an key to get the value from the sys.modules dictionary, substitute it for response.
call the function view_func with 3 arguments: request, unpacked list args, unpacked dictionary kwargs, substitute the result for response.
call the function wrapped_callback with request, list or arguments callback_args and dictionary arguments callback_kwargs,
response_fixes is a list with  http.fix_location_header and http.conditional_content_removal as elements.
convert 'Set-Cookie' to a string and convert the return value of method c.output(header='') call to a string,
convert to k and v to strings for every k and v in return value of the response.item method, response_headers is a list containing all the above iteration elements.
call the method m.end, slice list rest from previous result as starting index to the end, substitute the result for rest.
substitute value for rest.
result is an empty list, upto is integer 0.
call the method copy.deepcopy with arguments self._choices and memo, substitute the result for result._choices.
append string '.' to result.
append a tuple with 2 entries lang and priority to result.
append ch to result.
instantiate a class Group with 2 arguments: string "%%(%s)s" formated with name, and name, append it to result.
instantiate a class Group with 2 arguments: string "%%(%s)s" formated with param, and None, append it to result.
instantiate a class Group with 2 arguments: string "%%(%s)s" formated with param, and param, append it to result.
call the method self.create_token with 2 arguments bit and in_tag, append the result to result.
call the method self.create_token with 3 arguments: last_bit, tuple with 2 elements: upto and sum of upto and length of last_bit,
call the method self.create_token with 3 arguments: self.template_string list elements from start index to end index,
call the method self.create_token with 3 arguments: self.template_string list elements from upto index to start index,
create a list with count decremented by 1 number of last element of result elements, extend list result with it.
for every x in self.fields call the method x.__deepcopy__ with an argument memo, put the result into a tuple, substitute it for result.fields.
substitute key for result.key.
substitute self for result.parent.
remove the first element from result.
substitute result.queryset for result.queryset.
call the method result.setFormatter with an argument formatter.
call function _checkLevel with an argument level, use the result as an argument for the method result.setLevel.
call the method result.setlist with 2 arguments: return value of the function copy.deepcopy called with 2 arguments: key and memo,
call the method result.setlist with the arguments: key and value.
sort result in reversed order by the key as lambda function with an argument k and reeturn value second element of k.
substitute elements of self.validators list for result.validators.
call the method copy.deepcopy with arguments self.widget and memo, substitute the result for result.widget.
last element of result is an instance of Choice class, created with an argument list with 2 elements: None and last element of result.
increment i-th element of result by piece.
call the function _bin_to_long with an argument u perform bitwise exclusive OR with 2 operands, previous result an result,
append ':' and ipv4_address to result.
call avoid_wrapping function with name2 modulus count2 as argument, call the ugettext with ', ' as argument, add previous 2 results, increment variable result by it.
second 2 elements of seventh element of hextets converted into hexadecimal number,   first 2 elements of eight element of hextets converted into hexadecimal number,   second 2 elements of eight element of hextets converted into hexadecimal number.   join first 5 elements of hextets into a string, separated by ':', substitute the result for result.
join elements of hextets into a string, separated with ':', substitute it for result.
result is the concatenation of the string "\\x" and the hexadecimal value of the length of array of bytes of the variable sc
result is an tuple with 2 elements: template and return value of the function make_origin called with 4 arguments: display_name,  loader, name and dirs.
result is a list containing an empty string.
result is an empty list.
result is an integer 0.
use the remainder of the division of name by count as the argument for the call to the avoid_wrapping function, store the result in result.
call the method block.nodelist.render with an argument context, substitute the result for result.
called with an argument k.   call the function c with an argument unpacked dictionary kwargs, substitute the result for result.
call the function cache_get with 2 arguments: key and root, substitute the result for result.
call the method copy.copy with an argument self, substitute the result for result.
substitute the '%s' with table and list containing key, respectively.   fetch one entry from the database that cursor points at, substitute it for the result.
call the method datetime.datetime.combine with unpacked list data_list, substitute the result for result.
call the function datetime.datetime with 3 arguments: value.year, value.month and value.day, substitute the result for result.
call the method MONTHS.index with 6 arguments: year, month, day, hour, min and sec, substitute the result for result.
call the function factory with an argument unpacked dictionary kwargs, substitute the result for result.
call the function force_text with an argument message, return the result.
call the function func with an argument unpacked list args, substitute the result for result.
get translation_function attribute of the object _default, call the result with an argument eol_message, substitute the result for result.
get translation_function attribute of the object t, call the result with an argument eol_message, substitute the result for result.
call the method handler.handle_raw_input with 5 arguments: self._input_data, self._meta, self._content_length, self._boundary,
call the method logging.Filter with an argument name, substitute the result for result.
call the method logging.Formatter with 2 arguments: fmt and dfmt, substitute the result for result.
call the method middleware.process_exception with 2 arguments: request and e, substitute the result for result.
call the method middleware.process_request with an argument request, substitute the result for result.
call the method middleware.process_view with 4 arguments: request, view_func, args and kwargs, substitute the result for result.
substitute new_result for result.
result is None.
append list with element inner to list containing first start elements of result, substitute it for result.
call the method self.__class__ with 3 arguments: an empty string, mutable is boolean True, encoding is self.encoding, substitute the result for result.
call the method self.__class__, substitute the result for result.
call the method self._resolve, substitute the result for result.
substitute first size elements of self.buffer for result.
add self.buffer and self._read_limited method return value together, store it in result.
call the method self.read_limited with length of self.buffer subtracted from size as argument, add result to self.buffer, store it in result.
call the method self.configurator.convert with an argument value, substitute the result for result.
call the method self.configurator.convert with an argument value.
call the method self.configurator.convert with an arugment value, substitute the result for result.
call the method self.configure_custom with an argument config, substitute the result for result.
get the value under the key key of the self.find_template_cache dictionary, substitute it for result.
call the method self.nodelist.render with an argument context, substitute the result for result.
read size number of bytes from self.stream stream, store the result in the result.
result is an instance of SimpleLazyObject class, created with an argument self._setupfunc.
round up radio, convert it to an integer and the convert it to a string and substitute the result for result.
call the method __deepcopy__ with an argument memo from the base class of the class ChoiceField, substitute the result for result.
call the method __deepcopy__ from the base class of the class ChoiceField, with an argument memo, substitute the result for result.
call the method to_python with an argument value from the base class of the DateTimeField class, substitute the result for result.
call the method __deepcopy__ with an argument memo, from the base class of the class MultiValueField, substitute the result for result.
call the method pop from the base class of the class SortedDict, with 2 arguments k and unpacked list args,
call the method popitem from the base class of the class SortedDict, substitute the result for result.
call the unsign method from the base class of the TimestampSigner class with an argument value, substitute the result for result.
get type of self, call it and substitute the result for result.
call the function ugettext with an argument msg_with_ctxt, substitute the result for result.
string created by concatenating context, CONTEXT_SEPARATOR and plural and number.   call the function ungettext with unpacked dictionary msgs_with_ctxt, substitute the result for result.
call the function ungettext with 3 arguments: singular, plural and number, substitute the result for result.
call the function user_function with 2 arguments: unpacked list args and unpacked dictionary kwds, substitute the result for result.
call the function user_function with 2 arguments unpacked list args and unpacked dictionary kwds, substitute the result for result.
perform bitwise exclusive OR on 2 operands integer representation of x and integer representation of y,
perform bitwise exclusive OR on 2 operands x and y, perform bitwise OR with 2 operands: previous result and result, substitute the result for result.
append param to i-th element of result_args.
result_args is a list containing an empty list.
substitute new_args for result_args.
call the function predicate with an argument item, use it as a key to get results dictionary value, append item to it.
results is a tuple with 2 elements, 2 empty lists.
substitute _ for ret.
join elements of self.vals into a bytes string, substitute the result for ret.
all the function fcntl.flock with return value of the _fd(f) function and fcntl.LOCK_UN as arguments, substitute the result for ret.
call the function fcntl.flock with return value of the _fd(f) function and flags as arguments, substitute the result for ret.
call the LockFileEx function with 6 arguments: hfile, flags, integer 0, integer 0, hexadecimal value FFFF0000, return value of the byref function called with argument overlapped, substitute the result for ret.
call the method self._cache.get_multi with argument new_keys, substitute the result for ret.
call the LockFileEx function with 5 arguments: hfile, integer 0, integer 0, hexadecimal value FFFF0000, return value of the byref function called with argument overlapped, substitute the result for ret.
subtract length of hextet from 4, create a string with previous result number of character '0', append hextet to it,
ret_ip is an empty list.
return nothing.
return.
return nothing,
self._files is an instance of class MultiValueDict.   return nothing.
return from the function
call the function _ with an argument string 'a.m.', return the result.
call the function _ with an argument string 'AM', return the result.
call the function _ with an argument string 'midnight', return the result.
call the function _ with an argument string 'noon', return the result.
call the function _ with an argument string 'p.m.', return the result.
call the function _ with an argument string 'PM', return the result.
call the function __proxy__ with 2 arguments: args and kw, return the result.
return __wrapper__.
return _cached_filenames.
return an instance of _CacheInfo class, created with 4 arguments: value under the HITS key of the stats dictionary,
unpacked dictionary created with elements of morekwargs dictionary through the kwargs mapping, return the result.   return _curried.
call the function _curried_func with 2 arguments: list moreargs appended to args and unpacked,
return _dec.
return _decorator.
return _default.
call the method _entity_re.sub with 2 arguments: _replace_entity and text, return the result.
call the function _generate_cache_key with request, method, headerlist, key_prefix as arguments, return the result.
call the function _generate_cache_key with request, request.method, an empty list and key_prefix as arguments, return the result.
call the function _generate_cache_key with request, request.method, headerlist, key_prefix as arguments, return the result.
call the function get_current_timezone, use the result as an argument for the call to the function _get_timezone_name, return the result.
call the function get_default_timezone, use the result as an argument for the call to the function _get_timezone_name, return the result.
return instance of _HashedSeq class, created with an argument key.
return value of method url.hexdigest(), return value of method ctx.hexdigest, respectively, substitute it for cache_key.   call the function _i18n_cache_key_suffix with request and cache_key as arguments, return the result.
to the function url.hexdigest(), respectively, substitute it for cache_key.   call the function _i18n_cache_key_suffix with request and cache_key as arguments, return the result.
call the function _import_module with an argument self.mod, return the result.
return _localtime.
substitute the result for result.   call the function _long_to_bin with 2 arguments: result and hex_format_string, return the result.
return _make_decorator.
get the value under the format key of the _serializers dictionary, return the Deserializer filed of the result.
get the value under the format key of the _serializers dictionary, return the Serializer filed of the result.
call the function _slugify with an argument value, return the result.
return _standard_context_processors.
return the value under the is_dst key of the _time.tzname dictionary.
call the method self._isdst with an argument dt, use it as an key to get the value from the _time.tzname dictionary, return it.
call the function _trans.activate with an argument language, return the result.
call the function _trans.check_for_language with an argument lang_code, return the result.
call the function _trans.deactivate, return the result.
call the function _trans.deactivate_all, return the result.
call the function _trans.get_language, return the result.
call the function _trans.get_language_bidi, return the result.
call the function _trans.get_language_from_path with an argument path, return the result.
call the function _trans.get_language_from_request with 2 arguments: request and check_path, return the result.
call the method _trans.gettext with an argument message.
call the method _trans.gettext_noop with an argument message.
call the method _trans.ngettext with 3 arguments singular, plural and number.
call the method _trans.npgettext with 4 arguments context, singular, plural and number.
call the method _trans.pgettext with 2 arguments context and message.
call the function _trans.templatize with 2 arguments: src and origin, return the result.
call the function _trans.to_locale with an argument language, return the result.
call the method _trans.gettext_noop with an argument message.
call the method _trans.ungettext with 3 arguments singular, plural and number.
return _translations dictionary value, under the language key.
return _wrapped_view.
return _wrapper.
return integer -1.
join elements of extra_classes into a string separated by whitespaces, return it.
and truncate, return the result.   return elements of words joined in a string, separated with whitespaces.
join template_dirs elements into a string, separated by '|', use it as an argument for the call to the function force_bytes,
convert the result into a lowercase, append it to ret_ip.   join elements of ret_ip into a string separated with ':', return it.
return an empty string.
substitute the result for value under the self.target_var key of the context dictionary.   return an empty string.
return an empty string,
key for 'grouper' and val converted into a list for 'list', for every key and val in result of the function groupby,   called with 2 arguments: obj_list and lambda function with an argument obj and return value as a result of the function,   self.resolve_expression called with 2 arguments obj and context.   return an empty string,
return an empty string and an empty string.
call the function _generator, join the result into a string, return the result.
join elements of base36 into a string, return it.
join elements of c into a string, return it.
4 for 'h', 4 for 'i', 4 for 'j', 5 for 'k', 5 for 'l', 5 for 'm', 6 for 'n', 6 for 'o', 6 for 'p', 7 for 'q', 7 for 'r', 7 for 'r',   7 for 's', 7 for 't', 8 for 't', 8 for 'u', 8 for 'v', 9 for 'w', 9 for 'x', 9 for 'y' and 9 for 'z'.   for every c in phone converted to lowercase, join the value under the c key of the char2number dictionary into a string, return it.
for every s in strings, call the function force_text with an argument s, join the results in a string, return the result.
join elements of output into a string, return the result.
join elements of pieces into a string, return it.
and settings.SECRET_KEY, call on it method encode with an argument string 'utf-8',   use the result as an argument for the call to the method hashlib.sha256, call the method digest on the result,   use the result as an argument for the call to the function random.seed.   call the function random.choice with an argument allowed_chars, for every i in range of integers from 0 to lengths,
join rendered_widgets into a string, return it.
join elements of self.fed into a string, return the result.
join elements of words into a string, return it.
return a string '"%s"' formated with etag, in which every occurrence of '\\' is replaced with '\\\\' and every occurrence of '"',
for every c in self.children.   return string '(%s: %s)', formated with self.connector and string created by joining c into a string, separated by ', ',
return string '(NOT (%s: %s))', formated with self.connector and string created by joining c into a string, separated by ', ',
for every k and v in result of the function six.iteritems,called with an argument self,
for every e in self, append convert e to an string and append it to string '* ',
join elements of output into a string, separated by newline characters, return it.
join output into a string, separated by newline characters, return it.
join elements of the output into a string, separated by newlies, return the string.
join all the results into a string separated by newlines, append the result to output.   join elements of output into a string, separated by newline characters, return the result.
join elements of output in a string, separated by newlines, return it.
join elements of output into a string, separated with newlines, return the result.
call the sql_flush function with self.style, connections under the key with the value of options dictionary under the 'database' key,
join statements into a string, separated by newlines, return it.
join the list of statements into a string separated by new lines, return it.
join statements in a string separated by newline, return the result.
join statements into a string, separated by newline characters, return it.
join usage elements in a string separated by newline characters, return it.
format the string  '<p>%s</p>' with the result, for every p in paras, substitute list of results for paras.   join elements of paras into a string separated with '\n\n', return the result.
format string '\x1b[%sm' with RESET, return the result.
called with arguments v and self.encoding, extend the output with the result.   join elements of the output into a string, separated with '&', return the result.
call the method calendar.monthrange with 2 arguments: self.data.year and self.data.month,
return a string '%02d' formated with self.data.day.
return a string '%02d' formated with self.data.minute.
return a string '%02d' formated with self.data.month.
return a string '%02d' formated with self.data.second.
return a string '%02d' formated with the result of the function self.g.
return a string '%06d' formated with self.data.microsecond.
return a string '%s %s %s' formated with 3 elements: result of the function force_text called with an argument i,
return a string '%02d' formated with self.data.month.
substitute '%s' in string '%s_%s' with id_ and first_select, return it.
convert if into a string append to it a string '_month', return the result.
return a string '%s-%s-%s GMT', formated with: first 7 elements of rfcdate, elements of rfcdate from 8-th to the 11-th index,
substitute '%s' in string '%s-%s-%s' with y,m and d, return the result.
substitute '%s' in string '%s-%s-%s' with y, m and d, return the result.
substitute '%s' in string '%s-%s' with self.prefix and field_name and return it, if self.prefix is true, if not return field_name.
replace '%s' in sting '%s-%s' with self.prefix and index, return the result.
convert key_prefix, version and key into strings, concatenate them respectively, with character ':' as delimiter, return the result.
return a string '%s:%s' formated with the results of the functions self.g and self.i, respectivley.
in the string '%s. You passed in %r (%s)' replace every %s with original and type of the object self.obj as strings, respectively,
return a string '%s...' formated with elements of x up to the index equal to the maximum value between integer 0 and 3 subtracted from limit.
return a string '%s(%s)' formated with self.__class__.__name__ and dictreprs.
join usage and self.help into a string, separated by 2 new line characters, return it.
join elements of code_list in a string, separated by ';', format string '\x1b[%sm' with it, append text to the result if exists,
if the value under the 'QUERY_STRING' key of the self.META dictionary is true, call the function iri_to_uri,
append truncate to text, return the result.
return string first element of t, '=', second element of t.
return a string '<%s: %r>', format it with __name__ field of the self class and repr_attr.
return an string '<ExtendsNode: extends %s>', where '%s' is replaced with self.parent_name.token.
return the string '<Page %s of %s>', with occurrences of '%s' replaced by self.number and self.paginator.num_pages, respectively.
return an string '0'.
return string '0'.
return string '1'.
return string 'form'.
return string 'https'.
return string 'https' if value under the "HTTPS" key of the os.environ dictionary equals string 'on', if not return 'http'.
return string 'initial-%s' where '%s' is replaced with return value of the self.add_prefix method called with an argument field_name.
return string 'nd'.
return string 'NOTPROVIDED'.
return a string 'Raw content'.
return string 'rd'.
return string 'st'.
return string 'StopUpload: Consume request data, then halt.'.
return string 'StopUpload: Halt current upload.'.
string '%Y-%m-%d', convert the result into a string and append it to ',', substitute the result for d.   format string 'tag:%s%s:%s/%s' with bits.hostname, d, bits.path and bits.fragment, return it.
return string 'th'.
return the string 'ValidationError(%s)', replace '%s' with self.
if dirname is true, return dirname converted to a string and surounded by single quotes, if not return string 'absolute path'.
return an empty string.
join inner_text elements into a string.
convert x into a string and append it to a list, substitute the resulting list for out.   join elements of out into a string, separated with whitespaces, append ')' to it, append the result to '(', return it.
return string "(%s %r)", replace '%s' with self.if and '%r' with self.value.
return string "[Didn't have permission to include file]".
return an string "[Included template had syntax error: %s]", where '%s' is replaced with e.
get the unicode representation of result of the method match.group called with an integer 1, format with in a string "\\u%04x",
replace all '%s' from string "%s: %s%s%s" with values of obj, id, self.msg and hint, respectively, return the result.
return a string "%s.%s" formated with first dot package elements and name.
return a string "%s%02d%02d" formated with sign, floored result of the division of seconds by integer 3000,
return an string "<%s: %r>", where '%s' is replaced with self.__class__.__name__ and self.var, respectively.
return a string "<%s: %s>" formated with self.__class__.__name__,
return string "<%s: %s>", formated with self.__class__.__name__ and self.
substitute '%s' in string '<%s: %s>' with self.__class__.__name__ and self, if exists, or string 'None' if it doesnt, return it.
in the string "<%s: level=%r, msg=%r, hint=%r, obj=%r, id=%r>", replace '%s' with the name of the type of this class instance,
replace '%s' in the string "<BaseConverter: base%s (%s)>" with length of self.digits and self.digits, respectively, return the string.
return string "<Block Node: %s. Contents: %r>", where '%s' is replaced with self.name and '%r' with self.nodelist.
return a string "<DeserializedObject: %s.%s(pk=%s)>", where '%s' are replaced with self.object._meta.app_label,
return a string "<DjangoTranslation lang:%s>", where '%s' is replaced with self.__language.
return an string "<For Node: for %s in %s, tail_len: %d%s>", substitute '%s' with elements of self.loopvars joined into a string,
return an string "<IfEqualNode>".
return an string "<IfNode>".
join self.dirpath and self.file in a string, substitute with it '%s' in string "<TranslatableFile: %s>", return the result.
return a string "<UTC>".
return a string "<Variable Node: %s>", substitute '%s' with self.filter_expression.
return a string "<WithNode>"
for every c in choices split into words, concatenate prefix, result of the function re.escape with an argument c and suffix,
return an string "Error in formatting: %s", replace '%s' with result of the function force_text,
in the string "ResolverMatch(func=%s, args=%s, kwargs=%s, url_name=%s, app_name=%s, namespaces=%s)", replace all the occurrences of:
return a string "UTC".
return a tuple wit 2 elements: _lazy_proxy_unpickle and tuple with 3 elements: func, self.__args, self.__kw and resultclasses.
call the function format_html_join twice, first time with 3 elements: an empty string, string ' {0}="{1}"'
evaluate the logical expression, if other is an instance of RegexValidator and self.regex.pattern equals to other.regex.pattern,
return a tuple containing 3 entries: output, result of the function force_text, called with 3 arguments: errors,
return a tuple with 3 elements: if path is true, path, in not, a string '%s.%s' formated with obj.__class__.__module__,
return a string '<%s token: "%s...">' with '%s', replace '%s' with token_name and 20 self.contents elements with every newline deleted.
call the function six.text_type with an argument arg, append the result to '%', format the previous with value, return the result.
use the result as an key to get the value from the LUHN_ODD_LOOKUP dictionary, sum all the results and substitute the result for odds.   sum evens and odds, if the result is divisible by integer 10, return boolean True, if not return boolean False.
if pk.editable is true, or pk.auto_created is true or pk is an instance of AutoField class, or if pk.rel is true,
if url_info.netloc is false or url_info.netloc equals host, and if url_info.scheme is false or url_info.scheme equals,
return a tuple with 2 elements: integer 0 and second element of k.
return a tuple with 2 elements: integers 1 and 0.
return a tuple with 3 elements: copyreg._reconstructor, tuple with 3 elements: self.__class__, object and None,
only if form_class is not None, and if form_class has an attribute '_meta' and form_class._meta.fields is not None,
read file fp, call the method decode on the result with an argument settings.FILE_CHARSET, return tuple containing 2 elements,
sum length of self.quertset and integer 1 if self.field.empty_label is not None, or integer 0 if not, return the result.
convert byte to its integer representation, return all of the results for every byte in buf.
if file path of src and dst files are the same, return boolean True, otherwise return boolean False.
if p2.scheme, p2.hostname and p2.port equals p1.scheme, p1.hostname and p1.port, respectively, return boolean True, otherwise return boolean False.
return tuple containing 3 elements: RAW, an empty dictionary and stream.
return a tuple with 2 elements: resource and string 'egg:%s:%s', where '%s' is replaced with app_config.name and pkg_name, respective.
if ret equals to integer 0, return boolean True, otherwise return boolean False.
return a tuple with 3 elements: self.__newobj__, tuple with an element self.__class__ and result of the method self.__getstate__.
call the method self.data.weekday, increment the result by an integer 1, divide it with integer 7, return the reminder of the division.
return a tuple with 2 elements: result of the method self.field.prepare_value called with an argument obj,
return the element at the index index of the tuple containing 3 elements: self.func, self.args and self.kwargs.
decrement self.number by one, multiply it by self.paginator.per_page, increment the result by one, return it.
call the function make_origin with 4 arguments: display_name, loader, name and dirs, return a tuple containing 2 elements:
return first element of t converted to lowercase and second element of t, as a tuple.
return first element of t converted to lowercase and boolean True, as a tuple.
return n left shift by rotations bitwise and mask_value or n right shift by width minus rotations 
return n left shift by mask_value xor n right shift by rotations 
return n left shift by mask_value or n right shift by rotations 
return n right shift by rotations bitwise and not n left shift by width multiplied by rotations and mask_value
return n left shift by rotations xor mask_value
return n left shift by rotations xor val1
return n right shift by rotations bitwise or with the result of n left shift by width bitwise and mask_value
call the Warning function with 4 arguments: string "MIDDLEWARE_CLASSES is not set.", hint tuple containing one string,
call the Warning function with 3 arguments: hint tuple containing one string, Django 1.6 introduced a new default test runner.
return a list containing an empty string and a list containing an empty list.
return a list with 5 elements: strings 'parse', 'error', 'request', 'response' and 'robotparser'.
return the list, containing 4 elements: an empty string, string "    class Meta:", string "        managed = False",
return a list with an element tuple with 2 elements: an empty string and an empty list.
put a tuple with 2 elements: k and value under k key of self dictionary into a list, for every k in self.keyOrder,
return an empty list.
return a list with an element etag_str.
for every f in return value of the os.listdir function called with an argument command_dir, append f without 3 last elements to a list, only if f doesnt start with character '_' and doesnt ends with string '.py', return the resulting list.
for field in self if field.is_hidden is true, append field to a list, return the resulting list.
for field in self if field.is_hidden is false, append field to a list, return the resulting list.
return list with 2 elements: first_item and second_item, and old_style_list.
return list with an element first_item, and boolean True.
where '%s' is replaced with self.__class__.__name__.   for form in self.forms append form.cleaned_data to a list, return the resulting list.
return a list containing results of the function format_html called with 2 arguments:
for the call to the function upath, get the directory name of the resulting system path, join the result and string 'locale',   into a valid file path, substitute it for globalpath.   append settings.LOCALE_PATHS converted into a list to a list containing an element globalpath, return it.
append k into a list for every k and v in return value of the six.iteritems function with an argument _serializers,
called with n.getAttribute('pk') method.   call the m2m_convert function with an argument c, for every c in return value of the method node.getElementsByTagName,
for every obj in value call the function mark_safe with an argument result of the function force_text called with an argument obj,
called with the argument microseconds set to integer 0, on the result of the method value.time.   return list containing 2 elements: None and None.
for i in self._ordering append to a list value under the first element of i key of the self.forms dictionary, return resulting list.
for i in self._deleted_form_indexes append i-th element of self.forms into a list, return the resulting list.
append value under k key of self dictionary to a list, for every k in self.keyOrder, return the result.
for every val in value call the function smart_text with an argument val, return the results in a lit.
return a list containing first element of source and a list containing params.
call the method prepare_value from the base class of the class ModelMultipleChoiceField, with an argument v,
return a list containing return values of the function to_py called with an argument val, for every val in value.
return a list containing 2 elements: return value of the value.date method and return value of the replace method,
for every i and widget in enumerated iterable self.widgets, call the function widget.value_from_datadict with 3 arguments: data,
get the value under the value key of a dictionary with 6 entries: boolean True for '2', boolean True for boolean True,
return an dictionary containing 1 entry: return value of the function _get_val for 'csrf_token'.
return an dictionary containing 1 entry: settings.MEDIA_URL for 'MEDIA_URL'.
return an dictionary containing 1 entry: request for 'request'.
return an dictionary containing 1 entry: settings.STATIC_URL for 'STATIC_URL'.
return an dictionary containing 1 entry: return value of the function timezone.get_current_timezone_name for 'TIME_ZONE'.
return a dictionary with 2 elements: self._version for "version" and "http://www.w3.org/2005/Atom" for "xmlns:atom".
return a dictionary with 2 entries: value under the 'language' key of the self.feed dictionary for "xml:lang",
return a dictionary with an entry: self.ns for "xmlns".
return an empty dictionary.
return is empty dictionary.
return a dictionary generated with an expression, return value of the method e.as_data for f,
return integer 0.
return an integer 0.
return integer 0 and ch2.
return integer 1.
return integer 1 and ch2.
bitwise shift integer 1 to the left by 31 spaces, return the result.
return integer 12.
return 2 to the power of n minus 1 
return 2 to the power of n minus 3
return 2 to the power of n and minus 10
return 2 to the power of n and subtract 4
if for all attr in list of attributes 'level', 'msg', 'hint', 'obj' and 'id', self and other have the same attribute attr,
for every w in self.widgets, if all elements w.is_hidden are true, return boolean True, otherwise return boolean False.
if "__call__" is contained in klass.__dict__ for any klass in __mro__ field of the obj class, return boolean True, otherwise return False.
for every form in self call the method form.has_changed if any of the results evaluates to true, return boolean True,
called with arguments: filename and pattern.   call the function ignore with an argument pattern, for every pattern in ignore_patterns,
if any element of self.dicts is true, return boolean True, otherwise return boolean False.
if any w.needs_multipart_form for every w in self.widgets is true, return boolean True, if not return boolean False.
call the method apps.get_model with an argument model_identifier.
call the method apps.get_model with an argument model_identifier, return the result.
return arg.
return args and kwargs.
substitute the result for args and kwargs.   return an instance of AssignmentNode class created with 4 arguments: takes_context, args, kwargs and target_var.
return attachment.
and third element of the function sys.exc_info result.   return attr.
return attrs.
return an instance of AutoEscapeControlNode with 2 arguments: boolean exception arg equals to string 'on', and nodelist.
call the function ugettext with '0 minutes' as argument, use the result as the argument for the call to the avoid_wrapping function, return the result.
substitute the result for value.   call the function avoid_wrapping with an argument value, return the result.
filesize_number_format with result of division of bytes by PB as an argument, substitute the result for value.   call the function avoid_wrapping with an argument value, return the result.
for every arg in s, evaluate the function force_bytes for the arguments arg, encoding, strings_only and errors,
return empty bytes string.
join self._container elements into a string, return it.
substitute the results in a list for T.   join elements of T in a bytes string, append first r elements of result of the call to the function F with an argument l to it,
and string 'ascii' and call the function to_bytes with 2 arguments: value and string 'latin-1',   join the previous 2 results into a string, separated by ': ', append it to a list, substitute the resulting list for headers.   join headers into a string, separated by string '\r\n'.
call the salted_hmac with 3 arguments: salt, value and key, call the digest method on the result,
evaluate the function backend_cls with location and params as arguments, return the result.
return base.
return base and ext.
call the method base.DeserializedObject with arguments obj and m2m_data, return the result.
if base_lang is contained in settings.LANGUAGES_BIDI, return boolean True, if not, return boolean False.
left justify string s in a field of width equal to the sum of length of s and reminder of the division of length of s by integer 4,
call the method base64.urlsafe_b64decode with sum of s and pad as argument.
call the method base64.urlsafe_b64encode with an argument s, strip the result of the bytes string '\n=' from the right, return it.
call the method base64.urlsafe_b64encode with an argument s, on the result call the strip function with '=' as the argument, return the result.
call the method baseconv.base62.encode with result of the time.time function converted to an integer, as an argument, return the result.
format string hex_format_string with x, call the method encode on the result with an argument string 'ascii',
return the first element of bits and an empty string.
return an instance of a BlockNode class, created with 2 arguments: block_name and nodelist.
convert initial and data into boolean, if they are not equal return boolean True, if they are return boolean False.
convert ret to a boolean, return it.
convert self.changed_data into boolean, return it.
convert self.children into an boolean, return it.
convert self.dict into boolean, return the result.
convert self.name into an boolean, return it.
substitute value for value.   return value converted into a boolean.
unpacked list args2 and unpacked dictionary kwargs2, return the result.   call the function bound_func with 2 arguments: unpacked list args and unpacked dictionary kwargs, return the result.
return an instance of BoundField class, created with arguments self, field and name.
call the method build_request_repr with an argument self, return the result.
call the function bytes with an argument tuple with an element i, return the result.
call the function func with 2 arguments: unpacked list self.__args and unpacked dictionary self.__kw,
evaluate the function bytes with the argument s, and return the result.
call the function bytes with an argument self, divide the result with rhs and return the reminder of the division.
call the method value.encode with an argument self._charset, use the result as an argument for the call to the bytes function,
call the function bytes with an argument value, return the result.
return cache.
reuturn cache.
get the value under the mem_args key of the cache dictionary, return it.
in the resulting string replace all occurrences of ' ' with '_' and append it to the end of cache_key.   return cache_key.
return cached.
if value under the DEFAULT_CACHE_ALIAS key of caches dictionary is not equal to other, return boolean True, otherwise return False.
if value under the DEFAULT_CACHE_ALIAS key of caches dictionary equals to other, return boolean True, otherwise return False.
call the method calendar.isleap with an argument self.data.year, return the result.
call the method result.utctimetuple, use the result as an argument for the call to the method calendar.timegm, return the result.
return callback and a empty string.
and param_dict, respectively.   evaluate the function callback with request and dictionary of parameters param_dict as the arguments, return the result.
return callback split into two lists at the dot index, without the element at the dot index.
mapped with a function k, for every k and v in return value of the method candidate_subs.items.   format candidate_pat with candidate_subs, return the result.
return the result of the call to the function chain, with an argument unpacked list, containing the result of the function,
return changeset.
return check.
return chunk.
return last rollback elements of chunk.
return first end elements of list chunk.
call the function clean_ipv6_address with arguments value and self.unpack_ipv4, return the result.
return client.
where '%s' is replaced with filename.   return cls.
return cls.
call the method cls.__new__ with 2 arguments: cls and unpacked list args.
call the function cls with 8 arguments: date.year, date.month, date.day, time.hour, time.minute, time.second, time.microsecond,
call the method cls with 3 arguments: value under the 'filename' key of file_dict, value under the 'content' key of file_dict,
return code.
name appended to string '_', as the name of the attribute to get from other object, or if the previous doesnt exist, None.   return combined.
call the command.execute method with arguments: unpacked list args and unpacked dictionary defaults, return the result.
return commands.
return an instance of CommentNode class.
return compile_function.
call the method compiled_parent._render with an argument context, return the result.
for every subject, message, sender and recipient in datatuple, store the results in the messages list.   return evaluated result of the method connection.send_messages with messages as argument.
return content.
return context.
return context.render_context.
return an instance of Context class, created with an argument context.
return value under the 'forloop' key of the context dictionary.
return context_extras.
instantiate class ContextDict with 3 arguments: self, unpacked list args and unpacked dictionary kwargs, return it.
return cookiedict.
call the method copy.copy with an argument self, return the result.
call the method copy.deepcopy with 2 arguments: self._wrapped and memo, return the result.
database set to connection.alias, skip_validation set to boolean True, app_label set to app_label and hide_empty set to boolean True.   return created_models
return an instance of CsrfTokenNode class.
return current.
substitute the '%s' with table and list containing return value of the method call ops.value_to_db_datetime with argument now on the object under the db key of connections dictionary, respectively.   if exists return next entry from the database that cursor points at.
return d.
call the object d with arguments stream_or_string and unpacked dictionary options, return the result.
return value under the key key of d dictionary.
substitute it for value under the 'pk' key of data dictionary.   return data.
return data.
get the name key of the data dictionary, if the key exists return it, if not return None.
get the value under the name key of the data dictionary, return it, if the previous doesnt exists, return None.
return value under the name key of the data dictionary, if it doesnt exists, return None.
get the value under the name key of the data dictionary, if it exists return it, if not return None.
call the method data.getlist with an argument name, return the result.
if data_set is not equal to initial_set, return boolean True, otherwise return boolean False.
for every value in data.   if data_set is not equal to initial_set return boolean True, otherwise return boolean False.
call the function data with 3 arguments: d.year, d.month and d.day, return the result.
call the function date with 2 arguments: result of the call to the function datetime.now with an argument tz set to tzinfo,
call the function data with 3 arguments: self.year, self.month and self.day, return the result.
call the function date_format with 2 arguments: value, string 'DATETIME_FORMAT' and use_l10n as use_l10n, return the result.
call the function date_format with 2 arguments: value and use_l10n as use_l10n, return the result.
call the method date_value.strftime with an argument input_format, return the result.
call the function dateformat.format with 2 arguments: value and result of the function get_format called with 2 arguments:
call the function dateformat.time_format with 2 arguments: value and result of the function get_format called with 2 arguments:
for every k and v in the previous result, add a key into a dictionary: v converted to an integer for k,   substitute the resulting dictionary for kw.   call the method datetime.date with an argument unpacked dictionary kw, return the result.
call the method datetime.datetime.strptime with 2 arguments: result of the function force_str called with an argument value,
call the method datetime.datetime.strptime with 2 arguments: result of the function force_str called with an argument value,
call the method datetime.datetime.strptime with 2 arguments: result of the function force_str called with an argument value,
call the method datetime.datetime with an argument unpacked dictionary kw, return the result.
call the function self.path with argument name, use the result as an argument for the call to the function os.path.getatime,
call the function self.path with argument name, use the result as an argument for the call to the function os.path.getctime,
call the function self.path with argument name, use the result as an argument for the call to the function os.path.getmtime,
call the method datetime.now, return the result.
called with an argument kw, only if v is not None, substitute the result for kw.   call the method datetime.time with an argument unpacked dictionary kw, return the result.
call the method datetime.utcnow, on the result call the method replace with an argument tzinfo set to utc, return the result.
call the function datetime with an argument unpacked list kw, return the result.
evaluate debug.technical_500_response with request and list of arguments exec_info, return the result.
evaluate the function debug.technical_500_response with request, evaluated value of function sys.exc_info as a list,
return an instance of DebugNode class.
return an instance of DebugNodeList class.
return an instance of DebugVariableNode, created with an argument contents.
return dec.
call the function dec with an argument func, return the result.
return decorating_function.
return decorator.
call the function decorator with 2 arugments: unpacked list args and unpacked dictionary kwargs, return the result.
return default.
substitute the '%s' with table and list containing key, respectively.   return default.
return default,
return default_key_func.
return the instance of DefusedExpatParser class.
delete the attribute name from the cache dictionary under the DEFAULT_CACHE_ALIAS key.
call the method df.format with an argument format_string, return the result.
return dictionary created out of tuple elements k and printable representation of v,
return dictionary created with tuples with 2 elements: key and value under the key key of self dictionary, for every key in self.
convert object self to a dictionary, return it.
call the method dict_.getlist with an argument key, return the result.
return value under key key of dict_ dictionary.
return directories and files.
use the result as an argument for the call to the upath function, for every d in dirs, append the results into a list,   substitute the resulting list for dirs.   return dirs.
call the function django.get_version, return the result.
call the function do_ifequal with 3 arguments: parser, token and boolean False, return the result.
call the function do_ifequal with 3 arguments: parser, token and boolean False, return the result.
call the function do_ntranslate with 3 arguments: singular, plural, number and string 'ngettext', return the result.
call the function do_ntranslate with 3 arguments: singular, plural, number and string 'ngettext', return the result.
call the function do_translate with 2 arguments: message and string 'gettext', return the result.
call the function do_translate with 2 arguments: message and string 'ugettext', return the result.
call the method dot_re.sub with 2 arguments: char and src, return the result.
return doy.
return an instance of a dummy class.
return duplicate.
return duplicate
return e.
return encoding.
return end ans next.
return endpos.
return EndToken.
return error_dict.
return errors.
which has not been installed." with all the '%s' replaced by values of description, name and reference joined into a string delimited by '.', respectively,   obj set to receiver.__module__, hint set to None and id set to string 'signals.E001', append the result to errors.   return errors.
with an argument message for 'message', or if not message for 'message' and error.code for 'code' in error.code is true,   if not, an empty string for 'code'.   return errors.
call the function escape with an argument output.
call the function escape with an argument text, return the result.
call the function escape with an argument value, return the result.
return an instance of EscapeBytes, created with an argument, reuslt of the call to the function bytes with an argument s.
return an instance of EscapeBytes, created with an argument s.
call the function escapejs with an argument value, return the result.
return an instance of EscapeText, created with an argument s.
string 'unicode_escape', substitute the list of results for etags.   return etags.
return EventHandler.modified_code.
return exclude.
return exit_code.
return expanded_template.
where '%s' is replaced with first element of bits.   return an instance of ExtendsNode with 2 arguments nodelist and parent_name.
return f.
return result of the f.fileno method if f has an 'fileno' attribute, otherwise return f.
formated with 3 elements: self.class_name, self.old_method_name and self.new_method_name, self.deprecation_warning and integer 2.   call the function f with a arguments: unpacked list args and unpacked dictionary kwargs, return the result.
return boolean False.
return boolean True.
return boolean False,
return is boolean False.
return FASTCGI_HELP.
call the function fastcgi_help with an argument string "ERROR: Implementation must be one of prefork or thread.", return the result.
call the fastcgi_help function with an argument string "ERROR: Invalid option for daemonize parameter.", return it.
call the fastcgi_help function with an argument string "Invalid combination of host, port, socket.", return it.
call the fastcgi_help function, return the result.
return fext.
call the method field.rel.to._default_manager.db_manager with an argument db on the return value call the method  get_by_natural_key,
call the field.rel.to._meta.get_field method with an field.rel.field_name argument, on the result call the method to_python,
return field.to_python.
call the method Field.validate with 2 arguments: self and value, return the result.
return the result of the method field.widget.value_from_datadict called with 3 arguments: self.data, self.files and prefix.
if field is contained in self.errors return boolean True, if not, return boolean False.
append to list, a tuple with 2 elements: f and value under the f key of field_dict dictionary, use the resulting list as an argument,   for the creation of the instance of OrderedDict class, substitute it for field_dict.   return field_dict.
return field_type, field_params and field_notes.
call the function self.path with argument name, use it and mode as arguments for the call to the function open, use it as an argument for creatinon of a File object instance, return it.
return FILE_INPUT_CONTRADICTION.
self.cache_suffix converted to a string, appended to the character '*', call os.path.join with self._dir and fname as arguments,   filelist is a list containing all the previous results.   return filelist.
return filename and display_url.
call the method filename.rfind with an argument string "\\", increment the result by one,
return filenames.
return value under the name key of the files dictionary, if it doesnt exists, return None.
return filter_func.
return an instance of FilterExpression class, created with 2 arguments: token and self.
return a class instance FilterNode, called with an arguments filter_expr and nodelist.
return final_output.
where '%s' is replaced with final_path and base_path.   return final_path.
return an instance of FirstOfNode class, created with an argument, result of the method parser.compile_filter called with bit,
return an instance of FixedOffset class, created with 2 arguments: offset and name.
return fixture_files.
model._meta.app_label, model._meta.object_name, parent_model._meta.app_label, parent_model._meta.object_name, respectively.   return fk.
return flat.
evaluate the function force_bytes, with the arguments s, encoding, strings_only and errors, return the result.
return the result.   call the function force_bytes with arguments value and self._charset, return the result.
substitute '%s' in string '<%s %s %s>' with self.__class__.__name__, self.name and self.regex.pattern, respectively,
call the function force_str with an argument string '<%s\npath:%s,\nGET:%s,\nPOST:%s,\nCOOKIES:%s,\nMETA:%s>',
substitute '%s' from string "<%s: %s (%s)>" with self.__class__.__name__, self.name and self.content_type, respectively, use it as an argument for the call to the function force_str, return the result.
call the function force_str with 3 arguments: string "<Text Node: '%s'>", with '%s' replaced with first 25 elements of self.s string,
call the function force_str with an argument self._tzname, return the result.
call the function force_str with an argument signature, return the result.
call the method make_key with arguments key and version from the base class of the class BaseMemcachedCache, use it as an argument for the call to the function force_str, return the result.
call the function force_text with an argument error, return the result.
call the function gettext with an argument message, use the result as an argument for the call to the force_text function, return the result.
call the function iri_to_uri with an argument value, use the result as an argument for the call to the force_text function,
call the function force_text with first element of list_ as an argument, return the result.
replace all the strings '\\' with '/' in the string name, use it as an argument for the call to the force_text function, return the result.
call the function ngettext with 3 arguments: singular, plural and number, use the result as an argument for the call to the force_text,
call the function quote with 2 arguments: result of the function force_str called with an argument url,
call the function quote_plus with 2 arguments: result of the function force_str called with an argument url,
return the result of the call to the function force_text, with s, encoding, string_only and errors as arguments.
call the method self.prepare_value with an argument initial_value, use it as the argument for the call to the function force_text,
evaluate the force_text function with settings.FORCE_SCRIPT_NAME as argument, return the result.
call the function force_text with 2 arguments: value under the is_dst key of the time.tzname and DEFAULT_LOCALE_ENCODING,
call the function force_str with an argument quoted_url, use the result as an argument for the call to the function unquote,
call the function force_str with an argument quoted_url, use the result as an argument for the call to the function unquote_plus,
call the function force_text with an argument url, return the result.
call the force_text function with an argument value, return the result.
call the method widget.render with 3 arguments: name, return value of the method self.value, attrs set to attrs,
and initial as a dictionary with 4 entries: result of self.total_form_count method for TOTAL_FORM_COUNT,   result of self.initial_form_count method for INITIAL_FORM_COUNT, self.min_num for MIN_NUM_FORM_COUNT and self.max_num for MAX_NUM_FORM_COUNT.   return form.
return form.
get the value under the DELETION_FIELD_NAME key of the form.cleaned_data dictionary, if it exists return it, if not, return boolean False.
call the method form.save with an argument commit as commit, return the result.
format value into printable data representation with formating rules arg, return the result.
call the function format_html with 3 arguments: string '<ul class="{0}">{1}</ul>', self.error_class and return value of the function,
call the function format_html with 2 arguments: string '<ul class="errorlist">{0}</ul>', and return value of the function,
substitute the result for final_attrs dictionary value under the 'value' key.   call the function format_html with 2 arguments: string '<input{0} />',
return the result of the function format_html called with 2 arguments: string '<input{0} />',
call the function format_html with 2 arguments: string '<input{0} />' and result of the function flatatt,
call the function format_html with 4 arguments: string '<label{0}>{1} {2}</label>', label_for, result of the method self.tag,
call the function format_html with 4 arguments: string '<option value="{0}"{1}>{2}</option>', option_value, selected_html,
call the function format_html with 3 arguments: string ('<textarea{0}>\r\n{1}</textarea>', return value of the function flatatt,
call the function format_html with an argument empty string, return the result.
call the function format_html with 2 arguments: string "<input type='hidden' name='csrfmiddlewaretoken' value='{0}' />",
called with an argument w, and sub_widgets as an empty string, append the result to output.   call the function format_html with 3 arguments: self.outer_html,
call the formataddr function with argument tuple containing 2 elements nm and addr.
call the function formatdate with 2 arguments: epoch_seconds and usegmt set to boolean True, return the result.
call the method formats.time_format with 2 arguments: value and arg, return the result.
call the function formats.localize_input with 2 arguments: value and self.format if true, if not,
call the method formats.localize_input with an argument value, return the result.
call the method formats.time_format with 2 arguments: value and arg, return the result.
substitute the result for formatted_subject.   return first 989 elements of formatted_subject.
with an argument i, append the result to a list, substitute the resulting list for forms.   return forms.
if forms_valid is true and call to the method self.non_form_errors, evaluates to false, return boolean True, otherwise return False.
return FormSet.
return an instance of ForNode class, created with 5 arguments: loopvars, sequence, is_reversed, nodelist_loop and nodelist_empty.
return found.
call the method fp.getvalue, return the result.
call the function from_current_timezone with an argument result, return the result.
call the function from_current_timezone with an argument, return the result.
call the method from_current_timezone with an argument result, return the result.
call the function __current_timezone with an argument value, return the result.
use its __name__ field as a key to get the value from self.tags, assign func to it.   return func.
return func.
call the method func.__get__ with 2 arguments: self and type of self object, call the result with 2 arguments:
use the result as an argument for the call to the mark_safe function, return the result.   call the function func with 2 arguments: unpacked list args and unpacked dictionary kwargs, return the result.
call the function func with 2 arguments: unpacked list args and unpacked dictionary kwargs.
call the function func with 2 arguments: unpacked list resolved_args and unpacked dictionary resolved_kwargs, return it.
call the function func with 2 arguments: unpacked list self.__args and unpacked dictionary self.__kw, return the result.
call the function func with 3 arguments: context, self.first and self.second, return the result.
call the function func with 2 arguments: context and self.first, return the result.
call the function func with 2 arguments: self._wrapped and unpacked list args.
call the function get_callable with an argument callback, return the result and an empty dictionary.
call the function get_connection with 2 arguments: backend set to self.email_backend and fail_silently set to boolean True.
return get_git_changeset.cache.
call the function get_internal_wsgi_application, return the result.
call the function get_resolver with an argument urlconf, on the result call the method resolve with an argument path, return it.
call the function get_supported_language_variant with an argument accept_lang, return the result.
call the function get_supported_language_variant with 2 arguments: lang_code and strict set to strict, return the result.
call the function get_supported_language_variant with an argument lang_code, return the result.
call the function get_supported_language_variant with an argument settings.LANGUAGE_CODE, return the result.
call the function get_template with an argument parent, return the result.
call the function get_template with 2 arguments template_name and dirs, return the result.
call the get_valid_filename with argument name, return the result.
call the function get_wsgi_application, return the result.
get 'value' attribute of the _active object, if it exists return it, if not, call the function get_default_timezone and return the result.
get translation_function attribute of the _default object, call the result with 3 arguments: singular, plural and number, return the result.
get 'value' attribute of the _prefixes, if it exists, return it, otherwise return '/'.
get the 'value' attribute of the _urlconfs, if it exists return it, otherwise return defaults.
get attribute name from value under the DEFAULT_CACHE_ALIAS key of caches dictionary, return it.
get name attribute from the instance object, call it and return the result.
get name attribute from the instance object, call it with an argument value and return the result.
get attribute class_name form the module object, return it.
gett self.attr from the module object, return it.
get _assertCountEqual attribute of the self object, call the result with 2 arguments: unpacked list args,
get _assertRaisesRegex attribute of the self object, call the result with 2 arguments: unpacked list args,
get _assertRegex attribute of the self object, call the result with 2 arguments: unpacked list args,
get shell attribute of the self object, call it and return the result.
get attribute 'caches' from the self._caches if exists, otherwise get an empty dictionary, call the values method on the return value, return it.
get name attribute of the self._out object, return it.
get format_type attribute of the settings object, return it.
get translation_function attribute of the t object, call the result with 3 arguments: singular, plural and number, return the result.
get attribute real_name from the trans object, return it.
return guessed_path.
call the function handle_app with 2 arguments: app_config.models_module and unpacked dictionary options.
call the method self.__cast, return the hash value of the result.
call the function hashlib.pbkdf2_hmac with 5 arguments: field name of the result of the function digest, password, salt,
convert deader to lowercase, if it is contained in self._headers return boolean True, if not, return boolean False.
check if lowercase header_query exists is existing_headers, return the boolean result.
call the function hmac.compare_digest with 2 arguments: result of the function force_bytes called with an argument val1,
call the method hmac.new with 3 arguments: key, msg set to result of the function force_bytes with an argument value,
return host.
return host and an empty string.
return html.
evaluate the function http.parse_cookie with raw_cookie as an argument, return the result.
evaluate the http.QueryDict method with raw_query_string and encoding set to self._encoding as arguments, return the result.
return id_.
substitute the list of results for values.   return an instance of a class IfChangedNode, created with 3 arguments: nodelist_true, nodelist_false and unpacked list values.
return an instance of IfEqualNode class, created with 5 arguments: val1, val2, nodelist_true, nodelist_false and negate.
return an instance of IfNode class, created with an argument conditions_nodelists.
call the import_string with app_path as an argument, return the result.
call the import_string with argument: import_path if exists or settings.DEFAULT_FILE_STORAGE, if not, return the result.
evaluate the function import_string with key_func as argument, return the result.
call the import_string with arguments path, call the return function with arguments: unpacked list args and unpacked dictionary kwargs, return the result.
call the function importlib_find with 2 arguments: full_module_name and package_path, if the result is not None, return boolean True,
return an instance of IncludeNode class, created with 3 arguments: return value of the method parser.compile_filter,
return initial.
if initial is not equal to data, return boolean True, if it is return boolean False.
return initial_forms.
if initial_value is not equal to data_value, return boolean True, otherwise return boolean False.
initialize the object of a InMemoryUploadedFile class with arguments: file set to self.file, field_name set to self.field_name,
return inner.
self._wrapped.
return input_val.
return instance.
call the function binascii.hexlify with an argument x, convert the result to base 16 integer, return the result.
call the method self.data.utctimetuple, use the result as an argument for the call to the function calendar.timegm,
convert to integer the value of dictionary cc under the key 'max-age', and return it
convert value into a string, take character at the negative arg index, convert it into an integer, return it.
call the method self.data.timetuple, use the result as an argument for the call to the function time.mktime,
convert timeout into an integer, return it.
convert value to an integer, return it.
convert value and arg to integers, if value is divisible by arg, return True, otherwise return boolean False.
convert value and arg into a integers, return their sum.
convert first element of values into a integer, return the result and ch.
convert protocol to lowercase, use it as a key to get a value from the ip_address_validator_map dictionary, return it.
return ip_str.
split ip_str into 2 parts from right, return second element of the result.
return ipv4_unpacked.
return iri.
call the function iri_to_uri with an argument location, return the result.
call the method resolver._reverse_with_prefix with 4 arguments: view, prefix, unpacked list args, unpacked dictionary kwargs,
call the function is_library_missing with an argument path, return the result.
check if obj is instance of the object _PROTECTED_TYPES, return the boolean result.
if other is instance of EmailValidator and, self.domain_whitelist equals to other.domain_whitelist,
if other is an instance of self.__class__ and, self.limit_value equals to other.limit_value, and self.message equals to other.message,
return next element of the iterable it.
if item is contained in the list of the elements of self, return boolean True, otherwise return boolean False.
if item is contained in self.dict, return boolean True, otherwise return boolean False.
get _iteritems attribute of the class d, call the result with an argument unpacked dictionary kw, convert the result to a iterable,
get _iterkeys attribute of the class d, call the result with an argument unpacked dictionary kw, convert the result to a iterable,
get _iterlists attribute of the class d, call the result with an argument unpacked dictionary kw, convert the result to a iterable,
get _itervalues attribute of the class d, call the result with an argument unpacked dictionary kw, convert the result to a iterable,
return self._container converted into a iterable.
convert keys of dictionary self.dict into a iterable, return it.
return iterator object based on the self.file collection object.
convert self.forms into an iterable, return it.
return iterable self.keyOrder.
return j.
call the method json.dumps with a dictionary generate with an expression as an argument, return value of the function e.get_json_data,
call the json.dumps function with 2 arguments: obj and separators set to tuple containing ',' and ':' characters,
call the method self.get_json_data with an argument escape_html,
call the data.decode method with a string 'latin-1' as an argument, use the result as an argument for the call to the json.load function, return the result.
return key and pdict.
return first element of key.
if key if contained in value under the DEFAULT_CACHE_ALIAS key of caches dictionary, return boolean True, otherwise return False.
if key is contained in last element of self.dicts, return boolean True, otherwise return boolean False.
return key_func.
return klass.
str.__unicode__().encode('utf-8'), call the lambda function and put the result in the __str__ filed of klass.   return klass.
call the klass method with fail_silently set to fail_silently and dictionary arguments kwds as arguments, return the result.
return kwargs.
return lambda function with text as argument and return value being result of the function colorize, called with 3 arguments: text,
create lambda identity function which returns x for input parameter x, return the function.
return lang_code.
called with an argument lang_code is true,   return lang_code.
get the LANG_INFO dictionary value under the generic_lang_code key, return the result.
get the value under the lang_code key of the LANG_INFO dictionary, return it.
convert language to lowercase and return it.
convert language to lowercase, return it.
convert fist p elements of language to lowercase, append '_' to it,
append '_' to string created from first p elements of languages converted to lowercase,
covert to lowercase language element at (p+1)-th index, append it to the previous result,   covert to lowercase language elements from (p+2)-th index to the end, append it to the previous result, return it.   convert fist p elements of language to lowercase, append '_' to it,
convert fist p elements of language to lowercase, append '_' to it,
if latest_date is true, return it, if not, call the method datetime.datetime.now and return the result.
call the function lazy with 2 arguments: func and unpacked list resultclasses, call the result with 2 arguments: unpacked list args,
call the function lazy_number with 5 arguments: ngettext, str, singular set to singular, plural set to plural,
call the function lazy_number with 6 arguments: npgettext, six.text_type, context set to context, singular set to singular,
call the function lazy_number with 5 arguments: ungettext, six.text_type, singular set to singular, plural set to plural,
instantiate class BoundaryIter with 2 arguments: self._stream and self._boundary, use it to instantiate LazyStream class, return it.
return left.
create list out of email_messages, return the length of the list.
convert result of the method self.__iter__ into a list, return its length.
return the length of self.children.
return the length of self.content.
return the length of self.forms.
call the method self.get_queryset, return the length of the result.
return length of self.items.
for every form_errors in self.errors sum length of return value of the method self.non_form_errors and length of form_errors, return the result.
return the length of self.object_list.
split value into words, return the length of the result.
return length of value,
if lengths of value and arg are equal, return boolean True, otherwise return boolean False.
where '%s' is replaced with library_name and elements of tried_modules joined into a string, separated by ','.   return lib.
return line.
convert _serializers into a list, return it.
only if app_configs is None ot model._meta.app_config is contained in app_configs, error is a list containing all the previous elements.   chain all errors elements into a list, return it.
return first element of the list containing elements of error.
append to a list elements of the iterator self, return the resulting list.
reverse the order of modules elements, put them into a list, return it.
convert result of the method self.__iter__ into a list, return element at the idx index.
call the method self.iteritems, return the list of results.
call the method self.iteritems, return list of results.
call the method self.iterkeys, return the list of results.
call the method self.iterlists, return list of results.
call the method self.itervalues, return the list of results.
call the method self.itervalues, return list of results.
convert self to a list and return it.
if other is not equal to list containing elements of self, return boolean True, otherwise return boolean False.
if other equals list containing elements of self, return boolean True, otherwise return boolean False.
call the urlsplit with an argument url, convert the result into a list and return it.
return value converted into a list.
call the function flatten_result with an argument result, unpack the resulting list and zip it in the list of tuples, return the result.
return list_ and boolean False.
return last element of list_.
return an instance of Literal class, created with an argumen value.
call the method loader.get_template with an argument template, return the result.
call the method loader.select_template with an argument template, return the result.
return an instance of LoaderOrigin class, created with 4 arguments: display_name, loader, name and dirs.
where '%s' is replaced with taglib and e.   return an instance of a LoadNode class.
convert locale to lowercase and return it.
convert fist p elements of locale to lowercase, append '_' to it,
with an argument value evaluates to false, and if 'convert_to_local_time' attribute of value object doesnt exists,   or is it does is boolean True, should_convert is boolean True, otherwise is boolean False.   if should_convert is true, call the function localtime with an argument value and return the result, otherwise return value.
return lookup_view.
return lookup_view
sum m and class Media created with definition, return the result.
return the evaluated result of the mail.send method.
return major.
call the function make_middleware_decorator with an argument middleware_class, return the result.
call the function make_middleware_decorator with an argument middleware_class, call the result, return the new result.
map elements of self._iterator through self.make_bytes function, return the result.
call the function mark_for_escaping with an argument value, return the result.
call the function _helper with an argument value, use it as an argument for the call to the function mark_safe, return the result.
call the function _urlize with 3 arguments: value, nofollow set to boolean True, autoescape set to autoescape,
call the function _urlize with 4 arguments: value, trim_url_limit as limit converted into an integer, nofollow as boolean True,
call the function mark_safe with an argument, elements of bits joined into a string, return the result.
call the function mark_safe with an arguments: for every n in nodelist results of the function force_text called with an argument n,  joined in a string, return the result.
join return value of the function six.text_type called with an argument self.management_form and forms into a string,
call the function chain with an argument unpacked list, append name to string 'render_',
input_attrs, append the result to inputs list.   join inputs elements into a string, separated with newline character, use it as an argument for the call to the function mark_safe,
and result of the function escape called with an argument line, substitute the result for i-th element of lines.   call the method mark_safe with lines joined into a string, separated by newlines as argument, return the result.
join output into a string, separated by newline characters, use it as an argument for the call to the mark_safe, return the result.
join elements of output into a string with newline as separator, use it as an argument for the call to the function mark_safe, return it.
join elements of output into a string, separated by newline characters, use it as the argument for the call the function mark_safe,
join elements of output into a string, separated with newline character,
join results of format_html called with 2 arguments: format_string and tuple with an element args, into a string,
call the function mark_safe with an argument contents, return the result.
call the function mark_safe with an argument data, return the result.
call the function force_text with an argument text, replace every occurrence of '&' in the result with '&amp;',
call the function force_text with an argument value, call the method translate on the result, with an argument _js_escapes,
with value result of the conditional_escape function called with an argument v for key k.   call the method format_string.format with 2 arguments: unpacked list args_safe and unpacked dictionary kwargs_safe,
call the method formats.number_format with 2 arguments, d converted to a integer and then to string, and integer 0,
call the method formats.number_format with 2 arguments: number and absolute value of p,
call the function func with 2 arguments: unpacked list args and unpacked dictionary kwargs,
call the function linebreaks with 2 arguments value and autoescape, use the result as an argument for the call to the mark_safe,
call the function mark_safe with an argument message, return the result.
call the function mark_safe with an argument output.
and convert it to lowercase, substitute the result for value.   call the function re.sub with 3 arguments: string '[-\s]+', string '-' and value, use the result as an argument for the call to the,
call the function mark_safe with an argument result, return it.
and final_attrs, append the result to output.   call the method self.format_output with an argument output, use the result as an argument for the call to the function mark_safe,
under the BLOCK_CONTEXT_KEY key of render_context dictionary dictionary evaluates to be not equal to None,   call the method self.render with an argument self.context, use it as an argument for the call to the mark_safe function, return the result.
call the function six.text_type with an argument number, use the result as an argument for the call to the function mark_safe,
call the function six.text_type with an argument value, use the result as an argument for the call to the function mark_safe,
substitutions dictionary.   call the function mark_safe with an argument template, formated with substitutions, return the result.
replace every occurrence of newline character in value with string '<br />', use it as an argument for the call to the mark_safe,
call the function mark_safe with an argument value, return the result.
return the value of masked temp
call the method match.group with an argument integer 0, return the result.
return maybe.
return media.
return an instance of the class Media, called with an unpacked dictionary with an entry: name appended to string '_',
return an instance of Media class, created with definition as an argument.
return message.
call the function meta with 3 arguments: name, base and d.
return an instance of metaclass class, created with 3 arguments: string 'temporary_class', None and an empty dictionary.
return an instance of metaclass class, created with 3 arguments: cls.__name__, cls.__bases__ and orig_vars.
call the method middleware.process_response with 2 arguments: request and response, return the result.
get the element with minimal value between the value under the TOTAL_FORM_COUNT key of self.management_form.cleaned_data dictionary,
return mod.register.
return model_list.
return an instance of ModelChoiceIterator class, created with an argument self.
import_module function, substitute the result for module.   return an instance of the module.Command class.
return modules.s
return the value under the self.data.month key of the MONTHS dictionary.
return the value under the self.data.month key of the MONTHS_3 dictionary.
get the value under the self.data.month key of the MONTHS_3 dictionary, call on it the method title, return the result.
return the value under the self.data.month key of the MONTHS_ALT dictionary.
return the value under the self.data.month key of the MONTHS_AP dictionary.
return msg.
return msg_count.
return msgid.
return name and tuple containing 2 elements value and params.
return name, ser_fmt and cmp_fmt.
replace all the occurrences of character '_' in name with a whitespace, capitalize the first letter and return the result.
concatenate name and string '_id', return it.
concatenate name and string '-clear', return it.
return neg and res.
return new_class.
return new_context.
return new_key.
return new_name, field_params and field_notes.
return new_value.
code set to an string 'invalid_choice' and dictionary params with an entry: choice for 'value'.   return new_value.
return no.
return node.
call the method node.render with an argument context, return the result.
substitute the result for args and kwargs, respectively.   call the function node_class with 3 arguments: takes_context, args and kwargs.
return nodelist.
call the method nodelist.render with an argument context, return the result.
return an instance of NodeList class.
return an instance of a NodeList class, created with arguments node, for every node in nodelist,
return nodelist_true_output, if true, if not call the method self.nodelist_true.render with an argument context and return the result.
return nodes.
return None.
doesn't support that type of template loading. Consider removing that line from TEMPLATE_LOADERS.",   where '%r' is replaced with loader.   return None.
if timeouts is None return None, otherwise return the sum of function time.time return value and timeout.
call the function normpath with an argument path, return the result.
evaluate next boolean expression, value of converter function with opts.db_table as argument is contained in tables,
if self equals to other return boolean False, otherwise return True.
if self equals to other return boolean False, otherwise return boolean True.
if v is boolean False or v is None or v is an empty string, return boolean False, otherwise return boolean True.
convert self.option_list into a boolean, return the inverted value.
call the function module_has_submodule with 2 arguments: package and module, return inverted boolean result.
call the method self._is_expired with argument f, invert the boolean result and return it.
if self.file is false or self.file.closed is true, return boolean true, otherwise return boolean false.
if settings.DEBUG is true, return boolean False, otherwise return boolean True.
return an instance of a NowNode class, created with an argument format_string.
return num_sent.
return number.
call the function number_format with 2 arguments: value and use_l10 as use_l10n, return the result.
call the function number_format with an argument value, return the result.
call the method numberformat.format with 6 arguments: value, result of the function get_format called with 3 arguments:
call the method o.isoformat, return the result.
return obj.
return obj_dict.
self.getlist with an argument k, for every k in self.   return obj_dict.
with field_value as an argument, substitute the result for obj_pk.   return obj_pk.
return obj_pk.
multiply offset.days with 86400, add offset.seconds to the result, return the result.
call the function op, return the result.
return Operator.
get the integer representation of the first element of bs, return it.
get the integer representation of the i-th element of buf, return it.
return an instance of OrderedDict class, created with an argument fields.
call the function original_urlencode with 2 arguments: list with 2 elements: result of the function force_str with an argument k,
call the self.path function with argument name, use the result as the argument for the call to the os.path.exists function, return the result.
call the os.path.getsize function with argument self.file.name, return the result.
call the self.path with argument name, use the result as an argument for the call to the os.path.getsize function, return the result.
join into a string: md5 hash sum of force_bytes(key) and self.cache_suffix, compose root file path out of self._dir and previous result, return it.
join self.dirpath and self.file into a file path, return it.
call the os.path.normpath with argument path, return the result.
call the os.path.samefile with arguments src and dst, return the result.
if other is contained in self.children, return boolean True, otherwise return boolean False.
return other_dict.
return otherwise.
return out.
call the method out.getvalue, return the result.
return output.
and _allow_fallback set to boolean True, extend the output with the result.   return output.
return reversed list output.
return size of the image that was fed to the parser p.
return a instance of the class Page, created with 2 arguments: unpacked list args and unpacked dictionary kwargs.
return palette.
return value under the DEFAULT_PALETTE key of the PALETTES dictionary.
return parent.
call the function parse_http_date with an argument date, return the result.
return parser
get the index name, of the parser._namedCycleNodes, return the result.
call the method parser.parse, return the result.
return path,
return path.
return path an an empty string.
call the method path.decode with an argument fs_encoding, return the result.
call the method path.encode with an argument fs_encoding, return the result.
join first element of django.__path__, string 'conf' and subdir into a valid file path, return it.
index of the first occurrence of '\\' in path, or alternatively if '\\' is not contained in path,   split path in two parts by '/' character, return the result.
split path in two parts by '\\' string, return the result.
return path_info.decode method return value called with UTF_8 as the argument.
return patterns.
call the function pformat with an argument value, return the result.
call the function pgettext_lazy with an argument self.message_context and value, return the result.
call the function phone2numeric with an argument value, return the result.
call the function force_bytes with argument value, use the result as an argument for the call to the method base64.b64decode,
evaluate pickle.loads with argument pickled, return the result.
call f.read function, use the result as the argument for zlib.decompress function call, call the pickle.loads function with the previous result as argument, return the result.
return plist.
return plural.
return plural_suffix.
return potfiles.
return property object with _media as getter function.
return an property object with getter function fget, setter function fset, destructor fdel and documentation string doc.
return proxy.
return qs.
instantiate QueryDict class with 2 arguments: an empty string and encoding set to self._encoding, instantiate a class MultiValueDict, return them.
call the function quote with return value of the evaluated function force_bytes(iri),
evaluate function force_bytes with path as the argument, replace all of the occurancies of the "\\" with "/" in the resulting string,
return r.
return an raw string '\"'.
call the function random_module.choice with an argument value, return the result.
return all the integers from the integer 1 to the self.num_pages.
return raw_data.
result of the m.group method called with an argument integer 0 converted into lowercase and result of the method value.title,   substitute the result for t.   call the function re.sub with 3 arguments: string "\d([A-Z])", lambda function with an argument m and return value,
replace every occurrence of whitespaces in the previous result for '_', substitute the result for s.   call the function re.sub with 3 arguments: raw string '(?u)[^-\w.]', an empty string and s, return the result.
call the method re.sub with 3 arguments: raw string '&(?:\w+|#\d+);', empty string and result of the function force_text,
call the method re.sub with 3 arguments: raw string '>\s+<', string '><' and result of the function force_text,
call the method re_camel_case.sub with 2 arguments: raw string ' \1' and value, strip the result of whitespaces from both ends,
call the method re_newlines.sub with 2 arguments: '\n' and text, return the result.
call the operator.add on the values of the self object converted into a dictionary, until it is reduced to a single value, return it.
return an instance of a class RegexURLResolver created with arguments: raw string '^/' and a list containing an element ns_resolver.
return an instance of a class RegexURLResolver created with arguments: raw string '^/' and urlconf.
parser.compile_filter, substitute the result for expression.   return an instance of a RegroupNode class, created with 3 arguments target, expression and var_name.
instantiate RelatedObject class with 3 arguments: cls.fk.rel.to, cls.model and cls.fk,
call the function remove_tags with 2 arguments value and tags, return the result.
call the function render_value_in_context with 2 arguments output and context, return the result.
call the function render_value_in_context with 2 arguments: value and context, return the result.
return replacement.
return the printable representation of the self object converted to a dictionary.
return the printable representation of the self object converted to a list.
convert elements of self into a list, return the its printable representation.
return printable representation of self.dicts.
return printable representation of self.value.
return an instance of RequestContext class, created with 3 arguments: self._request, context and current_app set to self._current_app.
return res.
for every k and v in return value of the method self.kwargs.items.   return resolved_args and resolved_kwargs.
return an instance of a ResolverMatch class, crated with arguments self.callback, args, kwargs and self.name.
return an instance of a class ResolverMatch created with 6 arguments: sub_match.func, sub_match.args, sub_match_dict,
return response
return response.
and store it in the value of the dictionary response under the key 'ETag'.   return response
return result.
and return value of the function copy.deepcopy called with 2 arguments: value and memo.   return result.
and boolean False, append the result to result.   return result.
return result
and memo, and result of the function copy.deepcopy called with 2 arguments: value and memo.   return result.
return result,
return result and result_args.
convert result to lowercase and return it.
return first and second element of result.
perform bitwise OR with 2 operands: previous result and result, substitute the result for result.   if result is equal to integer 0, return boolean True, otherwise return boolean False.
return results.
return ret.
return retval.
where '%s' is replaced with result of the method self.current_token.display.   return retval.
reverse order of elements of self.keyOrder, return the result.
return rv.
return s.
join the result in a string separated by whitespaces, substitute it for s.   return s.
evaluate the method s.decode with string 'utf-8' and errors as the arguments,
call the method e.encode with an argument string "latin-1".
evaluate the member method of s, encode with the encoding and errors as the arguments, return the result.
call the method s.get_data, return the result.
sum the result of the method s.get_data and s.rawdata, return the result.
evaluate the method s.getvalue, return the result.
call the method s.getvalue, return the result.
remove first and last elements of s, replace every occurrence of string '\%s' formated with quote with quote,
return an instance of SafeBytes, created with an argument data.
return an instance of SafeBytes, created with an argument s.
return an instance of SafeBytes, created with an argument t.
return an instance of SafeText, created with an argument s converted into a string.
return an instance of SafeText, created with an argument data.
return an instance of SafeText, created with an argument s.
return an instance of SafeText, created with an argument t.
evaluate the boolean expression, if first three characters of sample equals to string of bytes '\xef\xbb\xbf\',
call the function with 7 arguments: self, self.instance, self._meta.fields, fail_message, commit, self._meta.exclude,
return saved_instances.
if scheme is countaine in self.url_schemes return boolean True, otherwise return False.
return scrip_name.decode method result called with UTF_8 as argument.
return select_html.
return self.
call the method self.__bytes_cast, return the result.
call the method self.__cast, if the result doesnt equal to other, return boolean True, otherwise return boolean False.
call the function sself.__cast with an argument self, divide the result with rhs and return the reminder of the division.
call the method self.__cast, if the result is lesser than other, return boolean True, otherwise return boolean False.
call the method self.__cast, if the result equals other, return boolean True, otherwise return boolean False.
call the method self.__class__ with an argument list, with elements: tuples with 2 elements: k and hard copy of list v,
call the method self.__class__ with an argument list, with 2 elements: key and result of the function copy.deepcopy,
call the method __copy__ with an argument unpacked list self.dicts, return the result.
call the method self.__class__ with an argument self, return the result.
call the method self.__copy__, return the result.
call the method self.__deepcopy__ with an empty dictionary as an argument.
get the value under the funcname key of the t-th elment of self.__dispatch dictionary, call the result with 3 arguments: res,
return a tuple with an element self.__dt.
return self.__language.
return self.__name.
return self.__offset.
return a tuple with an element self.__offset.
call the method self.__text_cast, return the result.
return self.__to_language.
return the value under the language_code key of the self._app_dict dictionary.
call the method self._base_set with string 'add', key, value and timeout as arguments, return the result.
return self._body.
call the method self._cache.add with key, value, self.get_backend_timeout(timeout) as arguments.
evaluate the method self._cache.decr with key and negative delta as arguments, return the result.
evaluate the method self._cache.incr with key and negative delta as arguments, return the result.
return self._cached_loaders.
return value under the alias key of self._caches.caches dictionary.
return self._callback.
return self._changed_data.
return self._choices.
return self._client.
call the method self._coerce with an argument value, return the result.
return self._count.
call the method self._create_attachments with argument msg, return the result.
call the method self._create_alternatives with an argument msg, use it as an argument for the call to the self._create_attachments method, return the result.
return self._dimensions_cache.
return self._encoding.
return self._errors.
return self._files.
return self._fname.
return self._fqdn.
return the first element of the return value of the call to the self._det_image_dimensions method.
return the second element of the return value of the call to the self._det_image_dimensions method.
call the self._get_pages method with 3 arguments: self.object_list from the bottom to the top index, number and self, return the result.
call the method self._get_scheme, return the result.
call the method self._handle_object with an argument node, return the result.
convert header to lowercase, use it to as a key to get the value of the self._headers dictionary,
call the method self._headers.values, return the result,
convert header to lowercase, use it as the key to get the value from the self._headers dictionary, return the second element of the result.
return the result of the method self._html_output, called with 5 arguments: normal_row to a string,
return the result of the method self._html_output, called with 5 arguments: normal_row to a string,
return the result of the method self._html_output, called with 5 arguments: normal_row to a string,
return self._is_rendered.
return self._name.
return the value under the language_code key of the self._namespace_dict dictionary.
return self._non_form_errors.
return self._num_pages.
substitute the result for self._object_dict.   return the value under the pk key of self._object_dict dictionary.
call the self._open method with name and mode arguments, return the result.
return self._post.
return self._post and self._files.
return self._queryset.
return self._regex.
return the value under the language_code key of the self._regex_dict dictionary.
return the value under the language_code of the self._regex_dict dictionary.
call the method self._render with an argument context, return the result,
return self._request.
return the value under the language_code key of the self._reverse_dict dictionary.
call the method self._reverse_with_prefix with 4 arguments: lookup_view, an empty string, unpacked list args and unpacked dictionary kwargs.
return self._size.
call the method self._stream.read with 2 arguments: unpacked list args and unpacked dictionary kwargs.
call the method self._stream.readline with 2 arguments: unpacked list args, unpacked dictionary kwargs.
call the method self._text_chars with 4 arguments: length, truncate, text and truncate_len, return the result.
call the method self._text_words with 2 arguments length and truncate, return the result.
call the method self._truncate_html with 5 arguments: length, truncate, self._wrapped, length and boolean True, return the result.
call the function self._truncate_html with 5 arguments: length, truncate, text, truncate_len and boolean False, return the result.
return self._upload_handlers.
return self._urlconf_module.
return self._wrapped.__dict__.
call the method self.add_truncation_text with 2 arguments: elements of words joined in a string, separated with whitespaces,
call the method self.add_truncation_text with 2 arguments: if end_index is greater than zero, first end_index elements of text,
call the method self.as_table, return the result.
call the method self.as_ul, return the result.
append the result to the result of the method, self.as_widget, return the resulting string.   call the method self.as_widget, return the result.
call the method self.as_hidden with an argument only_initial set to boolean True,
call the method self.as_widget with 3 arguments: return value of the method self.field.hidden_widget, attrs,
call the method self.as_widget with 3 arguments: instance of a class Textarea, attrs and unpacked dictionary kwargs, return the result.
call the method self.as_widget with 3 arguments: instance of a class TextInput, attrs and unpacked dictionary kwargs, return the result.
get the value under the 'id' key of the self.attrs dictionary, return it, if the key doesnt exists return an empty string.
remove the first element of value under the name key of self.blocks dictionary, return it.
get value under the self.blocks dictionary under the name key, return the last element.
call the method self.check with 2 arguments app_configs set to app_configs, display_num_errors set to display_num_errors, return the result.
call the method self.choice_input_class with 5 arguments: self.name, self.value, result of the method self.attrs.copy,
if self.choice_value is contained in self.value return boolean True, otherwise return boolean False.
return self.cleaned_data.
evaluate self.clear method and return the result.
return the first element of self.client_address.
call the function self.compress with empty list as an argument, return the result.
return self.connection.
return self.content
call the method self.copy, return the result.
call the function self.create_var with an argument token, return the result.
return self.data.day.
return self.data.hour.
subtract integer 12 from self.data.hour, return the result.
call the method self.data.isocalendar, return the first element of the result.
call the method self.data.isoformat, return the result.
return self.data.month.
call the method self.data.tzinfo.tzname with an argument self.data, if it is true, return it, otherwise return an empty string.
return self.data.year.
call the method self.dicts.pop, return the result.
return value under the key key of dictionary in last element of self.dicts,
return value under the key key of dictionary in last element of self.dicts.
return self.DSTDIFF.
return self.DSTOFFSET.
call the method self.empty_form.is_multipart, return the result
return self.empty_form.media.
return self.empty_value.
return value under the 'wsgi.url_scheme' key of self.environ dictionary.
return the result of the method self.errors.get called with 2 arguments: NON_FIELD_ERRORS and return value of the method,
call the method self.expression.resolve with 2 arguments: context and boolean True, return the result.
call the method self.extract with an argument absolute_path, return the result.
self.form.initial, if it exists, or self.field.initial if not, substitute the result for data.   call the method self.field.prepare_value with an argument data, return the result.
return self.field.widget.is_hidden,
call the method self.field.widget.value_from_datadict with 3 arguments: self.form.data, self.form.files, self.html_name, return the result.
return self.file.
call the self.file.close method, return the result.
return self.file.closed.
return self.file.name.
return self.file.size.
call the method self.filter with 3 arguments: name, func and unpacked dictionary flags, return the result.
if not, substitute func.__name__ for name.   call the method self.filter with 3 arguments: name, func and unpacked dictionary flags.
call the function self.filter_expr.resolve with an argument context, return the result.
call the method self.filter_function with 2 arguments func and unpacked dictionary flags, return the result.
call the method self.filter_function with arguments name and unpacked dictionary flags, return the result.
return the value under the filter_name key of the self.filters dictionary.
call the flatten method of the self and other objects, if they are equal, return boolean True, if not return boolean False.
get the value under the self.name key of the self.form.errors dictionary, if the key exists, return it,
call the method return self.format with an argument string 'D, j M Y H:i:s O', return the result.
call the self.initial_form_count method, return the sublist of self.forms from the beginning to the previous result as the end index.
call the method is_multipart on the first element of self.forms, return it.
return the media field of the first element of self.forms.
return self.forms element at the index index.
call the self.initial_form_count method, return the sublist of self.forms, using previous result as start index to the end.
call the method self.func with an argument value.
call the method self.g, return the result.
call the self.get method with key and version set to version as arguments, return it if it is not None.
call the method self.get_connection with argument fail_silently, on the result call the method send_messages with one argument: list containing self, return the result.
evaluate the self.get_fqdn method, return the result.
call the method self.get_renderer with 4 arguments: name, value, attrs and choices, call the render method on the result, return the result.
call the method self.getlist with an argument key, return the result.
call the method self.getvalue, return the result.
call the method self.handle_merge with 2 arguments: loader and conflicts, return the result.
call the self.handle_noargs method with with unpacked dictionary options as argument, return the result.
evaluate the self.has_key method with key as argument, return the result.
call the method self.has_key with an argument key, return the result.
call the method self.has_previous, if it evaluate to false, call the self.has_next method, return the result.
return self.hashvalue.
return self.html_name.
return self.id.
if self.id is contained in settings.SILENCED_SYSTEM_CHECKS return boolean True, False otherwise.
call the self.incr method with key, negative delta and version set to version as arguments.
call the method self.incr_version with key, negative delta and version as arguments.
if self.input_type equals string 'hidden' and self has an attribute 'input_type', return boolean True, otherwise return boolean False.
if self.is_bound is true and self.errors is false, return boolean True, otherwise return boolean False.
return hard copy of self.keyOrder elements.
return boolean True if self.level is greater than or equals to ERROR, otherwise return boolean False.
return self.limit_choices_to.
call the method self.limit_choices_to, return the result,
call the method self.load_template with 2 arguments: template_name and template_dirs, return the result.
call the method self.loader with 2 arguments: self.loadname and self.dirs, return the first element of the result.
return the value under the INITIAL_FORM_COUNT key of the self.management_form.cleaned_data dictionary.
call the method self.mapping.get with 2 arguments: self.tagtype and an empty list, return the result.
get the value under the 'HTTP_X_REQUESTED_WITH' key of the self.META dictionary, if it equals string 'XMLHttpRequest',
return self.msg formatted with a tuple, with elements generated from return value of the function force_text with 2 arguments:
return self.name.
return self.new_objects.
call the method self.nodelist.render with an argument context, return the result.
call the method self.nodelist.render with an argument new_context, return the result.
call the method self.nodelist_empty.render with an argument context, return the result.
call the method self.nodelist_false.render with an argument context, return the result.
call the method self.nodelist_false.render with an arguments context, return the result.
call the method self.nodelist_true.render with an argument context, return the result.
multiply self.number and self.paginator.per_page, return the result.
if self.number is lesser than self.paginator.num_pages, return boolean True, otherwise return boolean False.
if self.number is greater than integer 1, return boolean True, otherwise return boolean False.
return self.object_list element at index.
return self.objects.
return self.paginator.count.
call the method self.paginator.validate_number with self.number decremented by 1 as argument, return the result.
call the method self.paginator.validate_number with self.number incremented by 1 as argument, return the result.
return self.parent_instance.
and code set to a string 'invalid_choice'.   return self.parent_instance.
call the method self.parent_widget.render with unpacked list args as an argument, return the result.
if self.path is lesser than other.path, return boolean True, otherwise return boolean False.
if self.path equals other.path, return boolean True, if not return boolean False.
if self.pointer is smaller than length of self.subject, return boolean True, otherwise return False.
return self.position.
call the method self.queryset.none, return the result.
call the method self.render, return the result.
call the method self.renderer with 4 arguments: name, value, final_attrs and choices, return the result.
call the method self.represent_scalar with 2 arguments: string 'tag:yaml.org,2002:str' and data converted into a string, return the result.
call the method self.resolve with an argument value, return the result.
return self.s.
sum results of method self.save_existing_objects called with an argument commit and of method self.save_new_objects,
if self.scheme equals to string 'https', return boolean True, otherwise return boolean False.
call method self.serialize_headers, append bytes string '\r\n\r\n' to the result, append self.content to the result, return it.
call the method sign on the result with an argument value, substitute the result for value.   call the method self.set_cookie with 3 arguments: key, value and unpacked dictionary kwargs, return the result.
call the method self.show_migration_list with connection as first argument, as second argument use value under the 'app_label' key of options dictionary,
append value to the self.sign, return the result.
return self.size.
if self.size is greater than chunk_size, return boolean True, otherwise return boolean False.
return self.source.
call the method self.source_error with 2 arguments: token.source and msg, return the result.
return self.STDOFFSET.
evaluate self.stream.getvalue method, return the result.
return self.streaming_content
call the method self.strptime with arguments value and format, return the result.
call the method self.tag with 2 arguments name and func, return the result.
return self.tag_function.
call the method self.tag_function with an argument name, return the result.
return self.find_template_cache dictionary value under the key key.
return self.text.
add together self.to, self.cc and self.bcc, return the result.
return self.token.
remove first element from self.tokens, return removed element.
return self.value.
call the method self.value.resolve with 2 arguments context and ignore_failures set to boolean True, return the result.
if self.value equals self.choice_value, return boolean True, if not, return boolean False.
return self.var.
return value under key key of self dictionary
return value under the key key of self dictionary.
call the serializer function, call the loads method on the return value with an argument data, return the result.
append check.tags into a list for every check in self.registered_checks if check has 'tags' attribute, put the elements into a set and return it.
if striped x by '.' character is not contained in ignored, for every x in ext_list put x into a set, return the resulting set.
set the attribute name from value under the DEFAULT_CACHE_ALIAS key of caches dictionary to value, return it.
return settings.DEBUG.
return settings.LANGUAGE_CODE.
return settings.TEMPLATE_STRING_IF_INVALID.
format settings.TEMPLATE_STRING_IF_INVALID with self.var, return the result.
sum sign, int_part and dec_part, return the result.
create the Singer class with 2 arguments: key appended to string 'django.http.cookies' and salt set to salt, return it.
return singular.
return singular_suffix.
return sites.
call the function six.iteritems with an argument: instance of base class of the MultiValueDict class, return the result.
call the function six.text_type with an argument name, return the result.
call the method six.text_type with 3 arguments: s, encoding and string 'replace'.
return six.text_type(s).encode(encoding, errors).
put the results in a list, join the list elements in a string separated by whitespace separator, return the string as the bytes string.   evaluate the method six.text_type(s), on the result call the method encode with the arguments encoding and errors, return the result.
evaluate the method six.text_type(s), on the result call the method encode with encoding as an argument, return the result.
call the function six.text_type with an argument self.data.year, return the result without the first 2 elements.
call the function six.text_type with an argument self, divide the result with rhs and return the reminder of the division.
call the method six.unichr with an argument c, return the result.
call the function six.unichr with value under the text key of the html_entities.name2codepoint dictionary, return the result.
return size.
call the function smart_text with an argument auto_id, format the result with self.html_name, return it.
call the method field.rel.to._meta.pk.to_python with an argument value, use the result as an argument for the call to the,
call the function smart_text with an argument obj, return the result.
evaluate the function smart_text with argument self.name, if exists, or an empty string, if not, return the result.
call the smart_text function with an argument token, return the result.
evaluate the function smart_text with an argument value, return the result.
call the function smart_text with an argument value, return the result.
sort all_files and return it.
sort value with key set to filed resolve of instance of a class Variable, created with an argument arg, reverse the sort and return the result.
sort value with key set to filed resolve of instance of a class Variable, created with an argument arg, return the result.
return source and display_name.
return an instance of a SpacelessNode class, created with an argument nodelist.
return split.
use the app_config, style and connection as arguments for the call to the sql_create, sql_custom and sql_indexes functions,  append the results respectively, return the result.
return an instance of a SsiNode class, created with 2 arguments: filepath and parsed.
convert it to a string and substitute it for value under the 'cookies' key of the state dictionary.   return state.
return statements.
convert value, self.sep and return value of a method self.signature called with an argument value, concatenate them together, return the result.
replace all '%s' in string '<%s %s (%s:%s) %s>' with self.__class__.__name__, urlconf_repr, self.app_name,
get dictionary self items, convert the result into a dictionary, convert the result into a string and return it.
sum major and sub, return the result converted to string.
return name converted to a string and val.
convert o to an string, return it.
convert self into a string and return it.
call the function strftime with 2 arguments: self and fmt, return the result.
call the method self.nodelist.render with an argument context, strip the result of the surrounding whitespaces,
call the function strip_tags with an argument value, return the result.
return style.
call the method get_unique_error_message from the base class of the class BaseInlineFormSet, with an argument unique_check, return the result.
call the method initial_form_count from the base class of the class BaseInlineFormSet, return the result.
call the method _construct_form from the base class of the class BaseModelFormSet, with 2 arguments: i and unpacked dictionary kwargs.
call the method initial_form_count from the base class of the class BaseModelFormSet, return the result.
call the method to_python with an argument data from the base class of the class BooleanField, return the result.
call the method __get__ with 2 arguments: instance and owner, from the base class of the classonlymethod class, return the result.
call the parse_args method with arguments args and namespace, from the base class of the CommandParser class.
call the __init__ method with 3 arguments: CRITICAL, unpacked list args and unpacked dictionary kwargs from the base class of Critical.
call the method to_python with an argument value from the base class of the DateField class, return the result.
call the __init__ method with 3 arguments: DEBUG, unpacked list args and unpacked dictionary kwargs from the base class of Debug.
call the method default with an argument o from the base class of the class DjangoJSONEncoder, return the result.
call the method clean with an argument value from the base class of the EmailField class.
call the __init__ method with 3 arguments: ERROR, unpacked list args and unpacked dictionary kwargs from the base class of Error.
call the method clean with an argument data from the base class of the class FileField, return the result.
call the method render from the base class of the class FileInput, called with 3 arguments: name, None and attrs as attrs.
call the __init__ method with 3 arguments: INFO, unpacked list args and unpacked dictionary kwargs from the base class of Info.
call the method _isdst with an argument dt from the base class of the class LocalTimezone, return the result.
call the method prepare_value from the base class of the class ModelChoiceField, with an argument value, return the result.
for every v in value, return the list of results.   call the method prepare_value the base class of the class ModelMultipleChoiceField, with an argument value, return the result.
call the method __getitem__ from the base class of the class MultiValueDict, with an argument key, return the result..
call the method render from the base class of the class NullBooleanSelect, with 4 arguments: name, value, attrs and choices,
call the method render from the base class of the class PasswordInput, called with 3 arguments: name, value and attrs,
call the getvalue method from the base class of the class PythonSerializer, return the result.
call the getvalue method of the base class of the PythonSerializer class, return the result.
call the method pop from the base class of the class QueryDict, with arguments key and unpacked list args, return the result.
call the method popitem from the base class of the class QueryDict, return the result.
call the method setlistdefault from the base class of the class QueryDict, with arguments key and default_list, return the result.
call the method setlistdefault from the base class of the class QueryDict, with arguments key and default_list, return the result.
call the method __init__ from the base class of the class SimpleTemplateResponse, return the result.
return the content field of the base class of the class SimpleTemplateResponse.
call the clean method wiht value argument from the base class of the SlugField class, return the result.
call the method setdefault from the base class of the class SortedDict, with 2 arguments key and default, return the result.
call the method to_python with an argument value from the base class of the TimeField class, return the result.
call the sign method from the base class of the TimestampSigner class with an argument value, return the result
call the method strftime with an argument fmt, from the base class of the type of dt class.
call the method clean with an argument data from the base class of the class URLField, return the result.
call the __init__ method with 3 arguments: WARNING, unpacked list args and unpacked dictionary kwargs from the base class of Warning.
return supported.
return supported_code.
return sys.modules dictionary value under the name key.
return value under the name key of the sys.modules dictionary.
if value under the name key of the sys.modules dictionary is not None, return boolean True, otherwise return boolean False.
return t.
call the method t.render with an argument, instance of Context class, created with an argument dictionary, return the result.
call the function t.render with an argument context, return the result.
call the function t.render with an argument context_instance, return the result.
call the method t.to_language, return the result.
return first element of t.
return tuple, consisting of first element of t converted to lowercase and second element of t.
return tuple, consisting of first element of t converted to lowercase and True.
return boolean True if tag is contained in self.tags_available method return value, return False otherwise.
return tempdir.
return template.
return template and None.
call the method context.new with an argument values, use it as an argument for the call to the method template.render, return the result.
call the method template.render with an argument context, return the result.
return an instance of Template class, created with 2 arguments: source, origin and name, return the result.
substitute '%s' in TEMPLATE_FRAGMENT_KEY_TEMPLATE string with fragment_name and args.hexdigest(), respectively, return the result.
return template_name.
return an instance of TemplateLiteral with 2 arguments: result of the function self.template_parser.compile_filter,
return an instance of TemplateSyntaxError class with an argument msg.
where '%s' is replaced with tag and TemplateTagNode.mapping converted into a list.   return an instance of a TemplateTagNode class, created with an argument tag.
return templatetags_modules.
return text.
if not an empty string, and truncate, return the result.   return text.
call the method text.__html__, return the result.
call the method tf.format with an argument format_string, return the result.
return the_path.
call the function time_format with 3 arguments: value, string 'TIME_FORMAT' and use_l10n as use_l10n, return the result.
call the function time_format with 2 arguments: value and arg, return the result.
append string '-0000' to time_str, return the result.
format string '%+03d:%02d' with hour and minute, append it to time_str, return the result.
format string '%+03d%02d' with hour and minute, append it to time_str, return the result.
append 'Z' to time_str, return the result.
call the function timedelta with an argument integer 0, return the result.
call the function timedelta with an argument seconds as negative time.altzone, return the result.
call the function timedelta with an argument seconds as negative time.timezone, subtract the result from the result of the call,
call the function timedelta with an argument seconds as negative time.timezone, return the result.
evaluate the function timesince with d, now and reversed set to boolean true as arguments, return the result.
call the function timesince with 2 arguments: value and arg, return the result.
call the function timesince with an argument value, return the result.
instantiate the TimestampSigner object with arguments key and salt set to salt, call its method sign with an argument base64, return it.
call the function timeuntil with 2 arguments value and arg, return the result.
call the method timezone.localize with 2 arguments: value and is_dst as None, return the result.
call the function timezone.make_aware with arguments value and current_timezone, return the result.
call the function timezone.make_naive with 2 arguments value, current_timezone, return the result.
call the method timezone.tzname with an argument None, return the result.
return timezone.zone.
return token.
return total_forms.
call the method tpl.format with an arguments self.name, self.sysid and self.pubid.
call the method tpl.format with an arguments self.sysid and self.pubid.
return translated.
return translation.
call strip s of the surrounding whitespaces, substitute every occurrence of the whitespace in the trim_whitespace_re with previous result, return the result.
return boolean True.
return is boolean True.
and data, if it evaluates to true,    return boolean  True.
where '%d' is replaced with name, dlen subtracted from alen, and plen.   return boolean True.
to_locale called with an argument lang_code, if the result is not None,   return boolean True.
format truncate with a dictionary with an element: text for 'truncated_text', return the result.
instantiate class Truncator, with an argument value, call the method chars on the result with 2 arguments length,
instantiate class Truncator, with an argument value, call the method chars on the result with an argument length, return the result.
instantiate class Truncator, with an argument value, call the method words on the result with 3 arguments length,
instantiate class Truncator, with an argument value, call the method words on the result with 2 arguments length,
if tt.tm_isdst is greater than integer 0, return the result.
if tt.tm_isdst is greater than intger 0, return boolean True, otherwise return boolean False.
if fh has an attribute a, for every a in WRAPPER_ASSIGNMENTS, put a into a tuple, return the resulting tuple.
convert app_template_dirs to a tuple, return it.
add bits to a tuple, return it.
call the method type.__new__ with 4 arguments: cls, name, empty tuple and d, return the result.
can_delete for 'can_delete', min_num for 'min_num', max_num for 'max_num', absolute_max for 'absolute_max',   validate_min for 'validate_min' for validate_max for 'validate_max'.   create a class class which name is generated by converting 'FormSet' into a string and appending it to form.__name__,
get the type of form object, return an instance of resulting class created with 3 arguments: class_name, tuple with an element form,
call the __bool__ method with argument self, on the return value of the type function with argument self, return the result.
evaluate the method type(self).__bool__ with argument self, return the result.
get the type of self object, call the __bool__ method on the result with an argument self, return the result.
get the type of self object, call its method __bool__ with an argument self, return the result.
get the type of the self object, on the result call the __bool__ method with an argument self, return the result.
call the function type with an argument self, on the result call the method __next__ with an argument self, return the result.
call the method types.MethodType with 3 arguments: func, obj and obj.__class__, return the result.
call the function ugettext with an argument string "Please correct the duplicate data for %(field_name)s which must be unique for,
call the function ugettext with an argument string "Please correct the duplicate data for %(field)s, which must be unique.",
call the function ugettext with an argument string "Please correct the duplicate data for %(field)s.",
call the function ugettext with an argument string "Please correct the duplicate values below.", return the result.
call the function ugettext with an argument message.
call the function ugettext_lazy with an argument value, return the result.
return unbound.
return unbound.im_func.
call the function ungettext with 3 arguments: singular, plural and number, return the result.
replace every occurrence of raw string '\\' in s with a raw string '\\\\', use the result and string "unicode_escape",
call the function update_wrapper with 2 arguments: wrapper and user_function, return the result.
return boolean upload.
return url.
join prefix and path into an url, return it.
call the urljoin function with arguments: self.base_url and result of the call to the function filepath_to_uri with argument name, return the result.
return an instance of a URLNode class, created with 4 arguments viewname, args, kwargs and asvar.
call the function urlquote with 2 arguments value and unpacked dictionary kwargs, return the result.
return usage.
call the method ustring_re.sub with 2 arguments: fix and s, return the result.
return val.
return val and encoded as a tuple.
if val is an instance of bytes, return val, otherwise return result of the method val.encode called with an argument encoding.
return valid.
instantiate ValidationError class with an argument self.data, return its field error_list.
return value.
return value
code set to string 'max_whole_digits' and params set to a dictionary with an entry: difference of the self.max_digits and self.decimal_places, for 'max'.    return value.
return value,
code set to an string 'invalid_choice' and dictionary params with an entry: value for 'value'.   return value.
code set to a string 'invalid_choice'.   return value.
message, code as a string 'ambiguous_timezone' and params as params,   and third element of the return value of the function sys.exc_info.   return value.
call the method value.center with an argument, arg converted into a integer, return the result.
call the method value.date, return the result.
call the method value.ljust with an argument, arg converted into a integer, return the result.
convert value to lowercase and return the result.
return value.pk.
replace all occurrences of '\\' with '\\\\' in value, replace all occurrences of '"' with '\\"' in the previous result,
replace every occurrence of ' ' in value for '\xa0', return the result.
call the method value.replace with an arugment tzinfo set to None, return the result.
call the method value.replace with an argument tzinfo as timezone, return the result.
call the method value.rjust with an argument, arg converted into a integer, return the result.
call the method value.serializable_value with an argument self.to_field_name, return the result.
get_format called with an argument string 'DATETIME_INPUT_FORMATS', substitute the result for format.   call the method value.strftime with an argument format, return the result.
get_format called with an argument string 'DATE_INPUT_FORMATS', substitute the result for format.   call the method value.strftime with an argument format, return the result.
get_format called with an argument string 'TIME_INPUT_FORMATS', substitute the result for format.   call the method value.strftime with an argument format, return the result.
strip whitespaces from both sides of the value, return the result.
if value.tzinfo is None and call to the method value.tzinfo.utcoffset called with an argument value evaluates to None,
if value.tzinfo is not None and call to the method value.tzinfo.utcoffset called with an argument value evaluates to not None,
convert value to uppercase, return the result.
return last element of value.
return first element of value.
slice the list value with unpacked list bits as an argument, return the result.
sum value and arg, return the result.
if value is false, return it, if it is true convert first element of value to uppercase letter, return the value.
default string value, substitute it for value.   return value if six.PY2 is true, if not return value.encode(ISO_8859_1).
default string value, substitute it for value.   return value if six.PY2 is true, if not return value.encode(ISO_8859_1).decode(UTF_8).
return value, if it is None return arg.
string "resolve_variable() is deprecated. Use django.template. Variable(path).resolve(context) instead", RemovedInDjango20Warning,   and stacklevel set to integer 2.   call the method resolve with an argument context, from the instance of Variable class, created with an argument path.
return an instance of VariableNode class with an argument filter_expression.
call the method nodelist.render with an argument, an instance of Context class, use the result as an argument for the creation of,
return version
sum version and delta together, return the result.
with the argument view, store the result in the view.   return view
where string '%s' is replaced by mod_name and func_name, respectively.   return view_func.
return week_number.
call the method self.data.weekday, use the result as an key for obtaining WEEKDAYS dictionary value, return it.
call the method self.data.weekday, use the result as an key for obtaining WEEKDAYS_ABBR dictionary value, return it.
if not, substitute self.auto_id for id_.   call the method widget.id_for_label with an argument id_, return the result.
return an instance of a class WidthRatioNode, created with 4 arguments: result of the method parser.compile_filter,
return an instance of a class WithNode, created with 4 arguments: None, None, nodelist and extra_context as extra_context.
call the method wrap with 2 arguments, value and arg converted into a integer, return the result.
return wrapped.
return wrapper.
and unpacked dictionary kwargs, return the result.   return wrapper.
return WRAPPER_ASSIGNMENTS.
substitute func for _dec._decorated_function.   call the function wraps with an argument func, call the result with an argument _dec, return the result.
return WSGIHandler object.
return x.
return yes.
call the method zbuf.getvalue, return the result.
return ZERO.
call the method zipfile.ZipFile.read with 2 arguments: self and first element of the result of the self.namelist method.
call the method handler.upload_complete, substitute the result for retval.
substitute newretval for retval.
substitute self for retval.
assign rev_suplx the hexadecimal value of suplX
assign rev_suplx the reversed hexadecimal value of suplX
set rev_suplx to the reversed hexadecimal value of suplX
store in rev_suplx the reverse of the variable suplX
use the result as an argument for the call to the function iri_to_uri, return the result.   call the function lazy with arguments reverse and str, substitute the results for reverse_lazy.
if self.is_reversed is true, substitute reversed_text is an string ' reversed', if not, reversed_text is an empty string.
call the function re.compile with an argument raw string '^\w{3}, %s %s %s %s GMT$' formated with __D, __M, __Y and __T,
substitute the result for RFC1123_DATE.   call the function re.compile with an argument raw string '^\w{6,9}, %s-%s-%s %s GMT$' formated with __D, __M, __Y2 and __T,
call the function formatdate with an argument epoch_seconds, substitute the result for rfcdate.
append string ".moves.urllib_robotparser" to __name__, use it as an key to get the value from the sys.modules dictionary, substitute it for robotparser.
split part by '=' character, substitute the result for role and instructions, respectively.
convert role to uppercase.
substitute self._rollback for rollback.
substitute nonlocal_root for a tuple with an element root.
substitute nonlocal_root for tuple root.
root is a list with elements: root, root, None and None.
root is an list with 4 elements: root, root, None and None.
root dictionary values under the KEY and RESULT keys are both None.
root is an empty list.
get config dictionary element under 'root' key, if it exists substitute it for root, if not, root is None.
call the method logging.getLogger, substitute the result for root.
substitute logging.root for root.
get maximal element from roots and substitute it for root.
substitute first element of nonlocal_root for root.
substitute value under the NEXT key of the oldroot dictionary for root and first element of nonlocal_root.
rot is the sum of y and x modulo 256
rot is an integer 13
set the variable ROT to the first command-line argument casted into an boolean
assign the variable ROT the first command-line argument converted to integer
set the variable ROT to the first command-line argument converted into an integer
set the variable ROT to the first command-line argument casted into an integer
set the variable ROT to the 5th command-line argument casted into an integer
substitute the '%s' with table and list containing key, respectively.   call the cursor.fetchone method, substitute the result for row.
row_data is an generator object that returns value under the field key of form.cleaned_data dictionary,
for every field in unique_check, if field is contained in form.cleaned_data.   create a generator that for every d in row_data, if d has an '_get_pk_val' attribute,
assign rox_encoded_instruction res1 or res2 
set rox_encoded_instruction to res1 or res2 
assign rox_encoded_instruction res2 or res3 
call the function run with 5 arguments: self.addr, self.port converted to an integer, handler, ipv6 set to self.use_ipv6,  and threading set to threading.
substitute registry.run_checks for run_checks.
RUN_RELOADER is boolean True.
with '%s' substituted for name_str, as argument.   run_syncdb is boolean False.
run_syncdb is boolean True.
call the function runfastcgi with an argument args.
call the function runfastcgi with an argument all the elements, except the first from the sys.argv list.
substitute level for rv.
substitute value under level key of logging._levelNames dictionary for rv.
close file descriptor s.
call the method s.feed with an argument value.
call the s.serialize method with arguments queryset and unpacked dictionary options.
append string '\\x' followed by 0xFF converted to hex to the string s
for every arg in s, call the function force_text with arg, encoding, strings_only and errors as arguments,
s is a string 'hello'
set the variable s to the string 'hello'
assign the string 'hello' to the variable s
call the function force_text with an argument s, strip the result of whitespaces from both ends,
call the get_serializer function with an argument format, call the return value object and substitute it for s.
call the method m.group with an argument integer 0, substitute the result for s.
s is an instance of MLStripper class.
call the method s.decode with an argument string 'utf-8', substitute the result for s.
call the method s.decode with encoding and errors as the arguments, substitute the result for s.
call the method s.encode with an argument string 'utf-8', substitute the result for s.
replace every occurrence of '"' in s with '&quot;'.
replace every occurrence of '\\' in s with '\\\\'.
replace every occurrence of '\n' in s with '\\n'.
replace every occurrence of '\r' in s with '\\r'.
replace every occurrence of '\t' in s with '\\t'.
replace every occurrence of '</' in s with '<\\/'.
replace every occurrence of "'" in s with "\\'".
concatenate first site elements of s, syear and elements of s from the site incremented by integer 4 index, substitute the result for s.
substitute s without the first element for s.
substitute elements of s from the end index to end for s.
substitute s1 for s.
s is an instance of the Select class, created with choices set to choices.
call the function six.text_type with return value of the function bytes(s), encoding and errors as the arguments,
call the function six.text_type with s, encoding and errors as the arguments, substitute the result for s.
call the function six.text_type with s as an argument, substitute the result for s.
call the function six.text_type with s as an argument, substitute result for s.
s is an instance of StringIO class.
take subject elements from p-th to i-th index, substitute it for s.
increment s_len by integer 1,
s_len is integer 0.
call the function time.strftime with 2 arguments: fmt and and timetuple without the first element,
call the function time.strftime with 2 arguments: fmt and and timetuple without the first element,
call the function force_bytes with 2 arguments: safe and self.encoding, substitute it for safe.
if value is an instance of SafeData, safe is boolean True, otherwise it is boolean False.
substitute value for value under the key key of safe_data dictionary.
safe_data is an empty dictionary.
if text is an instance of SafeData, safe_input is boolean True, otherwise is boolean False.
substitute SafeBytes for SafeString.
substitute SafeText for SafeString.
substitute SafeText for SafeUnicode.
call the function force_bytes with an argument salt, substitute the result for salt.
read 4 bytes from file f and store it in sample.
and construct as boolean False, return the result.   save.alters_data is boolean True.
called with an argument commit, return the result.   save.alters_data is boolean True.
call the function save_m2m.
call the method self.save_existing with 3 arguments: form, obj and commit as commit, append the result to saved_instances.
saved_instances is an empty list.
saved_locale is None.
call the method translation.get_language, substitute th result for saved_locale.
assign sb the hexadecimal value of leader converted into an int16
assign sb the hexadecimal value of leader casted into an int32
convert the value of leader to hexadecimal, then remove the last element, convert it to an int16 and set its value to the variable sb
assign sb the hexadecimal value of leader removing the last element casted into an int16
convert the value of leader to hexadecimal, then remove the last 3 elements, convert it to an int16 and set its value to the variable sb
convert the value of leader to hexadecimal, then slice it at index 10, convert it to an int16 and set its value to the variable sb
convert the value of leader to hexadecimal, then slice it at index 10, convert it to an int32 and set its value to the variable sb
convert the value of leader to hexadecimal, then slice it at index 12, convert it to an int16 and set its value to the variable sb
assign sb the hexadecimal value of leader starting at index 13 casted into an int16
assign sb the hexadecimal value of leader starting at index 3 casted into an int16
assign sb the hexadecimal value of leader starting at index 4 casted into an int32
assign sb the hexadecimal value of leader starting at index 7 casted into an int16
assign sb the hexadecimal value of val1 casted into an int16
convert the value of x bitwise and y to a hex then add it to the variable sc
Convert the value of x bitwise and 0xff to a hexadecimal then append it to the variable sc1
convert the value of x bitwise and z to a hexadecimal then append it to the variable sc2
call the function urlsplit with an argument value, assign the result to scheme, netloc, path, query and fragment, respectively.
split template once at the first character ':', convert the first element to lowercase and substitute it for scheme.
call the value.split method with '://' as argument, convert first element of the result to lower case, substitute the result for scheme.
schemes is a list containing 4 initial elements: 'http', 'https', 'ftp' and 'ftps'.
call the get_bytes_from_wsgi function with environ, string 'SCRIPT_NAME' and empty strings as arguments, substitute the result for script_name.
call the get_script_name function with environ as argument, substitute the result for script_name.
take all but the length of path_info last elements of script_url, substitute it for script_name.
call the get_bytes_from_wsgi function with environ, string 'REDIRECT_URL' and empty strings as arguments, substitute the result for script_url.
call the get_bytes_from_wsgi function with environ, string 'SCRIPT_URL' and empty strings as arguments, substitute the result for script_url.
open err_log flie in append mode with buffering size of input buffer, substitute the result for se.
call the method m.group with an argument string 'sec', convert the result into a string, substitute it for sec.
substitute new_second_item with second_item.
substitute absolute seconds for seconds.
call the method self.Z, substitute the result for seconds.
get the element of chunks at the (i+1)-the index, assign it to the seconds2 and name2, respectively.
call the function force_bytes with an argument secret, substitute the result for secret.
substitute settings.SECRET_KEY for secret.
function logging.getLogger, assign the result to the security_logger.   evaluate the function force_text with e as an argument, extra is an dictionary with two pair of elements,
substitute '%s' in 'django.security.%s' with the name of the type of the class object e, use it as the argument for the call to the,
define lambda function that returns self.file.seek field, use it as an argument for property function, put the result in seek.
add k to seen.
seen is an empty set.
add data to seen_data set.
add row_data to seen_data set.
seen_data is an empty set.
assign the result to the sql and references, respectively.   add model to seen_models set.
call the connection.introspection.table_names with tables as argument, store the result in seen_models.
call the method s.render with 3 arguments: field string formated with name, val and local_attrs, substitute the result for select_html.
call the method selected_choices.remove with an argument option_value.
call the function force_text with an argument v, for every v in selected_choices, add results to a set,
selected_html is an empty string.
call the function mark_safe with an argument string ' selected="selected"', substitute the result for selected_html.
substitute args for self.__args.
update self.__dict__ dictionary with obj_dict.
add state element to self.__dict__ dictionary.
substitute func for value under the '_setupfunc' key of the self.__dict__ dictionary.
substitute value under the "_wrapped" key of the self.__dict__ dictionary.
substitute self.__class__.__doc__ for self.__doc__.
substitute dt for self.__dt.
substitute kw for self.__kw.
substitute language for self.__language.
call the function to_locale with an argument language, substitute it for self.__locale.
self.__name is a string "%s%02d%02d", replace '%s' with sign, '%02d' is replaced with absolute value of offset divided by 60,
substitute name for self.__name.
substitute offset for self.__offset.
call the function timedelta with an argument minutes set to offset, substitute the result for self.__offset.
call the method self.__prepare_class__.
set self.__starttag_text to None.
slice the list from the i-th to the endpos-th element, substitute it for self.__starttag_text.
call the function to_language with an argument language, substitute it for self.__to_language.
call the method self._add_fallback.
call the method self._add_installed_apps_translations.
call the method self._add_local_translations.
substitute apps for the value under language_code key of the self._app_dict dictionary.
self._app_dict is an empty dictionary.
call the method self._archive.close.
call the method self._archive.extract with an argument to_path.
call the method self._archive.list.
define the method list with 3 arguments: self and unpacked list args and unpacked dictionary kwargs.
call the method self._archive.printdir with 2 arguments: unpacked list args and unpacked dictionary kwargs.
call the method self._archive_cls with an argument file, call the result with an argument file, substitute the result for self._archive.
call the method tarfile.open with an argument file, substitute the result for self._archive.
call the method zipfile.ZipFile with an argument self, substitute the result for self._archive.
call the method self._assert_mutable.
call the method self._base_set with string 'set', key, value and timeout as arguments.
call the method self.read, substitute the result or self._body.
substitute boundary for self._boundary.
substitute boundary for self.boundary.
call the method self._cache.clear.
call the method self._cache.delete with argument key.
call the method self_cache.delete_multi with argument list containing keys mapped through function l.
call the method self._cache.disconnect_all.
call the method self._cache_flush_all.
call the method self._cache.set with key, value, self.get_backend_timeout(timeout) as arguments.
call the method self._cache.set_multi with safe_data, self.get_backend_timeout(timeout) as arguments.
substitute pickled for value under the key key of self._cache dictionary.
substitute value for the value under the key key of self._cache dictionary.
call the _caches.setdefault method with name and empty dictionary as arguments, substitute the result for self_cache.
self._cached_loaders is an empty list.
substitute cached_loaders for self._cached_loaders.
substitute cache for value under the alias key of self._caches.caches dictionary.
self._caches.caches is an empty dictionary.
call the function local, substitute the result for self._caches.
substitute callback for self._callback.
call the function get_callable with an argument self._callback_str, substitute the result for self._callback.
self._callback is None.
substitute callback for self._callback_str.
joint prefix, character '.' and self._callback_str together, substitute the result for self._callback_str.
call the method self._callback_strs.add with an argument lookup_str.
call the method self._callback_strs.add with an argument pattern._callback_str.
call the method self._callback_strs.update with an argument pattern._callback_strs.
self._callback_strs is an empty set.
self._called_from_command_line is boolean True.
update the self._catalog dictionary with other._catalog.
call the method translation._catalog.copy, substitute the result for self._catalog.
append name to self._changed_data.
append name to self._changed_data list.
self._changed_data is an empty list.
self._changed_data is None.
substitute settings.DEFAULT_CHARSET for self._charset.
self._choices and self.widget.choices are assigned value converted into a list.
bring integer 2 to the power of 31, subtract the result by 4, put the result into a list, append possible_sizes to it,
call the method self._clean_fields.
call the method self._clean_form.
call the method self._lib.Client with self._servers and pickleProtocol set to pickle.HIGHEST_PROTOCOL as arguments, substitute the result for self._client.
call the self._lib.Client with argument self._servers, substitute the result for self._client.
append value to the self._closable_objects list.
append value to self._closable_objects list.
self._closable_objects is an empty list.
call the method self._close_files.
call the method self.make_bytes with an argument content, append it to self._container.
self._container is an list.
self._container is a list containing element value.
substitute content_length for self._content_length.
substitute length of self.object_list for self._count.
substitute the return value of the method self.object_list.count for self._count.
call the self._createdir method.
or path is not contained in the value under the medium key of self._css dictionary.   call the method self._css.setdefault with 2 arguments medium and an empty string, append path to the result.
self._css is an empty dictionary.
call the method self._cull.
call the self._cull method.
call the method self._cull with db, cursor and now as arguments.
self._cull_frequency is integer 3.
convert cull_frequency into an integer and substitute it for self._cull_frequency.
return value of the value._get_pk_val method and strings_only set to boolean True.   call the function m2m_value with the argument related, for every related in itterator object generated from the attribute field.name,
call the function field.value_to_string with an argument obj, substitute the result for value under the field.name key of self._current dictionary.
get field.name attribute of obj, convert it to a string, substitute it for the value under the filed.name key of self._current dictionary.
substitute value for field.name key of self._current dictionary.
substitute value for value under the field.name key of the self._current dictionary.
self.current is an empty dictionary.
self._current is None.
substitute current_app for self._current_app.
call the self._delete method with argument f.name.
call self._delete method with argument fname.
call the self._delete method with argument fname.
call the method self._delete with argument k.
call the method self._delete with argument key.
call the function self._key_to_file with key and version as arguments, use the result as an argument for the call to the self._delete method.
call the method self._deleted_form_indexes.append with an argument i.
self._deleted_form_indexes is an empty list.
evaluate the method get_image_dimensions with self class instance and close set to close as the arguments, substitute the result for self._dimensions_cache.
get absolute directory path of dir, substitute it for self._dir.
self._done is boolean False.
self._done is boolean True.
self._empty is boolean False.
if encoding is true, substitute it for self._encoding, if not substitute settings.DEFAULT_CHARSET for self._encoding.
substitute settings.DEFAULT_CHARSET for self._encoding.
substitute val for self._encoding.
substitute value for self._encoding.
append form.errors to self._errors.
extend the value under the field key of the self._errors dictionary with error_list.
call the method self.error_class, substitute the result for value under the field key of the self._errors dictionary.
call the method self.error_class with an argument error_class as an string 'nonfield',
self._errors is an empty list.
self._errors is an instance of ErrorDict.
self._errors is None.
insert mw_instance.process_exception at the beginning of self._exception_middleware.
exception_middleware is an empty list.
call the method self._expire_info.clear.
call the self.get_backend_timeout with argument timeout, substitute it for the value under the key key of self._expire_info dictionary.
call the _expire_info.setdefault method with name and empty dictionary as arguments, substitute the result for self_expire_info.
call the function force_text with 3 arguments: old_field_name, self._encoding and errors as a string 'replace',
self._files is an instance of MultiValueDict class.
self._fname is None.
join self.file_path and fname into a valid file path, substitute it for self._fname.
call the function socket.getfqdn, substitute the result for self._fqdn.
join func.__class__.__module__ and func.__class__.__name__ into a string, separated by character '.', substitute it for self._func_path.
join func.__module__ and func.__name__ into a string, separated by character '.', substitute it for self._func_path.
self._handler_class is None.
substitute the result for value.   substitute tuple containing 2 elements: header and value for the value under the header converted to lowercase key of the self._headers dictionary.
self._headers is an empty dictionary.
call the method translation._info.copy, substitute the result for self._info.
converted to an integer.   call the method self._init_translation_catalog.
call the method self._initialize_handlers,
substitute input_data for self._input_data.
self._is_rendered is boolean False.
self._is_rendered is boolean True.
convert value into a iterator, substitute the result for self._iterator.
append path to self._js.
self._js is an empty list.
self._leftover is an empty string.
join bytes and self._leftover into a bytes string, substitute it for self._leftover.
substitute library for self._lib.
call the self._load_post_and_files method.
call the method self._load_post_and_files.
substitute loaders for self._loaders.
call the _lock.setdefault method with name and RWLock() as arguments, substitute the result for self_lock.
call the method threading.RLock, substitute the result for self._lock.
call the method self._mark_post_parse_error.
self._max_entries is integer 300.
convert max_entries into a string, substitute it for self._max_entries.
substitute minimal element of the resulting list for self._chunk_size.   substitute META for self._meta.
key, encoding and errors set to string 'replace', and return value of the function force_text with 3 arguments:   value, encoding and errors set to string 'replace'.   call the method mutable substitute for self._mutable.
append ext to the end of it, substitute the resulting list for name.   substitute name for self._name.
substitute namespaces for the value under language_code key of the self._namespace_dict dictionary.
self._namespace_dict is an empty dictionary.
self._non_form_errors is None.
call the method self.error_class, substitute the result for self._non_form_errors.
call the method self.error_class with an argument e.error_list, substitute the result for self._non_form_errors.
self._num_pages is a integer 0.
divide hits by a floating point number self.per_page, convert its ceiling value to an integer and substitute it for self._num_pages.
self._num_pages and self._count are None.
call the function dict with an argument tuple with 2 elements: o.pk and o, for every o in result of the method self.get_queryset,
call the params.get function with string 'OPTIONS' and None as arguments, substitute the result for self._options.
append tuple with 2 elements: i and value under the ORDERING_FIELD_NAME key of form.cleaned_data dictionary to self._ordering.
call the method self._ordering.sort with an argument key as compare_ordering_key.
self._ordering is an empty list.
and lambda function returning x for x, substitute the firs element of resulting list for style_func.   call the function style_func with an argument msg, use the result as an argument for the call to the function force_str,
substitute out for self._out.
call the method payload.decode with 2 arguments: string 'ascii' and string 'surrogateescape', substitute the result for self._payload.
assign self.model._meta.pk to self._pk_field and pk.
call the method self._populate.
call the method self._populate,
self._populated is boolean False.
self._populated is boolean True.
self._post is an instance of QueryDict created with arguments: an empty string and encoding set to self._encoding,
self._post is an instance of QueryDict created with arguments: self.body and encoding set to self._encoding,
call the method self.parse_file_upload with arguments self.META and data, assign the result to self._post and self._files.
call the method self._post.appendlist with 2 arguments: field_name and result of the function force_text called with 3 arguments:
substitute post for self._post.
self._post is an instance of QueryDict class, created with an empty string and mutable set to boolean True.
self._post is an instance of QueryDict class created with an empty string as argument.
call the method self._post_clean.
self._post_parse_error is boolean False.
self._post_parse_error is boolen False.
self._post_parse_error is boolean True.
append callback to self._post_render_callbacks list.
self._post_render_callbacks is an empty list.
self._producer is an empty list.
substitute producer for self._producer.
substitute qs for self._queryset.
substitute queryset for self._queryset.
convert self.use_ipv6 to boolean, substitute it for self._raw_ipv6.
self._raw_ipv6 is boolean False.
self._raw_ipv6 is boolean True.
and content_length.   self._read_started is boolean False.
self._read_started is True.
self._read_started is boolean True.
substitute regex for self._regex.
where '%s' is replace by regex and return value of the function six.text_type with an argument e.   substitute the compiled_regex for value under the language_code key of the self._regex_dict dictionary.
substitute the regex_compiled for value under the language_code key of the self._regex_dict dictionary.
self._regex_dict is an empty dictionary.
call the method validators.RegexValidator with an argument regex set to regex, substitute it for self._regex_validator.
substitute length for self._remaining.
call the datastructures.MergeDict with self.POST and self.GET as arguments, assign the result to self._request.
status set to None and current_app set to None.   substitute request for self._request.
self._request_middleware is None.
substitute self._request_middleware for request_middleware.
set class fields _request_middleware, _view_middleware, _template_response_middleware, _response_middleware and _exception_middleware to None.
call the method self._reset_dicts with an argument dict_.
insert mw_instance.process_response at the beginning of self._response_middleware.
_response_middleware is an empty list.
and pattern.default_args.   substitute lookups for the value under language_code key of the self._reverse_dict dictionary.
self._reverse_dict is an empty dictionary.
increment length of boundary by integer 6, substitute the result for self._rollback.
append boundary to bytes string '--', substitute the result for self._separator.
substitute server for self._servers.
split server with ';' as delimiter, substitute the result for self._servers.
call the method self._set with key, pickled and timeout as arguments.
unpacked dictionary kwargs.   call the method self._set_regex with an argument regex.
call the method self._setup.
call the method self._get_size_from_underlying_file, substitute the result for self._size.
substitute size for self._size.
call the method self._start_relational_field with an argument field.
call the method self._start_relational_field with the argument field.
call the method self._stream.unget with an argument unused_char.
third element of the result of the function sys.exc_info.   self._stream is an instance of BytesIO class created with an argument self._body.
self._stream is a class instance of a LimitedStream class, initialized with self.environ dictionary value under the 'wsgi.input' key,
substitute stream for self._stream.
substitute table for self._table.
insert mw_instance.process_template_response at the beginning of self._template_response_middleware.
self._template_response_middleware is an empty list.
call the method self.tzname with an argument dt, substitute the result for self._tzname.
self._unget_history is an empty list.
append first 49 elements of self._unget_history to list containing num_bytes, substitute the result for self._unget_history.
call the method self._update_errors with an argument e.
call the method self._update_unget_history with length of bytes as an argument.
for every handler in settings.FILE_UPLOAD_HANDLERS,
substitute _upload_handlers for self.__upload_handlers.
substitute upload_handlers for self._upload_handlers.
call the function import_module with argument self.urlconf_name, substitute the result for self._urlconf_module.
substitute self.urlconf_name for self.urlconf_module.
self._validate_unique is boolean False.
self._validate_unique is boolean True.
substitute varlist for self.varlist.
append mw_instance.process_view at the end of self._view_middleware.
self._view_middleware is an empty list.
substitute empty for self._wrapped.
call the function that is the return value of get_storage_class method, substitute the result for self._wrapped.
call the method self._setupfunc, substitute the result for self._wrapped.
self.abstract is boolean False.
self.activated is boolean False.
self.activated is boolean True.
decrement self.active_readers by integer 1,
increment self.active_readers by 1.
increment self.active_readers by t.
self.active_readers is an integer 0.
decrement self.active_writers by integer 1,
increment self.active_writers by 1.
increment self.active_writers by integer 1,
self.active_writers is an integer 0.
call the method self.add_arguments with an argument parser.
call the method self.add_error with 2 arguments name and e.
call the method self.add_error with 2 arguments None and e.
call the method self.add_error with 2 arguments: None and errors.
call the method self.add_fallback with an argument default_translation.
call the method self.add_fields with arguments form and i).
called with string '__prefix__' as an argument and empty_permitted as boolean True, substitute the result for form.   call the method self.add_fields with arguments form and None.
call the method self.add_filters with 2 arguments: logger and filters.
call the method self.add_filters with 2 arguments: result and filters.
call the method self.add_handlers with 2 arguments: logger and handlers.
call the method self.add_item_elements with 2 arguments: handler and item.
called with an argument item.   call the method self.add_item_elements with 2 arguments: handler and item.
call the method self.add_library with an argument lib.
call the method self.add_root_elements with an argument handler.
where '%s' is replaced with value under the 'addrport' key of the options dictionary.   call the method m.groups, assign the result to self.addr, _ipv4, _ipv6, _fqdn and self.port, respectively.
if self.use_ipv6 substitute string '::1' for self.addr, if not substitute '127.0.0.1' for self.addr.
self.addr is an empty string.
substitute self.addr without the first and last element for self.addr.
substitute socket.AF_INET6 for self.address_family.
if not self.max_length is None.   remove the value under 'allow_empty_file' key from the kwargs dictionary and if the key exists,
substitute allow_empty_first_page for self.allow_empty_first_page.
substitute allow_files and allow_folders for self.allow_files and self.allow_folders.
append a tuple containing 2 elements: content and mimetype, to the self.alternatives list.
bcc, connection, attachments, headers and cc.   if alternatives exists substitute it for self.alternatives, if not self.alternatives is an empty list.
self.app_label is a string 'django_cache'.
get the value under the 'app_label' key of the options dictionary, substitute it for self.app_label.
substitute app_name for self.app_name.
substitute app_or_project for self.app_or_project.
call the method self.appendlist with 2 arguments: return value of the function force_text with 3 arguments:
keep_blank_values set to boolean True, encoding set to encoding.   call the method appendlist with 2 arguments: key and value.
substitute args for self.args.
call the method self.args_check with 3 arguments: filter_name, filter_func and args.
if argv is true, substitue it for self.argv, if not substitute sys.argv for self.argv.
substitute asvar for self.asvar.
call the method self.attach with arguments filename, content and mimetype.
append a tuple containing 3 elements: filename, content, mimetype to self.attachments list.
append filename to the self.attachments list.
if attachments exists substitute it for self.attachments, if not attachments is an empty list.
substitute new_attr for self.attr.
substitute old_attr for self.attr.
substitute attrs and choices for self.attrs and self.choices
convert self.index into a string and append it to '_' string, substitute it for value under the 'id' key of self.attrs dictionary.
self.attrs is an empty dictionary.
substitute attrs for self.attrs.
call the method attrs.copy, substitute the result for self.attrs.
if attrs is not None substitute it for self.attrs, or if not self.attrs is an empty dictionary.
substitute auto_id for self.auto_id.
and substitute the result for self.prefix.   substitute auto_id for self.auto_id.
call the method self.autocomplete.
use_l10n set to None and use_tz set to None.   substitute autoescape for self.autoescape.
append self.pointer to self.backout.
self.backout is an empty list.
add key to the self.bad_cookies set.
self.bad_cookies is an empty set.
substitute base for self.base.
created with an argument widget set to HiddenInput.   value under the INITIAL_FORM_COUNT of the self.base_fields dictionary is an instance of IntegerField class,
created with 2 arguments: required as boolean False and widget set to HiddenInput.   value under the MAX_NUM_FORM_COUNT of the self.base_fields dictionary is an instance of IntegerField class,
created with an argument widget set to HiddenInput.   value under the MIN_NUM_FORM_COUNT of the self.base_fields dictionary is an instance of IntegerField class,
value under the TOTAL_FORM_COUNT of the self.base_fields dictionary is an instance of IntegerField class,
substitute the location for self.base_location.
substitute base_url for self.base_url.
self.bcc is an empty list.
put bcc into a list, assign it to self.bcc.
append block to the value under the name key of self.blocks dictionary.
get the value under the name key of self.blocks dictionary, insert to it block at the beginning.
convert elements of defaultdict to list, substitute it for self.blocks.
self.blocks is a dictionary with elements: n for n.name, for every n in return value of the method nodelist.get_nodes_by_type,
substitute body for self.body.
substitute buf_size for self.buf_size.
increment self.buffer by chunk.
substitute empty bytes string for self.buffer.
truncate first size number of elements of self.buffer.
call the sio.read method, substitute the result for self.buffer.
substitute cache_choices for self.cache_choices.
substitute CacheEntry for self.cache_model_class.
substitute callback for self.callback.
self.callback is None.
call the method self.can_read.acquire.
call the method self.can_read.release.
call the method threading.Semaphore with an argument integer 0, substitute the result for self.can_read.
call the method self.can_write.acquire.
call the method self.can_write.release.
call the method threading.Semaphore with an argument integer 0, substitute the result for self.can_write.
self.cc is an empty list.
put cc into a list, assign it to self.cc.
set field cdata_tag for this class instance to None.
set self.cdata_tag to None.
use it and the re.I as the input arguments for function re.compile, put the result in the self.interesting.   evaluate function tag.lower, without the arguments, put the result in the self.cdata_tag.
append a tuple with 2 elements: obj and form.changed_data to self.changed_objects.
self.changed_objects is an empty list.
call the method self.characters with an argument contents.
substitute charset for self.charset.
self.charset is None.
call the method self.check,
call the method self.check with arguments: app_configs set to app_configs, tags set to tags, display_num_errors set to boolean True.
call the method self.check_migrations.
substitute boolean_check for self.check_test if check_test is None, otherwise substitute check_test for self.check_test.
append data to self.children.
extend self.children list with data.children.
self.children is an list with 2 elements: obj and data.
if children is true, copy children list to self.children, otherwise self.children is an empty list.
self.choice_cache is None.
call the function force_text with second element of choice as an argument, substitute the result for self.choice_label.
call the function force_text with first element of choice as an argument, substitute the result for self.choice_value.
append a tuple with 2 elements: f and f with first occurrence of the path replaced with an empty string, to self.choices.
and only if self.match is None or return value of the method self.match_re.search called with an argument f is true.   append a tuple containing 2 elements: full_file and f to self.choices list.
self.choices is an list containing an tuple with 2 elements: an empty string and string "---------".
self.choices is an empty list.
widget set to widget, label set to label, initial set to initial, help_text set to help_text, unpacked list args,   and unpacked dictionary kwargs.   substitute choices for self.choices.
substitute choices for self.choices.
convert elements of choices into a list, substitute it for self.choices.
substitute chunk_size for self.chunk_size.
substitute class_name for self.class_name.
strings "Please submit %d or more forms.", "Please submit %d or more forms." and self.min_num,   where '%d' is replaced with self.min_num, and code as a string 'too_few_forms'.   call the method self.clean.
substitute value for the value under the name key of the self.cleaned_data dictionary.
substitute the result for value.   substitute value for the value under the name key of the self.cleaned_data dictionary.
self.cleaned_data is an empty dictionary.
substitute cleaned_data for self.cleaned_data.
call the self.clear method.
call self.clear method.
call the method self.clear_cdata_mode.
close the file self.
call the method close on self.
call the method self.close.
call the self.close method.
substitute False for self.close_called.
substitute True for self.close_called.
substitute cmd for self.cmd.
substitute code for self.code.
if 'coerce' key of the kwargs dictionary exists remove it and substitute its value for self.coerce,
append tuple with 2 elements: command and token.source, append the result to self.command_stack.
remove first element from self.command_stack.
self.command_stack is an empty list.
call the method self.common_logger_config with 3 arguments: logger, config and incremental.
call the method self.common_logger_config with 3 arguments: root, config and incremental.
call the self.compile_messages with locations as argument,
substitute tuple with 2 elements: bz2.BZ2File and string 'r' for value under the 'bz2' key of the self.compression_formats dictionary.
self.compression_formats is an dictionary with 3 initial entries: tuple containing 2 elements: open and string 'rb' for None,
substitute conditions_nodelists for self.conditions_nodelists.
substitute self for self.config.configurator.
self.config is an instance of ConvertingDict, called with an argument config.
call the method self.configure_logger with 3 arguments: name, value under name key of loggers dictionary and boolean True.
call the method self.configure_logger with 2 arguments: name and value under loggers dictionary key name.
call the method self.configure_root with 2 arguments: root and boolean True.
call the method self.configure_root with an argument root.
call the method self.connection.close.
call the method self.connection.ehlo.
call the method self.connection.login with arguments self.username and self.password.
call the method self.connection.quit.
call the method self.connection.sendmail with arguments: from_email, recipients and return value of the function message.as_bytes.
call the method self.connection.starttls.
substitute connection for self.connection.
self.connection is a instance of a class contained in connection_class, instantiated with arguments: self.host, self.port,
call the function get_connection with argument fail_silently set to fail_silently, substitute it for self.connection.
self.connection is None.
substitute connection_reset for self.connection_reset.
substitute conn_type for self.connector.
if connector is true, substitute it for self.connector, otherwise substitute self.default for self.connector.
substitute content for self.content.
substitute self.rendered_content for self.content.
substitute content_length for self.content_length.
self.content_length is None.
substitute content_type for self.content_type.
self.content_type is None.
substitute content_type_extra for self.content_type_extra.
self.content_type_extra is None.
remove the first element from the self.context.
substitute context for self.context.
substitute context for self.context_data.
get the value under the key key of the self.cookies dictionary, domain expires for 'domain' key of the returned dictionary.
get the value under the key key of the self.cookies dictionary, call the cookie_date function with an argument:
get the value under the key key of the self.cookies dictionary, substitute expires for 'expires' key of the returned dictionary.
get the value under the key key of the self.cookies dictionary, substitute boolean True for 'httponly' key of the returned dictionary.
get the value under the key key of the self.cookies dictionary, substitute max-age for 'max-age' key of the returned dictionary.
get the value under the key key of the self.cookies dictionary, substitute path for 'path' key of the returned dictionary.
get the value under the key key of the self.cookies dictionary, substitute boolean True for 'secure' key of the returned dictionary.
substitute value for self.cookies dictionary value under the key key.
self.COOKIES is an empty dictionary.
self.cookies is an instance of a class SimpleCookie.
self.cookies is an instance of SimpleCookie class created with self.cookies as an argument.
all the method self.create_table with arguments: db and cache._table.
call the method self.create_table with arguments: db and tablename.
substitute Field.creation_counter for self.creation_counter.
substitute current_app for self.current_app.
call the method self.next_token, substitute the result for self.current_token.
substitute cyclevars for self.cyclevars.
if data is true, substitute it for self.data, if not self.data is an empty dictionary.
if data is true, substitute it for self.data, otherwise self.data is an empty dictionary.
substitute obj for self.data.
self.day_none_value is a tuple containing 2 elements: integer 0 and third element of empty_label.
substitute self.none_value for self.day_none_value.
substitute the result for self.event_stream.   remove the 'using' key from the options dictionary, substitute the return value for self.db, if the key doesnt exists substitute
substitute table for self.db_table.
substitute deactivate for self.deactivate.
if default_args exists substitute it for self.default_args, if not, self.default_args is an empty dictionary.
if default_kwargs exists, substitute it for self.default_kwargs, otherwise self.default_kwargs is an empty dictionary.
self.default_locale_path is None.
put the results into a list, substitute self.locale_paths for it.   substitute first element of self.locale_paths for self.default_locale_path.
substitute first element of self.locale_paths for self.default_locale_path.
substitute timeout for self.default_timeout.
call the method validators.ip_address_validators with arguments protocol, unpack_ipv4, substitute first element of the result for self.default_validators.
call the delete method with key and version set to version as arguments.
call the self.delete method with key and version set to version as arguments.
append obj to self.deleted_objects list.
self.deleted_objects is an empty list.
substitute deprecation_warning for self.deprecation_warning.
value under the item key of self.dict dictionary is None.
self.dict is an instance of OrderedDict class, created with arguments: tuples with 2 argument x and None, for every x in iterables,
append other_dict to self.dicts.
append value to self.dicts list.
substitute value for value under the key key of dictionary at last element of self.dicts.
self.dicts is an list with element builtins.
RemovedInDjango19Warning and integer 2.   substitute dicts for self.dicts.
substitute digits for self.digits.
or settings.FILE_UPLOAD_PERMISSIONS if it is.   self.directory_permissions_mode is a tuple containing: directory_permissions_mode if directory_permissions_mode is not None,
substitute dirpath for self.dirpath.
get the value under the 'domain' key of the options dictionary, substitute it for self.domain.
substitute whitelist for self.domain_whitelist.
get the value under the 'dry_run' key of the options dictionary, if the key exists substitute it for self.dry_run,
subtract self.STDOFFSET with self.DSTOFFSET, substitute the result for self.DSTDIFF.
substitute self.STDOFFSET for self.DSTOFFSET.
call the function timedelta with an argument seconds set to negative _time.altzone, substitute the result for self.DSTOFFSET.
substitute email_backend for self.email_backend.
call the method self.emit_post_migrate with arguments verbosity, interactive and database.
if not, self.merge is boolean False.   get the value under the 'empty' key of the options dictionary, if the key exists substitute it for self.empty,
call the method self.empty_block_tag with an argument token.
substitute empty_label for self.empty_label.
self.empty_label is None.
otherwise substitute return value of the function _ called with an argument ':' for self.label_suffix.   substitute empty_permitted for self.empty_permitted.
if not, self.coerce is an identity lambda function with an argument val.   if 'empty_value' key of the kwargs dictionary exists remove it and substitute its value for self.empty_value,
if not, self.coerce is an identity lambda function with an argument val.   if 'empty_value' key of the kwargs dictionary exists remove it and substitute its value for self.empty_value,
call the method self.empty_variable with an argument token,
substitute charset for self.encoding.
get the value under the 'charset' key of content_params dictionary, substitute it for self.encoding.
encoding set to None and unpacked dictionary _params.   substitute encoding for self.encoding.
substitute encoding for self.encoding.
call the method self.end_object with an argument obj.
call the method self.end_serialization.
call the method self.endChannelElement with an argument handler.
call the method self.endElement with an argument name.
substitute ending for self.ending.
call the method self.enter_command with 2 arguments command and token.
substitute environ for self.environ.
slice the rawdata from i-th to the j-th element, replace with it '%r' in the string "bad end tag: %r", use it to call the method self.error.
slice the rawdata from k to endpos, then take the first 20 elements of the previous slice,
call the method self.error with an argument self.cmd.missing_args_message.
append error_class converted into a string to string 'errorlist ', substitute the result for self.error_class.
self.error_class is a string 'errorlist'.
substitute .error_class for self.error_class.
substitute error_class for self.error_class.
substitute messages.error_list for the value under the field key of the self.error_dict dictionary.
self.error_dict is an empty dictionary.
extend the self.error_list list with message.error_list.
self.error_list is an empty list.
substitute list containing element self for self.error_list.
get 'error_messages' attribute from the options object, if it exists substitute it for self.error_messages,
substitute messages for self.error_messages.
call self.errors.
call the method self.event_stream.expandNode with an argument node.
call the method pulldom.parse with arguments: self.stream and return value of the method self._make_parser,
substitute exception for self.exception.
get 'exclude' attribute from the options object, if it exists substitute it for self.exclude, if not self.exclude is None.
call the method self.execute, with 2 arguments: unpacked list args and unpacked dictionary cmd_options.
call the method self.exit_command.
call the method self.extend_nodelist with 3 arguments: nodelist, compiled_result and token.
call the method self.extend_nodelist with 3 arguments: nodelist, instance of TextNode class, created with an argument token.contents,
call the method self.extend_nodelist with 3 arguments: nodelist, var_node and token.
call the function handle_extensions exts, substitute self.extensions.
substitute var for value under the name key of the self.extra_context dictionary.
if extra_context is true, substitute it for self.extra_context, if not self.extra_context is an empty dictionary.
remove kwargs dictionary entry under the 'extra_context' key, if it exists substitute it for self.extra_context,
if headers exists substitute it for self.extra_headers, if not extra_headers is an empty dictionary.
substitute fail_silently for self.fail_silently.
format string '&#%s;' with name, append it to self.fed.
format string '&%s;' with name, append it to self.fed.
append d to self.fed.
self.fed is an empty list.
result of the function iri_to_uri called with an argument link for 'link',   result of the function to_unicode called with an argument description for 'description',   result of the function to_unicode called with an argument language for 'language',   result of the function to_unicode called with an author_email description for 'author_email',   result of the function to_unicode called with an argument author_name for 'author_name',   result of the function iri_to_uri called with an argument author_link for 'author_link',   result of the function to_unicode called with an argument subtitle for 'subtitle',   if true, categories is value for 'categories' key, if not, empty tuple is value for 'categories' key,   result of the function iri_to_uri called with an argument feed_url for 'feed_url',   result of the function to_unicode called with an argument feed_copyright for 'feed_copyright',   if true, feed_guid is value for 'id' key, if not, lik is value for 'id' key and ttl for 'ttl'.   update self.feed dictionary with kwargs.
self.feed is an dictionary with 13 initial entries, result of the function to_unicode called with an argument title for 'title',
call the method self.fetch_command with first element of options.args as argument, on the result call the method print_help,
call the method self.fetch_command with an argument command, call the method run_from_argv on the result with an argument self.argv.
self.field.choice_cache is a list containing results of the method self.choice called with an argument obj,
substitute field for self.field.
size, charset, content_type_extra.   substitute field_name for self.field_name.
substitute field_name for self.field_name.
call the function copy.deepcopy with an argument self.base_fields, substitute the result for self.fields.
substitute fields for self.fields.
get 'fields' attribute from the options object, if it exists substitute it for self.fields, if not self.fields is None.
call the file.__enter__ method on self.
call the file.__exit__ method on self with exc, value and tb as the arguments.
call the method self.file.close.
close the file object.
position the file self.file pointer at the end.
set the file pointer at the beginning of the self.file file.
position the file pointer at the start of the self.file file.
set file pointer at the beginning of the self.file file.
position file self.file pointer at the pos position.
substitute file_size for self.file.size.
call the method self.file.write with argument raw_data.
write raw_data to self.file file.
call the function BytesIO, substitute the result for self.file.
substitute file for self.file.
substitute file_name for self.file_name.
open the file self.name in mode or self.mode mode, whichever exists, assign the file handler to self.file.
call the os.fdopen function with fd, mode and bufsize as the arguments, assign the file handle object to self.file.
self.file is a instance of a class TemporaryUploadedFile initialized with arguments: self.file_name, self.content_type, integer 0,
substitute file_name for self.file_name.
self.file_name is None.
get 'EMAIL_FILE_PATH' from the settings, if it exists, substitute it for self.file_path, if not substitute None for self.file_path.
pop the value under the 'file_path' key of kwargs dictionary, substitute it for self.file_path.
call the os.path.abspath with argument self.file_path, substitute the result for self.file_path.
self.file_permissions_mode is a tuple containing: file_permissions_mode if file_permissions_mode is not None,
substitute filepath for self.filepath.
if files is true, substitute it for self.files, if not self.files is an empty dictionary.
if data is true, substitute it for self.files, otherwise self.files is an empty dictionary.
self.FILES is an instance of MultiValueDict class.
substitute filter_expr and nodelist for self.filter_expr and self.nodelist, respectively.
substitute filter_expression for self.filter_expression.
update self.filters dictionary with lib.filters.
substitute filter_func for value under the name key of self.filters dictionary.
self.filters is an empty dictionary.
where '%s' is replaced with elemnts of token from upto index till the end, and token.   substitute filters for self.filters.
call the method self.find_template_cache.clear.
substitute result for self.find_template_cache dictionary value under the key key.
self.find_template_cache is an empty dictionary.
self.first is boolean False.
substitute left for self.first.
call the method parser.expression with an argument bp, substitute the result for self.first.
self.first is boolean True.
increment self.fixture_count by one.
self.fixture_count is integer 0.
increment self.fixture_object_count by objects_in_fixture.
self.fixture_object_count is integer 0.
substitute flags for self.flags.
substitute flo for self.flo.
substitute form for self.form.
substitute format for self.format if format is true, if not self.format is None.
substitute format_string for self.format_string.
if from_email exists substitute from_email for self.from_email, if not substitute settings.DEFAULT_FROM_EMAIL for self.from_email.
call the method self.full_clean.
substitute func for self.func.
self.GET is an instance of QueryDict class created with an argument mutable set to boolean True.
slice the rawdata to obtain substring from i-th to j-th element, use it as the argument for the method call to the self.handle_data.
convert tag to lowercase, use it as the argument for the call to the method self.handle_endtag.
call the method self.handle_field with arguments obj and filed.
call the method self.handle_file_complete with arguments old_field_name, counters.
call the method self.handle_fk_field with arguments obj and field.
call the method self.handle_m2m_field with arguments obj and filed.
call the method self.handle_startendtag with tag and attrs as the arguments.
call the method self.handle_starttag, with tag and attrs as the arguments.
get the hash value of the tup, substitute it for self.hashvalue.
if field.help_text is true, substitute field.help_text for self.help_text, if not self.help_text is an empty string.
substitute help_text for self.help_text.
get 'help_texts' attribute from the options object, if it exists substitute it for self.help_texts, if not self.help_texts is None.
get the value under the 'hide_empty' key of the options dictionary, if the key exists substitute it for self.hide_empty,
substitute hint for self.hint.
if host exists substitute it for self.host, if not substitute settings.EMAIL_HOST for self.host.
call the method form.add_initial_prefix with an argument self.auto_id, substitute the result for self.html_initial_id.
call the method form.add_initial_prefix with an argument name, substitute the result for self.html_initial_name.
call the method form.add_prefix with an argument self, substitute the result for self.html_name.
substitute id for self.id.
substitute Tok.num for self.id.
get the value under the 'ignore' key of the options dictionary, substitute it for self.ignore.
DEFAULT_DB_ALIAS for self.db.   remove the 'ignorenonexistent' key from the options dictionary, substitute the return value for self.db,
put elements of ignore_patterns into a set, substitute the length of it for self.ignore_patterns.
call the method self.importer with an argument used.
substitute include_html for self.include_html.
call the self.indent method with integer 0 as an argument.
replace '%s' with type of the obj object.   call the method self.indent with argument integer 1.
call the method self.indent with argument integer 1.
call the method self.indent with argument integer 2.
substitute index for self.index.
substitute initial_id for self.auto_id.
if initial is true, substitute it for self.initial, if not self.files is an empty dictionary.
remove entry under 'initial' key of the kwargs dictionary, substitute it for self.initial_extra if it exists,
call the method self.inner_run with 2 arguments: None and unpacked dictionary options.
substitute input_formats for self.input_formats.
remover the entry under the 'type' key of the attrs dictionary, substitute it for self.input_type, if the key doesnt exists,
call the method self.instance.full_clean with 2 arguments: exclude set to exclude and validate_unique set to boolean False.
call the method self.instance.validate_unique with an argument exclude set to exclude.
call the function construct_instance with 4 arguments: self, self.instance, opts.fields and construct_instance_exclude,
substitute instance for self.instance.
call the method opts.model, substitute the result for self.instance.
call the method self.fk.rel.to, substitute the result for self.instance.
get the value under the 'interactive' key of the options dictionary, substitute it for self.interactive.
get the value from the options dictionary under the key 'interactive', substitute it for self.interactive.
set field interesting for this class instance to interesting_cdata from module _html_parser.
substitute _html_parser.interesting_normal for self.interesting.
replace '%s' in the string '</\s*%s\s*>' with the result of the function call tag.lower(),
call the method self.invalid_block_tag with 3 arguments: token, command and parse_until.
substitute inverse_match for self.inverse_match.
substitute '%s' with return value of the function get_text_list called with 2 arguments:self.extensions converted into a list and string 'and'.   self.invoked_for_django is boolean False.
self.invoked_for_django is boolean True.
initial set to None, error_class set to ErrorList, label_suffix set to None, empty_permitted set to boolean False.   if data is not None or files is not None, self.is_bound is boolean True, otherwise it is boolean False.
if data is not None or files is not None, self.is_bound is boolean True, otherwise it is boolean False.
substitute is_reversed for self.is_reversed.
if not self.extra_context is an empty dictionary.   remove kwargs dictionary entry under the 'isolated_context' key, if it exists substitute it for self.isolated_context,
append item to self.items.
self.items is an empty list.
remove the entry under the 'fields' key of the self.json_kwargs dictionary.
remove the entry under the 'stream' key of the self.json_kwargs dictionary.
substitute a tuple with 2 elements: characters ',' and ': ' for value under the 'separators' key of the self.json_kwargs dictionary.
call the method self.options.copy, substitute the result for self.json_kwargs.
get the value under the 'keep_pot' key of the options dictionary, substitute it for self.keep_pot.
if key exists, substitute it for self.key, if not substitute settings.SECRET_KEY for key.
call the method params.get with 2 arguments, string 'KEY_FUNCTION' and None, use the result as the argument for the call to the function get_key_func, substitute the result for the self.key_func.
call the params.get method with string 'KEY_PREFIX' and an empty string as arguments, substitute the result for self._key_prefix.
append key to self.keyOrder.
append key to self.keyOrder dictionary.
remove k element from self.keyOrder dictionary.
remove key element from self.keyOrder dictionary.
remove first element of result from self.keyOrder dictionary.
self.keyOrder is an empty list.
if data is true, substitute list created from elements of data, substitute it for self.keyOrder, otherwise self.keyOrder is an empty list.
substitute kwargs for self.kwargs.
call the method pretty_name with an argument name, substitute the result for self.label.
substitute self.field.label for self.label.
substitute label_suffix for self.label_suffix.
if label_suffix is not None substitute label_suffix for self.label_suffix,
if not self.localized_fields is None.   get 'labels' attribute from the options object, if it exists substitute it for self.labels, if not self.labels is None.
substitute language for self.language.
find the first subgroup of the matched string from the match object, convert it to lowercase, substitute it for tag and self.lasttag.
substitute length and mime_type for self.length and self.mime_type.
substitute length for self._length.
substitute level for self.level.
substitute value_not_found_exception for self.LibraryValueNotFoundException.
substitute limit_choices_to for self.limit_choices_to.
substitute the limit_value for self.limit_value.
call the method token_string.count with an argument '\n', append the result to self.lineno.
self.lineno is integer 1.
self.lineno is None.
convert var into an floating point number, substitute it for self.literal.
convert self.literal into an integer, substitute it for self.literal.
call the function unescape_string_literal with an argument var, use it as an argument for the call to the function mark_safe,
self.literal is None,
get the value from the options dictionary under the key 'load_initial_data', substitute it for self.load_initial_data.
call the method self.load_label with an argument fixture_label.
call the self.load_middleware method.
call the method self.loaddata with an argument fixture_labels.
increment self.loaded_object_count by loaded_objects_in_fixture.
self.loaded_object_count is integer 0.
substitute loader, name and dirs for self.loader, self.loadname and self.dirs, respectively.
substitute locale_dir for self.locale_dir.
call the function os.path.abspath with an argument 'locale', append the result to self.locale_paths.
convert settings.LOCALE_PATHS into a list and extend list self.locale_paths with it.
call the method os.path.abspath with an argument dirpath, join the result and dirname into a file path, inset it at the beggining of self.locale_paths.
self.locale_paths is an empty list.
join 'conf' and 'locale' into a file path, use it as an argument for the call the method os.path.abspath,
substitute localize for self.localize.
get 'localized_fields' attribute from the options object, if it exists substitute it for self.localized_fields,
substitute the return value of the function abspathu with self.base_location as argument for self.location.
self.lookups is None.
where '%s' is replaced with var.   call the method var.split with an argument VARIABLE_ATTRIBUTE_SEPARATOR, convert the result to a tuple and substitute it for self.lookups.
substitute loopvars and sequence for self.loopvars and self.sequence, respectively.
substitute m2m_data for self.m2m_data.
self.m2m_data is None.
call the method self.make_writeable with an argument new_path.
self.managed is boolean True.
compile self.match regular expression, substitute it for self.match_re.
decimal_places set to None, unpacked list args and unpacked dictionary kwargs.   substitute max_digits and decimal_places for self.max_digits and self.decimal_places.
substitute max_expr for self.max_expr.
and unpacked dictionary kwargs.   substitute max_length and min_length for self.max_length for self.min_length.
remove the value under 'max_length' key from the kwargs dictionary and if the key exists substitute it for self.max_length,
substitute max_value and min_value for self.max_value and self.min_value.
substitute max_width for self.max_width.
call the method self.merge with an argument translation.
if not, self.dry_run is boolean False.   get the value under the 'merge' key of the options dictionary, if the key exists substitute it for self.merge,
substitute message for self.message.
self.message_context is None.
assign path_info to the value under the 'PATH_INFO' key of the self.META dictionary.
assign script_name to the value under the 'SCRIP_NAME' key of the self.META dictionary.
self.META is an empty dictionary.
substitute environ for self.META.
convert value under the 'REQUEST_METHOD' key of the environ dictionary to uppercase, substitute it for self.method.
self.method is None.
substitute new for self.mod.
substitute new_mod for self.mod.
substitute old for self.mod.
substitute old_mod for self.mod.
substitute file.mode for self.mode.
get 'model' attribute from the options object, if it exists substitute it for self.model, if not self.model is None.
self.model_name is a string 'cacheentry'.
add obj.object.__class__ to self.models set.
self.models is an empty set.
self.month_none_value is a tuple containing 2 elements: integer 0 and second element of empty_label.
substitute self.none_value for self.month_none_value.
substitute months for self.months.
substitute msg for self.msg.
append list containing string '--no-location' to self.msgattrib_options.
append list containing string '--no-wrap' to self.msgattrib_options.
append list containing string '--no-location' to self.msgmerge_options.
append list containing string '--no-wrap' to self.msgmerge_options
append list containing string '--no-location' to self.msguniq_options.
append list containing string '--no-wrap' to self.msguniq_options.
call the method threading.RLock, substitute the result for self.mutex.
substitute name, nodelist and parent for self.name, self.nodelist and self.parent.
substitute name and value for self.name and self.value.
substitute name for self.name.
if name is true, substitute it for self.name, otherwise substitute func.__name__ for self.name.
join self.namespaces into a string separated with character ':', substitute it for self.namespace.
substitute namespace for self.namespace.
self.namespaces is an empty list.
append x to self.namespaces list for every x in namespaces, only if x is true.
substitute negate for self.negate.
substitute negated for self.negated.
invert self.negated.
substitute new_method_name for new_method_name.
call the method self.save_new with 2 arguments: form and commit as commit, append the result to self.new_objects.
self.new_objects is an empty list.
substitute next for self.next.
get the value under the 'no_obsolete' key of the options dictionary, substitute it for self.no_obsolete.
call the function compile_string with 2 arguments: template_string and origin, substitute the result for self.nodelist.
substitute nodelist for self.nodelist.
substitute t.nodelist for self.nodelist.
self.nodelist_empty is an instance of NodeList class.
substitute nodelist_empty for self.nodelist_empty.
substitute nodelist_loop for self.nodelist_loop.
substitute nodelist_true and nodelist_false for self.nodelist_true and self.nodelist_false, respectively.
self.none_value is a tuple containing 2 elements: integer 0 and empty_label.
substitute notation_name for self.notation_name.
substitute number for self.number.
substitute obj for self.obj.
assign obj to the obj field of self instance of this class.
substitute obj for self.object.
convert self.object_list to a list.
substitute object_list for self.object_list.
self.object_name is a string 'CacheEntry'.
call the self.get_dum_object method with an argument obj, use the result as an argument for the self.objects.append method.
self.objects is an empty list.
call the function get_language, substitute the result for self.old_language.
substitute old_method_name for self.old_method_name.
get 'value' attribute of the _active object
call the method self.open()
call the method self.open.
call the method self.options.update with dictionary as an argument, containing 1 element: boolean False for 'use_decimal'.
substitute options for self.options.
substitute origin for self.origin.
convert orphans into an integer and substitute it for self.orphans.
substitute paginator for self.paginator.
substitute params for self.params.
substitute parent_instance for self.parent_instance.
substitute parent_name for self.parent_name.
substitute parent_widget for self.parent_widget.
substitute parsed for self.parsed.
if password is None substitute settings.EMAIL_HOST_PASSWORD for self.username, if not substitute password for self.password.
allow_files set to boolean True, allow_folders set to boolean False, required set to boolean True, widget set to None,   label set to None, initial set to None, help_text set to an empty string, unpacked list args, unpacked dictionary kwargs.   substitute path, match and recursive for self.path, self.match and self.recursive.
self.path is an empty string.
strip trailing '/' from the script_name string, remove first occurrence of '/' in path_info string, append second result to the first, separated with '/', assign the result to self.path.
self.path_info is an empty string.
substitute path_info for self.path_info.
append the tempdir to self.paths_to_remove.
append tempdir to self.self.paths_to_remove.
self.paths_to_remove is an empty list.
convert per_page into an integer and substitute it for self.per_page.
remove element from kwargs dictionary under the key 'pk_field', substitute it for self.pk_field if it exists,
self.plural is an lambda function with an argument n, which returns result of boolean expression n not equal to integer 1,
self.pointer is integer 0.
substitute i for self.pointer.
remove the first element from self.backout, substitute the result for self.pointer.
substitute DEFAULT_PORT for self.port.
if port exists substitute it for self.host, if not substitute settings.EMAIL_PORT for self.port.
increment self.pos by integer 1.
self.pos is integer 0.
decrement self.position by length of bytes.
increment self.position by length of output.
self.position is an integer 0.
self.POST is an instance of QueryDict class created with an argument mutable set to boolean True.
substitute prefix for self.prefix.
if prefix is true, substitute it for self.prefix, otherwise call the method self.get_default_prefix,
call the method self.prepend_token with an argument token,
call the function os.path.basename with first element of self.argv as an argument, substitute the result for self.prog_name.
self.proxy is boolean False.
substitute pubid for self.pubid.
call the method self.queryset.filter with an argument, unpacked dictionary with an entry: pk for key.
substitute field.queryset for self.queryset.
prefix set to None, queryset set to None and unpacked dictionary kwargs.   substitute queryset for self.queryset.
and unpacked dictionary kwargs.   substitute queryset for self.queryset.
call the method self.reader_enters.
call the method self.reader_leaves.
substitute reason for self.reason_phrase.
get the value under the self.status_code key of the REASON_PHRASES dictionary, if it exists substitute it for the self.reason_phrase,
call the re.compile function with self.regex and self.flags as arguments, substitute the result for self.regex.
substitute regex for self.regex.
call the function re.compile with 2 arguments: elements of parts joined into a string, separated with '|',
self.regexes is an empty dictionary.
call the method self.registered_checks.append with argument check.
self.registered_checks is an empty list.
decrement self.remaining by length of result.
substitute limit for self.remaining.
remove item from self dictionary.
call the method self.remove_potfiles.
self.render_context is a instance of RenderContext class.
substitute render_value for self.render_value.
substitute renderer for self.renderer.
call the method self.replace_header with argument string 'Content-Type', 'text/%s; charset="%s"', where '%s' symbols are replaced by:
self.request is None.
if 'require_all_fields' key of the kwargs dictionary exists remove it and substitute its value for self.require_all_fields,
initial set to None, help_text set to an empty string, error_messages set to None, show_hidden_initial set to boolean False,   validators is an empty, localize set to boolean False, label_suffix set to None.   substitute required, label and initial for self.required, self.label and self.initial.
and "requires_system_checks", which is illegal. Use only "requires_system_checks".', replace '%s' for self.__class__.__name__.   call the method self.requires_system_checks with an argument: self.requires_system_checks if has_new_option is true,
call the method self.reset.
self.resolver_match is None.
call the self.run method with unpacked dictionary options as an argument.
call the method self.run_shell with an argument shell set to value under the 'interface' key of the options dictionary.
call the method self.run_validators with an argument out.
call the method self.run_validators with an argument value.
code set to string 'invalid_choice' and params as a dictionary with an entry, val for 'value'.   call the method self.run_validators with an argument value.
substitute s for self.s.
call the force_str function with an argument: salt, if it exists, if not with a string '%s.%s', with '%s' replaced by,
substitute save_as_new for self.save_as_new.
substitute save_m2m for self.save_m2m.
append form to self.saved_forms.
self.saved_forms is an empty list.
substitute schemes for self.schemes.
self.second is None.
call the method parser.expression with an argument bp, substitute it for self.seconds.
position the file pointer at the beginning of self file.
call the self.seek method with argument integer 0.
if the key doesnt exists call the six.String function and substitute the result for self.stream.   remove the 'fields' key from the options dictionary and substitute it for self.selected_fields,
call the function force_str with an argument sep, substitute the result for self.sep.
call the method serializers.get_public_serializer_formats, substitute the result for self.serialization_formats.
call the self.set method with key, new_value and version set to version as arguments.
call the method self.set with key, value, timeout and version as arguments.
call the method self.set with arguments key, value, timeout set to timeout, version set to version.
call the method self.set with key, value, version incremented by delta, as arguments.
call the method self.set_cdata_mode with tag as the argument.
call the method self.set_charset with utf8_charset as an argument.
call the method self.set_cookie with 5 arguments: key, max_age as integer 0, path as path, domain as domain,
call the method payload.decode with 2 arguments: text and utf8_charset, substitute the result for self._payload.
call the method self.setFeature with 2 arguments: handler.feature_external_ges and boolean False.
call the method self.setFeature with 2 arguments: handler.feature_external_pes and boolean False.
call the method self.setlist with 2 arguments: k and v.
call the method self.setlist with 2 arguments: key and default_list.
call the method self.setlistdefault with an argument key, append value to the result.
call the method self.setlistdefault with an argument key, extend the result with value_list.
substitute setting and nodelist for self.setting and self.nodelist, respectively.
substitute exc for self.settings_exception,
self.settings_exception is None.
call the self.setup_environ method.
substitute show_hidden_initial for self.show_hidden_initial.
get the value from the options dictionary under the key 'traceback', substitute it for self.show_traceback.
substitute sign for self.sign.
substitute silent for self.silent.
substitute length of content for self.size.
substitute size for self.size.
substitute source for self.source.
call the self.start_object with an argument obj.
if the key doesnt exists substitute boolean False for self.use_natural_primary_keys.   call the method self.start_serialization
cal the method self.startElement with 2 arguments: name and attrs.
and result of bitwise OR performed on 2 operands: re.MULTILINE and re.VERBOSE,   substitute the result for value under the state key of the self.regexes dictionary.   substitute first for self.state.
substitute state for self.state.
substitute status for self.status_code.
replace '%s' in string "Notice: Couldn't set permission bits on %s. You're probably using an uncommon filesystem setup. No problem.",
call the self.stderr.write method with string "    Failed to install custom SQL for %s.%s model: %s\n" as argument,
call the self.stderr.write method with string "    Failed to install index for %s.%s model: %s\n" as argument,
write string "App '%s' could not be found. Is it in INSTALLED_APPS?" with '%s' where '%s' is replaced with app_label,
replace '%s' in a string "Error: %s" with error_text, write it to self.stderr.
call the self.stderr.write, with string "The po files under %s are in a seemingly not writable location. mo files will not be updated/created." as argument, with '%s' replaced by dirpath.
write msg to self.stderr stream.
self.stderr is an instance of an OutputWrapper object, created with 2 arguments: value under the 'stderr' key of the options dictionary, if it doesnt exists use the sys.stderr instead, and self.style.ERROR.
self.stderr is an OutputWrapper object instance, created with value under the 'stderr' key of the options dictionary as an argument,
call the function timedelta with an argument seconds set to negative _time.timezone, substitute the result for self.STDOFFSET.
self.stdout.ending is None.
flush the output buffer of the self.stdout object.
call the method registry.tags_available, sort the result and join it into a string, separate by newlines, write it to self.stdout.
call the method connection.ops.end_transaction_sql, use the result as the argument for the call to the method self.style.SQL_KEYWORD,
call the method self.stdout.write with an argument string 'examining files with the extensions: %s\n',
replace '%s' in string 'ignoring directory %s\n' with dirname, write it to self.stdout stream.
replace '%s' in string 'ignoring file %s in %s\n' with filename and dirpath, write it to self.stdout.
call the self.stdout.write method with string 'processing file %s in %s\n' as argument, replacing all the occurrences of '%s' with f and dirpath, respectively.
substitute '%s' in a string "    - %s\n" with return value of the operation.describe method, write the result to self.stdout.
call the self.stdout.write method with string "    Creating table %s\n" as argument, with all occurrences of '%s' replaced with model._meta.db_table.
call the self.stdout.write method with string "    Installing custom SQL for %s.%s model\n" as argument,
call the self.stderr.write method with string "    Installing index for %s.%s model\n" as argument,
call the self.stderr.write method with string "    No custom SQL for %s.%s model\n" as argument,
call the self.stdout.write method with string "    Processing %s.%s model\n" as argument, with all occurrences of '%s' replaced with,
substitute '%s' in a string "  %s:\n" with return value of the self.style.MIGRATE_LABEL method called with argument writer.filename,
write string "  all instances of the codebase have applied the migrations you squashed," to self.stdout.
call the self.stdout.write method, with string "  Applying %s..." with '%s' replaced with migration and ending set to '', as arguments.
write the string "  Creating tables...\n" to the standard output.
write the string "  Installing custom SQL...\n" to the standard output.
write string "  Installing indexes...\n" to the standard output.
call the method self.stdout.write with string "  No migrations to apply." as an argument.
write string "  No optimizations possible." to self.stdout stream.
replace '%s' in string "  Optimized from %s operations to %s operations." with lengths of operations and ew_operations, respectively,
write string "  the new migration will be used for new installs. Once you are sure" to self.stdout.
call the self.stdout.write method, with string "  Unapplying %s..." with '%s' replaced with migration and ending set to '', as arguments.
write string "  you can delete them." to self.stdout.
self.style.MIGRATE_HEADING, write the result to self.stdout.   write string "  You should commit this migration but leave the old ones in place;" to self.stdout.
append migration.name to string ' - ', write it to self.stdout stream.
call the self.stdout.write method with string " (no migrations)" and self.style.MIGRATE_FAILURE as arguments.
substitute '%s' with title in the string " [ ] %s", write it to the standard output.
substitute '%s' with title in the string " [X] %s", write it to the standard output.
substitute '%s' in a string "\nCreated new merge migration %s" with writer path, write it to self.stdout.
append new line to line, write it to self.stdout stream.
use it as an argument for the call to the method self.style.MIGRATE_HEADING, write the result to self.stdout.   call the method writer.as_string, append newline to the result, write it to self.stdout.
replace '%s' in string "Cache table '%s' already exists." with tablename, write it to the self.stdout stream.
replace '%s' in string "Cache table '%s' created." with tablename, write it to self.stdout.
call the method self.stdout.write with an argument string "Checking %s for fixtures...",
write string "Cleaning up temporary files.\n" to self.stdout stream.
replace '%s' in string "copying plural forms: %s\n" with plural_form_line, write it to self.stdout.
replace '%s' in string "Creating %s\n" with new_path, write it to the self.stdout stream.
replace '%s' in string "Downloading %s\n", with display_url, write it to self.stdout stream.
substitute '%s' in string "Extracting %s\n" with filename, write it to self.stdout stream.
write string "Flush cancelled.\n" to self.stdout stream.
call the method self.stdout.write with an argument string "Installed %d object(s) (of %d) from %d fixture(s)",
call the method self.stdout.write with an argument string "Installed %d object(s) from %d fixture(s)",
call the method self.stdout.write with an argument string "Installing %s fixture '%s' from %s.",
call the method self.stdout.write with an argument string "Loading '%s' fixtures...", where '%s' is replaced with fixture_name.
substitute '%s' in string "No changes detected in app '%s'" with the result of the method app_labels.pop, write it to self.stdout.
substitute '%s' in string "No changes detected in apps '%s'" with the app_labels joined into a string, separated by string "', '",
write string "No changes detected" to self.stdout stream.
write string "No conflicts detected to merge." to self.stdout stream.
call the method self.stdout.write with an argument string "No fixture '%s' in %s.", where '%s' is replaced with fixture_name,
write string "Performing system checks...\n\n" to self.stdout stream.
replace '%s' in string "processing locale %s\n" with locale, write it to self.stdout.
call the method self.stdout.write, with an argument string "Rendering %s template files with extensions: %s\n",
where '%s' is replaced with app_or_project and extensions joined into a string, separated by a string ', '.   call the method self.stdout.write, with an argument string "Rendering %s template files with filenames: %s\n",
write a string "Resetting sequences\n" to self.stdout stream.
substitute '%s' in string "UnicodeDecodeError: skipped file %s in %s" with f.file and f.dirpath, write it to self.stdout.
call the method self.stdout.write with an argument: string "%(started_at)s\nDjango version %(version)s, using settings %(settings)r\n"
call self.stdout.write method with app_name and self.style.MIGRATE_LABEL as arguments.
write errors to self.stdout.
write msg to self.stderr stream.
write the result to the self.stdout stream.   write output to self.stdout stream.
replace '%s' in a string "Created new squashed migration %s" with writer.path, use it as an argument for the call to the method,
substitute '%s' in a string "Full migrations file '%s':" with writer.filename, append newline to it,
substitute '%s' in a string "Merging %s" with app_label,
substitute '%s' in a string "Migrations for '%s':" with app_label, append newline to it,
call the self.style.MIGRATE_HEADING method, with string "Operations to perform:" as an argument,
call the method self.style.MIGRATE_HEADING with an argument string "Optimizing...", write it to self.stdout.
call the self.style.MIGRATE_HEADING method with string "Running migrations:" as an argument, use the result as an argument for the call to the self.stdout.write method.
call the self.style.MIGRATE_HEADING with string "Synchronizing apps without migrations:" as an argument,
call the method self.style.MIGRATE_HEADING with an argument string "Will squash the following migrations:",
for every a and n in targets, put a into a set, join all the set elements into a string separated by string ', ',
substitute '%s' in a string "  Branch %s" with migration.name,
join the executor.loader.unmigrated_apps into a string separated by string ', ' append it to the end of a string "  Synchronize unmigrated apps: ",
replace '%s' in string "%s, from %s" with second and first element of the first targets row, respectively,
convert the first element of the first row of targets to string, append it to the string "  Unapply all migrations: ",
wrte to the standard output result of the call to the method self.style.MIGRATE_SUCCESS with string " FAKED" as a argument.
wrte to the standard output result of the call to the method self.style.MIGRATE_SUCCESS with string " OK" as a argument.
call the method self.style.NOTICE with string "  Run 'manage.py makemigrations' to make new migrations, and then re-run 'manage.py migrate' to apply them." as an argument, use the result as an argument for the call to the self.stdout.write method.
call the method self.style.NOTICE with string "  Your models have changes that are not yet reflected in a migration, and so won't be applied." as an argument, use the result as an argument for the call to the self.stdout.write method.
call the method self.style.NOTICE with an argument:
string: "\nYou have unapplied migrations; your app may not work properly until they are applied.", write it to self.stdout.   call the method self.style.NOTICE with an argument string "Run 'python manage.py migrate' to apply them.\n",
call the method connection.ops.start_transaction_sql, use the result as an argument for the call to the method self.style.SQL_KEYWORD,
write shutdown_message to self.stdout file stream.
call method self.stdout.write with statement as an argument.
self.stdout is an instance of OutputWrapper class created with an argument: value under the 'stdout' key of the options dictionary,
call the self.stream.close function.
call the method self.stream.flush.
write 79 '-' characters into self.stream file stream.
write a newline into a self.stream file stream.
call the method self.stream.write with argument string '%s\n', with '%s' replaced with msg_data.
write a white space to the self.stream file stream.
write ',' to the self.stream file stream.
write a '[' to the self.stream file stream.
write ']' to the self.stream file stream.
write a new line to the self.stream file stream.
write new line to the self.stream file stream.
write 79 '-' characters into self.stream file stream.
write a newline character into self.stream file stream.
call the as_bytes method on the return value of the message.message method append to it '\n' character, use it as the argument for the call to the self.stream.write method.
pop the value under the 'stream' key of the kwargs dictionary, if it exists replace it for self.stream, if not replace sys.stdout for self.stream.
self.stream is None.
open the file in mode 'ab' and with file name obtained by calling the self._get_filename method.
remove the 'stream' key from the options dictionary and substitute it for self.stream,
call the function six.StringIO with an argument stream_or_string, substitute the result for self.stream.
substitute stream for self.stream.
substitute stream_or_string for self.stream.
and unpacked dictionary kwargs.   substitute streaming_content for self.streaming_content.
call the function color_style, substitute the result for self.style.
call the color_style method, substitute the result for self.style.
call the function no_style, substitute the result for self.style.
call the function no_style, substitute it for self.style.
substitute None for self.style_func.
substitute style_func for self.style_func.
substitute subject for self.subject.
get the value under the 'symlinks' key of the options dictionary, substitute it for self.symlinks.
substitute sysid for self.sysid.
call the method self.tag with 2 arguments: function_name and compile_func.
call the function self.tag with 2 arguments: function_name and compile_func.
call the method self.tag, substitute the result for self.tagname.
update self.tags dictionary with lib.tags.
get "_decorated_function" attribute from func, return func if the attribute doesnt exists,
substitute compile_function for self.tags dictionary value under the name key.
self.tags is an empty dictionary.
substitute tagtype for self.tagtype.
substitute takes_context for self.takes_context.
substitute target and expression for self.target and self.expression, respectively.
substitute target_var for self.target_var.
substitute template for self.template.
call the method self.template_cache.clear.
substitute a tuple with 2 elements: template and None, for self.find_template_cache dictionary value under the key key.
substitute a tuple with 2 elements: template and origin, for self.find_template_cache dictionary value under the key key.
substitute TemplateDoesNotExist for self.find_template_cache dictionary value under the key key.
self.template_cache is an empty dictionary.
substitute template_dirs for self.template_dirs.
substitute template for self.template_name.
substitute parser for self.template_parser.
substitute template_string for self.template_string.
get the value from the options dictionary under the key 'test_database', or False if the key dont exists, substitute it for self.test_database.
get the length of the options, use it as a starting index for the slicing arg list, substitute it for self.test_runner.
self.test_runner is None.
substitute text for self.text.
substitute timeout for self.timeout.
call the function get_default_timezone, substitute the result for self.timezone.
self.timezone is None.
substitute obj.tzinfo for self.timezone.
substitute timezone for self.timezone.
self.to is an empty list.
put to into a list, assign it to self.to.
if not self.pk_field is boolean False.   remove element from kwargs dictionary under the key 'to_field', substitute it for self.to_field if it exists,
substitute to_field_name for self.to_field_name
substitute token for self.token.
substitute token_type and contents for self.token_type and self.contents.
insert token at the beginning of self.tokens.
substitute mapped_tokens for self.tokens.
substitute tokens for self.tokens.
substitute tok for value under the groupid key of the self.toks dictionary.
self.tokens is an empty dictionary.
self.translate is boolean False.
self.translate is boolean True.
call the method self.unclosed_block_tag with an argument list with an element endtag.
call the method self.unclosed_block_tag with an argument parse_until.
call the method self.unget with list containing first remaining elements of chunk as an argument.
call the method unlink on self with self.name as the argument.
unpacked list args, unpacked dictionary kwargs.   substitute unpack_ipv4 for self.unpack_ipv4.
update self dictionary with updates.
self.upload_handlers is an instance of ImmutableList, created with 2 arguments: self.upload_handlers,
call the function iri_to_uri with an argument url, substitute the result for self.url.
substitute url_name for self.url_name.
substitute urlconf_name for self.urlconf_name.
substitute value under the 'use_ipv6' key of the options dictionary for self.use_ipv6.
self.use_ipv6 is boolean True.
substitute use_l10n for self.use_l10n.
remove the 'use_natural_primary_keys' key from the options dictionary and substitute it for self.use_natural_foreign_keys,
if the key doesnt exists substitute None for self.selected_fields.   remove the 'use_natural_keys' key from the options dictionary and substitute it for self.use_natural_keys,
if the key doesnt exists substitute self.use_natural_keys for self.use_natural_foreign_keys.   remove the 'use_natural_primary_keys' key from the options dictionary and substitute it for self.use_natural_primary_keys,
if use_ssl is None substitute settings.EMAIL_USE_SSL for self.username, if not substitute use_ssl for self.use_ssl.
if use_tls is None substitute settings.EMAIL_USE_TLS for self.username, if not substitute use_tls for self.use_tls.
substitute use_tz for self.use_tz.
if username is None substitute settings.EMAIL_HOST_USER for self.username, if not substitute username for self.username.
get the value under the 'database' key of the options dictionary, substitute it for self.database.
substitute val_expr for self.val_expr.
call the method self.validate with an argument display_num_errors set to boolean True.
call the method self.validate with an argument out.
call the method self.validate with an argument value.
call the method self.validate_key with argument key.
call the method self.validate_key with key as argument.
call the self.validate_key method with argument key.
call the method self.validate_name with 2 arguments: app_name and string 'app'.
call the method self.validate_name with 2 arguments name and app_or_project.
call the method self.validate_name with arguments project_name and string "project".
call the method self.validate_unique.
append self._regex_validator to self.validators.
call the method validators.MaxLengthValidator with max_length converted into an integer, append the result to list self.validators.
call the method validators.MaxValueValidator with max_value converted into an integer, append the result to list self.validators.
call the method validators.MinLengthValidator with min_length converted into an integer, append the result to list self.validators.
call the method validators.MinValueValidator with min_value converted into an integer, append the result to list self.validators.
remove self._regex_validator from self.validators.
add self.default_validators and validators, substitute the result for self.validators.
append val to self.vals.
self.vals is an empty list.
and unpacked dictionary kwargs.   call the function force_text with an argument self.value, substitute the result for self.value.
and unpacked dictionary kwargs.   for every v in self.value call the function force_text with an argument v, add the result to a set,
substitute value for self.value.
substitute var for self.var.
substitute var_obj for self.var.
substitute var_name for self.var_name.
substitute var1 and var2 for self.var1 and self.var2, respectively.
substitute variable_name for self.variable_name.
substitute variables for self.vars.
append block_content to a string 'end', substitute the result for self.verbatim.
self.verbatim is boolean False.
self.verbose_name is a string 'cache entry'.
self.verbose_name_plural is a string 'cache entries'.
get the value under the key 'exclude' of the options dictionary, convert it to an integer, substitute it for exclude.
get the value under the 'verbosity' key of the options dictionary, convet it to an integer and substitute for self.verbosity.
if not, self.hide_empty is boolean False.   get the value under the 'verbosity' key of the options dictionary, substitute it for self.verbosity.
get the value under the 'verbosity' key of the options dictionary, substitute it for self.verbosity.
get the value from the options dictionary under the key 'verbosity', substitute it for self.verbosity.
substitute value under the 'verbosity' key of the options dictionary for self.verbosity.
call the params.get method wit string 'VERSION' and integer 1 as arguments, substitute the result for self.version.
append list containing view_path to self.namespaces list, join all the elements into a string separated by character ':',
substitute view_name for self.view_name.
increment self.waiting_readers by 1.
self.waiting_readers is an integer 0.
self.waiting_readers is integer 0.
decrement self.waiting_writers by integer 1,
increment self.waiting_writers by integer 1,
self.waiting_writers is an integer 0.
substitute warning for self.warning.
substitute self.choices for self.widgetchoices.
substitute self.choices for self.widget.choices.
substitute widget for self.widget.
for every w in widgets, call the function w and append the result to a list, if w is an instance of type class,
get 'widgets' attribute from the options object, if it exists substitute it for self.widgets, if not self.widgets is None.
call the method self.write with 2 arguments: s and encoding.
call the method self.write_items with an argument handler.
call the method self.write_message with argument message.
call the method self.write_migration_files with an argument changes.
call the method self.write_po_file with 2 arguments: potfile and locale.
call the method self.writer_enters.
call the method self.writer_leaves.
append list containing string '--no-location' to self.xgettext_options.
append list containing string '--no-wrap' to self.xgettext_options.
call the method self.xml.addQuickElement with an argument string 'None'.
call the self.xml.addQuickElement method with 2 arguments: string 'object' and attr dictionary containing 1 entry:
call the method field.value_to_string with an argument obj, use the result as an argument for the call the method self.xml.characters.
call the function smart_text with argument key_value, use the result as an argument for the call to the self.xml.characters method.
call the function smart_text with argument related_att, use the result as an argument for the call to the self.xml.characters method.
call the self.xml.endDocument method.
call the method self.xml.endElement with an argument string "django-objects".
call the method self.xml.endElement with an argument string 'field'
call the method self.xml.endElement with an argument string 'field'.
call the method self.xml.endElement with an argument string 'natural'
call the method self.xml.startElement with an argument string 'natural'.
call the method self.xml.endElement with an argument string 'object'.
call the method self.xml.startElement with an argument string 'object'.
get the value under the 'indent' key of the options dictionary, multiply it with level, create a string containing number of  whitespaces equal to the previous result, append it to the string containing newline character, use the result as the argument for  the call to the self.xml.ignorableWhitespace method.
options dictionary, if the key doesnt exists use settings.DEFAULT_CHARSET instead.   call the self.xml.startDocument method.
call the method self.xml.startElement with 2 arguments, string "django-objects" and a dictionary containing 1 element: "1.0" for "version".
call the method self.xml.startElement with 2 arguments: string 'field' and dictionary containing 3 entries: field.name for 'name',
call the method self.xml.startElement with 2 arguments: string 'field' and a dictionary containing 2 entries: field.name for 'name',
call the method self.xml.startElement with arguments string 'natural' and an empty dictionary.
call the method self.xml.startElement with argument string 'natural' and an empty dictionary.
call the method self.xml.startElement with argument string 'object' and an empty dictionary.
call the method self.xml.startElement with arguments string 'object' and attrs.
self.xml is a instance of SimplerXMLGenerator class created with 2 arguments: self.stream and value under the 'encoding' key of the
self.year_none_value is a tuple containing 2 elements: integer 0 and first element of empty_label.
substitute self.none_value for self.year_none_value.
self.years is list containing 10 successive integers from this_year.
substitute years for self.years.
substitute tup for elements of self.
and unpacked dictionary kwargs.   join into a string permitted_methods, separated by string ', ', substitute it for value under the 'Allow' key of the self dictionary.
if not, self.reason_phrase is a string 'UNKNOWN STATUS CODE'.   substitute content_type for value under the 'Content-Type' key of the self dictionary.
and unpacked dictionary kwargs.   call the function iri_to_uri with an argument redirect_to, substitute the result for the value under the 'Location' key of the self dictionary.
substitute v for value under the k key of self dictionary.
substitute default for value under the key key of self dictionary.
substitute result for self dictionary under key key.
substitute result for value under key key of self dictionary.
call the method tuple.__new__ with 3 arguments: cls, unpacked list args and unpacked dictionary kwargs, substitute the result for self.
call the method self._send with argument message, substitute the result for sent.
append ')' to third element of bit, substitute it for sentinal.
remove 'sep' key from the kwargs dictionary, if it exists substitute it for sep, if not sep is None.
split first and second element of hextet into parts by ':', sum their lengths, substitute the result for sep.
substitute space for sep.
call the method connection.introspection.sequence_list if reset_sequences is true, substitute the result for seqs, if not, seqs is an empty tuple.
where '%s' is replaced with token.contents.   call the method parser.compile_filter with an argument, in_index incremented by one, and used to index parser.compile_filter,
call the method connection.ops.sequence_reset_sql with 2 arguments: return value of the no_style and self.models,
ser_fmt is None.
substitute the last element of parts for ser_fmt.
otherwise cmp_fmts is a list containing cmp_fmt.   call the method serializers.get_public_serializer_formats, substitute the result for ser_fmts if ser_fmt is None,
call the method serializers.get_serializer with an argument format.
call the method serializers.serialize with 6 arguments: format, result of the function get_objects, indent set to indent,
substitute module for the value under the format key of the serializers dictionary.
serializers is an empty dictionary.
server_address is a tuple containing 2 initial elements: addr and port.
convert the value under the 'SERVER_NAME' key of the self.META dictionary to a string, substitute result for server_port.
call the get_script_name function with environ as argument, use the result as an argument for call to the set_script_prefix function.
set attr.name attribute of the _MovedItemst object to attr.
set move.name attribute of the _MovedItems to move.
formated with 3 elements: class_name, old_method_name and new_method_name, deprecation_warning and integer 2.   set new_method_name attribute of the base object to old_method.
set old_method_name attribute of the base object to the result of the function wrapper called with an argument new_method.
set old_method_name attribute of the base object to the result of the function wrapper called with an argument old_method.
set k attribute of cls object to meth.
set opname attribute of cls object to opfunc.
set filter_func objec attr attribute to value.
set filter_func._decorated_function objects attr attribute to value.
use the result as an key to get the value of the form.data dictionary, assign it value None.   use return value of the self.fk.get_attname as the name of the attribute of form.instance object to set, set it to self.instance.pk.
set attr.name attribute of the Module_six_moves_urllib_error object to attr.
set attr.name attribute of the Module_six_moves_urllib_parse object to attr.
set attr.name attribute of the Module_six_moves_urllib_request object to attr.
set attr.name attribute of Module_six_moves_urllib_response object to attr.
set attr.name attribute of Module_six_moves_urllib_robotparser object to attr.
get attribute 'pk' of the pk_value object, if it doesnt exists use pk_value, set to it self.fk.get_attname return value attribute,
set self.name attribute of the obj object to result.
set result attribute name to value value.
set attr attribute of the self object to value.
set real_name attribute of the self object to value of real_name attribute of trans object.
set name attribute of self._wrapped object to value.
set accessor_name of the self.object to object_list.
sets the role attribute of the style object to the value of the call to the termcolors.make_style function with dictionary format as an argument.
call the method settings._setup.
settings.BASE_DIR.
call the method settings.configure.
call the method settings.configure with an argument USE_I18N set to boolean True.
call settings.INSTALLED_APPS.
call the settings.INSTALLED_APPS.
settings.SITE_ID.
settings.USE_I18N is boolean True.
get the value under the settings.__module__ key of the sys.modules dictionary,
add to the string sh the concatenation of '\\x' and the string str encoded in hexadecimal
concatenate '\\x' and the string str encoded in hexadecimal, then add it to sh
append to the variable shell the hexadecimal value of the variable c followed by a ', ' 
store in the variable shell the hexadecimal values of temp separated by the string '0x' and remove any trailing ','
assign the variable shell the bytearray hexadecimal values read from file f stripped from all whitespaces and remove all occurences of '\\t'
shell is an instance of IPShell class, created with an argument argv as an empty list.
shellrot is the sum of x and rot modulo 256
add "0x" to every 2 characters of the string shell
add "0x" to every 2 characters of the variable shell
concatenate '\\x' and the string byte encoded in hexadecimal, then append it to the string shellcode
append to the string shellcode the concatenation of '\\x' and the string value encoded in hexadecimal
concatenate the string '\\x' and the string value encoded in hexadecimal, then add it to shellcode
shellcode is a tuple containing the string "\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68"
shellcode is a string "\x31\xc0\x50\x89\xe2\x68\x62\x61\x73\x68\x68\x62\x69\x6e\x2f\x68\x2f\x2f\x2f\x2f\x89\xe3\x50\x53\x89\xe1\xb0\x0b\xcd\x80"
reverse the variable shellcode
remove the first 12 items from shellcode
update the variable shellcode by removing the first 12 elements from shellcode
remove the first 8 items from shellcode
Declare a variable shellcode and add the string '\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x89\xe2\x53\x89\xe1\xb0\x0b\xcd\x80' into it
store in the variable shellcode_encoded_hex the hexadecimal values of shellcode_encoded separated by the string '  '
store in the variable shellcode_encoded_hex the hexadecimal values of shellcode_encoded separated by the string '--'
store in the variable shellcode_encoded_hex the hexadecimal values of shellcode_encoded separated by the string '\\x'
store in the variable shellcode_encoded_hex the hexadecimal values of shellcode_encoded separated by the string '\\x'
store in the variable shellcode_encoded_nasm the hexadecimal values of shellcode_encoded separated by the string '0x' and remove any trailing ','
store in the variable shellcode_encoded_nasm the hexadecimal values of shellcode_encoded separated by the string '0x' and remove any trailing '?'
assign the variable shellcode_encoded_nasm the hexadecimal values of z separated by the string '0x' and remove any trailing ','
append to the variable shellcode_encoded the value of shellcode_original at index i+2 xor the variable r
append to the variable shellcode_encoded the value of shellcode_original at index i+3 xor the variable r
assign the variable shellcode_original the bytearray hexadecimal values read from file f stripped from all whitespaces and replace all '\\n' with ''
assign the variable shellcode_original the bytearray hexadecimal values read from file f stripped from all whitespaces and remove all occurences of '\\n'
assign the variable shellcode_original the bytearray hexadecimal values read from file f stripped from all whitespaces and replace all '\\t' with ''
assign the variable shellcode_original the bytearray hexadecimal values read from file f stripped from all whitespaces and remove all occurences of '\\t'
assign the variable shellcode_original the bytearray hexadecimal values read from file f stripped from all whitespaces and replace all '\\x' with ''
assign the variable shellcode_original the bytearray hexadecimal values read from file f stripped from all whitespaces and remove all occurences of '\\x'
read the file f as a bytearray from hexadecimal values and store the result in shellcode_original
assign the variable shellcode_original the bytearray hexadecimal values read from file f
store in the variable shellcode_original the bytearray hexadecimal values read from file f
assign the variable shellcode_original_hex the hexadecimal values of shellcode_original separated by the string '\\n'
assign the variable shellcode_original_hex the hexadecimal values of f separated by the string '\\x'
shellcode_original_hex is the hexadecimal values of shellcode_original separated by the string '\\x'
append to encoded a bytes object containing the value val3 packed according to the format string unsigned char
append 0x60 to shellcode1
append 0x80 to shellcode2
append 0x70 to shellcode3
append 0x50 to shellcode4
get the value under the 'traceback' key of the options dictionary, substitute the result for traceback.
add plan_node to the shown set.
shown is an empty set.
replace '%r' from string '\nServer stopped.\nNote that the test database, %r, has not been deleted. You can explore it on your own.',  with db_name, substitute it for shutdown_message.
get the value under the 'shutdown_message' key of the options dictionary, if it exists substitute it for shutdown_message,
call the method shutil.copyfileobj with 2 arguments: extracted and outfile.
call the function shutil.copymode with arguments old_path and new_path.
call the function shutil.move with arguments the_path and guessed_path.
call the function shutil.rmtree with 2 arguments: path_to_remove and onerror set to rmtree_errorhandler.
open '/dev/null' file in read mode, substitute the result for si.
call the method d.quantize with 3 arguments: exp, ROUND_HALF_UP and instance of Context class created with prec as prec,
call the method value.as_tuple, assign the result to sign, digittuple and exponent, respectively.
sign is a string '-'.
if offset is smaller than integer 0, sign is '-', otherwise sign is '+'.
if offset is lesser than integer 0, sign is set to '-', otherwise sign is '+',
if seconds smaller than integer 0, sign is '-', otherwise sign is '+',
return the result.   sign is an empty string.
call the method signal.signal with signal.SIGTTOU and old_handler, as arguments.
call the method signals.got_request_exception.send with the sender set to the type of this class, and request set to request as the arguments.
call the method signals.got_request_exception.send with sender set to type of the self class instance and request set to request.
call the signals.got_request_exception.send method with sender set to type of the self class instance and request set to request.
call the function signals.request_finished.connect with argument cache.close.
call the function signals.request_finished.connect with argument close_caches.
call the method signals.request_finished.send with an argument sender set to self._handler_class.
call the signals.request_started.send method with sender set to self.__class__ as argument.
signal is a string 'signals'
call the function base64_hmac with 3 arguments: string 'signer' appended to self.salt, value and self.key, substitute the result for signature.
call the function signed_value with an argument value, substitute the result for signed_value.
call the import_string function with an argument settings.SIGNING_BACKEND, substitute the result for Signer.
silent is boolean False.
silent is boolean True.
silent_variable_failure is an boolean True.
and re.IGNORECASE, substitute the result for simple_url_re.   call the function re.compile with raw string '&(?!(\w+|#\d+);)', substitute the result for simple_email_re.
call the function re.compile with 2 arguments: raw string '^www\.|^(?!http)\w[^@]+\.(com|edu|gov|int|mil|net|org)($|/.*)$',
call the function re.compile with 2 arguments: raw string '^https?://\[?\w' and re.IGNORECASE, substitute the result for simple_url_re.
substitute http_cookies.SimpleCookie for SimpleCookie.
multiply delta.days, integer 24, integer 60 and integer 60 add delta.seconds to it, substitute the result for since.
SINGLE_BRACE_END is a string '}'.
SINGLE_BRACE_START is a string '{'.
append string '%%(%s)s' to singular, where '%s' is replaced with t.contents.
append contents to singular.
singular is an empty list.
substitute first 2 elements of bits for singular_suffix and plural_suffix, respectively.
call the function BytesIO with self.buffer as argument, store the result is sio.
append j to sites.
append site to sites.
sites is an empty list.
added to a tuple with an element year, substitute the result for s1.   call the function _findall with 2 arguments: s1 and year converted into a string, substitute the result for sites1.
added to a tuple with an element sum of year an integer 28, substitute the result for s2.   call the function _findall with 2 arguments: s2 and sum of year and integer 28, converted into a string, substitute the result for sites2.
call the function reraise from the module six, with list of arguments exec_info.
call the function six.reraise with unpacked list exc_info as an argument.
  * The database isn't running or isn't configured correctly.\n  * At least one of the expected database tables doesn't exist.\n   "  * The SQL was invalid.\nHint: Look at the output of 'django-admin.py sqlflush'. That's the SQL this command wasn't able to run.\n"   "The full error: %s", where '%s' is replaced by value under the 'NAME' key of the connection.settings_dict dictionary and e.   call the function six.reraise with 3 arguments: CommandError, CommandError created with argument new_msg,
call the six.reraise function with 3 arguments: DeserializationError, DeserializationError called with an argument e,
call the function six.reraise with 3 arguments: DeserializationError, return value of the DeserializationError called with an argument e,
call the function six.reraise with 3 arguments: exc_type, exc_value and third element of the result of the method sys.exc_info.
call the function six.reraise with 3 arguments: ImportError, instance of ImportError class created with an argument msg,
call the function six.reraise with 3 arguments: ImproperlyConfigured, ImproperlyConfigured(msg) and third element of return value of the function sys.exc_info.
call the function six.reraise with 3 arguments: ImproperlyConfigured, instance of ImproperlyConfigured class created with msg,
call the method six.reraise with 3 arguments: MultiPartParserError, MultiPartParserError created with msg,
call the method six.reraise 3 with arguments: os_err_exc_type, return value of the function os_err_exc_type,
call the function six.reraise with 3 arguments: UnreadablePostError, UnreadablePostError instantiated with unpacked list e.args,
call the function six.reraise with 3 arguments: class ValidationError, class ValidationError, created with 3 arguments:
call the function six.reraise with 3 arguments: ValidationError, ValidationError created with 2 arguments:
call the function six.reraise with 3 arguments: ValueError, instance of a class ValueError, created with an argument string,
size is a property object with _get_size as getter method and _set_size as setter method.
get the position of the file self.file pointer, substitute it for size.
substitute self.remaining for size.
append a tuple containing 2 elemetns: model and deps, to skipped.
skipped is an empty list.
slots is a list with an element, slots.
get the value under the '__slots__' key of the orig_vars dictionary, substitute it for slots.
call the re.compile function with an argument raw string '^[-a-zA-Z0-9_]+$', substitute the result for slug_re.
mark_safe function, return the result.   call the function allow_lazy with 2 arguments: slugify and six.text_type, substitute the result slugify.
call the function re.compile with 2 arguments: raw string "((?:[^\s'"]*(?:(?:"(?:[^"\\]|\\.)*" | '(?:[^'\\]|\\.)*')[^\s'"]*)+) | \+)",
substitute smart_bytes for smart_str.
substitute smart_text for smart_str.
substitute smart_text for smart_unicode.
open out_log flie in append mode with buffering size of input buffer, substitute the result for so.
define lambda function that returns self.file.softspace field, use it as an argument for property function, put the result in softspace.
substitute complain for sort.
if f is an instance of ModelFiled, for every f in opts.virtual_fields, append f to a list, substitute the resulting list for sortable_virtual_fields.
sorted_issues is a list of tuples with 5 entries: criticals and 'CRITICALS', errors and 'ERRORS', warnings and 'WARNINGS',
sort elements of kwds, substitute the result for sorted_items.
call the function loader with 2 arguments name and dirs, substitute the result for source and display_name, respectively.
call the method self.load_template_source with arguments template_name and template_dirs, assign the result to source and display_name.
substitute string " " for space.
find first index of whitespace occurrence in line, add integer 1 to it, substitute the result for space.
get fist max_width incremented by 1 elements from line, find index of the first occurrenece of whitespace from the right side,
convert whitespace character to unicode and substitute the result for space.
special_floats is an list with 3 elements, pos_inf, neg_inf and nan, all converted to strings.
append bit to split.
split is an empty list.
app_name and model._meta.object_name, respectively.   evaluate connection.creation.sql_create_model method with model, no_style() and seen_models as arguments,
use the result as the argument for the call to the sql.extend method.   call the connection.creation.sql_for_pending_references method with refto, no_style() and pending_references as arguments,
call the connection.creation.sql_for_pending_references method with refto, no_style() and pending_references as arguments,
join into a file path: app_dir and string %s.%s.sql, where '%s' is replaced by opts.model_name and backend_name, respectively,
append the result to sql_files.   join into a file path: app_dir and string %s.%s.sql, where '%s' is replaced by opts.model_name, append the result to sql_files.
sql_files is an empty list.
call the method sql_flush with 5 arguments: self.style, connection, only_django set to boolean True,
call method executor.collect_sql with plan as the argument, substitute the result for sql_statements.
call the function force_text with 2 arguments: src and settings.FILE_CHARSET.
perform the following:   call the method fp.read, substitute the result for src_data.
with the result renamed to fp, perform the following:   call the method fp.read, substitute the result for src_data.
call the function prepare_js_for_gettext with an argument src_data, substitute it for src_data.
call the function os.stat with an argument filename, substitute the result for st.
call the os.stat function with argument src, substitute the result for st.
ingeter 0 and integer 0.   call the method _time.mktime with an argument tt, substitute the result for stamp.
call the method time.mktime with an argument tt, substitute the result for stamp.
call the method match.span, substitute the result for start an end, respectively.
increment start by length of toktext.
start is an integer 0.
call the method match.start, substitute the result for start.
remove first element from non_capturing_groups, substitute it for start.
call the method start_ipython with an argument argv as an empty list.
format the previous in a tuple, append the tuple to the response_headers.   call the start_response function with force_str(status) method return value and response_headers as arguments.
call the function re.compile with 2 arguments: raw string '<%s(/?>|(\s+[^>]*>))' formated with tags_re and re.U,
call the os.stat function with argument filename, store the return value in stat.
get the value under the 'cookies' key of the state dictionary,
call the method self.__dict__.copy, substitute the result for state.
substitute self.state for state.
substitute tok.next for state.
substitute compare_to for value under the state_frame dictionary under the self key.
value under the self key of state_frame dictionary is None.
call the method self._get_context_stack_frame with an argument context, substitute the result for state_frame.
append cleaned_lien to statement.
statement is an empty list.
join statements into a string, separated by white spaces, append it to statements.
statements is an empty list.
call the method connection.ops.sequence_reset_sql with 2 arguments self.style and models, substitute the result for statements.
call the method connection.ops.sql_flush with arguments: style, tables, seqs and allow_cascade, substitute the result for statements.
call the function sql_all with 3 arguments: app_config, self.style and connection, substitute the result for statements.
call the function sql_create with 3 arguments: app_config, self.style and connection, substitute the result for statements.
call the function sql_custom with app_config, self.style and connection as the arguments, substitute the result for statements.
call the function sql_destroy_indexes with 3 arguments: app_config, self.style and connection, substitute the result for statements.
call the function sql_destroy_indexes with 3 arguments: app_config, self.style and connection, substitute the result for statements.
call the function sql_indexes with app_config, self.style and connection as arguments, store the result in statements.
states is a dictionary with 2 arguments: appended list with an element instance of a class Tok, created with 3 arguments: "punct",
stats is a list with 2 elements: 2 integers 0.
increment stats dictionary value under the HITS key by integer 1.
increment stats dictionary value under the MISSES key by integer 1.
for value under the key key of the cache dictionary.   increment stats dictionary value under the MISSES key by integer 1.
stats is an list with 2 elements: 2 integers 0.
replace '%s' in the string '%s %s' with response.status_code and response.reason_phrase, respectively, substitute it for status.
status_code is an integer 200.
status_code is an integer 301.
status_code is an integer 302.
status_code is an integer 304.
status_code is an integer 400.
status_code is an integer 403.
status_code is an integer 404.
status_code is an integer 405.
status_code is an integer 410.
status_code is an integer 500.
and result of the bitwise OR performed on the re.MULTILINE and re.DOTALL operands, substitute the result for plural_forms_re/   STATUS_OK is integer 0.
created with arguments sys.stderr and self.style.ERROR.   replace '%s' in string '%s: %s' with e.__class__.__name__ and e, respectively, write it to the stderr stream.
if it exists, get 'stderr' attribute of self, substitute it for stderr, if not, stderr is an instance of OutputWrapper class,
step is an string 'any'.
call the object Decimal with string '1' as an argument, divide it by 10, bring the result to the power of self.decimal_places,
add the string value '\\s' to the variable str
append string '\\x' to str
convert the value of x bitwise and y to hex, append the string "," and save it in str
convert the value of x bitwise or y to hex, append the string "," and save it in str
Convert the value of z bitwise or 0xff to a hexadecimal then add it to the variable str followed by ','
append the string value '0x' to the variable str
slice the hexadecimal value of leader at index 5 and append it to str
declare an empty string and save in str
empty string str 
str is a string ""
join hidden_fields elements into a string, without separation, substitute the result for str_hidden.
call the function six.text_type with an argument number, substitute the result for str_number.
remove the first element from str_number.
append the string '\\x' to the string str1
append the hexadecimal conversion of byte followed by ', ' to the string str1
convert the value of x bitwise and y to hex, append the string "," and save it in str1
convert the value of x bitwise or y to hex, append the string "," and save it in str1
add the string value '0x' to the variable str1
append the string value '0x' to the variable str1
convert to hexadecimal the value of str and save it in str1
convert to hex the value of str and store it in str1
str1 is a string containing '0x'
str1 is an empty string
declare an empty string and save in str1
append str2 to str1
append to str1 a bytes object containing the value byte packed according to the format string unsigned char
append the string '\\t' to the string str2
convert the value of val to hexadecimal, concatenate it with ', ' and save the results in str2
add string '0x' to str2
add '0x' to the string str2
add the string value '0x' to the string str2
append the first 4 element of leader converted in hex to the string str2
initialize the empty string str2
str2 is a string containing the hexadecimal conversion of str1
convert to hexadecimal the value of str1 and save it in str2
initialize the string str2 to '0x'
str2 is the concatenation of str2 and str1
add '\\val1' to str3
append the hexadecimal conversion of new followed by ', ' to the string str3
append '0x' to the string str3
append the string value '\\x' to the variable str3
append '\\x' to the string str3
add to the string str3 the first 7 element of leader converted in hex 
initialize an empty string str3
str3 is a string containing the hexadecimal conversion of str2
convert to hexadecimal the value of str2 and save it in str3
set the string str3 to '0x'
str3 is the concatenation of str3 and str2
add the string '0x' to str4
append to the string str4 the hexadecimal conversion of arr sliced at the index 6
concatenate str4 with str3 and store the result in str4
add to string str5 the hexadecimal value of tmp sliced at the index 10
concatenate str5 with str4 and save the result in str5
close the file stream.
call the method stream.unget with an argument chunk.
call the method stream.unget with last rollback elements of chunk as an argument.
call the method stream.unget with list containing elements of chunk list from the header_end incremented by integer 4 as a start index to the end as argument.
call the method stream.unget with elements of list chunk from the index next to the end.
instantiate class ChunkIter with 2 arguments: self._input_data and self._chunk_size, use it to instantiate LazyStream class,
open the output file in writing mode if output is true, assign the file descriptor to stream, otherwise stream is None.
substitute self._stream for stream.
substitute stream_or_string for stream.
call the function StringIO with an argument stream_or_string, substitute the result for stream.
substitute BytesIO for stream_class.
substitute StringIO for stream_class if content is an instance of six.text_type, otherwise substitute BytesIO for stream_class.
call the method self.open, substitute the result for stream_created.
call the method stream_or_string.decode with an argument string 'utf-8', substitute the result for stream_or_string.
call the method stream_or_string.decode with string 'utf-8' as argument, substitute the result for stream_or_string.
call the stream_or_string.read function, substitute the result for stream_or_string.
streaming is boolean False.
streaming is boolean True.
call the force_text function with 3 arguments: e.strerror, DEFAULT_LOCALE_ENCODING and strings_only set to boolean True.
strfunc is an instance of a class Name, created with 2 arguments: string "__str__" and prefix as unifunc.prefix.
call the function lazy with 2 arguments: _string_concat and six.text_type, substitute the result for string_concat.
substitute basestring for string_types.
assign StringIO.StringIO to StringIO and BytesIO.
substitute io.StringIO for StringIO.
called with an argument value, return the result.   call the function allow_lazy with 2 arguments: strip_entities, six.text_type, substitute the result for strip_entities.
called with 3 arguments: raw string '[^a-zA-Z0-9]', empty string and result of the method table_name.title.   strip_prefix is a lambda function with an argument s, return value is s without the first element if s starts with string 'u'',
called with an argument value, return the result.   call the function allow_lazy with 2 arguments: strip_spaces_between_tags, six.text_type, substitute the result for strip_spaces_between_tags.
call the color_style function, substitute the result for style.
style is an instance of the dummy class.
substitute return value of function no_style for style.
if f is not None append it to a list for every f in tuple containing 3 elements: style_func, self.style_func,
reverse the order of elements of styles.
split instructions by ',' character, substitute the result for styles.
convert git_changeset to string, append it to the string '.dev', replace it for sub.
sub is an empty string.
use fourth element of version as a key to get the value from mapping dictionary, append to it fourth element of version converted to string, substitute it for sub.
call the method pattern.resolve with an argument new_path, substitute the result for sub_match.
call the method sub_match_dict.update with an argument sub_match.kwargs.
sub_match_dict is a dictionary created from self.default_kwargs dictionary using mapping function match.groupdict.
call the get method with an argument string 'tried' on the first element of the e.args, substitute the result for sub_tried.
attrs as attrs_plus and choices as choice_label.   substitute self.choice_input_class for sub_ul_renderer.choice_input_class.
sub_ul_renderer is an instance of ChoiceFieldRenderer class, created with 4 arguments: name as self.name, value as self.value,
subclass is a instance of a class named Migration, derived from the base class Migration, with 1 field:
subclass is a class named Migration, sub classed from migrations.Migration base class, with fields dependencies set to an empty list,
subcommand is a string 'help'.
substitute first element of self.argv for subcommand.
call the method self.fetch_command with first element of cwords as an argument, substitute it for subcommand_cls.
subject is an string '%s (%s IP): %s', formated with record.levelname, string 'internal' if value under the 'REMOTE_ADDR' key,
subject is an string '%s: %s' formated with record.levelname and result of the method record.getMessage, respectively.
call the function self.format_subject with an argument subject, substitute the result for subject.
substitute self.subject for subject.
call the function _helper with 2 arguments: sublist_item and tabs incremented by 1, substitute the result for sublist.
sublist is an empty string.
sublist is an string '\n%s<ul>\n%s\n%s</ul>\n%s', where every '%s' is replaced with indent, sublist, indent and indent, respectively.
substitute next_item for sublist_item.
sublist_item is None.
substitute title for sublist_item.
substitute the result for value under the 'clear_checkbox_name' key of the substitutions dictionary.   call the function conditional_escape with an argument checkbox_id,
call the function conditional_escape with an argument checkbox_name,
attrs as a dictionary with an entry: checkbox_id for 'id',   substitute the result for value under the 'clear' key of the substitutions dictionary.   format self.template_with_clear with substitutions, substitute the result for value under the 'clear_template' key of,
substitute the result for value under the 'clear_checkbox_id' key of the substitutions dictionary.   call the method render from the instance of CheckboxInput class, with 3 arguments: checkbox_name, boolean False,
call the function format_html with 3 arguments: self.url_markup_template, value.url and return value of the function force_text,
call the method render from the base class of the class ClearableFileInput, called with 3 arguments: name, value and attrs,
substitutions is a dictionary with 4 initial entries: self.initial_text for 'initial_text', self.input_text for 'input_text',
substitute value under the 'suffix' key of dictionary d, substitute it for suffix.
for every ext in combo, if ext is true, join it to a string, separated by '.', put the result in a tuple,
sup_cls is base class of the class cls.
call the method __init__ with an argument name form the base class of the class _LazyModule.
call the method __init__ from the base class of the class AssignmentNode, with 3 arguments: takes_context, args and kwargs.
call the method __init__ from the base class of the class BaseInlineFormSet, with 5 arguments: data, files, prefix set to prefix,
call the method add_fields from the base class of the class BaseInlineFormSet, with 2 arguments: form and index.
call the initialization method with argument params for the base class of the BaseMemcachedCache class.
call the method __init__ from the base class of the class BaseModelForm, with 8 arguments: data, files, auto_id, prefix, object_data,
call the method __init__ from the base class of the class BaseModelFormSet, with an argument unpacked dictionary defaults.
created with 4 arguments: qs, initial as pk_value, required as boolean False and widget as widget.   call the method add_fields from the base class of the class BaseModelFormSet, with 2 arguments: form and index.
call the method __init__ from the base class of the BaseTemporalField class, with arguments: unpacked list args and unpacked dictionary kwargs.
call the method __init__ from the base class of the class CharField, with arguments unpacked list args and unpacked dictionary kwargs.
call the method __init__ from the base class of the class CheckboxChoiceInput, with 2 arguments: unpacked list args,
call the method __init__ from the base class of the class CheckboxInput, with an argument attrs.
label set to None, initial set to None, help_text set to an empty string, unpacked list args and unpacked dictionary kwargs.   call the __init__ method of the base class of the class ChoiceField, called with 7 arguments: required set to required,
call the method validate with an argument value from the base class of the class ChoiceField.
call the method __init__ with 2 arguments: unpacked list args and unpacked dictionary kwargs, from the base class of the class ComboField.
call the method clean with an argument value from the base class of the class ComboField.
call the method __init__ form the base class of the Command class.
call the method add_arguments from the base class of the class Command, with an argument parser.
call the function add_arguments with parser as an argument, from the base class of the Command class.
call the add_arguments method from the base class of the class Command with parser as an argument.
call the parent class of Command class add_arguments method and parser as the arguments.
call the add_arguments method with parser as argument form the base class of the class Command.
call the method add_arguments from the base class of the Command class, with an argument parser.
call the method execute form the base class of the class Command, with 2 arguments: unpacked list args and unpacked dictionary options.
as an app name. Please try another name., where '%r' is replaced with app_name.   call the method handle from the base class of Command class, with 4 arguments: string 'app', app_name, target and unpacked dictionary options.
call the handle method of the base class of the Command class, with 4 arguments: string 'project', project_name, target,
call the handle function with dictionary pair of elements options from the base class of the class Command.
call the run_from_argv function from the base class of the Command class with argv as a argument,.
call the method __init__ from the base class of the CommandParser class, with unpacked dictionary kwargs as argument.
call the method error with an argument message, from the base class of the class CommandParser.
call the __init__ method with stream_class(content) and name set to name arguments, from the base class of the ContentFile class.
call the the method __init__ from the base class of the class Context.
call the method __init__ from the base class of the class ContextDict, with 2 arguments: unpacked list args and unpacked dictionary kwargs.
call the method __init__ from the base class of the class DateTimeBaseInput, with an argument attrs.
call the method __init__ from the base class of the class DebugLexer, with 2 arguments: template_string and origin.
call the method __init__ with an argument lexer, from the base class of the class DebugParser.
call the method extend_nodelist with 3 arguments: nodelist, node and token, from the base class of the class DebugParser.
call the method __init__ from the base class of the class DecimalField, with 4 arguments: max_value, min_value,
call the method validate with an argument value from the base class of the DecimalField class.
call the method __init__ from the base class of the Deserializer class with arguments stream_or_string and unpacked dictionary options.
call the method __init__ with an argument data, from the base class of the class DictWrapper.
call the method __init__ from the base class of the DTDForbidden class.
call the __init__ method from the base class of the EmailBackend class, with arguments: unpacked list args and unpacked dictionary kwargs.
call the __init__ method of the base class of the EmailBackend class with arguments: unpacked list args and unpacked dictionary kwargs.
call the method __init__ from the base class of EmailBackend class, with arguments: unpacked list args and unpacked dictionary kwargs.
use_tls set to None, fail_silently set to False, use_ssl set to None, timeout set to None and unpacked dictionary kwargs.   call the __init__ method from the base class of the EmailBackend class with argument fail_silently set to fail_silently.
call the method __init__ from the base class of the EmailMultiAlternatives class, with 9 arguments: subject, body, from_email, to,
call the method __init__ from the base class of the EntitiesForbidden class.
call the method __init__ with an argument initlist from the base class of the class ErrorList.
call the method __init__ from the base class of the ExternalReferenceForbidden class.
call the method __init__ from the base class of the Field class.
call method __init__ with argument params from the base class of the FileBaseCache.
substitute it for self.allow_empty_file, if not self.allow_empty_file is boolean False.   call the method __init__ from the base class of the FileField class, with 2 arguments: unpacked list args and unpacked dictionary.
call the __init__ method of the base class of the class FilePathField, with arguments: choices set to an empty tuple,4
call the method validate with an argument value, from the base class of the FloatField class.
call the __init__ method with unpacked list args and unpacked dictionary kwargs from the base class of the GenericIPAddressField class.
call the __init__ method from the base class of the HttpResponse class, with the arguments: unpacked list args and unpacked dictionary kwargs.
call the __init__ method from the base class of the HttpResponseNotAllowed class, called with arguments: unpacked list args,
call the __init__ method from the base class of the HttpResponseNotModified class, called with arguments: unpacked list args,
where '%s' is replaced with parsed.scheme.   call the __init__ method from the base class of the HttpResponseRedirectBase class, called with arguments: unpacked list args,
if not self.isolated_context is boolean False.   call the method __init__ from the base class of the class IncludeNode, called with 2 arguments: unpacked dictionary args,
call the method __init__ from the base class of the class InlineForeignKeyField, with 2 arguments unpacked list args,
call the method __init__ from the base class of the InMemoryUploadedFile base class, with 6 arguments: file, name, content_type,
call the method __init__ from the base class of the class IntegerField, with arguments unpacked list args and unpacked dictionary kwargs.
and RemovedInDjango19Warning.   call the __init__ method with unpacked list args and unpacked dictionary kwargs from the base class of the IPAddressField class.
call the method __init__ with 2 arguments: self.states and string 'reg' from the base class of the class JsLexer.
call the __init__ method from the base class of the JsonResponse class, called with arguments: content set to data,
call the method __init__ with an argument display_name, from the base class of the LoaderOrigin class.
call the __init__ method of the base class of the class LocaleRegexURLResolver, with arguments:  None, urlconf_name, default_kwargs, app_name and namespace.
created with 2 arguments: required as boolean False and widget set to HiddenInput.   call the method __init__ from the base class of the class ManagementForm, called with 2 arguments: unpacked list args,
call method __init__ from the base class of the class MemcachedCache with arguments: server, params,
call the new_file method form the base class from the MemoryFileUploadHandler class with arguments: unpacked list args and unpacked list kwargs.
widget set to None, label set to None, initial set to None, help_text set to an empty strign,   unpacked list args and unpacked dictionary kwargs.   call the method __init__ from the base class of the class ModelMultipleChoiceField, with 10 arguments: queryset, None,
call the method __init__ with an argument name form the base class of the class MovedAttribute.
call the __init__ method with an argument name from the base class of the MovedModule class.
call the method __init__ from the base class of the class MultipleHiddenInput, called with an argument attrs.
call the method __init__ from the base class of the class MultiValueDict, with an argument key_to_list_mapping.
call the method __setitem__ from the base class of the class MultiValueDict, with 2 arguments key and list containing element value.
call the method __setitem__ from the base class of the class MultiValueDict, with 2 arguments key and list_.
if not, self.require_all_fields is boolean True.   call the method __init__ with 2 arguments: unpacked list args and unpacked dictionary kwargs, from the base class of the class MultiValueField.
if not append w to the list, substitute the resulting list for self.widgets.   call the method __init__ from the base class of the class MultiWidget, with an argument attrs.
Use BaseCommand instead, which takes no arguments by default. and RemovedInDjango20Warning.   call the __init__ method from the base class of the NoArgsCommand class.
called with an argument string 'Unknown', tuple with 2 elements: string '2' and return value of the function ugettext_lazy,   called with an argument string 'Yes' and tuple with 2 elements: string '3' and return value of the function ugettext_lazy,   called with an argument string 'No'.   call the method __init__ from the base class of the class NullBooleanSelect, with arguments attrs and choices.
call the method __init__ from the base class of the class PasswordInput, called with an argument attrs.
call method __init__ from the base class of the class PyLibMCCache with arguments: server, params,
call the method __delitem__ from the base class of the QueryDict class, with an argument key.
call the __init__ method of the base class of the QueryDict class.
call the method __setitem__ from the base class of the QueryDict class, with arguments key and value.
call the method appendlist from the base class of the QueryDict class, with arguments key and value.
call the method clear from the base class of the class QueryDict, return the result.
substitute the resulting list for list_.   call the method setlist from the base class of the QueryDict class, with arguments key and list_.
call the method __init__ from the base class of the class RadioChoiceInput, with 2 arguments: unpacked list args,
call the method __init__ from the base class of the class RegexField, with 4 arguments: max_length, min_length, unpacked list args,
call the method __init__ from the base class of the class RendererMixin, with 2 arguments: unpacked list args,
call the method __init__ from the base class of the class Select, with an argument attrs.
call the handle_filed method of the base class of the Serializer class, with arguments obj and field.
from the base class of the SimpleCookie class call the method load with rawdata as argument.
call the __init__ method from the base class of the class SimpleTemplateResponse, with 3 arguments: an empty string, content_type and status.
call the __init__ method from the base class of the SimpleUploadedFile class with 7 arguments: BytesIO(content), None, name,
call the method __delitem__ from the base class of the class SortedDict, with an argument key.
call the method __init__ from the base class of the class SortedDict.
call the method __init__ from the base class of the class SortedDict, called with an argument data.
call the method __setitem__ from the base class of the class SortedDict, with 2 arguments key and value.
call the method clear from the base class of the class SortedDict.
error_messages as an dictionary with an entry: value under the 'invalid_date' of errors dictionary for 'invalid',   localize set to localize, and an instance of the class TimeField created with 3 arguments: input_formats set to input_time_formats,   error_messages as an dictionary with an entry: value under the 'invalid_time' of errors dictionary for 'invalid',   localize set to localize   call the __init__ method with fields, unpacked list args and unpacked dictionary kwargs from the base class of the SplitDateTimeField class.
and instance of TimeInput class, created with 2 arguments: attrs set to attrs and format set to date_format.   call the method __init__ from the base class of the class SplitDateTimeWidget, with 2 arguments: widgets and attrs.
call the method __init__ from the base class of the class SplitHiddenDateTimeWidget, with 3 arguments: attrs, date_format,  and time_format.
and unpacked dictionary kwargs.   call the __init__ method from the base class of the StreamingHttpResponse class, called with arguments: unpacked list args,
call the method __init__ with an argument UNKNOWN_SOURCE, from the base class of the class StringOrigin.
call the method __init__ from the base class of the class TemplateIfParser, with 2 arguments: unpacked list args and unpacked dictionary.
call the __init__ method from the base class of the class TemplateResponse, with 4 arguments: template, context, content_type, status.
call the __init__ method from the base class of the TemporaryFileUploadHandler class with arguments: unpacked list args,
call the method new_file from the base class of the TemporaryFileUploadHandler class with arguments: file_name, unpacked list args and unpacked dictionary kwargs.
call the method __init__ from the base class of the TemporaryUploadedFile class with arguments: file, name, content_type, size, charset and content_type_extra.
call the method __init__ from the base class of the class Textarea, with an argument default_attrs.
substitute self.input_type for self.input_type.   call the method __init__ from the base class of the class TextInput, called with an argument attrs.
call the method __init__ from the base class of the class Truncator,
if not, sself.empty_value is an empty string.   call the method __init__ with 2 arguments: unpacked list args and unpacked dictionary kwargs,
if not, self.empty_value is an empty list.   call the method __init__ with 2 arguments: unpacked list args and unpacked dictionary kwargs,
call the method validate with an argument value from the base class of the class TypedMultipleChoiceField.
call the __init__ method with arguments file and name, from the base class of the UploadedFile class.
call the __call__ method from the base class of the URLValidator class, with an argument url.
call the __call__ method from the base class of the class URLValidator, with an argument value.
call the __init__ method of the base class of the class URLValidator, with unpacked dictionary kwargs as argument.
call the __init__ method from the base class of the class ValidationError with arguments message, code and params.
call the __init__ method from the base class of the WSGIRequestHandler class, with 2 arguments: unpacked list args and unpacked dictionary kwargs.
call the __init__ method from the base class of the WSGIServer class, with 2 arguments: unpacked list args and unpacked dictionary kwargs.
call the server_bind method from the base class of the WSGIServer class.
call the function super_set with 2 arguments: key and value.
supported is boolean False.
supported is boolean True.
evaluate the logic expression, plat does not equals to string 'Pocket PC', and plat does not equals to string 'win32'
initialize an empty string variable called surname
separate every 5 characters of the string my_list with the separator ", "
separate every 4 characters of the string swapped with the separator "? "
separate every 4 characters of the string swapped with the separator ". "
add "0x" to every 2 characters of the variable swapped
add "0x" to every 2 characters of swapped
assign swapped the hexadecimal values of the bytearray of swapped
syear is a string "%04d" formated with dt.year.
join tmpdir and sting 'symlink' into a file path name, substitute it for symlink_path.
exit program with code integer 0.
close the process with an argument 0.
where '%r' is replaced with subcommand and '%s' is replaced with self.prog_name.   call the function sys.exit with an argument integer 1.
call the function sys.exit with an integer 1 as an argument.
call the function sys.exit with an argument integer 1.
close the process with an argument 1.
write it for self.stderr.   exit the program with the integer 2 as exit code.
call the function sys.exit with argument integer 3.
exit the program with failures converted to boolean as a message.
call the function sys.exit with argument exit_code.
concatenate __name__, string '.moves' and attr.name together, use it as an key to get the value from the sys.modules dictionary,
call the method Module_six_moves_urllib_request with an argument: string ".moves.urllib.error" appended to __name__,
call the method Module_six_moves_urllib_request with an argument: string ".moves.urllib_parse" appended to __name__,
call the method Module_six_moves_urllib_request with an argument: string ".moves.urllib.request" appended to __name__,
instantiate class Module_six_moves_urllib_response with an argument, string ".moves.urllib.response" appended to __name__,
instantiate class Module_six_moves_urllib_robotparser with an argument, string ".moves.urllib.robotparser" appended to __name__,
instantiate class Module_six_moves_urllib with an argument, string ".moves.urllib" appended to __name__,
insert options.pythonpath at the beginning of sys.path.
call the method sys.stderr.close.
call the method sys.stderr.write with an argument string "  as a FastCGI application, you will need to get flup from\n".
call the method sys.stderr.write with an argument string "  http://www.saddi.com/software/flup/   If you've already\n".
call the method sys.stderr.write with an argument string "  installed flup, then make sure you have it in your PYTHONPATH.\n".
call the method sys.stderr.write with an argument string "  Unable to load the flup package.  In order to run django\n".
call the method sys.stderr.write with an argument string "ERROR: %s\n", where '%s' is replaced by e.
call the method sys.stderr.write with an argument string "fork #1 failed: (%d) %s\n", formated with e.errno and e.strerror.
call the method sys.stderr.write with an argument string "fork #2 failed: (%d) %s\n", formated with e.errno and e.strerror.
call the method sys.stderr.write with an argument string "Unknown command: %r\nType '%s help' for usage.\n",
call the sys.stderr.write function with an argument msg.
sys.stderr is an instance of NullDevice class.
open err_log file in append mode with buffering size of the input buffer, substitute the result for sys.stderr.
call the method sys.stdin.close.
substitute so and se for sys.stdout and sys.stderr.
call the method sys.stdout.close.
call the method django.get_version append new line to it, write it to sys.stdout.
call the method self.main_help_text append new line to it, write it to sys.stdout.
and a list containing a string '-h',   call the method self.main_help_text, append new line to it, write it to sys.stdout.
call the method self.main_help_text with an argument commands_only set to boolean True, append new line to it, write it to sys.stdout.
sys.stdout is an instance of NullDevice class.
exit the program
exit the program with code 1
exit the program with exit code 2
call the function F with an argument x, for every x in sequence of integers from 1 to l, not included,
substitute file_name for t.
call the function get_template with an argument file_name, substitute the result for t.
call the function get_template with 2 arguments: template_name and dirs, substitute the result for t.
get 'value' attribute of the _active object, if it exists substitute it for t, if not t is None.
in the previous result for with string '\n', substitute the result for eol_message.   get 'value' attribute of the _active object, if it exists substitute it for t, if not t is None.
call the function re.sub with 3 arguments: string "([a-z])'([A-Z])", lambda function with an argument m and return value,
split string s once, with '=' sign as a delimiter, assign the resulting list to the t.
split string s once, with '=' as delimiter, substitute the result for t.
evaluates to true,   call the function select_template with an argument file_name, substitute the result for t.
call the function select_template with 2 arguments: template_name, dirs, substitute the result for t.
substitute self.current_token for t.
substitute self.waiting_readers for t.
call the __add__ method with an arguments rhs from the base class of the class SafeBytes, substitute the result for t.
call the __add__ method with an arguments rhs from the base class of the class SafeText, substitute the result for t.
t is an instance of Template class, created with 2 arguments output and name set to filepath.
call the ops.quote_name method with argument self._table on the value under the db key of connections dictionary, substitute the result for table.
call the ops.quote_name method with argument self._table on the object under the db key of connections dictionary, substitute the result for table.
substitute the result for connection.   get the value under the 'table_name_filter' key of the options dictionary, substitute it for table_name_filter.
table_names is an empty list.
for model in self.models append model._meta.db_table to a list, substitute the resulting list for table_names.
call the method connection.introspection.table_names with an argument cursor, substitute the result for table_names.
a string '%s_%s', where '%s' is replaced with tablename and f.name, respectively,   return value of the function qn called with an argument tablename and return value of the function qn called with an argument f.name.   join field_output elements into a string, separated by whitespaces, append it to table_output.
name set to a string 'cache_key', max_length set to integer 255, unique set to boolean True and primary_key set to boolean True,   return value of the method models.TextField called with argument name set to a string 'value',   and return value of the method models.DateTimeField called with 2 arguments: name set to string 'expires' and db_index set to True.   table_output is an empty list.
table2model is a lambda function with an argument table_name, return value is the return value of the re.sub method,
evaluate the method connection.introspection.table_name_converter with model._meta.db_table as argument, append it to tables.
call the method connection.introspection.django_table_names with an argument boolean true, substitute the result for tables.
call the method connection.introspection.table_names, substitute the result for tables.
call the connection.introspection.table_names with cursor as argument, store the result in tables.
assign the bits elements to tag, this_value_expr, max_value_expr, max_width, as_ and asvar.
assign the bits elements to tag, this_value_expr, max_value_expr and max_width, respectively.
substitute second element of bits for tag.
find the first subgroup of the matched string from the match object, strip the whitespaces from the begging and end, replace it for tag.
call the method m.group with an argument integer 0, use it as an argument for the call to the re_tag.match function,
substitute registry.tag_exists for tag_exists.
call the function re.compile with an argument string '(%s.*?%s|%s.*?%s|%s.*?%s)', substitute all occurrences of '%s' with,
compile a regular expression pattern string '([a-zA-Z][-.a-zA-Z0-9:_]*)(?:\s|/(?!>))*' into a regular expression object and assign it to tagfind.
substitute last element of bits for taglib.
taglib_module is an string '%s.%s', where '%s' is replaced to module and library_name.
convert tagname to lowercase, substitute it for tagname.
tags is a list containing results of the function re.escape with an argument tag, for every tag in tags split into words.
get the value under the 'tags' key of the options dictionary, if it exists substitute it for tags, if not, tags is None.
join elements of tags into a string, separated with '|', format string '(%s)' with it, substitute the result for tags_re.
call the method parser.compile_filter with an argument first element of bits, substitute the result for target.
target_app_labels_only is boolean False.
target_app_labels_only is boolean True.
join top_dir and relative_dir into a file path, substitute it for target_dir.
must be 'as'", where '%s' is replaced with function_name.   substitute last element of bits for target_var.
with '%s' substituted for migration_name and app_label, respectively, as arguments.   targets is a list containing tuple with two elements, app_label and migration.name.
replace all the '%s' occurrences with migration_name and app_label, respectively.   target is a list containing tuple with two elements app_label and migration.name.
targets is a list containing tuple with two elements, app_label and None.
with '%s' substituted for app_label, as arguments.   for every key in return vale of the method executor.loader.graph.leaf_nodes, check if the first element of key equals to app_label,
call the method executor.loader.graph.leaf_nodes and substitute its result for targets.
perform the previous for every combo in result of the function product called with 3 arguments: databases, ser_fmts and cmp_fmts,   substitute the result for suffixes.   join fixture_name and suffix into a string, separated by '.' for every suffix in suffixes, put the results in set, substitute it for targets.
move integer 1 left for 40 bits, substitute the result for TB.
define lambda function that returns self.file.tell field, use it as an argument for property function, put the result in tell.
append to the variable temp the hexadecimal value of the variable c followed by a ' ' 
append to the variable temp the hexadecimal value of the variable c followed by a ', ' 
append to the variable temp the hexadecimal value of the variable z followed by a ', ' 
convert c to a hexadecimal and append it to the variable temp
set the variable temp the hexadecimal value of the variable my_var followed by a ', ' 
set the variable temp the hexadecimal value of the variable z followed by a ', ' 
right shift by val2 the and operation between x and val1 and assign it to temp
Take the absolute value of subfs then convert subfs to an integer, then cast to a hexadecimal, slice the variable rev_suplx between the indicies 0 and 2 then cast rev_suplx to the type int16, store the value of the summation in the variable temp
generate a random integer between 1 and 255 then convert it into a hexadecimal and store the value in the variable called temp
compute the product of the variables magic and 250 then sum the result with i then store the result in the variable temp
multiply magic and 250 then sum the result with i then store the result in the variable temp
compute the division of the variables magic and 250 then sum the result with i then store the result in the variable temp
compute the modulus of the variables magic and 250 then sum the result with i then store the result in the variable temp
set the variable temp to a random integer between 17 and 255
compute the count of "," in the variable temp_1 and store the outcome in the variable temp
temp is the result of the or operation between val1 and val2
substitute value under the name key of the lib.filters dictionary for value under the name key of the temp_lib.filters dictionary.
substitute value under the name key of the lib.tags dictionary for value under the name key of the temp_lib.tags dictionary.
temp_lib is an instance of Library class.
set varaible temp to the 6th command-line argument after casting it to an int
add "0x" to every 2 characters of the string temp
call the function tempfile.mkdtemp with arguments: prefix set to prefix and suffix  set to string '_download'.
call the method tempfile.mkdtemp with 2 arguments: prefix set to prefix, suffix set to string '_extract', substitute the result for tempdir.
call the function loader with arguments name and dirs, assign the result to template and display_name, respectively.
call the function find_template with 2 arguments: template_name and dirs, substitute the result for template and origin.
call the method self.find_template with 2 argumetns: template_name and template_dirs, assign the result to template, origin, respectively.
an empty string for 'clear_template' and self.clear_checkbox_label for 'clear_checkbox_label'.   template is a string '%(input)s'.
call the method get_template with an argument template, substitute the result for template.
call the function get_template_from_string with 3 arguments: source, origin and template_name, substitute the result for template.
call the function get_template_from_string with 3 arguments: template, origin and template_name, substitute the result for template.
call the method self.resolve_template with an argument self.template_name, substitute the result for template.
call the method self.template.resolve with an argument context, substitute the result for template.
substitute self.template_with_initial for template.
template is an instance of Template class, created with an argument content.
remove first 7 elements form template.
join app_config.path and string 'templates' into file path, substitute it for template_dir.
call the method self.handle_template with 2 arguments: value under the 'template' key of the options dictionary and base_subdir.
call the function template_dir.decode with an argument fs_encoding, substitute the result for template_dir.
substitute app_template_dirs for template_dirs.
substitute settings.TEMPLATE_DIRS for template_dirs.
TEMPLATE_FRAGMENT_KEY_TEMPLATE is a string 'template.cache.%s.%s'.
template_source_loaders is None.
put loaders elements in a tuple, substitute it for template_source_loaders.
call the function force_text with an argument template_string.
if not, substitute template_dirs for key.   get the value under the key key of the self.template_cache dictionary, substitute it for template_tuple.
template_with_clear is a string '%(clear)s <label for="%(clear_checkbox_id)s">%(clear_checkbox_label)s</label>'.
template_with_initial is a string '%(initial_text)s: %(initial)s %(clear_template)s<br />%(input_text)s: %(input)s'.
call the function import_string with an argument loader, substitute the result for TemplateLoader.
substitute _templatetags_modules for templatetags_modules.
where '%s' is replaced with taglib_module.   templatetags_modules is an empty list.
call the function get_templatetags_modules, substitute the result for templatetags_modules.
add string '%s.templatetags' to a list, where '%s' is replaced with app_config.name,
templatetags_modules_candidates is an list with an argument string 'django.templatetags'.
terminal_char is an string ')'.
terminal_char is an string '>'.
call the method termios.tcsetattr with fd, termios.TCSANOW and attr_list, as arguments.
termios is None.
test_runner is an instance of TestRunner class, called with an argument unpacked dictionary options.
call the method test_runner_class.add_arguments with an argument parser.
default set to None and help set to string 'Overrides the default address where the live server (used '  'with LiveServerTestCase) is expected to run from. The default value is localhost:8081.'   call the function get_runner with arguments settings and self.test_runner, substitute the result for test_runner_class.
call the method get_runner with 2 arguments: settings and value under the 'testrunner' key of the options dictionary, substitute it for the TestRunner.
if text is true format with it and RESET a string '%s\x1b[%sm', if not format it with an empty string and RESET, substitute the result for text.
call the function force_text with an argument text, substitute the result for text.
call the method match.group with an argument integer 1, substitute the result for text.
remove first element of text.
call the function unicodedata.normalize with 2 arguments: string 'NFC' and self._wrapped, substitute the result for text.
call the function force_text with an argument v, for every v in args, put the results in a text_args list.
text_kwargs is a dictionary created from the result of the function force_text with an argument v, mapped through function k, for every k and v in return value of the kwargs.items.
substitute str for text_type.
substitute unicode for text_type.
call the function force_text with an argument value, substitute the result for text_value.
tf is an instance of TimeFormat class, created with an argument value.
call the function urlretrieve with arguments url and tempdir and filename joined into a file path, assign the result to the_path,  and info, respectively.
convert self.file to a string and append '.c' string to it, substitute the result for thefile.
convert self.file to string and append string '.py' to it, substitute the result for thefile.
substitute self.file for thefile.
call the function datetime.date.today, substitute the year field of the result for this_year.
call the function get_format with an argument string 'THOUSAND_SEPARATOR', substitute the result for thousand_sep.
call the function thread.start_new_thread with main_func, args and kwargs as arguments.
call the function thread.start_new_thread with main_func and args as arguments.
substitute value under the 'use_threading' key of the options dictionary for threading.
call the function time.sleep with an argument integer 1.
call the function time.sleep with argument integer 1.
compile regex from raw string '(?P<hour>\d{1,2}):(?P<minute>\d{1,2})(?::(?P<second>\d{1,2})(?:\.(?P<microsecond>\d{1,6})\d{0,6})?)?',
call the function date.strftime with an argument string '%s, %%d %s %%Y %%H:%%M:%%S ' formated with dow and month,
call the function date.strftime with an argument string '%Y-%m-%dT%H:%M:%S', substitute the result for time_str.
call the method time_str.decode with an argument string 'utf-8', substitute the result for time_str.
convert return value of the function time.time to an integer, increment timeout by it.
timeout is a integer -1.
timeout is integer 300.
convert timeout into an integer.
call the params.get method with string 'TIMEOUT' and integer 300 as arguments, use the string 'timeout' and previous result as the arguments for the call to the params.get method, substitute the result for timeout.
substitute self.default_timeout for timeout.
call the method self.get_backend_timeout with argument timeout, substitute the result for timeout.
call the baseconv.base62.decode method with an argument timestamp, substitute the result for timestamp.
call the strftime function with argument string "%Y%m%d-%H%M%S" on the return value of the function datetime.datetime.now, substitute the result for timestamp.
call the datetime.datetime.utcfromtimestamp with timestamp converted to an integer as argument, substitute result for timestamp.
stderr set to subprocess.PIPE, shell set to boolean True, cwd set to repo_dir and universal_newlines set to boolean True,   as arguments, substitute the result for git_log.   evaluate the method git_log.communicate, substitute first element of the result for timestamp.
substitute the result for year.   call the method dt.timetuple, substitute the result for timetuple.
call the function time.time, substitute the result for timeval.
multiply offset.days, integer 24 and integer 60, sum the result with floored result of dividing offset.seconds by integer 60,
multiply offset.days, integer 24 and integer 60, sum the result with floored result of division of offset.seconds,
call the function get_current_timezone, substitute the result for timezone.
substitute '%s' in the string " (%s squashed migrations)" with length of replaces filed of graph.nodes element at the plan_node index, append the string to the title.
title is an empty string.
substitute i-th element of list for title.
substitute second element of plan_node for title.
tmp is a string ""
initialize the variable tmp to an empty string
tmp is an empty string
strip url of surrounding '/' characters, substitute it for tmp.
call the function tempfile.mkdtemp, substitute the result for tmpdir.
call the method to_delete.add with an argument model.
to_delete is an empty set.
instantiate base class of the class ModelMultipleChoiceField, substitute filed to_python of the  result for to_py.
call the method self._get_to_python with an argument pk_field, substitute the result for to_python.
author_name set to None, author_link set to None, subtitle set to None, categories set to None, feed_url set to None,   feed_copyright set to None, feed_guid set to None, ttl set to None and unpacked dictionary kwargs.   to_unicode is an lambda function with an argument s, result is the result of the function force_text,
to_unicode is an lambda function with an argument s, result is the result of the function force_text,
increment Tok.num with an integer 1.
substitute the result for guts.   concatenate string '"', guts and string '"', substitute the result for tok.
tok is a string '"REGEX"',
replace every occurrence of '\\' in tok with 'U', substitute the result for tok.
substitute value under the name key of the toks dictionary for tok.
substitute self.lineno for token.lineno.
substitute the result for token.   assign self.origin, source to token.source.
and element of tokens at i incremented by 1 index equals a string "in",   token is a string "not in".
call the function get_token with an argument request, substitute the result for token.
call the method parser.next_token, substitute the result for token.
call the method self.next_token, substitute the result for token.
call the method create_token from the base class of the class DebugLexer, with 2 arguments: template_string and in_tag,
token is an instance of Token class, created with 2 arguments: TOKEN_BLOCK and block_content.
substitute the result for content.   token is an instance of Token class, created with 2 arguments: TOKEN_COMMENT and content.
token is an instance of Token class, created with 2 arguments: TOKEN_TEXT and token_string.
token is an instance of Token class, created with 2 arguments: TOKEN_VAR,
substitute i-th element of tokens for token.
TOKEN_BLOCK is integer 2
TOKEN_COMMENT is integer 3.
TOKEN_MAPPING is a dictionary with 4 initial entries: 'Text' for TOKEN_TEXT, 'Var' for TOKEN_VAR, 'Block' for TOKEN_BLOCK,
substitute value under the self.token_type key of the TOKEN_MAPPING dictionary for token_name.
TOKEN_TEXT is integer 0
TOKEN_VAR is integer 1
substitute self.toks for toks.
call the method match.group with an arugument name, substitute the result for toktext.
sum bottom and self.per_page, substitute the result for top.
substitute self.count for top.
ge the absolute path of the return value of the function path.expanduser with the argument target, substitute it for top_dir.
join the current working directory and name into a file path, substitute it for top_dir.
call the function _ with an argument string '(Hidden field %(name)s) %(error)s', where '%(name)s' is replaced with name,
TOTAL_FORM_COUNT is a string 'TOTAL_FORMS'.
substitute initial_forms for total_forms.
get the element with maximal value between initial_forms and self.min_num, add self.extra to it, substitute the result for total_forms.
substitute self.max_num for total_forms.
call the function touch_import with 3 arguments: string 'django.utils.encoding', string 'python_2_unicode_compatible' and decorated.
tpl is an string "DTDForbidden(name='{}', system_id={!r}, public_id={!r})".
tpl is an string "EntitiesForbidden(name='{}', system_id={!r}, public_id={!r})".
tpl is an string "ExternalReferenceForbidden(system_id='{}', public_id={})".
call the traceback.print_exc method.
sum trail and closing, substitute the result for lead.
sum punctuation and trail, substitute the result for trail.
formated with string created by joining elements of result of the function re.escape with an argument x, with separator '|',   for every x in DOTS, and re.DOTALL, substitute the result for hard_coded_bullets_re.   call the function re.compile with raw string '(?:<p>(?:&nbsp;|\s|<br \/>)*?</p>\s*)+\Z', substitute the result for trailing_empty_content_re.
TRAILING_PUNCTUATION is a list with 7 elements: '.', ',', ':', ';', '.)', '"' and '\''.
append bit to trans_bit.
trans_bit is a list with an element bit.
call the threading.local method, assign the result to trans_real._active.
trans_real._default is None.
trans_real._translations is an empty dictionary.
get the value under the 'content-transfer-encoding' key of the disposition meta_data, substitute it for transfer_encoding.
strip of the whitespaces first element of transfer_encoding, substitute the result for transfer_encoding.
call the function func with unpacked dictionary kwargs as an argument, substitute the result for translated.
format translated with rhs, substitute the result for translated.
translation._catalog is an empty dictionary.
translation._info is an empty dictionary.
call the method translation.activate with an argument string 'en-us'.
call the method translation.activate with an argument saved_locale.
call the method translation.activate with an argument settings.LANGUAGE_CODE.
Starting development server at http://%(addr)s:%(port)s/\n Quit the server with %(quit_command)s.\n,   where '"%(started_at)s' is replaced with now, '%(version)s' is replaced with return value of the method self.get_version,   '%(settings)r' is replaced with settings.SETTINGS_MODULE, '%(addr)s' is replaced with self.addr if self._raw_ipv6 is true,   or with self.addr if it is false, '%(port)s' is replaced with self.port and '%(quit_command)s' is replaced with quit_command.   call the method translation.activate with an argument settings.LANGUAGE_CODE.
call the method gettext_module.translation with 5 arguments: domain set to string 'django', localedir set to localedir,
call the function self._new_gnu_trans with 2 arguments: localedir and use_null_fallback, substitute the result for translation.
call the method self._new_gnu_trans with an argument localedir, substitute the result for translation.
call the function self._new_gnu_trans with an argument localedir, substitute the result for translation.
TRANSLATOR_COMMENT_MARK is a string 'Translators'.
substitute lineno for translators_comment_start.
translators_comment_start is None.
append list containing pattern to tried.
sub_match.url_name, self.app_name if it exists or if not sub_match.app_name and sub_match.namespaces list appended to self.name.   append pattern to tried list.
append filepath to tried.
call the method tried.extend with an argument: t added to a list containing element pattern, for every t in sub_tried.
tried is an empty list.
append taglib_module to tried_modules.
tried_modules is an empty list.
and generic_lang_code.   call the function re.compile with an argument string '\s*\n\s*', substitute the result for trim_whitespace_re.
if string 'trimmed' is contained in result of the method t.split_contents, trimmed is boolean True, otherwise is boolean False.
trimmed is boolean False.
call the function trim_url with an argument middle, substitute the result for trimmed.
call the function force_text with an argument truncate, substitute the result for truncate.
call the function pgettext with an argument 'String to return when truncating text', '%(truncated_text)s...', substitute the result for truncate.
define lambda function that returns self.file.truncate field, use it as an argument for property function, put the result in truncate.
decrement truncate_len by integer 1.
substitute length for truncate_len.
call the method self.add_truncation_text with 2 arguments: an empty string and truncate, substitute it for truncate_text.
try,
binary or os.O_EXCL if allow_overwrite is boolean False, use the previous as the mode to open new_file_name file, assign the file descriptor to fd.   try,
tr,
as the arguments, substitute the result for response.   try,
where '%r' are replaced by val and name, respectively.   try,
startapp' and 'startproject'.   try,
for every migration in merge_migrations.   try,
with all occurrences of '%s' replaced with app_name and model._meta.object_name, respectively.   try,
That port is already in use. for errno.EADDRINUSE and "That IP address can't be assigned-to." for errno.EADDRNOTAVAIL.   try,
where '%s' is replaced with app_label.   try,
where '%s' is replaced with node.nodeName and attr.   try,
where '%s' is replaced by lookup_view.   try,
substitute self.urlconf_module for self.urlconf_module.   try,
try
self.add_prefix called with an argument name, substitute the result for value.   try,
substitute the result for self.instance.   try,
where '%s' is replaced with taglib_module and e.   try,
and absolute value of p, substitute the result for exp.   try,
exception in Django 2.0." formated with num_loopvars and len_item, respectively, and RemovedInDjango20Warning.   try,
substitute the result for origin.   try,
substitute the result for result.   try,
trym
for every k in config, only if result of the function valid_ident called with an argument k evaluates to true.   try,
RemovedInDjango19Warning and stacklevel as integer 2.   try,
call the method _time.localtime with an argument stamp, substitute the result for tt.
create a tuple out a tuple with an element integer 2037 and a list tt elements without the first element, substitute the result for tt.
tt is a tuple with 9 elements: dt.year, dt.month, dt.day, dt.hour, dt.minute, dt.second, result of the method dt.weekday,
tt is an tuple with 9 elements: dt.year, dt.month, dt.day, dt.hour, dt.minute, dt.second, result of the function dt.weekday,
call the method time.localtime with an argument stamp, substitute the result for tt.
call the function force_text with an argument ttl, substitute the result for ttl.
call the method d.as_tuple, substitute the result for tupl.
substitute FIELD for TYPE,
substitute FILE for TYPE.
substitute RAW for TYPE.
call the function force_text, with the function get_current_timezone_name and errors set to string 'ignore' as arguments,
call the method tzinfo.__init__ with an argument self.
Use django.utils.timezone.get_default_timezone instead. and RemovedInDjango19Warning.   call the method tzinfo.__init__ with an argument self.
call the function get_fixed_timezone with an argument offset, substitute the result for tzinfo.
substitute the result for value under the 'microsecond' key of the kw dictionary.   remove entry under the 'tzinfo' key of the kw dictionary, substitute it for tzinfo.
if settings.USE_TZ is true substitute result of the function timezone.get_current_timezone for tzinfo, if not tzinfo is None.
substitute utc for tzinfo.
call the method dig2.digest, substitute the result for u.
call the method struct.pack with 2 arguments: bytes string '>I' and i, append the result to salt, substitute the result or u.
substitute date_check elements to uclass, lookup, field and unique_for, respectively.
substitute gettext for ugettext.
call the function lazy with 2 arguments: ugettext and six.text_type, substitute ugettext_lazy.
substitute gettext_noop for ugettext_noop.
substitute c_int64 for ULONG_PTR.
substitute c_ulong for ULONG_PTR.
call the function re.compile with raw string '&(?!(\w+|#\d+);)', substitute the result for unencoded_ampersands_re.
call the function allow_lazy with 2 arguments: unescape_entities and six.text_type, substitute the result for unescape_entities.
replace every occurrence of raw string '\\' in the result with string '\\', return the result.   call the function allow_lazy with an argument unescape_string_literal, substitute the result for unescape_string_literal.
substitute ngettext for ungettext.
remove first element of unhandled_params.
call the method unhandled_params.remove with an argument param.
convert params into a list, substitute it for unhandled_params.
slice list unhandled_params from the beginning to the length of defaults last element,
substitute chr for unichr.
as arguments for the call to the unicode function, return the result.  substitute unichr for unichr.
call the function force_text with arguments value and strings_only set to boolean True, substitute the result for unicode_value.
call the initialization method UnicodeDecodeError.__init__, with self instance of this class and *args as arguments.
call the method unifunc.replace with an argument strfunc.
substitute value under the "unifunc" key of the results dictionary for unifunc.
if f.unique is true, substitute "UNIQUE " for unique, otherwise unique is an empty string.
unique_check is a list with elements field, for every field in unique_check if field is not equal to self.fk.name.
call the method form.instance._get_unique_checks with an argument exclude as exclude, substitute the result for unique_checks,  and date_checks, respectively.
call the function get_tag_uri with 2 arguments: values under 'link' and 'pubdate' keys of item dictionary, substitute the result for unique_id.
substitute value under 'unique_id' key of item dictionary for unique_id.
subtract third element of tupl from length of second element of tupl, substitute the result for units.
UNKNOWN_SOURCE is a string '<unknown source>'.
substitute os.unlink for unlink.
UnlockFileEx.argtypes is a list containing 5 elements: HANDLE, DWORD, DWORD, DWORD and LPOVERLAPPED.
substitute BOOL for UnlockFileEx.restype.
substitute windll.kernel32.UnlockFileEx for UnlockFileEx.
if num_loopvars is greater than integer 1, unpack is an boolean True, otherwise is an boolean False.
zip self.loopvars and item is a list to tuples, convert the result to an dictionary, substitute it for unpacked_vars.
call the method self._stream.read with an argument integer 1, substitute the result for unused_char.
call the method update_watch.
call the function update_wrapper with 3 arguments: _dec, decorator and assigned as result of the function available_attrs,
call the function update_wrapper with 2 arguments: _wrapper and dummy.
call the function update_wrapper with 2 arguments: _wrapper and func.
call the function processor with an argument request, update updates dictionary with the result.
updates is an empty dictionary.
call the method value_from_datadict from the base class of the class ClearableFileInput,
upto is integer 0.
tuple with 2 elements: start and end and boolean False, append the result to result.   substitute end for upto.
call the method match.end, substitute the result for upto.
tuple with 2 elements: upto and start and boolean False, append the result to result.   substitute start for upto.
substitute the result for trail.   call the function escape with an argument url, substitute the result for url, call the function escape with an argument trimmed,
url is an empty string.
url is a string 'mailto:%s@%s' formated with local and domain.
call iri_to_uri with return value of the request.build_absolute_uri method, us the result as the argument for the call to the
call method request.build_absolute_uri, use the result as an argument for function call of iri_to_uri,
url is None.
url is a property of the class, lambda function is getter attribute with an argument self and return value is the value under the 'Location' key of the self dictionary.
call the function quote with 2 arguments: url and safe as bytes string '!*\'();:@&=+$,/?#[]~', substitute the result for url.
call the function reverse with 4 arguments: concatenated project_name, character '.' and view_name, args as args, kwargs as kwargs,
call the function reverse with 4 arguments: view_name, args as args, kwargs as kwargs and current_app as context.current_app,
call the function smart_urlquote with an argument string 'http://%s' formated with an argument middle, substitute the result for url.
call the function smart_urlquote with an argument middle, substitute the result for url.
call the function force_str with an argument url, use the result as an argument for the call to the function unquote, substitute the result for url.
replace every occurrence of '\\' in url with '/'.
call the function urlunsplit with a tuple containing 5 elements: scheme, netloc, path, query and fragment, as an argument, substitute the result for url.
call the function urlunsplit with an argument tuple with 4 elements: scheme, netloc, path, query and fragment, substitute the result for url.
substitute value for url.
first element of url_fields is string 'http'.
substitute third element of url_fields for second element of url_fields.
third element of url_fields is an empty string.
call the function urlunsplit with an argument url_fields, use the result as an argument for the call to the function split_url,
call the function split_url with an argument value, substitute the result for url_fields.
call the function urlparse with an argument url, substitute the result for url_info.
url_markup_template is a string '<a href="{0}">{1}</a>'.
url_schemes is list of strings 'http', 'https' and 'ftp'.
call the function get_urlconf with an argument urlconf.
substitute request.urlconf for urlconf.
substitute settings.ROOT_URLCONF for urlconf.
replace '%s' in string '<%s list>' with __class__.__name__ field of first element of self.urlconf_name, substitute it for urlconf_repr.
create a printable representation of self.urlconf_name object, substitute it for urlconf_repr.
call the function allow_lazy with 2 arguments: urlize, six.text_type, substitute the result for urlize.
and result of the function force_str called with an argument safe,   use the result as an argument for the call to the function force_text, return the result.   call the function allow_lazy with 2 arguments: urlquote and six.text_type, substitute the result for urlquote.
and result of the function force_str called with an argument safe,   use the result as an argument for the call to the function force_text, return the result.   call the function allow_lazy with 2 arguments: urlquote_plus and six.text_type, substitute the result for urlquote_plus.
call the method urlresolvers.set_urlconf with urlconf as the argument.
call the function urlresolvers.set_urlconf with urlconf as the argument.
use the result as an argument for the call to the function force_text, return the result.   call the function allow_lazy with 2 arguments: urlunquote and six.text_type, substitute the result for urlunquote.
use the result as an argument for the call to the function force_text, return the result.   call the function allow_lazy with 2 arguments: urlunquote_plus and six.text_type, substitute the result for urlunquote_plus.
append string "    %s", where '%s' is replaced by name to the usage.
append an empty string to usage.
call the method style.NOTICE with an argument string "Note that only Django core commands are listed as settings are not properly configured (error: %s).", where '%s' is replaced by self.settings_exception, append the result to usage.
call the style.NOTICE method with an argument string "[%s]", where '%s' is replaced with app, append the result to usage.
substitute '%s' in the string '%%prog %s [options] %s' with subcommand and self.args, respectively, substitute it for usage.
usage is a list containing 4 entries: an empty string, string "Type '%s help <subcommand>' for help on a specific subcommand.",
call the function get_commands, call the method keys on the result, substitute sorted result for usage.
get the value under the 'use_base_manager' key of the options dictionary, substitute the result for use_base_manager.
use_func is boolean False.
use_func is boolean True.
if settings.USE_L10N is true, substitute settings.USE_THOUSAND_SEPARATOR for use_grouping,
if use_grouping is true and grouping is greater than integer 0, use_grouping is boolean True, otherwise it is boolean False.
otherwise substitute settings.USE_L10N for use_grouping.   if use_grouping is true substitute it for use_grouping, otherwise substitute force_grouping for use_grouping.
USE_INOTIFY is boolean False.
USE_INOTIFY is boolean True.
and RemovedInDjango19Warning.   get the value under the ' use_natural_foreign_keys' key of the options dictionary, substitute the result for  use_natural_foreign_keys.
get the value under the 'use_natural_keys' key of the options dictionary, substitute the result for use_natural_keys.
get the value under the 'use_natural_primary_keys' key of the options dictionary, substitute the result for use_natural_primary_keys.
use_null_fallback is boolean False.
substitute it for localedir.   use_null_fallback is boolean True.
substitute value under the 'use_reloader' key of the options dictionary for use_reloader.
substitute connection.features.test_db_allows_multiple_connections for use_threading.
set use_workaround to boolean True if current_version tuple elements are smaller than the tuple (2,7,3), respectively,
append '.' to frag, append the result to used.
remove first element from name, substitute the result for used.
append att_name to used_column_names list.
used_column_names is an empty list.
filename and e.   split the_path at the '/' character, substitute last element of the result for used_name.
call the method value.rsplit with arguments character '@' and integer 1, assign the result to user_part and domain_part, respectively.
call the re.compile function with 2 arguments: raw string "(^[-!#$%&'*+/=?^_`{}|~0-9A-Z]+(\.[-!#$%&'*+/=?^_`{}|~0-9A-Z]+)*$",
call the function module_to_dict with an argument settings._wrapped, substitute it for user_settings.
call the function get_user_model, substitute the result for UserModel.
get the value under the 'database' key of the options dictionary, substitute the result for database.
string 'A secure pseudo-random number generator is not available on your system. Falling back to Mersenne Twister.'.   using_sysrandom is boolean False.
using_sysrandom is boolean True.
call the function re.compile with an argument string "([\u0080-\uffff])", substitute the result for ustring_re.
if pytz is true, substitute pytz.utc for utc, otherwise substitute result of the function UTC for utc.
call the function time.gmtime with argument timeval, use string '%Y%m%d%H%M%S' and the previous result as an argument for the call to the time.strftime function, substitute the result for utcdate.
utf8_charset.body_encoding is None.
call the function Charset.Charset with argument string 'utf-8', substitute the result for utf8_charset.
call the method utility.execute.
utility is a instance of ManagementUtility class, created with an argument argv.
substitute e and tb for v.__cause__ and v.__traceback__.
call the function v with an argument value.
call the method datetime.datetime.strptime with 2 arguments: return value of the function force_str called with an argument value,
raise an ValueError exception with an argument string 'Cannot resolve %r: %s', formated with s and e.
from the base class of the class SimpleCookie call the value_encode method with val as the argument, store the result in the val and encoded, respectively.
append iso_input to val.
call the method val.encode with argument string 'ascii'.
append to the string val the hexadecimal conversion of the value (7 - (256 -x))
convert (x+7) to hexadecimal and append it to val
call the function sanitize_address with arguments addr and encoding, for every addr in return value of the getadresses function with tuple containing val as argument, join all the results into a string separated by ', ', substitute the result for val.
set the variable val the hexadecimal value of the variable temp followed by a ', ' 
call the function force_text with argument val, substitute it for val.
get format_type attribute of module object, substitute the result for val.
call the encode function on the Header class instance, created with arguments val and encoding, substitute the result for val.
call the encode function on the Header class instance, created with argument val, substitute the result for val.
val is the result of the bitwise xor between the integer base 32 of the string byte encoded to hex and i
convert val to an list, substitute it for val.
val is None.
call the method self._cache.decr with key and delta as arguments, substitute the result for val.
call the self._cache.get method with argument key, substitute the result for val.
call the method self._cache.incr with key and delta as arguments, substitute the result for val.
call the self.get method with k and version set to version as arguments, substitute the result for val.
substitute value under the key key of self dictionary for val.
store in val1 2 to the power of max_bits multipied by 3
store in val1 2 to the power of max_bits divided by 3
assign val1 2 to the power of max_bits minus 1
store in val1 2 to the power of max_bits minus 1
set val1 to the reversed hexadecimal value of val2
val1 is the integer base 32 of the string byte encoded to hex
val1 is the result of the bitwise and between the integer base 32 of the string byte encoded to hex and temp
val1 is the result of the bitwise xor between the integer base 32 of the string byte encoded to hex and i
val1 is the result of the bitwise or between the integer base 32 of the string byte encoded to hex and i
call the method parser.compile_filter with an argument, second element of bits, substitute the result for val1.
assign val2 the hexadecimal value of the variable chunk at element converted to int16  xor with the variable xor_byte
assign val2 the hexadecimal value of the variable chunk at element converted to int 32
assign val2 the hexadecimal value of the variable chunk at element converted to int32  bitwise and with the variable xor_byte
val2 is the result of the bitwise xor between the int32 of the element i of chunk encoded to hex and xor_byte
assign val2 the hexadecimal value of the variable chunk at element converted to int32  xor with the variable xor_byte
store in val2 the hexadecimal value of the variable chunk at element converted to int32  xor with the variable xor_byte
val2 is the result of the bitwise or between the integer base 32 of the element i of chunk encoded to hex and xor_byte
call the function mask with the argument tmp2 and save the return value in val2
call the method self.var2.resolve with 2 arguments: context and boolean True, substitute the result for val2.
call the function create with the argument tmp3 and save the return value in val3
valid is boolean False.
valid is boolean True.
for every form in self.forms append form to a list, if function form.is_valid evaluates to true,
validate_comma_separated_integer_list is a instance of a RegexValidator class, created with 3 arguments: comma_separated_int_list_re,
and self.message equals to other.message, and self.code equals to other.code, return boolean True, otherwise return boolean False.   validate_email is an instance of EmailValidator class.
call the function validate_ipv4_address with an argument hextet.
call the function validate_ipv4_address with an argument value.
substitute the result for ipv4_re.   validate_ipv4_address is a instance of a RegexValidator class, created with 3 arguments: ipv4_re,
call the function validate_ipv46_address with an argument ip_address.
call the function validate_ipv6_address with an argument value.
validate_slug is a instance of a RegexValidator class, created with 3 arguments: slug_re, return value of the call to the function,
call the function convert_old_style_list with an argument value, substitute the result for value and converted, respectively.
split value into two parts by decimal_separator, assign the result to value and decimals.
call the signed_value.rsplit method with arguments self.sep and integer 1, substitute the result for value and sig, respectively.
call the result.rsplit method with arguments self.sep and integer 1, substitute the result for value and timestamp, respectively.
substitute self for value.configurator.
call the method value.decode with an argument charset.
call the method value.encode with an argument charset.
append value to the '-', substitute it for value.
reverse order of parts, join them into a string, separated with '.', substitute the result for value.
value is an empty string.
substitute '%s' in string '%s %s' with the elements of value converted into a tuple, substitute the result for value.
value is an string '1'.
value is an empty list.
for every v in value call the function conditional_escape with an argument v, append the result in a list, substitute the resulting list for value.
get the value under value key of a dictionary with 4 entries: '2' for boolean True, '3' for boolean False, '2' for '2',
call the self.make_bytes method with an argument chunk, for every chunk in value join the result to a bytes string,
convert value into boolean and substitute it for value.
call the method bytes_to_text with 2 arguments: key and self.encoding, substitute the result for value.
call the method bytes_to_text with 2 arguments: value and self.encoding, substitute the result for value.
call the method ops.process_clob with second element of row as argument, on the object under the db key of connections dictionary, substitute the result for value.
call the function converter with an argument suffix, substitute the result for value.
value is an instance of ConvertingDict class, created with an argument value.
value is an instance of ConvertingList class, created with an argument value.
value is an instance of ConvertingTuple class, created with an argument value.
get the value under the name key of the data dictionary, if it exists substitute it for value, if not, value is None.
get the name key of the data dictionary, substitute it for value.
call the method datetime_safe.new_date with an argument value, substitute the result for value.
call the method datetime_safe.new_datetime with an argument value, substitute the result for value.
value is an instance of a class Decimal created with value as an argument.
call the method dict.__getitem__ with 2 arguments self and key, substitute the result for value.
get value under key key of self dictionary, if it doesnt exists return default, substitute the result for value.
remove value under key key of self dictionary, if it doesnt exists return default, substitute the result for value.
convert key and default to strings, get the value under the key string key of the environ dictionary, if it does not exists use the,
call the function escape with an argument value, substitute it for value.
value is boolean False.
call the method field._get_val_from_obj with obj argument, substitute the result for value.
if not substitute field.initial for initial.   call the method filed.clean with arguments value and initial, substitute the result for value.
call the method field.clean with an argument value, substitute the result for value.
all the method field.rel.to._meta.get_field with field.rel.field_name as argument, call the to_python method on the result with,
call the function getInnerText with argument field_node, on the result call the method strip, use the result as an argument for the
call the method field.widget.value_from_datadict with 3 arguments: self.data, self.files and return value of the method,
substitute value under the attr key of flags dictionary for value.
convert value into an floating point number, substitute it for value.
call the function force_str with an argument value, substitute the result for value.
call the force_str function with an argument value, substitute the result for value.
call the function force_text with an argument value, substitute the result for value.
call the method formats.sanitize_separators with an argument value, substitute the result for value.
get attr attribute from the _module object, substitute it for value.
get return value of the field.get_attname function attribute of the obj object, substitute it for value.
unpacked list field_value as an argument, substitute the result for obj.   get field.rel.field_name attribute of the object obj, substitute it for value.
get opt attribute of the opts object, substitute it for value.
get 'clean_%s', where '%s' is replaced with name' attribute of the self object, call the result as an function,
convert s to integer of base 36, substitute it for value.
convert value into an string, convert the result into an integer and substitute it for value.
convert value to an integer.
call the method list.__getitem__ with 2 arguments self and key, substitute the result for value.
remove idx-th element from self list.
call the function localize with 2 arguments: value and use_l10n=context.use_l10n, substitute the result for value.
map elements of value through mapping function force_text, substitute the result for value.
substitute new_value for value.
call the function next with an argument cycle_iter, call the method resolve on the result with an argument context, substitute the result for value.
value is None.
call the function normalize_newlines with an argument value, substitute the result for value.
decode with an argument string 'ascii', substitute the result for name.   take elements of p from index i incremented by 1 to the end, strip the result of the whitespaces, substitute it for value.
and string 'ignore', call the method decode on the result with an argument string 'ascii', substitute the result for value.   call the method re.sub with 3 arguments: string '[^\w\s-]', empty string and value, strip the result of whitespaces from both ends,
call the method related.natural_key, substitute the result for value.
call method request.META.get with arguments header and None.
call the method self._convert_to_charset with arguments: header, string 'latin-1' and mime_encode set to boolean True,
substitute self._empty_value for value.
call the function self._resolve_lookup with an argument context, substitute the result for value.
call the function self.coerce with an argument value, substitute it for value.
call the method self.decompress with an argument value, substitute the result for value.
call the method self.get with key and version set to version as arguments, substitute the result for value.
call the self.get method with arguments key and version set to version, substitute the result for value.
call the self.get method with key and version set to version as arguments, substitute the result for value.
substitute self.literal for value.
call the method self.make_bytes with an argument value, substitute the result for value.
call the method self.queryset.get with an argument, unpacked dictionary with an element: value for key, substitute the result for value.
call the method self.to_python with an argument value, substitute it for value.
call the method self.to_python with an argument value, strip the whitespaces from the both ends of the result and substitute it for value.
call the method self.to_python with an argument value, strip the whitespaces from the result, substitute it for value.
call the self.to_python method with an argument value, strip the result of the whitespaces from the sides, substitute the result for value.
call the method self.val_expr.resolve with an argument context, substitute the result for value.
call the method signing.get_cookie_signer with an argument salt set to sum of key and salt,
call the method signing.get_cookie_signer with an argument salt set to sum of key and salt, call the method unsign on the result,
call the function smart_text with an argument value, strip the result of whitespaces from both ends and substitute it for value.
convert value, self.sep and return value of the function timestamp, concatenate them, substitute the result for value.
instantiate class Header with 3 arguments: value, string 'utf-8', maxlinelen set to sys.maxsize, call the encode method on it,
convert value to an string and substitute it for value.
call the method __getitem__ with an argument key from the base class of the class DictWrapper, substitute the result for value.
call the method to_python with an argument value, from the base class of the IntegerField class, substitute the result for value.
call the method clean with an argument value from the base class of the class TypedChoiceField, substitute the result for value.
call the method clean with an argument value from the base class of the class TypedMultipleChoiceField, substitute the result for value.
call the method to_python with an argument data from the base class of the class URLField, substitute the result for value.
call the method template_localtime with 2 arguments: value and use_tz=context.use_tz, substitute the result for value.
call the method timezone.normalize with an argument value, substitute the result for value.
call the function to_current_timezone with an argument value, substitute the result for value.
call the function to_current_timezone with an argument, substitute the result for value.
call the function token_kwargs with 3 arguments: remaining_bits, parser, support_legacy set to boolean False, substitute the result for value.
value is boolean True.
call the method tuple.__getitem__ with 2 arguments: self and key, substitute the result for value.
convery value into a tuple, substitute it for value.
call the function ugettext with an argument string "%s GB", substitute '%s' with the result of the call to the function,
call the function ugettext with an argument string "%s KB", substitute '%s' with the result of the call to the function,
call the function ugettext with an argument string "%s MB", substitute '%s' with the result of the call to the function,
call the function ugettext with an argument string "%s PB", substitute '%s' with the result of the call to the function,
call the function ugettext with an argument string "%s TB", substitute '%s' with the result of the call to the function,
call the function ungettext with 3 arguments: string "%(size)d byte", string "%(size)d bytes" and 0, '%(size)d' is replaced with 0,
call the function ugettext with 3 arguments, string "%(size)d byte", string "%(size)d bytes" and bytes,
strip whitespaces from both ends of unicode_value, substitute the result for value.
call the method unicodedata.normalize with 2 arguments: string 'NFKD' and value, encode the result with 2 arguments: string 'ascii',
substitute the result for url_fields.   call the function urlunsplit with an argument url_fields, substitute the result for value.
call the method value.astimezone with an argument timezone, substitute the result for value.
call the method value.decode with an argument charset, substitute the result for value.
call the method value.encode with an argument charset, substitute the result for value.
substitute value.pk for value.
replace every occurrence of arg is value for an empty string, substitute the result for value.
replace all the occurrences of '\\\\' in string value with '\\' and all occurrences of '\\"' for '"', substitute the result for value.
for every replacement in the resulting set,   replace every occurrence of replacement in value for an empty string, substitute the result for value.
strip whitespaces from both sides of the value, substitute it for value.
strip value of the first and last element.
get the value of the values dictionary under the value converted to lowercase key, substitute it for value, if the key doesnt exists,
call the method var.resolve with 2 arguments: context and True, substitute the result for value.
value_converters is a dictionary with 2 entries: 'ext_convert' for 'ext' and 'cfg_convert' for 'cfg'.
substitute _itervalues for values.
join elements of quant into a string, split it by string ',', substitute the result for values.
values is an empty list.
if values is None,
call the function parser.compile_filter with an argument arg for every arg in args from the index 1 to the index -2,
call the function parser.compile_filter with an argument arg for every arg in args from first element to the end,
for every bit in elements of bits without the first element, call the method parser.compile_filter, with an argument bit,
values is an dictionary with entries: return value of the method var.resolve with an argument context for name,
values is an dictionary with 2 arguments: boolean False for 'false' and boolean True for 'true'.
values is an dictionary created with result of the method val.resolve called with an argument context, for key,
convert values into a list, substitute it for value.
reverse elements order of values.
call the method self.sequence.resolve with 2 arguments: context and boolean True, substitute the result for values.
call the method match.group with 2 arguments: strings "var" and "constant", substitute the result for var and constant, respectively.
append the string '0x' to var
add the string '0x' to var
add the string value 'abc' to the variable var
append the string value 'abc' to the variable var
append the string value 'abc' to var
add the string value 'abc' to var
add the bytes literal "\x0a\x1b\x2c\x3d\x4e\x5f\x6a\x10\x56\x57\x68\x99\xa5" to var
append the bytes literal "\x0a\x1b\x2c\x3d\x4e\x5f\x6a\x10\x56\x57\x68\x99\xa5" to the variable var
append the bytes literal "\x0a\x1b\x2c\x3d\x4e\x5f\x6a\x10\x56\x57\x68\x99\xa5" to var
add the bytes literal "\x5b\x37\x42\x01\xbd\x3c\x72\x7c\x02\x3d\x5f\xc1\xcf" to var
append the bytes literal "\x5b\x37\x42\x01\xbd\x3c\x72\x7c\x02\x3d\x5f\xc1\xcf" to the variable var
append the bytes literal "\x5b\x37\x42\x01\xbd\x3c\x72\x7c\x02\x3d\x5f\xc1\xcf" to var
add the bytes literal "\x90\x4a\x5c\xf3\x1e\x81\x69\x14\x75\x72\xde\xac\x77" to var
append the bytes literal "\x90\x4a\x5c\xf3\x1e\x81\x69\x14\x75\x72\xde\xac\x77" to the variable var
append the bytes literal "\x90\x4a\x5c\xf3\x1e\x81\x69\x14\x75\x72\xde\xac\x77" to var
add the bytes literal "\x99\xaf\xbb\xed\xbe\x46\x56\x4e\x88\x72\x53\x44\x68" to var
append the bytes literal "\x99\xaf\xbb\xed\xbe\x46\x56\x4e\x88\x72\x53\x44\x68" to the variable var
append the bytes literal "\x99\xaf\xbb\xed\xbe\x46\x56\x4e\x88\x72\x53\x44\x68" to var
add the bytes literal "\x0d\x01\xc7\xe2\xf2\x52\x57\x8b\x52\x10\x8b\x4a\x3c" to var
append the bytes literal "\x0d\x01\xc7\xe2\xf2\x52\x57\x8b\x52\x10\x8b\x4a\x3c" to the variable var
append the bytes literal "\x0d\x01\xc7\xe2\xf2\x52\x57\x8b\x52\x10\x8b\x4a\x3c" to var
var is integer 1
remove first 2 and last 2 elements from var.
substitute sixth element of bits for var_name.
call the method self.create_variable_node with an argument filter_expression, substitute the result for var_node.
var_obj is None.
instantiate Variable class, with an argument constant, call the resolve method with an empty dictionary as an argument, substitute the result for var_obj.
var_obj is an instance of Variable class, created with an argument var.
Convert the value of val2 to hexadecimal, then slice it between the indicies 4 and 7, convert it to an int16 and add its value to var2
Convert the value of val3 to hexadecimal, then slice it between the indicies 9 and 10, convert it to an int16 and add its value to var3
Convert the value of val4 to hexadecimal, then slice it between the indicies 11 and 14, convert it to an int8 and add its value to var4
Convert the value of val5 to hexadecimal, then slice it between the indicies 1 and 3, convert it to an int8 and add its value to var5
Convert the value of val6 to hexadecimal, then slice it between the indicies 6 and 7, convert it to an int8 and add its value to var6
VARIABLE_ATTRIBUTE_SEPARATOR is a string '.'.
VARIABLE_TAG_END is a string '}}'.
VARIABLE_TAG_START is a string '{{'.
vary_headers is an empty list.
split the string cc_delim_re with value under the key 'Vary' of response dictionary as delimiter, substitute result for vary_headers.
split string cc_delim_re by value of dictionary response under the key 'Vary' as a delimiter, substitute it for vary_headers.
vary_on is an empty tuple.
substitute value under the 'verbosity' key of the options dictionary for verbosity.
get the value under the key 'verbosity' of options dictionary, substitute it for verbosity.
call the get_complete_version function with version as argument, store the result in version.
call the get_complete_version with an argument version, store the result in version.
substitute self.version for version.
substitute first element of parts for view.
call the function transaction.atomic, with using set to db.alias as the argument, return value is a function which is called,
substitute viewname for view.
get func_name attribute from the mod object, substitute it for view_func.
get the name of the type of the callback, append the string '.__call__' to it, substitute it for view_name.
get the name of the callback, substitute it for view_name.
result of the call to the method v.resolve with an argument context,   for result of the function smart_text called with 2 arguments k and string 'ascii'.   call the method self.view_name.resolve with an argument context, substitute the result for view_name.
if url_name exists substitute it for view_path, if not substitute .self._func_path for view_path.
where '%s' is replaced with first element of bits.   call the method parser.compile_filter with second element of bits as an argument, substitute the result for viewname.
increment visible_issue_count for length of issues.
call the method self.choice_input_class with 5 arguments: self.name, self.value, return value of the method self.attrs.copy,
call the function walk_to_end with 2 arguments: ch and pattern_iter.
want_unicode is boolean False.
want_unicode is boolean True.
warn_msg is a string "The translator-targeted comment '%s' (%sline %d) was ignored, because it wasn't the last item on the line.",
warning is a string 'ImmutableList object is immutable.'.
WARNING is integer 30.
substitute value under 'warning' key of kwargs dictionary for warning.
call the function warnings.simplefilter with 2 arguments: string "default" and RemovedInNextVersionWarning.
call the function warnings.warn with 2 arguments: string '"requires_model_validation" is deprecated '
call the function warnings.warn with 3 arguments: string 'import_by_path() has been deprecated. Use import_string() instead.',
call the function warnings.warn with 3 arguments: string 'Reversing by dotted path is deprecated (%s).', with '%s' replaced with
call the function warnings.warn with 3 arguments: string 'Using SplitDateTimeWidget with DateTimeField is deprecated. '
call the function warnings.warn with 3 arguments: string "`%s.%s` is deprecated, use `%s` instead.",
call the function warnings.warn with 3 arguments: string "`%s.%s` method should be renamed `%s`.",
call the function warnings.warn with 3 argument: string "AppCommand.handle_app() is superseded by AppCommand.handle_app_config().",
call the function warnings.warn with 3 arguments: string "django.utils.tzinfo will be removed in Django 1.9. "
call the function warnings.warn with 2 arguments: "django.utils.tzinfo.FixedOffset will be removed in Django 1.9. "
call the function warnings.warn with 2 arguments: string "django.utils.tzinfo.LocalTimezone will be removed in Django 1.9. "
call the method warnings.warn with 2 arguments: string "FastCGI support has been deprecated and will be removed in Django 1.9.",
call the function warnings.warn with 3 arguments: string "get_declared_fields is deprecated and will be removed in Django 1.9.",
call the function warnings.warn with 2 arguments: string "Need {0} values to unpack in for loop; got {1}. This will raise an
call the method warnings.warn with 2 arguments: string "No fixture data found for '%s'. (File format may be invalid.)",
call the function warnings.warn with 2 arguments: string "NoArgsCommand class is deprecated and will be removed in Django 2.0. "
call the function warnings.warn with 3 arguments: string "SortedDict is deprecated and will be removed in Django 1.9.",
call the function warnings.warn with 3 arguments: string "The django.forms.util module has been renamed. "
call the method warnings.warn with string '"validate" has been deprecated in favor of "check".' and RemovedInDjango19Warning as arguments.
call the function warnings.warn with 3 arguments: string '`MergeDict` is deprecated, use `dict.update()` instead.',
call the warnings.warn method with string '`request.REQUEST` is deprecated, use `request.GET` or `request.POST` instead.',
call the function warnings.warn with an argument,
substitute '%r' in string 'Cache key contains characters that will cause errors if used with memcached: %r' with key,
substitute '%s' in string 'Cache key will cause errors if used with memcached: %s (longer than %s)' with key,
call the function warnings.warn with string "'get_cache' is deprecated in favor of 'caches'.", RemovedInDjango19Warning,
call the function warnings.warn with an argument string "``--natural`` is deprecated; use ``--natural-foreign`` instead.",
call the function warnings.warn with 2 arguments: string "``use_natural_keys`` is deprecated; use ``use_natural_foreign_keys`` instead." and RemovedInDjango19Warning.
call the function warnings.warn with an argument string "A {% csrf_token %} was used in a template, but the context did not provide the value.  This is usually caused by not using RequestContext.".
call the function warnings.warn with 3 arguments: string "cache_choices has been deprecated and will be removed in Django 1.9.",
call the function warnings.warn with 2 arguments: string "Custom SQL location '<app_label>/models/sql' is deprecated, use '<app_label>/sql' instead." and RemovedInDjango19Warning.
call the function warnings.warn with 3 arguments: string "django.utils.dictconfig will be removed in Django 1.9.",
call the function warnings.warn with 3 arguments: string "django.utils.importlib will be removed in Django 1.9.",
call the function warnings.warn with 3 arguments: string "django.utils.unittest will be removed in Django 1.9.",
call the function warnings.warn with 2 arguments string "IPAddressField has been deprecated. Use GenericIPAddressField instead.",
call the function warnings.warn with 3 arguments:
call the method warnings.warn with an argument string "No fixture named '%s' found." where '%s' is replaced with fixture_name.
call the function warnings.warn with 2 arguments: string "OptionParser usage for Django management commands "
call the function warnings.warn with 3 arguments:
call the method warnings.warn with 2 arguments: string "The syncdb command will be removed in Django 1.9" and RemovedInDjango19Warning.
call the function warnings.warn with an argument string "Your TEMPLATE_LOADERS setting includes %r, but your Python installation
call the function warnings.warn with 3 arguments: msg, RemovedInDjango19Warning and stacklevel as integer 2.
call the method call the function warnings.warn with 3 arguments: msg formatted with language and value under the language key,
formated with c, filemsg and comment_lineno_cache.   call the function warnings.warn with 2 arguments: warn_msg and TranslatorCommentWarning.
and e.level is lesser than checks.WARNING and result of the method e.is_silenced in false.   append e to warnings list for every e in all_issues, if checks.WARNING is lesser than or equal to e.level,
decrement week_number by integer 1.
week_number is integer 1.
week_number is integer 52.
with an argument self.data.year decremented by 1, evaluates to true,   week_number is integer 53.
divide j by integer 7, substitute the floored result for week_number.
week_number is None.
weekday, increment the result by integer 1 and substitute it for jan1_weekday.   call the method self.data.weekday, increment the result by integer 1, substitute the result for weekday.
WEEKDAYS is an dictionary with 7 entries: result of the call to the function _ with an argument string 'Monday' for 0,
result of the call to the function _ with an argument string 'Tuesday' for 1,   result of the call to the function _ with an argument string 'Wednesday' for 2,   result of the call to the function _ with an argument string 'Thursday' for 3,   result of the call to the function _ with an argument string 'Friday' for 4,   result of the call to the function _ with an argument string 'Saturday' for 5,   and result of the call to the function _ with an argument string 'Sunday' for 6.   WEEKDAYS_ABBR is an dictionary with 7 entries: result of the call to the function _ with an argument string 'Mon' for 0,
result of the call to the function _ with an argument string 'Tue' for 1,   result of the call to the function _ with an argument string 'Wed' for 2,   result of the call to the function _ with an argument string 'Thu' for 3,   result of the call to the function _ with an argument string 'Fri' for 4,   result of the call to the function _ with an argument string 'Sat' for 5,   and result of the call to the function _ with an argument string 'Sun' for 6.   WEEKDAYS_REV is an dictionary with 7 entries: 0 for 'monday', 1 for 'tuesday', 2 for 'wednesday', 3 for 'thursday', 4 for 'friday',   5 for 'saturday' and 6 for 'sunday'.
increment weight by integer 2.
increment weight by integer 2.
weight is an integer 0.
in string '%s_%d', replace '%s' with new_name and '%d' with num, while the result is contained in used_column_names,
while '<' is contained in value and '>' is contained in value,
while i is lesser than num_existing and first pflen elements of i-th element of existing equals prefixed,
endless while loop,
endless loop,
while newline character is not contained in self.buffer and, size is None or length of self.buffer is less than size,
while bits is true,
while ch is not equal to a string '}',
while ch is not equal to terminal_char,
as long as current_chunk is not an empty string,
while current_len is smaller than or equal to length,
while end is greater than integer 0 and return value of the s.count called with 3 arguments: an empty string, integer 0 and end,
while escaped is true or ch is not equal to a string ']',
while factor is greater or equal to integer 0,
while field.rel is not None,
while i is smaller than l,
while i is lesser than length of subject and i-th element of subject is not equal to c,
while i is lesser than length of subject and i-th element of subject is not equal to p-th element of subject,
while i is lesser than length of subject and i-th element of subject is an empty space or tab character,
while i is lesser than length of subject and i-th element of subject is an empty space or tab character.
while i is lesser than length of subject and i-th element of subject is not an empty space or tab character,
while i is smaller than list_length,
as long k is smaller than endpos,
substitute the resulting list for digits.   while length of digits is smaller than or equal to absolute value of exponent,
while length of line is grater than max_width,
while model_dependencies is true,
while the result of the method new_name.find, called with an argument string '__' is greater or equals integer 0,
while answer is false or answer is not contained in string "yn", perform the following,
while bit doesnt end with sential,
while path is true,
while rbp is smaller than self.current_token.lbp,
while remaining is not equal to integer 0,
while remaining_bits is true,
substitute it for d.   while rest is true,
while RUN_RELOADER is true.
while first element of s is equal to bytes string ';',
as long as self.exists function with argument name evaluates to boolean True,
while self.tokens is true,
while start is lesser than end.
while t is greater than integer 0,
while token.contents starts with a string 'elif',
update widget.attrs dictionary with extra_attrs.
widget.input_type is a string 'hidden'.
substitute self.is_localized for widget.is_localized.
widget.is_localized is boolean True.
substitute self.required for widget.is_required.
substitute CheckboxInput for widget.
substitute ClearableFileInput for widget.
substitute DateInput for widget.
substitute DateTimeInput for widget.
substitute EmailInput for widget.
get the value under self._pk_field.name key of form._meta.widgets dictionary, if it exists substitute it for widget, if not,
widget is an instance of HiddenInput class
substitute HiddenInput for widget.
substitute NullBooleanSelect for widget.
substitute NumberInput for widget.
substitute Select for widget.
substitute SelectMultiple for widget.
substitute self.field.widget for widget.
substitute SplitDateTimeWidget for widget.
substitute substitute TextInput for widget.
substitute TimeInput for widget.
substitute URLInput for widget.
call the function widget, substitute the result for widget.
substitute self.widget if the widget is false, otherwise substitute widget for widget.
widget_value is None.
substitute i-th element of value for widget_value.
widgets is a tuple with 2 elements: instance of DateInput class, created with 2 arguments: attrs as attrs and format as date_format,
get property attribute _get_width, and substitute it for width.
call the function six.text_type with length of lines as an argument,
substitute WindowsError for WindowsError.
instantiate Archive class with an argument path, with it renamed to archive, perform,
call the function codecs.open with 3 arguments: sql_file, string 'r' and  encoding set to settings.FILE_CHARSET, with the result renamed to fp,
call the method connection.constraint_checks_disabled, with the result perform,
with the result,   evaluate method connection.cursor, with return value as curs,
with the result,   call the method connection.cursor, with the result as cursor,
otherwise returns s.   call the method connection.cursor, with the result as cursor,
call the method connection.cursor, with the result renamed to cursor, perform the following,
call the cursor method on the value under the db key of connections dictionary, preform following with return value named cursor,
call the method context.push, with the result perform,
call the context.push method, with the result, perform,
for every key and val in return value of the function six.iteritems called with an arguments self.extra_context.   call the method context.push with an argument unpacked dictionary values, with the result as an argument,
call the method context.push with unpacked dictionary values as an argument, with the result perform,
call the method context.push with an argument var set to output, with the result perform,
call the method context_instance.push with an argument dictionary, with the result perform,
call the function io.open with 3 arguments: django_po, string 'r' and encoding set to string 'utf-8' as arguments,
with return value of the function io.open with fname and string 'rb' as arguments, named as f,
with return value of the function io.open with fname and string 'rb' as arguments, named as f,
with call to the io.open function with fname and string 'rb' as arguments, renamed to f,
call the function io.open with 3 arguments: work_file, string 'w' and encoding set to settings.FILE_CHARSET as arguments,
call the function io.open with orig_file and encoding set to settings.FILE_CHARSET, with the result renamed to fp,
call the function io.open with 3 arguments: self.dirpath and thefile joined into a file path, string 'w',
replace all the occurrences of previous string in msgs for an empty string, substitute the result for msgs.   call the function io.open with 3 arguments: pofile, string 'w' and encoding set to string 'utf-8' as arguments,
call the function io.open with 3 arguments: potfile, string 'a' and encoding set to string 'utf-8' as arguments,
call the function io.open with 3 arguments: potfile, string 'r' and encoding set to string 'utf-8' as arguments,
call the function io.open with 3 arguments: potfile, string 'w' and encoding set to string 'utf-8' as arguments,
call the function io.open with 3 arguments: work_file, string 'w' and encoding set to string 'utf-8' as arguments,
otherwise substitute args for key.   with lock,
with lock,
open filename file in write mode, with the file descriptor renamed to outfile, perform,
open filepath file in read mode, with file descriptor as fp, perform,
open the file named filepath in read mode, with file descriptor renamed to fp perform,
open the file fn in read mode, with file descriptor as f,
open new_path file in 'wb' mode, with file descriptor renamed to new_file,
open file old_file_name in read bytes mode, with file descriptor as f,
string "%s already exists, overlaying a project or app into an existing directory won't replace conflicting files",   where '%s" is replaced with new_path.   open old_path file in 'rb' mode, with file descriptor renamed to template_file,
open the file whose name is stored in the value under the 'pidfile' key of options dictionary and mode 'w', with the file descriptor as fp,
with open file path in append mode,
open file named path in 'rb' mode, with file descriptor as f,
open pythonrc, with the file handle renamed to handle perform the following,
open writer.path file in write mode, with the file descriptor as fh, perform,
open writer.path file in write mode, with the file descriptor as fh, perform the following,
call the method self._lock, with the result,
call the method self._lock, with the return value,
call the self._lock.reader method, with the result perform the following,
call the self._lock.writer method, with the result perform the following,
with self.initLock,
with self.mutex perform,
with the call to the transaction.atomic method with using set to connection.alias, savepoint set to connection.features.can_rollback_ddl as arguments,
with call to the function transaction.atomic with using set to connection.alias and savepoint set to connection.features.can_rollback_ddl, as arguments.
with call to the function transaction.atomic with using set to connection.alias as argument,
evaluate method transaction.atomic with arguments: using set to database and savepoint set to connection.features.can_rollback_ddl,
call the method transaction.atomic with 2 arguments: using set to database, savepoint set to connection.features.can_rollback_ddl,
with return value of the function transaction.atomic with using set to db as arguments, perform the following,
call the method transaction.atomic with an argument using set to self.using, with the result,
call the method wm.add_watch with path and mask as arguments.
call the pyinotify.WatchManager method, assign the result to wm.
compile a regex from raw string '^\s*(\w+)\s*', substitute it for WORD_PATTERN.
call the function re.compile with raw string '(\s+)', substitute the result for word_split_re.
call the function escape with an argument word, substitute the result for i-th element of words.
format string '<a href="%s"%s>%s</a>' with lead, middle and trail, use it as an argument for the call to the function mark_safe,
call the function mark_safe with an argument word, substitute the result for i-th element of words.
call the function allow_lazy with an argument words, substitute the result for words.
split self._wrapped into words, substitute the result for words.
call the function force_text with an argument text, split by it word_split_re, substitute it for words.
substitute first length elements of words for words.
join self.dirpath and thefile in a string, substitute the result for work_file.
join self.dirpath, thefile into a file path, substitute it for work_file.
call the function allow_lazy with 2 arguments: wrap and six.text_type, substitute the result for wrap.
call the method self.make_view_atomic with callback as the argument, substitute the result for the wrapped_callback.
call the function check_errors with argument main_func, substitute the result for wrapped_main_func.
substitute user_function for wrapper.__wrapped__.
substitute cache_clear for wrapper.cache_clear.
substitute cache_info for wrapper.cache_info.
call the function warn_about_renamed_method with 2 arguments: class_name and unpacked list renamed_method, substitute the result for wrapper.
WRAPPING_PUNCTUATION is a list with 6 elements: tuple with 2 elements: '(' and ')', tuple with 2 elements: '<' and '>',
call the function write with an argument arg.
call the function write with an argument end.
call the function write with an argument sep.
define lambda function that returns self.file.write field, use it as an argument for property function, put the result in write.
call the function write_pot_file with 2 arguments: potfile and msgs.
define lambda function that returns self.file.writelines field, use it as an argument for property function, put the result in writelines.
writer is an instance of MigrationWriter class, created with an argument migration.
that occupies minimum 4 places within a string, and app_label, substitute the result for new_migration.   writer is instance of MigrationWriter class, created with new_migration argument.
substitute the result for new_migration.   writer is an instance of a class MigrationWriter, created with an argument new_migration.
set the value under the 'bindAddress' key of the wsgi_opts dictionary to a tuple containing 2 elements: value under the 'host' key,
set value under the 'bindAddress' key of wsgi_opts to None.
substitute the value under the 'socket' key of options dictionary for value under the 'bindAddress' key of wsgi_opts dictionary.
if value under the 'debug' key of options dictionary is not None, substitute it for value under the 'debug' key of wsgi_opts dictionary.
wsgi_opts is a dictionary with 4 initial entries: value under the key 'maxspare' of options dictionary converted to an integer,
wsgi_opts is a dictionary with 4 initial entries: value under the key 'maxspare' of options dictionary converted to an integer,
create the object WSGIServer with 2 arguments: get_internal_wsgi_application return value and unpacked dictionary wsgi_opts, call the method run on it.
substitute module.WSGIServer for WSGIServer.
append to x the hexadecimal conversion of the and operation between a and 0xff
append to x the and operation between a and 0xff converted to hexadecimal
append to x the hexadecimal conversion of the and operation between y and 0xff
perform the and operation between y and 0xff, then convert the result in hexadecimal and append it to x
add 1 to the variable x
increment the variable x by 1
increment x by 10
x is integer 0.
divide x by length of to_digits, convert floor value of the result to an integer, substitute it for x.
x is function rol with x and rand as parameters
multiply x by length of from_digits add the return value of method from_digits.index with digit argument, substitute the result for x.
shift x to the left by n, then store the result in x
x is x shifted left by n
update x with xor oxDD
xgettext_options is an list with elements: strings '--from-code=UTF-8' and '--add-comments=Translators'.
store in xor_byte the value of the function find_valid_xor_byte with chunk and bad_chars as parameters
xor_rot is shell_rot bitwise xor 0xAA
define lambda function that returns self.file.xreadlines field, use it as an argument for property function, put the result in xreadlines.
assign the variable xxx the hexadecimal integer absolute value of subfs minus rev_suplx converted to int16
assign the variable xxx the hexadecimal integer absolute value of subfs minus rev_suplx converted to integer 16
assign the variable xxx the hexadecimal integer absolute value of subfs modulous rev_suplx converted to int16
assign the variable xxx the hexadecimal integer absolute value of subfs plus the first 3 values converted to int16 of the variable rev_suplx
y is x converted to hexadecimal
assign the variable y the bytearray of the variable shellcode at index 0 bitwise bitwise and bytearray of shellcode at index 1
store in variable y xor of the bytearrays of the variable shellcode at index 0 and 1
format self.year_field string with name, use it as the key for the data dictionary, substitute the result for y.
convert y to int16
perform a left shift on x by n, then store the result in y
y is x shifted left by n
shift x to the left by n, then store the result in y
call the function yaml.dump with 4 arguments: self.objects, self.stream, Dumper=DjangoSafeDumper and unpacked dictionary self.options.
increment year by integer 1900.
increment year by integer 2000.
integer 0, appended to a string "strftime of dates before 1900 does not handle".   substitute dt.year for year.
call the method m.group with an argument string 'year', convert the result into a string, substitute it for year.
subtract year from integer 2000, divide the result by integer 28, floor the result, multiply it with 28 and increment by year,
sum year and off, substitute the result for year.
year_days is a list with 13 elements: None, integer 0, integer 31, integer 59, integer 90, integer 120, integer 151, integer 181,
year_field is a string '%s_year'.
for v in return value of the function match.groups, convert v into an integer and append i to a list,
and input_format, substitute the result for v.   substitute v.year, v.month and v.day for year_val, month_val and day_val, respectively.
substitute value.year, value.month and value.day for year_val, month_val and day_val, respectively.
year_val and month_val and day_val are set to None.
assign bits elements to yes, no and maybe, respectively.
substitute first, second and second elements of bits for yes, no, maybe, respectively.
yield nothing.
yield string '    %s', where '%s' is replaced with field_desc.
yield and empty string as the result.
get the first space decremented with integer 1 elements from string line, append newline character to it, and yield the result.
yield string 'from %s import models' % self.db_module as the result, where "%s" is replaced with result of the call to the function,
yield string 'day' as an return value of the generator.
yield string 'from %s import models' % self.db_module as the result, where "%s" is replaced with self.db_module.
yield string 'month' as an return value of the generator.
yield string 'year' as an return value of the generator.
yield string "#   * Make sure each model has one field with primary_key=True" as the result.
yield string "#   * Rearrange models' order" as the result.
yield string "#   * Remove `managed = False` lines if you wish to allow Django to create, modify, and delete the table" as the result.
yield string "# Also note: You'll have to insert the output of 'django-admin.py sqlcustom [app_label]'" as the result.
yield string "# Feel free to rename the models, but don't rename db_table values or field names." as the result.
yield string "# into your database." as the result.
yield string "# This is an auto-generated Django model module." as the result.
yield string "# You'll have to do the following manually to clean this up:" as the result.
yield string "#" as the result.
yield string "from __future__ import unicode_literals" as the result.
yield a tuple with 2 elements: an empty string and self.field.empty_label.
yield a tuple with 2 elements: tok.name and toktext.
join self into a bytes string, yield the result as the return value of the generator.
call the function base.DeserializedObject with obj and m2m_data as arguments, yield the result as the generator return value.
call the method bit.group with an argument integer 0, yield the result.
yield buf as return value of the generator.
and fileobj set to buf.   read data from buf file stream, yield the result.
read data from buf, yield the result.
yield one element from the buffer_ iterable.
yield ch and boolean False.
yield choice.
yield d.
yield one element of data iterable.
yield emitting as result of the generator.
yield field and ValidationError object converted to an list, created with an argument errors.
call the force_text with an argument message, yield the result.
call the function import_module with an argument string '%s.formats' formated with location, which is formated with loc,
yield item.
yield k.
yield key.
yield key and value under key key of self dictionary.
yield key and value under the key key of self dictionary.
yield one element of line iterable.
yield line.
yield meta_line as the result.
yield node.
yield node as an return value of a generator.
yield obj, as an return value of the generator.
yield obj as generator return value,
with 2 arguments: stream and Loader set to SafeLoader, and unpacked dictionary options,   yield one element of the itterable obj.
call the function parse_boundary_stream with 2 arguments: sub_stream and integer 1024, yield the result as the return value of the generator.
yield representative and boolean True.
call the function safe_join with 2 arguments template_dir and template_name, yield the result.
yield self.
call the method self.choice with an argument obj, yield the result.
read the whole self file and yield it as a generator return value.
yield value under key key of self dictionary.
get the value under the name key of the self dictionary, yield it as the return value of the generator.
yield subnode.
for every subwidget in the result,   yield subwidget, as the result of the generator.
yield an instance of SubWidget class created with 5 arguments: self, name, value, attrs and choices.
yield v.
yield widget.
Convert the variable x to a hexadecimal and append it to the variable z followed by ','
Convert the variable x to a hexadecimal, append the string ',' to it, the add it to the variable z
Convert the variable x to a hexadecimal, append the string ',' to it, the append it to the variable z 
append the string "a" and string "b" to z
slice the variable x at index 2 and add the value to the variable z
z is the sum of x and y modulo 64
assign the variable z the value of new left shift with the variable shift
set variable z to the 1st command-line argument
set variable z to the 5th command-line argument
set variable z to the 99th command-line argument
z is z shifted left by shift
get_current_timezone', 'get_current_timezone_name', 'activate', 'deactivate', 'override', 'localtime', 'now', 'is_aware',   'is_naive', 'make_aware' and 'make_naive'.   call the function timedelta with an argument integer 0, substitute the result for ZERO.
call the method zfile.close.
close zfile stream.
flush zfile stream buffer.
write item to zfile stream.
and fileobj set to zbuf.   call the method zfile.write with an argument s.
zfile is an instance of GzipFile class, created with 3 arguments: mode set to string 'wb', compresslevel set to integer 6,
zfile is an instance of GzipFile class, created with 3 arguments: mode set to string 'wb', compresslevel set to integer 6,
call the method zipfile.ZipFile.__init___ with the arguments self, unpacked list args and unpacked dictionary kwargs.