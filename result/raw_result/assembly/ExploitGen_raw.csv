var0 :
"mov eax , var0"
var0 : \n jmp short var1
var0 : \n jmp var1
var0 : \n jmp var1
var0 : \n jmp short var1
var0 : \n jmp short var1
var0 : \n jmp short var1
var0 : \n jmp short var1
var0 : \n jmp short var1
var0 : \n jmp short var1
var0 : \n jmp short stage
"add al , var0"
"add al , 3"
"add byte [var1] , var0"
"add byte [var1] , var0"
"add var0 , 4 \n jnz decode"
"add var1 , var0"
"add var1 , var0"
"add var0 , 2"
"add var0 , 2"
call var0
call var0
call var0
call var0
var0 : \n call [esp]
var0 :
var0 :
var0 : \n call var1
var0 : \n call var1
var0 : \n call [esp]
"var0 : \n cmp byte [var3] , 0x5f"
var0 :
var0 :
var0 : \n call var1
var0 : \n call var1
var0 : \n call var1
var0 : \n call var1
var0 : \n call [esp]
var0 :
"cmp al , cl \n jne short decode \n jmp shellcode"
"cmp var0 , var1 \n je shellcode"
"cmp var0 , var1 \n je var2 \n jmp var3"
"cmp byte [var0] , var1 \n je shellcode"
"cmp BYTE [esi] , var1 \n jne var0"
"cmp dword [var0] , var2 \n je var3"
var0 : inc var1
cycle :
dec al \n jz shellcode
"sub var0 , 1"
var0 :
var0 :
decode :
decode :
dec var0
decoder :
decode :
"var0 : \n cmp byte [esi] , var3 \n jl var1 \n sub byte [esi] , var2 \n jmp var6"
"dec var0 \n mov var1 , byte [esi]"
var0 : \n not byte [var1]
"dec byte [esi] , 13"
"var0 : \n xor byte [var1] , var2"
var0 : \n call [esp]
var0 :
var0 :
var0 :
decoder :
decoder :
decoder :
main :
decoder :
var0 : \n pop var1
var0 : \n pop var1
"var0 : \n pop var1 \n mov var2 , var1"
var0 : \n call var1
"var0 : db var1 , 0x2f , 0x68 , 0x69 , 0x62 , 0x87 , 0x6e , 0xb0 , 0xe3 , 0xcd , 0x0b , 0x90 , 0x80"
var0 : db var1
var0 : db var1
var0 : db var1
var0 : db var1
var0 : db var1
var0 : db var1
var0 : db var1
var0 : db var1
var0 : db var1
var0 :
var0 : \n jmp short esp
format :
formatting :
var0 :
global var0
global var0
inc var0
inc var0
inc var0
inc var0
inc var0
inc var0
inc var0
inc var0
inc var0 \n inc var0 \n inc var0 \n inc var0
inc var0
inc esi \n inc esi
inc esi \n inc esi
inc var0
inc var0 \n inc var0
inc esi \n inc esi
inc esi \n jmp short decode
var0 :
jmp decode
jmp short var0
"mov var0 , var1"
jmp short var0
jmp short cycle
jmp short decode
jmp short decode
jmp short decode
jmp var0
jmp short var0
jmp short var0
jmp short var0
jmp var0
jmp short cycle
jz var0
"lea var1 , [var0]"
"lea var1 , [var0]"
"lea var1 , [var0]"
"lea var0 , [esi]"
"lea var1 , [var0]"
"lea var1 , [var0]"
"lea var1 , [var0]"
loop var0 \n jmp short shellcode
loop decode
loop decode \n jmp var0
loop decrypt \n jmp short var0
loop decode \n jmp shellcode
loop decode \n jmp shellcode
loop decode \n jmp short var0
loop decode \n jmp short shellcode
loop var0 \n jnz var2
var0 :
var0 :
"mov [var0] , al"
"mov [var0] , al"
"xchg al , var0"
"mov al , byte [var0]"
"lea al , byte [var0]"
"mov al , byte [var0]"
"mov al , cl"
"mov al , dl"
"mov al , dl"
"mov ax , [var0]"
"var0 ax , word [var1]"
"mov var1 , var0"
"mov byte [var0] , bh"
"mov var0 , byte [esi]"
"mov var1 , var0"
"mov var1 , var0"
"mov var1 , byte [var0]"
"mov var1 , byte [var0]"
"mov var0 , byte [var1]"
"mov var1 , byte [var0]"
"mov var1 , byte [var0]"
"mov var1 , byte [var0]"
"mov var1 , byte [var0]"
"mov var0 , byte [var1]"
"mov var1 , byte [var0]"
"mov var1 , byte [var0] \n mov var1]"
"mov var1 , byte [esi+1]"
"mov var0 , cl"
"mov var1 , [var0]"
"mov byte [var0] , dl"
"mov var1 , var0"
"mov byte [var1] , var0 \n not byte [var1]"
"mov byte [var1] , var0"
"mov byte [var1] , var0"
"mov byte [var1] , dl"
"mov byte [var1] , var0"
"mov byte [var0] , dl"
"mov byte [var1] , var0"
"mov byte [var1] , cl"
"mov byte [var0] , bh"
"mov byte [var1] , var0"
"mov byte [var1] , var0"
"mov byte [var1] , var0"
"mov byte [var1] , var0"
"mov byte cl , 10"
"mov cl , 13"
"mov cl , al"
"mov cl , byte [var0]"
"mov cl , byte [var0]"
"mov cl , dl"
"mov dl , [var0]"
"mov dl , byte [esi]"
"mov eax , dl"
"mov dl , var0"
"mov dl , var0"
"mov dl , byte [var0]"
"mov dl , byte [var0]"
"mov dl , [var0]"
"mov dl , byte [var0]"
"mov dl , byte [var0]"
"mov var1 , var0"
"mov var1 , var0"
"mov var1 , var0"
"mov var0 , shellcode"
"mov var0 , esp"
"mov word [var0] , ax"
var0 : \n not dl \n inc dl
var0 : \n jmp short var1
not byte [var0]
var0 :
var0 :
var0 :
pop var0
pop var0
pop var0
pop var0
"pop cx \n mov cx , [var0]"
push shellcode
"push var0 \n mov var1 , var1"
ret
"rol byte [esi] , 1"
"ror var0 , cl"
"ror var0 , 1"
section .text
var0 equ $-shellcode
var0 : \n mov var1
shellcode : db var0
shellcode : db var0
var0 : db var1
shellcode : db var0
"shellcode : db var0 , 0x25"
var0 : db var1
"var0 : db var1 , 0x20"
shellcode : db var0
shellcode : db var0
var0 :
"shl var0 , 28"
"shl var0 , 28"
"shr ax , 1"
"shr ax , cl \n not word ax"
"shr var0 , 4"
"shr dl , 1"
"shr dl , 4"
"shr var0 , 24"
"shr var0 , 28"
stage :
"sub ax , 13"
"sub var0 , al"
"sub var0 , byte [esi]"
"sub byte [var0] , 8 \n not byte [var0]"
"sub cl , dl"
"sub dl , al \n jns var0"
"sub var1 , var0"
"sub var0 , var1"
"sub esp , var0"
var0 :
"cmp var1 , var2 \n jz var0"
"xchg al , [esi+1]"
"xor al , var0 \n jz short shellcode"
"xor ax , var0"
"xor ax , var0"
"xor ax , var0 \n jz decoded"
"xor byte [var0] , bh"
"xor var0 , var1 \n jnz var2"
"xor var0 , var1 \n jz encoded"
"xor var0 , var0 \n jz mov cl , var1"
"xor byte [var0] , var1"
"xor var0 , dl \n jnz short shellcode"
"xor byte [var0] , var1"
"xor byte [var0] , var1"
"xor byte [esi] , dl"
"xor byte [var0] , dl"
"xor byte [var0] , dl"
"xor dl , byte [esi+1]"
"xor byte [var0] , var1"
"xor cl , var0 \n jz short var1"
"xor cl , var0 \n jnz var2"
"xor cl , var0 \n jz short var2"
"xor cl , byte [var0]"
"xor dl , var0 \n jz var2"
"xor var0 , var0 \n mov al , var1"
"xor var0 , var0 \n mov al , 22"
"xor var1 , var1 \n mul var1"
"xor var0 , var0 \n xor var1 , var1 \n xor var2 , var2 \n xor var3 , var3"
"xor var0 , var0 \n xor var1 , var1 \n xor var2 , var2 \n xor var3 , var3"
"xor var0 , var0 \n xor var1 , var1 \n xor var2 , var2 \n xor var3 , var3"
"xor var0 , var0"
"xor var0 , var0"
"xor var0 , var0 \n mov bl , [esi+1]"
"xor var0 , var0 \n xor var1 , var1"
"xor var0 , var0"
"xor var0 , var0 \n mov cl , var1"
"xor var0 , var0 \n mov cl , var1"
"xor var0 , var0 \n mov cl , 23"
"xor var0 , var0 \n mov cl , 25"
"loop var0 \n mov var1 , var2"
"xor var0 , var1 \n mul var1"
"xor var1 , var1 \n mul var1"
"xor var1 , var1 \n mul var1"
"xor ebx , ebx \n mul ebx"
"xor var0 , var0 \n xor var1 , var1 \n xor var2 , var2 \n xor var3 , var3"
"xor var0 , ecx \n mov dl , [esi+1]"
var0 :
